// ======================================================================
// \title  LedComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Led component base class
// ======================================================================

#ifndef Components_LedComponentAc_HPP
#define Components_LedComponentAc_HPP

#include "Drv/Ports/GpioWritePortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Prm/PrmGetPortAc.hpp"
#include "Fw/Prm/PrmSetPortAc.hpp"
#include "Fw/Prm/PrmString.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Fw/Types/OnEnumAc.hpp"
#include "Os/Mutex.hpp"
#include "Svc/Sched/SchedPortAc.hpp"

namespace Components {

  //! \class LedComponentBase
  //! \brief Auto-generated base for Led component
  //!
  //! Component to blink an LED driven by a rate group
  class LedComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class LedComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_RUN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGOUT_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_LOGOUT_OUTPUT_PORTS = 1,
        NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
        NUM_PRMGETOUT_OUTPUT_PORTS = 1,
        NUM_PRMSETOUT_OUTPUT_PORTS = 1,
        NUM_TIMECALLER_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_GPIOSET_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_BLINKING_ON_OFF = 0x0, //!< Command to turn on or off the blinking LED
        OPCODE_BLINK_INTERVAL_SET = 0x1, //!< Opcode to set parameter BLINK_INTERVAL
        OPCODE_BLINK_INTERVAL_SAVE = 0x2, //!< Opcode to save parameter BLINK_INTERVAL
      };

      //! Event IDs
      enum {
        EVENTID_INVALIDBLINKARGUMENT = 0x0, //!< Indicates we received an invalid argument.
        EVENTID_SETBLINKINGSTATE = 0x1, //!< Reports the state we set to blinking.
      };

      //! Channel IDs
      enum {
        CHANNELID_BLINKINGSTATE = 0x0, //!< Channel ID for BlinkingState
      };

      //! Parameter IDs
      enum {
        PARAMID_BLINK_INTERVAL = 0x0, //!< Blinking interval in rate group ticks
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize LedComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return run[portNum]
      Svc::InputSchedPort* get_run_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to prmGetOut[portNum]
      void set_prmGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputPrmGetPort* port //!< The input port
      );

      //! Connect port to prmSetOut[portNum]
      void set_prmSetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputPrmSetPort* port //!< The input port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to gpioSet[portNum]
      void set_gpioSet_OutputPort(
          FwIndexType portNum, //!< The port number
          Drv::InputGpioWritePort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to prmSetOut[portNum]
      void set_prmSetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    public:

      // ----------------------------------------------------------------------
      // Parameter loading
      // ----------------------------------------------------------------------

      //! \brief Load the parameters from a parameter source
      //!
      //! Connect the parameter first
      void loadParameters();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct LedComponentBase object
      LedComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy LedComponentBase object
      virtual ~LedComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      FwIndexType getNum_cmdIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of run input ports
      //!
      //! \return The number of run input ports
      FwIndexType getNum_run_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegOut output ports
      //!
      //! \return The number of cmdRegOut output ports
      FwIndexType getNum_cmdRegOut_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      FwIndexType getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of logOut output ports
      //!
      //! \return The number of logOut output ports
      FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of logTextOut output ports
      //!
      //! \return The number of logTextOut output ports
      FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

      //! Get the number of prmGetOut output ports
      //!
      //! \return The number of prmGetOut output ports
      FwIndexType getNum_prmGetOut_OutputPorts() const;

      //! Get the number of prmSetOut output ports
      //!
      //! \return The number of prmSetOut output ports
      FwIndexType getNum_prmSetOut_OutputPorts() const;

      //! Get the number of timeCaller output ports
      //!
      //! \return The number of timeCaller output ports
      FwIndexType getNum_timeCaller_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      FwIndexType getNum_tlmOut_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of gpioSet output ports
      //!
      //! \return The number of gpioSet output ports
      FwIndexType getNum_gpioSet_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegOut is connected
      //!
      //! \return Whether port cmdRegOut is connected
      bool isConnected_cmdRegOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port logOut is connected
      //!
      //! \return Whether port logOut is connected
      bool isConnected_logOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port logTextOut is connected
      //!
      //! \return Whether port logTextOut is connected
      bool isConnected_logTextOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port prmGetOut is connected
      //!
      //! \return Whether port prmGetOut is connected
      bool isConnected_prmGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port prmSetOut is connected
      //!
      //! \return Whether port prmSetOut is connected
      bool isConnected_prmSetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port timeCaller is connected
      //!
      //! \return Whether port timeCaller is connected
      bool isConnected_timeCaller_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port gpioSet is connected
      //!
      //! \return Whether port gpioSet is connected
      bool isConnected_gpioSet_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port run
      virtual void run_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port run
      void run_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port gpioSet
      Drv::GpioStatus gpioSet_out(
          FwIndexType portNum, //!< The port number
          const Fw::Logic& state
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command BLINKING_ON_OFF
      //!
      //! Command to turn on or off the blinking LED
      virtual void BLINKING_ON_OFF_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::On on_off //!< Indicates whether the blinking should be on or off
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command BLINKING_ON_OFF
      //!
      //! Command to turn on or off the blinking LED
      void BLINKING_ON_OFF_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event InvalidBlinkArgument
      //!
      //! Indicates we received an invalid argument.
      void log_WARNING_LO_InvalidBlinkArgument(Fw::On badArgument) const;

      //! Log event SetBlinkingState
      //!
      //! Reports the state we set to blinking.
      void log_ACTIVITY_HI_SetBlinkingState(Fw::On state) const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel BlinkingState
      //!
      //! Telemetry channel to report blinking state.
      void tlmWrite_BlinkingState(
          const Fw::On& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Parameter update hook
      // ----------------------------------------------------------------------

      //! \brief Called whenever a parameter is updated
      //!
      //! This function does nothing by default. You may override it.
      virtual void parameterUpdated(
          FwPrmIdType id //!< The parameter ID
      );

      // ----------------------------------------------------------------------
      // Parameter load hook
      // ----------------------------------------------------------------------

      //! \brief Called whenever parameters are loaded
      //!
      //! This function does nothing by default. You may override it.
      virtual void parametersLoaded();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Parameter get functions
      // ----------------------------------------------------------------------

      //! Get parameter BLINK_INTERVAL
      //!
      //! \return The parameter value
      //!
      //! Blinking interval in rate group ticks
      U32 paramGet_BLINK_INTERVAL(
          Fw::ParamValid& valid //!< Whether the parameter is valid
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //!  Get the time
      //!
      //! \\return The current time
      Fw::Time getTime();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port run
      static void m_p_run_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter set functions
      // ----------------------------------------------------------------------

      //! Set parameter BLINK_INTERVAL
      //!
      //! \return The command response
      Fw::CmdResponse paramSet_BLINK_INTERVAL(
          Fw::SerializeBufferBase& val //!< The serialization buffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter save functions
      // ----------------------------------------------------------------------

      //! Save parameter BLINK_INTERVAL
      //!
      //! \return The command response
      Fw::CmdResponse paramSave_BLINK_INTERVAL();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port run
      Svc::InputSchedPort m_run_InputPort[NUM_RUN_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegOut
      Fw::OutputCmdRegPort m_cmdRegOut_OutputPort[NUM_CMDREGOUT_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port logOut
      Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port logTextOut
      Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

      //! Output port prmGetOut
      Fw::OutputPrmGetPort m_prmGetOut_OutputPort[NUM_PRMGETOUT_OUTPUT_PORTS];

      //! Output port prmSetOut
      Fw::OutputPrmSetPort m_prmSetOut_OutputPort[NUM_PRMSETOUT_OUTPUT_PORTS];

      //! Output port timeCaller
      Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port gpioSet
      Drv::OutputGpioWritePort m_gpioSet_OutputPort[NUM_GPIOSET_OUTPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter validity flags
      // ----------------------------------------------------------------------

      //! True if BLINK_INTERVAL was successfully received
      Fw::ParamValid m_param_BLINK_INTERVAL_valid;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Parameter variables
      // ----------------------------------------------------------------------

      //! Parameter BLINK_INTERVAL
      //!
      //! Blinking interval in rate group ticks
      U32 m_BLINK_INTERVAL;

    PRIVATE:

      // ----------------------------------------------------------------------
      // Mutexes
      // ----------------------------------------------------------------------

      //! Mutex for locking parameters during sets and saves
      Os::Mutex m_paramLock;

  };

}

#endif
