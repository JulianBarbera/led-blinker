
/home/fish/Documents/led-blinker/build-fprime-automatic-teensy41/bin/teensy41/LedBlinker.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200066c0 	.word	0x200066c0
6000142c:	2000d3e0 	.word	0x2000d3e0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc75 	bl	60001e50 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc48 	bl	60001e48 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc4d 	bl	60001e78 <____libc_init_array_veneer>
	main();
600015de:	f000 fc43 	bl	60001e68 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00028ef8 	.word	0x00028ef8
600015f0:	60001fa8 	.word	0x60001fa8
600015f4:	00000000 	.word	0x00000000
600015f8:	200066c0 	.word	0x200066c0
600015fc:	6002aea4 	.word	0x6002aea4
60001600:	20000000 	.word	0x20000000
60001604:	20006400 	.word	0x20006400
60001608:	00018cd5 	.word	0x00018cd5
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0001843d 	.word	0x0001843d
6000161c:	2000d368 	.word	0x2000d368
60001620:	00018441 	.word	0x00018441
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2000d36c 	.word	0x2000d36c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaafff 	.word	0xaaaaafff
6000166c:	00200007 	.word	0x00200007
60001670:	20050000 	.word	0x20050000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	2000d3e0 	.word	0x2000d3e0
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 f9fe 	bl	60001e60 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	2000d395 	.word	0x2000d395
60001ae4:	2000d2a4 	.word	0x2000d2a4
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	2000d358 	.word	0x2000d358
60001c88:	2000d354 	.word	0x2000d354
60001c8c:	2000d35c 	.word	0x2000d35c
60001c90:	2000d360 	.word	0x2000d360
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20006400 	.word	0x20006400
60001ca0:	00018ebd 	.word	0x00018ebd

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8c4 	bl	60001e40 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f8a1 	bl	60001e58 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f89d 	bl	60001e70 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20006400 	.word	0x20006400
60001d88:	000190a5 	.word	0x000190a5

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	2000d394 	.word	0x2000d394

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__usb_init_serialnumber_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__usb_init_serialnumber_veneer+0x4>
60001e44:	00019815 	.word	0x00019815

60001e48 <__pwm_init_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <__pwm_init_veneer+0x4>
60001e4c:	0001a199 	.word	0x0001a199

60001e50 <__set_arm_clock_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__set_arm_clock_veneer+0x4>
60001e54:	000186b5 	.word	0x000186b5

60001e58 <__delay_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__delay_veneer+0x4>
60001e5c:	000189a5 	.word	0x000189a5

60001e60 <__sm_set_pool_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__sm_set_pool_veneer+0x4>
60001e64:	0001a2fd 	.word	0x0001a2fd

60001e68 <__main_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__main_veneer+0x4>
60001e6c:	00018b89 	.word	0x00018b89

60001e70 <__memset_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__memset_veneer+0x4>
60001e74:	00024bed 	.word	0x00024bed

60001e78 <____libc_init_array_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <____libc_init_array_veneer+0x4>
60001e7c:	00024ce9 	.word	0x00024ce9

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045 00001a3d 0000218d 00004579     E...=....!..yE..
60001e90:	00014849 00017979 00018689 00021281     IH..yy..........

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    }
    return *this;
}

bool Buffer::operator==(const Buffer& src) const {
    return (this->m_bufferData == src.m_bufferData) && (this->m_size == src.m_size) && (this->m_context == src.m_context);
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      portNum < this->getNum_FatalReceive_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->FatalReceive_handler(
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_recv_OutputPort[portNum].registerSerialPort(port);
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    // Initialize all elements in the task table to nullptr
    for (U32 i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
        this->m_task_table[i] = nullptr;
    }
    Task::registerTaskRegistry(this);
}
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
    FW_ASSERT(funcPtr != nullptr);

    this->m_comp = callComp;
    this->m_func = funcPtr;
    this->m_connObj = callComp;
  }
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      portNum < this->getNum_cmdResponseIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->cmdResponseIn_handler(
      34:	4718      	bx	r3
      36:	4770      	bx	lr
      portNum < this->getNum_TextLogger_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->TextLogger_handler(
      38:	200066c0 	.word	0x200066c0
    FW_ASSERT(this->m_func != nullptr);

    this->m_func(this->m_comp, this->m_portNum);

    return Fw::FW_SERIALIZE_OK;
  }
      3c:	200066c0 	.word	0x200066c0
            return stat;
        }

        return Fw::FW_SERIALIZE_OK;

    }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }
      44:	b508      	push	{r3, lr}
    this->m_sizes[index] = size;
}

void PriorityQueueHandle ::load_data(FwSizeType index, U8* destination, FwSizeType size) {
    FW_ASSERT(size <= this->m_maxSize);
    FW_ASSERT(index < this->m_depth);
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#endif

    FW_ASSERT(this->m_comp != nullptr);
    FW_ASSERT(this->m_func != nullptr);

    return this->m_func(this->m_comp, this->m_portNum, state);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
    ScopeLock lock(Queue::getStaticMutex());
    return Queue::s_queueCount;
}

Os::Mutex& Queue::getStaticMutex() {
    static Os::Mutex s_mutex;
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          uSeconds = minuend.getUSeconds() + 1000000 - subtrahend.getUSeconds();
      } else {
          uSeconds = minuend.getUSeconds() - subtrahend.getUSeconds();
      }
      return TimeInterval(seconds, static_cast<U32>(uSeconds));
    }
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
    // Subtract 1 to leave space for null terminator
    SizeType remaining = capacity - length - 1;
    if (size < remaining) {
        remaining = size;
    }
    FW_ASSERT(remaining < capacity, static_cast<FwAssertArgType>(remaining), static_cast<FwAssertArgType>(capacity));
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
                              FwAssertArgType arg6) {
    CHAR destBuffer[FW_ASSERT_TEXT_SIZE];
    defaultReportAssert(file, lineNo, numArgs, arg1, arg2, arg3, arg4, arg5, arg6, destBuffer, sizeof(destBuffer));
    // print message
    this->printAssert(destBuffer);
}
      60:	2000d2c4 	.word	0x2000d2c4
      64:	60032400 	.word	0x60032400

00000068 <setup>:
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        crc_tabdnp[i] = crc;
    }

    crc_tabdnp_init = CRC_TRUE;

}  /* init_crcdnp_tab */
      6c:	4d1d      	ldr	r5, [pc, #116]	; (e4 <setup+0x7c>)
      6e:	b083      	sub	sp, #12
      70:	f001 fb5c 	bl	172c <Os::init()>
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
      74:	4c1c      	ldr	r4, [pc, #112]	; (e8 <setup+0x80>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      76:	4f1d      	ldr	r7, [pc, #116]	; (ec <setup+0x84>)
				if (elapsed > 750) break;
      78:	f240 28ee 	movw	r8, #750	; 0x2ee
		uint32_t millis_begin = systick_millis_count;
      7c:	682e      	ldr	r6, [r5, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      7e:	f8df 9078 	ldr.w	r9, [pc, #120]	; f8 <setup+0x90>
		yield();
      82:	f019 ffad 	bl	19fe0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      86:	7823      	ldrb	r3, [r4, #0]
      88:	b1f3      	cbz	r3, c8 <setup+0x60>
      8a:	783b      	ldrb	r3, [r7, #0]
      8c:	07db      	lsls	r3, r3, #31
      8e:	d51b      	bpl.n	c8 <setup+0x60>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      90:	682b      	ldr	r3, [r5, #0]
      92:	f8d9 2000 	ldr.w	r2, [r9]
      96:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      98:	2b0e      	cmp	r3, #14
      9a:	d915      	bls.n	c8 <setup+0x60>
    // Initialize OSAL
    Os::init();

    // Setup Serial and Logging
    Serial.begin(115200);
    static_cast<Os::Arduino::StreamConsoleHandle*>(Os::Console::getSingleton().getHandle())->setStreamHandler(Serial);
      9c:	f014 fdfc 	bl	14c98 <Os::Console::getSingleton()>
      a0:	6803      	ldr	r3, [r0, #0]
      a2:	68db      	ldr	r3, [r3, #12]
      a4:	4798      	blx	r3
      a6:	4912      	ldr	r1, [pc, #72]	; (f0 <setup+0x88>)
      a8:	f002 fbfc 	bl	28a4 <Os::Arduino::StreamConsoleHandle::setStreamHandler(Stream&)>

    // Object for communicating state to the reference topology
    LedBlinker::TopologyState inputs;
    inputs.uartNumber = 0;
      ac:	2200      	movs	r2, #0
    inputs.uartBaud = 115200;
      ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200

    // Setup topology
    LedBlinker::setupTopology(inputs);
      b2:	4668      	mov	r0, sp
    inputs.uartBaud = 115200;
      b4:	e9cd 2300 	strd	r2, r3, [sp]
    LedBlinker::setupTopology(inputs);
      b8:	f001 fc8c 	bl	19d4 <LedBlinker::setupTopology(LedBlinker::TopologyState const&)>

    Fw::Logger::log("Program Started\n");
      bc:	480d      	ldr	r0, [pc, #52]	; (f4 <setup+0x8c>)
      be:	f001 fb03 	bl	16c8 <Fw::Logger::log(char const*, ...)>
}
      c2:	b003      	add	sp, #12
      c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
      c8:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
      ca:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
      cc:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
      ce:	b12a      	cbz	r2, dc <setup+0x74>
				if (elapsed > 2000) break;
      d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
      d4:	d8e2      	bhi.n	9c <setup+0x34>
			yield();
      d6:	f019 ff83 	bl	19fe0 <yield>
      da:	e7d2      	b.n	82 <setup+0x1a>
				if (elapsed > 750) break;
      dc:	4543      	cmp	r3, r8
      de:	d9fa      	bls.n	d6 <setup+0x6e>
      e0:	e7dc      	b.n	9c <setup+0x34>
      e2:	bf00      	nop
      e4:	2000d36c 	.word	0x2000d36c
      e8:	2000d39d 	.word	0x2000d39d
      ec:	2000d39c 	.word	0x2000d39c
      f0:	20005a28 	.word	0x20005a28
      f4:	20005214 	.word	0x20005214
      f8:	2000d37c 	.word	0x2000d37c

000000fc <loop>:
 * \brief run the program
 *
 * This is an extraction of the Arduino loop() function.
 * 
 */
void loop() {
      fc:	b508      	push	{r3, lr}
#ifdef USE_BASIC_TIMER
    rateDriver.cycle();
#endif
    Os::Baremetal::TaskRunner::getSingleton().run();
      fe:	f001 fb49 	bl	1794 <Os::Baremetal::TaskRunner::getSingleton()>
     102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Os::Baremetal::TaskRunner::getSingleton().run();
     106:	f001 bbab 	b.w	1860 <Os::Baremetal::TaskRunner::run()>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));

    if (this->m_port != nullptr) {
     10a:	bf00      	nop

0000010c <Os::FileSystemInterface::getDelegate(unsigned char (&) [16])>:
//! Stub implementation of `FileSystemInterface` for use as a delegate class handling error-only fileSystem operations.
//!
class StubFileSystem : public FileSystemInterface {
  public:
    //! \brief constructor
    StubFileSystem() = default;
     10c:	4b01      	ldr	r3, [pc, #4]	; (114 <Os::FileSystemInterface::getDelegate(unsigned char (&) [16])+0x8>)
     10e:	6003      	str	r3, [r0, #0]
//! \return: pointer to delegate
FileSystemInterface *FileSystemInterface::getDelegate(FileSystemHandleStorage& aligned_placement_new_memory) {
    return Os::Delegate::makeDelegate<FileSystemInterface, Os::Stub::FileSystem::StubFileSystem>(
        aligned_placement_new_memory
    );
}
     110:	4770      	bx	lr
     112:	bf00      	nop
     114:	20003500 	.word	0x20003500

00000118 <Os::QueueInterface::getDelegate(unsigned char (&) [352])>:
//!
//! \warning allocates memory on the heap
class PriorityQueue : public Os::QueueInterface {
  public:
    //! \brief default queue interface constructor
    PriorityQueue() = default;
     118:	4b0e      	ldr	r3, [pc, #56]	; (154 <Os::QueueInterface::getDelegate(unsigned char (&) [352])+0x3c>)
#include "Os/Delegate.hpp"
#include "Os/Generic/PriorityQueue.hpp"
#include "Os/Queue.hpp"

namespace Os {
QueueInterface* QueueInterface::getDelegate(QueueHandleStorage& aligned_new_memory) {
     11a:	b510      	push	{r4, lr}
     11c:	4604      	mov	r4, r0
     11e:	f840 3b08 	str.w	r3, [r0], #8
struct PriorityQueueHandle : public QueueHandle {
     122:	f012 fa8b 	bl	1263c <Types::MaxHeap::MaxHeap()>
     126:	2300      	movs	r3, #0
     128:	f104 0038 	add.w	r0, r4, #56	; 0x38
     12c:	e9c4 3306 	strd	r3, r3, [r4, #24]
     130:	e9c4 3308 	strd	r3, r3, [r4, #32]
     134:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
     138:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
     13c:	f013 fb80 	bl	13840 <Os::Mutex::Mutex()>
     140:	f104 0090 	add.w	r0, r4, #144	; 0x90
     144:	f013 ff58 	bl	13ff8 <Os::ConditionVariable::ConditionVariable()>
     148:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
     14c:	f013 ff54 	bl	13ff8 <Os::ConditionVariable::ConditionVariable()>
    return Os::Delegate::makeDelegate<QueueInterface, Os::Generic::PriorityQueue, QueueHandleStorage>(
        aligned_new_memory);
}
     150:	4620      	mov	r0, r4
     152:	bd10      	pop	{r4, pc}
     154:	20003630 	.word	0x20003630

00000158 <Os::CpuInterface::getDelegate(unsigned char (&) [16])>:
//!
class BaremetalCpu : public Os::CpuInterface {
  public:
    //! \brief constructor
    //!
    BaremetalCpu() = default;
     158:	4b01      	ldr	r3, [pc, #4]	; (160 <Os::CpuInterface::getDelegate(unsigned char (&) [16])+0x8>)
     15a:	6003      	str	r3, [r0, #0]
#include "Os/Delegate.hpp"

namespace Os {
CpuInterface* CpuInterface::getDelegate(CpuHandleStorage& aligned_new_memory) {
    return Os::Delegate::makeDelegate<CpuInterface, Os::Baremetal::BaremetalCpu>(aligned_new_memory);
}
     15c:	4770      	bx	lr
     15e:	bf00      	nop
     160:	2000369c 	.word	0x2000369c

00000164 <Os::MemoryInterface::getDelegate(unsigned char (&) [16])>:
//!
class BaremetalMemory : public MemoryInterface {
  public:
    //! \brief constructor
    //!
    BaremetalMemory() = default;
     164:	4b01      	ldr	r3, [pc, #4]	; (16c <Os::MemoryInterface::getDelegate(unsigned char (&) [16])+0x8>)
     166:	6003      	str	r3, [r0, #0]
#include "Os/Delegate.hpp"

namespace Os {
MemoryInterface* MemoryInterface::getDelegate(MemoryHandleStorage& aligned_new_memory) {
    return Os::Delegate::makeDelegate<MemoryInterface, Os::Baremetal::BaremetalMemory>(aligned_new_memory);
}
     168:	4770      	bx	lr
     16a:	bf00      	nop
     16c:	20003708 	.word	0x20003708

00000170 <Os::MutexInterface::getDelegate(unsigned char (&) [72])>:
//!
class BaremetalMutex : public MutexInterface {
  public:
    //! \brief constructor
    //!
    BaremetalMutex() = default;
     170:	4b01      	ldr	r3, [pc, #4]	; (178 <Os::MutexInterface::getDelegate(unsigned char (&) [72])+0x8>)
     172:	6003      	str	r3, [r0, #0]
//! \param aligned_new_memory: aligned memory to fill
//! \param to_copy: pointer to copy-constructor input
//! \return: pointer to delegate
MutexInterface* MutexInterface::getDelegate(MutexHandleStorage& aligned_new_memory) {
    return Os::Delegate::makeDelegate<MutexInterface, Os::Baremetal::BaremetalMutex>(aligned_new_memory);
}
     174:	4770      	bx	lr
     176:	bf00      	nop
     178:	200036ec 	.word	0x200036ec

0000017c <Os::ConditionVariableInterface::getDelegate(unsigned char (&) [56])>:
//!
class BaremetalConditionVariable : public ConditionVariableInterface {
  public:
    //! \brief constructor
    //!
    BaremetalConditionVariable() = default;
     17c:	4b01      	ldr	r3, [pc, #4]	; (184 <Os::ConditionVariableInterface::getDelegate(unsigned char (&) [56])+0x8>)
     17e:	6003      	str	r3, [r0, #0]
//! \return: pointer to delegate
ConditionVariableInterface* ConditionVariableInterface::getDelegate(
    ConditionVariableHandleStorage& aligned_new_memory) {
    return Os::Delegate::makeDelegate<ConditionVariableInterface, Os::Baremetal::BaremetalConditionVariable,
                                      ConditionVariableHandleStorage>(aligned_new_memory);
}
     180:	4770      	bx	lr
     182:	bf00      	nop
     184:	20003724 	.word	0x20003724

00000188 <Os::TaskInterface::getDelegate(unsigned char (&) [24])>:
#include "Os/Task.hpp"
#include "fprime-baremetal/Os/Baremetal/Task.hpp"
#include "Os/Delegate.hpp"

namespace Os {
    TaskInterface* TaskInterface::getDelegate(TaskHandleStorage& aligned_new_memory) {
     188:	b510      	push	{r4, lr}
     18a:	4604      	mov	r4, r0
    // Ensure prerequisites before performing placement new
    static_assert(std::is_base_of<Interface, Implementation>::value, "Implementation must derive from Interface");
    static_assert(sizeof(Implementation) <= sizeof(StorageType), "Handle size not large enough");
    static_assert((FW_HANDLE_ALIGNMENT % alignof(Implementation)) == 0, "Handle alignment invalid");
    // Placement new the object and ensure non-null result
    Implementation* interface = new (aligned_new_memory) Implementation;
     18c:	f002 fb6e 	bl	286c <Os::Baremetal::BaremetalTask::BaremetalTask()>
        return Os::Delegate::makeDelegate<TaskInterface, Os::Baremetal::BaremetalTask>(aligned_new_memory);
    }
     190:	4620      	mov	r0, r4
     192:	bd10      	pop	{r4, pc}

00000194 <Os::ConsoleInterface::getDelegate(unsigned char (&) [24], Os::ConsoleInterface const*)>:
    static_assert(std::is_base_of<Interface, Implementation>::value, "Implementation must derive from Interface");
    static_assert(sizeof(Implementation) <= sizeof(aligned_new_memory), "Handle size not large enough");
    static_assert((FW_HANDLE_ALIGNMENT % alignof(Implementation)) == 0, "Handle alignment invalid");
    // Placement new the object and ensure non-null result
    Implementation* interface = nullptr;
    if (to_copy == nullptr) {
     194:	b121      	cbz	r1, 1a0 <Os::ConsoleInterface::getDelegate(unsigned char (&) [24], Os::ConsoleInterface const*)+0xc>
    //! \brief constructor
    //!
    StreamConsole() = default;

    //! \brief copy constructor
    StreamConsole(const StreamConsole& other) = default;
     196:	4a04      	ldr	r2, [pc, #16]	; (1a8 <Os::ConsoleInterface::getDelegate(unsigned char (&) [24], Os::ConsoleInterface const*)+0x14>)
     198:	684b      	ldr	r3, [r1, #4]
     19a:	e9c0 2300 	strd	r2, r3, [r0]
#include "Os/Delegate.hpp"

namespace Os {
ConsoleInterface* ConsoleInterface::getDelegate(ConsoleHandleStorage& aligned_new_memory, const ConsoleInterface* to_copy) {
    return Os::Delegate::makeDelegate<ConsoleInterface, Os::Arduino::StreamConsole>(aligned_new_memory, to_copy);
}
     19e:	4770      	bx	lr
    StreamConsole() = default;
     1a0:	4b01      	ldr	r3, [pc, #4]	; (1a8 <Os::ConsoleInterface::getDelegate(unsigned char (&) [24], Os::ConsoleInterface const*)+0x14>)
     1a2:	e9c0 3100 	strd	r3, r1, [r0]
struct StreamConsoleHandle : public ConsoleHandle {
     1a6:	4770      	bx	lr
     1a8:	200035c0 	.word	0x200035c0

000001ac <Os::RawTimeInterface::getDelegate(unsigned char (&) [24], Os::RawTimeInterface const*)>:

//! \brief get a delegate for RawTimeInterface that intercepts calls for stub RawTime usage
//! \param aligned_new_memory: aligned memory to fill
//! \param to_copy: pointer to copy-constructor input
//! \return: pointer to delegate
RawTimeInterface *RawTimeInterface::getDelegate(RawTimeHandleStorage& aligned_placement_new_memory, const RawTimeInterface* to_copy) {
     1ac:	b510      	push	{r4, lr}
     1ae:	4604      	mov	r4, r0
     1b0:	b149      	cbz	r1, 1c6 <Os::RawTimeInterface::getDelegate(unsigned char (&) [24], Os::RawTimeInterface const*)+0x1a>

//! \brief stub implementation of Os::RawTime
//!
//! Stub implementation of `RawTimeInterface`.
//!
class ArduinoRawTime : public RawTimeInterface {
     1b2:	3104      	adds	r1, #4
     1b4:	4603      	mov	r3, r0
     1b6:	4a07      	ldr	r2, [pc, #28]	; (1d4 <Os::RawTimeInterface::getDelegate(unsigned char (&) [24], Os::RawTimeInterface const*)+0x28>)
     1b8:	c903      	ldmia	r1, {r0, r1}
     1ba:	f843 2b04 	str.w	r2, [r3], #4
     1be:	e883 0003 	stmia.w	r3, {r0, r1}
    return Os::Delegate::makeDelegate<RawTimeInterface, Os::Arduino::ArduinoRawTime, RawTimeHandleStorage>(
            aligned_placement_new_memory, to_copy
    );
}
     1c2:	4620      	mov	r0, r4
     1c4:	bd10      	pop	{r4, pc}
        NOT_SUPPORTED,   //!< RawTime does not support operation
        OTHER_ERROR      //!< All other errors
    };

    //! \brief default constructor
    RawTimeInterface() = default;
     1c6:	f000 f9b3 	bl	530 <Fw::Serializable::Serializable()>
  public:
    //! \brief constructor
    //!
    ArduinoRawTime() = default;
     1ca:	4b02      	ldr	r3, [pc, #8]	; (1d4 <Os::RawTimeInterface::getDelegate(unsigned char (&) [24], Os::RawTimeInterface const*)+0x28>)
     1cc:	4620      	mov	r0, r4
     1ce:	6023      	str	r3, [r4, #0]
     1d0:	bd10      	pop	{r4, pc}
     1d2:	bf00      	nop
     1d4:	200035d8 	.word	0x200035d8

000001d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>:
// ======================================================================
#include <Fw/Types/format.hpp>
#include <limits>
#include <cstdio>

Fw::FormatStatus Fw::stringFormat(char* destination, const FwSizeType maximumSize, const char* formatString, ...) {
     1d8:	b40c      	push	{r2, r3}
     1da:	b570      	push	{r4, r5, r6, lr}
     1dc:	b082      	sub	sp, #8
}

Fw::FormatStatus Fw::stringFormat(char* destination, const FwSizeType maximumSize, const char* formatString, va_list args) {
    Fw::FormatStatus formatStatus = Fw::FormatStatus::SUCCESS;
    // Force null termination in error cases
    destination[0] = 0;
     1de:	2600      	movs	r6, #0
Fw::FormatStatus Fw::stringFormat(char* destination, const FwSizeType maximumSize, const char* formatString, ...) {
     1e0:	ab06      	add	r3, sp, #24
    destination[0] = 0;
     1e2:	7006      	strb	r6, [r0, #0]
Fw::FormatStatus Fw::stringFormat(char* destination, const FwSizeType maximumSize, const char* formatString, ...) {
     1e4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, formatString);
     1e8:	9301      	str	r3, [sp, #4]
    // Check format string
    if (formatString == nullptr) {
     1ea:	b18a      	cbz	r2, 210 <Fw::stringFormat(char*, unsigned long, char const*, ...)+0x38>
    }
    // Must allow the compiler to choose the correct type for comparison
    else if (maximumSize > std::numeric_limits<size_t>::max()) {
        formatStatus = Fw::FormatStatus::SIZE_OVERFLOW;
    } else {
        PlatformIntType needed_size = vsnprintf(destination, static_cast<size_t>(maximumSize), formatString, args);
     1ec:	4605      	mov	r5, r0
     1ee:	460c      	mov	r4, r1
     1f0:	f024 f938 	bl	24464 <vsnprintf>
        destination[maximumSize - 1] = 0; // Force null-termination
        if (needed_size < 0) {
     1f4:	2800      	cmp	r0, #0
        destination[maximumSize - 1] = 0; // Force null-termination
     1f6:	4425      	add	r5, r4
     1f8:	f805 6c01 	strb.w	r6, [r5, #-1]
        if (needed_size < 0) {
     1fc:	db0e      	blt.n	21c <Fw::stringFormat(char*, unsigned long, char const*, ...)+0x44>
            formatStatus = Fw::FormatStatus::OTHER_ERROR;
        } else if (static_cast<FwSizeType>(needed_size) >= maximumSize) {
     1fe:	4284      	cmp	r4, r0
     200:	bf8c      	ite	hi
     202:	2000      	movhi	r0, #0
     204:	2001      	movls	r0, #1
}
     206:	b002      	add	sp, #8
     208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     20c:	b002      	add	sp, #8
     20e:	4770      	bx	lr
        formatStatus = Fw::FormatStatus::INVALID_FORMAT_STRING;
     210:	2002      	movs	r0, #2
}
     212:	b002      	add	sp, #8
     214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     218:	b002      	add	sp, #8
     21a:	4770      	bx	lr
            formatStatus = Fw::FormatStatus::OTHER_ERROR;
     21c:	2004      	movs	r0, #4
}
     21e:	b002      	add	sp, #8
     220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     224:	b002      	add	sp, #8
     226:	4770      	bx	lr

00000228 <Fw::stringFormat(char*, unsigned long, char const*, std::__va_list)>:
Fw::FormatStatus Fw::stringFormat(char* destination, const FwSizeType maximumSize, const char* formatString, va_list args) {
     228:	b570      	push	{r4, r5, r6, lr}
    destination[0] = 0;
     22a:	2600      	movs	r6, #0
     22c:	7006      	strb	r6, [r0, #0]
    if (formatString == nullptr) {
     22e:	b16a      	cbz	r2, 24c <Fw::stringFormat(char*, unsigned long, char const*, std::__va_list)+0x24>
        PlatformIntType needed_size = vsnprintf(destination, static_cast<size_t>(maximumSize), formatString, args);
     230:	4604      	mov	r4, r0
     232:	460d      	mov	r5, r1
     234:	f024 f916 	bl	24464 <vsnprintf>
        if (needed_size < 0) {
     238:	2800      	cmp	r0, #0
        destination[maximumSize - 1] = 0; // Force null-termination
     23a:	442c      	add	r4, r5
     23c:	f804 6c01 	strb.w	r6, [r4, #-1]
        if (needed_size < 0) {
     240:	db06      	blt.n	250 <Fw::stringFormat(char*, unsigned long, char const*, std::__va_list)+0x28>
        } else if (static_cast<FwSizeType>(needed_size) >= maximumSize) {
     242:	42a8      	cmp	r0, r5
     244:	bf34      	ite	cc
     246:	2000      	movcc	r0, #0
     248:	2001      	movcs	r0, #1
            formatStatus = Fw::FormatStatus::OVERFLOWED;
        }
    }
    return formatStatus;
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
        formatStatus = Fw::FormatStatus::INVALID_FORMAT_STRING;
     24c:	2002      	movs	r0, #2
}
     24e:	bd70      	pop	{r4, r5, r6, pc}
            formatStatus = Fw::FormatStatus::OTHER_ERROR;
     250:	2004      	movs	r0, #4
}
     252:	bd70      	pop	{r4, r5, r6, pc}

00000254 <makeTime(tmElements_t const&)>:
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
     254:	4a33      	ldr	r2, [pc, #204]	; (324 <makeTime(tmElements_t const&)+0xd0>)
time_t makeTime(const tmElements_t &tm){   
     256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  seconds= tm.Year*(SECS_PER_DAY * 365);
     25a:	7984      	ldrb	r4, [r0, #6]
     25c:	fb04 f202 	mul.w	r2, r4, r2
  for (i = 0; i < tm.Year; i++) {
     260:	b1e4      	cbz	r4, 29c <makeTime(tmElements_t const&)+0x48>
     262:	f204 7cb2 	addw	ip, r4, #1970	; 0x7b2
     266:	f240 73b3 	movw	r3, #1971	; 0x7b3
     26a:	4d2f      	ldr	r5, [pc, #188]	; (328 <makeTime(tmElements_t const&)+0xd4>)
    if (LEAP_YEAR(i)) {
     26c:	4e2f      	ldr	r6, [pc, #188]	; (32c <makeTime(tmElements_t const&)+0xd8>)
      seconds += SECS_PER_DAY;   // add extra days for leap years
     26e:	4f30      	ldr	r7, [pc, #192]	; (330 <makeTime(tmElements_t const&)+0xdc>)
    if (LEAP_YEAR(i)) {
     270:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 33c <makeTime(tmElements_t const&)+0xe8>
  for (i = 0; i < tm.Year; i++) {
     274:	459c      	cmp	ip, r3
     276:	fb05 f103 	mul.w	r1, r5, r3
     27a:	d00f      	beq.n	29c <makeTime(tmElements_t const&)+0x48>
    if (LEAP_YEAR(i)) {
     27c:	f013 0f03 	tst.w	r3, #3
     280:	f103 0301 	add.w	r3, r3, #1
     284:	d1f6      	bne.n	274 <makeTime(tmElements_t const&)+0x20>
     286:	ebb6 0fb1 	cmp.w	r6, r1, ror #2
     28a:	d302      	bcc.n	292 <makeTime(tmElements_t const&)+0x3e>
     28c:	ebbe 1f31 	cmp.w	lr, r1, ror #4
     290:	d3f0      	bcc.n	274 <makeTime(tmElements_t const&)+0x20>
  for (i = 0; i < tm.Year; i++) {
     292:	459c      	cmp	ip, r3
      seconds += SECS_PER_DAY;   // add extra days for leap years
     294:	443a      	add	r2, r7
  for (i = 0; i < tm.Year; i++) {
     296:	fb05 f103 	mul.w	r1, r5, r3
     29a:	d1ef      	bne.n	27c <makeTime(tmElements_t const&)+0x28>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
     29c:	f890 e005 	ldrb.w	lr, [r0, #5]
     2a0:	f1be 0f01 	cmp.w	lr, #1
     2a4:	dd29      	ble.n	2fa <makeTime(tmElements_t const&)+0xa6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
     2a6:	f204 74b2 	addw	r4, r4, #1970	; 0x7b2
     2aa:	4e22      	ldr	r6, [pc, #136]	; (334 <makeTime(tmElements_t const&)+0xe0>)
     2ac:	2564      	movs	r5, #100	; 0x64
     2ae:	4922      	ldr	r1, [pc, #136]	; (338 <makeTime(tmElements_t const&)+0xe4>)
     2b0:	fba6 3604 	umull	r3, r6, r6, r4
     2b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
      seconds += SECS_PER_DAY * 29;
     2b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 340 <makeTime(tmElements_t const&)+0xec>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
     2bc:	0977      	lsrs	r7, r6, #5
     2be:	09f6      	lsrs	r6, r6, #7
     2c0:	fb05 4717 	mls	r7, r5, r7, r4
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
     2c4:	4d1a      	ldr	r5, [pc, #104]	; (330 <makeTime(tmElements_t const&)+0xdc>)
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
     2c6:	fb03 4616 	mls	r6, r3, r6, r4
     2ca:	f004 0403 	and.w	r4, r4, #3
  for (i = 1; i < tm.Month; i++) {
     2ce:	2301      	movs	r3, #1
     2d0:	e007      	b.n	2e2 <makeTime(tmElements_t const&)+0x8e>
     2d2:	3301      	adds	r3, #1
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
     2d4:	f891 c000 	ldrb.w	ip, [r1]
  for (i = 1; i < tm.Month; i++) {
     2d8:	3101      	adds	r1, #1
     2da:	4573      	cmp	r3, lr
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
     2dc:	fb05 220c 	mla	r2, r5, ip, r2
  for (i = 1; i < tm.Month; i++) {
     2e0:	d00b      	beq.n	2fa <makeTime(tmElements_t const&)+0xa6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
     2e2:	2b02      	cmp	r3, #2
     2e4:	d1f5      	bne.n	2d2 <makeTime(tmElements_t const&)+0x7e>
     2e6:	2c00      	cmp	r4, #0
     2e8:	d1f3      	bne.n	2d2 <makeTime(tmElements_t const&)+0x7e>
     2ea:	b90f      	cbnz	r7, 2f0 <makeTime(tmElements_t const&)+0x9c>
     2ec:	2e00      	cmp	r6, #0
     2ee:	d1f0      	bne.n	2d2 <makeTime(tmElements_t const&)+0x7e>
  for (i = 1; i < tm.Month; i++) {
     2f0:	3301      	adds	r3, #1
      seconds += SECS_PER_DAY * 29;
     2f2:	4442      	add	r2, r8
  for (i = 1; i < tm.Month; i++) {
     2f4:	3101      	adds	r1, #1
     2f6:	4573      	cmp	r3, lr
     2f8:	d1f3      	bne.n	2e2 <makeTime(tmElements_t const&)+0x8e>
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
     2fa:	7843      	ldrb	r3, [r0, #1]
  seconds+= tm.Hour * SECS_PER_HOUR;
     2fc:	f44f 6461 	mov.w	r4, #3600	; 0xe10
     300:	7881      	ldrb	r1, [r0, #2]
  seconds+= tm.Minute * SECS_PER_MIN;
     302:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  seconds+= tm.Second;
     306:	7805      	ldrb	r5, [r0, #0]
  seconds+= tm.Minute * SECS_PER_MIN;
     308:	009b      	lsls	r3, r3, #2
  seconds+= tm.Second;
     30a:	fb04 3301 	mla	r3, r4, r1, r3
  seconds+= (tm.Day-1) * SECS_PER_DAY;
     30e:	7901      	ldrb	r1, [r0, #4]
     310:	4c07      	ldr	r4, [pc, #28]	; (330 <makeTime(tmElements_t const&)+0xdc>)
  seconds+= tm.Second;
     312:	1958      	adds	r0, r3, r5
  seconds+= (tm.Day-1) * SECS_PER_DAY;
     314:	1e4b      	subs	r3, r1, #1
  return (time_t)seconds; 
}
     316:	2100      	movs	r1, #0
  seconds+= tm.Second;
     318:	fb04 0003 	mla	r0, r4, r3, r0
}
     31c:	4410      	add	r0, r2
     31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     322:	bf00      	nop
     324:	01e13380 	.word	0x01e13380
     328:	c28f5c29 	.word	0xc28f5c29
     32c:	028f5c28 	.word	0x028f5c28
     330:	00015180 	.word	0x00015180
     334:	51eb851f 	.word	0x51eb851f
     338:	20000488 	.word	0x20000488
     33c:	00a3d70a 	.word	0x00a3d70a
     340:	00263b80 	.word	0x00263b80

00000344 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
     344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     346:	4c1d      	ldr	r4, [pc, #116]	; (3bc <now()+0x78>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
     348:	4d1d      	ldr	r5, [pc, #116]	; (3c0 <now()+0x7c>)
     34a:	6823      	ldr	r3, [r4, #0]
     34c:	682a      	ldr	r2, [r5, #0]
     34e:	4e1d      	ldr	r6, [pc, #116]	; (3c4 <now()+0x80>)
     350:	1a9b      	subs	r3, r3, r2
     352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     356:	d32f      	bcc.n	3b8 <now()+0x74>
     358:	6831      	ldr	r1, [r6, #0]
     35a:	3101      	adds	r1, #1
     35c:	6823      	ldr	r3, [r4, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
     35e:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
     362:	4608      	mov	r0, r1
  while (millis() - prevMillis >= 1000) {
     364:	3101      	adds	r1, #1
     366:	1a9b      	subs	r3, r3, r2
     368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     36c:	d2f6      	bcs.n	35c <now()+0x18>
     36e:	6030      	str	r0, [r6, #0]
     370:	602a      	str	r2, [r5, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
     372:	4f15      	ldr	r7, [pc, #84]	; (3c8 <now()+0x84>)
     374:	683b      	ldr	r3, [r7, #0]
     376:	4283      	cmp	r3, r0
     378:	d80f      	bhi.n	39a <now()+0x56>
    if (getTimePtr != 0) {
     37a:	4b14      	ldr	r3, [pc, #80]	; (3cc <now()+0x88>)
     37c:	681b      	ldr	r3, [r3, #0]
     37e:	b163      	cbz	r3, 39a <now()+0x56>
      time_t t = getTimePtr();
     380:	4798      	blx	r3
      if (t != 0) {
     382:	4301      	orrs	r1, r0
     384:	d00b      	beq.n	39e <now()+0x5a>
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
     386:	4b12      	ldr	r3, [pc, #72]	; (3d0 <now()+0x8c>)
     388:	6822      	ldr	r2, [r4, #0]
     38a:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     38c:	602a      	str	r2, [r5, #0]
  Status = timeSet;
     38e:	2202      	movs	r2, #2
  nextSyncTime = (uint32_t)t + syncInterval;
     390:	4403      	add	r3, r0
  sysTime = (uint32_t)t;  
     392:	6030      	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
     394:	603b      	str	r3, [r7, #0]
  Status = timeSet;
     396:	4b0f      	ldr	r3, [pc, #60]	; (3d4 <now()+0x90>)
     398:	701a      	strb	r2, [r3, #0]
}
     39a:	2100      	movs	r1, #0
     39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     39e:	490d      	ldr	r1, [pc, #52]	; (3d4 <now()+0x90>)
        nextSyncTime = sysTime + syncInterval;
     3a0:	4b0b      	ldr	r3, [pc, #44]	; (3d0 <now()+0x8c>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     3a2:	780a      	ldrb	r2, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
     3a4:	6830      	ldr	r0, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     3a6:	3a00      	subs	r2, #0
        nextSyncTime = sysTime + syncInterval;
     3a8:	681b      	ldr	r3, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     3aa:	bf18      	it	ne
     3ac:	2201      	movne	r2, #1
        nextSyncTime = sysTime + syncInterval;
     3ae:	4403      	add	r3, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     3b0:	700a      	strb	r2, [r1, #0]
}
     3b2:	2100      	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
     3b4:	603b      	str	r3, [r7, #0]
}
     3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3b8:	6830      	ldr	r0, [r6, #0]
     3ba:	e7da      	b.n	372 <now()+0x2e>
     3bc:	2000d36c 	.word	0x2000d36c
     3c0:	2000ba38 	.word	0x2000ba38
     3c4:	2000ba48 	.word	0x2000ba48
     3c8:	2000ba3c 	.word	0x2000ba3c
     3cc:	2000d2bc 	.word	0x2000d2bc
     3d0:	20005a38 	.word	0x20005a38
     3d4:	2000d38e 	.word	0x2000d38e

000003d8 <setTime(int, int, int, int, int, int)>:
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
     3d8:	b510      	push	{r4, lr}
     3da:	9c03      	ldr	r4, [sp, #12]
     3dc:	4686      	mov	lr, r0
 //it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
     3de:	4810      	ldr	r0, [pc, #64]	; (420 <setTime(int, int, int, int, int, int)+0x48>)
  if( yr > 99)
     3e0:	2c63      	cmp	r4, #99	; 0x63
  tm.Month = mnth;
  tm.Day = dy;
     3e2:	7103      	strb	r3, [r0, #4]
      yr = yr - 1970;
     3e4:	bfcc      	ite	gt
     3e6:	f2a4 7cb2 	subwgt	ip, r4, #1970	; 0x7b2
      yr += 30;  
     3ea:	f104 0c1e 	addle.w	ip, r4, #30
  tm.Month = mnth;
     3ee:	9c02      	ldr	r4, [sp, #8]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
     3f0:	7002      	strb	r2, [r0, #0]
  tm.Year = yr;
     3f2:	f880 c006 	strb.w	ip, [r0, #6]
  tm.Month = mnth;
     3f6:	7144      	strb	r4, [r0, #5]
  tm.Hour = hr;
     3f8:	f880 e002 	strb.w	lr, [r0, #2]
  tm.Minute = min;
     3fc:	7041      	strb	r1, [r0, #1]
  setTime(makeTime(tm));
     3fe:	f7ff ff29 	bl	254 <makeTime(tmElements_t const&)>
  nextSyncTime = (uint32_t)t + syncInterval;
     402:	4b08      	ldr	r3, [pc, #32]	; (424 <setTime(int, int, int, int, int, int)+0x4c>)
  sysTime = (uint32_t)t;  
     404:	4908      	ldr	r1, [pc, #32]	; (428 <setTime(int, int, int, int, int, int)+0x50>)
  nextSyncTime = (uint32_t)t + syncInterval;
     406:	681b      	ldr	r3, [r3, #0]
  sysTime = (uint32_t)t;  
     408:	6008      	str	r0, [r1, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
     40a:	4403      	add	r3, r0
     40c:	4907      	ldr	r1, [pc, #28]	; (42c <setTime(int, int, int, int, int, int)+0x54>)
     40e:	4a08      	ldr	r2, [pc, #32]	; (430 <setTime(int, int, int, int, int, int)+0x58>)
  Status = timeSet;
     410:	2002      	movs	r0, #2
  nextSyncTime = (uint32_t)t + syncInterval;
     412:	600b      	str	r3, [r1, #0]
     414:	6812      	ldr	r2, [r2, #0]
  Status = timeSet;
     416:	4907      	ldr	r1, [pc, #28]	; (434 <setTime(int, int, int, int, int, int)+0x5c>)
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     418:	4b07      	ldr	r3, [pc, #28]	; (438 <setTime(int, int, int, int, int, int)+0x60>)
  Status = timeSet;
     41a:	7008      	strb	r0, [r1, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     41c:	601a      	str	r2, [r3, #0]
}
     41e:	bd10      	pop	{r4, pc}
     420:	2000ba40 	.word	0x2000ba40
     424:	20005a38 	.word	0x20005a38
     428:	2000ba48 	.word	0x2000ba48
     42c:	2000ba3c 	.word	0x2000ba3c
     430:	2000d36c 	.word	0x2000d36c
     434:	2000d38e 	.word	0x2000d38e
     438:	2000ba38 	.word	0x2000ba38

0000043c <timeStatus()>:
void adjustTime(long adjustment) {
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
     43c:	b508      	push	{r3, lr}
  now(); // required to actually update the status
     43e:	f7ff ff81 	bl	344 <now()>
  return Status;
     442:	4b01      	ldr	r3, [pc, #4]	; (448 <timeStatus()+0xc>)
}
     444:	7818      	ldrb	r0, [r3, #0]
     446:	bd08      	pop	{r3, pc}
     448:	2000d38e 	.word	0x2000d38e

0000044c <Fw::ExternalSerializeBuffer::~ExternalSerializeBuffer()>:
//! External serialize buffer with no copy semantics
class ExternalSerializeBuffer : public SerializeBufferBase {
  public:
    ExternalSerializeBuffer(U8* buffPtr, Serializable::SizeType size);  //!< construct with external buffer
    ExternalSerializeBuffer();                                          //!< default constructor
    ~ExternalSerializeBuffer() {}                                       //!< destructor
     44c:	4770      	bx	lr
     44e:	bf00      	nop

00000450 <Fw::ExternalSerializeBuffer::getBuffCapacity() const>:
    this->m_buffSize = 0;
}

Serializable::SizeType ExternalSerializeBuffer::getBuffCapacity() const {
    return this->m_buffSize;
}
     450:	6900      	ldr	r0, [r0, #16]
     452:	4770      	bx	lr

00000454 <Fw::ExternalSerializeBuffer::getBuffAddr()>:

U8* ExternalSerializeBuffer::getBuffAddr() {
    return this->m_buff;
}
     454:	68c0      	ldr	r0, [r0, #12]
     456:	4770      	bx	lr

00000458 <Fw::ExternalSerializeBuffer::~ExternalSerializeBuffer()>:
     458:	b510      	push	{r4, lr}
     45a:	4604      	mov	r4, r0
     45c:	2114      	movs	r1, #20
     45e:	f018 fc37 	bl	18cd0 <operator delete(void*, unsigned int)>
     462:	4620      	mov	r0, r4
     464:	bd10      	pop	{r4, pc}
     466:	bf00      	nop

00000468 <Fw::Serializable::toString(Fw::StringBase&) const>:
void Serializable::toString(StringBase& text) const {
     468:	4608      	mov	r0, r1
    text = "NOSPEC";  // set to not specified.
     46a:	4901      	ldr	r1, [pc, #4]	; (470 <Fw::Serializable::toString(Fw::StringBase&) const+0x8>)
     46c:	f000 bf40 	b.w	12f0 <Fw::StringBase::operator=(char const*)>
     470:	20002378 	.word	0x20002378

00000474 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]>:
SerializeStatus SerializeBufferBase::deserialize(U32& val) {
     474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(this->getBuffAddr());
     476:	6803      	ldr	r3, [r0, #0]
SerializeStatus SerializeBufferBase::deserialize(U32& val) {
     478:	4604      	mov	r4, r0
     47a:	4f2b      	ldr	r7, [pc, #172]	; (528 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0xb4>)
     47c:	460e      	mov	r6, r1
    FW_ASSERT(this->getBuffAddr());
     47e:	68db      	ldr	r3, [r3, #12]
     480:	42bb      	cmp	r3, r7
     482:	d114      	bne.n	4ae <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x3a>
    return this->m_buff;
     484:	68c0      	ldr	r0, [r0, #12]
    FW_ASSERT(this->getBuffAddr());
     486:	2800      	cmp	r0, #0
     488:	d03a      	beq.n	500 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x8c>
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     48a:	68a2      	ldr	r2, [r4, #8]
     48c:	1883      	adds	r3, r0, r2
     48e:	78dd      	ldrb	r5, [r3, #3]
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     490:	7899      	ldrb	r1, [r3, #2]
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     492:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 1]) << 16) |
     496:	785b      	ldrb	r3, [r3, #1]
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     498:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 0]) << 24);
     49c:	5c83      	ldrb	r3, [r0, r2]
}
     49e:	2000      	movs	r0, #0
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 1]) << 16) |
     4a0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     4a4:	6035      	str	r5, [r6, #0]
    this->m_deserLoc += static_cast<Serializable::SizeType>(sizeof(val));
     4a6:	68a3      	ldr	r3, [r4, #8]
     4a8:	3304      	adds	r3, #4
     4aa:	60a3      	str	r3, [r4, #8]
}
     4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(this->getBuffAddr());
     4ae:	4798      	blx	r3
     4b0:	b330      	cbz	r0, 500 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x8c>
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     4b2:	6823      	ldr	r3, [r4, #0]
     4b4:	68db      	ldr	r3, [r3, #12]
     4b6:	42bb      	cmp	r3, r7
     4b8:	d02b      	beq.n	512 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x9e>
     4ba:	4620      	mov	r0, r4
     4bc:	4798      	blx	r3
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     4be:	6823      	ldr	r3, [r4, #0]
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     4c0:	68a2      	ldr	r2, [r4, #8]
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     4c2:	68db      	ldr	r3, [r3, #12]
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     4c4:	4410      	add	r0, r2
     4c6:	42bb      	cmp	r3, r7
     4c8:	78c5      	ldrb	r5, [r0, #3]
     4ca:	d024      	beq.n	516 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0xa2>
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     4cc:	4620      	mov	r0, r4
     4ce:	4798      	blx	r3
     4d0:	68a2      	ldr	r2, [r4, #8]
     4d2:	4410      	add	r0, r2
     4d4:	7883      	ldrb	r3, [r0, #2]
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     4d6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 1]) << 16) |
     4da:	6823      	ldr	r3, [r4, #0]
     4dc:	68db      	ldr	r3, [r3, #12]
     4de:	42bb      	cmp	r3, r7
     4e0:	d01c      	beq.n	51c <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0xa8>
     4e2:	4620      	mov	r0, r4
     4e4:	4798      	blx	r3
     4e6:	68a2      	ldr	r2, [r4, #8]
     4e8:	4410      	add	r0, r2
     4ea:	7843      	ldrb	r3, [r0, #1]
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     4ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
          (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 0]) << 24);
     4f0:	6823      	ldr	r3, [r4, #0]
     4f2:	68db      	ldr	r3, [r3, #12]
     4f4:	42bb      	cmp	r3, r7
     4f6:	d014      	beq.n	522 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0xae>
     4f8:	4620      	mov	r0, r4
     4fa:	4798      	blx	r3
     4fc:	68a2      	ldr	r2, [r4, #8]
     4fe:	e7cd      	b.n	49c <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x28>
    FW_ASSERT(this->getBuffAddr());
     500:	f44f 71b9 	mov.w	r1, #370	; 0x172
     504:	4809      	ldr	r0, [pc, #36]	; (52c <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0xb8>)
     506:	f001 f881 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    val = (static_cast<U32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     50a:	6823      	ldr	r3, [r4, #0]
     50c:	68db      	ldr	r3, [r3, #12]
     50e:	42bb      	cmp	r3, r7
     510:	d1d3      	bne.n	4ba <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x46>
    return this->m_buff;
     512:	68e0      	ldr	r0, [r4, #12]
     514:	e7b9      	b.n	48a <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x16>
     516:	68e0      	ldr	r0, [r4, #12]
     518:	1883      	adds	r3, r0, r2
     51a:	e7b9      	b.n	490 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x1c>
     51c:	68e0      	ldr	r0, [r4, #12]
     51e:	1883      	adds	r3, r0, r2
     520:	e7b9      	b.n	496 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x22>
     522:	68e0      	ldr	r0, [r4, #12]
     524:	e7ba      	b.n	49c <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]+0x28>
     526:	bf00      	nop
     528:	00000455 	.word	0x00000455
     52c:	20000af4 	.word	0x20000af4

00000530 <Fw::Serializable::Serializable()>:
Serializable::Serializable() {}
     530:	4b01      	ldr	r3, [pc, #4]	; (538 <Fw::Serializable::Serializable()+0x8>)
     532:	6003      	str	r3, [r0, #0]
     534:	4770      	bx	lr
     536:	bf00      	nop
     538:	20002d44 	.word	0x20002d44

0000053c <Fw::Serializable::~Serializable()>:
Serializable::~Serializable() {}
     53c:	4770      	bx	lr
     53e:	bf00      	nop

00000540 <Fw::SerializeBufferBase::SerializeBufferBase()>:
SerializeBufferBase::SerializeBufferBase() : m_serLoc(0), m_deserLoc(0) {}
     540:	2200      	movs	r2, #0
     542:	4902      	ldr	r1, [pc, #8]	; (54c <Fw::SerializeBufferBase::SerializeBufferBase()+0xc>)
     544:	6082      	str	r2, [r0, #8]
     546:	e9c0 1200 	strd	r1, r2, [r0]
     54a:	4770      	bx	lr
     54c:	20003188 	.word	0x20003188

00000550 <Fw::SerializeBufferBase::~SerializeBufferBase()>:
SerializeBufferBase::~SerializeBufferBase() {}
     550:	4770      	bx	lr
     552:	bf00      	nop

00000554 <Fw::SerializeBufferBase::serialize(unsigned char)>:
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     554:	6803      	ldr	r3, [r0, #0]
     556:	4a19      	ldr	r2, [pc, #100]	; (5bc <Fw::SerializeBufferBase::serialize(unsigned char)+0x68>)
     558:	689b      	ldr	r3, [r3, #8]
     55a:	4293      	cmp	r3, r2
SerializeStatus SerializeBufferBase::serialize(U8 val) {
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	4604      	mov	r4, r0
     560:	460d      	mov	r5, r1
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     562:	6846      	ldr	r6, [r0, #4]
     564:	d114      	bne.n	590 <Fw::SerializeBufferBase::serialize(unsigned char)+0x3c>
    return this->m_buffSize;
     566:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     568:	4286      	cmp	r6, r0
     56a:	d20f      	bcs.n	58c <Fw::SerializeBufferBase::serialize(unsigned char)+0x38>
    FW_ASSERT(this->getBuffAddr());
     56c:	6823      	ldr	r3, [r4, #0]
     56e:	4e14      	ldr	r6, [pc, #80]	; (5c0 <Fw::SerializeBufferBase::serialize(unsigned char)+0x6c>)
     570:	68db      	ldr	r3, [r3, #12]
     572:	42b3      	cmp	r3, r6
     574:	d10e      	bne.n	594 <Fw::SerializeBufferBase::serialize(unsigned char)+0x40>
    return this->m_buff;
     576:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     578:	b1b0      	cbz	r0, 5a8 <Fw::SerializeBufferBase::serialize(unsigned char)+0x54>
    this->getBuffAddr()[this->m_serLoc] = val;
     57a:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     57c:	2200      	movs	r2, #0
    this->getBuffAddr()[this->m_serLoc] = val;
     57e:	54c5      	strb	r5, [r0, r3]
    return FW_SERIALIZE_OK;
     580:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     582:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     584:	60a2      	str	r2, [r4, #8]
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     586:	3301      	adds	r3, #1
     588:	6063      	str	r3, [r4, #4]
}
     58a:	bd70      	pop	{r4, r5, r6, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     58c:	2002      	movs	r0, #2
}
     58e:	bd70      	pop	{r4, r5, r6, pc}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     590:	4798      	blx	r3
     592:	e7e9      	b.n	568 <Fw::SerializeBufferBase::serialize(unsigned char)+0x14>
    FW_ASSERT(this->getBuffAddr());
     594:	4620      	mov	r0, r4
     596:	4798      	blx	r3
     598:	b130      	cbz	r0, 5a8 <Fw::SerializeBufferBase::serialize(unsigned char)+0x54>
    this->getBuffAddr()[this->m_serLoc] = val;
     59a:	6823      	ldr	r3, [r4, #0]
     59c:	68db      	ldr	r3, [r3, #12]
     59e:	42b3      	cmp	r3, r6
     5a0:	d00a      	beq.n	5b8 <Fw::SerializeBufferBase::serialize(unsigned char)+0x64>
     5a2:	4620      	mov	r0, r4
     5a4:	4798      	blx	r3
     5a6:	e7e8      	b.n	57a <Fw::SerializeBufferBase::serialize(unsigned char)+0x26>
    FW_ASSERT(this->getBuffAddr());
     5a8:	2143      	movs	r1, #67	; 0x43
     5aa:	4806      	ldr	r0, [pc, #24]	; (5c4 <Fw::SerializeBufferBase::serialize(unsigned char)+0x70>)
     5ac:	f001 f82e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->getBuffAddr()[this->m_serLoc] = val;
     5b0:	6823      	ldr	r3, [r4, #0]
     5b2:	68db      	ldr	r3, [r3, #12]
     5b4:	42b3      	cmp	r3, r6
     5b6:	d1f4      	bne.n	5a2 <Fw::SerializeBufferBase::serialize(unsigned char)+0x4e>
    return this->m_buff;
     5b8:	68e0      	ldr	r0, [r4, #12]
     5ba:	e7de      	b.n	57a <Fw::SerializeBufferBase::serialize(unsigned char)+0x26>
     5bc:	00000451 	.word	0x00000451
     5c0:	00000455 	.word	0x00000455
     5c4:	20000af4 	.word	0x20000af4

000005c8 <Fw::SerializeBufferBase::serialize(unsigned short)>:
SerializeStatus SerializeBufferBase::serialize(U16 val) {
     5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     5ca:	e9d0 2300 	ldrd	r2, r3, [r0]
SerializeStatus SerializeBufferBase::serialize(U16 val) {
     5ce:	4604      	mov	r4, r0
     5d0:	460d      	mov	r5, r1
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     5d2:	6892      	ldr	r2, [r2, #8]
     5d4:	1c5e      	adds	r6, r3, #1
     5d6:	4b1e      	ldr	r3, [pc, #120]	; (650 <Fw::SerializeBufferBase::serialize(unsigned short)+0x88>)
     5d8:	429a      	cmp	r2, r3
     5da:	d11e      	bne.n	61a <Fw::SerializeBufferBase::serialize(unsigned short)+0x52>
    return this->m_buffSize;
     5dc:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     5de:	4286      	cmp	r6, r0
     5e0:	d219      	bcs.n	616 <Fw::SerializeBufferBase::serialize(unsigned short)+0x4e>
    FW_ASSERT(this->getBuffAddr());
     5e2:	6823      	ldr	r3, [r4, #0]
     5e4:	4e1b      	ldr	r6, [pc, #108]	; (654 <Fw::SerializeBufferBase::serialize(unsigned short)+0x8c>)
     5e6:	68db      	ldr	r3, [r3, #12]
     5e8:	42b3      	cmp	r3, r6
     5ea:	d11b      	bne.n	624 <Fw::SerializeBufferBase::serialize(unsigned short)+0x5c>
    return this->m_buff;
     5ec:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     5ee:	b320      	cbz	r0, 63a <Fw::SerializeBufferBase::serialize(unsigned short)+0x72>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 8);
     5f0:	0a2f      	lsrs	r7, r5, #8
     5f2:	6863      	ldr	r3, [r4, #4]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val);
     5f4:	b2ed      	uxtb	r5, r5
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 8);
     5f6:	54c7      	strb	r7, [r0, r3]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val);
     5f8:	6823      	ldr	r3, [r4, #0]
     5fa:	68db      	ldr	r3, [r3, #12]
     5fc:	42b3      	cmp	r3, r6
     5fe:	d10e      	bne.n	61e <Fw::SerializeBufferBase::serialize(unsigned short)+0x56>
    return this->m_buff;
     600:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val);
     602:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     604:	2200      	movs	r2, #0
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val);
     606:	4418      	add	r0, r3
     608:	7045      	strb	r5, [r0, #1]
    return FW_SERIALIZE_OK;
     60a:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     60c:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     60e:	60a2      	str	r2, [r4, #8]
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     610:	3302      	adds	r3, #2
     612:	6063      	str	r3, [r4, #4]
}
     614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     616:	2002      	movs	r0, #2
}
     618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     61a:	4790      	blx	r2
     61c:	e7df      	b.n	5de <Fw::SerializeBufferBase::serialize(unsigned short)+0x16>
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val);
     61e:	4620      	mov	r0, r4
     620:	4798      	blx	r3
     622:	e7ee      	b.n	602 <Fw::SerializeBufferBase::serialize(unsigned short)+0x3a>
    FW_ASSERT(this->getBuffAddr());
     624:	4620      	mov	r0, r4
     626:	4798      	blx	r3
     628:	b138      	cbz	r0, 63a <Fw::SerializeBufferBase::serialize(unsigned short)+0x72>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 8);
     62a:	6823      	ldr	r3, [r4, #0]
     62c:	0a2f      	lsrs	r7, r5, #8
     62e:	68db      	ldr	r3, [r3, #12]
     630:	42b3      	cmp	r3, r6
     632:	d00b      	beq.n	64c <Fw::SerializeBufferBase::serialize(unsigned short)+0x84>
     634:	4620      	mov	r0, r4
     636:	4798      	blx	r3
     638:	e7db      	b.n	5f2 <Fw::SerializeBufferBase::serialize(unsigned short)+0x2a>
    FW_ASSERT(this->getBuffAddr());
     63a:	215b      	movs	r1, #91	; 0x5b
     63c:	4806      	ldr	r0, [pc, #24]	; (658 <Fw::SerializeBufferBase::serialize(unsigned short)+0x90>)
     63e:	f000 ffe5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 8);
     642:	6823      	ldr	r3, [r4, #0]
     644:	0a2f      	lsrs	r7, r5, #8
     646:	68db      	ldr	r3, [r3, #12]
     648:	42b3      	cmp	r3, r6
     64a:	d1f3      	bne.n	634 <Fw::SerializeBufferBase::serialize(unsigned short)+0x6c>
    return this->m_buff;
     64c:	68e0      	ldr	r0, [r4, #12]
     64e:	e7d0      	b.n	5f2 <Fw::SerializeBufferBase::serialize(unsigned short)+0x2a>
     650:	00000451 	.word	0x00000451
     654:	00000455 	.word	0x00000455
     658:	20000af4 	.word	0x20000af4

0000065c <Fw::SerializeBufferBase::serialize(unsigned long)>:
SerializeStatus SerializeBufferBase::serialize(U32 val) {
     65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     65e:	e9d0 2300 	ldrd	r2, r3, [r0]
SerializeStatus SerializeBufferBase::serialize(U32 val) {
     662:	4604      	mov	r4, r0
     664:	460d      	mov	r5, r1
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     666:	6892      	ldr	r2, [r2, #8]
     668:	1cde      	adds	r6, r3, #3
     66a:	4b2c      	ldr	r3, [pc, #176]	; (71c <Fw::SerializeBufferBase::serialize(unsigned long)+0xc0>)
     66c:	429a      	cmp	r2, r3
     66e:	d133      	bne.n	6d8 <Fw::SerializeBufferBase::serialize(unsigned long)+0x7c>
    return this->m_buffSize;
     670:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     672:	4286      	cmp	r6, r0
     674:	d22e      	bcs.n	6d4 <Fw::SerializeBufferBase::serialize(unsigned long)+0x78>
    FW_ASSERT(this->getBuffAddr());
     676:	6823      	ldr	r3, [r4, #0]
     678:	4e29      	ldr	r6, [pc, #164]	; (720 <Fw::SerializeBufferBase::serialize(unsigned long)+0xc4>)
     67a:	68db      	ldr	r3, [r3, #12]
     67c:	42b3      	cmp	r3, r6
     67e:	d130      	bne.n	6e2 <Fw::SerializeBufferBase::serialize(unsigned long)+0x86>
    return this->m_buff;
     680:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     682:	2800      	cmp	r0, #0
     684:	d03e      	beq.n	704 <Fw::SerializeBufferBase::serialize(unsigned long)+0xa8>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 24);
     686:	0e2f      	lsrs	r7, r5, #24
     688:	6863      	ldr	r3, [r4, #4]
     68a:	54c7      	strb	r7, [r0, r3]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 16);
     68c:	f3c5 4707 	ubfx	r7, r5, #16, #8
     690:	6823      	ldr	r3, [r4, #0]
     692:	68db      	ldr	r3, [r3, #12]
     694:	42b3      	cmp	r3, r6
     696:	d12f      	bne.n	6f8 <Fw::SerializeBufferBase::serialize(unsigned long)+0x9c>
    return this->m_buff;
     698:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 16);
     69a:	6863      	ldr	r3, [r4, #4]
     69c:	4418      	add	r0, r3
     69e:	7047      	strb	r7, [r0, #1]
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     6a0:	f3c5 2707 	ubfx	r7, r5, #8, #8
     6a4:	6823      	ldr	r3, [r4, #0]
     6a6:	68db      	ldr	r3, [r3, #12]
     6a8:	42b3      	cmp	r3, r6
     6aa:	d128      	bne.n	6fe <Fw::SerializeBufferBase::serialize(unsigned long)+0xa2>
    return this->m_buff;
     6ac:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     6ae:	6863      	ldr	r3, [r4, #4]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     6b0:	b2ed      	uxtb	r5, r5
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     6b2:	4418      	add	r0, r3
     6b4:	7087      	strb	r7, [r0, #2]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     6b6:	6823      	ldr	r3, [r4, #0]
     6b8:	68db      	ldr	r3, [r3, #12]
     6ba:	42b3      	cmp	r3, r6
     6bc:	d10e      	bne.n	6dc <Fw::SerializeBufferBase::serialize(unsigned long)+0x80>
    return this->m_buff;
     6be:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     6c0:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     6c2:	2200      	movs	r2, #0
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     6c4:	4418      	add	r0, r3
     6c6:	70c5      	strb	r5, [r0, #3]
    return FW_SERIALIZE_OK;
     6c8:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     6ca:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     6cc:	60a2      	str	r2, [r4, #8]
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     6ce:	3304      	adds	r3, #4
     6d0:	6063      	str	r3, [r4, #4]
}
     6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     6d4:	2002      	movs	r0, #2
}
     6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     6d8:	4790      	blx	r2
     6da:	e7ca      	b.n	672 <Fw::SerializeBufferBase::serialize(unsigned long)+0x16>
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     6dc:	4620      	mov	r0, r4
     6de:	4798      	blx	r3
     6e0:	e7ee      	b.n	6c0 <Fw::SerializeBufferBase::serialize(unsigned long)+0x64>
    FW_ASSERT(this->getBuffAddr());
     6e2:	4620      	mov	r0, r4
     6e4:	4798      	blx	r3
     6e6:	b168      	cbz	r0, 704 <Fw::SerializeBufferBase::serialize(unsigned long)+0xa8>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 24);
     6e8:	6823      	ldr	r3, [r4, #0]
     6ea:	0e2f      	lsrs	r7, r5, #24
     6ec:	68db      	ldr	r3, [r3, #12]
     6ee:	42b3      	cmp	r3, r6
     6f0:	d011      	beq.n	716 <Fw::SerializeBufferBase::serialize(unsigned long)+0xba>
     6f2:	4620      	mov	r0, r4
     6f4:	4798      	blx	r3
     6f6:	e7c7      	b.n	688 <Fw::SerializeBufferBase::serialize(unsigned long)+0x2c>
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 16);
     6f8:	4620      	mov	r0, r4
     6fa:	4798      	blx	r3
     6fc:	e7cd      	b.n	69a <Fw::SerializeBufferBase::serialize(unsigned long)+0x3e>
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     6fe:	4620      	mov	r0, r4
     700:	4798      	blx	r3
     702:	e7d4      	b.n	6ae <Fw::SerializeBufferBase::serialize(unsigned long)+0x52>
    FW_ASSERT(this->getBuffAddr());
     704:	2176      	movs	r1, #118	; 0x76
     706:	4807      	ldr	r0, [pc, #28]	; (724 <Fw::SerializeBufferBase::serialize(unsigned long)+0xc8>)
     708:	f000 ff80 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 24);
     70c:	6823      	ldr	r3, [r4, #0]
     70e:	0e2f      	lsrs	r7, r5, #24
     710:	68db      	ldr	r3, [r3, #12]
     712:	42b3      	cmp	r3, r6
     714:	d1ed      	bne.n	6f2 <Fw::SerializeBufferBase::serialize(unsigned long)+0x96>
    return this->m_buff;
     716:	68e0      	ldr	r0, [r4, #12]
     718:	e7b6      	b.n	688 <Fw::SerializeBufferBase::serialize(unsigned long)+0x2c>
     71a:	bf00      	nop
     71c:	00000451 	.word	0x00000451
     720:	00000455 	.word	0x00000455
     724:	20000af4 	.word	0x20000af4

00000728 <Fw::SerializeBufferBase::serialize(long)>:
SerializeStatus SerializeBufferBase::serialize(I32 val) {
     728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     72a:	e9d0 2300 	ldrd	r2, r3, [r0]
SerializeStatus SerializeBufferBase::serialize(I32 val) {
     72e:	4604      	mov	r4, r0
     730:	460d      	mov	r5, r1
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     732:	6892      	ldr	r2, [r2, #8]
     734:	1cde      	adds	r6, r3, #3
     736:	4b2c      	ldr	r3, [pc, #176]	; (7e8 <Fw::SerializeBufferBase::serialize(long)+0xc0>)
     738:	429a      	cmp	r2, r3
     73a:	d133      	bne.n	7a4 <Fw::SerializeBufferBase::serialize(long)+0x7c>
    return this->m_buffSize;
     73c:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     73e:	4286      	cmp	r6, r0
     740:	d22e      	bcs.n	7a0 <Fw::SerializeBufferBase::serialize(long)+0x78>
    FW_ASSERT(this->getBuffAddr());
     742:	6823      	ldr	r3, [r4, #0]
     744:	4e29      	ldr	r6, [pc, #164]	; (7ec <Fw::SerializeBufferBase::serialize(long)+0xc4>)
     746:	68db      	ldr	r3, [r3, #12]
     748:	42b3      	cmp	r3, r6
     74a:	d130      	bne.n	7ae <Fw::SerializeBufferBase::serialize(long)+0x86>
    return this->m_buff;
     74c:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     74e:	2800      	cmp	r0, #0
     750:	d03e      	beq.n	7d0 <Fw::SerializeBufferBase::serialize(long)+0xa8>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 24);
     752:	0e2f      	lsrs	r7, r5, #24
     754:	6863      	ldr	r3, [r4, #4]
     756:	54c7      	strb	r7, [r0, r3]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 16);
     758:	f3c5 4707 	ubfx	r7, r5, #16, #8
     75c:	6823      	ldr	r3, [r4, #0]
     75e:	68db      	ldr	r3, [r3, #12]
     760:	42b3      	cmp	r3, r6
     762:	d12f      	bne.n	7c4 <Fw::SerializeBufferBase::serialize(long)+0x9c>
    return this->m_buff;
     764:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 16);
     766:	6863      	ldr	r3, [r4, #4]
     768:	4418      	add	r0, r3
     76a:	7047      	strb	r7, [r0, #1]
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     76c:	f3c5 2707 	ubfx	r7, r5, #8, #8
     770:	6823      	ldr	r3, [r4, #0]
     772:	68db      	ldr	r3, [r3, #12]
     774:	42b3      	cmp	r3, r6
     776:	d128      	bne.n	7ca <Fw::SerializeBufferBase::serialize(long)+0xa2>
    return this->m_buff;
     778:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     77a:	6863      	ldr	r3, [r4, #4]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     77c:	b2ed      	uxtb	r5, r5
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     77e:	4418      	add	r0, r3
     780:	7087      	strb	r7, [r0, #2]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     782:	6823      	ldr	r3, [r4, #0]
     784:	68db      	ldr	r3, [r3, #12]
     786:	42b3      	cmp	r3, r6
     788:	d10e      	bne.n	7a8 <Fw::SerializeBufferBase::serialize(long)+0x80>
    return this->m_buff;
     78a:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     78c:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     78e:	2200      	movs	r2, #0
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     790:	4418      	add	r0, r3
     792:	70c5      	strb	r5, [r0, #3]
    return FW_SERIALIZE_OK;
     794:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     796:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     798:	60a2      	str	r2, [r4, #8]
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     79a:	3304      	adds	r3, #4
     79c:	6063      	str	r3, [r4, #4]
}
     79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     7a0:	2002      	movs	r0, #2
}
     7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     7a4:	4790      	blx	r2
     7a6:	e7ca      	b.n	73e <Fw::SerializeBufferBase::serialize(long)+0x16>
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val);
     7a8:	4620      	mov	r0, r4
     7aa:	4798      	blx	r3
     7ac:	e7ee      	b.n	78c <Fw::SerializeBufferBase::serialize(long)+0x64>
    FW_ASSERT(this->getBuffAddr());
     7ae:	4620      	mov	r0, r4
     7b0:	4798      	blx	r3
     7b2:	b168      	cbz	r0, 7d0 <Fw::SerializeBufferBase::serialize(long)+0xa8>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 24);
     7b4:	6823      	ldr	r3, [r4, #0]
     7b6:	0e2f      	lsrs	r7, r5, #24
     7b8:	68db      	ldr	r3, [r3, #12]
     7ba:	42b3      	cmp	r3, r6
     7bc:	d011      	beq.n	7e2 <Fw::SerializeBufferBase::serialize(long)+0xba>
     7be:	4620      	mov	r0, r4
     7c0:	4798      	blx	r3
     7c2:	e7c7      	b.n	754 <Fw::SerializeBufferBase::serialize(long)+0x2c>
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 16);
     7c4:	4620      	mov	r0, r4
     7c6:	4798      	blx	r3
     7c8:	e7cd      	b.n	766 <Fw::SerializeBufferBase::serialize(long)+0x3e>
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 8);
     7ca:	4620      	mov	r0, r4
     7cc:	4798      	blx	r3
     7ce:	e7d4      	b.n	77a <Fw::SerializeBufferBase::serialize(long)+0x52>
    FW_ASSERT(this->getBuffAddr());
     7d0:	2185      	movs	r1, #133	; 0x85
     7d2:	4807      	ldr	r0, [pc, #28]	; (7f0 <Fw::SerializeBufferBase::serialize(long)+0xc8>)
     7d4:	f000 ff1a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 24);
     7d8:	6823      	ldr	r3, [r4, #0]
     7da:	0e2f      	lsrs	r7, r5, #24
     7dc:	68db      	ldr	r3, [r3, #12]
     7de:	42b3      	cmp	r3, r6
     7e0:	d1ed      	bne.n	7be <Fw::SerializeBufferBase::serialize(long)+0x96>
    return this->m_buff;
     7e2:	68e0      	ldr	r0, [r4, #12]
     7e4:	e7b6      	b.n	754 <Fw::SerializeBufferBase::serialize(long)+0x2c>
     7e6:	bf00      	nop
     7e8:	00000451 	.word	0x00000451
     7ec:	00000455 	.word	0x00000455
     7f0:	20000af4 	.word	0x20000af4

000007f4 <Fw::SerializeBufferBase::serialize(unsigned long long)>:
SerializeStatus SerializeBufferBase::serialize(U64 val) {
     7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7f8:	461d      	mov	r5, r3
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     7fa:	6843      	ldr	r3, [r0, #4]
SerializeStatus SerializeBufferBase::serialize(U64 val) {
     7fc:	4616      	mov	r6, r2
     7fe:	4a4b      	ldr	r2, [pc, #300]	; (92c <Fw::SerializeBufferBase::serialize(unsigned long long)+0x138>)
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     800:	1ddf      	adds	r7, r3, #7
     802:	6803      	ldr	r3, [r0, #0]
SerializeStatus SerializeBufferBase::serialize(U64 val) {
     804:	4604      	mov	r4, r0
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     806:	689b      	ldr	r3, [r3, #8]
     808:	4293      	cmp	r3, r2
     80a:	d15f      	bne.n	8cc <Fw::SerializeBufferBase::serialize(unsigned long long)+0xd8>
    return this->m_buffSize;
     80c:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     80e:	4287      	cmp	r7, r0
     810:	d259      	bcs.n	8c6 <Fw::SerializeBufferBase::serialize(unsigned long long)+0xd2>
    FW_ASSERT(this->getBuffAddr());
     812:	6823      	ldr	r3, [r4, #0]
     814:	4f46      	ldr	r7, [pc, #280]	; (930 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x13c>)
     816:	68db      	ldr	r3, [r3, #12]
     818:	42bb      	cmp	r3, r7
     81a:	d15c      	bne.n	8d6 <Fw::SerializeBufferBase::serialize(unsigned long long)+0xe2>
    return this->m_buff;
     81c:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     81e:	2800      	cmp	r0, #0
     820:	d077      	beq.n	912 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x11e>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 56);
     822:	ea4f 6815 	mov.w	r8, r5, lsr #24
     826:	6863      	ldr	r3, [r4, #4]
     828:	f800 8003 	strb.w	r8, [r0, r3]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 48);
     82c:	f3c5 4807 	ubfx	r8, r5, #16, #8
     830:	6823      	ldr	r3, [r4, #0]
     832:	68db      	ldr	r3, [r3, #12]
     834:	42bb      	cmp	r3, r7
     836:	d15a      	bne.n	8ee <Fw::SerializeBufferBase::serialize(unsigned long long)+0xfa>
    return this->m_buff;
     838:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 48);
     83a:	6863      	ldr	r3, [r4, #4]
     83c:	4418      	add	r0, r3
     83e:	f880 8001 	strb.w	r8, [r0, #1]
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 40);
     842:	f3c5 2807 	ubfx	r8, r5, #8, #8
     846:	6823      	ldr	r3, [r4, #0]
     848:	68db      	ldr	r3, [r3, #12]
     84a:	42bb      	cmp	r3, r7
     84c:	d152      	bne.n	8f4 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x100>
    return this->m_buff;
     84e:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 40);
     850:	6863      	ldr	r3, [r4, #4]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val >> 32);
     852:	b2ed      	uxtb	r5, r5
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 40);
     854:	4418      	add	r0, r3
     856:	f880 8002 	strb.w	r8, [r0, #2]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val >> 32);
     85a:	6823      	ldr	r3, [r4, #0]
     85c:	68db      	ldr	r3, [r3, #12]
     85e:	42bb      	cmp	r3, r7
     860:	d14b      	bne.n	8fa <Fw::SerializeBufferBase::serialize(unsigned long long)+0x106>
    return this->m_buff;
     862:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val >> 32);
     864:	6863      	ldr	r3, [r4, #4]
     866:	4418      	add	r0, r3
     868:	70c5      	strb	r5, [r0, #3]
    this->getBuffAddr()[this->m_serLoc + 4] = static_cast<U8>(val >> 24);
     86a:	0e35      	lsrs	r5, r6, #24
     86c:	6823      	ldr	r3, [r4, #0]
     86e:	68db      	ldr	r3, [r3, #12]
     870:	42bb      	cmp	r3, r7
     872:	d145      	bne.n	900 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x10c>
    return this->m_buff;
     874:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 4] = static_cast<U8>(val >> 24);
     876:	6863      	ldr	r3, [r4, #4]
     878:	4418      	add	r0, r3
     87a:	7105      	strb	r5, [r0, #4]
    this->getBuffAddr()[this->m_serLoc + 5] = static_cast<U8>(val >> 16);
     87c:	f3c6 4507 	ubfx	r5, r6, #16, #8
     880:	6823      	ldr	r3, [r4, #0]
     882:	68db      	ldr	r3, [r3, #12]
     884:	42bb      	cmp	r3, r7
     886:	d13e      	bne.n	906 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x112>
    return this->m_buff;
     888:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 5] = static_cast<U8>(val >> 16);
     88a:	6863      	ldr	r3, [r4, #4]
     88c:	4418      	add	r0, r3
     88e:	7145      	strb	r5, [r0, #5]
    this->getBuffAddr()[this->m_serLoc + 6] = static_cast<U8>(val >> 8);
     890:	f3c6 2507 	ubfx	r5, r6, #8, #8
     894:	6823      	ldr	r3, [r4, #0]
     896:	68db      	ldr	r3, [r3, #12]
     898:	42bb      	cmp	r3, r7
     89a:	d137      	bne.n	90c <Fw::SerializeBufferBase::serialize(unsigned long long)+0x118>
    return this->m_buff;
     89c:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 6] = static_cast<U8>(val >> 8);
     89e:	6863      	ldr	r3, [r4, #4]
    this->getBuffAddr()[this->m_serLoc + 7] = static_cast<U8>(val);
     8a0:	b2f6      	uxtb	r6, r6
    this->getBuffAddr()[this->m_serLoc + 6] = static_cast<U8>(val >> 8);
     8a2:	4418      	add	r0, r3
     8a4:	7185      	strb	r5, [r0, #6]
    this->getBuffAddr()[this->m_serLoc + 7] = static_cast<U8>(val);
     8a6:	6823      	ldr	r3, [r4, #0]
     8a8:	68db      	ldr	r3, [r3, #12]
     8aa:	42bb      	cmp	r3, r7
     8ac:	d110      	bne.n	8d0 <Fw::SerializeBufferBase::serialize(unsigned long long)+0xdc>
    return this->m_buff;
     8ae:	68e0      	ldr	r0, [r4, #12]
    this->getBuffAddr()[this->m_serLoc + 7] = static_cast<U8>(val);
     8b0:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     8b2:	2200      	movs	r2, #0
    this->getBuffAddr()[this->m_serLoc + 7] = static_cast<U8>(val);
     8b4:	4418      	add	r0, r3
     8b6:	71c6      	strb	r6, [r0, #7]
    return FW_SERIALIZE_OK;
     8b8:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     8ba:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     8bc:	60a2      	str	r2, [r4, #8]
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(val));
     8be:	3308      	adds	r3, #8
     8c0:	6063      	str	r3, [r4, #4]
}
     8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     8c6:	2002      	movs	r0, #2
}
     8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(val)) - 1 >= this->getBuffCapacity()) {
     8cc:	4798      	blx	r3
     8ce:	e79e      	b.n	80e <Fw::SerializeBufferBase::serialize(unsigned long long)+0x1a>
    this->getBuffAddr()[this->m_serLoc + 7] = static_cast<U8>(val);
     8d0:	4620      	mov	r0, r4
     8d2:	4798      	blx	r3
     8d4:	e7ec      	b.n	8b0 <Fw::SerializeBufferBase::serialize(unsigned long long)+0xbc>
    FW_ASSERT(this->getBuffAddr());
     8d6:	4620      	mov	r0, r4
     8d8:	4798      	blx	r3
     8da:	b1d0      	cbz	r0, 912 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x11e>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 56);
     8dc:	6823      	ldr	r3, [r4, #0]
     8de:	ea4f 6815 	mov.w	r8, r5, lsr #24
     8e2:	68db      	ldr	r3, [r3, #12]
     8e4:	42bb      	cmp	r3, r7
     8e6:	d01e      	beq.n	926 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x132>
     8e8:	4620      	mov	r0, r4
     8ea:	4798      	blx	r3
     8ec:	e79b      	b.n	826 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x32>
    this->getBuffAddr()[this->m_serLoc + 1] = static_cast<U8>(val >> 48);
     8ee:	4620      	mov	r0, r4
     8f0:	4798      	blx	r3
     8f2:	e7a2      	b.n	83a <Fw::SerializeBufferBase::serialize(unsigned long long)+0x46>
    this->getBuffAddr()[this->m_serLoc + 2] = static_cast<U8>(val >> 40);
     8f4:	4620      	mov	r0, r4
     8f6:	4798      	blx	r3
     8f8:	e7aa      	b.n	850 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x5c>
    this->getBuffAddr()[this->m_serLoc + 3] = static_cast<U8>(val >> 32);
     8fa:	4620      	mov	r0, r4
     8fc:	4798      	blx	r3
     8fe:	e7b1      	b.n	864 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x70>
    this->getBuffAddr()[this->m_serLoc + 4] = static_cast<U8>(val >> 24);
     900:	4620      	mov	r0, r4
     902:	4798      	blx	r3
     904:	e7b7      	b.n	876 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x82>
    this->getBuffAddr()[this->m_serLoc + 5] = static_cast<U8>(val >> 16);
     906:	4620      	mov	r0, r4
     908:	4798      	blx	r3
     90a:	e7be      	b.n	88a <Fw::SerializeBufferBase::serialize(unsigned long long)+0x96>
    this->getBuffAddr()[this->m_serLoc + 6] = static_cast<U8>(val >> 8);
     90c:	4620      	mov	r0, r4
     90e:	4798      	blx	r3
     910:	e7c5      	b.n	89e <Fw::SerializeBufferBase::serialize(unsigned long long)+0xaa>
    FW_ASSERT(this->getBuffAddr());
     912:	2196      	movs	r1, #150	; 0x96
     914:	4807      	ldr	r0, [pc, #28]	; (934 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x140>)
     916:	f000 fe79 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->getBuffAddr()[this->m_serLoc + 0] = static_cast<U8>(val >> 56);
     91a:	6823      	ldr	r3, [r4, #0]
     91c:	ea4f 6815 	mov.w	r8, r5, lsr #24
     920:	68db      	ldr	r3, [r3, #12]
     922:	42bb      	cmp	r3, r7
     924:	d1e0      	bne.n	8e8 <Fw::SerializeBufferBase::serialize(unsigned long long)+0xf4>
    return this->m_buff;
     926:	68e0      	ldr	r0, [r4, #12]
     928:	e77d      	b.n	826 <Fw::SerializeBufferBase::serialize(unsigned long long)+0x32>
     92a:	bf00      	nop
     92c:	00000451 	.word	0x00000451
     930:	00000455 	.word	0x00000455
     934:	20000af4 	.word	0x20000af4

00000938 <Fw::SerializeBufferBase::serialize(float)>:
    return this->serialize(u32Val);
     938:	ee10 1a10 	vmov	r1, s0
     93c:	f7ff be8e 	b.w	65c <Fw::SerializeBufferBase::serialize(unsigned long)>

00000940 <Fw::SerializeBufferBase::serialize(bool)>:
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(U8)) - 1 >= this->getBuffCapacity()) {
     940:	6803      	ldr	r3, [r0, #0]
     942:	4a1e      	ldr	r2, [pc, #120]	; (9bc <Fw::SerializeBufferBase::serialize(bool)+0x7c>)
     944:	689b      	ldr	r3, [r3, #8]
     946:	4293      	cmp	r3, r2
SerializeStatus SerializeBufferBase::serialize(bool val) {
     948:	b570      	push	{r4, r5, r6, lr}
     94a:	4604      	mov	r4, r0
     94c:	460e      	mov	r6, r1
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(U8)) - 1 >= this->getBuffCapacity()) {
     94e:	6845      	ldr	r5, [r0, #4]
     950:	d122      	bne.n	998 <Fw::SerializeBufferBase::serialize(bool)+0x58>
    return this->m_buffSize;
     952:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(U8)) - 1 >= this->getBuffCapacity()) {
     954:	4285      	cmp	r5, r0
     956:	d21d      	bcs.n	994 <Fw::SerializeBufferBase::serialize(bool)+0x54>
    FW_ASSERT(this->getBuffAddr());
     958:	6823      	ldr	r3, [r4, #0]
     95a:	4d19      	ldr	r5, [pc, #100]	; (9c0 <Fw::SerializeBufferBase::serialize(bool)+0x80>)
     95c:	68db      	ldr	r3, [r3, #12]
     95e:	42ab      	cmp	r3, r5
     960:	d11c      	bne.n	99c <Fw::SerializeBufferBase::serialize(bool)+0x5c>
    return this->m_buff;
     962:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     964:	b1f0      	cbz	r0, 9a4 <Fw::SerializeBufferBase::serialize(bool)+0x64>
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_TRUE_VALUE;
     966:	6823      	ldr	r3, [r4, #0]
     968:	68db      	ldr	r3, [r3, #12]
    if (val) {
     96a:	b966      	cbnz	r6, 986 <Fw::SerializeBufferBase::serialize(bool)+0x46>
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_FALSE_VALUE;
     96c:	42ab      	cmp	r3, r5
     96e:	d121      	bne.n	9b4 <Fw::SerializeBufferBase::serialize(bool)+0x74>
    return this->m_buff;
     970:	68e0      	ldr	r0, [r4, #12]
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_FALSE_VALUE;
     972:	6863      	ldr	r3, [r4, #4]
     974:	2200      	movs	r2, #0
     976:	54c2      	strb	r2, [r0, r3]
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(U8));
     978:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     97a:	2200      	movs	r2, #0
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(U8));
     97c:	3301      	adds	r3, #1
    return FW_SERIALIZE_OK;
     97e:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(sizeof(U8));
     980:	e9c4 3201 	strd	r3, r2, [r4, #4]
}
     984:	bd70      	pop	{r4, r5, r6, pc}
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_TRUE_VALUE;
     986:	42ab      	cmp	r3, r5
     988:	d111      	bne.n	9ae <Fw::SerializeBufferBase::serialize(bool)+0x6e>
    return this->m_buff;
     98a:	68e0      	ldr	r0, [r4, #12]
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_TRUE_VALUE;
     98c:	6863      	ldr	r3, [r4, #4]
     98e:	22ff      	movs	r2, #255	; 0xff
     990:	54c2      	strb	r2, [r0, r3]
     992:	e7f1      	b.n	978 <Fw::SerializeBufferBase::serialize(bool)+0x38>
        return FW_SERIALIZE_NO_ROOM_LEFT;
     994:	2002      	movs	r0, #2
}
     996:	bd70      	pop	{r4, r5, r6, pc}
    if (this->m_serLoc + static_cast<Serializable::SizeType>(sizeof(U8)) - 1 >= this->getBuffCapacity()) {
     998:	4798      	blx	r3
     99a:	e7db      	b.n	954 <Fw::SerializeBufferBase::serialize(bool)+0x14>
    FW_ASSERT(this->getBuffAddr());
     99c:	4620      	mov	r0, r4
     99e:	4798      	blx	r3
     9a0:	2800      	cmp	r0, #0
     9a2:	d1e0      	bne.n	966 <Fw::SerializeBufferBase::serialize(bool)+0x26>
     9a4:	21d0      	movs	r1, #208	; 0xd0
     9a6:	4807      	ldr	r0, [pc, #28]	; (9c4 <Fw::SerializeBufferBase::serialize(bool)+0x84>)
     9a8:	f000 fe30 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
     9ac:	e7db      	b.n	966 <Fw::SerializeBufferBase::serialize(bool)+0x26>
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_TRUE_VALUE;
     9ae:	4620      	mov	r0, r4
     9b0:	4798      	blx	r3
     9b2:	e7eb      	b.n	98c <Fw::SerializeBufferBase::serialize(bool)+0x4c>
        this->getBuffAddr()[this->m_serLoc + 0] = FW_SERIALIZE_FALSE_VALUE;
     9b4:	4620      	mov	r0, r4
     9b6:	4798      	blx	r3
     9b8:	e7db      	b.n	972 <Fw::SerializeBufferBase::serialize(bool)+0x32>
     9ba:	bf00      	nop
     9bc:	00000451 	.word	0x00000451
     9c0:	00000455 	.word	0x00000455
     9c4:	20000af4 	.word	0x20000af4

000009c8 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)>:
SerializeStatus SerializeBufferBase::serialize(const U8* buff, Serializable::SizeType length) {
     9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9cc:	4688      	mov	r8, r1
        stat = this->serialize(static_cast<FwSizeStoreType>(length));
     9ce:	b291      	uxth	r1, r2
SerializeStatus SerializeBufferBase::serialize(const U8* buff, Serializable::SizeType length) {
     9d0:	4615      	mov	r5, r2
     9d2:	4604      	mov	r4, r0
        stat = this->serialize(static_cast<FwSizeStoreType>(length));
     9d4:	f7ff fdf8 	bl	5c8 <Fw::SerializeBufferBase::serialize(unsigned short)>
        if (stat != FW_SERIALIZE_OK) {
     9d8:	4606      	mov	r6, r0
     9da:	b9d0      	cbnz	r0, a12 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x4a>
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     9dc:	6863      	ldr	r3, [r4, #4]
     9de:	4a13      	ldr	r2, [pc, #76]	; (a2c <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x64>)
     9e0:	18ef      	adds	r7, r5, r3
     9e2:	6823      	ldr	r3, [r4, #0]
     9e4:	689b      	ldr	r3, [r3, #8]
     9e6:	4293      	cmp	r3, r2
     9e8:	d11d      	bne.n	a26 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x5e>
    return this->m_buffSize;
     9ea:	6920      	ldr	r0, [r4, #16]
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     9ec:	4287      	cmp	r7, r0
     9ee:	d816      	bhi.n	a1e <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x56>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     9f0:	6823      	ldr	r3, [r4, #0]
     9f2:	4a0f      	ldr	r2, [pc, #60]	; (a30 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x68>)
     9f4:	68db      	ldr	r3, [r3, #12]
     9f6:	4293      	cmp	r3, r2
     9f8:	d10e      	bne.n	a18 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x50>
    return this->m_buff;
     9fa:	68e0      	ldr	r0, [r4, #12]
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     9fc:	6863      	ldr	r3, [r4, #4]
     9fe:	462a      	mov	r2, r5
     a00:	4641      	mov	r1, r8
     a02:	4418      	add	r0, r3
     a04:	f018 f8c8 	bl	18b98 <memcpy>
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     a08:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     a0a:	2200      	movs	r2, #0
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     a0c:	442b      	add	r3, r5
     a0e:	e9c4 3201 	strd	r3, r2, [r4, #4]
}
     a12:	4630      	mov	r0, r6
     a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     a18:	4620      	mov	r0, r4
     a1a:	4798      	blx	r3
     a1c:	e7ee      	b.n	9fc <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x34>
        return FW_SERIALIZE_NO_ROOM_LEFT;
     a1e:	2602      	movs	r6, #2
}
     a20:	4630      	mov	r0, r6
     a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     a26:	4620      	mov	r0, r4
     a28:	4798      	blx	r3
     a2a:	e7df      	b.n	9ec <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)+0x24>
     a2c:	00000451 	.word	0x00000451
     a30:	00000455 	.word	0x00000455

00000a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>:
SerializeStatus SerializeBufferBase::serialize(const U8* buff, Serializable::SizeType length, bool noLength) {
     a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a36:	4604      	mov	r4, r0
     a38:	460e      	mov	r6, r1
     a3a:	4615      	mov	r5, r2
    return this->serialize(buff, static_cast<FwSizeType>(length),
     a3c:	b91b      	cbnz	r3, a46 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x12>
        stat = this->serialize(static_cast<FwSizeStoreType>(length));
     a3e:	b291      	uxth	r1, r2
     a40:	f7ff fdc2 	bl	5c8 <Fw::SerializeBufferBase::serialize(unsigned short)>
        if (stat != FW_SERIALIZE_OK) {
     a44:	b9d8      	cbnz	r0, a7e <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x4a>
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     a46:	e9d4 2300 	ldrd	r2, r3, [r4]
     a4a:	6892      	ldr	r2, [r2, #8]
     a4c:	18ef      	adds	r7, r5, r3
     a4e:	4b10      	ldr	r3, [pc, #64]	; (a90 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x5c>)
     a50:	429a      	cmp	r2, r3
     a52:	d117      	bne.n	a84 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x50>
    return this->m_buffSize;
     a54:	6920      	ldr	r0, [r4, #16]
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     a56:	4287      	cmp	r7, r0
     a58:	d812      	bhi.n	a80 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x4c>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     a5a:	6823      	ldr	r3, [r4, #0]
     a5c:	4a0d      	ldr	r2, [pc, #52]	; (a94 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x60>)
     a5e:	68db      	ldr	r3, [r3, #12]
     a60:	4293      	cmp	r3, r2
     a62:	d112      	bne.n	a8a <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x56>
    return this->m_buff;
     a64:	68e0      	ldr	r0, [r4, #12]
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     a66:	6863      	ldr	r3, [r4, #4]
     a68:	462a      	mov	r2, r5
     a6a:	4631      	mov	r1, r6
     a6c:	4418      	add	r0, r3
     a6e:	f018 f893 	bl	18b98 <memcpy>
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     a72:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     a74:	2200      	movs	r2, #0
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     a76:	442b      	add	r3, r5
    return FW_SERIALIZE_OK;
     a78:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     a7a:	e9c4 3201 	strd	r3, r2, [r4, #4]
}
     a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     a80:	2002      	movs	r0, #2
}
     a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     a84:	4620      	mov	r0, r4
     a86:	4790      	blx	r2
     a88:	e7e5      	b.n	a56 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x22>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     a8a:	4620      	mov	r0, r4
     a8c:	4798      	blx	r3
     a8e:	e7ea      	b.n	a66 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)+0x32>
     a90:	00000451 	.word	0x00000451
     a94:	00000455 	.word	0x00000455

00000a98 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)>:
SerializeStatus SerializeBufferBase::serialize(const U8* buff, FwSizeType length, Fw::Serialization::t mode) {
     a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a9a:	4604      	mov	r4, r0
     a9c:	460e      	mov	r6, r1
     a9e:	4615      	mov	r5, r2
    if (mode == Serialization::INCLUDE_LENGTH) {
     aa0:	b1e3      	cbz	r3, adc <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x44>
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     aa2:	e9d4 2300 	ldrd	r2, r3, [r4]
     aa6:	6892      	ldr	r2, [r2, #8]
     aa8:	18ef      	adds	r7, r5, r3
     aaa:	4b13      	ldr	r3, [pc, #76]	; (af8 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x60>)
     aac:	429a      	cmp	r2, r3
     aae:	d11d      	bne.n	aec <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x54>
    return this->m_buffSize;
     ab0:	6920      	ldr	r0, [r4, #16]
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     ab2:	4287      	cmp	r7, r0
     ab4:	d818      	bhi.n	ae8 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x50>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     ab6:	6823      	ldr	r3, [r4, #0]
     ab8:	4a10      	ldr	r2, [pc, #64]	; (afc <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x64>)
     aba:	68db      	ldr	r3, [r3, #12]
     abc:	4293      	cmp	r3, r2
     abe:	d118      	bne.n	af2 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x5a>
    return this->m_buff;
     ac0:	68e0      	ldr	r0, [r4, #12]
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     ac2:	6863      	ldr	r3, [r4, #4]
     ac4:	462a      	mov	r2, r5
     ac6:	4631      	mov	r1, r6
     ac8:	4418      	add	r0, r3
     aca:	f018 f865 	bl	18b98 <memcpy>
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     ace:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     ad0:	2200      	movs	r2, #0
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     ad2:	442b      	add	r3, r5
    return FW_SERIALIZE_OK;
     ad4:	4610      	mov	r0, r2
    this->m_serLoc += static_cast<Serializable::SizeType>(length);
     ad6:	e9c4 3201 	strd	r3, r2, [r4, #4]
}
     ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        stat = this->serialize(static_cast<FwSizeStoreType>(length));
     adc:	b291      	uxth	r1, r2
     ade:	f7ff fd73 	bl	5c8 <Fw::SerializeBufferBase::serialize(unsigned short)>
        if (stat != FW_SERIALIZE_OK) {
     ae2:	2800      	cmp	r0, #0
     ae4:	d0dd      	beq.n	aa2 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0xa>
     ae6:	e7f8      	b.n	ada <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x42>
        return FW_SERIALIZE_NO_ROOM_LEFT;
     ae8:	2002      	movs	r0, #2
}
     aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (this->m_serLoc + length > this->getBuffCapacity()) {
     aec:	4620      	mov	r0, r4
     aee:	4790      	blx	r2
     af0:	e7df      	b.n	ab2 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x1a>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], buff, length);
     af2:	4620      	mov	r0, r4
     af4:	4798      	blx	r3
     af6:	e7e4      	b.n	ac2 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)+0x2a>
     af8:	00000451 	.word	0x00000451
     afc:	00000455 	.word	0x00000455

00000b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>:
SerializeStatus SerializeBufferBase::serialize(const Serializable& val) {
     b00:	460b      	mov	r3, r1
     b02:	4601      	mov	r1, r0
    return val.serialize(*this);
     b04:	681a      	ldr	r2, [r3, #0]
SerializeStatus SerializeBufferBase::serialize(const Serializable& val) {
     b06:	4618      	mov	r0, r3
    return val.serialize(*this);
     b08:	6813      	ldr	r3, [r2, #0]
     b0a:	4718      	bx	r3

00000b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>:
SerializeStatus SerializeBufferBase::serialize(const SerializeBufferBase& val) {
     b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        this->getBuffCapacity()) {
     b10:	e9d0 2300 	ldrd	r2, r3, [r0]
    return this->m_serLoc;
     b14:	684f      	ldr	r7, [r1, #4]
SerializeStatus SerializeBufferBase::serialize(const SerializeBufferBase& val) {
     b16:	4604      	mov	r4, r0
    if (this->m_serLoc + size + static_cast<Serializable::SizeType>(sizeof(FwSizeStoreType)) >
     b18:	3302      	adds	r3, #2
        this->getBuffCapacity()) {
     b1a:	6892      	ldr	r2, [r2, #8]
SerializeStatus SerializeBufferBase::serialize(const SerializeBufferBase& val) {
     b1c:	460e      	mov	r6, r1
    if (this->m_serLoc + size + static_cast<Serializable::SizeType>(sizeof(FwSizeStoreType)) >
     b1e:	19dd      	adds	r5, r3, r7
     b20:	4b29      	ldr	r3, [pc, #164]	; (bc8 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0xbc>)
     b22:	429a      	cmp	r2, r3
     b24:	d134      	bne.n	b90 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x84>
    return this->m_buffSize;
     b26:	6900      	ldr	r0, [r0, #16]
    if (this->m_serLoc + size + static_cast<Serializable::SizeType>(sizeof(FwSizeStoreType)) >
     b28:	4285      	cmp	r5, r0
     b2a:	d82d      	bhi.n	b88 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x7c>
    SerializeStatus stat = this->serialize(static_cast<FwSizeStoreType>(size));
     b2c:	b2b9      	uxth	r1, r7
     b2e:	4620      	mov	r0, r4
     b30:	f7ff fd4a 	bl	5c8 <Fw::SerializeBufferBase::serialize(unsigned short)>
    if (stat != FW_SERIALIZE_OK) {
     b34:	4605      	mov	r5, r0
     b36:	bb20      	cbnz	r0, b82 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x76>
    FW_ASSERT(this->getBuffAddr());
     b38:	6823      	ldr	r3, [r4, #0]
     b3a:	f8df 8094 	ldr.w	r8, [pc, #148]	; bd0 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0xc4>
     b3e:	68db      	ldr	r3, [r3, #12]
     b40:	4543      	cmp	r3, r8
     b42:	d127      	bne.n	b94 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x88>
    return this->m_buff;
     b44:	68e0      	ldr	r0, [r4, #12]
    FW_ASSERT(this->getBuffAddr());
     b46:	2800      	cmp	r0, #0
     b48:	d037      	beq.n	bba <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0xae>
    FW_ASSERT(val.getBuffAddr());
     b4a:	6833      	ldr	r3, [r6, #0]
     b4c:	691b      	ldr	r3, [r3, #16]
     b4e:	4543      	cmp	r3, r8
     b50:	d12a      	bne.n	ba8 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x9c>
    return this->m_buff;
     b52:	68f0      	ldr	r0, [r6, #12]
    FW_ASSERT(val.getBuffAddr());
     b54:	b358      	cbz	r0, bae <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0xa2>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], val.getBuffAddr(), size);
     b56:	6823      	ldr	r3, [r4, #0]
     b58:	68db      	ldr	r3, [r3, #12]
     b5a:	4543      	cmp	r3, r8
     b5c:	d121      	bne.n	ba2 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x96>
    return this->m_buff;
     b5e:	68e0      	ldr	r0, [r4, #12]
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], val.getBuffAddr(), size);
     b60:	6833      	ldr	r3, [r6, #0]
     b62:	6862      	ldr	r2, [r4, #4]
     b64:	691b      	ldr	r3, [r3, #16]
     b66:	eb00 0902 	add.w	r9, r0, r2
     b6a:	4543      	cmp	r3, r8
     b6c:	d115      	bne.n	b9a <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x8e>
    return this->m_buff;
     b6e:	68f1      	ldr	r1, [r6, #12]
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], val.getBuffAddr(), size);
     b70:	463a      	mov	r2, r7
     b72:	4648      	mov	r0, r9
     b74:	f018 f810 	bl	18b98 <memcpy>
    this->m_serLoc += size;
     b78:	6863      	ldr	r3, [r4, #4]
    this->m_deserLoc = 0;
     b7a:	2200      	movs	r2, #0
    this->m_serLoc += size;
     b7c:	443b      	add	r3, r7
     b7e:	e9c4 3201 	strd	r3, r2, [r4, #4]
}
     b82:	4628      	mov	r0, r5
     b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
     b88:	2502      	movs	r5, #2
}
     b8a:	4628      	mov	r0, r5
     b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        this->getBuffCapacity()) {
     b90:	4790      	blx	r2
     b92:	e7c9      	b.n	b28 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x1c>
    FW_ASSERT(this->getBuffAddr());
     b94:	4620      	mov	r0, r4
     b96:	4798      	blx	r3
     b98:	e7d5      	b.n	b46 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x3a>
    (void)memcpy(&this->getBuffAddr()[this->m_serLoc], val.getBuffAddr(), size);
     b9a:	4630      	mov	r0, r6
     b9c:	4798      	blx	r3
     b9e:	4601      	mov	r1, r0
     ba0:	e7e6      	b.n	b70 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x64>
     ba2:	4620      	mov	r0, r4
     ba4:	4798      	blx	r3
     ba6:	e7db      	b.n	b60 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x54>
    FW_ASSERT(val.getBuffAddr());
     ba8:	4630      	mov	r0, r6
     baa:	4798      	blx	r3
     bac:	e7d2      	b.n	b54 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x48>
     bae:	f44f 718b 	mov.w	r1, #278	; 0x116
     bb2:	4806      	ldr	r0, [pc, #24]	; (bcc <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0xc0>)
     bb4:	f000 fd2a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
     bb8:	e7cd      	b.n	b56 <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x4a>
    FW_ASSERT(this->getBuffAddr());
     bba:	f240 1115 	movw	r1, #277	; 0x115
     bbe:	4803      	ldr	r0, [pc, #12]	; (bcc <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0xc0>)
     bc0:	f000 fd24 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
     bc4:	e7c1      	b.n	b4a <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)+0x3e>
     bc6:	bf00      	nop
     bc8:	00000451 	.word	0x00000451
     bcc:	20000af4 	.word	0x20000af4
     bd0:	00000455 	.word	0x00000455

00000bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>:
    if (this->getBuffLength() == this->m_deserLoc) {
     bd4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
     bd8:	4293      	cmp	r3, r2
     bda:	d026      	beq.n	c2a <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x56>
    FW_ASSERT(this->getBuffAddr());
     bdc:	6802      	ldr	r2, [r0, #0]
SerializeStatus SerializeBufferBase::deserialize(U8& val) {
     bde:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(this->getBuffAddr());
     be0:	68d2      	ldr	r2, [r2, #12]
     be2:	4604      	mov	r4, r0
     be4:	4d12      	ldr	r5, [pc, #72]	; (c30 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x5c>)
     be6:	460e      	mov	r6, r1
     be8:	42aa      	cmp	r2, r5
     bea:	d108      	bne.n	bfe <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x2a>
    return this->m_buff;
     bec:	68c0      	ldr	r0, [r0, #12]
    FW_ASSERT(this->getBuffAddr());
     bee:	b180      	cbz	r0, c12 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x3e>
    val = this->getBuffAddr()[this->m_deserLoc + 0];
     bf0:	5cc3      	ldrb	r3, [r0, r3]
    return FW_SERIALIZE_OK;
     bf2:	2000      	movs	r0, #0
    val = this->getBuffAddr()[this->m_deserLoc + 0];
     bf4:	7033      	strb	r3, [r6, #0]
    this->m_deserLoc += static_cast<Serializable::SizeType>(sizeof(val));
     bf6:	68a3      	ldr	r3, [r4, #8]
     bf8:	3301      	adds	r3, #1
     bfa:	60a3      	str	r3, [r4, #8]
}
     bfc:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->getBuffAddr());
     bfe:	4790      	blx	r2
     c00:	b138      	cbz	r0, c12 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x3e>
    val = this->getBuffAddr()[this->m_deserLoc + 0];
     c02:	6823      	ldr	r3, [r4, #0]
     c04:	68db      	ldr	r3, [r3, #12]
     c06:	42ab      	cmp	r3, r5
     c08:	d00c      	beq.n	c24 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x50>
     c0a:	4620      	mov	r0, r4
     c0c:	4798      	blx	r3
     c0e:	68a3      	ldr	r3, [r4, #8]
     c10:	e7ee      	b.n	bf0 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x1c>
    FW_ASSERT(this->getBuffAddr());
     c12:	f44f 719a 	mov.w	r1, #308	; 0x134
     c16:	4807      	ldr	r0, [pc, #28]	; (c34 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x60>)
     c18:	f000 fcf8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    val = this->getBuffAddr()[this->m_deserLoc + 0];
     c1c:	6823      	ldr	r3, [r4, #0]
     c1e:	68db      	ldr	r3, [r3, #12]
     c20:	42ab      	cmp	r3, r5
     c22:	d1f2      	bne.n	c0a <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x36>
     c24:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
    return this->m_buff;
     c28:	e7e2      	b.n	bf0 <Fw::SerializeBufferBase::deserialize(unsigned char&)+0x1c>
        return FW_DESERIALIZE_BUFFER_EMPTY;
     c2a:	2003      	movs	r0, #3
}
     c2c:	4770      	bx	lr
     c2e:	bf00      	nop
     c30:	00000455 	.word	0x00000455
     c34:	20000af4 	.word	0x20000af4

00000c38 <Fw::SerializeBufferBase::deserialize(unsigned short&)>:
SerializeStatus SerializeBufferBase::deserialize(U16& val) {
     c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (this->getBuffLength() == this->m_deserLoc) {
     c3a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
     c3e:	4293      	cmp	r3, r2
     c40:	d034      	beq.n	cac <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x74>
    } else if (this->getBuffLength() - this->m_deserLoc < static_cast<Serializable::SizeType>(sizeof(val))) {
     c42:	1ad2      	subs	r2, r2, r3
     c44:	2a01      	cmp	r2, #1
     c46:	d033      	beq.n	cb0 <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x78>
    FW_ASSERT(this->getBuffAddr());
     c48:	6802      	ldr	r2, [r0, #0]
     c4a:	4604      	mov	r4, r0
     c4c:	4f1a      	ldr	r7, [pc, #104]	; (cb8 <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x80>)
     c4e:	460e      	mov	r6, r1
     c50:	68d2      	ldr	r2, [r2, #12]
     c52:	42ba      	cmp	r2, r7
     c54:	d10b      	bne.n	c6e <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x36>
    return this->m_buff;
     c56:	68c0      	ldr	r0, [r0, #12]
    FW_ASSERT(this->getBuffAddr());
     c58:	b1e0      	cbz	r0, c94 <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x5c>
    val = static_cast<U16>(((this->getBuffAddr()[this->m_deserLoc + 1]) << 0) |
     c5a:	18c2      	adds	r2, r0, r3
     c5c:	7855      	ldrb	r5, [r2, #1]
                           ((this->getBuffAddr()[this->m_deserLoc + 0]) << 8));
     c5e:	5cc2      	ldrb	r2, [r0, r3]
    this->m_deserLoc += static_cast<Serializable::SizeType>(sizeof(val));
     c60:	3302      	adds	r3, #2
    return FW_SERIALIZE_OK;
     c62:	2000      	movs	r0, #0
    val = static_cast<U16>(((this->getBuffAddr()[this->m_deserLoc + 1]) << 0) |
     c64:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
     c68:	8035      	strh	r5, [r6, #0]
    this->m_deserLoc += static_cast<Serializable::SizeType>(sizeof(val));
     c6a:	60a3      	str	r3, [r4, #8]
}
     c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(this->getBuffAddr());
     c6e:	4790      	blx	r2
     c70:	b180      	cbz	r0, c94 <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x5c>
    val = static_cast<U16>(((this->getBuffAddr()[this->m_deserLoc + 1]) << 0) |
     c72:	6823      	ldr	r3, [r4, #0]
     c74:	68db      	ldr	r3, [r3, #12]
     c76:	42bb      	cmp	r3, r7
     c78:	d015      	beq.n	ca6 <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x6e>
     c7a:	4620      	mov	r0, r4
     c7c:	4798      	blx	r3
                           ((this->getBuffAddr()[this->m_deserLoc + 0]) << 8));
     c7e:	6822      	ldr	r2, [r4, #0]
    val = static_cast<U16>(((this->getBuffAddr()[this->m_deserLoc + 1]) << 0) |
     c80:	68a3      	ldr	r3, [r4, #8]
                           ((this->getBuffAddr()[this->m_deserLoc + 0]) << 8));
     c82:	68d2      	ldr	r2, [r2, #12]
    val = static_cast<U16>(((this->getBuffAddr()[this->m_deserLoc + 1]) << 0) |
     c84:	4418      	add	r0, r3
     c86:	42ba      	cmp	r2, r7
     c88:	7845      	ldrb	r5, [r0, #1]
     c8a:	d013      	beq.n	cb4 <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x7c>
                           ((this->getBuffAddr()[this->m_deserLoc + 0]) << 8));
     c8c:	4620      	mov	r0, r4
     c8e:	4790      	blx	r2
     c90:	68a3      	ldr	r3, [r4, #8]
     c92:	e7e4      	b.n	c5e <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x26>
    FW_ASSERT(this->getBuffAddr());
     c94:	f240 1151 	movw	r1, #337	; 0x151
     c98:	4808      	ldr	r0, [pc, #32]	; (cbc <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x84>)
     c9a:	f000 fcb7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    val = static_cast<U16>(((this->getBuffAddr()[this->m_deserLoc + 1]) << 0) |
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	68db      	ldr	r3, [r3, #12]
     ca2:	42bb      	cmp	r3, r7
     ca4:	d1e9      	bne.n	c7a <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x42>
     ca6:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
     caa:	e7d6      	b.n	c5a <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x22>
        return FW_DESERIALIZE_BUFFER_EMPTY;
     cac:	2003      	movs	r0, #3
}
     cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_DESERIALIZE_SIZE_MISMATCH;
     cb0:	2005      	movs	r0, #5
}
     cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return this->m_buff;
     cb4:	68e0      	ldr	r0, [r4, #12]
     cb6:	e7d2      	b.n	c5e <Fw::SerializeBufferBase::deserialize(unsigned short&)+0x26>
     cb8:	00000455 	.word	0x00000455
     cbc:	20000af4 	.word	0x20000af4

00000cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>:
    if (this->getBuffLength() == this->m_deserLoc) {
     cc0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
     cc4:	4293      	cmp	r3, r2
     cc6:	d006      	beq.n	cd6 <Fw::SerializeBufferBase::deserialize(unsigned long&)+0x16>
    } else if (this->getBuffLength() - this->m_deserLoc < static_cast<Serializable::SizeType>(sizeof(val))) {
     cc8:	1ad2      	subs	r2, r2, r3
     cca:	2a03      	cmp	r2, #3
     ccc:	d901      	bls.n	cd2 <Fw::SerializeBufferBase::deserialize(unsigned long&)+0x12>
     cce:	f7ff bbd1 	b.w	474 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]>
        return FW_DESERIALIZE_SIZE_MISMATCH;
     cd2:	2005      	movs	r0, #5
}
     cd4:	4770      	bx	lr
        return FW_DESERIALIZE_BUFFER_EMPTY;
     cd6:	2003      	movs	r0, #3
     cd8:	4770      	bx	lr
     cda:	bf00      	nop

00000cdc <Fw::SerializeBufferBase::deserialize(long&)>:
SerializeStatus SerializeBufferBase::deserialize(I32& val) {
     cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (this->getBuffLength() == this->m_deserLoc) {
     cde:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
     ce2:	429a      	cmp	r2, r3
     ce4:	d04c      	beq.n	d80 <Fw::SerializeBufferBase::deserialize(long&)+0xa4>
    } else if (this->getBuffLength() - this->m_deserLoc < static_cast<Serializable::SizeType>(sizeof(val))) {
     ce6:	1a9b      	subs	r3, r3, r2
     ce8:	2b03      	cmp	r3, #3
     cea:	d947      	bls.n	d7c <Fw::SerializeBufferBase::deserialize(long&)+0xa0>
    FW_ASSERT(this->getBuffAddr());
     cec:	6803      	ldr	r3, [r0, #0]
     cee:	4604      	mov	r4, r0
     cf0:	4f2a      	ldr	r7, [pc, #168]	; (d9c <Fw::SerializeBufferBase::deserialize(long&)+0xc0>)
     cf2:	460e      	mov	r6, r1
     cf4:	68db      	ldr	r3, [r3, #12]
     cf6:	42bb      	cmp	r3, r7
     cf8:	d112      	bne.n	d20 <Fw::SerializeBufferBase::deserialize(long&)+0x44>
    return this->m_buff;
     cfa:	68c0      	ldr	r0, [r0, #12]
    FW_ASSERT(this->getBuffAddr());
     cfc:	b190      	cbz	r0, d24 <Fw::SerializeBufferBase::deserialize(long&)+0x48>
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     cfe:	1883      	adds	r3, r0, r2
     d00:	78dd      	ldrb	r5, [r3, #3]
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     d02:	7899      	ldrb	r1, [r3, #2]
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d04:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 1]) << 16) |
     d08:	785b      	ldrb	r3, [r3, #1]
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     d0a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 0]) << 24);
     d0e:	5c83      	ldrb	r3, [r0, r2]
    return FW_SERIALIZE_OK;
     d10:	2000      	movs	r0, #0
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 1]) << 16) |
     d12:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d16:	6035      	str	r5, [r6, #0]
    this->m_deserLoc += static_cast<Serializable::SizeType>(sizeof(val));
     d18:	68a3      	ldr	r3, [r4, #8]
     d1a:	3304      	adds	r3, #4
     d1c:	60a3      	str	r3, [r4, #8]
}
     d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(this->getBuffAddr());
     d20:	4798      	blx	r3
     d22:	b920      	cbnz	r0, d2e <Fw::SerializeBufferBase::deserialize(long&)+0x52>
     d24:	f44f 71c2 	mov.w	r1, #388	; 0x184
     d28:	481d      	ldr	r0, [pc, #116]	; (da0 <Fw::SerializeBufferBase::deserialize(long&)+0xc4>)
     d2a:	f000 fc6f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d2e:	6823      	ldr	r3, [r4, #0]
     d30:	68db      	ldr	r3, [r3, #12]
     d32:	42bb      	cmp	r3, r7
     d34:	d026      	beq.n	d84 <Fw::SerializeBufferBase::deserialize(long&)+0xa8>
     d36:	4620      	mov	r0, r4
     d38:	4798      	blx	r3
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     d3a:	6823      	ldr	r3, [r4, #0]
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d3c:	68a2      	ldr	r2, [r4, #8]
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     d3e:	68db      	ldr	r3, [r3, #12]
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d40:	4410      	add	r0, r2
     d42:	42bb      	cmp	r3, r7
     d44:	78c5      	ldrb	r5, [r0, #3]
     d46:	d020      	beq.n	d8a <Fw::SerializeBufferBase::deserialize(long&)+0xae>
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     d48:	4620      	mov	r0, r4
     d4a:	4798      	blx	r3
     d4c:	68a2      	ldr	r2, [r4, #8]
     d4e:	4410      	add	r0, r2
     d50:	7883      	ldrb	r3, [r0, #2]
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d52:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 1]) << 16) |
     d56:	6823      	ldr	r3, [r4, #0]
     d58:	68db      	ldr	r3, [r3, #12]
     d5a:	42bb      	cmp	r3, r7
     d5c:	d01a      	beq.n	d94 <Fw::SerializeBufferBase::deserialize(long&)+0xb8>
     d5e:	4620      	mov	r0, r4
     d60:	4798      	blx	r3
     d62:	68a2      	ldr	r2, [r4, #8]
     d64:	4410      	add	r0, r2
     d66:	7843      	ldrb	r3, [r0, #1]
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 2]) << 8) |
     d68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
          (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 0]) << 24);
     d6c:	6823      	ldr	r3, [r4, #0]
     d6e:	68db      	ldr	r3, [r3, #12]
     d70:	42bb      	cmp	r3, r7
     d72:	d00d      	beq.n	d90 <Fw::SerializeBufferBase::deserialize(long&)+0xb4>
     d74:	4620      	mov	r0, r4
     d76:	4798      	blx	r3
     d78:	68a2      	ldr	r2, [r4, #8]
     d7a:	e7c8      	b.n	d0e <Fw::SerializeBufferBase::deserialize(long&)+0x32>
        return FW_DESERIALIZE_SIZE_MISMATCH;
     d7c:	2005      	movs	r0, #5
}
     d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_DESERIALIZE_BUFFER_EMPTY;
     d80:	2003      	movs	r0, #3
}
     d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    val = (static_cast<I32>(this->getBuffAddr()[this->m_deserLoc + 3]) << 0) |
     d84:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
     d88:	e7b9      	b.n	cfe <Fw::SerializeBufferBase::deserialize(long&)+0x22>
    return this->m_buff;
     d8a:	68e0      	ldr	r0, [r4, #12]
     d8c:	1883      	adds	r3, r0, r2
     d8e:	e7b8      	b.n	d02 <Fw::SerializeBufferBase::deserialize(long&)+0x26>
     d90:	68e0      	ldr	r0, [r4, #12]
     d92:	e7bc      	b.n	d0e <Fw::SerializeBufferBase::deserialize(long&)+0x32>
     d94:	68e0      	ldr	r0, [r4, #12]
     d96:	1883      	adds	r3, r0, r2
     d98:	e7b6      	b.n	d08 <Fw::SerializeBufferBase::deserialize(long&)+0x2c>
     d9a:	bf00      	nop
     d9c:	00000455 	.word	0x00000455
     da0:	20000af4 	.word	0x20000af4

00000da4 <Fw::SerializeBufferBase::deserialize(float&)>:
    if (this->getBuffLength() == this->m_deserLoc) {
     da4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
     da8:	429a      	cmp	r2, r3
     daa:	d00f      	beq.n	dcc <Fw::SerializeBufferBase::deserialize(float&)+0x28>
    } else if (this->getBuffLength() - this->m_deserLoc < static_cast<Serializable::SizeType>(sizeof(val))) {
     dac:	1ad2      	subs	r2, r2, r3
     dae:	2a03      	cmp	r2, #3
     db0:	d90a      	bls.n	dc8 <Fw::SerializeBufferBase::deserialize(float&)+0x24>
SerializeStatus SerializeBufferBase::deserialize(F32& val) {
     db2:	b510      	push	{r4, lr}
     db4:	b082      	sub	sp, #8
     db6:	460c      	mov	r4, r1
     db8:	a901      	add	r1, sp, #4
     dba:	f7ff fb5b 	bl	474 <Fw::SerializeBufferBase::deserialize(unsigned long&) [clone .part.0]>
    if (stat != FW_SERIALIZE_OK) {
     dbe:	b908      	cbnz	r0, dc4 <Fw::SerializeBufferBase::deserialize(float&)+0x20>
    (void)memcpy(&val, &tempVal, sizeof(val));
     dc0:	9b01      	ldr	r3, [sp, #4]
     dc2:	6023      	str	r3, [r4, #0]
}
     dc4:	b002      	add	sp, #8
     dc6:	bd10      	pop	{r4, pc}
        return FW_DESERIALIZE_SIZE_MISMATCH;
     dc8:	2005      	movs	r0, #5
}
     dca:	4770      	bx	lr
        return FW_DESERIALIZE_BUFFER_EMPTY;
     dcc:	2003      	movs	r0, #3
     dce:	4770      	bx	lr

00000dd0 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)>:
SerializeStatus SerializeBufferBase::deserialize(U8* buff, FwSizeType& length, Serialization::t mode) {
     dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     dd4:	461e      	mov	r6, r3
    FW_ASSERT(this->getBuffAddr());
     dd6:	6803      	ldr	r3, [r0, #0]
     dd8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; eb8 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xe8>
SerializeStatus SerializeBufferBase::deserialize(U8* buff, FwSizeType& length, Serialization::t mode) {
     ddc:	b082      	sub	sp, #8
    FW_ASSERT(this->getBuffAddr());
     dde:	68db      	ldr	r3, [r3, #12]
SerializeStatus SerializeBufferBase::deserialize(U8* buff, FwSizeType& length, Serialization::t mode) {
     de0:	4604      	mov	r4, r0
     de2:	460f      	mov	r7, r1
     de4:	4615      	mov	r5, r2
     de6:	4543      	cmp	r3, r8
     de8:	d142      	bne.n	e70 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xa0>
    return this->m_buff;
     dea:	68c0      	ldr	r0, [r0, #12]
    FW_ASSERT(this->getBuffAddr());
     dec:	2800      	cmp	r0, #0
     dee:	d042      	beq.n	e76 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xa6>
    if (mode == Serialization::INCLUDE_LENGTH) {
     df0:	bb26      	cbnz	r6, e3c <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x6c>
        SerializeStatus stat = this->deserialize(storedLength);
     df2:	f10d 0106 	add.w	r1, sp, #6
     df6:	4620      	mov	r0, r4
     df8:	f7ff ff1e 	bl	c38 <Fw::SerializeBufferBase::deserialize(unsigned short&)>
        if (stat != FW_SERIALIZE_OK) {
     dfc:	b110      	cbz	r0, e04 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x34>
}
     dfe:	b002      	add	sp, #8
     e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     e04:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
        if ((storedLength > this->getBuffLeft()) or (storedLength > length)) {
     e08:	f8bd 6006 	ldrh.w	r6, [sp, #6]
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     e0c:	4291      	cmp	r1, r2
     e0e:	d338      	bcc.n	e82 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xb2>
    return this->m_serLoc - this->m_deserLoc;
     e10:	1a89      	subs	r1, r1, r2
        if ((storedLength > this->getBuffLeft()) or (storedLength > length)) {
     e12:	428e      	cmp	r6, r1
     e14:	d80e      	bhi.n	e34 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x64>
     e16:	682b      	ldr	r3, [r5, #0]
     e18:	429e      	cmp	r6, r3
     e1a:	d80b      	bhi.n	e34 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x64>
        (void)memcpy(buff, &this->getBuffAddr()[this->m_deserLoc], storedLength);
     e1c:	6823      	ldr	r3, [r4, #0]
     e1e:	68db      	ldr	r3, [r3, #12]
     e20:	4543      	cmp	r3, r8
     e22:	d142      	bne.n	eaa <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xda>
    return this->m_buff;
     e24:	68e0      	ldr	r0, [r4, #12]
        (void)memcpy(buff, &this->getBuffAddr()[this->m_deserLoc], storedLength);
     e26:	1881      	adds	r1, r0, r2
     e28:	4638      	mov	r0, r7
     e2a:	4632      	mov	r2, r6
     e2c:	f017 feb4 	bl	18b98 <memcpy>
        length = static_cast<FwSizeType>(storedLength);
     e30:	602e      	str	r6, [r5, #0]
     e32:	e016      	b.n	e62 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x92>
            return FW_DESERIALIZE_SIZE_MISMATCH;
     e34:	2005      	movs	r0, #5
}
     e36:	b002      	add	sp, #8
     e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     e3c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
        if (length > this->getBuffLeft()) {
     e40:	682e      	ldr	r6, [r5, #0]
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     e42:	4291      	cmp	r1, r2
     e44:	d325      	bcc.n	e92 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xc2>
    return this->m_serLoc - this->m_deserLoc;
     e46:	1a89      	subs	r1, r1, r2
        if (length > this->getBuffLeft()) {
     e48:	428e      	cmp	r6, r1
     e4a:	d8f3      	bhi.n	e34 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x64>
        (void)memcpy(buff, &this->getBuffAddr()[this->m_deserLoc], length);
     e4c:	6823      	ldr	r3, [r4, #0]
     e4e:	68db      	ldr	r3, [r3, #12]
     e50:	4543      	cmp	r3, r8
     e52:	d126      	bne.n	ea2 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xd2>
    return this->m_buff;
     e54:	68e0      	ldr	r0, [r4, #12]
        (void)memcpy(buff, &this->getBuffAddr()[this->m_deserLoc], length);
     e56:	1881      	adds	r1, r0, r2
     e58:	4638      	mov	r0, r7
     e5a:	682a      	ldr	r2, [r5, #0]
     e5c:	f017 fe9c 	bl	18b98 <memcpy>
    this->m_deserLoc += static_cast<Serializable::SizeType>(length);
     e60:	682e      	ldr	r6, [r5, #0]
     e62:	68a3      	ldr	r3, [r4, #8]
    return FW_SERIALIZE_OK;
     e64:	2000      	movs	r0, #0
    this->m_deserLoc += static_cast<Serializable::SizeType>(length);
     e66:	4433      	add	r3, r6
     e68:	60a3      	str	r3, [r4, #8]
}
     e6a:	b002      	add	sp, #8
     e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(this->getBuffAddr());
     e70:	4798      	blx	r3
     e72:	2800      	cmp	r0, #0
     e74:	d1bc      	bne.n	df0 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x20>
     e76:	f240 210b 	movw	r1, #523	; 0x20b
     e7a:	480e      	ldr	r0, [pc, #56]	; (eb4 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xe4>)
     e7c:	f000 fbc6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
     e80:	e7b6      	b.n	df0 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x20>
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     e82:	f240 23a5 	movw	r3, #677	; 0x2a5
     e86:	480b      	ldr	r0, [pc, #44]	; (eb4 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xe4>)
     e88:	f000 fbde 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    return this->m_serLoc - this->m_deserLoc;
     e8c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
     e90:	e7be      	b.n	e10 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x40>
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     e92:	f240 23a5 	movw	r3, #677	; 0x2a5
     e96:	4807      	ldr	r0, [pc, #28]	; (eb4 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0xe4>)
     e98:	f000 fbd6 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    return this->m_serLoc - this->m_deserLoc;
     e9c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
     ea0:	e7d1      	b.n	e46 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x76>
        (void)memcpy(buff, &this->getBuffAddr()[this->m_deserLoc], length);
     ea2:	4620      	mov	r0, r4
     ea4:	4798      	blx	r3
     ea6:	68a2      	ldr	r2, [r4, #8]
     ea8:	e7d5      	b.n	e56 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x86>
        (void)memcpy(buff, &this->getBuffAddr()[this->m_deserLoc], storedLength);
     eaa:	4620      	mov	r0, r4
     eac:	4798      	blx	r3
     eae:	68a2      	ldr	r2, [r4, #8]
     eb0:	e7b9      	b.n	e26 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)+0x56>
     eb2:	bf00      	nop
     eb4:	20000af4 	.word	0x20000af4
     eb8:	00000455 	.word	0x00000455

00000ebc <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, bool)>:
SerializeStatus SerializeBufferBase::deserialize(U8* buff, Serializable::SizeType& length, bool noLength) {
     ebc:	b510      	push	{r4, lr}
     ebe:	4614      	mov	r4, r2
     ec0:	b082      	sub	sp, #8
    FwSizeType length_in_out = static_cast<FwSizeType>(length);
     ec2:	6812      	ldr	r2, [r2, #0]
     ec4:	9201      	str	r2, [sp, #4]
        this->deserialize(buff, length_in_out, noLength ? Serialization::OMIT_LENGTH : Serialization::INCLUDE_LENGTH);
     ec6:	aa01      	add	r2, sp, #4
     ec8:	f7ff ff82 	bl	dd0 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)>
    length = static_cast<Serializable::SizeType>(length_in_out);
     ecc:	9b01      	ldr	r3, [sp, #4]
     ece:	6023      	str	r3, [r4, #0]
}
     ed0:	b002      	add	sp, #8
     ed2:	bd10      	pop	{r4, pc}

00000ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>:
SerializeStatus SerializeBufferBase::deserialize(Serializable& val) {
     ed4:	460b      	mov	r3, r1
     ed6:	4601      	mov	r1, r0
    return val.deserialize(*this);
     ed8:	681a      	ldr	r2, [r3, #0]
SerializeStatus SerializeBufferBase::deserialize(Serializable& val) {
     eda:	4618      	mov	r0, r3
    return val.deserialize(*this);
     edc:	6853      	ldr	r3, [r2, #4]
     ede:	4718      	bx	r3

00000ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>:
    FW_ASSERT(val.getBuffAddr());
     ee0:	680b      	ldr	r3, [r1, #0]
SerializeStatus SerializeBufferBase::deserialize(SerializeBufferBase& val) {
     ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    FW_ASSERT(val.getBuffAddr());
     ee6:	68db      	ldr	r3, [r3, #12]
SerializeStatus SerializeBufferBase::deserialize(SerializeBufferBase& val) {
     ee8:	b082      	sub	sp, #8
     eea:	4f3f      	ldr	r7, [pc, #252]	; (fe8 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x108>)
     eec:	460c      	mov	r4, r1
     eee:	4605      	mov	r5, r0
     ef0:	42bb      	cmp	r3, r7
     ef2:	d14a      	bne.n	f8a <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xaa>
    return this->m_buff;
     ef4:	68c8      	ldr	r0, [r1, #12]
    FW_ASSERT(val.getBuffAddr());
     ef6:	2800      	cmp	r0, #0
     ef8:	d04b      	beq.n	f92 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xb2>
    stat = this->deserialize(storedLength);
     efa:	f10d 0106 	add.w	r1, sp, #6
     efe:	4628      	mov	r0, r5
     f00:	f7ff fe9a 	bl	c38 <Fw::SerializeBufferBase::deserialize(unsigned short&)>
    if (stat != FW_SERIALIZE_OK) {
     f04:	4606      	mov	r6, r0
     f06:	2800      	cmp	r0, #0
     f08:	d136      	bne.n	f78 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x98>
    if ((storedLength > val.getBuffCapacity()) or (storedLength > this->getBuffLeft())) {
     f0a:	6823      	ldr	r3, [r4, #0]
     f0c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; ff0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x110>
     f10:	689b      	ldr	r3, [r3, #8]
     f12:	f8bd 8006 	ldrh.w	r8, [sp, #6]
     f16:	454b      	cmp	r3, r9
     f18:	d149      	bne.n	fae <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xce>
    return this->m_buffSize;
     f1a:	6920      	ldr	r0, [r4, #16]
    if ((storedLength > val.getBuffCapacity()) or (storedLength > this->getBuffLeft())) {
     f1c:	4580      	cmp	r8, r0
     f1e:	d82f      	bhi.n	f80 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xa0>
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     f20:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
     f24:	4291      	cmp	r1, r2
     f26:	d33a      	bcc.n	f9e <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xbe>
    return this->m_serLoc - this->m_deserLoc;
     f28:	1a89      	subs	r1, r1, r2
    if ((storedLength > val.getBuffCapacity()) or (storedLength > this->getBuffLeft())) {
     f2a:	4588      	cmp	r8, r1
     f2c:	d828      	bhi.n	f80 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xa0>
    FW_ASSERT(this->getBuffAddr());
     f2e:	682b      	ldr	r3, [r5, #0]
     f30:	68db      	ldr	r3, [r3, #12]
     f32:	42bb      	cmp	r3, r7
     f34:	d146      	bne.n	fc4 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xe4>
    return this->m_buff;
     f36:	68e8      	ldr	r0, [r5, #12]
    FW_ASSERT(this->getBuffAddr());
     f38:	2800      	cmp	r0, #0
     f3a:	d04e      	beq.n	fda <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xfa>
    (void)memcpy(val.getBuffAddr(), &this->getBuffAddr()[this->m_deserLoc], storedLength);
     f3c:	6823      	ldr	r3, [r4, #0]
     f3e:	68db      	ldr	r3, [r3, #12]
     f40:	42bb      	cmp	r3, r7
     f42:	d146      	bne.n	fd2 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xf2>
    return this->m_buff;
     f44:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    (void)memcpy(val.getBuffAddr(), &this->getBuffAddr()[this->m_deserLoc], storedLength);
     f48:	682b      	ldr	r3, [r5, #0]
     f4a:	68db      	ldr	r3, [r3, #12]
     f4c:	42bb      	cmp	r3, r7
     f4e:	d13c      	bne.n	fca <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xea>
    return this->m_buff;
     f50:	68e9      	ldr	r1, [r5, #12]
    (void)memcpy(val.getBuffAddr(), &this->getBuffAddr()[this->m_deserLoc], storedLength);
     f52:	68ab      	ldr	r3, [r5, #8]
     f54:	4650      	mov	r0, sl
     f56:	4642      	mov	r2, r8
     f58:	4419      	add	r1, r3
     f5a:	f017 fe1d 	bl	18b98 <memcpy>
    if (this->getBuffCapacity() < length) {
     f5e:	6823      	ldr	r3, [r4, #0]
     f60:	689b      	ldr	r3, [r3, #8]
     f62:	454b      	cmp	r3, r9
     f64:	d12b      	bne.n	fbe <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xde>
    return this->m_buffSize;
     f66:	6920      	ldr	r0, [r4, #16]
    if (this->getBuffCapacity() < length) {
     f68:	4580      	cmp	r8, r0
     f6a:	d823      	bhi.n	fb4 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0xd4>
        this->m_deserLoc = 0;
     f6c:	2300      	movs	r3, #0
     f6e:	e9c4 8301 	strd	r8, r3, [r4, #4]
    this->m_deserLoc += storedLength;
     f72:	68ab      	ldr	r3, [r5, #8]
     f74:	4443      	add	r3, r8
     f76:	60ab      	str	r3, [r5, #8]
}
     f78:	4630      	mov	r0, r6
     f7a:	b002      	add	sp, #8
     f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return FW_DESERIALIZE_SIZE_MISMATCH;
     f80:	2605      	movs	r6, #5
}
     f82:	4630      	mov	r0, r6
     f84:	b002      	add	sp, #8
     f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FW_ASSERT(val.getBuffAddr());
     f8a:	4608      	mov	r0, r1
     f8c:	4798      	blx	r3
     f8e:	2800      	cmp	r0, #0
     f90:	d1b3      	bne.n	efa <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x1a>
     f92:	f240 2131 	movw	r1, #561	; 0x231
     f96:	4815      	ldr	r0, [pc, #84]	; (fec <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x10c>)
     f98:	f000 fb38 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
     f9c:	e7ad      	b.n	efa <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x1a>
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
     f9e:	f240 23a5 	movw	r3, #677	; 0x2a5
     fa2:	4812      	ldr	r0, [pc, #72]	; (fec <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x10c>)
     fa4:	f000 fb50 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    return this->m_serLoc - this->m_deserLoc;
     fa8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
     fac:	e7bc      	b.n	f28 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x48>
    if ((storedLength > val.getBuffCapacity()) or (storedLength > this->getBuffLeft())) {
     fae:	4620      	mov	r0, r4
     fb0:	4798      	blx	r3
     fb2:	e7b3      	b.n	f1c <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x3c>
        return FW_SERIALIZE_NO_ROOM_LEFT;
     fb4:	2602      	movs	r6, #2
}
     fb6:	4630      	mov	r0, r6
     fb8:	b002      	add	sp, #8
     fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (this->getBuffCapacity() < length) {
     fbe:	4620      	mov	r0, r4
     fc0:	4798      	blx	r3
     fc2:	e7d1      	b.n	f68 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x88>
    FW_ASSERT(this->getBuffAddr());
     fc4:	4628      	mov	r0, r5
     fc6:	4798      	blx	r3
     fc8:	e7b6      	b.n	f38 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x58>
    (void)memcpy(val.getBuffAddr(), &this->getBuffAddr()[this->m_deserLoc], storedLength);
     fca:	4628      	mov	r0, r5
     fcc:	4798      	blx	r3
     fce:	4601      	mov	r1, r0
     fd0:	e7bf      	b.n	f52 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x72>
     fd2:	4620      	mov	r0, r4
     fd4:	4798      	blx	r3
     fd6:	4682      	mov	sl, r0
     fd8:	e7b6      	b.n	f48 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x68>
    FW_ASSERT(this->getBuffAddr());
     fda:	f240 2142 	movw	r1, #578	; 0x242
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x10c>)
     fe0:	f000 fb14 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
     fe4:	e7aa      	b.n	f3c <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)+0x5c>
     fe6:	bf00      	nop
     fe8:	00000455 	.word	0x00000455
     fec:	20000af4 	.word	0x20000af4
     ff0:	00000451 	.word	0x00000451

00000ff4 <Fw::SerializeBufferBase::resetSer()>:
    this->m_deserLoc = 0;
     ff4:	2300      	movs	r3, #0
    this->m_serLoc = 0;
     ff6:	e9c0 3301 	strd	r3, r3, [r0, #4]
}
     ffa:	4770      	bx	lr

00000ffc <Fw::SerializeBufferBase::resetDeser()>:
    this->m_deserLoc = 0;
     ffc:	2300      	movs	r3, #0
     ffe:	6083      	str	r3, [r0, #8]
}
    1000:	4770      	bx	lr
    1002:	bf00      	nop

00001004 <Fw::SerializeBufferBase::getBuffLength() const>:
}
    1004:	6840      	ldr	r0, [r0, #4]
    1006:	4770      	bx	lr

00001008 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)>:
SerializeStatus SerializeBufferBase::setBuff(const U8* src, Serializable::SizeType length) {
    1008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (this->getBuffCapacity() < length) {
    100a:	6803      	ldr	r3, [r0, #0]
SerializeStatus SerializeBufferBase::setBuff(const U8* src, Serializable::SizeType length) {
    100c:	4615      	mov	r5, r2
    100e:	4a1a      	ldr	r2, [pc, #104]	; (1078 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x70>)
    1010:	4604      	mov	r4, r0
    if (this->getBuffCapacity() < length) {
    1012:	689b      	ldr	r3, [r3, #8]
SerializeStatus SerializeBufferBase::setBuff(const U8* src, Serializable::SizeType length) {
    1014:	460e      	mov	r6, r1
    1016:	4293      	cmp	r3, r2
    1018:	d115      	bne.n	1046 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x3e>
    return this->m_buffSize;
    101a:	6900      	ldr	r0, [r0, #16]
    if (this->getBuffCapacity() < length) {
    101c:	42a8      	cmp	r0, r5
    101e:	d310      	bcc.n	1042 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x3a>
        FW_ASSERT(src);
    1020:	b316      	cbz	r6, 1068 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x60>
        FW_ASSERT(this->getBuffAddr());
    1022:	6823      	ldr	r3, [r4, #0]
    1024:	4f15      	ldr	r7, [pc, #84]	; (107c <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x74>)
    1026:	68db      	ldr	r3, [r3, #12]
    1028:	42bb      	cmp	r3, r7
    102a:	d10e      	bne.n	104a <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x42>
    return this->m_buff;
    102c:	68e0      	ldr	r0, [r4, #12]
        FW_ASSERT(this->getBuffAddr());
    102e:	b178      	cbz	r0, 1050 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x48>
        memcpy(this->getBuffAddr(), src, length);
    1030:	462a      	mov	r2, r5
    1032:	4631      	mov	r1, r6
    1034:	f017 fdb0 	bl	18b98 <memcpy>
        this->m_deserLoc = 0;
    1038:	2300      	movs	r3, #0
        this->m_serLoc = length;
    103a:	6065      	str	r5, [r4, #4]
        this->m_deserLoc = 0;
    103c:	4618      	mov	r0, r3
    103e:	60a3      	str	r3, [r4, #8]
}
    1040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
    1042:	2002      	movs	r0, #2
}
    1044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (this->getBuffCapacity() < length) {
    1046:	4798      	blx	r3
    1048:	e7e8      	b.n	101c <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x14>
        FW_ASSERT(this->getBuffAddr());
    104a:	4620      	mov	r0, r4
    104c:	4798      	blx	r3
    104e:	b920      	cbnz	r0, 105a <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x52>
    1050:	f240 2192 	movw	r1, #658	; 0x292
    1054:	480a      	ldr	r0, [pc, #40]	; (1080 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x78>)
    1056:	f000 fad9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        memcpy(this->getBuffAddr(), src, length);
    105a:	6823      	ldr	r3, [r4, #0]
    105c:	68db      	ldr	r3, [r3, #12]
    105e:	42bb      	cmp	r3, r7
    1060:	d008      	beq.n	1074 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x6c>
    1062:	4620      	mov	r0, r4
    1064:	4798      	blx	r3
    1066:	e7e3      	b.n	1030 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x28>
        FW_ASSERT(src);
    1068:	f240 2191 	movw	r1, #657	; 0x291
    106c:	4804      	ldr	r0, [pc, #16]	; (1080 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x78>)
    106e:	f000 facd 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    1072:	e7d6      	b.n	1022 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x1a>
    return this->m_buff;
    1074:	68e0      	ldr	r0, [r4, #12]
    1076:	e7db      	b.n	1030 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)+0x28>
    1078:	00000451 	.word	0x00000451
    107c:	00000455 	.word	0x00000455
    1080:	20000af4 	.word	0x20000af4

00001084 <Fw::SerializeBufferBase::setBuffLen(unsigned long)>:
SerializeStatus SerializeBufferBase::setBuffLen(Serializable::SizeType length) {
    1084:	b538      	push	{r3, r4, r5, lr}
    if (this->getBuffCapacity() < length) {
    1086:	6803      	ldr	r3, [r0, #0]
SerializeStatus SerializeBufferBase::setBuffLen(Serializable::SizeType length) {
    1088:	4604      	mov	r4, r0
    108a:	4a08      	ldr	r2, [pc, #32]	; (10ac <Fw::SerializeBufferBase::setBuffLen(unsigned long)+0x28>)
    108c:	460d      	mov	r5, r1
    if (this->getBuffCapacity() < length) {
    108e:	689b      	ldr	r3, [r3, #8]
    1090:	4293      	cmp	r3, r2
    1092:	d109      	bne.n	10a8 <Fw::SerializeBufferBase::setBuffLen(unsigned long)+0x24>
    return this->m_buffSize;
    1094:	6900      	ldr	r0, [r0, #16]
    if (this->getBuffCapacity() < length) {
    1096:	42a8      	cmp	r0, r5
    1098:	d304      	bcc.n	10a4 <Fw::SerializeBufferBase::setBuffLen(unsigned long)+0x20>
        this->m_deserLoc = 0;
    109a:	2300      	movs	r3, #0
        this->m_serLoc = length;
    109c:	6065      	str	r5, [r4, #4]
        return FW_SERIALIZE_OK;
    109e:	4618      	mov	r0, r3
        this->m_deserLoc = 0;
    10a0:	60a3      	str	r3, [r4, #8]
}
    10a2:	bd38      	pop	{r3, r4, r5, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
    10a4:	2002      	movs	r0, #2
}
    10a6:	bd38      	pop	{r3, r4, r5, pc}
    if (this->getBuffCapacity() < length) {
    10a8:	4798      	blx	r3
    10aa:	e7f4      	b.n	1096 <Fw::SerializeBufferBase::setBuffLen(unsigned long)+0x12>
    10ac:	00000451 	.word	0x00000451

000010b0 <Fw::SerializeBufferBase::getBuffLeft() const>:
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
    10b0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    10b4:	4291      	cmp	r1, r2
    10b6:	d301      	bcc.n	10bc <Fw::SerializeBufferBase::getBuffLeft() const+0xc>
}
    10b8:	1a88      	subs	r0, r1, r2
    10ba:	4770      	bx	lr
Serializable::SizeType SerializeBufferBase::getBuffLeft() const {
    10bc:	b510      	push	{r4, lr}
    10be:	4604      	mov	r4, r0
    FW_ASSERT(this->m_serLoc >= this->m_deserLoc, static_cast<FwAssertArgType>(this->m_serLoc),
    10c0:	f240 23a5 	movw	r3, #677	; 0x2a5
    10c4:	4803      	ldr	r0, [pc, #12]	; (10d4 <Fw::SerializeBufferBase::getBuffLeft() const+0x24>)
    10c6:	f000 fabf 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    return this->m_serLoc - this->m_deserLoc;
    10ca:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
}
    10ce:	1a88      	subs	r0, r1, r2
    10d0:	bd10      	pop	{r4, pc}
    10d2:	bf00      	nop
    10d4:	20000af4 	.word	0x20000af4

000010d8 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)>:
SerializeStatus SerializeBufferBase::copyRaw(SerializeBufferBase& dest, Serializable::SizeType size) {
    10d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (dest.getBuffCapacity() < size) {
    10da:	680b      	ldr	r3, [r1, #0]
SerializeStatus SerializeBufferBase::copyRaw(SerializeBufferBase& dest, Serializable::SizeType size) {
    10dc:	460d      	mov	r5, r1
    10de:	4f11      	ldr	r7, [pc, #68]	; (1124 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x4c>)
    10e0:	4604      	mov	r4, r0
    if (dest.getBuffCapacity() < size) {
    10e2:	689b      	ldr	r3, [r3, #8]
SerializeStatus SerializeBufferBase::copyRaw(SerializeBufferBase& dest, Serializable::SizeType size) {
    10e4:	4616      	mov	r6, r2
    10e6:	42bb      	cmp	r3, r7
    10e8:	d115      	bne.n	1116 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x3e>
    return this->m_buffSize;
    10ea:	6908      	ldr	r0, [r1, #16]
    if (dest.getBuffCapacity() < size) {
    10ec:	42b0      	cmp	r0, r6
    10ee:	d310      	bcc.n	1112 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x3a>
    SerializeStatus stat = dest.setBuff(&this->getBuffAddr()[this->m_deserLoc], size);
    10f0:	6823      	ldr	r3, [r4, #0]
    10f2:	4a0d      	ldr	r2, [pc, #52]	; (1128 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x50>)
    10f4:	68db      	ldr	r3, [r3, #12]
    10f6:	4293      	cmp	r3, r2
    10f8:	d110      	bne.n	111c <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x44>
    return this->m_buff;
    10fa:	68e0      	ldr	r0, [r4, #12]
    SerializeStatus stat = dest.setBuff(&this->getBuffAddr()[this->m_deserLoc], size);
    10fc:	68a1      	ldr	r1, [r4, #8]
    10fe:	4632      	mov	r2, r6
    1100:	4401      	add	r1, r0
    1102:	4628      	mov	r0, r5
    1104:	f7ff ff80 	bl	1008 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)>
    if (stat == FW_SERIALIZE_OK) {
    1108:	b910      	cbnz	r0, 1110 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x38>
        this->m_deserLoc += size;
    110a:	68a3      	ldr	r3, [r4, #8]
    110c:	4433      	add	r3, r6
    110e:	60a3      	str	r3, [r4, #8]
}
    1110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FW_SERIALIZE_NO_ROOM_LEFT;
    1112:	2002      	movs	r0, #2
}
    1114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dest.getBuffCapacity() < size) {
    1116:	4608      	mov	r0, r1
    1118:	4798      	blx	r3
    111a:	e7e7      	b.n	10ec <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x14>
    SerializeStatus stat = dest.setBuff(&this->getBuffAddr()[this->m_deserLoc], size);
    111c:	4620      	mov	r0, r4
    111e:	4798      	blx	r3
    1120:	e7ec      	b.n	10fc <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)+0x24>
    1122:	bf00      	nop
    1124:	00000451 	.word	0x00000451
    1128:	00000455 	.word	0x00000455

0000112c <Fw::SerializeBufferBase::getBuffAddrSer()>:
    return &this->getBuffAddr()[this->m_serLoc];
    112c:	6803      	ldr	r3, [r0, #0]
    112e:	4a07      	ldr	r2, [pc, #28]	; (114c <Fw::SerializeBufferBase::getBuffAddrSer()+0x20>)
    1130:	68db      	ldr	r3, [r3, #12]
    1132:	4293      	cmp	r3, r2
U8* SerializeBufferBase::getBuffAddrSer() {
    1134:	b510      	push	{r4, lr}
    1136:	4604      	mov	r4, r0
    1138:	d103      	bne.n	1142 <Fw::SerializeBufferBase::getBuffAddrSer()+0x16>
    return this->m_buff;
    113a:	68c0      	ldr	r0, [r0, #12]
    return &this->getBuffAddr()[this->m_serLoc];
    113c:	6863      	ldr	r3, [r4, #4]
}
    113e:	4418      	add	r0, r3
    1140:	bd10      	pop	{r4, pc}
    return &this->getBuffAddr()[this->m_serLoc];
    1142:	4798      	blx	r3
    1144:	6863      	ldr	r3, [r4, #4]
}
    1146:	4418      	add	r0, r3
    1148:	bd10      	pop	{r4, pc}
    114a:	bf00      	nop
    114c:	00000455 	.word	0x00000455

00001150 <Fw::ExternalSerializeBuffer::ExternalSerializeBuffer()>:
SerializeBufferBase::SerializeBufferBase() : m_serLoc(0), m_deserLoc(0) {}
    1150:	2200      	movs	r2, #0
ExternalSerializeBuffer::ExternalSerializeBuffer() {
    1152:	4903      	ldr	r1, [pc, #12]	; (1160 <Fw::ExternalSerializeBuffer::ExternalSerializeBuffer()+0x10>)
SerializeBufferBase::SerializeBufferBase() : m_serLoc(0), m_deserLoc(0) {}
    1154:	e9c0 2201 	strd	r2, r2, [r0, #4]
ExternalSerializeBuffer::ExternalSerializeBuffer() {
    1158:	6001      	str	r1, [r0, #0]
    this->m_buffSize = 0;
    115a:	e9c0 2203 	strd	r2, r2, [r0, #12]
}
    115e:	4770      	bx	lr
    1160:	20003214 	.word	0x20003214

00001164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>:
void ExternalSerializeBuffer::setExtBuffer(U8* buffPtr, Serializable::SizeType size) {
    1164:	b570      	push	{r4, r5, r6, lr}
    1166:	4604      	mov	r4, r0
    FW_ASSERT(buffPtr != nullptr);
    1168:	460d      	mov	r5, r1
void ExternalSerializeBuffer::setExtBuffer(U8* buffPtr, Serializable::SizeType size) {
    116a:	4616      	mov	r6, r2
    FW_ASSERT(buffPtr != nullptr);
    116c:	b129      	cbz	r1, 117a <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)+0x16>
    this->m_deserLoc = 0;
    116e:	2300      	movs	r3, #0
    this->m_buffSize = size;
    1170:	e9c4 5603 	strd	r5, r6, [r4, #12]
    this->m_serLoc = 0;
    1174:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    1178:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(buffPtr != nullptr);
    117a:	f240 21ff 	movw	r1, #767	; 0x2ff
    117e:	4804      	ldr	r0, [pc, #16]	; (1190 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)+0x2c>)
    1180:	f000 fa44 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_deserLoc = 0;
    1184:	2300      	movs	r3, #0
    this->m_buffSize = size;
    1186:	e9c4 5603 	strd	r5, r6, [r4, #12]
    this->m_serLoc = 0;
    118a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    118e:	bd70      	pop	{r4, r5, r6, pc}
    1190:	20000af4 	.word	0x20000af4

00001194 <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)>:
              static_cast<FwAssertArgType>(this->maxLength()));
    return length;
}

StringBase::SizeType StringBase::maxLength() const {
    const SizeType capacity = this->getCapacity();
    1194:	6803      	ldr	r3, [r0, #0]
    const FwSizeType len = FW_MIN(maxLength, this->length());
    // Serialize length and then bytes
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), len, Serialization::INCLUDE_LENGTH);
}

SerializeStatus StringBase::deserialize(SerializeBufferBase& buffer) {
    1196:	b5f0      	push	{r4, r5, r6, r7, lr}
    const SizeType capacity = this->getCapacity();
    1198:	699b      	ldr	r3, [r3, #24]
SerializeStatus StringBase::deserialize(SerializeBufferBase& buffer) {
    119a:	b083      	sub	sp, #12
    119c:	4604      	mov	r4, r0
    119e:	460e      	mov	r6, r1
    const SizeType capacity = this->getCapacity();
    11a0:	4798      	blx	r3
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    11a2:	4605      	mov	r5, r0
    11a4:	b1c8      	cbz	r0, 11da <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x46>
    // Initial estimate of actual size is max size
    // This estimate is refined when calling the deserialize function below
    SizeType actualSize = maxSize;
    // Public interface returns const char*, but implementation needs char*
    // So use const_cast
    CHAR* raw = const_cast<CHAR*>(this->toChar());
    11a6:	6823      	ldr	r3, [r4, #0]
    return capacity - 1;
    11a8:	1e47      	subs	r7, r0, #1
    CHAR* raw = const_cast<CHAR*>(this->toChar());
    11aa:	4620      	mov	r0, r4
    11ac:	695b      	ldr	r3, [r3, #20]
    SizeType actualSize = maxSize;
    11ae:	9701      	str	r7, [sp, #4]
    CHAR* raw = const_cast<CHAR*>(this->toChar());
    11b0:	4798      	blx	r3
    11b2:	4604      	mov	r4, r0
    // Deserialize length
    // Fail if length exceeds max size (the initial value of actualSize)
    // Otherwise deserialize length bytes and set actualSize to length
    SerializeStatus stat = buffer.deserialize(reinterpret_cast<U8*>(raw), actualSize, Serialization::INCLUDE_LENGTH);
    11b4:	2300      	movs	r3, #0
    11b6:	aa01      	add	r2, sp, #4
    11b8:	4630      	mov	r0, r6
    11ba:	4621      	mov	r1, r4
    11bc:	f7ff fe08 	bl	dd0 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)>
    if (stat == FW_SERIALIZE_OK) {
    11c0:	b118      	cbz	r0, 11ca <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x36>
                  static_cast<FwAssertArgType>(maxSize));
        raw[actualSize] = 0;
    } else {
        // Deserialization failed: leave string unmodified, but ensure that it
        // is null-terminated
        raw[maxSize] = 0;
    11c2:	2300      	movs	r3, #0
    11c4:	55e3      	strb	r3, [r4, r7]
    }
    return stat;
}
    11c6:	b003      	add	sp, #12
    11c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FW_ASSERT(actualSize <= maxSize, static_cast<FwAssertArgType>(actualSize),
    11ca:	9901      	ldr	r1, [sp, #4]
    11cc:	42b9      	cmp	r1, r7
    11ce:	d81e      	bhi.n	120e <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x7a>
        raw[actualSize] = 0;
    11d0:	2300      	movs	r3, #0
    11d2:	4618      	mov	r0, r3
    11d4:	5463      	strb	r3, [r4, r1]
}
    11d6:	b003      	add	sp, #12
    11d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    11da:	4601      	mov	r1, r0
    11dc:	2282      	movs	r2, #130	; 0x82
    11de:	480f      	ldr	r0, [pc, #60]	; (121c <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x88>)
    SizeType actualSize = maxSize;
    11e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    11e4:	f000 fa20 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    CHAR* raw = const_cast<CHAR*>(this->toChar());
    11e8:	6823      	ldr	r3, [r4, #0]
    11ea:	4620      	mov	r0, r4
    SizeType actualSize = maxSize;
    11ec:	9701      	str	r7, [sp, #4]
    CHAR* raw = const_cast<CHAR*>(this->toChar());
    11ee:	695b      	ldr	r3, [r3, #20]
    11f0:	4798      	blx	r3
    11f2:	4604      	mov	r4, r0
    SerializeStatus stat = buffer.deserialize(reinterpret_cast<U8*>(raw), actualSize, Serialization::INCLUDE_LENGTH);
    11f4:	462b      	mov	r3, r5
    11f6:	aa01      	add	r2, sp, #4
    11f8:	4630      	mov	r0, r6
    11fa:	4621      	mov	r1, r4
    11fc:	f7ff fde8 	bl	dd0 <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, Fw::Serialization::t)>
    if (stat == FW_SERIALIZE_OK) {
    1200:	2800      	cmp	r0, #0
    1202:	d1de      	bne.n	11c2 <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x2e>
        raw[actualSize] = 0;
    1204:	9901      	ldr	r1, [sp, #4]
    1206:	2300      	movs	r3, #0
    1208:	4618      	mov	r0, r3
    120a:	5463      	strb	r3, [r4, r1]
    120c:	e7e3      	b.n	11d6 <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x42>
        FW_ASSERT(actualSize <= maxSize, static_cast<FwAssertArgType>(actualSize),
    120e:	23a7      	movs	r3, #167	; 0xa7
    1210:	463a      	mov	r2, r7
    1212:	4802      	ldr	r0, [pc, #8]	; (121c <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x88>)
    1214:	f000 fa18 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
        raw[actualSize] = 0;
    1218:	9901      	ldr	r1, [sp, #4]
    121a:	e7f4      	b.n	1206 <Fw::StringBase::deserialize(Fw::SerializeBufferBase&)+0x72>
    121c:	200006a4 	.word	0x200006a4

00001220 <Fw::StringBase::StringBase()>:
StringBase::StringBase() {}
    1220:	b510      	push	{r4, lr}
    1222:	4604      	mov	r4, r0
    1224:	f7ff f984 	bl	530 <Fw::Serializable::Serializable()>
    1228:	4b01      	ldr	r3, [pc, #4]	; (1230 <Fw::StringBase::StringBase()+0x10>)
    122a:	4620      	mov	r0, r4
    122c:	6023      	str	r3, [r4, #0]
    122e:	bd10      	pop	{r4, pc}
    1230:	20002bc4 	.word	0x20002bc4

00001234 <Fw::StringBase::~StringBase()>:
StringBase::~StringBase() {}
    1234:	4b03      	ldr	r3, [pc, #12]	; (1244 <Fw::StringBase::~StringBase()+0x10>)
    1236:	b510      	push	{r4, lr}
    1238:	4604      	mov	r4, r0
    123a:	6003      	str	r3, [r0, #0]
    123c:	f7ff f97e 	bl	53c <Fw::Serializable::~Serializable()>
    1240:	4620      	mov	r0, r4
    1242:	bd10      	pop	{r4, pc}
    1244:	20002bc4 	.word	0x20002bc4

00001248 <Fw::StringBase::vformat(char const*, std::__va_list)>:
FormatStatus StringBase::vformat(const CHAR* formatString, va_list args) {
    1248:	b570      	push	{r4, r5, r6, lr}
    124a:	b082      	sub	sp, #8
    124c:	4604      	mov	r4, r0
    124e:	460e      	mov	r6, r1
    1250:	9201      	str	r2, [sp, #4]
    CHAR* us = const_cast<CHAR*>(this->toChar());
    1252:	6802      	ldr	r2, [r0, #0]
    1254:	6952      	ldr	r2, [r2, #20]
    1256:	4790      	blx	r2
    1258:	4684      	mov	ip, r0
    SizeType cap = this->getCapacity();
    125a:	6822      	ldr	r2, [r4, #0]
    125c:	4620      	mov	r0, r4
    CHAR* us = const_cast<CHAR*>(this->toChar());
    125e:	4664      	mov	r4, ip
    SizeType cap = this->getCapacity();
    1260:	6992      	ldr	r2, [r2, #24]
    1262:	4790      	blx	r2
    FW_ASSERT(us != nullptr);
    1264:	9b01      	ldr	r3, [sp, #4]
    SizeType cap = this->getCapacity();
    1266:	4605      	mov	r5, r0
    FW_ASSERT(us != nullptr);
    1268:	b13c      	cbz	r4, 127a <Fw::StringBase::vformat(char const*, std::__va_list)+0x32>
    return Fw::stringFormat(us, static_cast<FwSizeType>(cap), formatString, args);
    126a:	4632      	mov	r2, r6
    126c:	4629      	mov	r1, r5
    126e:	4620      	mov	r0, r4
}
    1270:	b002      	add	sp, #8
    1272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return Fw::stringFormat(us, static_cast<FwSizeType>(cap), formatString, args);
    1276:	f7fe bfd7 	b.w	228 <Fw::stringFormat(char*, unsigned long, char const*, std::__va_list)>
    FW_ASSERT(us != nullptr);
    127a:	2142      	movs	r1, #66	; 0x42
    127c:	4802      	ldr	r0, [pc, #8]	; (1288 <Fw::StringBase::vformat(char const*, std::__va_list)+0x40>)
    127e:	f000 f9c5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    1282:	9b01      	ldr	r3, [sp, #4]
    1284:	e7f1      	b.n	126a <Fw::StringBase::vformat(char const*, std::__va_list)+0x22>
    1286:	bf00      	nop
    1288:	200006a4 	.word	0x200006a4

0000128c <Fw::StringBase::format(char const*, ...)>:
FormatStatus StringBase::format(const CHAR* formatString, ...) {
    128c:	b40e      	push	{r1, r2, r3}
    128e:	b500      	push	{lr}
    1290:	b082      	sub	sp, #8
    1292:	aa03      	add	r2, sp, #12
    1294:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, formatString);
    1298:	9201      	str	r2, [sp, #4]
    FormatStatus status = this->vformat(formatString, args);
    129a:	f7ff ffd5 	bl	1248 <Fw::StringBase::vformat(char const*, std::__va_list)>
}
    129e:	b002      	add	sp, #8
    12a0:	f85d eb04 	ldr.w	lr, [sp], #4
    12a4:	b003      	add	sp, #12
    12a6:	4770      	bx	lr

000012a8 <Fw::StringBase::operator=(Fw::StringBase const&)>:
    if (this != &other) {
    12a8:	4288      	cmp	r0, r1
StringBase& StringBase::operator=(const StringBase& other) {
    12aa:	b530      	push	{r4, r5, lr}
    12ac:	4604      	mov	r4, r0
    12ae:	b083      	sub	sp, #12
    if (this != &other) {
    12b0:	d014      	beq.n	12dc <Fw::StringBase::operator=(Fw::StringBase const&)+0x34>
        (void)Fw::StringUtils::string_copy(const_cast<char*>(this->toChar()), other.toChar(), this->getCapacity());
    12b2:	6803      	ldr	r3, [r0, #0]
    12b4:	460d      	mov	r5, r1
    12b6:	695b      	ldr	r3, [r3, #20]
    12b8:	4798      	blx	r3
    12ba:	682a      	ldr	r2, [r5, #0]
    12bc:	4603      	mov	r3, r0
    12be:	4628      	mov	r0, r5
    12c0:	461d      	mov	r5, r3
    12c2:	6953      	ldr	r3, [r2, #20]
    12c4:	4798      	blx	r3
    12c6:	6823      	ldr	r3, [r4, #0]
    12c8:	4601      	mov	r1, r0
    12ca:	4620      	mov	r0, r4
    12cc:	699b      	ldr	r3, [r3, #24]
    12ce:	9101      	str	r1, [sp, #4]
    12d0:	4798      	blx	r3
    12d2:	9901      	ldr	r1, [sp, #4]
    12d4:	4602      	mov	r2, r0
    12d6:	4628      	mov	r0, r5
    12d8:	f000 f882 	bl	13e0 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)>
}
    12dc:	4620      	mov	r0, r4
    12de:	b003      	add	sp, #12
    12e0:	bd30      	pop	{r4, r5, pc}
    12e2:	bf00      	nop

000012e4 <Fw::StringBase::toString(Fw::StringBase&) const>:
void StringBase::toString(StringBase& text) const {
    12e4:	460b      	mov	r3, r1
    text = *this;
    12e6:	4601      	mov	r1, r0
    12e8:	4618      	mov	r0, r3
    12ea:	f7ff bfdd 	b.w	12a8 <Fw::StringBase::operator=(Fw::StringBase const&)>
    12ee:	bf00      	nop

000012f0 <Fw::StringBase::operator=(char const*)>:
StringBase& StringBase::operator=(const CHAR* other) {  // lgtm[cpp/rule-of-two]
    12f0:	b530      	push	{r4, r5, lr}
    (void)Fw::StringUtils::string_copy(const_cast<char*>(this->toChar()), other, this->getCapacity());
    12f2:	6803      	ldr	r3, [r0, #0]
StringBase& StringBase::operator=(const CHAR* other) {  // lgtm[cpp/rule-of-two]
    12f4:	b083      	sub	sp, #12
    12f6:	4604      	mov	r4, r0
    12f8:	9101      	str	r1, [sp, #4]
    (void)Fw::StringUtils::string_copy(const_cast<char*>(this->toChar()), other, this->getCapacity());
    12fa:	695b      	ldr	r3, [r3, #20]
    12fc:	4798      	blx	r3
    12fe:	6823      	ldr	r3, [r4, #0]
    1300:	4605      	mov	r5, r0
    1302:	4620      	mov	r0, r4
    1304:	699b      	ldr	r3, [r3, #24]
    1306:	4798      	blx	r3
    1308:	9901      	ldr	r1, [sp, #4]
    130a:	4602      	mov	r2, r0
    130c:	4628      	mov	r0, r5
    130e:	f000 f867 	bl	13e0 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)>
}
    1312:	4620      	mov	r0, r4
    1314:	b003      	add	sp, #12
    1316:	bd30      	pop	{r4, r5, pc}

00001318 <Fw::StringBase::length() const>:
StringBase::SizeType StringBase::length() const {
    1318:	b538      	push	{r3, r4, r5, lr}
    const SizeType length = static_cast<SizeType>(StringUtils::string_length(this->toChar(), this->getCapacity()));
    131a:	6803      	ldr	r3, [r0, #0]
StringBase::SizeType StringBase::length() const {
    131c:	4604      	mov	r4, r0
    const SizeType length = static_cast<SizeType>(StringUtils::string_length(this->toChar(), this->getCapacity()));
    131e:	695b      	ldr	r3, [r3, #20]
    1320:	4798      	blx	r3
    1322:	6823      	ldr	r3, [r4, #0]
    1324:	4605      	mov	r5, r0
    1326:	4620      	mov	r0, r4
    1328:	699b      	ldr	r3, [r3, #24]
    132a:	4798      	blx	r3
    132c:	4601      	mov	r1, r0
    132e:	4628      	mov	r0, r5
    1330:	f000 f896 	bl	1460 <Fw::StringUtils::string_length(char const*, unsigned long)>
    const SizeType capacity = this->getCapacity();
    1334:	6823      	ldr	r3, [r4, #0]
    const SizeType length = static_cast<SizeType>(StringUtils::string_length(this->toChar(), this->getCapacity()));
    1336:	4605      	mov	r5, r0
    const SizeType capacity = this->getCapacity();
    1338:	4620      	mov	r0, r4
    133a:	699b      	ldr	r3, [r3, #24]
    133c:	4798      	blx	r3
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    133e:	b190      	cbz	r0, 1366 <Fw::StringBase::length() const+0x4e>
    return capacity - 1;
    1340:	1e41      	subs	r1, r0, #1
    FW_ASSERT(length <= this->maxLength(), static_cast<FwAssertArgType>(length),
    1342:	428d      	cmp	r5, r1
    1344:	d801      	bhi.n	134a <Fw::StringBase::length() const+0x32>
}
    1346:	4628      	mov	r0, r5
    1348:	bd38      	pop	{r3, r4, r5, pc}
    const SizeType capacity = this->getCapacity();
    134a:	6823      	ldr	r3, [r4, #0]
    134c:	4620      	mov	r0, r4
    134e:	699b      	ldr	r3, [r3, #24]
    1350:	4798      	blx	r3
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    1352:	4604      	mov	r4, r0
    1354:	b170      	cbz	r0, 1374 <Fw::StringBase::length() const+0x5c>
    FW_ASSERT(length <= this->maxLength(), static_cast<FwAssertArgType>(length),
    1356:	237b      	movs	r3, #123	; 0x7b
    1358:	1e62      	subs	r2, r4, #1
    135a:	4629      	mov	r1, r5
    135c:	4808      	ldr	r0, [pc, #32]	; (1380 <Fw::StringBase::length() const+0x68>)
    135e:	f000 f973 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
}
    1362:	4628      	mov	r0, r5
    1364:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    1366:	4601      	mov	r1, r0
    1368:	2282      	movs	r2, #130	; 0x82
    136a:	4805      	ldr	r0, [pc, #20]	; (1380 <Fw::StringBase::length() const+0x68>)
    136c:	f000 f95c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
}
    1370:	4628      	mov	r0, r5
    1372:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(capacity > 0, static_cast<FwAssertArgType>(capacity));
    1374:	4601      	mov	r1, r0
    1376:	2282      	movs	r2, #130	; 0x82
    1378:	4801      	ldr	r0, [pc, #4]	; (1380 <Fw::StringBase::length() const+0x68>)
    137a:	f000 f955 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    137e:	e7ea      	b.n	1356 <Fw::StringBase::length() const+0x3e>
    1380:	200006a4 	.word	0x200006a4

00001384 <Fw::StringBase::serialize(Fw::SerializeBufferBase&) const>:
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), this->length());
    1384:	6803      	ldr	r3, [r0, #0]
SerializeStatus StringBase::serialize(SerializeBufferBase& buffer) const {
    1386:	b530      	push	{r4, r5, lr}
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), this->length());
    1388:	695b      	ldr	r3, [r3, #20]
SerializeStatus StringBase::serialize(SerializeBufferBase& buffer) const {
    138a:	b083      	sub	sp, #12
    138c:	4604      	mov	r4, r0
    138e:	460d      	mov	r5, r1
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), this->length());
    1390:	4798      	blx	r3
    1392:	4601      	mov	r1, r0
    1394:	4620      	mov	r0, r4
    1396:	9101      	str	r1, [sp, #4]
    1398:	f7ff ffbe 	bl	1318 <Fw::StringBase::length() const>
    139c:	9901      	ldr	r1, [sp, #4]
    139e:	4602      	mov	r2, r0
    13a0:	4628      	mov	r0, r5
}
    13a2:	b003      	add	sp, #12
    13a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), this->length());
    13a8:	f7ff bb0e 	b.w	9c8 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long)>

000013ac <Fw::StringBase::serialize(Fw::SerializeBufferBase&, unsigned long) const>:
SerializeStatus StringBase::serialize(SerializeBufferBase& buffer, SizeType maxLength) const {
    13ac:	b570      	push	{r4, r5, r6, lr}
    13ae:	4614      	mov	r4, r2
    13b0:	4605      	mov	r5, r0
    13b2:	460e      	mov	r6, r1
    const FwSizeType len = FW_MIN(maxLength, this->length());
    13b4:	f7ff ffb0 	bl	1318 <Fw::StringBase::length() const>
    13b8:	42a0      	cmp	r0, r4
    13ba:	d90b      	bls.n	13d4 <Fw::StringBase::serialize(Fw::SerializeBufferBase&, unsigned long) const+0x28>
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), len, Serialization::INCLUDE_LENGTH);
    13bc:	682b      	ldr	r3, [r5, #0]
    13be:	4628      	mov	r0, r5
    13c0:	695b      	ldr	r3, [r3, #20]
    13c2:	4798      	blx	r3
    13c4:	4622      	mov	r2, r4
    13c6:	4601      	mov	r1, r0
    13c8:	2300      	movs	r3, #0
    13ca:	4630      	mov	r0, r6
}
    13cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return buffer.serialize(reinterpret_cast<const U8*>(this->toChar()), len, Serialization::INCLUDE_LENGTH);
    13d0:	f7ff bb62 	b.w	a98 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, Fw::Serialization::t)>
    const FwSizeType len = FW_MIN(maxLength, this->length());
    13d4:	4628      	mov	r0, r5
    13d6:	f7ff ff9f 	bl	1318 <Fw::StringBase::length() const>
    13da:	4604      	mov	r4, r0
    13dc:	e7ee      	b.n	13bc <Fw::StringBase::serialize(Fw::SerializeBufferBase&, unsigned long) const+0x10>
    13de:	bf00      	nop

000013e0 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)>:
#include <limits>
#include <Fw/Types/ExternalString.hpp>

char* Fw::StringUtils::string_copy(char* destination, const char* source, FwSizeType num) {
    // Handle self-copy and 0 bytes copy
    if (destination == source || num == 0) {
    13e0:	4288      	cmp	r0, r1
char* Fw::StringUtils::string_copy(char* destination, const char* source, FwSizeType num) {
    13e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13e4:	4606      	mov	r6, r0
    if (destination == source || num == 0) {
    13e6:	d022      	beq.n	142e <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x4e>
    13e8:	4615      	mov	r5, r2
    13ea:	b302      	cbz	r2, 142e <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x4e>
        return destination;
    }
    FW_ASSERT(source != nullptr);
    13ec:	460f      	mov	r7, r1
    13ee:	b329      	cbz	r1, 143c <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x5c>
    FW_ASSERT(destination != nullptr);
    13f0:	b1f8      	cbz	r0, 1432 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x52>
}

FwSizeType Fw::StringUtils::string_length(const CHAR* source, FwSizeType buffer_size) {
    FwSizeType length = 0;
    FW_ASSERT(source != nullptr);
    for (length = 0; length < buffer_size; length++) {
    13f2:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    13f6:	2300      	movs	r3, #0
        if (source[length] == '\0') {
    13f8:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
    13fc:	b114      	cbz	r4, 1404 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x24>
    for (length = 0; length < buffer_size; length++) {
    13fe:	3301      	adds	r3, #1
    1400:	429d      	cmp	r5, r3
    1402:	d8f9      	bhi.n	13f8 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x18>
    FwSizeType source_len = string_length(source, num) + 1;
    1404:	3301      	adds	r3, #1
    1406:	1974      	adds	r4, r6, r5
    FW_ASSERT(source + source_len <= destination || destination + num <= source);
    1408:	443b      	add	r3, r7
    140a:	429e      	cmp	r6, r3
    140c:	d308      	bcc.n	1420 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x40>
    char* returned = strncpy(destination, source, num);
    140e:	462a      	mov	r2, r5
    1410:	4639      	mov	r1, r7
    1412:	4630      	mov	r0, r6
    1414:	f020 ffa6 	bl	22364 <strncpy>
    destination[num - 1] = '\0';
    1418:	2300      	movs	r3, #0
    141a:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(source + source_len <= destination || destination + num <= source);
    1420:	42a7      	cmp	r7, r4
    1422:	d2f4      	bcs.n	140e <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x2e>
    1424:	2111      	movs	r1, #17
    1426:	480d      	ldr	r0, [pc, #52]	; (145c <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x7c>)
    1428:	f000 f8f0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    142c:	e7ef      	b.n	140e <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x2e>
    142e:	4630      	mov	r0, r6
}
    1430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(destination != nullptr);
    1432:	210d      	movs	r1, #13
    1434:	4809      	ldr	r0, [pc, #36]	; (145c <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x7c>)
    1436:	f000 f8e9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(source != nullptr);
    143a:	e7da      	b.n	13f2 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x12>
    FW_ASSERT(source != nullptr);
    143c:	210c      	movs	r1, #12
    143e:	4807      	ldr	r0, [pc, #28]	; (145c <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x7c>)
    1440:	f000 f8e4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(destination != nullptr);
    1444:	b126      	cbz	r6, 1450 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x70>
    FW_ASSERT(source != nullptr);
    1446:	211a      	movs	r1, #26
    1448:	4804      	ldr	r0, [pc, #16]	; (145c <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x7c>)
    144a:	f000 f8df 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    144e:	e7d0      	b.n	13f2 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x12>
    FW_ASSERT(destination != nullptr);
    1450:	210d      	movs	r1, #13
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x7c>)
    1454:	f000 f8da 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(source != nullptr);
    1458:	e7f5      	b.n	1446 <Fw::StringUtils::string_copy(char*, char const*, unsigned long)+0x66>
    145a:	bf00      	nop
    145c:	200006bc 	.word	0x200006bc

00001460 <Fw::StringUtils::string_length(char const*, unsigned long)>:
FwSizeType Fw::StringUtils::string_length(const CHAR* source, FwSizeType buffer_size) {
    1460:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(source != nullptr);
    1462:	4604      	mov	r4, r0
FwSizeType Fw::StringUtils::string_length(const CHAR* source, FwSizeType buffer_size) {
    1464:	460d      	mov	r5, r1
    FW_ASSERT(source != nullptr);
    1466:	b168      	cbz	r0, 1484 <Fw::StringUtils::string_length(char const*, unsigned long)+0x24>
    for (length = 0; length < buffer_size; length++) {
    1468:	b155      	cbz	r5, 1480 <Fw::StringUtils::string_length(char const*, unsigned long)+0x20>
    146a:	1e62      	subs	r2, r4, #1
    146c:	2300      	movs	r3, #0
    146e:	e002      	b.n	1476 <Fw::StringUtils::string_length(char const*, unsigned long)+0x16>
    1470:	3301      	adds	r3, #1
    1472:	429d      	cmp	r5, r3
    1474:	d004      	beq.n	1480 <Fw::StringUtils::string_length(char const*, unsigned long)+0x20>
        if (source[length] == '\0') {
    1476:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    147a:	2c00      	cmp	r4, #0
    147c:	d1f8      	bne.n	1470 <Fw::StringUtils::string_length(char const*, unsigned long)+0x10>
    147e:	461d      	mov	r5, r3
            break;
        }
    }
    return length;
}
    1480:	4628      	mov	r0, r5
    1482:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(source != nullptr);
    1484:	211a      	movs	r1, #26
    1486:	4802      	ldr	r0, [pc, #8]	; (1490 <Fw::StringUtils::string_length(char const*, unsigned long)+0x30>)
    1488:	f000 f8c0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    148c:	e7ec      	b.n	1468 <Fw::StringUtils::string_length(char const*, unsigned long)+0x8>
    148e:	bf00      	nop
    1490:	200006bc 	.word	0x200006bc

00001494 <Fw::defaultPrintAssert(char const*)>:
void defaultPrintAssert(const CHAR* msg) {
    1494:	b510      	push	{r4, lr}
    (void) fputs(msg, stderr);
    1496:	4c06      	ldr	r4, [pc, #24]	; (14b0 <Fw::defaultPrintAssert(char const*)+0x1c>)
    1498:	6823      	ldr	r3, [r4, #0]
    149a:	68d9      	ldr	r1, [r3, #12]
    149c:	f021 f818 	bl	224d0 <fputs>
    (void) fputs("\n", stderr);
    14a0:	6823      	ldr	r3, [r4, #0]
    14a2:	200a      	movs	r0, #10
    14a4:	68d9      	ldr	r1, [r3, #12]
}
    14a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void) fputs("\n", stderr);
    14aa:	f020 bf9b 	b.w	223e4 <fputc>
    14ae:	bf00      	nop
    14b0:	20005fe4 	.word	0x20005fe4

000014b4 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)>:
                         NATIVE_INT_TYPE buffSize) {
    14b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14b8:	4684      	mov	ip, r0
    14ba:	460d      	mov	r5, r1
    14bc:	461c      	mov	r4, r3
    14be:	990d      	ldr	r1, [sp, #52]	; 0x34
    14c0:	e9dd 3607 	ldrd	r3, r6, [sp, #28]
    14c4:	e9dd 7e09 	ldrd	r7, lr, [sp, #36]	; 0x24
    14c8:	e9dd 800b 	ldrd	r8, r0, [sp, #44]	; 0x2c
    switch (numArgs) {
    14cc:	2a06      	cmp	r2, #6
    14ce:	d84b      	bhi.n	1568 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xb4>
    14d0:	e8df f002 	tbb	[pc, r2]
    14d4:	29201811 	.word	0x29201811
    14d8:	3e33      	.short	0x3e33
    14da:	04          	.byte	0x04
    14db:	00          	.byte	0x00
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    14dc:	9309      	str	r3, [sp, #36]	; 0x24
    14de:	4663      	mov	r3, ip
    14e0:	9408      	str	r4, [sp, #32]
    14e2:	9507      	str	r5, [sp, #28]
    14e4:	4a21      	ldr	r2, [pc, #132]	; (156c <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xb8>)
    14e6:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
    14ea:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
}
    14ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    14f2:	f7fe be71 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize), fileIdFs, file, lineNo);
    14f6:	9507      	str	r5, [sp, #28]
    14f8:	4663      	mov	r3, ip
    14fa:	4a1d      	ldr	r2, [pc, #116]	; (1570 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xbc>)
}
    14fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize), fileIdFs, file, lineNo);
    1500:	f7fe be6a 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1504:	9408      	str	r4, [sp, #32]
    1506:	4663      	mov	r3, ip
    1508:	9507      	str	r5, [sp, #28]
    150a:	4a1a      	ldr	r2, [pc, #104]	; (1574 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xc0>)
}
    150c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1510:	f7fe be62 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1514:	9309      	str	r3, [sp, #36]	; 0x24
    1516:	4663      	mov	r3, ip
    1518:	9408      	str	r4, [sp, #32]
    151a:	9507      	str	r5, [sp, #28]
    151c:	4a16      	ldr	r2, [pc, #88]	; (1578 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xc4>)
}
    151e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1522:	f7fe be59 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1526:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    152a:	9408      	str	r4, [sp, #32]
    152c:	4663      	mov	r3, ip
    152e:	9507      	str	r5, [sp, #28]
    1530:	4a12      	ldr	r2, [pc, #72]	; (157c <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xc8>)
}
    1532:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1536:	f7fe be4f 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    153a:	9309      	str	r3, [sp, #36]	; 0x24
    153c:	4663      	mov	r3, ip
    153e:	9408      	str	r4, [sp, #32]
    1540:	9507      	str	r5, [sp, #28]
    1542:	4a0f      	ldr	r2, [pc, #60]	; (1580 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xcc>)
    1544:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
}
    1548:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    154c:	f7fe be44 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1550:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    1554:	e9cd 7e0b 	strd	r7, lr, [sp, #44]	; 0x2c
    1558:	9408      	str	r4, [sp, #32]
    155a:	4663      	mov	r3, ip
    155c:	9507      	str	r5, [sp, #28]
    155e:	4a09      	ldr	r2, [pc, #36]	; (1584 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)+0xd0>)
}
    1560:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            (void)stringFormat(destBuffer,  static_cast<FwSizeType>(buffSize),
    1564:	f7fe be38 	b.w	1d8 <Fw::stringFormat(char*, unsigned long, char const*, ...)>
}
    1568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    156c:	20000bc4 	.word	0x20000bc4
    1570:	20000b10 	.word	0x20000b10
    1574:	20000b24 	.word	0x20000b24
    1578:	20000b3c 	.word	0x20000b3c
    157c:	20000b58 	.word	0x20000b58
    1580:	20000b78 	.word	0x20000b78
    1584:	20000b9c 	.word	0x20000b9c

00001588 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)>:
                                FwAssertArgType arg1,
                                FwAssertArgType arg2,
                                FwAssertArgType arg3,
                                FwAssertArgType arg4,
                                FwAssertArgType arg5,
                                FwAssertArgType arg6) {
    1588:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (nullptr == s_assertHook) {
    158a:	4d1c      	ldr	r5, [pc, #112]	; (15fc <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)+0x74>)
                                FwAssertArgType arg6) {
    158c:	b0c9      	sub	sp, #292	; 0x124
    if (nullptr == s_assertHook) {
    158e:	682c      	ldr	r4, [r5, #0]
    1590:	b1cc      	cbz	r4, 15c6 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)+0x3e>
    1592:	461f      	mov	r7, r3
        CHAR assertMsg[FW_ASSERT_TEXT_SIZE];
        defaultReportAssert(file, lineNo, numArgs, arg1, arg2, arg3, arg4, arg5, arg6, assertMsg, sizeof(assertMsg));
        defaultPrintAssert(assertMsg);
        assert(0);
    } else {
        s_assertHook->reportAssert(file, lineNo, numArgs, arg1, arg2, arg3, arg4, arg5, arg6);
    1594:	4613      	mov	r3, r2
    1596:	460a      	mov	r2, r1
    1598:	4601      	mov	r1, r0
    159a:	9852      	ldr	r0, [sp, #328]	; 0x148
    159c:	6826      	ldr	r6, [r4, #0]
    159e:	9005      	str	r0, [sp, #20]
    15a0:	9851      	ldr	r0, [sp, #324]	; 0x144
    15a2:	9004      	str	r0, [sp, #16]
    15a4:	9850      	ldr	r0, [sp, #320]	; 0x140
    15a6:	9003      	str	r0, [sp, #12]
    15a8:	984f      	ldr	r0, [sp, #316]	; 0x13c
    15aa:	9002      	str	r0, [sp, #8]
    15ac:	984e      	ldr	r0, [sp, #312]	; 0x138
    15ae:	e9cd 7000 	strd	r7, r0, [sp]
    15b2:	4620      	mov	r0, r4
    15b4:	68b4      	ldr	r4, [r6, #8]
    15b6:	47a0      	blx	r4
        s_assertHook->doAssert();
    15b8:	6828      	ldr	r0, [r5, #0]
    15ba:	6803      	ldr	r3, [r0, #0]
    15bc:	691b      	ldr	r3, [r3, #16]
    15be:	4798      	blx	r3
    }
    return 0;
}
    15c0:	2000      	movs	r0, #0
    15c2:	b049      	add	sp, #292	; 0x124
    15c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        defaultReportAssert(file, lineNo, numArgs, arg1, arg2, arg3, arg4, arg5, arg6, assertMsg, sizeof(assertMsg));
    15c6:	9c52      	ldr	r4, [sp, #328]	; 0x148
    15c8:	f44f 7580 	mov.w	r5, #256	; 0x100
    15cc:	9404      	str	r4, [sp, #16]
    15ce:	9c51      	ldr	r4, [sp, #324]	; 0x144
    15d0:	9506      	str	r5, [sp, #24]
    15d2:	9403      	str	r4, [sp, #12]
    15d4:	9c50      	ldr	r4, [sp, #320]	; 0x140
    15d6:	9402      	str	r4, [sp, #8]
    15d8:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
    15da:	9401      	str	r4, [sp, #4]
    15dc:	9c4e      	ldr	r4, [sp, #312]	; 0x138
    15de:	9400      	str	r4, [sp, #0]
    15e0:	ac08      	add	r4, sp, #32
    15e2:	9405      	str	r4, [sp, #20]
    15e4:	f7ff ff66 	bl	14b4 <Fw::defaultReportAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long, char*, long)>
        defaultPrintAssert(assertMsg);
    15e8:	4620      	mov	r0, r4
    15ea:	f7ff ff53 	bl	1494 <Fw::defaultPrintAssert(char const*)>
        assert(0);
    15ee:	4b04      	ldr	r3, [pc, #16]	; (1600 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)+0x78>)
    15f0:	4a04      	ldr	r2, [pc, #16]	; (1604 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)+0x7c>)
    15f2:	217b      	movs	r1, #123	; 0x7b
    15f4:	4804      	ldr	r0, [pc, #16]	; (1608 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)+0x80>)
    15f6:	f023 fad9 	bl	24bac <__assert_func>
    15fa:	bf00      	nop
    15fc:	2000c9c0 	.word	0x2000c9c0
    1600:	20000638 	.word	0x20000638
    1604:	20000928 	.word	0x20000928
    1608:	20000664 	.word	0x20000664

0000160c <Fw::SwAssert(char const*, unsigned long)>:

NATIVE_INT_TYPE SwAssert(FILE_NAME_ARG file, NATIVE_UINT_TYPE lineNo) {
    return defaultSwAssert(file, lineNo, 0, 0, 0, 0, 0, 0, 0);
    160c:	2300      	movs	r3, #0
NATIVE_INT_TYPE SwAssert(FILE_NAME_ARG file, NATIVE_UINT_TYPE lineNo) {
    160e:	b500      	push	{lr}
    1610:	b087      	sub	sp, #28
    return defaultSwAssert(file, lineNo, 0, 0, 0, 0, 0, 0, 0);
    1612:	461a      	mov	r2, r3
    1614:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1618:	e9cd 3301 	strd	r3, r3, [sp, #4]
    161c:	9300      	str	r3, [sp, #0]
    161e:	f7ff ffb3 	bl	1588 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)>
}
    1622:	b007      	add	sp, #28
    1624:	f85d fb04 	ldr.w	pc, [sp], #4

00001628 <Fw::SwAssert(char const*, long, unsigned long)>:

NATIVE_INT_TYPE SwAssert(FILE_NAME_ARG file, FwAssertArgType arg1, NATIVE_UINT_TYPE lineNo) {
    1628:	b510      	push	{r4, lr}
    return defaultSwAssert(file, lineNo, 1, arg1, 0, 0, 0, 0, 0);
    162a:	2400      	movs	r4, #0
NATIVE_INT_TYPE SwAssert(FILE_NAME_ARG file, FwAssertArgType arg1, NATIVE_UINT_TYPE lineNo) {
    162c:	b086      	sub	sp, #24
    162e:	460b      	mov	r3, r1
    1630:	4611      	mov	r1, r2
    return defaultSwAssert(file, lineNo, 1, arg1, 0, 0, 0, 0, 0);
    1632:	2201      	movs	r2, #1
    1634:	9400      	str	r4, [sp, #0]
    1636:	e9cd 4403 	strd	r4, r4, [sp, #12]
    163a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    163e:	f7ff ffa3 	bl	1588 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)>
}
    1642:	b006      	add	sp, #24
    1644:	bd10      	pop	{r4, pc}
    1646:	bf00      	nop

00001648 <Fw::SwAssert(char const*, long, long, unsigned long)>:

NATIVE_INT_TYPE SwAssert(FILE_NAME_ARG file, FwAssertArgType arg1, FwAssertArgType arg2, NATIVE_UINT_TYPE lineNo) {
    1648:	b530      	push	{r4, r5, lr}
    164a:	4615      	mov	r5, r2
    164c:	461a      	mov	r2, r3
    164e:	b087      	sub	sp, #28
    return defaultSwAssert(file, lineNo, 2, arg1, arg2, 0, 0, 0, 0);
    1650:	2400      	movs	r4, #0
    1652:	460b      	mov	r3, r1
    1654:	4611      	mov	r1, r2
    1656:	2202      	movs	r2, #2
    1658:	9404      	str	r4, [sp, #16]
    165a:	9401      	str	r4, [sp, #4]
    165c:	9500      	str	r5, [sp, #0]
    165e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    1662:	f7ff ff91 	bl	1588 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)>
}
    1666:	b007      	add	sp, #28
    1668:	bd30      	pop	{r4, r5, pc}
    166a:	bf00      	nop

0000166c <Fw::SwAssert(char const*, long, long, long, unsigned long)>:

NATIVE_INT_TYPE SwAssert(FILE_NAME_ARG file,
                         FwAssertArgType arg1,
                         FwAssertArgType arg2,
                         FwAssertArgType arg3,
                         NATIVE_UINT_TYPE lineNo) {
    166c:	b570      	push	{r4, r5, r6, lr}
    166e:	b086      	sub	sp, #24
    return defaultSwAssert(file, lineNo, 3, arg1, arg2, arg3, 0, 0, 0);
    1670:	2400      	movs	r4, #0
                         NATIVE_UINT_TYPE lineNo) {
    1672:	4615      	mov	r5, r2
    1674:	461e      	mov	r6, r3
    return defaultSwAssert(file, lineNo, 3, arg1, arg2, arg3, 0, 0, 0);
    1676:	2203      	movs	r2, #3
    1678:	460b      	mov	r3, r1
    167a:	990a      	ldr	r1, [sp, #40]	; 0x28
    167c:	9404      	str	r4, [sp, #16]
    167e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    1682:	e9cd 5600 	strd	r5, r6, [sp]
    1686:	f7ff ff7f 	bl	1588 <Fw::defaultSwAssert(char const*, unsigned long, unsigned long, long, long, long, long, long, long)>
}
    168a:	b006      	add	sp, #24
    168c:	bd70      	pop	{r4, r5, r6, pc}
    168e:	bf00      	nop

00001690 <Fw::String::toChar() const>:
    String& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
    1690:	3004      	adds	r0, #4
    1692:	4770      	bx	lr

00001694 <Fw::String::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
    1694:	2081      	movs	r0, #129	; 0x81
    1696:	4770      	bx	lr

00001698 <Fw::String::~String()>:
    ~String() {}
    1698:	4b03      	ldr	r3, [pc, #12]	; (16a8 <Fw::String::~String()+0x10>)
    169a:	b510      	push	{r4, lr}
    169c:	4604      	mov	r4, r0
    169e:	6003      	str	r3, [r0, #0]
    16a0:	f7ff fdc8 	bl	1234 <Fw::StringBase::~StringBase()>
    16a4:	4620      	mov	r0, r4
    16a6:	bd10      	pop	{r4, pc}
    16a8:	200032dc 	.word	0x200032dc

000016ac <Fw::String::~String()>:
    16ac:	4b05      	ldr	r3, [pc, #20]	; (16c4 <Fw::String::~String()+0x18>)
    16ae:	b510      	push	{r4, lr}
    16b0:	4604      	mov	r4, r0
    16b2:	6003      	str	r3, [r0, #0]
    16b4:	f7ff fdbe 	bl	1234 <Fw::StringBase::~StringBase()>
    16b8:	2188      	movs	r1, #136	; 0x88
    16ba:	4620      	mov	r0, r4
    16bc:	f017 fb08 	bl	18cd0 <operator delete(void*, unsigned int)>
    16c0:	4620      	mov	r0, r4
    16c2:	bd10      	pop	{r4, pc}
    16c4:	200032dc 	.word	0x200032dc

000016c8 <Fw::Logger::log(char const*, ...)>:
namespace Fw {

// Initial logger is NULL
Logger* Logger::s_current_logger = nullptr;

void Logger::log(const char* format, ...) {
    16c8:	b40f      	push	{r0, r1, r2, r3}
    16ca:	b570      	push	{r4, r5, r6, lr}
    16cc:	b0a4      	sub	sp, #144	; 0x90
    String() : StringBase() { *this = ""; }
    16ce:	4d11      	ldr	r5, [pc, #68]	; (1714 <Fw::Logger::log(char const*, ...)+0x4c>)
    16d0:	ac28      	add	r4, sp, #160	; 0xa0
    16d2:	a802      	add	r0, sp, #8
    16d4:	f854 6b04 	ldr.w	r6, [r4], #4
    16d8:	f7ff fda2 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    16dc:	490e      	ldr	r1, [pc, #56]	; (1718 <Fw::Logger::log(char const*, ...)+0x50>)
    16de:	a802      	add	r0, sp, #8
    String() : StringBase() { *this = ""; }
    16e0:	9502      	str	r5, [sp, #8]
        (void)StringBase::operator=(src);
    16e2:	f7ff fe05 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String formatted_string;
    // Forward the variable arguments to the vformat format implementation
    va_list args;
    va_start(args, format);
    formatted_string.vformat(format, args);
    16e6:	4622      	mov	r2, r4
    16e8:	4631      	mov	r1, r6
    16ea:	a802      	add	r0, sp, #8
    va_start(args, format);
    16ec:	9401      	str	r4, [sp, #4]
    formatted_string.vformat(format, args);
    16ee:	f7ff fdab 	bl	1248 <Fw::StringBase::vformat(char const*, std::__va_list)>
    va_end(args);
    Logger::log(formatted_string);
}

void Logger::log(const StringBase& string) {
    if (Logger::s_current_logger != nullptr) {
    16f2:	4b0a      	ldr	r3, [pc, #40]	; (171c <Fw::Logger::log(char const*, ...)+0x54>)
    16f4:	6818      	ldr	r0, [r3, #0]
    16f6:	b118      	cbz	r0, 1700 <Fw::Logger::log(char const*, ...)+0x38>
        Logger::s_current_logger->writeMessage(string);
    16f8:	6803      	ldr	r3, [r0, #0]
    16fa:	a902      	add	r1, sp, #8
    16fc:	689b      	ldr	r3, [r3, #8]
    16fe:	4798      	blx	r3
    ~String() {}
    1700:	a802      	add	r0, sp, #8
    1702:	9502      	str	r5, [sp, #8]
    1704:	f7ff fd96 	bl	1234 <Fw::StringBase::~StringBase()>
}
    1708:	b024      	add	sp, #144	; 0x90
    170a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    170e:	b004      	add	sp, #16
    1710:	4770      	bx	lr
    1712:	bf00      	nop
    1714:	200032dc 	.word	0x200032dc
    1718:	20001d2c 	.word	0x20001d2c
    171c:	2000c9a8 	.word	0x2000c9a8

00001720 <Fw::Logger::registerLogger(Fw::Logger*)>:
    }
}

void Logger::registerLogger(Logger* logger) {
    Logger::s_current_logger = logger;
    1720:	4b01      	ldr	r3, [pc, #4]	; (1728 <Fw::Logger::registerLogger(Fw::Logger*)+0x8>)
    1722:	6018      	str	r0, [r3, #0]
}
    1724:	4770      	bx	lr
    1726:	bf00      	nop
    1728:	2000c9a8 	.word	0x2000c9a8

0000172c <Os::init()>:
#include "Os/Memory.hpp"
#include "Os/Task.hpp"

namespace Os {

void init() {
    172c:	b508      	push	{r3, lr}
    // Initialize all OSAL singletons
    Os::Console::init();
    172e:	f013 fae7 	bl	14d00 <Os::Console::init()>
    Os::FileSystem::init();
    1732:	f010 fe5d 	bl	123f0 <Os::FileSystem::init()>
    Os::Cpu::init();
    1736:	f011 fae5 	bl	12d04 <Os::Cpu::init()>
    Os::Memory::init();
    173a:	f011 fd49 	bl	131d0 <Os::Memory::init()>
    Os::Task::init();
}
    173e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Os::Task::init();
    1742:	f013 b861 	b.w	14808 <Os::Task::init()>
    1746:	bf00      	nop

00001748 <Os::Baremetal::TaskRunner::~TaskRunner()>:

TaskRunner::~TaskRunner() {}
    1748:	4770      	bx	lr
    174a:	bf00      	nop

0000174c <Os::Baremetal::TaskRunner::removeTask(Os::Task*)>:

    // The last sort element must be nullptr or the table overflowed
    FW_ASSERT(sort_element == nullptr);
}

void TaskRunner::removeTask(Task* task) {
    174c:	b430      	push	{r4, r5}
    174e:	2301      	movs	r3, #1
    bool found = false;
    1750:	2400      	movs	r4, #0
    1752:	1d02      	adds	r2, r0, #4
    1754:	e005      	b.n	1762 <Os::Baremetal::TaskRunner::removeTask(Os::Task*)+0x16>
        // If not found, keep looking
        if (not found) {
            continue;
        }
        // If we are less than the end of the array, shift variables over
        else if (i < Os::Baremetal::TASK_CAPACITY - 1) {
    1756:	2b64      	cmp	r3, #100	; 0x64
    1758:	d00e      	beq.n	1778 <Os::Baremetal::TaskRunner::removeTask(Os::Task*)+0x2c>
            this->m_task_table[i] = this->m_task_table[i + 1];
    175a:	6815      	ldr	r5, [r2, #0]
    175c:	f842 5c04 	str.w	r5, [r2, #-4]
    for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
    1760:	3301      	adds	r3, #1
        found = found | (task == this->m_task_table[i]);
    1762:	f852 5b04 	ldr.w	r5, [r2], #4
    1766:	428d      	cmp	r5, r1
    1768:	bf08      	it	eq
    176a:	f044 0401 	orreq.w	r4, r4, #1
        if (not found) {
    176e:	2c00      	cmp	r4, #0
    1770:	d1f1      	bne.n	1756 <Os::Baremetal::TaskRunner::removeTask(Os::Task*)+0xa>
    for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
    1772:	2b64      	cmp	r3, #100	; 0x64
    1774:	d1f4      	bne.n	1760 <Os::Baremetal::TaskRunner::removeTask(Os::Task*)+0x14>
    1776:	e002      	b.n	177e <Os::Baremetal::TaskRunner::removeTask(Os::Task*)+0x32>
        }
        // If the last element, mark NULL
        else {
            this->m_task_table[i] = nullptr;
    1778:	2300      	movs	r3, #0
    177a:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
        }
    }
}
    177e:	bc30      	pop	{r4, r5}
    1780:	4770      	bx	lr
    1782:	bf00      	nop

00001784 <Os::Baremetal::TaskRunner::~TaskRunner()>:
TaskRunner::~TaskRunner() {}
    1784:	b510      	push	{r4, lr}
    1786:	4604      	mov	r4, r0
    1788:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    178c:	f017 faa0 	bl	18cd0 <operator delete(void*, unsigned int)>
    1790:	4620      	mov	r0, r4
    1792:	bd10      	pop	{r4, pc}

00001794 <Os::Baremetal::TaskRunner::getSingleton()>:

TaskRunner& TaskRunner::getSingleton() {
    1794:	b570      	push	{r4, r5, r6, lr}
    static TaskRunner runner;
    1796:	4c0f      	ldr	r4, [pc, #60]	; (17d4 <Os::Baremetal::TaskRunner::getSingleton()+0x40>)
    1798:	6821      	ldr	r1, [r4, #0]
    179a:	f011 0101 	ands.w	r1, r1, #1
    179e:	d001      	beq.n	17a4 <Os::Baremetal::TaskRunner::getSingleton()+0x10>
    return runner;
}
    17a0:	480d      	ldr	r0, [pc, #52]	; (17d8 <Os::Baremetal::TaskRunner::getSingleton()+0x44>)
    17a2:	bd70      	pop	{r4, r5, r6, pc}
TaskRunner::TaskRunner() {
    17a4:	4d0c      	ldr	r5, [pc, #48]	; (17d8 <Os::Baremetal::TaskRunner::getSingleton()+0x44>)
    17a6:	2601      	movs	r6, #1
    17a8:	4b0c      	ldr	r3, [pc, #48]	; (17dc <Os::Baremetal::TaskRunner::getSingleton()+0x48>)
        this->m_task_table[i] = nullptr;
    17aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
    17ae:	1d28      	adds	r0, r5, #4
TaskRunner::TaskRunner() {
    17b0:	f8c5 1194 	str.w	r1, [r5, #404]	; 0x194
    17b4:	602b      	str	r3, [r5, #0]
    17b6:	f885 6198 	strb.w	r6, [r5, #408]	; 0x198
        this->m_task_table[i] = nullptr;
    17ba:	f023 fa17 	bl	24bec <memset>
    Task::registerTaskRegistry(this);
    17be:	4628      	mov	r0, r5
    17c0:	f013 f83c 	bl	1483c <Os::Task::registerTaskRegistry(Os::TaskRegistry*)>
    static TaskRunner runner;
    17c4:	4a06      	ldr	r2, [pc, #24]	; (17e0 <Os::Baremetal::TaskRunner::getSingleton()+0x4c>)
    17c6:	4907      	ldr	r1, [pc, #28]	; (17e4 <Os::Baremetal::TaskRunner::getSingleton()+0x50>)
    17c8:	4628      	mov	r0, r5
    17ca:	6026      	str	r6, [r4, #0]
    17cc:	f018 fdd8 	bl	1a380 <__aeabi_atexit>
}
    17d0:	4801      	ldr	r0, [pc, #4]	; (17d8 <Os::Baremetal::TaskRunner::getSingleton()+0x44>)
    17d2:	bd70      	pop	{r4, r5, r6, pc}
    17d4:	2000ba28 	.word	0x2000ba28
    17d8:	2000c9d8 	.word	0x2000c9d8
    17dc:	20003684 	.word	0x20003684
    17e0:	20005a58 	.word	0x20005a58
    17e4:	00001749 	.word	0x00001749

000017e8 <Os::Baremetal::TaskRunner::addTask(Os::Task*)>:
void TaskRunner::addTask(Task* task) {
    17e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ea:	4604      	mov	r4, r0
    FW_ASSERT(task->isCooperative());  // Cannot register uncooperative tasks
    17ec:	4608      	mov	r0, r1
void TaskRunner::addTask(Task* task) {
    17ee:	460d      	mov	r5, r1
    FW_ASSERT(task->isCooperative());  // Cannot register uncooperative tasks
    17f0:	f012 fc12 	bl	14018 <Os::Task::isCooperative()>
    17f4:	b368      	cbz	r0, 1852 <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x6a>
    FW_ASSERT(this->m_index < Os::Baremetal::TASK_CAPACITY);
    17f6:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    17fa:	2b63      	cmp	r3, #99	; 0x63
    17fc:	d822      	bhi.n	1844 <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x5c>
    this->m_task_table[this->m_index] = task;
    17fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    this->m_index++;
    1802:	3301      	adds	r3, #1
    this->m_task_table[this->m_index] = task;
    1804:	6055      	str	r5, [r2, #4]
    this->m_index++;
    1806:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
    for (FwSizeType i = 0; (sort_element != nullptr) && (i < Os::Baremetal::TASK_CAPACITY); i++) {
    180a:	b1d5      	cbz	r5, 1842 <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x5a>
    180c:	2600      	movs	r6, #0
        if ((this->m_task_table[i] == nullptr) or (sort_element->getPriority() >
    180e:	f854 3f04 	ldr.w	r3, [r4, #4]!
    1812:	4628      	mov	r0, r5
    for (FwSizeType i = 0; (sort_element != nullptr) && (i < Os::Baremetal::TASK_CAPACITY); i++) {
    1814:	3601      	adds	r6, #1
        if ((this->m_task_table[i] == nullptr) or (sort_element->getPriority() >
    1816:	b143      	cbz	r3, 182a <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x42>
    1818:	f012 ffe6 	bl	147e8 <Os::Task::getPriority()>
    181c:	4607      	mov	r7, r0
        this->m_task_table[i]->getPriority())) {
    181e:	6820      	ldr	r0, [r4, #0]
    1820:	f012 ffe2 	bl	147e8 <Os::Task::getPriority()>
        if ((this->m_task_table[i] == nullptr) or (sort_element->getPriority() >
    1824:	4287      	cmp	r7, r0
    1826:	d902      	bls.n	182e <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x46>
            sort_element = this->m_task_table[i];
    1828:	6823      	ldr	r3, [r4, #0]
            this->m_task_table[i] = temp;
    182a:	6025      	str	r5, [r4, #0]
            sort_element = this->m_task_table[i];
    182c:	461d      	mov	r5, r3
    for (FwSizeType i = 0; (sort_element != nullptr) && (i < Os::Baremetal::TASK_CAPACITY); i++) {
    182e:	b145      	cbz	r5, 1842 <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x5a>
    1830:	2e63      	cmp	r6, #99	; 0x63
    1832:	d9ec      	bls.n	180e <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x26>
    FW_ASSERT(sort_element == nullptr);
    1834:	b12d      	cbz	r5, 1842 <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x5a>
    1836:	212d      	movs	r1, #45	; 0x2d
    1838:	4808      	ldr	r0, [pc, #32]	; (185c <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x74>)
}
    183a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FW_ASSERT(sort_element == nullptr);
    183e:	f7ff bee5 	b.w	160c <Fw::SwAssert(char const*, unsigned long)>
}
    1842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_index < Os::Baremetal::TASK_CAPACITY);
    1844:	211d      	movs	r1, #29
    1846:	4805      	ldr	r0, [pc, #20]	; (185c <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x74>)
    1848:	f7ff fee0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_task_table[this->m_index] = task;
    184c:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    1850:	e7d5      	b.n	17fe <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x16>
    FW_ASSERT(task->isCooperative());  // Cannot register uncooperative tasks
    1852:	211b      	movs	r1, #27
    1854:	4801      	ldr	r0, [pc, #4]	; (185c <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0x74>)
    1856:	f7ff fed9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    185a:	e7cc      	b.n	17f6 <Os::Baremetal::TaskRunner::addTask(Os::Task*)+0xe>
    185c:	20000e28 	.word	0x20000e28

00001860 <Os::Baremetal::TaskRunner::run()>:
    baremetal_handle.m_routine(baremetal_handle.m_argument);
}

void TaskRunner::run() {
    // While cycling run a task and increment to the next
    if (this->m_cycling) {
    1860:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
    1864:	2b00      	cmp	r3, #0
    1866:	d044      	beq.n	18f2 <Os::Baremetal::TaskRunner::run()+0x92>
        // Start at the next task
        for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
            Task* task = this->m_task_table[this->m_index];
    1868:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
void TaskRunner::run() {
    186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            Task* task = this->m_task_table[this->m_index];
    1870:	2564      	movs	r5, #100	; 0x64
    1872:	4606      	mov	r6, r0
                else {
                    this->m_index = (this->m_index + 1) % Os::Baremetal::TASK_CAPACITY;
                }
                break;
            }
            this->m_index = (this->m_index + 1) % Os::Baremetal::TASK_CAPACITY;
    1874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1948 <Os::Baremetal::TaskRunner::run()+0xe8>
    1878:	462f      	mov	r7, r5
    187a:	e010      	b.n	189e <Os::Baremetal::TaskRunner::run()+0x3e>
    return (task.getState() == Os::Task::State::STARTING || task.getState() == Os::Task::RUNNING);
    187c:	f012 ffa6 	bl	147cc <Os::Task::getState()>
    1880:	2802      	cmp	r0, #2
    1882:	d018      	beq.n	18b6 <Os::Baremetal::TaskRunner::run()+0x56>
            this->m_index = (this->m_index + 1) % Os::Baremetal::TASK_CAPACITY;
    1884:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
    1888:	1c5a      	adds	r2, r3, #1
        for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
    188a:	3d01      	subs	r5, #1
            this->m_index = (this->m_index + 1) % Os::Baremetal::TASK_CAPACITY;
    188c:	fba8 1302 	umull	r1, r3, r8, r2
    1890:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1894:	fb07 2313 	mls	r3, r7, r3, r2
    1898:	f8c6 3194 	str.w	r3, [r6, #404]	; 0x194
        for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
    189c:	d027      	beq.n	18ee <Os::Baremetal::TaskRunner::run()+0x8e>
            Task* task = this->m_task_table[this->m_index];
    189e:	eb06 0283 	add.w	r2, r6, r3, lsl #2
    18a2:	6854      	ldr	r4, [r2, #4]
    return (task.getState() == Os::Task::State::STARTING || task.getState() == Os::Task::RUNNING);
    18a4:	4620      	mov	r0, r4
            if (task != nullptr && isRunning(*task)) {
    18a6:	2c00      	cmp	r4, #0
    18a8:	d0ee      	beq.n	1888 <Os::Baremetal::TaskRunner::run()+0x28>
    return (task.getState() == Os::Task::State::STARTING || task.getState() == Os::Task::RUNNING);
    18aa:	f012 ff8f 	bl	147cc <Os::Task::getState()>
    18ae:	4603      	mov	r3, r0
    18b0:	4620      	mov	r0, r4
    18b2:	2b01      	cmp	r3, #1
    18b4:	d1e2      	bne.n	187c <Os::Baremetal::TaskRunner::run()+0x1c>
    FW_ASSERT(task.isCooperative());
    18b6:	4620      	mov	r0, r4
    18b8:	f012 fbae 	bl	14018 <Os::Task::isCooperative()>
    18bc:	2800      	cmp	r0, #0
    18be:	d038      	beq.n	1932 <Os::Baremetal::TaskRunner::run()+0xd2>
    BaremetalTaskHandle& baremetal_handle = *static_cast<BaremetalTaskHandle*>(task.getHandle());
    18c0:	4620      	mov	r0, r4
    18c2:	f012 fe83 	bl	145cc <Os::Task::getHandle()>
    baremetal_handle.m_routine(baremetal_handle.m_argument);
    18c6:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    18ca:	4798      	blx	r3
                if (task->getState() == Os::Task::State::EXITED) {
    18cc:	4620      	mov	r0, r4
    18ce:	f012 ff7d 	bl	147cc <Os::Task::getState()>
    18d2:	2805      	cmp	r0, #5
    18d4:	d00e      	beq.n	18f4 <Os::Baremetal::TaskRunner::run()+0x94>
                    this->m_index = (this->m_index + 1) % Os::Baremetal::TASK_CAPACITY;
    18d6:	f8d6 3194 	ldr.w	r3, [r6, #404]	; 0x194
    18da:	2164      	movs	r1, #100	; 0x64
    18dc:	4a1a      	ldr	r2, [pc, #104]	; (1948 <Os::Baremetal::TaskRunner::run()+0xe8>)
    18de:	3301      	adds	r3, #1
    18e0:	fba2 0203 	umull	r0, r2, r2, r3
    18e4:	0952      	lsrs	r2, r2, #5
    18e6:	fb01 3312 	mls	r3, r1, r2, r3
    18ea:	f8c6 3194 	str.w	r3, [r6, #404]	; 0x194
        }
    }
}
    18ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18f2:	4770      	bx	lr
                    this->removeTask(task);
    18f4:	6833      	ldr	r3, [r6, #0]
    18f6:	4a15      	ldr	r2, [pc, #84]	; (194c <Os::Baremetal::TaskRunner::run()+0xec>)
    18f8:	68db      	ldr	r3, [r3, #12]
    18fa:	4293      	cmp	r3, r2
    18fc:	d11e      	bne.n	193c <Os::Baremetal::TaskRunner::run()+0xdc>
    18fe:	1d32      	adds	r2, r6, #4
    1900:	2301      	movs	r3, #1
    bool found = false;
    1902:	2100      	movs	r1, #0
    1904:	e005      	b.n	1912 <Os::Baremetal::TaskRunner::run()+0xb2>
        else if (i < Os::Baremetal::TASK_CAPACITY - 1) {
    1906:	2b64      	cmp	r3, #100	; 0x64
    1908:	d00e      	beq.n	1928 <Os::Baremetal::TaskRunner::run()+0xc8>
            this->m_task_table[i] = this->m_task_table[i + 1];
    190a:	6810      	ldr	r0, [r2, #0]
    190c:	f842 0c04 	str.w	r0, [r2, #-4]
    for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
    1910:	3301      	adds	r3, #1
        found = found | (task == this->m_task_table[i]);
    1912:	f852 0b04 	ldr.w	r0, [r2], #4
    1916:	4284      	cmp	r4, r0
    1918:	bf08      	it	eq
    191a:	f041 0101 	orreq.w	r1, r1, #1
        if (not found) {
    191e:	2900      	cmp	r1, #0
    1920:	d1f1      	bne.n	1906 <Os::Baremetal::TaskRunner::run()+0xa6>
    for (FwSizeType i = 0; i < Os::Baremetal::TASK_CAPACITY; i++) {
    1922:	2b64      	cmp	r3, #100	; 0x64
    1924:	d1f4      	bne.n	1910 <Os::Baremetal::TaskRunner::run()+0xb0>
    1926:	e7e2      	b.n	18ee <Os::Baremetal::TaskRunner::run()+0x8e>
            this->m_task_table[i] = nullptr;
    1928:	2300      	movs	r3, #0
    192a:	f8c6 3190 	str.w	r3, [r6, #400]	; 0x190
}
    192e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(task.isCooperative());
    1932:	214e      	movs	r1, #78	; 0x4e
    1934:	4806      	ldr	r0, [pc, #24]	; (1950 <Os::Baremetal::TaskRunner::run()+0xf0>)
    1936:	f7ff fe69 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    193a:	e7c1      	b.n	18c0 <Os::Baremetal::TaskRunner::run()+0x60>
                    this->removeTask(task);
    193c:	4621      	mov	r1, r4
    193e:	4630      	mov	r0, r6
}
    1940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    this->removeTask(task);
    1944:	4718      	bx	r3
    1946:	bf00      	nop
    1948:	51eb851f 	.word	0x51eb851f
    194c:	0000174d 	.word	0x0000174d
    1950:	20000e28 	.word	0x20000e28

00001954 <Svc::FprimeFraming::~FprimeFraming()>:
    const TokenType START_WORD = static_cast<TokenType>(0xdeadbeef);

  }

  //! \brief Implements the F Prime framing protocol
  class FprimeFraming: public FramingProtocol {
    1954:	4770      	bx	lr
    1956:	bf00      	nop

00001958 <Svc::FprimeDeframing::~FprimeDeframing()>:
      ) override;

  };

  //! \brief Implements the F Prime deframing protocol
  class FprimeDeframing : public DeframingProtocol {
    1958:	4770      	bx	lr
    195a:	bf00      	nop

0000195c <configureTopology()>:
 *
 * This is a *helper* function which configures/sets up each component requiring project specific input. This includes
 * allocating resources, passing-in arguments, etc. This function may be inlined into the topology setup function if
 * desired, but is extracted here for clarity.
 */
void configureTopology() {
    195c:	b510      	push	{r4, lr}
    // Rate group driver needs a divisor list
    rateGroupDriver.configure(rateGroupDivisors);
    195e:	4912      	ldr	r1, [pc, #72]	; (19a8 <configureTopology()+0x4c>)
void configureTopology() {
    1960:	b084      	sub	sp, #16
    rateGroupDriver.configure(rateGroupDivisors);
    1962:	4812      	ldr	r0, [pc, #72]	; (19ac <configureTopology()+0x50>)
    1964:	f00c fdf4 	bl	e550 <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)>

    // Rate groups require context arrays.
    rateGroup1.configure(rateGroup1Context, FW_NUM_ARRAY_ELEMENTS(rateGroup1Context));
    1968:	220a      	movs	r2, #10
    196a:	4911      	ldr	r1, [pc, #68]	; (19b0 <configureTopology()+0x54>)
    // Set up BufferManager
    Svc::BufferManager::BufferBins buffMgrBins;
    memset(&buffMgrBins, 0, sizeof(buffMgrBins));
    buffMgrBins.bins[0].bufferSize = COM_BUFFER_SIZE;
    buffMgrBins.bins[0].numBuffers = COM_BUFFER_COUNT;
    bufferManager.setup(BUFFER_MANAGER_ID, 0, mallocator, buffMgrBins);
    196c:	ac02      	add	r4, sp, #8
    rateGroup1.configure(rateGroup1Context, FW_NUM_ARRAY_ELEMENTS(rateGroup1Context));
    196e:	4811      	ldr	r0, [pc, #68]	; (19b4 <configureTopology()+0x58>)
    1970:	f00c fa80 	bl	de74 <Svc::PassiveRateGroup::configure(long*, long)>
    gpioDriver.open(Arduino::DEF_LED_BUILTIN, Arduino::GpioDriver::GpioDirection::OUT);
    1974:	2201      	movs	r2, #1
    1976:	210d      	movs	r1, #13
    1978:	480f      	ldr	r0, [pc, #60]	; (19b8 <configureTopology()+0x5c>)
    197a:	f002 fc0f 	bl	419c <Arduino::GpioDriver::open(long, Arduino::GpioDriver::GpioDirection)>
    buffMgrBins.bins[0].bufferSize = COM_BUFFER_SIZE;
    197e:	208c      	movs	r0, #140	; 0x8c
    buffMgrBins.bins[0].numBuffers = COM_BUFFER_COUNT;
    1980:	2103      	movs	r1, #3
    bufferManager.setup(BUFFER_MANAGER_ID, 0, mallocator, buffMgrBins);
    1982:	4b0e      	ldr	r3, [pc, #56]	; (19bc <configureTopology()+0x60>)
    1984:	2200      	movs	r2, #0
    1986:	9400      	str	r4, [sp, #0]
    buffMgrBins.bins[0].numBuffers = COM_BUFFER_COUNT;
    1988:	e9cd 0102 	strd	r0, r1, [sp, #8]
    bufferManager.setup(BUFFER_MANAGER_ID, 0, mallocator, buffMgrBins);
    198c:	21c8      	movs	r1, #200	; 0xc8
    198e:	480c      	ldr	r0, [pc, #48]	; (19c0 <configureTopology()+0x64>)
    1990:	f006 f890 	bl	7ab4 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)>

    // Framer and Deframer components need to be passed a protocol handler
    framer.setup(framing);
    1994:	490b      	ldr	r1, [pc, #44]	; (19c4 <configureTopology()+0x68>)
    1996:	480c      	ldr	r0, [pc, #48]	; (19c8 <configureTopology()+0x6c>)
    1998:	f00a fc92 	bl	c2c0 <Svc::Framer::setup(Svc::FramingProtocol&)>
    deframer.setup(deframing);
    199c:	490b      	ldr	r1, [pc, #44]	; (19cc <configureTopology()+0x70>)
    199e:	480c      	ldr	r0, [pc, #48]	; (19d0 <configureTopology()+0x74>)
    19a0:	f009 fea8 	bl	b6f4 <Svc::Deframer::setup(Svc::DeframingProtocol&)>
}
    19a4:	b004      	add	sp, #16
    19a6:	bd10      	pop	{r4, pc}
    19a8:	2000d304 	.word	0x2000d304
    19ac:	2000c72c 	.word	0x2000c72c
    19b0:	2000d2dc 	.word	0x2000d2dc
    19b4:	2000bb94 	.word	0x2000bb94
    19b8:	2000ba4c 	.word	0x2000ba4c
    19bc:	2000d2c0 	.word	0x2000d2c0
    19c0:	20007648 	.word	0x20007648
    19c4:	2000d2b4 	.word	0x2000d2b4
    19c8:	200085a0 	.word	0x200085a0
    19cc:	2000d288 	.word	0x2000d288
    19d0:	2000b2e8 	.word	0x2000b2e8

000019d4 <LedBlinker::setupTopology(LedBlinker::TopologyState const&)>:

// Public functions for use in main program are namespaced with deployment name LedBlinker
namespace LedBlinker {
void setupTopology(const TopologyState& state) {
    19d4:	b538      	push	{r3, r4, r5, lr}
    19d6:	4604      	mov	r4, r0
    // Autocoded parameter loading. Function provided by autocoder.
    // loadParameters();
    // Autocoded task kick-off (active components). Function provided by autocoder.
    startTasks(state);
    
    rateDriver.configure(1);
    19d8:	4d0d      	ldr	r5, [pc, #52]	; (1a10 <LedBlinker::setupTopology(LedBlinker::TopologyState const&)+0x3c>)
    initComponents(state);
    19da:	f000 f869 	bl	1ab0 <LedBlinker::initComponents(LedBlinker::TopologyState const&)>
    setBaseIds();
    19de:	f000 f8cd 	bl	1b7c <LedBlinker::setBaseIds()>
    connectComponents();
    19e2:	f000 f93f 	bl	1c64 <LedBlinker::connectComponents()>
    regCommands();
    19e6:	f000 fb8d 	bl	2104 <LedBlinker::regCommands()>
    configureTopology();
    19ea:	f7ff ffb7 	bl	195c <configureTopology()>
    startTasks(state);
    19ee:	4620      	mov	r0, r4
    19f0:	f000 fba4 	bl	213c <LedBlinker::startTasks(LedBlinker::TopologyState const&)>
    rateDriver.configure(1);
    19f4:	4628      	mov	r0, r5
    19f6:	2101      	movs	r1, #1
    19f8:	f002 fd22 	bl	4440 <Arduino::HardwareRateDriver::configure(unsigned long)>
    commDriver.configure(&Serial);
    19fc:	4805      	ldr	r0, [pc, #20]	; (1a14 <LedBlinker::setupTopology(LedBlinker::TopologyState const&)+0x40>)
    19fe:	4906      	ldr	r1, [pc, #24]	; (1a18 <LedBlinker::setupTopology(LedBlinker::TopologyState const&)+0x44>)
    1a00:	f001 f87c 	bl	2afc <Arduino::StreamDriver::configure(Stream*)>
    rateDriver.start();
    1a04:	4628      	mov	r0, r5
}
    1a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    rateDriver.start();
    1a0a:	f002 bd79 	b.w	4500 <Arduino::HardwareRateDriver::start()>
    1a0e:	bf00      	nop
    1a10:	20006c38 	.word	0x20006c38
    1a14:	200068e0 	.word	0x200068e0
    1a18:	20005a28 	.word	0x20005a28

00001a1c <Svc::FprimeFraming::~FprimeFraming()>:
  class FprimeFraming: public FramingProtocol {
    1a1c:	b510      	push	{r4, lr}
    1a1e:	4604      	mov	r4, r0
    1a20:	2108      	movs	r1, #8
    1a22:	f017 f955 	bl	18cd0 <operator delete(void*, unsigned int)>
    1a26:	4620      	mov	r0, r4
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	bf00      	nop

00001a2c <Svc::FprimeDeframing::~FprimeDeframing()>:
  class FprimeDeframing : public DeframingProtocol {
    1a2c:	b510      	push	{r4, lr}
    1a2e:	4604      	mov	r4, r0
    1a30:	2108      	movs	r1, #8
    1a32:	f017 f94d 	bl	18cd0 <operator delete(void*, unsigned int)>
    1a36:	4620      	mov	r0, r4
    1a38:	bd10      	pop	{r4, pc}
    1a3a:	bf00      	nop

00001a3c <_GLOBAL__sub_I_mallocator>:
void teardownTopology(const TopologyState& state) {
    // Autocoded (active component) task clean-up. Functions provided by topology autocoder.
    stopTasks(state);
    freeThreads(state);
}
};  // namespace LedBlinker
    1a3c:	b538      	push	{r3, r4, r5, lr}
Fw::MallocAllocator mallocator;
    1a3e:	4d14      	ldr	r5, [pc, #80]	; (1a90 <_GLOBAL__sub_I_mallocator+0x54>)
Svc::FprimeFraming framing;
    1a40:	4c14      	ldr	r4, [pc, #80]	; (1a94 <_GLOBAL__sub_I_mallocator+0x58>)
Fw::MallocAllocator mallocator;
    1a42:	4628      	mov	r0, r5
    1a44:	f016 fad8 	bl	17ff8 <Fw::MallocAllocator::MallocAllocator()>
    1a48:	4913      	ldr	r1, [pc, #76]	; (1a98 <_GLOBAL__sub_I_mallocator+0x5c>)
    1a4a:	4a14      	ldr	r2, [pc, #80]	; (1a9c <_GLOBAL__sub_I_mallocator+0x60>)
    1a4c:	4628      	mov	r0, r5
    1a4e:	f018 fc97 	bl	1a380 <__aeabi_atexit>
Svc::FprimeFraming framing;
    1a52:	4620      	mov	r0, r4
    1a54:	f00b fc2c 	bl	d2b0 <Svc::FprimeFraming::FprimeFraming()>
    1a58:	4620      	mov	r0, r4
Svc::FprimeDeframing deframing;
    1a5a:	4c11      	ldr	r4, [pc, #68]	; (1aa0 <_GLOBAL__sub_I_mallocator+0x64>)
Svc::FprimeFraming framing;
    1a5c:	4a0f      	ldr	r2, [pc, #60]	; (1a9c <_GLOBAL__sub_I_mallocator+0x60>)
    1a5e:	4911      	ldr	r1, [pc, #68]	; (1aa4 <_GLOBAL__sub_I_mallocator+0x68>)
    1a60:	f018 fc8e 	bl	1a380 <__aeabi_atexit>
Svc::FprimeDeframing deframing;
    1a64:	4620      	mov	r0, r4
    1a66:	f00b fc2d 	bl	d2c4 <Svc::FprimeDeframing::FprimeDeframing()>
    1a6a:	4a0c      	ldr	r2, [pc, #48]	; (1a9c <_GLOBAL__sub_I_mallocator+0x60>)
    1a6c:	490e      	ldr	r1, [pc, #56]	; (1aa8 <_GLOBAL__sub_I_mallocator+0x6c>)
    1a6e:	4620      	mov	r0, r4
    1a70:	f018 fc86 	bl	1a380 <__aeabi_atexit>
                //! Initializes divisor and offset to 0 (unused)
                Divider() : divisor(0), offset(0)
                {}
                //! Initializes divisor and offset to passed-in pair 
                Divider(NATIVE_INT_TYPE divisorIn, NATIVE_INT_TYPE offsetIn) :
                    divisor(divisorIn), offset(offsetIn)
    1a74:	2464      	movs	r4, #100	; 0x64
    1a76:	4b0d      	ldr	r3, [pc, #52]	; (1aac <_GLOBAL__sub_I_mallocator+0x70>)
    1a78:	2200      	movs	r2, #0
    1a7a:	20c8      	movs	r0, #200	; 0xc8
    1a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1a80:	e9c3 4200 	strd	r4, r2, [r3]
    1a84:	e9c3 0202 	strd	r0, r2, [r3, #8]
    1a88:	e9c3 1204 	strd	r1, r2, [r3, #16]
};  // namespace LedBlinker
    1a8c:	bd38      	pop	{r3, r4, r5, pc}
    1a8e:	bf00      	nop
    1a90:	2000d2c0 	.word	0x2000d2c0
    1a94:	2000d2b4 	.word	0x2000d2b4
    1a98:	00017fa9 	.word	0x00017fa9
    1a9c:	20005a58 	.word	0x20005a58
    1aa0:	2000d288 	.word	0x2000d288
    1aa4:	00001955 	.word	0x00001955
    1aa8:	00001959 	.word	0x00001959
    1aac:	2000d304 	.word	0x2000d304

00001ab0 <LedBlinker::initComponents(LedBlinker::TopologyState const&)>:
  void initComponents(const TopologyState& state) {
    1ab0:	b508      	push	{r3, lr}
    LedBlinker::bufferManager.init(InstanceIds::LedBlinker_bufferManager);
    1ab2:	2100      	movs	r1, #0
    1ab4:	4821      	ldr	r0, [pc, #132]	; (1b3c <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0x8c>)
    1ab6:	f006 f8f7 	bl	7ca8 <Svc::BufferManagerComponentBase::init(long)>
    LedBlinker::cmdDisp.init(QueueSizes::LedBlinker_cmdDisp, InstanceIds::LedBlinker_cmdDisp);
    1aba:	2201      	movs	r2, #1
    1abc:	2103      	movs	r1, #3
    1abe:	4820      	ldr	r0, [pc, #128]	; (1b40 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0x90>)
    1ac0:	f007 fa0a 	bl	8ed8 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)>
    LedBlinker::commDriver.init(InstanceIds::LedBlinker_commDriver);
    1ac4:	2102      	movs	r1, #2
    1ac6:	481f      	ldr	r0, [pc, #124]	; (1b44 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0x94>)
    1ac8:	f001 f8d2 	bl	2c70 <Arduino::StreamDriverComponentBase::init(long)>
    LedBlinker::deframer.init(InstanceIds::LedBlinker_deframer);
    1acc:	2103      	movs	r1, #3
    1ace:	481e      	ldr	r0, [pc, #120]	; (1b48 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0x98>)
    1ad0:	f009 ffec 	bl	baac <Svc::DeframerComponentBase::init(long)>
    LedBlinker::eventLogger.init(QueueSizes::LedBlinker_eventLogger, InstanceIds::LedBlinker_eventLogger);
    1ad4:	2204      	movs	r2, #4
    1ad6:	2103      	movs	r1, #3
    1ad8:	481c      	ldr	r0, [pc, #112]	; (1b4c <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0x9c>)
    1ada:	f004 f897 	bl	5c0c <Svc::ActiveLoggerComponentBase::init(unsigned long, long)>
    LedBlinker::fatalHandler.init(InstanceIds::LedBlinker_fatalHandler);
    1ade:	2105      	movs	r1, #5
    1ae0:	481b      	ldr	r0, [pc, #108]	; (1b50 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xa0>)
    1ae2:	f003 fdb7 	bl	5654 <Baremetal::FatalHandlerComponentBase::init(long)>
    LedBlinker::framer.init(InstanceIds::LedBlinker_framer);
    1ae6:	2106      	movs	r1, #6
    1ae8:	481a      	ldr	r0, [pc, #104]	; (1b54 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xa4>)
    1aea:	f00a fc8f 	bl	c40c <Svc::FramerComponentBase::init(long)>
    LedBlinker::gpioDriver.init(InstanceIds::LedBlinker_gpioDriver);
    1aee:	2107      	movs	r1, #7
    1af0:	4819      	ldr	r0, [pc, #100]	; (1b58 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xa8>)
    1af2:	f002 fb51 	bl	4198 <Arduino::GpioDriver::init(long)>
    LedBlinker::led.init(InstanceIds::LedBlinker_led);
    1af6:	2108      	movs	r1, #8
    1af8:	4818      	ldr	r0, [pc, #96]	; (1b5c <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xac>)
    1afa:	f001 fcb5 	bl	3468 <Components::LedComponentBase::init(long)>
    LedBlinker::rateDriver.init(InstanceIds::LedBlinker_rateDriver);
    1afe:	2109      	movs	r1, #9
    1b00:	4817      	ldr	r0, [pc, #92]	; (1b60 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xb0>)
    1b02:	f002 fd67 	bl	45d4 <Arduino::HardwareRateDriverComponentBase::init(long)>
    LedBlinker::rateGroup1.init(InstanceIds::LedBlinker_rateGroup1);
    1b06:	210a      	movs	r1, #10
    1b08:	4816      	ldr	r0, [pc, #88]	; (1b64 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xb4>)
    1b0a:	f00c fa73 	bl	dff4 <Svc::PassiveRateGroupComponentBase::init(long)>
    LedBlinker::rateGroupDriver.init(InstanceIds::LedBlinker_rateGroupDriver);
    1b0e:	210b      	movs	r1, #11
    1b10:	4815      	ldr	r0, [pc, #84]	; (1b68 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xb8>)
    1b12:	f00c fd77 	bl	e604 <Svc::RateGroupDriverComponentBase::init(long)>
    LedBlinker::systemResources.init(InstanceIds::LedBlinker_systemResources);
    1b16:	210c      	movs	r1, #12
    1b18:	4814      	ldr	r0, [pc, #80]	; (1b6c <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xbc>)
    1b1a:	f00d f985 	bl	ee28 <Svc::SystemResourcesComponentBase::init(long)>
    LedBlinker::textLogger.init(InstanceIds::LedBlinker_textLogger);
    1b1e:	210d      	movs	r1, #13
    1b20:	4813      	ldr	r0, [pc, #76]	; (1b70 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xc0>)
    1b22:	f00c f917 	bl	dd54 <Svc::PassiveTextLoggerComponentBase::init(long)>
    LedBlinker::timeHandler.init(InstanceIds::LedBlinker_timeHandler);
    1b26:	210e      	movs	r1, #14
    1b28:	4812      	ldr	r0, [pc, #72]	; (1b74 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xc4>)
    1b2a:	f003 f8bb 	bl	4ca4 <Arduino::ArduinoTimeComponentBase::init(long)>
    LedBlinker::tlmSend.init(QueueSizes::LedBlinker_tlmSend, InstanceIds::LedBlinker_tlmSend);
    1b2e:	220f      	movs	r2, #15
    1b30:	2103      	movs	r1, #3
    1b32:	4811      	ldr	r0, [pc, #68]	; (1b78 <LedBlinker::initComponents(LedBlinker::TopologyState const&)+0xc8>)
  }
    1b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LedBlinker::tlmSend.init(QueueSizes::LedBlinker_tlmSend, InstanceIds::LedBlinker_tlmSend);
    1b38:	f00e be20 	b.w	1077c <Svc::TlmChanComponentBase::init(unsigned long, long)>
    1b3c:	20007648 	.word	0x20007648
    1b40:	20008970 	.word	0x20008970
    1b44:	200068e0 	.word	0x200068e0
    1b48:	2000b2e8 	.word	0x2000b2e8
    1b4c:	20006da0 	.word	0x20006da0
    1b50:	2000c658 	.word	0x2000c658
    1b54:	200085a0 	.word	0x200085a0
    1b58:	2000ba4c 	.word	0x2000ba4c
    1b5c:	20008010 	.word	0x20008010
    1b60:	20006c38 	.word	0x20006c38
    1b64:	2000bb94 	.word	0x2000bb94
    1b68:	2000c72c 	.word	0x2000c72c
    1b6c:	20007a58 	.word	0x20007a58
    1b70:	2000c1b4 	.word	0x2000c1b4
    1b74:	2000c288 	.word	0x2000c288
    1b78:	20009c00 	.word	0x20009c00

00001b7c <LedBlinker::setBaseIds()>:
  void setBaseIds() {
    1b7c:	b508      	push	{r3, lr}
    LedBlinker::cmdDisp.setIdBase(BaseIds::LedBlinker_cmdDisp);
    1b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1b82:	4828      	ldr	r0, [pc, #160]	; (1c24 <LedBlinker::setBaseIds()+0xa8>)
    1b84:	f010 f9b4 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::eventLogger.setIdBase(BaseIds::LedBlinker_eventLogger);
    1b88:	f44f 7100 	mov.w	r1, #512	; 0x200
    1b8c:	4826      	ldr	r0, [pc, #152]	; (1c28 <LedBlinker::setBaseIds()+0xac>)
    1b8e:	f010 f9af 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::tlmSend.setIdBase(BaseIds::LedBlinker_tlmSend);
    1b92:	f44f 7140 	mov.w	r1, #768	; 0x300
    1b96:	4825      	ldr	r0, [pc, #148]	; (1c2c <LedBlinker::setBaseIds()+0xb0>)
    1b98:	f010 f9aa 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::rateGroup1.setIdBase(BaseIds::LedBlinker_rateGroup1);
    1b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    1ba0:	4823      	ldr	r0, [pc, #140]	; (1c30 <LedBlinker::setBaseIds()+0xb4>)
    1ba2:	f010 f9a5 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::bufferManager.setIdBase(BaseIds::LedBlinker_bufferManager);
    1ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1baa:	4822      	ldr	r0, [pc, #136]	; (1c34 <LedBlinker::setBaseIds()+0xb8>)
    1bac:	f010 f9a0 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::commDriver.setIdBase(BaseIds::LedBlinker_commDriver);
    1bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1bb4:	4820      	ldr	r0, [pc, #128]	; (1c38 <LedBlinker::setBaseIds()+0xbc>)
    1bb6:	f010 f99b 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::framer.setIdBase(BaseIds::LedBlinker_framer);
    1bba:	f44f 4182 	mov.w	r1, #16640	; 0x4100
    1bbe:	481f      	ldr	r0, [pc, #124]	; (1c3c <LedBlinker::setBaseIds()+0xc0>)
    1bc0:	f010 f996 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::fatalHandler.setIdBase(BaseIds::LedBlinker_fatalHandler);
    1bc4:	f44f 4186 	mov.w	r1, #17152	; 0x4300
    1bc8:	481d      	ldr	r0, [pc, #116]	; (1c40 <LedBlinker::setBaseIds()+0xc4>)
    1bca:	f010 f991 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::timeHandler.setIdBase(BaseIds::LedBlinker_timeHandler);
    1bce:	f44f 4188 	mov.w	r1, #17408	; 0x4400
    1bd2:	481c      	ldr	r0, [pc, #112]	; (1c44 <LedBlinker::setBaseIds()+0xc8>)
    1bd4:	f010 f98c 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::rateGroupDriver.setIdBase(BaseIds::LedBlinker_rateGroupDriver);
    1bd8:	f44f 418a 	mov.w	r1, #17664	; 0x4500
    1bdc:	481a      	ldr	r0, [pc, #104]	; (1c48 <LedBlinker::setBaseIds()+0xcc>)
    1bde:	f010 f987 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::textLogger.setIdBase(BaseIds::LedBlinker_textLogger);
    1be2:	f44f 418c 	mov.w	r1, #17920	; 0x4600
    1be6:	4819      	ldr	r0, [pc, #100]	; (1c4c <LedBlinker::setBaseIds()+0xd0>)
    1be8:	f010 f982 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::deframer.setIdBase(BaseIds::LedBlinker_deframer);
    1bec:	f44f 418e 	mov.w	r1, #18176	; 0x4700
    1bf0:	4817      	ldr	r0, [pc, #92]	; (1c50 <LedBlinker::setBaseIds()+0xd4>)
    1bf2:	f010 f97d 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::systemResources.setIdBase(BaseIds::LedBlinker_systemResources);
    1bf6:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    1bfa:	4816      	ldr	r0, [pc, #88]	; (1c54 <LedBlinker::setBaseIds()+0xd8>)
    1bfc:	f010 f978 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::rateDriver.setIdBase(BaseIds::LedBlinker_rateDriver);
    1c00:	f44f 4192 	mov.w	r1, #18688	; 0x4900
    1c04:	4814      	ldr	r0, [pc, #80]	; (1c58 <LedBlinker::setBaseIds()+0xdc>)
    1c06:	f010 f973 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::gpioDriver.setIdBase(BaseIds::LedBlinker_gpioDriver);
    1c0a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    1c0e:	4813      	ldr	r0, [pc, #76]	; (1c5c <LedBlinker::setBaseIds()+0xe0>)
    1c10:	f010 f96e 	bl	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    LedBlinker::led.setIdBase(BaseIds::LedBlinker_led);
    1c14:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1c18:	4811      	ldr	r0, [pc, #68]	; (1c60 <LedBlinker::setBaseIds()+0xe4>)
  }
    1c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LedBlinker::led.setIdBase(BaseIds::LedBlinker_led);
    1c1e:	f010 b967 	b.w	11ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>
    1c22:	bf00      	nop
    1c24:	20008970 	.word	0x20008970
    1c28:	20006da0 	.word	0x20006da0
    1c2c:	20009c00 	.word	0x20009c00
    1c30:	2000bb94 	.word	0x2000bb94
    1c34:	20007648 	.word	0x20007648
    1c38:	200068e0 	.word	0x200068e0
    1c3c:	200085a0 	.word	0x200085a0
    1c40:	2000c658 	.word	0x2000c658
    1c44:	2000c288 	.word	0x2000c288
    1c48:	2000c72c 	.word	0x2000c72c
    1c4c:	2000c1b4 	.word	0x2000c1b4
    1c50:	2000b2e8 	.word	0x2000b2e8
    1c54:	20007a58 	.word	0x20007a58
    1c58:	20006c38 	.word	0x20006c38
    1c5c:	2000ba4c 	.word	0x2000ba4c
    1c60:	20008010 	.word	0x20008010

00001c64 <LedBlinker::connectComponents()>:
  void connectComponents() {
    1c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c68:	4cf7      	ldr	r4, [pc, #988]	; (2048 <LedBlinker::connectComponents()+0x3e4>)
    1c6a:	2100      	movs	r1, #0
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c6c:	4df7      	ldr	r5, [pc, #988]	; (204c <LedBlinker::connectComponents()+0x3e8>)
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c6e:	4620      	mov	r0, r4
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c70:	f8df 83fc 	ldr.w	r8, [pc, #1020]	; 2070 <LedBlinker::connectComponents()+0x40c>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c74:	f007 fb44 	bl	9300 <Svc::CommandDispatcherComponentBase::get_CmdDisp_InputPort(long)>
    1c78:	2100      	movs	r1, #0
    1c7a:	4602      	mov	r2, r0
    1c7c:	4620      	mov	r0, r4
    1c7e:	f007 fc13 	bl	94a8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c82:	2100      	movs	r1, #0
    1c84:	4628      	mov	r0, r5
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c86:	f8df 93ec 	ldr.w	r9, [pc, #1004]	; 2074 <LedBlinker::connectComponents()+0x410>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c8a:	f004 f943 	bl	5f14 <Svc::ActiveLoggerComponentBase::get_CmdDisp_InputPort(long)>
    1c8e:	2101      	movs	r1, #1
    1c90:	4602      	mov	r2, r0
    1c92:	4620      	mov	r0, r4
    1c94:	f007 fc08 	bl	94a8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c98:	2100      	movs	r1, #0
    1c9a:	4640      	mov	r0, r8
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c9c:	4eec      	ldr	r6, [pc, #944]	; (2050 <LedBlinker::connectComponents()+0x3ec>)
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1c9e:	f001 fd49 	bl	3734 <Components::LedComponentBase::get_cmdIn_InputPort(long)>
    1ca2:	2102      	movs	r1, #2
    1ca4:	4602      	mov	r2, r0
    1ca6:	4620      	mov	r0, r4
    1ca8:	f007 fbfe 	bl	94a8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1cac:	2100      	movs	r1, #0
    1cae:	4648      	mov	r0, r9
    LedBlinker::commDriver.set_deallocate_OutputPort(
    1cb0:	4fe8      	ldr	r7, [pc, #928]	; (2054 <LedBlinker::connectComponents()+0x3f0>)
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1cb2:	f00d f9c9 	bl	f048 <Svc::SystemResourcesComponentBase::get_CmdDisp_InputPort(long)>
    1cb6:	2103      	movs	r1, #3
    1cb8:	4602      	mov	r2, r0
    1cba:	4620      	mov	r0, r4
    1cbc:	f007 fbf4 	bl	94a8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1cc0:	2100      	movs	r1, #0
    1cc2:	4630      	mov	r0, r6
    LedBlinker::eventLogger.set_PktSend_OutputPort(
    1cc4:	f8df a3b0 	ldr.w	sl, [pc, #944]	; 2078 <LedBlinker::connectComponents()+0x414>
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
    1cc8:	f003 f906 	bl	4ed8 <Arduino::ArduinoTimeComponentBase::get_cmdIn_InputPort(long)>
    1ccc:	2104      	movs	r1, #4
    1cce:	4602      	mov	r2, r0
    1cd0:	4620      	mov	r0, r4
    1cd2:	f007 fbe9 	bl	94a8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)>
    LedBlinker::cmdDisp.set_CmdReg_OutputPort(
    1cd6:	2100      	movs	r1, #0
    1cd8:	4620      	mov	r0, r4
    LedBlinker::tlmSend.set_PktSend_OutputPort(
    1cda:	f8df b3a0 	ldr.w	fp, [pc, #928]	; 207c <LedBlinker::connectComponents()+0x418>
    LedBlinker::cmdDisp.set_CmdReg_OutputPort(
    1cde:	f007 fb21 	bl	9324 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)>
    1ce2:	2100      	movs	r1, #0
    1ce4:	4602      	mov	r2, r0
    1ce6:	4620      	mov	r0, r4
    1ce8:	f007 fb5a 	bl	93a0 <Svc::CommandDispatcherComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)>
    LedBlinker::eventLogger.set_CmdReg_OutputPort(
    1cec:	2101      	movs	r1, #1
    1cee:	4620      	mov	r0, r4
    1cf0:	f007 fb18 	bl	9324 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)>
    1cf4:	2100      	movs	r1, #0
    1cf6:	4602      	mov	r2, r0
    1cf8:	4628      	mov	r0, r5
    1cfa:	f004 f92f 	bl	5f5c <Svc::ActiveLoggerComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)>
    LedBlinker::led.set_cmdRegOut_OutputPort(
    1cfe:	2102      	movs	r1, #2
    1d00:	4620      	mov	r0, r4
    1d02:	f007 fb0f 	bl	9324 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)>
    1d06:	2100      	movs	r1, #0
    1d08:	4602      	mov	r2, r0
    1d0a:	4640      	mov	r0, r8
    1d0c:	f001 fd34 	bl	3778 <Components::LedComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)>
    LedBlinker::systemResources.set_CmdReg_OutputPort(
    1d10:	2103      	movs	r1, #3
    1d12:	4620      	mov	r0, r4
    1d14:	f007 fb06 	bl	9324 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)>
    1d18:	2100      	movs	r1, #0
    1d1a:	4602      	mov	r2, r0
    1d1c:	4648      	mov	r0, r9
    1d1e:	f00d f9b3 	bl	f088 <Svc::SystemResourcesComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)>
    LedBlinker::timeHandler.set_cmdRegOut_OutputPort(
    1d22:	2104      	movs	r1, #4
    1d24:	4620      	mov	r0, r4
    1d26:	f007 fafd 	bl	9324 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)>
    1d2a:	2100      	movs	r1, #0
    1d2c:	4602      	mov	r2, r0
    1d2e:	4630      	mov	r0, r6
    1d30:	f003 f8f2 	bl	4f18 <Arduino::ArduinoTimeComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)>
    LedBlinker::cmdDisp.set_CmdStatus_OutputPort(
    1d34:	2100      	movs	r1, #0
    1d36:	4620      	mov	r0, r4
    1d38:	f007 fb0e 	bl	9358 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)>
    1d3c:	2100      	movs	r1, #0
    1d3e:	4602      	mov	r2, r0
    1d40:	4620      	mov	r0, r4
    1d42:	f007 fb43 	bl	93cc <Svc::CommandDispatcherComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>
    LedBlinker::eventLogger.set_CmdStatus_OutputPort(
    1d46:	2100      	movs	r1, #0
    1d48:	4620      	mov	r0, r4
    1d4a:	f007 fb05 	bl	9358 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)>
    1d4e:	2100      	movs	r1, #0
    1d50:	4602      	mov	r2, r0
    1d52:	4628      	mov	r0, r5
    1d54:	f004 f918 	bl	5f88 <Svc::ActiveLoggerComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>
    LedBlinker::led.set_cmdResponseOut_OutputPort(
    1d58:	2100      	movs	r1, #0
    1d5a:	4620      	mov	r0, r4
    1d5c:	f007 fafc 	bl	9358 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)>
    1d60:	2100      	movs	r1, #0
    1d62:	4602      	mov	r2, r0
    1d64:	4640      	mov	r0, r8
    1d66:	f001 fd1d 	bl	37a4 <Components::LedComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)>
    LedBlinker::systemResources.set_CmdStatus_OutputPort(
    1d6a:	2100      	movs	r1, #0
    1d6c:	4620      	mov	r0, r4
    1d6e:	f007 faf3 	bl	9358 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)>
    1d72:	2100      	movs	r1, #0
    1d74:	4602      	mov	r2, r0
    1d76:	4648      	mov	r0, r9
    1d78:	f00d f99c 	bl	f0b4 <Svc::SystemResourcesComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>
    LedBlinker::timeHandler.set_cmdResponseOut_OutputPort(
    1d7c:	2100      	movs	r1, #0
    1d7e:	4620      	mov	r0, r4
    1d80:	f007 faea 	bl	9358 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)>
    1d84:	2100      	movs	r1, #0
    1d86:	4602      	mov	r2, r0
    1d88:	4630      	mov	r0, r6
    1d8a:	f003 f8db 	bl	4f44 <Arduino::ArduinoTimeComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)>
    LedBlinker::commDriver.set_deallocate_OutputPort(
    1d8e:	2100      	movs	r1, #0
    1d90:	4638      	mov	r0, r7
    1d92:	f006 f897 	bl	7ec4 <Svc::BufferManagerComponentBase::get_bufferSendIn_InputPort(long)>
    1d96:	4bb0      	ldr	r3, [pc, #704]	; (2058 <LedBlinker::connectComponents()+0x3f4>)
    1d98:	4602      	mov	r2, r0
    1d9a:	2100      	movs	r1, #0
    1d9c:	4618      	mov	r0, r3
    1d9e:	f001 f873 	bl	2e88 <Arduino::StreamDriverComponentBase::set_deallocate_OutputPort(long, Fw::InputBufferSendPort*)>
    LedBlinker::eventLogger.set_PktSend_OutputPort(
    1da2:	2100      	movs	r1, #0
    1da4:	4650      	mov	r0, sl
    1da6:	f00a fc2f 	bl	c608 <Svc::FramerComponentBase::get_comIn_InputPort(long)>
    1daa:	2100      	movs	r1, #0
    1dac:	4602      	mov	r2, r0
    1dae:	4628      	mov	r0, r5
    1db0:	f004 f958 	bl	6064 <Svc::ActiveLoggerComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)>
    LedBlinker::framer.set_framedAllocate_OutputPort(
    1db4:	2100      	movs	r1, #0
    1db6:	4638      	mov	r0, r7
    1db8:	f006 f874 	bl	7ea4 <Svc::BufferManagerComponentBase::get_bufferGetCallee_InputPort(long)>
    1dbc:	2100      	movs	r1, #0
    1dbe:	4602      	mov	r2, r0
    1dc0:	4650      	mov	r0, sl
    1dc2:	f00a fc31 	bl	c628 <Svc::FramerComponentBase::set_framedAllocate_OutputPort(long, Fw::InputBufferGetPort*)>
    LedBlinker::framer.set_framedOut_OutputPort(
    1dc6:	4ba4      	ldr	r3, [pc, #656]	; (2058 <LedBlinker::connectComponents()+0x3f4>)
    1dc8:	2100      	movs	r1, #0
    1dca:	4618      	mov	r0, r3
    1dcc:	f001 f836 	bl	2e3c <Arduino::StreamDriverComponentBase::get_send_InputPort(long)>
    1dd0:	2100      	movs	r1, #0
    1dd2:	4602      	mov	r2, r0
    1dd4:	4650      	mov	r0, sl
    1dd6:	f00a fc3d 	bl	c654 <Svc::FramerComponentBase::set_framedOut_OutputPort(long, Drv::InputByteStreamSendPort*)>
    LedBlinker::tlmSend.set_PktSend_OutputPort(
    1dda:	4650      	mov	r0, sl
    1ddc:	2100      	movs	r1, #0
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
    1dde:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 2080 <LedBlinker::connectComponents()+0x41c>
    LedBlinker::tlmSend.set_PktSend_OutputPort(
    1de2:	f00a fc11 	bl	c608 <Svc::FramerComponentBase::get_comIn_InputPort(long)>
    1de6:	2100      	movs	r1, #0
    1de8:	4602      	mov	r2, r0
    1dea:	4658      	mov	r0, fp
    1dec:	f00e fde6 	bl	109bc <Svc::TlmChanComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)>
    LedBlinker::bufferManager.set_eventOut_OutputPort(
    1df0:	2100      	movs	r1, #0
    1df2:	4628      	mov	r0, r5
    1df4:	f004 f8a0 	bl	5f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>
    1df8:	2100      	movs	r1, #0
    1dfa:	4602      	mov	r2, r0
    1dfc:	4638      	mov	r0, r7
    1dfe:	f006 f871 	bl	7ee4 <Svc::BufferManagerComponentBase::set_eventOut_OutputPort(long, Fw::InputLogPort*)>
    LedBlinker::cmdDisp.set_Log_OutputPort(
    1e02:	2100      	movs	r1, #0
    1e04:	4628      	mov	r0, r5
    1e06:	f004 f897 	bl	5f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>
    1e0a:	2100      	movs	r1, #0
    1e0c:	4602      	mov	r2, r0
    1e0e:	4620      	mov	r0, r4
    1e10:	f007 faf2 	bl	93f8 <Svc::CommandDispatcherComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)>
    LedBlinker::eventLogger.set_Log_OutputPort(
    1e14:	2100      	movs	r1, #0
    1e16:	4628      	mov	r0, r5
    1e18:	f004 f88e 	bl	5f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>
    1e1c:	2100      	movs	r1, #0
    1e1e:	4602      	mov	r2, r0
    1e20:	4628      	mov	r0, r5
    1e22:	f004 f8c7 	bl	5fb4 <Svc::ActiveLoggerComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)>
    LedBlinker::led.set_logOut_OutputPort(
    1e26:	2100      	movs	r1, #0
    1e28:	4628      	mov	r0, r5
    1e2a:	f004 f885 	bl	5f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>
    1e2e:	2100      	movs	r1, #0
    1e30:	4602      	mov	r2, r0
    1e32:	4640      	mov	r0, r8
    1e34:	f001 fccc 	bl	37d0 <Components::LedComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)>
    LedBlinker::systemResources.set_Log_OutputPort(
    1e38:	2100      	movs	r1, #0
    1e3a:	4628      	mov	r0, r5
    1e3c:	f004 f87c 	bl	5f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>
    1e40:	2100      	movs	r1, #0
    1e42:	4602      	mov	r2, r0
    1e44:	4648      	mov	r0, r9
    1e46:	f00d f94b 	bl	f0e0 <Svc::SystemResourcesComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)>
    LedBlinker::timeHandler.set_logOut_OutputPort(
    1e4a:	2100      	movs	r1, #0
    1e4c:	4628      	mov	r0, r5
    1e4e:	f004 f873 	bl	5f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>
    1e52:	2100      	movs	r1, #0
    1e54:	4602      	mov	r2, r0
    1e56:	4630      	mov	r0, r6
    1e58:	f003 f88a 	bl	4f70 <Arduino::ArduinoTimeComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)>
    LedBlinker::eventLogger.set_FatalAnnounce_OutputPort(
    1e5c:	2100      	movs	r1, #0
    1e5e:	487f      	ldr	r0, [pc, #508]	; (205c <LedBlinker::connectComponents()+0x3f8>)
    1e60:	f003 fc2e 	bl	56c0 <Baremetal::FatalHandlerComponentBase::get_FatalReceive_InputPort(long)>
    1e64:	2100      	movs	r1, #0
    1e66:	4602      	mov	r2, r0
    1e68:	4628      	mov	r0, r5
    1e6a:	f004 f8e5 	bl	6038 <Svc::ActiveLoggerComponentBase::set_FatalAnnounce_OutputPort(long, Svc::InputFatalEventPort*)>
    LedBlinker::led.set_gpioSet_OutputPort(
    1e6e:	2100      	movs	r1, #0
    1e70:	487b      	ldr	r0, [pc, #492]	; (2060 <LedBlinker::connectComponents()+0x3fc>)
    1e72:	f002 fa03 	bl	427c <Arduino::GpioDriverComponentBase::get_gpioWrite_InputPort(long)>
    1e76:	2100      	movs	r1, #0
    1e78:	4602      	mov	r2, r0
    1e7a:	4640      	mov	r0, r8
    1e7c:	f001 fd00 	bl	3880 <Components::LedComponentBase::set_gpioSet_OutputPort(long, Drv::InputGpioWritePort*)>
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
    1e80:	2100      	movs	r1, #0
    1e82:	4640      	mov	r0, r8
    1e84:	f001 fc66 	bl	3754 <Components::LedComponentBase::get_run_InputPort(long)>
    1e88:	2103      	movs	r1, #3
    1e8a:	4602      	mov	r2, r0
    1e8c:	4650      	mov	r0, sl
    1e8e:	f00c f985 	bl	e19c <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)>
    LedBlinker::rateDriver.set_CycleOut_OutputPort(
    1e92:	2100      	movs	r1, #0
    1e94:	4873      	ldr	r0, [pc, #460]	; (2064 <LedBlinker::connectComponents()+0x400>)
    1e96:	f00c fc13 	bl	e6c0 <Svc::RateGroupDriverComponentBase::get_CycleIn_InputPort(long)>
    1e9a:	2100      	movs	r1, #0
    1e9c:	4602      	mov	r2, r0
    1e9e:	4872      	ldr	r0, [pc, #456]	; (2068 <LedBlinker::connectComponents()+0x404>)
    1ea0:	f002 fbe2 	bl	4668 <Arduino::HardwareRateDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)>
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
    1ea4:	4b6c      	ldr	r3, [pc, #432]	; (2058 <LedBlinker::connectComponents()+0x3f4>)
    1ea6:	2100      	movs	r1, #0
    1ea8:	4618      	mov	r0, r3
    1eaa:	f000 ffb7 	bl	2e1c <Arduino::StreamDriverComponentBase::get_schedIn_InputPort(long)>
    1eae:	2100      	movs	r1, #0
    1eb0:	4602      	mov	r2, r0
    1eb2:	4650      	mov	r0, sl
    1eb4:	f00c f972 	bl	e19c <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)>
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
    1eb8:	2100      	movs	r1, #0
    1eba:	4658      	mov	r0, fp
    1ebc:	f00e fd5a 	bl	10974 <Svc::TlmChanComponentBase::get_Run_InputPort(long)>
    1ec0:	2101      	movs	r1, #1
    1ec2:	4602      	mov	r2, r0
    1ec4:	4650      	mov	r0, sl
    1ec6:	f00c f969 	bl	e19c <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)>
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
    1eca:	2100      	movs	r1, #0
    1ecc:	4648      	mov	r0, r9
    1ece:	f00d f8cb 	bl	f068 <Svc::SystemResourcesComponentBase::get_run_InputPort(long)>
    1ed2:	2102      	movs	r1, #2
    1ed4:	4602      	mov	r2, r0
    1ed6:	4650      	mov	r0, sl
    1ed8:	f00c f960 	bl	e19c <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)>
    LedBlinker::rateGroupDriver.set_CycleOut_OutputPort(
    1edc:	2100      	movs	r1, #0
    1ede:	4650      	mov	r0, sl
    1ee0:	f00c f922 	bl	e128 <Svc::PassiveRateGroupComponentBase::get_CycleIn_InputPort(long)>
    1ee4:	2100      	movs	r1, #0
    1ee6:	4602      	mov	r2, r0
    1ee8:	485e      	ldr	r0, [pc, #376]	; (2064 <LedBlinker::connectComponents()+0x400>)
    1eea:	f00c fbf9 	bl	e6e0 <Svc::RateGroupDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)>
    LedBlinker::bufferManager.set_tlmOut_OutputPort(
    1eee:	2100      	movs	r1, #0
    1ef0:	4658      	mov	r0, fp
    1ef2:	f00e fd51 	bl	10998 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)>
    1ef6:	2100      	movs	r1, #0
    1ef8:	4602      	mov	r2, r0
    1efa:	4638      	mov	r0, r7
    1efc:	f006 f834 	bl	7f68 <Svc::BufferManagerComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)>
    LedBlinker::cmdDisp.set_Tlm_OutputPort(
    1f00:	2100      	movs	r1, #0
    1f02:	4658      	mov	r0, fp
    1f04:	f00e fd48 	bl	10998 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)>
    1f08:	2100      	movs	r1, #0
    1f0a:	4602      	mov	r2, r0
    1f0c:	4620      	mov	r0, r4
    1f0e:	f007 fab5 	bl	947c <Svc::CommandDispatcherComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)>
    LedBlinker::led.set_tlmOut_OutputPort(
    1f12:	2100      	movs	r1, #0
    1f14:	4658      	mov	r0, fp
    1f16:	f00e fd3f 	bl	10998 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)>
    1f1a:	2100      	movs	r1, #0
    1f1c:	4602      	mov	r2, r0
    1f1e:	4640      	mov	r0, r8
    1f20:	f001 fc98 	bl	3854 <Components::LedComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)>
    LedBlinker::rateGroup1.set_Tlm_OutputPort(
    1f24:	2100      	movs	r1, #0
    1f26:	4658      	mov	r0, fp
    1f28:	f00e fd36 	bl	10998 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)>
    1f2c:	2100      	movs	r1, #0
    1f2e:	4602      	mov	r2, r0
    1f30:	4650      	mov	r0, sl
    1f32:	f00c f91d 	bl	e170 <Svc::PassiveRateGroupComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)>
    LedBlinker::systemResources.set_Tlm_OutputPort(
    1f36:	4658      	mov	r0, fp
    1f38:	2100      	movs	r1, #0
    LedBlinker::bufferManager.set_textEventOut_OutputPort(
    1f3a:	f8df b148 	ldr.w	fp, [pc, #328]	; 2084 <LedBlinker::connectComponents()+0x420>
    LedBlinker::systemResources.set_Tlm_OutputPort(
    1f3e:	f00e fd2b 	bl	10998 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)>
    1f42:	2100      	movs	r1, #0
    1f44:	4602      	mov	r2, r0
    1f46:	4648      	mov	r0, r9
    1f48:	f00d f90c 	bl	f164 <Svc::SystemResourcesComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)>
    LedBlinker::bufferManager.set_textEventOut_OutputPort(
    1f4c:	2100      	movs	r1, #0
    1f4e:	4658      	mov	r0, fp
    1f50:	f00b ff36 	bl	ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>
    1f54:	2100      	movs	r1, #0
    1f56:	4602      	mov	r2, r0
    1f58:	4638      	mov	r0, r7
    1f5a:	f005 ffd9 	bl	7f10 <Svc::BufferManagerComponentBase::set_textEventOut_OutputPort(long, Fw::InputLogTextPort*)>
    LedBlinker::cmdDisp.set_LogText_OutputPort(
    1f5e:	2100      	movs	r1, #0
    1f60:	4658      	mov	r0, fp
    1f62:	f00b ff2d 	bl	ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>
    1f66:	2100      	movs	r1, #0
    1f68:	4602      	mov	r2, r0
    1f6a:	4620      	mov	r0, r4
    1f6c:	f007 fa5a 	bl	9424 <Svc::CommandDispatcherComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)>
    LedBlinker::eventLogger.set_LogText_OutputPort(
    1f70:	2100      	movs	r1, #0
    1f72:	4658      	mov	r0, fp
    1f74:	f00b ff24 	bl	ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>
    1f78:	2100      	movs	r1, #0
    1f7a:	4602      	mov	r2, r0
    1f7c:	4628      	mov	r0, r5
    1f7e:	f004 f82f 	bl	5fe0 <Svc::ActiveLoggerComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)>
    LedBlinker::led.set_logTextOut_OutputPort(
    1f82:	2100      	movs	r1, #0
    1f84:	4658      	mov	r0, fp
    1f86:	f00b ff1b 	bl	ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>
    1f8a:	2100      	movs	r1, #0
    1f8c:	4602      	mov	r2, r0
    1f8e:	4640      	mov	r0, r8
    1f90:	f001 fc34 	bl	37fc <Components::LedComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)>
    LedBlinker::systemResources.set_LogText_OutputPort(
    1f94:	2100      	movs	r1, #0
    1f96:	4658      	mov	r0, fp
    1f98:	f00b ff12 	bl	ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>
    1f9c:	2100      	movs	r1, #0
    1f9e:	4602      	mov	r2, r0
    1fa0:	4648      	mov	r0, r9
    1fa2:	f00d f8b3 	bl	f10c <Svc::SystemResourcesComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)>
    LedBlinker::timeHandler.set_logTextOut_OutputPort(
    1fa6:	4658      	mov	r0, fp
    1fa8:	2100      	movs	r1, #0
    1faa:	f00b ff09 	bl	ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>
    1fae:	2100      	movs	r1, #0
    1fb0:	4602      	mov	r2, r0
    1fb2:	4630      	mov	r0, r6
    1fb4:	f002 fff2 	bl	4f9c <Arduino::ArduinoTimeComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)>
    LedBlinker::bufferManager.set_timeCaller_OutputPort(
    1fb8:	2100      	movs	r1, #0
    1fba:	4630      	mov	r0, r6
    1fbc:	f002 ff9c 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    1fc0:	2100      	movs	r1, #0
    1fc2:	4602      	mov	r2, r0
    1fc4:	4638      	mov	r0, r7
    1fc6:	f005 ffb9 	bl	7f3c <Svc::BufferManagerComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::cmdDisp.set_Time_OutputPort(
    1fca:	2100      	movs	r1, #0
    1fcc:	4630      	mov	r0, r6
    1fce:	f002 ff93 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    1fd2:	2100      	movs	r1, #0
    1fd4:	4602      	mov	r2, r0
    1fd6:	4620      	mov	r0, r4
    1fd8:	f007 fa3a 	bl	9450 <Svc::CommandDispatcherComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::eventLogger.set_Time_OutputPort(
    1fdc:	2100      	movs	r1, #0
    1fde:	4630      	mov	r0, r6
    1fe0:	f002 ff8a 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    1fe4:	2100      	movs	r1, #0
    1fe6:	4602      	mov	r2, r0
    1fe8:	4628      	mov	r0, r5
    1fea:	f004 f80f 	bl	600c <Svc::ActiveLoggerComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::led.set_timeCaller_OutputPort(
    1fee:	2100      	movs	r1, #0
    1ff0:	4630      	mov	r0, r6
    LedBlinker::cmdDisp.set_seqCmdStatus_OutputPort(
    1ff2:	4d1e      	ldr	r5, [pc, #120]	; (206c <LedBlinker::connectComponents()+0x408>)
    LedBlinker::led.set_timeCaller_OutputPort(
    1ff4:	f002 ff80 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    1ff8:	2100      	movs	r1, #0
    1ffa:	4602      	mov	r2, r0
    1ffc:	4640      	mov	r0, r8
    1ffe:	f001 fc13 	bl	3828 <Components::LedComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::rateGroup1.set_Time_OutputPort(
    2002:	2100      	movs	r1, #0
    2004:	4630      	mov	r0, r6
    2006:	f002 ff77 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    200a:	2100      	movs	r1, #0
    200c:	4602      	mov	r2, r0
    200e:	4650      	mov	r0, sl
    2010:	f00c f89a 	bl	e148 <Svc::PassiveRateGroupComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::systemResources.set_Time_OutputPort(
    2014:	2100      	movs	r1, #0
    2016:	4630      	mov	r0, r6
    2018:	f002 ff6e 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    201c:	2100      	movs	r1, #0
    201e:	4602      	mov	r2, r0
    2020:	4648      	mov	r0, r9
    2022:	f00d f889 	bl	f138 <Svc::SystemResourcesComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::timeHandler.set_timeCaller_OutputPort(
    2026:	2100      	movs	r1, #0
    2028:	4630      	mov	r0, r6
    202a:	f002 ff65 	bl	4ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>
    202e:	2100      	movs	r1, #0
    2030:	4602      	mov	r2, r0
    2032:	4630      	mov	r0, r6
    2034:	f002 ffc8 	bl	4fc8 <Arduino::ArduinoTimeComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)>
    LedBlinker::cmdDisp.set_seqCmdStatus_OutputPort(
    2038:	2100      	movs	r1, #0
    203a:	4628      	mov	r0, r5
    203c:	f009 fe6e 	bl	bd1c <Svc::DeframerComponentBase::get_cmdResponseIn_InputPort(long)>
    2040:	2100      	movs	r1, #0
    2042:	4602      	mov	r2, r0
    2044:	4620      	mov	r0, r4
    2046:	e01f      	b.n	2088 <LedBlinker::connectComponents()+0x424>
    2048:	20008970 	.word	0x20008970
    204c:	20006da0 	.word	0x20006da0
    2050:	2000c288 	.word	0x2000c288
    2054:	20007648 	.word	0x20007648
    2058:	200068e0 	.word	0x200068e0
    205c:	2000c658 	.word	0x2000c658
    2060:	2000ba4c 	.word	0x2000ba4c
    2064:	2000c72c 	.word	0x2000c72c
    2068:	20006c38 	.word	0x20006c38
    206c:	2000b2e8 	.word	0x2000b2e8
    2070:	20008010 	.word	0x20008010
    2074:	20007a58 	.word	0x20007a58
    2078:	200085a0 	.word	0x200085a0
    207c:	20009c00 	.word	0x20009c00
    2080:	2000bb94 	.word	0x2000bb94
    2084:	2000c1b4 	.word	0x2000c1b4
    2088:	f007 fa26 	bl	94d8 <Svc::CommandDispatcherComponentBase::set_seqCmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>
    LedBlinker::commDriver.set_allocate_OutputPort(
    208c:	2100      	movs	r1, #0
    208e:	4638      	mov	r0, r7
    2090:	f005 ff08 	bl	7ea4 <Svc::BufferManagerComponentBase::get_bufferGetCallee_InputPort(long)>
    2094:	4b1a      	ldr	r3, [pc, #104]	; (2100 <LedBlinker::connectComponents()+0x49c>)
    2096:	4602      	mov	r2, r0
    2098:	2100      	movs	r1, #0
    209a:	4618      	mov	r0, r3
    209c:	f000 fede 	bl	2e5c <Arduino::StreamDriverComponentBase::set_allocate_OutputPort(long, Fw::InputBufferGetPort*)>
    LedBlinker::commDriver.set_recv_OutputPort(
    20a0:	2100      	movs	r1, #0
    20a2:	4628      	mov	r0, r5
    20a4:	f009 fe4a 	bl	bd3c <Svc::DeframerComponentBase::get_framedIn_InputPort(long)>
    20a8:	4b15      	ldr	r3, [pc, #84]	; (2100 <LedBlinker::connectComponents()+0x49c>)
    20aa:	4602      	mov	r2, r0
    20ac:	2100      	movs	r1, #0
    20ae:	4618      	mov	r0, r3
    20b0:	f000 ff00 	bl	2eb4 <Arduino::StreamDriverComponentBase::set_recv_OutputPort(long, Drv::InputByteStreamRecvPort*)>
    LedBlinker::deframer.set_bufferAllocate_OutputPort(
    20b4:	2100      	movs	r1, #0
    20b6:	4638      	mov	r0, r7
    20b8:	f005 fef4 	bl	7ea4 <Svc::BufferManagerComponentBase::get_bufferGetCallee_InputPort(long)>
    20bc:	2100      	movs	r1, #0
    20be:	4602      	mov	r2, r0
    20c0:	4628      	mov	r0, r5
    20c2:	f009 fe4b 	bl	bd5c <Svc::DeframerComponentBase::set_bufferAllocate_OutputPort(long, Fw::InputBufferGetPort*)>
    LedBlinker::deframer.set_bufferDeallocate_OutputPort(
    20c6:	2100      	movs	r1, #0
    20c8:	4638      	mov	r0, r7
    20ca:	f005 fefb 	bl	7ec4 <Svc::BufferManagerComponentBase::get_bufferSendIn_InputPort(long)>
    20ce:	2100      	movs	r1, #0
    20d0:	4602      	mov	r2, r0
    20d2:	4628      	mov	r0, r5
    20d4:	f009 fe58 	bl	bd88 <Svc::DeframerComponentBase::set_bufferDeallocate_OutputPort(long, Fw::InputBufferSendPort*)>
    LedBlinker::deframer.set_comOut_OutputPort(
    20d8:	2100      	movs	r1, #0
    20da:	4620      	mov	r0, r4
    20dc:	f007 f94e 	bl	937c <Svc::CommandDispatcherComponentBase::get_seqCmdBuff_InputPort(long)>
    20e0:	2100      	movs	r1, #0
    20e2:	4602      	mov	r2, r0
    20e4:	4628      	mov	r0, r5
    20e6:	f009 fe65 	bl	bdb4 <Svc::DeframerComponentBase::set_comOut_OutputPort(long, Fw::InputComPort*)>
    LedBlinker::deframer.set_framedDeallocate_OutputPort(
    20ea:	2100      	movs	r1, #0
    20ec:	4638      	mov	r0, r7
    20ee:	f005 fee9 	bl	7ec4 <Svc::BufferManagerComponentBase::get_bufferSendIn_InputPort(long)>
    20f2:	2100      	movs	r1, #0
    20f4:	4602      	mov	r2, r0
    20f6:	4628      	mov	r0, r5
  }
    20f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LedBlinker::deframer.set_framedDeallocate_OutputPort(
    20fc:	f009 be70 	b.w	bde0 <Svc::DeframerComponentBase::set_framedDeallocate_OutputPort(long, Fw::InputBufferSendPort*)>
    2100:	200068e0 	.word	0x200068e0

00002104 <LedBlinker::regCommands()>:
  void regCommands() {
    2104:	b508      	push	{r3, lr}
    LedBlinker::cmdDisp.regCommands();
    2106:	4808      	ldr	r0, [pc, #32]	; (2128 <LedBlinker::regCommands()+0x24>)
    2108:	f007 f9fc 	bl	9504 <Svc::CommandDispatcherComponentBase::regCommands()>
    LedBlinker::eventLogger.regCommands();
    210c:	4807      	ldr	r0, [pc, #28]	; (212c <LedBlinker::regCommands()+0x28>)
    210e:	f003 ffbf 	bl	6090 <Svc::ActiveLoggerComponentBase::regCommands()>
    LedBlinker::led.regCommands();
    2112:	4807      	ldr	r0, [pc, #28]	; (2130 <LedBlinker::regCommands()+0x2c>)
    2114:	f001 fbca 	bl	38ac <Components::LedComponentBase::regCommands()>
    LedBlinker::systemResources.regCommands();
    2118:	4806      	ldr	r0, [pc, #24]	; (2134 <LedBlinker::regCommands()+0x30>)
    211a:	f00d f839 	bl	f190 <Svc::SystemResourcesComponentBase::regCommands()>
    LedBlinker::timeHandler.regCommands();
    211e:	4806      	ldr	r0, [pc, #24]	; (2138 <LedBlinker::regCommands()+0x34>)
  }
    2120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LedBlinker::timeHandler.regCommands();
    2124:	f002 bf66 	b.w	4ff4 <Arduino::ArduinoTimeComponentBase::regCommands()>
    2128:	20008970 	.word	0x20008970
    212c:	20006da0 	.word	0x20006da0
    2130:	20008010 	.word	0x20008010
    2134:	20007a58 	.word	0x20007a58
    2138:	2000c288 	.word	0x2000c288

0000213c <LedBlinker::startTasks(LedBlinker::TopologyState const&)>:
  void startTasks(const TopologyState& state) {
    213c:	b510      	push	{r4, lr}
    LedBlinker::cmdDisp.start(
    213e:	2400      	movs	r4, #0
  void startTasks(const TopologyState& state) {
    2140:	b082      	sub	sp, #8
    LedBlinker::cmdDisp.start(
    2142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2146:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    214a:	9400      	str	r4, [sp, #0]
    LedBlinker::eventLogger.start(
    214c:	2401      	movs	r4, #1
    LedBlinker::cmdDisp.start(
    214e:	2165      	movs	r1, #101	; 0x65
    2150:	480b      	ldr	r0, [pc, #44]	; (2180 <LedBlinker::startTasks(LedBlinker::TopologyState const&)+0x44>)
    2152:	f00f f975 	bl	11440 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)>
    LedBlinker::eventLogger.start(
    2156:	9400      	str	r4, [sp, #0]
    2158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    215c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2160:	2162      	movs	r1, #98	; 0x62
    2162:	4808      	ldr	r0, [pc, #32]	; (2184 <LedBlinker::startTasks(LedBlinker::TopologyState const&)+0x48>)
    LedBlinker::tlmSend.start(
    2164:	2402      	movs	r4, #2
    LedBlinker::eventLogger.start(
    2166:	f00f f96b 	bl	11440 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)>
    LedBlinker::tlmSend.start(
    216a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    216e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2172:	2161      	movs	r1, #97	; 0x61
    2174:	4804      	ldr	r0, [pc, #16]	; (2188 <LedBlinker::startTasks(LedBlinker::TopologyState const&)+0x4c>)
    2176:	9400      	str	r4, [sp, #0]
    2178:	f00f f962 	bl	11440 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)>
  }
    217c:	b002      	add	sp, #8
    217e:	bd10      	pop	{r4, pc}
    2180:	20008970 	.word	0x20008970
    2184:	20006da0 	.word	0x20006da0
    2188:	20009c00 	.word	0x20009c00

0000218c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE>:
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
    218c:	b538      	push	{r3, r4, r5, lr}
  Svc::BufferManager bufferManager(FW_OPTIONAL_NAME("bufferManager"));
    218e:	4d51      	ldr	r5, [pc, #324]	; (22d4 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x148>)
    2190:	4c51      	ldr	r4, [pc, #324]	; (22d8 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x14c>)
    2192:	4952      	ldr	r1, [pc, #328]	; (22dc <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x150>)
    2194:	4628      	mov	r0, r5
    2196:	f005 fbfd 	bl	7994 <Svc::BufferManagerComponentImpl::BufferManagerComponentImpl(char const*)>
    219a:	4628      	mov	r0, r5
  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));
    219c:	4d50      	ldr	r5, [pc, #320]	; (22e0 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x154>)
  Svc::BufferManager bufferManager(FW_OPTIONAL_NAME("bufferManager"));
    219e:	4622      	mov	r2, r4
    21a0:	4950      	ldr	r1, [pc, #320]	; (22e4 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x158>)
    21a2:	f018 f8ed 	bl	1a380 <__aeabi_atexit>
  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));
    21a6:	4950      	ldr	r1, [pc, #320]	; (22e8 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x15c>)
    21a8:	4628      	mov	r0, r5
    21aa:	f006 fc4d 	bl	8a48 <Svc::CommandDispatcherImpl::CommandDispatcherImpl(char const*)>
    21ae:	4628      	mov	r0, r5
  Arduino::StreamDriver commDriver(FW_OPTIONAL_NAME("commDriver"));
    21b0:	4d4e      	ldr	r5, [pc, #312]	; (22ec <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x160>)
  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));
    21b2:	4622      	mov	r2, r4
    21b4:	494e      	ldr	r1, [pc, #312]	; (22f0 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x164>)
    21b6:	f018 f8e3 	bl	1a380 <__aeabi_atexit>
  Arduino::StreamDriver commDriver(FW_OPTIONAL_NAME("commDriver"));
    21ba:	494e      	ldr	r1, [pc, #312]	; (22f4 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x168>)
    21bc:	4628      	mov	r0, r5
    21be:	f000 fc8d 	bl	2adc <Arduino::StreamDriver::StreamDriver(char const*)>
    21c2:	4628      	mov	r0, r5
  Svc::Deframer deframer(FW_OPTIONAL_NAME("deframer"));
    21c4:	4d4c      	ldr	r5, [pc, #304]	; (22f8 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x16c>)
  Arduino::StreamDriver commDriver(FW_OPTIONAL_NAME("commDriver"));
    21c6:	4622      	mov	r2, r4
    21c8:	494c      	ldr	r1, [pc, #304]	; (22fc <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x170>)
    21ca:	f018 f8d9 	bl	1a380 <__aeabi_atexit>
  Svc::Deframer deframer(FW_OPTIONAL_NAME("deframer"));
    21ce:	494c      	ldr	r1, [pc, #304]	; (2300 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x174>)
    21d0:	4628      	mov	r0, r5
    21d2:	f009 fa73 	bl	b6bc <Svc::Deframer::Deframer(char const*)>
    21d6:	4628      	mov	r0, r5
  Svc::ActiveLogger eventLogger(FW_OPTIONAL_NAME("eventLogger"));
    21d8:	4d4a      	ldr	r5, [pc, #296]	; (2304 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x178>)
  Svc::Deframer deframer(FW_OPTIONAL_NAME("deframer"));
    21da:	4622      	mov	r2, r4
    21dc:	494a      	ldr	r1, [pc, #296]	; (2308 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x17c>)
    21de:	f018 f8cf 	bl	1a380 <__aeabi_atexit>
  Svc::ActiveLogger eventLogger(FW_OPTIONAL_NAME("eventLogger"));
    21e2:	494a      	ldr	r1, [pc, #296]	; (230c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x180>)
    21e4:	4628      	mov	r0, r5
    21e6:	f003 fbff 	bl	59e8 <Svc::ActiveLoggerImpl::ActiveLoggerImpl(char const*)>
    21ea:	4628      	mov	r0, r5
  Baremetal::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));
    21ec:	4d48      	ldr	r5, [pc, #288]	; (2310 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x184>)
  Svc::ActiveLogger eventLogger(FW_OPTIONAL_NAME("eventLogger"));
    21ee:	4622      	mov	r2, r4
    21f0:	4948      	ldr	r1, [pc, #288]	; (2314 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x188>)
    21f2:	f018 f8c5 	bl	1a380 <__aeabi_atexit>
  Baremetal::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));
    21f6:	4948      	ldr	r1, [pc, #288]	; (2318 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x18c>)
    21f8:	4628      	mov	r0, r5
    21fa:	f003 fa05 	bl	5608 <Baremetal::FatalHandler::FatalHandler(char const*)>
    21fe:	4628      	mov	r0, r5
  Svc::Framer framer(FW_OPTIONAL_NAME("framer"));
    2200:	4d46      	ldr	r5, [pc, #280]	; (231c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x190>)
  Baremetal::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));
    2202:	4622      	mov	r2, r4
    2204:	4946      	ldr	r1, [pc, #280]	; (2320 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x194>)
    2206:	f018 f8bb 	bl	1a380 <__aeabi_atexit>
  Svc::Framer framer(FW_OPTIONAL_NAME("framer"));
    220a:	4946      	ldr	r1, [pc, #280]	; (2324 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x198>)
    220c:	4628      	mov	r0, r5
    220e:	f00a f843 	bl	c298 <Svc::Framer::Framer(char const*)>
    2212:	4628      	mov	r0, r5
  Arduino::GpioDriver gpioDriver(FW_OPTIONAL_NAME("gpioDriver"));
    2214:	4d44      	ldr	r5, [pc, #272]	; (2328 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x19c>)
  Svc::Framer framer(FW_OPTIONAL_NAME("framer"));
    2216:	4622      	mov	r2, r4
    2218:	4944      	ldr	r1, [pc, #272]	; (232c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1a0>)
    221a:	f018 f8b1 	bl	1a380 <__aeabi_atexit>
  Arduino::GpioDriver gpioDriver(FW_OPTIONAL_NAME("gpioDriver"));
    221e:	4944      	ldr	r1, [pc, #272]	; (2330 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1a4>)
    2220:	4628      	mov	r0, r5
    2222:	f001 ffab 	bl	417c <Arduino::GpioDriver::GpioDriver(char const*)>
    2226:	4628      	mov	r0, r5
  Components::Led led(FW_OPTIONAL_NAME("led"));
    2228:	4d42      	ldr	r5, [pc, #264]	; (2334 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1a8>)
  Arduino::GpioDriver gpioDriver(FW_OPTIONAL_NAME("gpioDriver"));
    222a:	4622      	mov	r2, r4
    222c:	4942      	ldr	r1, [pc, #264]	; (2338 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1ac>)
    222e:	f018 f8a7 	bl	1a380 <__aeabi_atexit>
  Components::Led led(FW_OPTIONAL_NAME("led"));
    2232:	4942      	ldr	r1, [pc, #264]	; (233c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1b0>)
    2234:	4628      	mov	r0, r5
    2236:	f001 f851 	bl	32dc <Components::Led::Led(char const*)>
    223a:	4628      	mov	r0, r5
  Arduino::HardwareRateDriver rateDriver(FW_OPTIONAL_NAME("rateDriver"));
    223c:	4d40      	ldr	r5, [pc, #256]	; (2340 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1b4>)
  Components::Led led(FW_OPTIONAL_NAME("led"));
    223e:	4622      	mov	r2, r4
    2240:	4940      	ldr	r1, [pc, #256]	; (2344 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1b8>)
    2242:	f018 f89d 	bl	1a380 <__aeabi_atexit>
  Arduino::HardwareRateDriver rateDriver(FW_OPTIONAL_NAME("rateDriver"));
    2246:	4940      	ldr	r1, [pc, #256]	; (2348 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1bc>)
    2248:	4628      	mov	r0, r5
    224a:	f002 f8e3 	bl	4414 <Arduino::HardwareRateDriver::HardwareRateDriver(char const*)>
    224e:	4628      	mov	r0, r5
  Svc::PassiveRateGroup rateGroup1(FW_OPTIONAL_NAME("rateGroup1"));
    2250:	4d3e      	ldr	r5, [pc, #248]	; (234c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1c0>)
  Arduino::HardwareRateDriver rateDriver(FW_OPTIONAL_NAME("rateDriver"));
    2252:	4622      	mov	r2, r4
    2254:	493e      	ldr	r1, [pc, #248]	; (2350 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1c4>)
    2256:	f018 f893 	bl	1a380 <__aeabi_atexit>
  Svc::PassiveRateGroup rateGroup1(FW_OPTIONAL_NAME("rateGroup1"));
    225a:	493e      	ldr	r1, [pc, #248]	; (2354 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1c8>)
    225c:	4628      	mov	r0, r5
    225e:	f00b fdf7 	bl	de50 <Svc::PassiveRateGroup::PassiveRateGroup(char const*)>
    2262:	4628      	mov	r0, r5
  Svc::RateGroupDriver rateGroupDriver(FW_OPTIONAL_NAME("rateGroupDriver"));
    2264:	4d3c      	ldr	r5, [pc, #240]	; (2358 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1cc>)
  Svc::PassiveRateGroup rateGroup1(FW_OPTIONAL_NAME("rateGroup1"));
    2266:	4622      	mov	r2, r4
    2268:	493c      	ldr	r1, [pc, #240]	; (235c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1d0>)
    226a:	f018 f889 	bl	1a380 <__aeabi_atexit>
  Svc::RateGroupDriver rateGroupDriver(FW_OPTIONAL_NAME("rateGroupDriver"));
    226e:	493c      	ldr	r1, [pc, #240]	; (2360 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1d4>)
    2270:	4628      	mov	r0, r5
    2272:	f00c f957 	bl	e524 <Svc::RateGroupDriver::RateGroupDriver(char const*)>
    2276:	4628      	mov	r0, r5
  Svc::SystemResources systemResources(FW_OPTIONAL_NAME("systemResources"));
    2278:	4d3a      	ldr	r5, [pc, #232]	; (2364 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1d8>)
  Svc::RateGroupDriver rateGroupDriver(FW_OPTIONAL_NAME("rateGroupDriver"));
    227a:	4622      	mov	r2, r4
    227c:	493a      	ldr	r1, [pc, #232]	; (2368 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1dc>)
    227e:	f018 f87f 	bl	1a380 <__aeabi_atexit>
  Svc::SystemResources systemResources(FW_OPTIONAL_NAME("systemResources"));
    2282:	493a      	ldr	r1, [pc, #232]	; (236c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1e0>)
    2284:	4628      	mov	r0, r5
    2286:	f00c fc07 	bl	ea98 <Svc::SystemResources::SystemResources(char const*)>
    228a:	4628      	mov	r0, r5
  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));
    228c:	4d38      	ldr	r5, [pc, #224]	; (2370 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1e4>)
  Svc::SystemResources systemResources(FW_OPTIONAL_NAME("systemResources"));
    228e:	4622      	mov	r2, r4
    2290:	4938      	ldr	r1, [pc, #224]	; (2374 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1e8>)
    2292:	f018 f875 	bl	1a380 <__aeabi_atexit>
  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));
    2296:	4938      	ldr	r1, [pc, #224]	; (2378 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1ec>)
    2298:	4628      	mov	r0, r5
    229a:	f00b fd29 	bl	dcf0 <Svc::ConsoleTextLoggerImpl::ConsoleTextLoggerImpl(char const*)>
    229e:	4628      	mov	r0, r5
  Arduino::ArduinoTime timeHandler(FW_OPTIONAL_NAME("timeHandler"));
    22a0:	4d36      	ldr	r5, [pc, #216]	; (237c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1f0>)
  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));
    22a2:	4622      	mov	r2, r4
    22a4:	4936      	ldr	r1, [pc, #216]	; (2380 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1f4>)
    22a6:	f018 f86b 	bl	1a380 <__aeabi_atexit>
  Arduino::ArduinoTime timeHandler(FW_OPTIONAL_NAME("timeHandler"));
    22aa:	4936      	ldr	r1, [pc, #216]	; (2384 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1f8>)
    22ac:	4628      	mov	r0, r5
    22ae:	f002 fc13 	bl	4ad8 <Arduino::ArduinoTime::ArduinoTime(char const*)>
    22b2:	4628      	mov	r0, r5
  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));
    22b4:	4d34      	ldr	r5, [pc, #208]	; (2388 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x1fc>)
  Arduino::ArduinoTime timeHandler(FW_OPTIONAL_NAME("timeHandler"));
    22b6:	4622      	mov	r2, r4
    22b8:	4934      	ldr	r1, [pc, #208]	; (238c <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x200>)
    22ba:	f018 f861 	bl	1a380 <__aeabi_atexit>
  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));
    22be:	4934      	ldr	r1, [pc, #208]	; (2390 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x204>)
    22c0:	4628      	mov	r0, r5
    22c2:	f00e f857 	bl	10374 <Svc::TlmChan::TlmChan(char const*)>
    22c6:	4622      	mov	r2, r4
    22c8:	4628      	mov	r0, r5
    22ca:	4932      	ldr	r1, [pc, #200]	; (2394 <_GLOBAL__sub_I__ZN10LedBlinker13bufferManagerE+0x208>)
}
    22cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));
    22d0:	f018 b856 	b.w	1a380 <__aeabi_atexit>
    22d4:	20007648 	.word	0x20007648
    22d8:	20005a58 	.word	0x20005a58
    22dc:	200003cc 	.word	0x200003cc
    22e0:	20008970 	.word	0x20008970
    22e4:	00007a5d 	.word	0x00007a5d
    22e8:	200003dc 	.word	0x200003dc
    22ec:	200068e0 	.word	0x200068e0
    22f0:	000087c1 	.word	0x000087c1
    22f4:	200003e4 	.word	0x200003e4
    22f8:	2000b2e8 	.word	0x2000b2e8
    22fc:	000029f5 	.word	0x000029f5
    2300:	200003f0 	.word	0x200003f0
    2304:	20006da0 	.word	0x20006da0
    2308:	0000b629 	.word	0x0000b629
    230c:	200003fc 	.word	0x200003fc
    2310:	2000c658 	.word	0x2000c658
    2314:	00005a79 	.word	0x00005a79
    2318:	20000408 	.word	0x20000408
    231c:	200085a0 	.word	0x200085a0
    2320:	000055c9 	.word	0x000055c9
    2324:	20000418 	.word	0x20000418
    2328:	2000ba4c 	.word	0x2000ba4c
    232c:	0000c189 	.word	0x0000c189
    2330:	20000420 	.word	0x20000420
    2334:	20008010 	.word	0x20008010
    2338:	000040e1 	.word	0x000040e1
    233c:	2000042c 	.word	0x2000042c
    2340:	20006c38 	.word	0x20006c38
    2344:	00003149 	.word	0x00003149
    2348:	20000430 	.word	0x20000430
    234c:	2000bb94 	.word	0x2000bb94
    2350:	00004449 	.word	0x00004449
    2354:	2000043c 	.word	0x2000043c
    2358:	2000c72c 	.word	0x2000c72c
    235c:	0000de1d 	.word	0x0000de1d
    2360:	20000448 	.word	0x20000448
    2364:	20007a58 	.word	0x20007a58
    2368:	0000e481 	.word	0x0000e481
    236c:	20000458 	.word	0x20000458
    2370:	2000c1b4 	.word	0x2000c1b4
    2374:	0000ea1d 	.word	0x0000ea1d
    2378:	20000468 	.word	0x20000468
    237c:	2000c288 	.word	0x2000c288
    2380:	0000dc59 	.word	0x0000dc59
    2384:	20000474 	.word	0x20000474
    2388:	20009c00 	.word	0x20009c00
    238c:	00004a1d 	.word	0x00004a1d
    2390:	20000480 	.word	0x20000480
    2394:	00010421 	.word	0x00010421

00002398 <Os::Stub::FileSystem::StubFileSystem::_removeFile(char const*)>:
namespace Stub {
namespace FileSystem {

StubFileSystem::Status StubFileSystem::_removeDirectory(const char* path) {
    return Status::NOT_SUPPORTED;
}
    2398:	200f      	movs	r0, #15
    239a:	4770      	bx	lr

0000239c <Os::Stub::FileSystem::StubFileSystem::_rename(char const*, char const*)>:
    return Status::NOT_SUPPORTED;
}

StubFileSystem::Status StubFileSystem::_rename(const char* originPath, const char* destPath) {
    return Status::NOT_SUPPORTED;
}
    239c:	200f      	movs	r0, #15
    239e:	4770      	bx	lr

000023a0 <Os::Stub::FileSystem::StubFileSystem::_getWorkingDirectory(char*, unsigned long)>:

StubFileSystem::Status StubFileSystem::_getWorkingDirectory(char* path, FwSizeType bufferSize) {
    return Status::NOT_SUPPORTED;
}
    23a0:	200f      	movs	r0, #15
    23a2:	4770      	bx	lr

000023a4 <Os::Stub::FileSystem::StubFileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)>:
    return Status::NOT_SUPPORTED;
}

StubFileSystem::Status StubFileSystem::_getFreeSpace(const char* path, FwSizeType& totalBytes, FwSizeType& freeBytes) {
    return Status::NOT_SUPPORTED;
}
    23a4:	200f      	movs	r0, #15
    23a6:	4770      	bx	lr

000023a8 <Os::Stub::FileSystem::StubFileSystem::getHandle()>:

FileSystemHandle* StubFileSystem::getHandle() {
    return &this->m_handle;
}
    23a8:	3004      	adds	r0, #4
    23aa:	4770      	bx	lr

000023ac <Os::Stub::FileSystem::StubFileSystem::~StubFileSystem()>:

    //! \brief destructor
    ~StubFileSystem() override = default;
    23ac:	4770      	bx	lr
    23ae:	bf00      	nop

000023b0 <Os::Stub::FileSystem::StubFileSystem::~StubFileSystem()>:
    23b0:	b510      	push	{r4, lr}
    23b2:	4604      	mov	r4, r0
    23b4:	2108      	movs	r1, #8
    23b6:	f016 fc8b 	bl	18cd0 <operator delete(void*, unsigned int)>
    23ba:	4620      	mov	r0, r4
    23bc:	bd10      	pop	{r4, pc}
    23be:	bf00      	nop

000023c0 <Os::Generic::PriorityQueue::getHandle()>:
    return this->m_handle.m_highMark;
}

QueueHandle* PriorityQueue::getHandle() {
    return &this->m_handle;
}
    23c0:	3008      	adds	r0, #8
    23c2:	4770      	bx	lr

000023c4 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)>:
QueueInterface::Status PriorityQueue::create(const Fw::StringBase& name, FwSizeType depth, FwSizeType messageSize) {
    23c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    23c8:	4699      	mov	r9, r3
    FW_ASSERT(this->m_handle.m_indices == nullptr);
    23ca:	69c3      	ldr	r3, [r0, #28]
QueueInterface::Status PriorityQueue::create(const Fw::StringBase& name, FwSizeType depth, FwSizeType messageSize) {
    23cc:	4605      	mov	r5, r0
    23ce:	4614      	mov	r4, r2
    FW_ASSERT(this->m_handle.m_indices == nullptr);
    23d0:	b11b      	cbz	r3, 23da <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x16>
    23d2:	2131      	movs	r1, #49	; 0x31
    23d4:	4833      	ldr	r0, [pc, #204]	; (24a4 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xe0>)
    23d6:	f7ff f919 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_handle.m_sizes == nullptr);
    23da:	6a2b      	ldr	r3, [r5, #32]
    23dc:	b11b      	cbz	r3, 23e6 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x22>
    23de:	2132      	movs	r1, #50	; 0x32
    23e0:	4830      	ldr	r0, [pc, #192]	; (24a4 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xe0>)
    23e2:	f7ff f913 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_handle.m_data == nullptr);
    23e6:	69ab      	ldr	r3, [r5, #24]
    23e8:	b11b      	cbz	r3, 23f2 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x2e>
    23ea:	2133      	movs	r1, #51	; 0x33
    23ec:	482d      	ldr	r0, [pc, #180]	; (24a4 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xe0>)
    23ee:	f7ff f90d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FwSizeType* indices = new (std::nothrow) FwSizeType[depth];
    23f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    23f6:	492c      	ldr	r1, [pc, #176]	; (24a8 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xe4>)
    23f8:	429c      	cmp	r4, r3
    23fa:	bf34      	ite	cc
    23fc:	00a7      	lslcc	r7, r4, #2
    23fe:	f04f 37ff 	movcs.w	r7, #4294967295	; 0xffffffff
    2402:	4638      	mov	r0, r7
    2404:	f015 fff6 	bl	183f4 <operator new[](unsigned int, std::nothrow_t const&)>
    if (indices == nullptr) {
    2408:	4606      	mov	r6, r0
    240a:	2800      	cmp	r0, #0
    240c:	d03a      	beq.n	2484 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xc0>
    FwSizeType* sizes = new (std::nothrow) FwSizeType[depth];
    240e:	4638      	mov	r0, r7
    2410:	4925      	ldr	r1, [pc, #148]	; (24a8 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xe4>)
    2412:	f015 ffef 	bl	183f4 <operator new[](unsigned int, std::nothrow_t const&)>
    if (sizes == nullptr) {
    2416:	4607      	mov	r7, r0
    2418:	2800      	cmp	r0, #0
    241a:	d03d      	beq.n	2498 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xd4>
    U8* data = new (std::nothrow) U8[depth * messageSize];
    241c:	4922      	ldr	r1, [pc, #136]	; (24a8 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xe4>)
    241e:	fb09 f004 	mul.w	r0, r9, r4
    2422:	f015 ffe7 	bl	183f4 <operator new[](unsigned int, std::nothrow_t const&)>
    if (data == nullptr) {
    2426:	4680      	mov	r8, r0
    2428:	b370      	cbz	r0, 2488 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xc4>
    bool created = this->m_handle.m_heap.create(depth);
    242a:	4621      	mov	r1, r4
    242c:	f105 0008 	add.w	r0, r5, #8
    2430:	f010 f912 	bl	12658 <Types::MaxHeap::create(unsigned long)>
    if (not created) {
    2434:	b1d0      	cbz	r0, 246c <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xa8>
    for (FwSizeType i = 0; i < depth; i++) {
    2436:	b15c      	cbz	r4, 2450 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x8c>
    2438:	1f32      	subs	r2, r6, #4
    243a:	2100      	movs	r1, #0
        indices[i] = i;
    243c:	f842 1f04 	str.w	r1, [r2, #4]!
    for (FwSizeType i = 0; i < depth; i++) {
    2440:	3101      	adds	r1, #1
    2442:	428c      	cmp	r4, r1
    2444:	d1fa      	bne.n	243c <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x78>
        sizes[i] = 0;
    2446:	00a2      	lsls	r2, r4, #2
    2448:	2100      	movs	r1, #0
    244a:	4638      	mov	r0, r7
    244c:	f022 fbce 	bl	24bec <memset>
    this->m_handle.m_startIndex = 0;
    2450:	2300      	movs	r3, #0
    this->m_handle.m_maxSize = messageSize;
    2452:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    this->m_handle.m_indices = indices;
    2456:	61ee      	str	r6, [r5, #28]
    return QueueInterface::Status::OP_OK;
    2458:	4618      	mov	r0, r3
    this->m_handle.m_data = data;
    245a:	f8c5 8018 	str.w	r8, [r5, #24]
    this->m_handle.m_highMark = 0;
    245e:	636b      	str	r3, [r5, #52]	; 0x34
    this->m_handle.m_depth = depth;
    2460:	e9c5 7408 	strd	r7, r4, [r5, #32]
    this->m_handle.m_stopIndex = 0;
    2464:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
}
    2468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        delete[] indices;
    246c:	4630      	mov	r0, r6
    246e:	f016 fc2d 	bl	18ccc <operator delete[](void*)>
        delete[] sizes;
    2472:	4638      	mov	r0, r7
    2474:	f016 fc2a 	bl	18ccc <operator delete[](void*)>
        delete[] data;
    2478:	4640      	mov	r0, r8
    247a:	f016 fc27 	bl	18ccc <operator delete[](void*)>
        return QueueInterface::Status::UNKNOWN_ERROR;
    247e:	200a      	movs	r0, #10
}
    2480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return QueueInterface::Status::UNKNOWN_ERROR;
    2484:	200a      	movs	r0, #10
    2486:	e7ef      	b.n	2468 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xa4>
        delete[] indices;
    2488:	4630      	mov	r0, r6
    248a:	f016 fc1f 	bl	18ccc <operator delete[](void*)>
        delete[] sizes;
    248e:	4638      	mov	r0, r7
    2490:	f016 fc1c 	bl	18ccc <operator delete[](void*)>
        return QueueInterface::Status::UNKNOWN_ERROR;
    2494:	200a      	movs	r0, #10
    2496:	e7e7      	b.n	2468 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xa4>
        delete[] indices;
    2498:	4630      	mov	r0, r6
    249a:	f016 fc17 	bl	18ccc <operator delete[](void*)>
        return QueueInterface::Status::UNKNOWN_ERROR;
    249e:	200a      	movs	r0, #10
    24a0:	e7e2      	b.n	2468 <Os::Generic::PriorityQueue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xa4>
    24a2:	bf00      	nop
    24a4:	20000e08 	.word	0x20000e08
    24a8:	2000299c 	.word	0x2000299c

000024ac <Os::Generic::PriorityQueue::getMessageHighWaterMark() const>:
FwSizeType PriorityQueue::getMessageHighWaterMark() const {
    24ac:	b510      	push	{r4, lr}
    24ae:	4604      	mov	r4, r0
    24b0:	b082      	sub	sp, #8
    Os::ScopeLock lock(const_cast<Mutex&>(this->m_handle.m_data_lock));
    24b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
    24b6:	a801      	add	r0, sp, #4
    24b8:	f011 fa86 	bl	139c8 <Os::ScopeLock::ScopeLock(Os::Mutex&)>
    return this->m_handle.m_highMark;
    24bc:	6b64      	ldr	r4, [r4, #52]	; 0x34
}
    24be:	a801      	add	r0, sp, #4
    24c0:	f011 fada 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
    24c4:	4620      	mov	r0, r4
    24c6:	b002      	add	sp, #8
    24c8:	bd10      	pop	{r4, pc}
    24ca:	bf00      	nop

000024cc <Os::Generic::PriorityQueue::getMessagesAvailable() const>:
    return this->m_handle.m_heap.getSize();
    24cc:	3008      	adds	r0, #8
    24ce:	f010 b977 	b.w	127c0 <Types::MaxHeap::getSize() const>
    24d2:	bf00      	nop

000024d4 <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)>:
void PriorityQueueHandle ::store_data(FwSizeType index, const U8* data, FwSizeType size) {
    24d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24d6:	461e      	mov	r6, r3
    FW_ASSERT(size <= this->m_maxSize);
    24d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
void PriorityQueueHandle ::store_data(FwSizeType index, const U8* data, FwSizeType size) {
    24da:	4604      	mov	r4, r0
    24dc:	460d      	mov	r5, r1
    FW_ASSERT(size <= this->m_maxSize);
    24de:	42b3      	cmp	r3, r6
void PriorityQueueHandle ::store_data(FwSizeType index, const U8* data, FwSizeType size) {
    24e0:	4617      	mov	r7, r2
    FW_ASSERT(size <= this->m_maxSize);
    24e2:	d30e      	bcc.n	2502 <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)+0x2e>
    FW_ASSERT(index < this->m_depth);
    24e4:	69e3      	ldr	r3, [r4, #28]
    24e6:	42ab      	cmp	r3, r5
    24e8:	d912      	bls.n	2510 <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)+0x3c>
    ::memcpy(this->m_data + offset, data, size);
    24ea:	6923      	ldr	r3, [r4, #16]
    24ec:	4639      	mov	r1, r7
    FwSizeType offset = this->m_maxSize * index;
    24ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ::memcpy(this->m_data + offset, data, size);
    24f0:	4632      	mov	r2, r6
    24f2:	fb00 3005 	mla	r0, r0, r5, r3
    24f6:	f016 fb4f 	bl	18b98 <memcpy>
    this->m_sizes[index] = size;
    24fa:	69a3      	ldr	r3, [r4, #24]
    24fc:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
}
    2500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(size <= this->m_maxSize);
    2502:	211a      	movs	r1, #26
    2504:	4805      	ldr	r0, [pc, #20]	; (251c <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)+0x48>)
    2506:	f7ff f881 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(index < this->m_depth);
    250a:	69e3      	ldr	r3, [r4, #28]
    250c:	42ab      	cmp	r3, r5
    250e:	d8ec      	bhi.n	24ea <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)+0x16>
    2510:	211b      	movs	r1, #27
    2512:	4802      	ldr	r0, [pc, #8]	; (251c <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)+0x48>)
    2514:	f7ff f87a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    2518:	e7e7      	b.n	24ea <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)+0x16>
    251a:	bf00      	nop
    251c:	20000e08 	.word	0x20000e08

00002520 <Os::Generic::PriorityQueue::~PriorityQueue()>:
PriorityQueue::~PriorityQueue() {
    2520:	b538      	push	{r3, r4, r5, lr}
    2522:	4604      	mov	r4, r0
    2524:	4b10      	ldr	r3, [pc, #64]	; (2568 <Os::Generic::PriorityQueue::~PriorityQueue()+0x48>)
    delete[] this->m_handle.m_data;
    2526:	6980      	ldr	r0, [r0, #24]
PriorityQueue::~PriorityQueue() {
    2528:	6023      	str	r3, [r4, #0]
    delete[] this->m_handle.m_data;
    252a:	b108      	cbz	r0, 2530 <Os::Generic::PriorityQueue::~PriorityQueue()+0x10>
    252c:	f016 fbce 	bl	18ccc <operator delete[](void*)>
    delete[] this->m_handle.m_indices;
    2530:	69e0      	ldr	r0, [r4, #28]
    2532:	b108      	cbz	r0, 2538 <Os::Generic::PriorityQueue::~PriorityQueue()+0x18>
    2534:	f016 fbca 	bl	18ccc <operator delete[](void*)>
    delete[] this->m_handle.m_sizes;
    2538:	6a20      	ldr	r0, [r4, #32]
    253a:	b108      	cbz	r0, 2540 <Os::Generic::PriorityQueue::~PriorityQueue()+0x20>
    253c:	f016 fbc6 	bl	18ccc <operator delete[](void*)>
    2540:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    2544:	f104 0508 	add.w	r5, r4, #8
    2548:	f011 fb66 	bl	13c18 <Os::ConditionVariable::~ConditionVariable()>
    254c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    2550:	f011 fb62 	bl	13c18 <Os::ConditionVariable::~ConditionVariable()>
    2554:	f104 0038 	add.w	r0, r4, #56	; 0x38
    2558:	f010 ff28 	bl	133ac <Os::Mutex::~Mutex()>
    255c:	4628      	mov	r0, r5
    255e:	f010 f873 	bl	12648 <Types::MaxHeap::~MaxHeap()>
}
    2562:	4620      	mov	r0, r4
    2564:	bd38      	pop	{r3, r4, r5, pc}
    2566:	bf00      	nop
    2568:	20003630 	.word	0x20003630

0000256c <Os::Generic::PriorityQueue::~PriorityQueue()>:
PriorityQueue::~PriorityQueue() {
    256c:	b510      	push	{r4, lr}
    256e:	4604      	mov	r4, r0
}
    2570:	f7ff ffd6 	bl	2520 <Os::Generic::PriorityQueue::~PriorityQueue()>
    2574:	f44f 7190 	mov.w	r1, #288	; 0x120
    2578:	4620      	mov	r0, r4
    257a:	f016 fba9 	bl	18cd0 <operator delete(void*, unsigned int)>
    257e:	4620      	mov	r0, r4
    2580:	bd10      	pop	{r4, pc}
    2582:	bf00      	nop

00002584 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)>:
                                           QueueInterface::BlockingType blockType) {
    2584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2588:	469b      	mov	fp, r3
    if (size > this->m_handle.m_maxSize) {
    258a:	6b03      	ldr	r3, [r0, #48]	; 0x30
                                           QueueInterface::BlockingType blockType) {
    258c:	b083      	sub	sp, #12
    if (size > this->m_handle.m_maxSize) {
    258e:	4293      	cmp	r3, r2
                                           QueueInterface::BlockingType blockType) {
    2590:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
    if (size > this->m_handle.m_maxSize) {
    2594:	d359      	bcc.n	264a <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xc6>
        Os::ScopeLock lock(this->m_handle.m_data_lock);
    2596:	f100 0738 	add.w	r7, r0, #56	; 0x38
        if (this->m_handle.m_heap.isFull() and blockType == BlockingType::NONBLOCKING) {
    259a:	f100 0608 	add.w	r6, r0, #8
    259e:	4604      	mov	r4, r0
    25a0:	468a      	mov	sl, r1
        Os::ScopeLock lock(this->m_handle.m_data_lock);
    25a2:	a801      	add	r0, sp, #4
    25a4:	4639      	mov	r1, r7
    25a6:	4691      	mov	r9, r2
    25a8:	f011 fa0e 	bl	139c8 <Os::ScopeLock::ScopeLock(Os::Mutex&)>
        if (this->m_handle.m_heap.isFull() and blockType == BlockingType::NONBLOCKING) {
    25ac:	4630      	mov	r0, r6
    25ae:	f010 f8f9 	bl	127a4 <Types::MaxHeap::isFull()>
    25b2:	2d01      	cmp	r5, #1
    25b4:	d101      	bne.n	25ba <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x36>
    25b6:	2800      	cmp	r0, #0
    25b8:	d15b      	bne.n	2672 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xee>
            this->m_handle.m_full.wait(this->m_handle.m_data_lock);
    25ba:	f104 0890 	add.w	r8, r4, #144	; 0x90
    25be:	e001      	b.n	25c4 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x40>
    25c0:	f011 fb06 	bl	13bd0 <Os::ConditionVariable::wait(Os::Mutex&)>
        while (this->m_handle.m_heap.isFull()) {
    25c4:	4630      	mov	r0, r6
    25c6:	f010 f8ed 	bl	127a4 <Types::MaxHeap::isFull()>
    25ca:	4605      	mov	r5, r0
            this->m_handle.m_full.wait(this->m_handle.m_data_lock);
    25cc:	4639      	mov	r1, r7
    25ce:	4640      	mov	r0, r8
        while (this->m_handle.m_heap.isFull()) {
    25d0:	2d00      	cmp	r5, #0
    25d2:	d1f5      	bne.n	25c0 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x3c>
    FwSizeType index = this->m_indices[this->m_startIndex % this->m_depth];
    25d4:	69e2      	ldr	r2, [r4, #28]
        FW_ASSERT(this->m_handle.m_heap.push(priority, index));
    25d6:	4659      	mov	r1, fp
    25d8:	4630      	mov	r0, r6
    FwSizeType index = this->m_indices[this->m_startIndex % this->m_depth];
    25da:	e9d4 7309 	ldrd	r7, r3, [r4, #36]	; 0x24
    25de:	fbb3 fcf7 	udiv	ip, r3, r7
    this->m_startIndex = (this->m_startIndex + 1) % this->m_depth;
    25e2:	1c5d      	adds	r5, r3, #1
    FwSizeType index = this->m_indices[this->m_startIndex % this->m_depth];
    25e4:	fb07 331c 	mls	r3, r7, ip, r3
    25e8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
    this->m_startIndex = (this->m_startIndex + 1) % this->m_depth;
    25ec:	fbb5 f3f7 	udiv	r3, r5, r7
    25f0:	fb07 5513 	mls	r5, r7, r3, r5
        FW_ASSERT(this->m_handle.m_heap.push(priority, index));
    25f4:	4642      	mov	r2, r8
    this->m_startIndex = (this->m_startIndex + 1) % this->m_depth;
    25f6:	62a5      	str	r5, [r4, #40]	; 0x28
        FW_ASSERT(this->m_handle.m_heap.push(priority, index));
    25f8:	f010 f856 	bl	126a8 <Types::MaxHeap::push(long, unsigned long)>
    25fc:	b300      	cbz	r0, 2640 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xbc>
        this->m_handle.store_data(index, buffer, size);
    25fe:	4652      	mov	r2, sl
    2600:	464b      	mov	r3, r9
    2602:	4641      	mov	r1, r8
    2604:	4630      	mov	r0, r6
    2606:	f7ff ff65 	bl	24d4 <Os::Generic::PriorityQueueHandle::store_data(unsigned long, unsigned char const*, unsigned long)>
        this->m_handle.m_highMark = FW_MAX(this->m_handle.m_highMark, this->getMessagesAvailable());
    260a:	6823      	ldr	r3, [r4, #0]
    260c:	4d1b      	ldr	r5, [pc, #108]	; (267c <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xf8>)
    260e:	699b      	ldr	r3, [r3, #24]
        this->m_handle.m_sizes[index] = size;
    2610:	6a22      	ldr	r2, [r4, #32]
    2612:	42ab      	cmp	r3, r5
    2614:	f842 9028 	str.w	r9, [r2, r8, lsl #2]
        this->m_handle.m_highMark = FW_MAX(this->m_handle.m_highMark, this->getMessagesAvailable());
    2618:	6b67      	ldr	r7, [r4, #52]	; 0x34
    261a:	d123      	bne.n	2664 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xe0>
    return this->m_handle.m_heap.getSize();
    261c:	4630      	mov	r0, r6
    261e:	f010 f8cf 	bl	127c0 <Types::MaxHeap::getSize() const>
        this->m_handle.m_highMark = FW_MAX(this->m_handle.m_highMark, this->getMessagesAvailable());
    2622:	4287      	cmp	r7, r0
    2624:	d915      	bls.n	2652 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xce>
    2626:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2628:	6363      	str	r3, [r4, #52]	; 0x34
    }
    262a:	a801      	add	r0, sp, #4
    262c:	f011 fa24 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
    this->m_handle.m_empty.notify();
    2630:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    2634:	f011 fb36 	bl	13ca4 <Os::ConditionVariable::notify()>
    return QueueInterface::Status::OP_OK;
    2638:	2000      	movs	r0, #0
}
    263a:	b003      	add	sp, #12
    263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        FW_ASSERT(this->m_handle.m_heap.push(priority, index));
    2640:	2176      	movs	r1, #118	; 0x76
    2642:	480f      	ldr	r0, [pc, #60]	; (2680 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xfc>)
    2644:	f7fe ffe2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    2648:	e7d9      	b.n	25fe <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x7a>
        return QueueInterface::Status::SIZE_MISMATCH;
    264a:	2004      	movs	r0, #4
}
    264c:	b003      	add	sp, #12
    264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->m_handle.m_highMark = FW_MAX(this->m_handle.m_highMark, this->getMessagesAvailable());
    2652:	6823      	ldr	r3, [r4, #0]
    2654:	699b      	ldr	r3, [r3, #24]
    2656:	42ab      	cmp	r3, r5
    2658:	d107      	bne.n	266a <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xe6>
    return this->m_handle.m_heap.getSize();
    265a:	4630      	mov	r0, r6
    265c:	f010 f8b0 	bl	127c0 <Types::MaxHeap::getSize() const>
    2660:	4603      	mov	r3, r0
    2662:	e7e1      	b.n	2628 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xa4>
        this->m_handle.m_highMark = FW_MAX(this->m_handle.m_highMark, this->getMessagesAvailable());
    2664:	4620      	mov	r0, r4
    2666:	4798      	blx	r3
    2668:	e7db      	b.n	2622 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x9e>
    266a:	4620      	mov	r0, r4
    266c:	4798      	blx	r3
    266e:	4603      	mov	r3, r0
    2670:	e7da      	b.n	2628 <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xa4>
    }
    2672:	a801      	add	r0, sp, #4
    2674:	f011 fa00 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
            return QueueInterface::Status::FULL;
    2678:	2008      	movs	r0, #8
    267a:	e7de      	b.n	263a <Os::Generic::PriorityQueue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0xb6>
    267c:	000024cd 	.word	0x000024cd
    2680:	20000e08 	.word	0x20000e08

00002684 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)>:
                                              FwQueuePriorityType& priority) {
    2684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Os::ScopeLock lock(this->m_handle.m_data_lock);
    2688:	f100 0638 	add.w	r6, r0, #56	; 0x38
                                              FwQueuePriorityType& priority) {
    268c:	b082      	sub	sp, #8
        if (this->m_handle.m_heap.isEmpty() and blockType == BlockingType::NONBLOCKING) {
    268e:	f100 0508 	add.w	r5, r0, #8
                                              FwQueuePriorityType& priority) {
    2692:	461f      	mov	r7, r3
    2694:	4604      	mov	r4, r0
    2696:	4688      	mov	r8, r1
        Os::ScopeLock lock(this->m_handle.m_data_lock);
    2698:	4668      	mov	r0, sp
    269a:	4631      	mov	r1, r6
                                              FwQueuePriorityType& priority) {
    269c:	4691      	mov	r9, r2
    269e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        Os::ScopeLock lock(this->m_handle.m_data_lock);
    26a2:	f011 f991 	bl	139c8 <Os::ScopeLock::ScopeLock(Os::Mutex&)>
        if (this->m_handle.m_heap.isEmpty() and blockType == BlockingType::NONBLOCKING) {
    26a6:	4628      	mov	r0, r5
    26a8:	f010 f884 	bl	127b4 <Types::MaxHeap::isEmpty()>
    26ac:	2f01      	cmp	r7, #1
    26ae:	d101      	bne.n	26b4 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x30>
    26b0:	2800      	cmp	r0, #0
    26b2:	d15d      	bne.n	2770 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xec>
            this->m_handle.m_empty.wait(this->m_handle.m_data_lock);
    26b4:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
    26b8:	e001      	b.n	26be <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x3a>
    26ba:	f011 fa89 	bl	13bd0 <Os::ConditionVariable::wait(Os::Mutex&)>
        while (this->m_handle.m_heap.isEmpty()) {
    26be:	4628      	mov	r0, r5
    26c0:	f010 f878 	bl	127b4 <Types::MaxHeap::isEmpty()>
    26c4:	4603      	mov	r3, r0
            this->m_handle.m_empty.wait(this->m_handle.m_data_lock);
    26c6:	4631      	mov	r1, r6
    26c8:	4638      	mov	r0, r7
        while (this->m_handle.m_heap.isEmpty()) {
    26ca:	2b00      	cmp	r3, #0
    26cc:	d1f5      	bne.n	26ba <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x36>
        FW_ASSERT(this->m_handle.m_heap.pop(priority, index));
    26ce:	4628      	mov	r0, r5
    26d0:	aa01      	add	r2, sp, #4
    26d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    26d4:	f010 f942 	bl	1295c <Types::MaxHeap::pop(long&, unsigned long&)>
    26d8:	2800      	cmp	r0, #0
    26da:	d044      	beq.n	2766 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xe2>
        actualSize = this->m_handle.m_sizes[index];
    26dc:	6a23      	ldr	r3, [r4, #32]
    26de:	9e01      	ldr	r6, [sp, #4]
    26e0:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
        FW_ASSERT(actualSize <= capacity);
    26e4:	454d      	cmp	r5, r9
        actualSize = this->m_handle.m_sizes[index];
    26e6:	f8ca 5000 	str.w	r5, [sl]
        FW_ASSERT(actualSize <= capacity);
    26ea:	d834      	bhi.n	2756 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xd2>
    FW_ASSERT(size <= this->m_maxSize);
    26ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    26ee:	42ab      	cmp	r3, r5
    26f0:	d32c      	bcc.n	274c <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xc8>
    FW_ASSERT(index < this->m_depth);
    26f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    26f4:	42b3      	cmp	r3, r6
    26f6:	d924      	bls.n	2742 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xbe>
    ::memcpy(destination, this->m_data + offset, size);
    26f8:	69a3      	ldr	r3, [r4, #24]
    26fa:	462a      	mov	r2, r5
    FwSizeType offset = this->m_maxSize * index;
    26fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ::memcpy(destination, this->m_data + offset, size);
    26fe:	4640      	mov	r0, r8
    2700:	fb01 3106 	mla	r1, r1, r6, r3
    2704:	f016 fa48 	bl	18b98 <memcpy>
    this->m_indices[this->m_stopIndex % this->m_depth] = index;
    2708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    270a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    }
    270c:	4668      	mov	r0, sp
    this->m_indices[this->m_stopIndex % this->m_depth] = index;
    270e:	69e1      	ldr	r1, [r4, #28]
        this->m_handle.return_index(index);
    2710:	9d01      	ldr	r5, [sp, #4]
    this->m_indices[this->m_stopIndex % this->m_depth] = index;
    2712:	fbb3 f6f2 	udiv	r6, r3, r2
    2716:	fb02 3316 	mls	r3, r2, r6, r3
    271a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    this->m_stopIndex = (this->m_stopIndex + 1) % this->m_depth;
    271e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2720:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2722:	3301      	adds	r3, #1
    2724:	fbb3 f1f2 	udiv	r1, r3, r2
    2728:	fb02 3311 	mls	r3, r2, r1, r3
    272c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
    272e:	f011 f9a3 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
    this->m_handle.m_full.notify();
    2732:	f104 0090 	add.w	r0, r4, #144	; 0x90
    2736:	f011 fab5 	bl	13ca4 <Os::ConditionVariable::notify()>
    return QueueInterface::Status::OP_OK;
    273a:	2000      	movs	r0, #0
}
    273c:	b002      	add	sp, #8
    273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FW_ASSERT(index < this->m_depth);
    2742:	2124      	movs	r1, #36	; 0x24
    2744:	480d      	ldr	r0, [pc, #52]	; (277c <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xf8>)
    2746:	f7fe ff61 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    274a:	e7d5      	b.n	26f8 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x74>
    FW_ASSERT(size <= this->m_maxSize);
    274c:	2123      	movs	r1, #35	; 0x23
    274e:	480b      	ldr	r0, [pc, #44]	; (277c <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xf8>)
    2750:	f7fe ff5c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    2754:	e7cd      	b.n	26f2 <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x6e>
        FW_ASSERT(actualSize <= capacity);
    2756:	2192      	movs	r1, #146	; 0x92
    2758:	4808      	ldr	r0, [pc, #32]	; (277c <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xf8>)
    275a:	f7fe ff57 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        this->m_handle.load_data(index, destination, actualSize);
    275e:	9e01      	ldr	r6, [sp, #4]
    2760:	f8da 5000 	ldr.w	r5, [sl]
    2764:	e7c2      	b.n	26ec <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x68>
        FW_ASSERT(this->m_handle.m_heap.pop(priority, index));
    2766:	2190      	movs	r1, #144	; 0x90
    2768:	4804      	ldr	r0, [pc, #16]	; (277c <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xf8>)
    276a:	f7fe ff4f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    276e:	e7b5      	b.n	26dc <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x58>
    }
    2770:	4668      	mov	r0, sp
    2772:	f011 f981 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
            return QueueInterface::Status::EMPTY;
    2776:	2002      	movs	r0, #2
    2778:	e7e0      	b.n	273c <Os::Generic::PriorityQueue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0xb8>
    277a:	bf00      	nop
    277c:	20000e08 	.word	0x20000e08

00002780 <Os::Baremetal::BaremetalCpu::_getCount(unsigned long&)>:
namespace Os {
namespace Baremetal {

CpuInterface::Status BaremetalCpu::_getCount(FwSizeType& cpu_count) {
    // Assumes singular CPU
    cpu_count = 1;
    2780:	2301      	movs	r3, #1
    return Status::OP_OK;
}
    2782:	2000      	movs	r0, #0
    cpu_count = 1;
    2784:	600b      	str	r3, [r1, #0]
}
    2786:	4770      	bx	lr

00002788 <Os::Baremetal::BaremetalCpu::_getTicks(Os::Generic::UsedTotal&, unsigned long)>:

CpuInterface::Status BaremetalCpu::_getTicks(Os::Cpu::Ticks& ticks, FwSizeType cpu_index) {
    // Baremetal currently returns 100% in all cases
    ticks.total = 1;
    2788:	2301      	movs	r3, #1
    ticks.used = 1;
    return Status::OP_OK;
}
    278a:	2000      	movs	r0, #0
    ticks.used = 1;
    278c:	e9c1 3300 	strd	r3, r3, [r1]
}
    2790:	4770      	bx	lr
    2792:	bf00      	nop

00002794 <Os::Baremetal::BaremetalCpu::getHandle()>:

CpuHandle* BaremetalCpu::getHandle() {
    return &this->m_handle;
}
    2794:	3004      	adds	r0, #4
    2796:	4770      	bx	lr

00002798 <Os::Baremetal::BaremetalCpu::~BaremetalCpu()>:
    //! \brief default copy assignment
    CpuInterface& operator=(const CpuInterface& other) override = delete;

    //! \brief destructor
    //!
    ~BaremetalCpu() override = default;
    2798:	4770      	bx	lr
    279a:	bf00      	nop

0000279c <Os::Baremetal::BaremetalCpu::~BaremetalCpu()>:
    279c:	b510      	push	{r4, lr}
    279e:	4604      	mov	r4, r0
    27a0:	2108      	movs	r1, #8
    27a2:	f016 fa95 	bl	18cd0 <operator delete(void*, unsigned int)>
    27a6:	4620      	mov	r0, r4
    27a8:	bd10      	pop	{r4, pc}
    27aa:	bf00      	nop

000027ac <Os::Baremetal::BaremetalMemory::_getUsage(Os::Generic::UsedTotal&)>:

namespace Os {
namespace Baremetal {

MemoryInterface::Status BaremetalMemory::_getUsage(Os::Memory::Usage& memory_usage) {
    memory_usage.used = 1;
    27ac:	2301      	movs	r3, #1
    memory_usage.total = 1;
    return Status::OP_OK;
}
    27ae:	2000      	movs	r0, #0
    memory_usage.total = 1;
    27b0:	e9c1 3300 	strd	r3, r3, [r1]
}
    27b4:	4770      	bx	lr
    27b6:	bf00      	nop

000027b8 <Os::Baremetal::BaremetalMemory::getHandle()>:


MemoryHandle* BaremetalMemory::getHandle() {
    return &this->m_handle;
}
    27b8:	3004      	adds	r0, #4
    27ba:	4770      	bx	lr

000027bc <Os::Baremetal::BaremetalMemory::~BaremetalMemory()>:
    //! \brief default copy assignment
    MemoryInterface& operator=(const MemoryInterface& other) override = delete;

    //! \brief destructor
    //!
    ~BaremetalMemory() override = default;
    27bc:	4770      	bx	lr
    27be:	bf00      	nop

000027c0 <Os::Baremetal::BaremetalMemory::~BaremetalMemory()>:
    27c0:	b510      	push	{r4, lr}
    27c2:	4604      	mov	r4, r0
    27c4:	2108      	movs	r1, #8
    27c6:	f016 fa83 	bl	18cd0 <operator delete(void*, unsigned int)>
    27ca:	4620      	mov	r0, r4
    27cc:	bd10      	pop	{r4, pc}
    27ce:	bf00      	nop

000027d0 <Os::Baremetal::BaremetalMutex::take()>:
namespace Os {
namespace Baremetal {

BaremetalMutex::Status BaremetalMutex::take() {
    return Status::OP_OK;
}
    27d0:	2000      	movs	r0, #0
    27d2:	4770      	bx	lr

000027d4 <Os::Baremetal::BaremetalMutex::getHandle()>:
    return Status::OP_OK;
}

MutexHandle* BaremetalMutex::getHandle() {
    return nullptr;
}
    27d4:	2000      	movs	r0, #0
    27d6:	4770      	bx	lr

000027d8 <Os::Baremetal::BaremetalMutex::~BaremetalMutex()>:

    //! \brief destructor
    //!
    ~BaremetalMutex() override = default;
    27d8:	4770      	bx	lr
    27da:	bf00      	nop

000027dc <Os::Baremetal::BaremetalMutex::~BaremetalMutex()>:
    27dc:	b510      	push	{r4, lr}
    27de:	4604      	mov	r4, r0
    27e0:	2104      	movs	r1, #4
    27e2:	f016 fa75 	bl	18cd0 <operator delete(void*, unsigned int)>
    27e6:	4620      	mov	r0, r4
    27e8:	bd10      	pop	{r4, pc}
    27ea:	bf00      	nop

000027ec <Os::Baremetal::BaremetalConditionVariable::notify()>:

namespace Os {
namespace Baremetal {

ConditionVariableInterface::Status BaremetalConditionVariable::pend(Os::Mutex& mutex) {}
void BaremetalConditionVariable::notify() {}
    27ec:	4770      	bx	lr
    27ee:	bf00      	nop

000027f0 <Os::Baremetal::BaremetalConditionVariable::getHandle()>:
void BaremetalConditionVariable::notifyAll() {}

ConditionVariableHandle* BaremetalConditionVariable::getHandle() {
    return nullptr;
}
    27f0:	2000      	movs	r0, #0
    27f2:	4770      	bx	lr

000027f4 <Os::Baremetal::BaremetalConditionVariable::~BaremetalConditionVariable()>:

    //! \brief destructor
    //!
    ~BaremetalConditionVariable() override = default;
    27f4:	4770      	bx	lr
    27f6:	bf00      	nop

000027f8 <Os::Baremetal::BaremetalConditionVariable::pend(Os::Mutex&)>:
    27f8:	b510      	push	{r4, lr}
    27fa:	4604      	mov	r4, r0
    27fc:	2104      	movs	r1, #4
    27fe:	f016 fa67 	bl	18cd0 <operator delete(void*, unsigned int)>
    2802:	4620      	mov	r0, r4
    2804:	bd10      	pop	{r4, pc}
    2806:	bf00      	nop

00002808 <Os::Baremetal::BaremetalTask::onStart()>:

BaremetalTask::BaremetalTask() {
    (void)TaskRunner::getSingleton();  // Force the task runner into existence
}

void BaremetalTask::onStart() {}
    2808:	4770      	bx	lr
    280a:	bf00      	nop

0000280c <Os::Baremetal::BaremetalTask::join()>:

Os::TaskInterface::Status BaremetalTask::join() {
    return Os::TaskInterface::Status::OP_OK;
}
    280c:	2000      	movs	r0, #0
    280e:	4770      	bx	lr

00002810 <Os::Baremetal::BaremetalTask::suspend(Os::TaskInterface::SuspensionType)>:

void BaremetalTask::suspend(Os::TaskInterface::SuspensionType suspensionType) {
    this->m_handle.m_enabled = false;
    2810:	2300      	movs	r3, #0
    2812:	7103      	strb	r3, [r0, #4]
}
    2814:	4770      	bx	lr
    2816:	bf00      	nop

00002818 <Os::Baremetal::BaremetalTask::resume()>:

void BaremetalTask::resume() {
    this->m_handle.m_enabled = true;
    2818:	2301      	movs	r3, #1
    281a:	7103      	strb	r3, [r0, #4]
}
    281c:	4770      	bx	lr
    281e:	bf00      	nop

00002820 <Os::Baremetal::BaremetalTask::getHandle()>:

Os::TaskHandle* BaremetalTask::getHandle() {
    return &m_handle;
}
    2820:	3004      	adds	r0, #4
    2822:	4770      	bx	lr

00002824 <Os::Baremetal::BaremetalTask::start(Os::TaskInterface::Arguments const&)>:

Os::TaskInterface::Status BaremetalTask::start(const Os::TaskInterface::Arguments& arguments) {
    2824:	b508      	push	{r3, lr}
    // Set handle member variables
    this->m_handle.m_enabled = true;
    2826:	f04f 0c01 	mov.w	ip, #1
    this->m_handle.m_routine = arguments.m_routine;
    this->m_handle.m_argument = arguments.m_routine_argument;
    282a:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
    this->m_handle.m_enabled = true;
    282e:	f880 c004 	strb.w	ip, [r0, #4]
    this->m_handle.m_argument = arguments.m_routine_argument;
    2832:	e9c0 3202 	strd	r3, r2, [r0, #8]

    // Running the task the first time allows setup activities for the task
    this->m_handle.m_routine(this->m_handle.m_argument);
    2836:	4610      	mov	r0, r2
    2838:	4798      	blx	r3

    return Os::TaskInterface::Status::OP_OK;
}
    283a:	2000      	movs	r0, #0
    283c:	bd08      	pop	{r3, pc}
    283e:	bf00      	nop

00002840 <Os::Baremetal::BaremetalTask::isCooperative()>:

bool BaremetalTask::isCooperative() {
    return true;
}
    2840:	2001      	movs	r0, #1
    2842:	4770      	bx	lr

00002844 <Os::Baremetal::BaremetalTask::~BaremetalTask()>:
  public:
    //! Constructor
    BaremetalTask();

    //! Destructor
    ~BaremetalTask() override = default;
    2844:	4770      	bx	lr
    2846:	bf00      	nop

00002848 <Os::Baremetal::BaremetalTask::_delay(Fw::TimeInterval)>:

Os::Task::Status BaremetalTask::_delay(Fw::TimeInterval interval) {
    // It is an error to attempt to delay a baremetal task because this would amount to [insert something bad here]
    FW_ASSERT(0);
    2848:	2132      	movs	r1, #50	; 0x32
    284a:	4803      	ldr	r0, [pc, #12]	; (2858 <Os::Baremetal::BaremetalTask::_delay(Fw::TimeInterval)+0x10>)
Os::Task::Status BaremetalTask::_delay(Fw::TimeInterval interval) {
    284c:	b508      	push	{r3, lr}
    FW_ASSERT(0);
    284e:	f7fe fedd 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return Os::Task::Status::UNKNOWN_ERROR;
}
    2852:	2004      	movs	r0, #4
    2854:	bd08      	pop	{r3, pc}
    2856:	bf00      	nop
    2858:	20000e58 	.word	0x20000e58

0000285c <Os::Baremetal::BaremetalTask::~BaremetalTask()>:
    285c:	b510      	push	{r4, lr}
    285e:	4604      	mov	r4, r0
    2860:	2110      	movs	r1, #16
    2862:	f016 fa35 	bl	18cd0 <operator delete(void*, unsigned int)>
    2866:	4620      	mov	r0, r4
    2868:	bd10      	pop	{r4, pc}
    286a:	bf00      	nop

0000286c <Os::Baremetal::BaremetalTask::BaremetalTask()>:
BaremetalTask::BaremetalTask() {
    286c:	4b03      	ldr	r3, [pc, #12]	; (287c <Os::Baremetal::BaremetalTask::BaremetalTask()+0x10>)
    286e:	b510      	push	{r4, lr}
    2870:	4604      	mov	r4, r0
    2872:	6003      	str	r3, [r0, #0]
    (void)TaskRunner::getSingleton();  // Force the task runner into existence
    2874:	f7fe ff8e 	bl	1794 <Os::Baremetal::TaskRunner::getSingleton()>
}
    2878:	4620      	mov	r0, r4
    287a:	bd10      	pop	{r4, pc}
    287c:	200036bc 	.word	0x200036bc

00002880 <Os::Arduino::StreamConsole::writeMessage(char const*, unsigned long)>:
void StreamConsoleHandle::setStreamHandler(Stream& stream) {
    this->m_stream = &stream;
}

void StreamConsole::writeMessage(const CHAR *message, const FwSizeType size) {
    Stream* output_stream = this->m_handle.m_stream;
    2880:	6840      	ldr	r0, [r0, #4]
    if (output_stream != nullptr) {
    2882:	b110      	cbz	r0, 288a <Os::Arduino::StreamConsole::writeMessage(char const*, unsigned long)+0xa>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
    2884:	6803      	ldr	r3, [r0, #0]
    2886:	685b      	ldr	r3, [r3, #4]
    2888:	4718      	bx	r3
        size_t output_size = FW_MIN(size, std::numeric_limits<size_t>::max());
        output_stream->write(message, output_size);
    }
}
    288a:	4770      	bx	lr

0000288c <Os::Arduino::StreamConsole::getHandle()>:

ConsoleHandle* StreamConsole::getHandle() {
    return &this->m_handle;
}
    288c:	3004      	adds	r0, #4
    288e:	4770      	bx	lr

00002890 <Os::Arduino::StreamConsole::~StreamConsole()>:
    //! \brief default copy assignment
    StreamConsole& operator=(const StreamConsole& other) = default;

    //! \brief destructor
    //!
    ~StreamConsole() override = default;
    2890:	4770      	bx	lr
    2892:	bf00      	nop

00002894 <Os::Arduino::StreamConsole::~StreamConsole()>:
    2894:	b510      	push	{r4, lr}
    2896:	4604      	mov	r4, r0
    2898:	2108      	movs	r1, #8
    289a:	f016 fa19 	bl	18cd0 <operator delete(void*, unsigned int)>
    289e:	4620      	mov	r0, r4
    28a0:	bd10      	pop	{r4, pc}
    28a2:	bf00      	nop

000028a4 <Os::Arduino::StreamConsoleHandle::setStreamHandler(Stream&)>:
    this->m_stream = &stream;
    28a4:	6001      	str	r1, [r0, #0]
}
    28a6:	4770      	bx	lr

000028a8 <Os::Arduino::ArduinoRawTime::getHandle()>:
           ((a.m_seconds == b.m_seconds) && (a.m_micros >= b.m_seconds)));
}

RawTimeHandle* ArduinoRawTime::getHandle() {
    return &this->m_handle;
}
    28a8:	3004      	adds	r0, #4
    28aa:	4770      	bx	lr

000028ac <Os::Arduino::ArduinoRawTime::now()>:

RawTime::Status ArduinoRawTime::now() {
    28ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ae:	4e14      	ldr	r6, [pc, #80]	; (2900 <Os::Arduino::ArduinoRawTime::now()+0x54>)
    28b0:	4605      	mov	r5, r0
    U32 milliseconds_now = millis();
    U32 microseconds_now = micros() % 1000000;
    28b2:	4f14      	ldr	r7, [pc, #80]	; (2904 <Os::Arduino::ArduinoRawTime::now()+0x58>)
    28b4:	6834      	ldr	r4, [r6, #0]
    28b6:	f016 f8c9 	bl	18a4c <micros>
    28ba:	fba7 2300 	umull	r2, r3, r7, r0
    U32 milliseconds_no_seconds = milliseconds_now % 1000;
    // Microsecond portion and millisecond portion don't agree, assume roll-over and ask for milliseconds again
    if (milliseconds_no_seconds != (microseconds_now/1000)) {
    28be:	4912      	ldr	r1, [pc, #72]	; (2908 <Os::Arduino::ArduinoRawTime::now()+0x5c>)
    U32 microseconds_now = micros() % 1000000;
    28c0:	f8df c048 	ldr.w	ip, [pc, #72]	; 290c <Os::Arduino::ArduinoRawTime::now()+0x60>
    U32 milliseconds_no_seconds = milliseconds_now % 1000;
    28c4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    U32 microseconds_now = micros() % 1000000;
    28c8:	0c9b      	lsrs	r3, r3, #18
    28ca:	fb0c 0313 	mls	r3, ip, r3, r0
    U32 milliseconds_no_seconds = milliseconds_now % 1000;
    28ce:	fba1 0204 	umull	r0, r2, r1, r4
    if (milliseconds_no_seconds != (microseconds_now/1000)) {
    28d2:	fba1 0103 	umull	r0, r1, r1, r3
    U32 milliseconds_no_seconds = milliseconds_now % 1000;
    28d6:	0992      	lsrs	r2, r2, #6
    28d8:	fb0e 4212 	mls	r2, lr, r2, r4
    if (milliseconds_no_seconds != (microseconds_now/1000)) {
    28dc:	ebb2 1f91 	cmp.w	r2, r1, lsr #6
    28e0:	d005      	beq.n	28ee <Os::Arduino::ArduinoRawTime::now()+0x42>
    28e2:	6832      	ldr	r2, [r6, #0]
        microseconds_now = millis();
    }
    this->m_handle.m_micros = microseconds_now % 1000000;
    28e4:	fba7 3702 	umull	r3, r7, r7, r2
    28e8:	0cbb      	lsrs	r3, r7, #18
    28ea:	fb0c 2313 	mls	r3, ip, r3, r2
    this->m_handle.m_seconds = milliseconds_now / 1000;
    28ee:	4a06      	ldr	r2, [pc, #24]	; (2908 <Os::Arduino::ArduinoRawTime::now()+0x5c>)
    return Status::OP_OK;
}
    28f0:	2000      	movs	r0, #0
    this->m_handle.m_micros = microseconds_now % 1000000;
    28f2:	60ab      	str	r3, [r5, #8]
    this->m_handle.m_seconds = milliseconds_now / 1000;
    28f4:	fba2 2404 	umull	r2, r4, r2, r4
    28f8:	09a4      	lsrs	r4, r4, #6
    28fa:	606c      	str	r4, [r5, #4]
}
    28fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28fe:	bf00      	nop
    2900:	2000d36c 	.word	0x2000d36c
    2904:	431bde83 	.word	0x431bde83
    2908:	10624dd3 	.word	0x10624dd3
    290c:	000f4240 	.word	0x000f4240

00002910 <Os::Arduino::ArduinoRawTime::deserialize(Fw::SerializeBufferBase&)>:
        status = buffer.serialize(this->m_handle.m_micros);
    }
    return status;
}

Fw::SerializeStatus ArduinoRawTime::deserialize(Fw::SerializeBufferBase& buffer) {
    2910:	b538      	push	{r3, r4, r5, lr}
    2912:	460c      	mov	r4, r1
    2914:	4605      	mov	r5, r0
    Fw::SerializeStatus status = Fw::SerializeStatus::FW_SERIALIZE_OK;
    status = buffer.deserialize(this->m_handle.m_seconds);
    2916:	1d01      	adds	r1, r0, #4
    2918:	4620      	mov	r0, r4
    291a:	f7fe f9d1 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    291e:	b100      	cbz	r0, 2922 <Os::Arduino::ArduinoRawTime::deserialize(Fw::SerializeBufferBase&)+0x12>
        status = buffer.deserialize(this->m_handle.m_micros);
    }
    return status;
}
    2920:	bd38      	pop	{r3, r4, r5, pc}
        status = buffer.deserialize(this->m_handle.m_micros);
    2922:	f105 0108 	add.w	r1, r5, #8
    2926:	4620      	mov	r0, r4
}
    2928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        status = buffer.deserialize(this->m_handle.m_micros);
    292c:	f7fe b9c8 	b.w	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>

00002930 <Os::Arduino::ArduinoRawTime::~ArduinoRawTime()>:

    //! \brief default virtual destructor
    virtual ~RawTimeInterface() = default;
    2930:	4b03      	ldr	r3, [pc, #12]	; (2940 <Os::Arduino::ArduinoRawTime::~ArduinoRawTime()+0x10>)
    //!
    ArduinoRawTime() = default;

    //! \brief destructor
    //!
    ~ArduinoRawTime() override = default;
    2932:	b510      	push	{r4, lr}
    2934:	4604      	mov	r4, r0
    2936:	6003      	str	r3, [r0, #0]
    2938:	f7fd fe00 	bl	53c <Fw::Serializable::~Serializable()>
    293c:	4620      	mov	r0, r4
    293e:	bd10      	pop	{r4, pc}
    2940:	20003490 	.word	0x20003490

00002944 <Os::Arduino::ArduinoRawTime::~ArduinoRawTime()>:
    2944:	4b05      	ldr	r3, [pc, #20]	; (295c <Os::Arduino::ArduinoRawTime::~ArduinoRawTime()+0x18>)
    2946:	b510      	push	{r4, lr}
    2948:	4604      	mov	r4, r0
    294a:	6003      	str	r3, [r0, #0]
    294c:	f7fd fdf6 	bl	53c <Fw::Serializable::~Serializable()>
    2950:	210c      	movs	r1, #12
    2952:	4620      	mov	r0, r4
    2954:	f016 f9bc 	bl	18cd0 <operator delete(void*, unsigned int)>
    2958:	4620      	mov	r0, r4
    295a:	bd10      	pop	{r4, pc}
    295c:	20003490 	.word	0x20003490

00002960 <Os::Arduino::ArduinoRawTime::serialize(Fw::SerializeBufferBase&) const>:
Fw::SerializeStatus ArduinoRawTime::serialize(Fw::SerializeBufferBase& buffer) const {
    2960:	b538      	push	{r3, r4, r5, lr}
    2962:	460c      	mov	r4, r1
    2964:	4605      	mov	r5, r0
    status = buffer.serialize(this->m_handle.m_seconds);
    2966:	6841      	ldr	r1, [r0, #4]
    2968:	4620      	mov	r0, r4
    296a:	f7fd fe77 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    if (status == Fw::FW_SERIALIZE_OK) {
    296e:	b100      	cbz	r0, 2972 <Os::Arduino::ArduinoRawTime::serialize(Fw::SerializeBufferBase&) const+0x12>
}
    2970:	bd38      	pop	{r3, r4, r5, pc}
        status = buffer.serialize(this->m_handle.m_micros);
    2972:	68a9      	ldr	r1, [r5, #8]
    2974:	4620      	mov	r0, r4
}
    2976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        status = buffer.serialize(this->m_handle.m_micros);
    297a:	f7fd be6f 	b.w	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    297e:	bf00      	nop

00002980 <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const>:
RawTime::Status ArduinoRawTime::getTimeInterval(const Os::RawTime& other, Fw::TimeInterval& interval) const {
    2980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2982:	4614      	mov	r4, r2
    interval.set(0, 0);
    2984:	2200      	movs	r2, #0
RawTime::Status ArduinoRawTime::getTimeInterval(const Os::RawTime& other, Fw::TimeInterval& interval) const {
    2986:	460e      	mov	r6, r1
    2988:	4605      	mov	r5, r0
    interval.set(0, 0);
    298a:	4611      	mov	r1, r2
    298c:	4620      	mov	r0, r4
    298e:	f015 f857 	bl	17a40 <Fw::TimeInterval::set(unsigned long, unsigned long)>
    const ArduinoRawTimeHandle& other_handle = static_cast<const ArduinoRawTimeHandle&>(*const_cast<Os::RawTime&>(other).getHandle());
    2992:	4630      	mov	r0, r6
    2994:	f012 fa0e 	bl	14db4 <Os::RawTime::getHandle()>
    return ((a.m_seconds > b.m_seconds) ||
    2998:	686e      	ldr	r6, [r5, #4]
    299a:	6801      	ldr	r1, [r0, #0]
    const ArduinoRawTimeHandle& other_handle = static_cast<const ArduinoRawTimeHandle&>(*const_cast<Os::RawTime&>(other).getHandle());
    299c:	4603      	mov	r3, r0
    return ((a.m_seconds > b.m_seconds) ||
    299e:	42b1      	cmp	r1, r6
    29a0:	d20d      	bcs.n	29be <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x3e>
           ((a.m_seconds == b.m_seconds) && (a.m_micros >= b.m_seconds)));
    29a2:	68af      	ldr	r7, [r5, #8]
    if (newer.m_micros < older.m_micros) {
    29a4:	6842      	ldr	r2, [r0, #4]
    29a6:	4297      	cmp	r7, r2
    29a8:	d211      	bcs.n	29ce <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x4e>
        interval.set(newer.m_seconds - older.m_seconds - 1, 1000000 + newer.m_micros - older.m_micros);
    29aa:	4b11      	ldr	r3, [pc, #68]	; (29f0 <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x70>)
    29ac:	3e01      	subs	r6, #1
    29ae:	4620      	mov	r0, r4
    29b0:	443b      	add	r3, r7
    29b2:	1a71      	subs	r1, r6, r1
    29b4:	1a9a      	subs	r2, r3, r2
    29b6:	f015 f843 	bl	17a40 <Fw::TimeInterval::set(unsigned long, unsigned long)>
}
    29ba:	2000      	movs	r0, #0
    29bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ((a.m_seconds > b.m_seconds) ||
    29be:	d00d      	beq.n	29dc <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x5c>
    if (newer.m_micros < older.m_micros) {
    29c0:	685f      	ldr	r7, [r3, #4]
           ((a.m_seconds == b.m_seconds) && (a.m_micros >= b.m_seconds)));
    29c2:	4630      	mov	r0, r6
    29c4:	68aa      	ldr	r2, [r5, #8]
    29c6:	460e      	mov	r6, r1
    29c8:	4601      	mov	r1, r0
    if (newer.m_micros < older.m_micros) {
    29ca:	4297      	cmp	r7, r2
    29cc:	d3ed      	bcc.n	29aa <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x2a>
        interval.set(newer.m_seconds - older.m_seconds, newer.m_micros - older.m_micros);
    29ce:	4620      	mov	r0, r4
    29d0:	1aba      	subs	r2, r7, r2
    29d2:	1a71      	subs	r1, r6, r1
    29d4:	f015 f834 	bl	17a40 <Fw::TimeInterval::set(unsigned long, unsigned long)>
}
    29d8:	2000      	movs	r0, #0
    29da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((a.m_seconds == b.m_seconds) && (a.m_micros >= b.m_seconds)));
    29dc:	68a8      	ldr	r0, [r5, #8]
    29de:	4281      	cmp	r1, r0
    29e0:	d902      	bls.n	29e8 <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x68>
    if (newer.m_micros < older.m_micros) {
    29e2:	685f      	ldr	r7, [r3, #4]
    29e4:	4602      	mov	r2, r0
    29e6:	e7de      	b.n	29a6 <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x26>
    29e8:	685a      	ldr	r2, [r3, #4]
    29ea:	4607      	mov	r7, r0
    29ec:	e7db      	b.n	29a6 <Os::Arduino::ArduinoRawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x26>
    29ee:	bf00      	nop
    29f0:	000f4240 	.word	0x000f4240

000029f4 <Arduino::StreamDriver::~StreamDriver()>:
StreamDriver ::StreamDriver(const char* compName)
    : StreamDriverComponentBase(compName),
      m_port_number(0),
      m_port_pointer(static_cast<POINTER_CAST>(NULL)) {}

StreamDriver ::~StreamDriver(void) {}
    29f4:	4b03      	ldr	r3, [pc, #12]	; (2a04 <Arduino::StreamDriver::~StreamDriver()+0x10>)
    29f6:	b510      	push	{r4, lr}
    29f8:	4604      	mov	r4, r0
    29fa:	6003      	str	r3, [r0, #0]
    29fc:	f000 fb72 	bl	30e4 <Arduino::StreamDriverComponentBase::~StreamDriverComponentBase()>
    2a00:	4620      	mov	r0, r4
    2a02:	bd10      	pop	{r4, pc}
    2a04:	20003fe0 	.word	0x20003fe0

00002a08 <Arduino::StreamDriver::~StreamDriver()>:
    2a08:	4b06      	ldr	r3, [pc, #24]	; (2a24 <Arduino::StreamDriver::~StreamDriver()+0x1c>)
    2a0a:	b510      	push	{r4, lr}
    2a0c:	4604      	mov	r4, r0
    2a0e:	6003      	str	r3, [r0, #0]
    2a10:	f000 fb68 	bl	30e4 <Arduino::StreamDriverComponentBase::~StreamDriverComponentBase()>
    2a14:	f44f 7156 	mov.w	r1, #856	; 0x358
    2a18:	4620      	mov	r0, r4
    2a1a:	f016 f959 	bl	18cd0 <operator delete(void*, unsigned int)>
    2a1e:	4620      	mov	r0, r4
    2a20:	bd10      	pop	{r4, pc}
    2a22:	bf00      	nop
    2a24:	20003fe0 	.word	0x20003fe0

00002a28 <Arduino::StreamDriver::send_handler(long, Fw::Buffer&)>:

// ----------------------------------------------------------------------
// Handler implementations for user-defined typed input ports
// ----------------------------------------------------------------------

Drv::SendStatus StreamDriver ::send_handler(const NATIVE_INT_TYPE portNum, Fw::Buffer& fwBuffer) {
    2a28:	b510      	push	{r4, lr}
    2a2a:	4604      	mov	r4, r0
    2a2c:	b082      	sub	sp, #8
    2a2e:	4608      	mov	r0, r1
    write_data(fwBuffer);
    2a30:	4619      	mov	r1, r3
    2a32:	e9cd 0300 	strd	r0, r3, [sp]
    2a36:	f000 f87b 	bl	2b30 <Arduino::StreamDriver::write_data(Fw::Buffer&)>
    deallocate_out(0, fwBuffer);
    2a3a:	9a01      	ldr	r2, [sp, #4]
    2a3c:	2100      	movs	r1, #0
    2a3e:	9800      	ldr	r0, [sp, #0]
    2a40:	f000 fb0e 	bl	3060 <Arduino::StreamDriverComponentBase::deallocate_out(long, Fw::Buffer&)>

      //! Constructor (user-provided value)
      SendStatus(
          const T e1 //!< The raw enum value
      )
      {
    2a44:	4620      	mov	r0, r4
    2a46:	f7fd fd73 	bl	530 <Fw::Serializable::Serializable()>
    2a4a:	4a03      	ldr	r2, [pc, #12]	; (2a58 <Arduino::StreamDriver::send_handler(long, Fw::Buffer&)+0x30>)
        this->e = e1;
    2a4c:	2300      	movs	r3, #0
    return Drv::SendStatus::SEND_OK;
}
    2a4e:	4620      	mov	r0, r4
      {
    2a50:	6022      	str	r2, [r4, #0]
        this->e = e1;
    2a52:	7123      	strb	r3, [r4, #4]
    2a54:	b002      	add	sp, #8
    2a56:	bd10      	pop	{r4, pc}
    2a58:	2000379c 	.word	0x2000379c

00002a5c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    2a5c:	f017 b9d8 	b.w	19e10 <usb_serial_available>

00002a60 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)>:

void StreamDriver ::schedIn_handler(const NATIVE_INT_TYPE portNum, NATIVE_UINT_TYPE context) {
    2a60:	b530      	push	{r4, r5, lr}
    2a62:	4604      	mov	r4, r0
    if (not reinterpret_cast<Stream*>(m_port_pointer)->available()) {
    2a64:	f8d0 0354 	ldr.w	r0, [r0, #852]	; 0x354
    2a68:	4a18      	ldr	r2, [pc, #96]	; (2acc <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x6c>)
void StreamDriver ::schedIn_handler(const NATIVE_INT_TYPE portNum, NATIVE_UINT_TYPE context) {
    2a6a:	b08d      	sub	sp, #52	; 0x34
    if (not reinterpret_cast<Stream*>(m_port_pointer)->available()) {
    2a6c:	6803      	ldr	r3, [r0, #0]
    2a6e:	691b      	ldr	r3, [r3, #16]
    2a70:	4293      	cmp	r3, r2
    2a72:	d129      	bne.n	2ac8 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x68>
    2a74:	f017 f9cc 	bl	19e10 <usb_serial_available>
    2a78:	b320      	cbz	r0, 2ac4 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x64>
        return;
    }
    
    Fw::Buffer recv_buffer = this->allocate_out(0, SERIAL_BUFFER_SIZE);
    2a7a:	2340      	movs	r3, #64	; 0x40
    2a7c:	2200      	movs	r2, #0
    2a7e:	4621      	mov	r1, r4
    2a80:	a803      	add	r0, sp, #12
    2a82:	f000 fad3 	bl	302c <Arduino::StreamDriverComponentBase::allocate_out(long, unsigned long)>
    read_data(recv_buffer);
    2a86:	a903      	add	r1, sp, #12
    2a88:	4620      	mov	r0, r4

      //! Constructor (user-provided value)
      RecvStatus(
          const T e1 //!< The raw enum value
      )
      {
    2a8a:	4d11      	ldr	r5, [pc, #68]	; (2ad0 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x70>)
    2a8c:	f000 f872 	bl	2b74 <Arduino::StreamDriver::read_data(Fw::Buffer&)>
    2a90:	a801      	add	r0, sp, #4
    2a92:	f7fd fd4d 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    2a96:	2100      	movs	r1, #0
    recv_out(0, recv_buffer, Drv::RecvStatus::RECV_OK);
    2a98:	ab01      	add	r3, sp, #4
    2a9a:	aa03      	add	r2, sp, #12
    2a9c:	4620      	mov	r0, r4
    2a9e:	f88d 1008 	strb.w	r1, [sp, #8]
      {
    2aa2:	9501      	str	r5, [sp, #4]
    2aa4:	f000 fb06 	bl	30b4 <Arduino::StreamDriverComponentBase::recv_out(long, Fw::Buffer&, Drv::RecvStatus const&)>
  class RecvStatus :
    2aa8:	a801      	add	r0, sp, #4
    2aaa:	9501      	str	r5, [sp, #4]
    2aac:	f7fd fd46 	bl	53c <Fw::Serializable::~Serializable()>
//! Fw::Buffer also comes with functions to return a representation of the data as a SerializeBufferBase. These two
//! functions allow easy access to the data as if it were a serialize or deserialize buffer. This can aid in writing and
//! reading the wrapped data whereas the standard serialize and deserialize methods treat the data as a pointer to
//! prevent excessive copying.
//!
class Buffer : public Fw::Serializable {
    2ab0:	4a08      	ldr	r2, [pc, #32]	; (2ad4 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x74>)
    2ab2:	4b09      	ldr	r3, [pc, #36]	; (2ad8 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x78>)
    2ab4:	a804      	add	r0, sp, #16
    2ab6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    2aba:	f7fd fd49 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    2abe:	a803      	add	r0, sp, #12
    2ac0:	f7fd fd3c 	bl	53c <Fw::Serializable::~Serializable()>
}
    2ac4:	b00d      	add	sp, #52	; 0x34
    2ac6:	bd30      	pop	{r4, r5, pc}
    if (not reinterpret_cast<Stream*>(m_port_pointer)->available()) {
    2ac8:	4798      	blx	r3
    2aca:	e7d5      	b.n	2a78 <Arduino::StreamDriver::schedIn_handler(long, unsigned long)+0x18>
    2acc:	00002a5d 	.word	0x00002a5d
    2ad0:	20003780 	.word	0x20003780
    2ad4:	200032c0 	.word	0x200032c0
    2ad8:	20003214 	.word	0x20003214

00002adc <Arduino::StreamDriver::StreamDriver(char const*)>:
StreamDriver ::StreamDriver(const char* compName)
    2adc:	b510      	push	{r4, lr}
    2ade:	4604      	mov	r4, r0
      m_port_pointer(static_cast<POINTER_CAST>(NULL)) {}
    2ae0:	f000 f9fe 	bl	2ee0 <Arduino::StreamDriverComponentBase::StreamDriverComponentBase(char const*)>
      m_port_number(0),
    2ae4:	2300      	movs	r3, #0
      m_port_pointer(static_cast<POINTER_CAST>(NULL)) {}
    2ae6:	4a03      	ldr	r2, [pc, #12]	; (2af4 <Arduino::StreamDriver::StreamDriver(char const*)+0x18>)
    2ae8:	4620      	mov	r0, r4
    2aea:	6022      	str	r2, [r4, #0]
    2aec:	e9c4 33d4 	strd	r3, r3, [r4, #848]	; 0x350
    2af0:	bd10      	pop	{r4, pc}
    2af2:	bf00      	nop
    2af4:	20003fe0 	.word	0x20003fe0

00002af8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    2af8:	f017 b9ce 	b.w	19e98 <usb_serial_getchar>

00002afc <Arduino::StreamDriver::configure(Stream*)>:
#include "Fw/Types/BasicTypes.hpp"
#include "Fw/Types/Assert.hpp"

namespace Arduino {

void StreamDriver::configure(Stream* streamDriver) {
    2afc:	b538      	push	{r3, r4, r5, lr}
    2afe:	4604      	mov	r4, r0
    FW_ASSERT(streamDriver != nullptr);
    2b00:	460d      	mov	r5, r1
    2b02:	b169      	cbz	r1, 2b20 <Arduino::StreamDriver::configure(Stream*)+0x24>
    m_port_pointer = streamDriver;
    if (this->isConnected_ready_OutputPort(0)) {
    2b04:	2100      	movs	r1, #0
    2b06:	4620      	mov	r0, r4
    m_port_pointer = streamDriver;
    2b08:	f8c4 5354 	str.w	r5, [r4, #852]	; 0x354
    if (this->isConnected_ready_OutputPort(0)) {
    2b0c:	f000 fa0e 	bl	2f2c <Arduino::StreamDriverComponentBase::isConnected_ready_OutputPort(long)>
    2b10:	b900      	cbnz	r0, 2b14 <Arduino::StreamDriver::configure(Stream*)+0x18>
        this->ready_out(0);
    }
}
    2b12:	bd38      	pop	{r3, r4, r5, pc}
        this->ready_out(0);
    2b14:	4620      	mov	r0, r4
    2b16:	2100      	movs	r1, #0
}
    2b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        this->ready_out(0);
    2b1c:	f000 bab6 	b.w	308c <Arduino::StreamDriverComponentBase::ready_out(long)>
    FW_ASSERT(streamDriver != nullptr);
    2b20:	210f      	movs	r1, #15
    2b22:	4802      	ldr	r0, [pc, #8]	; (2b2c <Arduino::StreamDriver::configure(Stream*)+0x30>)
    2b24:	f7fe fd72 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    2b28:	e7ec      	b.n	2b04 <Arduino::StreamDriver::configure(Stream*)+0x8>
    2b2a:	bf00      	nop
    2b2c:	20001e00 	.word	0x20001e00

00002b30 <Arduino::StreamDriver::write_data(Fw::Buffer&)>:

// ----------------------------------------------------------------------
// Handler implementations for user-defined typed input ports
// ----------------------------------------------------------------------

void StreamDriver ::write_data(Fw::Buffer& fwBuffer) {
    2b30:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(m_port_pointer != 0);
    2b32:	f8d0 5354 	ldr.w	r5, [r0, #852]	; 0x354
void StreamDriver ::write_data(Fw::Buffer& fwBuffer) {
    2b36:	b082      	sub	sp, #8
    2b38:	460c      	mov	r4, r1
    FW_ASSERT(m_port_pointer != 0);
    2b3a:	b18d      	cbz	r5, 2b60 <Arduino::StreamDriver::write_data(Fw::Buffer&)+0x30>
    reinterpret_cast<Stream*>(m_port_pointer)
        ->write(reinterpret_cast<U8*>(fwBuffer.getData()), fwBuffer.getSize());
    2b3c:	682b      	ldr	r3, [r5, #0]
    2b3e:	4620      	mov	r0, r4
    2b40:	685e      	ldr	r6, [r3, #4]
    2b42:	f012 fcb9 	bl	154b8 <Fw::Buffer::getData() const>
    2b46:	4601      	mov	r1, r0
    2b48:	4620      	mov	r0, r4
    2b4a:	9101      	str	r1, [sp, #4]
    2b4c:	f012 fcb6 	bl	154bc <Fw::Buffer::getSize() const>
    2b50:	9901      	ldr	r1, [sp, #4]
    2b52:	4602      	mov	r2, r0
    2b54:	4633      	mov	r3, r6
    2b56:	4628      	mov	r0, r5
}
    2b58:	b002      	add	sp, #8
    2b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ->write(reinterpret_cast<U8*>(fwBuffer.getData()), fwBuffer.getSize());
    2b5e:	4718      	bx	r3
    2b60:	4606      	mov	r6, r0
    FW_ASSERT(m_port_pointer != 0);
    2b62:	211b      	movs	r1, #27
    2b64:	4802      	ldr	r0, [pc, #8]	; (2b70 <Arduino::StreamDriver::write_data(Fw::Buffer&)+0x40>)
    2b66:	f7fe fd51 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    reinterpret_cast<Stream*>(m_port_pointer)
    2b6a:	f8d6 5354 	ldr.w	r5, [r6, #852]	; 0x354
    2b6e:	e7e5      	b.n	2b3c <Arduino::StreamDriver::write_data(Fw::Buffer&)+0xc>
    2b70:	20001e00 	.word	0x20001e00

00002b74 <Arduino::StreamDriver::read_data(Fw::Buffer&)>:

void StreamDriver ::read_data(Fw::Buffer& fwBuffer) {
    2b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Stream* stream_ptr = reinterpret_cast<Stream*>(m_port_pointer);
    2b78:	f8d0 5354 	ldr.w	r5, [r0, #852]	; 0x354
    int byte = 0;
    NATIVE_UINT_TYPE count = 0;
    U8* raw_data = reinterpret_cast<U8*>(fwBuffer.getData());
    2b7c:	4608      	mov	r0, r1
void StreamDriver ::read_data(Fw::Buffer& fwBuffer) {
    2b7e:	460f      	mov	r7, r1
    NATIVE_UINT_TYPE count = 0;
    2b80:	2400      	movs	r4, #0
    U8* raw_data = reinterpret_cast<U8*>(fwBuffer.getData());
    2b82:	f012 fc99 	bl	154b8 <Fw::Buffer::getData() const>
    while ((stream_ptr->available() > 0) && (count < fwBuffer.getSize()) && ((byte = stream_ptr->read()) != -1)) {
    2b86:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2be4 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x70>
    2b8a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2be8 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x74>
    2b8e:	1e46      	subs	r6, r0, #1
    2b90:	e014      	b.n	2bbc <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x48>
        virtual int available() { return usb_serial_available(); }
    2b92:	f017 f93d 	bl	19e10 <usb_serial_available>
    2b96:	4603      	mov	r3, r0
    2b98:	4638      	mov	r0, r7
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	dd18      	ble.n	2bd0 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x5c>
    2b9e:	f012 fc8d 	bl	154bc <Fw::Buffer::getSize() const>
    2ba2:	42a0      	cmp	r0, r4
    2ba4:	d914      	bls.n	2bd0 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x5c>
    2ba6:	682b      	ldr	r3, [r5, #0]
    2ba8:	695b      	ldr	r3, [r3, #20]
    2baa:	454b      	cmp	r3, r9
    2bac:	d116      	bne.n	2bdc <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x68>
        virtual int read() { return usb_serial_getchar(); }
    2bae:	f017 f973 	bl	19e98 <usb_serial_getchar>
    2bb2:	1c43      	adds	r3, r0, #1
    2bb4:	d00c      	beq.n	2bd0 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x5c>
        *(raw_data + count) = static_cast<U8>(byte);
        count++;
    2bb6:	3401      	adds	r4, #1
        *(raw_data + count) = static_cast<U8>(byte);
    2bb8:	f806 0f01 	strb.w	r0, [r6, #1]!
    while ((stream_ptr->available() > 0) && (count < fwBuffer.getSize()) && ((byte = stream_ptr->read()) != -1)) {
    2bbc:	682b      	ldr	r3, [r5, #0]
    2bbe:	691b      	ldr	r3, [r3, #16]
    2bc0:	4543      	cmp	r3, r8
    2bc2:	d0e6      	beq.n	2b92 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x1e>
    2bc4:	4628      	mov	r0, r5
    2bc6:	4798      	blx	r3
    2bc8:	4603      	mov	r3, r0
    2bca:	4638      	mov	r0, r7
    2bcc:	2b00      	cmp	r3, #0
    2bce:	dce6      	bgt.n	2b9e <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x2a>
    }
    fwBuffer.setSize(count);
    2bd0:	4621      	mov	r1, r4
    2bd2:	4638      	mov	r0, r7
}
    2bd4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fwBuffer.setSize(count);
    2bd8:	f012 bc7c 	b.w	154d4 <Fw::Buffer::setSize(unsigned long)>
    while ((stream_ptr->available() > 0) && (count < fwBuffer.getSize()) && ((byte = stream_ptr->read()) != -1)) {
    2bdc:	4628      	mov	r0, r5
    2bde:	4798      	blx	r3
    2be0:	e7e7      	b.n	2bb2 <Arduino::StreamDriver::read_data(Fw::Buffer&)+0x3e>
    2be2:	bf00      	nop
    2be4:	00002a5d 	.word	0x00002a5d
    2be8:	00002af9 	.word	0x00002af9

00002bec <Fw::ObjectName::toChar() const>:
    ObjectName& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
    2bec:	3004      	adds	r0, #4
    2bee:	4770      	bx	lr

00002bf0 <Fw::ObjectName::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
    2bf0:	2051      	movs	r0, #81	; 0x51
    2bf2:	4770      	bx	lr

00002bf4 <Fw::ObjectName::~ObjectName()>:
    ~ObjectName() {}
    2bf4:	4b03      	ldr	r3, [pc, #12]	; (2c04 <Fw::ObjectName::~ObjectName()+0x10>)
    2bf6:	b510      	push	{r4, lr}
    2bf8:	4604      	mov	r4, r0
    2bfa:	6003      	str	r3, [r0, #0]
    2bfc:	f7fe fb1a 	bl	1234 <Fw::StringBase::~StringBase()>
    2c00:	4620      	mov	r0, r4
    2c02:	bd10      	pop	{r4, pc}
    2c04:	20002b80 	.word	0x20002b80

00002c08 <Fw::ObjectName::~ObjectName()>:
    2c08:	4b05      	ldr	r3, [pc, #20]	; (2c20 <Fw::ObjectName::~ObjectName()+0x18>)
    2c0a:	b510      	push	{r4, lr}
    2c0c:	4604      	mov	r4, r0
    2c0e:	6003      	str	r3, [r0, #0]
    2c10:	f7fe fb10 	bl	1234 <Fw::StringBase::~StringBase()>
    2c14:	2158      	movs	r1, #88	; 0x58
    2c16:	4620      	mov	r0, r4
    2c18:	f016 f85a 	bl	18cd0 <operator delete(void*, unsigned int)>
    2c1c:	4620      	mov	r0, r4
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	20002b80 	.word	0x20002b80

00002c24 <Arduino::StreamDriverComponentBase::lock()>:
  // ----------------------------------------------------------------------

  void StreamDriverComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
    2c24:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2c28:	f010 be26 	b.w	13878 <Os::Mutex::lock()>

00002c2c <Arduino::StreamDriverComponentBase::unLock()>:
  }

  void StreamDriverComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
    2c2c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2c30:	f010 be76 	b.w	13920 <Os::Mutex::unLock()>

00002c34 <Arduino::StreamDriverComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_schedIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    2c34:	b570      	push	{r4, r5, r6, lr}
    2c36:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    2c38:	4604      	mov	r4, r0
  {
    2c3a:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    2c3c:	b178      	cbz	r0, 2c5e <Arduino::StreamDriverComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x2a>
    FW_ASSERT(
    2c3e:	2d00      	cmp	r5, #0
    2c40:	dd05      	ble.n	2c4e <Arduino::StreamDriverComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x1a>
    2c42:	f240 1299 	movw	r2, #409	; 0x199
    2c46:	4629      	mov	r1, r5
    2c48:	4808      	ldr	r0, [pc, #32]	; (2c6c <Arduino::StreamDriverComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    2c4a:	f7fe fced 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->schedIn_handler(
    2c4e:	6823      	ldr	r3, [r4, #0]
    2c50:	4632      	mov	r2, r6
    2c52:	4629      	mov	r1, r5
    2c54:	4620      	mov	r0, r4
    2c56:	691b      	ldr	r3, [r3, #16]
    StreamDriverComponentBase* compPtr = static_cast<StreamDriverComponentBase*>(callComp);
    compPtr->schedIn_handlerBase(
      portNum,
      context
    );
  }
    2c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->schedIn_handler(
    2c5c:	4718      	bx	r3
    FW_ASSERT(callComp);
    2c5e:	f240 211d 	movw	r1, #541	; 0x21d
    2c62:	4802      	ldr	r0, [pc, #8]	; (2c6c <Arduino::StreamDriverComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    2c64:	f7fe fcd2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    2c68:	e7e9      	b.n	2c3e <Arduino::StreamDriverComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0xa>
    2c6a:	bf00      	nop
    2c6c:	20001fd0 	.word	0x20001fd0

00002c70 <Arduino::StreamDriverComponentBase::init(long)>:
  {
    2c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c74:	4604      	mov	r4, r0
    2c76:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    2c78:	f00f f932 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    2c7c:	4f5d      	ldr	r7, [pc, #372]	; (2df4 <Arduino::StreamDriverComponentBase::init(long)+0x184>)
      this->m_schedIn_InputPort[port].init();
    2c7e:	f104 0864 	add.w	r8, r4, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    2c82:	4d5d      	ldr	r5, [pc, #372]	; (2df8 <Arduino::StreamDriverComponentBase::init(long)+0x188>)
    const char* toChar() const { return this->m_buf; }
    2c84:	f104 0608 	add.w	r6, r4, #8
      this->m_allocate_OutputPort[port].init();
    2c88:	f504 79a2 	add.w	r9, r4, #324	; 0x144
      this->m_schedIn_InputPort[port].init();
    2c8c:	4640      	mov	r0, r8
    2c8e:	f00e fa15 	bl	110bc <Svc::InputSchedPort::init()>
      this->m_schedIn_InputPort[port].addCallComp(
    2c92:	4a5a      	ldr	r2, [pc, #360]	; (2dfc <Arduino::StreamDriverComponentBase::init(long)+0x18c>)
    2c94:	4621      	mov	r1, r4
    2c96:	4640      	mov	r0, r8
    2c98:	f00e f974 	bl	10f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_schedIn_InputPort[port].setPortNum(port);
    2c9c:	2100      	movs	r1, #0
    2c9e:	4640      	mov	r0, r8
    2ca0:	f015 f818 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    2ca4:	4668      	mov	r0, sp
    2ca6:	f7fe fabb 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    2caa:	4639      	mov	r1, r7
    2cac:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    2cae:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    2cb0:	f7fe fb1e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    2cb4:	2300      	movs	r3, #0
    2cb6:	4632      	mov	r2, r6
    2cb8:	4951      	ldr	r1, [pc, #324]	; (2e00 <Arduino::StreamDriverComponentBase::init(long)+0x190>)
    2cba:	4668      	mov	r0, sp
    2cbc:	f7fe fae6 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
    2cc0:	a901      	add	r1, sp, #4
    2cc2:	4640      	mov	r0, r8
      this->m_send_InputPort[port].init();
    2cc4:	f104 08d4 	add.w	r8, r4, #212	; 0xd4
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
    2cc8:	f015 f96a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    2ccc:	4668      	mov	r0, sp
    2cce:	9500      	str	r5, [sp, #0]
    2cd0:	f7fe fab0 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_send_InputPort[port].init();
    2cd4:	4640      	mov	r0, r8
    2cd6:	f00a f961 	bl	cf9c <Drv::InputByteStreamSendPort::init()>
      this->m_send_InputPort[port].addCallComp(
    2cda:	4a4a      	ldr	r2, [pc, #296]	; (2e04 <Arduino::StreamDriverComponentBase::init(long)+0x194>)
    2cdc:	4621      	mov	r1, r4
    2cde:	4640      	mov	r0, r8
    2ce0:	f00a f8e0 	bl	cea4 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))>
      this->m_send_InputPort[port].setPortNum(port);
    2ce4:	2100      	movs	r1, #0
    2ce6:	4640      	mov	r0, r8
    2ce8:	f014 fff4 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    2cec:	4668      	mov	r0, sp
    2cee:	f7fe fa97 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    2cf2:	4639      	mov	r1, r7
    2cf4:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    2cf6:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    2cf8:	f7fe fafa 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    2cfc:	4632      	mov	r2, r6
    2cfe:	2300      	movs	r3, #0
    2d00:	4941      	ldr	r1, [pc, #260]	; (2e08 <Arduino::StreamDriverComponentBase::init(long)+0x198>)
    2d02:	4668      	mov	r0, sp
    2d04:	f7fe fac2 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_send_InputPort[port].setObjName(portName.toChar());
    2d08:	a901      	add	r1, sp, #4
    2d0a:	4640      	mov	r0, r8
      this->m_ready_OutputPort[port].init();
    2d0c:	f504 7807 	add.w	r8, r4, #540	; 0x21c
      this->m_send_InputPort[port].setObjName(portName.toChar());
    2d10:	f015 f946 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    2d14:	4668      	mov	r0, sp
    2d16:	9500      	str	r5, [sp, #0]
    2d18:	f7fe fa8c 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_allocate_OutputPort[port].init();
    2d1c:	4648      	mov	r0, r9
    2d1e:	f012 fca7 	bl	15670 <Fw::OutputBufferGetPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    2d22:	4668      	mov	r0, sp
    2d24:	f7fe fa7c 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    2d28:	4639      	mov	r1, r7
    2d2a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    2d2c:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    2d2e:	f7fe fadf 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    2d32:	4632      	mov	r2, r6
    2d34:	2300      	movs	r3, #0
    2d36:	4935      	ldr	r1, [pc, #212]	; (2e0c <Arduino::StreamDriverComponentBase::init(long)+0x19c>)
    2d38:	4668      	mov	r0, sp
    2d3a:	f7fe faa7 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_allocate_OutputPort[port].setObjName(portName.toChar());
    2d3e:	a901      	add	r1, sp, #4
    2d40:	4648      	mov	r0, r9
      this->m_deallocate_OutputPort[port].init();
    2d42:	f504 79d8 	add.w	r9, r4, #432	; 0x1b0
      this->m_allocate_OutputPort[port].setObjName(portName.toChar());
    2d46:	f015 f92b 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    2d4a:	4668      	mov	r0, sp
    2d4c:	9500      	str	r5, [sp, #0]
    2d4e:	f7fe fa71 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_deallocate_OutputPort[port].init();
    2d52:	4648      	mov	r0, r9
      this->m_recv_OutputPort[port].init();
    2d54:	f504 7422 	add.w	r4, r4, #648	; 0x288
      this->m_deallocate_OutputPort[port].init();
    2d58:	f012 fdba 	bl	158d0 <Fw::OutputBufferSendPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    2d5c:	4668      	mov	r0, sp
    2d5e:	f7fe fa5f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    2d62:	4639      	mov	r1, r7
    2d64:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    2d66:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    2d68:	f7fe fac2 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    2d6c:	4632      	mov	r2, r6
    2d6e:	2300      	movs	r3, #0
    2d70:	4927      	ldr	r1, [pc, #156]	; (2e10 <Arduino::StreamDriverComponentBase::init(long)+0x1a0>)
    2d72:	4668      	mov	r0, sp
    2d74:	f7fe fa8a 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_deallocate_OutputPort[port].setObjName(portName.toChar());
    2d78:	a901      	add	r1, sp, #4
    2d7a:	4648      	mov	r0, r9
    2d7c:	f015 f910 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    2d80:	4668      	mov	r0, sp
    2d82:	9500      	str	r5, [sp, #0]
    2d84:	f7fe fa56 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_ready_OutputPort[port].init();
    2d88:	4640      	mov	r0, r8
    2d8a:	f009 fef3 	bl	cb74 <Drv::OutputByteStreamReadyPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    2d8e:	4668      	mov	r0, sp
    2d90:	f7fe fa46 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    2d94:	4639      	mov	r1, r7
    2d96:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    2d98:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    2d9a:	f7fe faa9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    2d9e:	4632      	mov	r2, r6
    2da0:	2300      	movs	r3, #0
    2da2:	491c      	ldr	r1, [pc, #112]	; (2e14 <Arduino::StreamDriverComponentBase::init(long)+0x1a4>)
    2da4:	4668      	mov	r0, sp
    2da6:	f7fe fa71 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_ready_OutputPort[port].setObjName(portName.toChar());
    2daa:	a901      	add	r1, sp, #4
    2dac:	4640      	mov	r0, r8
    2dae:	f015 f8f7 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    2db2:	4668      	mov	r0, sp
    2db4:	9500      	str	r5, [sp, #0]
    2db6:	f7fe fa3d 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_recv_OutputPort[port].init();
    2dba:	4620      	mov	r0, r4
    2dbc:	f00a f82a 	bl	ce14 <Drv::OutputByteStreamRecvPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    2dc0:	4668      	mov	r0, sp
    2dc2:	f7fe fa2d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    2dc6:	4639      	mov	r1, r7
    2dc8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    2dca:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    2dcc:	f7fe fa90 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    2dd0:	4632      	mov	r2, r6
    2dd2:	2300      	movs	r3, #0
    2dd4:	4910      	ldr	r1, [pc, #64]	; (2e18 <Arduino::StreamDriverComponentBase::init(long)+0x1a8>)
    2dd6:	4668      	mov	r0, sp
    2dd8:	f7fe fa58 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_recv_OutputPort[port].setObjName(portName.toChar());
    2ddc:	a901      	add	r1, sp, #4
    2dde:	4620      	mov	r0, r4
    2de0:	f015 f8de 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    2de4:	4668      	mov	r0, sp
    2de6:	9500      	str	r5, [sp, #0]
    2de8:	f7fe fa24 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    2dec:	b017      	add	sp, #92	; 0x5c
    2dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2df2:	bf00      	nop
    2df4:	20001d2c 	.word	0x20001d2c
    2df8:	20002b80 	.word	0x20002b80
    2dfc:	00002c35 	.word	0x00002c35
    2e00:	20002028 	.word	0x20002028
    2e04:	00002ff1 	.word	0x00002ff1
    2e08:	20002044 	.word	0x20002044
    2e0c:	2000205c 	.word	0x2000205c
    2e10:	20002078 	.word	0x20002078
    2e14:	20002098 	.word	0x20002098
    2e18:	200020b4 	.word	0x200020b4

00002e1c <Arduino::StreamDriverComponentBase::get_schedIn_InputPort(long)>:
  {
    2e1c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    2e1e:	1e0c      	subs	r4, r1, #0
  {
    2e20:	4605      	mov	r5, r0
    FW_ASSERT(
    2e22:	dd03      	ble.n	2e2c <Arduino::StreamDriverComponentBase::get_schedIn_InputPort(long)+0x10>
    2e24:	229e      	movs	r2, #158	; 0x9e
    2e26:	4804      	ldr	r0, [pc, #16]	; (2e38 <Arduino::StreamDriverComponentBase::get_schedIn_InputPort(long)+0x1c>)
    2e28:	f7fe fbfe 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_schedIn_InputPort[portNum];
    2e2c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2e30:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    2e34:	3064      	adds	r0, #100	; 0x64
    2e36:	bd38      	pop	{r3, r4, r5, pc}
    2e38:	20001fd0 	.word	0x20001fd0

00002e3c <Arduino::StreamDriverComponentBase::get_send_InputPort(long)>:
  {
    2e3c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    2e3e:	1e0c      	subs	r4, r1, #0
  {
    2e40:	4605      	mov	r5, r0
    FW_ASSERT(
    2e42:	dd03      	ble.n	2e4c <Arduino::StreamDriverComponentBase::get_send_InputPort(long)+0x10>
    2e44:	22a9      	movs	r2, #169	; 0xa9
    2e46:	4804      	ldr	r0, [pc, #16]	; (2e58 <Arduino::StreamDriverComponentBase::get_send_InputPort(long)+0x1c>)
    2e48:	f7fe fbee 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_send_InputPort[portNum];
    2e4c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2e50:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    2e54:	30d4      	adds	r0, #212	; 0xd4
    2e56:	bd38      	pop	{r3, r4, r5, pc}
    2e58:	20001fd0 	.word	0x20001fd0

00002e5c <Arduino::StreamDriverComponentBase::set_allocate_OutputPort(long, Fw::InputBufferGetPort*)>:
  {
    2e5c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    2e5e:	1e0d      	subs	r5, r1, #0
  {
    2e60:	4604      	mov	r4, r0
    2e62:	4616      	mov	r6, r2
    FW_ASSERT(
    2e64:	dd03      	ble.n	2e6e <Arduino::StreamDriverComponentBase::set_allocate_OutputPort(long, Fw::InputBufferGetPort*)+0x12>
    2e66:	22bb      	movs	r2, #187	; 0xbb
    2e68:	4806      	ldr	r0, [pc, #24]	; (2e84 <Arduino::StreamDriverComponentBase::set_allocate_OutputPort(long, Fw::InputBufferGetPort*)+0x28>)
    2e6a:	f7fe fbdd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_allocate_OutputPort[portNum].addCallPort(port);
    2e6e:	236c      	movs	r3, #108	; 0x6c
    2e70:	4631      	mov	r1, r6
    2e72:	fb03 4005 	mla	r0, r3, r5, r4
  }
    2e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_allocate_OutputPort[portNum].addCallPort(port);
    2e7a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2e7e:	f012 bbc5 	b.w	1560c <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)>
    2e82:	bf00      	nop
    2e84:	20001fd0 	.word	0x20001fd0

00002e88 <Arduino::StreamDriverComponentBase::set_deallocate_OutputPort(long, Fw::InputBufferSendPort*)>:
  {
    2e88:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    2e8a:	1e0d      	subs	r5, r1, #0
  {
    2e8c:	4604      	mov	r4, r0
    2e8e:	4616      	mov	r6, r2
    FW_ASSERT(
    2e90:	dd03      	ble.n	2e9a <Arduino::StreamDriverComponentBase::set_deallocate_OutputPort(long, Fw::InputBufferSendPort*)+0x12>
    2e92:	22c9      	movs	r2, #201	; 0xc9
    2e94:	4806      	ldr	r0, [pc, #24]	; (2eb0 <Arduino::StreamDriverComponentBase::set_deallocate_OutputPort(long, Fw::InputBufferSendPort*)+0x28>)
    2e96:	f7fe fbc7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_deallocate_OutputPort[portNum].addCallPort(port);
    2e9a:	236c      	movs	r3, #108	; 0x6c
    2e9c:	4631      	mov	r1, r6
    2e9e:	fb03 4005 	mla	r0, r3, r5, r4
  }
    2ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_deallocate_OutputPort[portNum].addCallPort(port);
    2ea6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    2eaa:	f012 bcc1 	b.w	15830 <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)>
    2eae:	bf00      	nop
    2eb0:	20001fd0 	.word	0x20001fd0

00002eb4 <Arduino::StreamDriverComponentBase::set_recv_OutputPort(long, Drv::InputByteStreamRecvPort*)>:
  {
    2eb4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    2eb6:	1e0d      	subs	r5, r1, #0
  {
    2eb8:	4604      	mov	r4, r0
    2eba:	4616      	mov	r6, r2
    FW_ASSERT(
    2ebc:	dd03      	ble.n	2ec6 <Arduino::StreamDriverComponentBase::set_recv_OutputPort(long, Drv::InputByteStreamRecvPort*)+0x12>
    2ebe:	22e5      	movs	r2, #229	; 0xe5
    2ec0:	4806      	ldr	r0, [pc, #24]	; (2edc <Arduino::StreamDriverComponentBase::set_recv_OutputPort(long, Drv::InputByteStreamRecvPort*)+0x28>)
    2ec2:	f7fe fbb1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_recv_OutputPort[portNum].addCallPort(port);
    2ec6:	236c      	movs	r3, #108	; 0x6c
    2ec8:	4631      	mov	r1, r6
    2eca:	fb03 4005 	mla	r0, r3, r5, r4
  }
    2ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_recv_OutputPort[portNum].addCallPort(port);
    2ed2:	f500 7022 	add.w	r0, r0, #648	; 0x288
    2ed6:	f009 bf3f 	b.w	cd58 <Drv::OutputByteStreamRecvPort::addCallPort(Drv::InputByteStreamRecvPort*)>
    2eda:	bf00      	nop
    2edc:	20001fd0 	.word	0x20001fd0

00002ee0 <Arduino::StreamDriverComponentBase::StreamDriverComponentBase(char const*)>:
  StreamDriverComponentBase ::
    2ee0:	b510      	push	{r4, lr}
    2ee2:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    2ee4:	f00e ffee 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    2ee8:	4b0f      	ldr	r3, [pc, #60]	; (2f28 <Arduino::StreamDriverComponentBase::StreamDriverComponentBase(char const*)+0x48>)
    2eea:	4620      	mov	r0, r4
    2eec:	f840 3b64 	str.w	r3, [r0], #100
    2ef0:	f00e f83c 	bl	10f6c <Svc::InputSchedPort::InputSchedPort()>
    2ef4:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    2ef8:	f009 ffc8 	bl	ce8c <Drv::InputByteStreamSendPort::InputByteStreamSendPort()>
    2efc:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    2f00:	f012 fb78 	bl	155f4 <Fw::OutputBufferGetPort::OutputBufferGetPort()>
    2f04:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    2f08:	f012 fc86 	bl	15818 <Fw::OutputBufferSendPort::OutputBufferSendPort()>
    2f0c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    2f10:	f009 fdf2 	bl	caf8 <Drv::OutputByteStreamReadyPort::OutputByteStreamReadyPort()>
    2f14:	f504 7022 	add.w	r0, r4, #648	; 0x288
    2f18:	f009 ff12 	bl	cd40 <Drv::OutputByteStreamRecvPort::OutputByteStreamRecvPort()>
    2f1c:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    2f20:	f010 fc8e 	bl	13840 <Os::Mutex::Mutex()>
  }
    2f24:	4620      	mov	r0, r4
    2f26:	bd10      	pop	{r4, pc}
    2f28:	20004084 	.word	0x20004084

00002f2c <Arduino::StreamDriverComponentBase::isConnected_ready_OutputPort(long)>:
  {
    2f2c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    2f2e:	1e0d      	subs	r5, r1, #0
  {
    2f30:	4604      	mov	r4, r0
    FW_ASSERT(
    2f32:	dd04      	ble.n	2f3e <Arduino::StreamDriverComponentBase::isConnected_ready_OutputPort(long)+0x12>
    2f34:	f240 1279 	movw	r2, #377	; 0x179
    2f38:	4805      	ldr	r0, [pc, #20]	; (2f50 <Arduino::StreamDriverComponentBase::isConnected_ready_OutputPort(long)+0x24>)
    2f3a:	f7fe fb75 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_ready_OutputPort[portNum].isConnected();
    2f3e:	236c      	movs	r3, #108	; 0x6c
    2f40:	fb03 4005 	mla	r0, r3, r5, r4
  }
    2f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_ready_OutputPort[portNum].isConnected();
    2f48:	f500 7007 	add.w	r0, r0, #540	; 0x21c
    2f4c:	f014 bf7e 	b.w	17e4c <Fw::PortBase::isConnected() const>
    2f50:	20001fd0 	.word	0x20001fd0

00002f54 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)>:
  {
    2f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(
    2f58:	1e16      	subs	r6, r2, #0
  {
    2f5a:	b082      	sub	sp, #8
    2f5c:	4605      	mov	r5, r0
    2f5e:	460c      	mov	r4, r1
    2f60:	461f      	mov	r7, r3
    FW_ASSERT(
    2f62:	dd05      	ble.n	2f70 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x1c>
    2f64:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    2f68:	4631      	mov	r1, r6
    2f6a:	481d      	ldr	r0, [pc, #116]	; (2fe0 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x8c>)
    2f6c:	f7fe fb5c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      {
    2f70:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2fec <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x98>
    2f74:	4628      	mov	r0, r5
    2f76:	f7fd fadb 	bl	530 <Fw::Serializable::Serializable()>
        this->e = SEND_OK;
    2f7a:	2200      	movs	r2, #0
      {
    2f7c:	f8c5 8000 	str.w	r8, [r5]
    this->lock();
    2f80:	6823      	ldr	r3, [r4, #0]
    2f82:	699b      	ldr	r3, [r3, #24]
        this->e = SEND_OK;
    2f84:	712a      	strb	r2, [r5, #4]
    2f86:	4a17      	ldr	r2, [pc, #92]	; (2fe4 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x90>)
    2f88:	4293      	cmp	r3, r2
    2f8a:	d120      	bne.n	2fce <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x7a>
    this->m_guardedPortMutex.lock();
    2f8c:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    2f90:	f010 fc72 	bl	13878 <Os::Mutex::lock()>
    retVal = this->send_handler(
    2f94:	6821      	ldr	r1, [r4, #0]
    2f96:	4632      	mov	r2, r6
    2f98:	463b      	mov	r3, r7
    2f9a:	4668      	mov	r0, sp
    2f9c:	694e      	ldr	r6, [r1, #20]
    2f9e:	4621      	mov	r1, r4
    2fa0:	47b0      	blx	r6
    );
    2fa2:	4669      	mov	r1, sp
    2fa4:	4628      	mov	r0, r5
    2fa6:	f00a f953 	bl	d250 <Drv::SendStatus::operator=(Drv::SendStatus const&)>
  class SendStatus :
    2faa:	4668      	mov	r0, sp
    2fac:	f8cd 8000 	str.w	r8, [sp]
    2fb0:	f7fd fac4 	bl	53c <Fw::Serializable::~Serializable()>
    this->unLock();
    2fb4:	6823      	ldr	r3, [r4, #0]
    2fb6:	4a0c      	ldr	r2, [pc, #48]	; (2fe8 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x94>)
    2fb8:	69db      	ldr	r3, [r3, #28]
    2fba:	4293      	cmp	r3, r2
    2fbc:	d10a      	bne.n	2fd4 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x80>
    this->m_guardedPortMutex.unLock();
    2fbe:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    2fc2:	f010 fcad 	bl	13920 <Os::Mutex::unLock()>
  }
    2fc6:	4628      	mov	r0, r5
    2fc8:	b002      	add	sp, #8
    2fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    this->lock();
    2fce:	4620      	mov	r0, r4
    2fd0:	4798      	blx	r3
    2fd2:	e7df      	b.n	2f94 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)+0x40>
    this->unLock();
    2fd4:	4620      	mov	r0, r4
    2fd6:	4798      	blx	r3
  }
    2fd8:	4628      	mov	r0, r5
    2fda:	b002      	add	sp, #8
    2fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fe0:	20001fd0 	.word	0x20001fd0
    2fe4:	00002c25 	.word	0x00002c25
    2fe8:	00002c2d 	.word	0x00002c2d
    2fec:	2000379c 	.word	0x2000379c

00002ff0 <Arduino::StreamDriverComponentBase::m_p_send_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)>:
    m_p_send_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& sendBuffer
    )
  {
    2ff0:	b530      	push	{r4, r5, lr}
    2ff2:	4604      	mov	r4, r0
    2ff4:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    2ff6:	460d      	mov	r5, r1
    2ff8:	b131      	cbz	r1, 3008 <Arduino::StreamDriverComponentBase::m_p_send_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)+0x18>
    StreamDriverComponentBase* compPtr = static_cast<StreamDriverComponentBase*>(callComp);
    return compPtr->send_handlerBase(
      portNum,
      sendBuffer
    );
    2ffa:	4620      	mov	r0, r4
    2ffc:	4629      	mov	r1, r5
    2ffe:	f7ff ffa9 	bl	2f54 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)>
  }
    3002:	4620      	mov	r0, r4
    3004:	b003      	add	sp, #12
    3006:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(callComp);
    3008:	f44f 710b 	mov.w	r1, #556	; 0x22c
    300c:	4806      	ldr	r0, [pc, #24]	; (3028 <Arduino::StreamDriverComponentBase::m_p_send_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)+0x38>)
    300e:	e9cd 2300 	strd	r2, r3, [sp]
    3012:	f7fe fafb 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    );
    3016:	4620      	mov	r0, r4
    3018:	4629      	mov	r1, r5
    FW_ASSERT(callComp);
    301a:	e9dd 2300 	ldrd	r2, r3, [sp]
    );
    301e:	f7ff ff99 	bl	2f54 <Arduino::StreamDriverComponentBase::send_handlerBase(long, Fw::Buffer&)>
  }
    3022:	4620      	mov	r0, r4
    3024:	b003      	add	sp, #12
    3026:	bd30      	pop	{r4, r5, pc}
    3028:	20001fd0 	.word	0x20001fd0

0000302c <Arduino::StreamDriverComponentBase::allocate_out(long, unsigned long)>:
  {
    302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    302e:	1e15      	subs	r5, r2, #0
  {
    3030:	4606      	mov	r6, r0
    3032:	460c      	mov	r4, r1
    3034:	461f      	mov	r7, r3
    FW_ASSERT(
    3036:	dd05      	ble.n	3044 <Arduino::StreamDriverComponentBase::allocate_out(long, unsigned long)+0x18>
    3038:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
    303c:	4629      	mov	r1, r5
    303e:	4807      	ldr	r0, [pc, #28]	; (305c <Arduino::StreamDriverComponentBase::allocate_out(long, unsigned long)+0x30>)
    3040:	f7fe faf2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    );
    3044:	236c      	movs	r3, #108	; 0x6c
    3046:	4630      	mov	r0, r6
    3048:	463a      	mov	r2, r7
    304a:	fb03 4105 	mla	r1, r3, r5, r4
    304e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    3052:	f012 faeb 	bl	1562c <Fw::OutputBufferGetPort::invoke(unsigned long) const>
  }
    3056:	4630      	mov	r0, r6
    3058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305a:	bf00      	nop
    305c:	20001fd0 	.word	0x20001fd0

00003060 <Arduino::StreamDriverComponentBase::deallocate_out(long, Fw::Buffer&)>:
  {
    3060:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    3062:	1e0d      	subs	r5, r1, #0
  {
    3064:	4604      	mov	r4, r0
    3066:	4616      	mov	r6, r2
    FW_ASSERT(
    3068:	dd04      	ble.n	3074 <Arduino::StreamDriverComponentBase::deallocate_out(long, Fw::Buffer&)+0x14>
    306a:	f240 12db 	movw	r2, #475	; 0x1db
    306e:	4806      	ldr	r0, [pc, #24]	; (3088 <Arduino::StreamDriverComponentBase::deallocate_out(long, Fw::Buffer&)+0x28>)
    3070:	f7fe fada 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_deallocate_OutputPort[portNum].invoke(
    3074:	236c      	movs	r3, #108	; 0x6c
    3076:	4631      	mov	r1, r6
    3078:	fb03 4005 	mla	r0, r3, r5, r4
  }
    307c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_deallocate_OutputPort[portNum].invoke(
    3080:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    3084:	f012 bbe4 	b.w	15850 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const>
    3088:	20001fd0 	.word	0x20001fd0

0000308c <Arduino::StreamDriverComponentBase::ready_out(long)>:
  {
    308c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    308e:	1e0d      	subs	r5, r1, #0
  {
    3090:	4604      	mov	r4, r0
    FW_ASSERT(
    3092:	dd04      	ble.n	309e <Arduino::StreamDriverComponentBase::ready_out(long)+0x12>
    3094:	f240 12e7 	movw	r2, #487	; 0x1e7
    3098:	4805      	ldr	r0, [pc, #20]	; (30b0 <Arduino::StreamDriverComponentBase::ready_out(long)+0x24>)
    309a:	f7fe fac5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_ready_OutputPort[portNum].invoke();
    309e:	236c      	movs	r3, #108	; 0x6c
    30a0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    30a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    this->m_ready_OutputPort[portNum].invoke();
    30a8:	f500 7007 	add.w	r0, r0, #540	; 0x21c
    30ac:	f009 bd30 	b.w	cb10 <Drv::OutputByteStreamReadyPort::invoke() const>
    30b0:	20001fd0 	.word	0x20001fd0

000030b4 <Arduino::StreamDriverComponentBase::recv_out(long, Fw::Buffer&, Drv::RecvStatus const&)>:
  {
    30b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    30b6:	1e0d      	subs	r5, r1, #0
  {
    30b8:	4604      	mov	r4, r0
    30ba:	4616      	mov	r6, r2
    30bc:	461f      	mov	r7, r3
    FW_ASSERT(
    30be:	dd04      	ble.n	30ca <Arduino::StreamDriverComponentBase::recv_out(long, Fw::Buffer&, Drv::RecvStatus const&)+0x16>
    30c0:	f240 12f5 	movw	r2, #501	; 0x1f5
    30c4:	4806      	ldr	r0, [pc, #24]	; (30e0 <Arduino::StreamDriverComponentBase::recv_out(long, Fw::Buffer&, Drv::RecvStatus const&)+0x2c>)
    30c6:	f7fe faaf 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_recv_OutputPort[portNum].invoke(
    30ca:	236c      	movs	r3, #108	; 0x6c
    30cc:	463a      	mov	r2, r7
    30ce:	4631      	mov	r1, r6
    30d0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    30d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    this->m_recv_OutputPort[portNum].invoke(
    30d8:	f500 7022 	add.w	r0, r0, #648	; 0x288
    30dc:	f009 be4c 	b.w	cd78 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const>
    30e0:	20001fd0 	.word	0x20001fd0

000030e4 <Arduino::StreamDriverComponentBase::~StreamDriverComponentBase()>:
  StreamDriverComponentBase ::
    30e4:	b510      	push	{r4, lr}
    ~StreamDriverComponentBase()
    30e6:	4b17      	ldr	r3, [pc, #92]	; (3144 <Arduino::StreamDriverComponentBase::~StreamDriverComponentBase()+0x60>)
  StreamDriverComponentBase ::
    30e8:	4604      	mov	r4, r0
    ~StreamDriverComponentBase()
    30ea:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    30ee:	6023      	str	r3, [r4, #0]
    30f0:	f010 f95c 	bl	133ac <Os::Mutex::~Mutex()>
    30f4:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
    30f8:	f504 7022 	add.w	r0, r4, #648	; 0x288
    30fc:	685b      	ldr	r3, [r3, #4]
    30fe:	4798      	blx	r3
    3100:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    3104:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    3108:	685b      	ldr	r3, [r3, #4]
    310a:	4798      	blx	r3
    310c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3110:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    3114:	685b      	ldr	r3, [r3, #4]
    3116:	4798      	blx	r3
    3118:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    311c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    3120:	685b      	ldr	r3, [r3, #4]
    3122:	4798      	blx	r3
    3124:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    3128:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    312c:	685b      	ldr	r3, [r3, #4]
    312e:	4798      	blx	r3
    3130:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3132:	f104 0064 	add.w	r0, r4, #100	; 0x64
    3136:	685b      	ldr	r3, [r3, #4]
    3138:	4798      	blx	r3
    313a:	4620      	mov	r0, r4
    313c:	f00e fe6a 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    3140:	4620      	mov	r0, r4
    3142:	bd10      	pop	{r4, pc}
    3144:	20004084 	.word	0x20004084

00003148 <Components::Led::~Led()>:
    blinking(true)
  {

  }

  Led ::
    3148:	b510      	push	{r4, lr}
    ~Led()
    314a:	4a07      	ldr	r2, [pc, #28]	; (3168 <Components::Led::~Led()+0x20>)
  Led ::
    314c:	4604      	mov	r4, r0
#include "Fw/Types/String.hpp"

namespace Fw {

  //! On and off states
  class On :
    314e:	4b07      	ldr	r3, [pc, #28]	; (316c <Components::Led::~Led()+0x24>)
    3150:	f500 60af 	add.w	r0, r0, #1400	; 0x578
    ~Led()
    3154:	6022      	str	r2, [r4, #0]
    3156:	f8c4 3578 	str.w	r3, [r4, #1400]	; 0x578
    315a:	f7fd f9ef 	bl	53c <Fw::Serializable::~Serializable()>
    315e:	4620      	mov	r0, r4
    3160:	f000 fdc6 	bl	3cf0 <Components::LedComponentBase::~LedComponentBase()>
  {

  }
    3164:	4620      	mov	r0, r4
    3166:	bd10      	pop	{r4, pc}
    3168:	20002b00 	.word	0x20002b00
    316c:	2000326c 	.word	0x2000326c

00003170 <Components::Led::parameterUpdated(unsigned long)>:

  void Led ::parameterUpdated(FwPrmIdType id) {
    3170:	b530      	push	{r4, r5, lr}
    3172:	b083      	sub	sp, #12
    3174:	4604      	mov	r4, r0
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value of UNINIT)
      ParamValid()
      {
    3176:	4d0d      	ldr	r5, [pc, #52]	; (31ac <Components::Led::parameterUpdated(unsigned long)+0x3c>)
    3178:	4668      	mov	r0, sp
    317a:	f7fd f9d9 	bl	530 <Fw::Serializable::Serializable()>
        this->e = UNINIT;
    317e:	2300      	movs	r3, #0
    // Read back the parameter value
    Fw::ParamValid isValid;
    U32 interval = this->paramGet_BLINK_INTERVAL(isValid);
    3180:	4669      	mov	r1, sp
    3182:	4620      	mov	r0, r4
      {
    3184:	9500      	str	r5, [sp, #0]
        this->e = UNINIT;
    3186:	f88d 3004 	strb.w	r3, [sp, #4]
    318a:	f000 fcad 	bl	3ae8 <Components::LedComponentBase::paramGet_BLINK_INTERVAL(Fw::ParamValid&)>
      }

      //! Equality operator
      bool operator==(T e1) const
      {
        return this->e == e1;
    318e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    // NOTE: isValid is always VALID in parameterUpdated as it was just properly set
    FW_ASSERT(isValid == Fw::ParamValid::VALID, isValid);
    3192:	2901      	cmp	r1, #1
    3194:	d003      	beq.n	319e <Components::Led::parameterUpdated(unsigned long)+0x2e>
    3196:	2225      	movs	r2, #37	; 0x25
    3198:	4805      	ldr	r0, [pc, #20]	; (31b0 <Components::Led::parameterUpdated(unsigned long)+0x40>)
    319a:	f7fe fa45 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
  class ParamValid :
    319e:	4668      	mov	r0, sp
    31a0:	9500      	str	r5, [sp, #0]
    31a2:	f7fd f9cb 	bl	53c <Fw::Serializable::~Serializable()>
    // Check the parameter ID is expected
    if (PARAMID_BLINK_INTERVAL == id) {
        // Emit the blink interval set event
        // TODO: Add an event with, severity activity high, named BlinkIntervalSet that takes in an argument of type U32 to report the blink interval.
    }
}
    31a6:	b003      	add	sp, #12
    31a8:	bd30      	pop	{r4, r5, pc}
    31aa:	bf00      	nop
    31ac:	20002ba8 	.word	0x20002ba8
    31b0:	20000620 	.word	0x20000620

000031b4 <Components::Led::run_handler(long, unsigned long)>:
  }
void Led ::
        run_handler(
            const NATIVE_INT_TYPE portNum,
            NATIVE_UINT_TYPE context)
    {
    31b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31b8:	b088      	sub	sp, #32
    31ba:	4604      	mov	r4, r0
      {
    31bc:	4d36      	ldr	r5, [pc, #216]	; (3298 <Components::Led::run_handler(long, unsigned long)+0xe4>)
    31be:	4668      	mov	r0, sp
    31c0:	f7fd f9b6 	bl	530 <Fw::Serializable::Serializable()>
        this->e = UNINIT;
    31c4:	2200      	movs	r2, #0
        // Force interval to be 0 when invalid or not set
        interval = ((Fw::ParamValid::INVALID == isValid) || (Fw::ParamValid::UNINIT == isValid)) ? 0 : interval;

        // Only perform actions when set to blinking
        bool is_blinking = this->blinking;
        if (is_blinking)
    31c6:	f894 358c 	ldrb.w	r3, [r4, #1420]	; 0x58c
      {
    31ca:	9500      	str	r5, [sp, #0]
        this->e = UNINIT;
    31cc:	f88d 2004 	strb.w	r2, [sp, #4]
    31d0:	b933      	cbnz	r3, 31e0 <Components::Led::run_handler(long, unsigned long)+0x2c>
  class ParamValid :
    31d2:	4668      	mov	r0, sp
    31d4:	9500      	str	r5, [sp, #0]
    31d6:	f7fd f9b1 	bl	53c <Fw::Serializable::~Serializable()>
                this->state = new_state;
            }

            this->count = ((this->count + 1) >= interval) ? 0 : (this->count + 1);
        }
    }
    31da:	b008      	add	sp, #32
    31dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

      //! Copy constructor
      On(
          const On& obj //!< The source object
      )
      {
    31e0:	a802      	add	r0, sp, #8
    31e2:	4e2e      	ldr	r6, [pc, #184]	; (329c <Components::Led::run_handler(long, unsigned long)+0xe8>)
    31e4:	f7fd f9a4 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    31e8:	f894 357c 	ldrb.w	r3, [r4, #1404]	; 0x57c
            if ((0 == this->count) && (this->state == Fw::On::OFF))
    31ec:	f8d4 1588 	ldr.w	r1, [r4, #1416]	; 0x588
      {
    31f0:	9602      	str	r6, [sp, #8]
        this->e = obj.e;
    31f2:	f88d 300c 	strb.w	r3, [sp, #12]
    31f6:	b911      	cbnz	r1, 31fe <Components::Led::run_handler(long, unsigned long)+0x4a>
    31f8:	b14b      	cbz	r3, 320e <Components::Led::run_handler(long, unsigned long)+0x5a>
            else if (((interval / 2) == this->count) && (this->state == Fw::On::ON))
    31fa:	2b01      	cmp	r3, #1
    31fc:	d047      	beq.n	328e <Components::Led::run_handler(long, unsigned long)+0xda>
            this->count = ((this->count + 1) >= interval) ? 0 : (this->count + 1);
    31fe:	2300      	movs	r3, #0
  class On :
    3200:	a802      	add	r0, sp, #8
    3202:	9602      	str	r6, [sp, #8]
    3204:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    3208:	f7fd f998 	bl	53c <Fw::Serializable::~Serializable()>
    320c:	e7e1      	b.n	31d2 <Components::Led::run_handler(long, unsigned long)+0x1e>
                new_state = Fw::On::ON;
    320e:	2101      	movs	r1, #1
    3210:	a802      	add	r0, sp, #8
    3212:	f015 f865 	bl	182e0 <Fw::On::operator=(Fw::On::T)>
            if (this->state != new_state)
    3216:	f894 257c 	ldrb.w	r2, [r4, #1404]	; 0x57c
    321a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    321e:	429a      	cmp	r2, r3
    3220:	d0ed      	beq.n	31fe <Components::Led::run_handler(long, unsigned long)+0x4a>
                this->transitions = this->transitions + 1;
    3222:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
                if (this->isConnected_gpioSet_OutputPort(0))
    3226:	2100      	movs	r1, #0
                this->transitions = this->transitions + 1;
    3228:	f8d4 2584 	ldr.w	r2, [r4, #1412]	; 0x584
                if (this->isConnected_gpioSet_OutputPort(0))
    322c:	4620      	mov	r0, r4
                this->transitions = this->transitions + 1;
    322e:	3301      	adds	r3, #1
    3230:	f142 0200 	adc.w	r2, r2, #0
    3234:	f8c4 3580 	str.w	r3, [r4, #1408]	; 0x580
    3238:	f8c4 2584 	str.w	r2, [r4, #1412]	; 0x584
                if (this->isConnected_gpioSet_OutputPort(0))
    323c:	f000 fbac 	bl	3998 <Components::LedComponentBase::isConnected_gpioSet_OutputPort(long)>
    3240:	b1f8      	cbz	r0, 3282 <Components::Led::run_handler(long, unsigned long)+0xce>
                    this->gpioSet_out(0, (Fw::On::ON == new_state) ? Fw::Logic::HIGH : Fw::Logic::LOW);
    3242:	f89d 700c 	ldrb.w	r7, [sp, #12]

      //! Constructor (user-provided value)
      Logic(
          const T e1 //!< The raw enum value
      )
      {
    3246:	a804      	add	r0, sp, #16
    3248:	f8df 8058 	ldr.w	r8, [pc, #88]	; 32a4 <Components::Led::run_handler(long, unsigned long)+0xf0>
    324c:	f7fd f970 	bl	530 <Fw::Serializable::Serializable()>
    3250:	f1a7 0701 	sub.w	r7, r7, #1
    3254:	ab04      	add	r3, sp, #16
    3256:	2200      	movs	r2, #0
    3258:	4621      	mov	r1, r4
    325a:	fab7 f787 	clz	r7, r7
    325e:	a806      	add	r0, sp, #24
    3260:	f8cd 8010 	str.w	r8, [sp, #16]
    3264:	097f      	lsrs	r7, r7, #5
        this->e = e1;
    3266:	f88d 7014 	strb.w	r7, [sp, #20]
    326a:	f000 fba9 	bl	39c0 <Components::LedComponentBase::gpioSet_out(long, Fw::Logic const&)>
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Drv {

  class GpioStatus :
    326e:	4b0c      	ldr	r3, [pc, #48]	; (32a0 <Components::Led::run_handler(long, unsigned long)+0xec>)
    3270:	a806      	add	r0, sp, #24
    3272:	9306      	str	r3, [sp, #24]
    3274:	f7fd f962 	bl	53c <Fw::Serializable::~Serializable()>
  class Logic :
    3278:	a804      	add	r0, sp, #16
    327a:	f8cd 8010 	str.w	r8, [sp, #16]
    327e:	f7fd f95d 	bl	53c <Fw::Serializable::~Serializable()>
                this->state = new_state;
    3282:	a902      	add	r1, sp, #8
    3284:	f504 60af 	add.w	r0, r4, #1400	; 0x578
    3288:	f015 f826 	bl	182d8 <Fw::On::operator=(Fw::On const&)>
    328c:	e7b7      	b.n	31fe <Components::Led::run_handler(long, unsigned long)+0x4a>
                new_state = Fw::On::OFF;
    328e:	a802      	add	r0, sp, #8
    3290:	f015 f826 	bl	182e0 <Fw::On::operator=(Fw::On::T)>
    3294:	e7bf      	b.n	3216 <Components::Led::run_handler(long, unsigned long)+0x62>
    3296:	bf00      	nop
    3298:	20002ba8 	.word	0x20002ba8
    329c:	2000326c 	.word	0x2000326c
    32a0:	20003748 	.word	0x20003748
    32a4:	200032a4 	.word	0x200032a4

000032a8 <Components::Led::~Led()>:
  Led ::
    32a8:	b510      	push	{r4, lr}
    ~Led()
    32aa:	4a0a      	ldr	r2, [pc, #40]	; (32d4 <Components::Led::~Led()+0x2c>)
  Led ::
    32ac:	4604      	mov	r4, r0
    32ae:	4b0a      	ldr	r3, [pc, #40]	; (32d8 <Components::Led::~Led()+0x30>)
    32b0:	f500 60af 	add.w	r0, r0, #1400	; 0x578
    ~Led()
    32b4:	6022      	str	r2, [r4, #0]
    32b6:	f8c4 3578 	str.w	r3, [r4, #1400]	; 0x578
    32ba:	f7fd f93f 	bl	53c <Fw::Serializable::~Serializable()>
    32be:	4620      	mov	r0, r4
    32c0:	f000 fd16 	bl	3cf0 <Components::LedComponentBase::~LedComponentBase()>
  }
    32c4:	4620      	mov	r0, r4
    32c6:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    32ca:	f015 fd01 	bl	18cd0 <operator delete(void*, unsigned int)>
    32ce:	4620      	mov	r0, r4
    32d0:	bd10      	pop	{r4, pc}
    32d2:	bf00      	nop
    32d4:	20002b00 	.word	0x20002b00
    32d8:	2000326c 	.word	0x2000326c

000032dc <Components::Led::Led(char const*)>:
  Led ::
    32dc:	b510      	push	{r4, lr}
    32de:	4604      	mov	r4, r0
    blinking(true)
    32e0:	f000 fb0e 	bl	3900 <Components::LedComponentBase::LedComponentBase(char const*)>
    32e4:	4b0c      	ldr	r3, [pc, #48]	; (3318 <Components::Led::Led(char const*)+0x3c>)
      {
    32e6:	f504 60af 	add.w	r0, r4, #1400	; 0x578
    32ea:	6023      	str	r3, [r4, #0]
    32ec:	f7fd f920 	bl	530 <Fw::Serializable::Serializable()>
    32f0:	490a      	ldr	r1, [pc, #40]	; (331c <Components::Led::Led(char const*)+0x40>)
        this->e = e1;
    32f2:	2300      	movs	r3, #0
    transitions(0),
    32f4:	f504 62b0 	add.w	r2, r4, #1408	; 0x580
      {
    32f8:	f8c4 1578 	str.w	r1, [r4, #1400]	; 0x578
    32fc:	2000      	movs	r0, #0
    32fe:	2100      	movs	r1, #0
        this->e = e1;
    3300:	f884 357c 	strb.w	r3, [r4, #1404]	; 0x57c
    3304:	e9c2 0100 	strd	r0, r1, [r2]
    blinking(true)
    3308:	2201      	movs	r2, #1
  }
    330a:	4620      	mov	r0, r4
    count(0),
    330c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    blinking(true)
    3310:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
  }
    3314:	bd10      	pop	{r4, pc}
    3316:	bf00      	nop
    3318:	20002b00 	.word	0x20002b00
    331c:	2000326c 	.word	0x2000326c

00003320 <Components::Led::BLINKING_ON_OFF_cmdHandler(unsigned long, unsigned long, Fw::On)>:
  {
    3320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3324:	4605      	mov	r5, r0
    3326:	b084      	sub	sp, #16
    if(!on_off.isValid())
    3328:	4618      	mov	r0, r3
  {
    332a:	461e      	mov	r6, r3
    332c:	460f      	mov	r7, r1
    332e:	4690      	mov	r8, r2
    if(!on_off.isValid())
    3330:	f014 ffd8 	bl	182e4 <Fw::On::isValid() const>
    3334:	bb48      	cbnz	r0, 338a <Components::Led::BLINKING_ON_OFF_cmdHandler(unsigned long, unsigned long, Fw::On)+0x6a>
      {
    3336:	466c      	mov	r4, sp
    3338:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 33e8 <Components::Led::BLINKING_ON_OFF_cmdHandler(unsigned long, unsigned long, Fw::On)+0xc8>
        cmdResp = Fw::CmdResponse::VALIDATION_ERROR;
    333c:	f04f 0902 	mov.w	r9, #2
    3340:	4620      	mov	r0, r4
    3342:	f7fd f8f5 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    3346:	7933      	ldrb	r3, [r6, #4]
                this->log_WARNING_LO_InvalidBlinkArgument(on_off);
    3348:	4628      	mov	r0, r5
    334a:	4621      	mov	r1, r4
    334c:	f88d 3004 	strb.w	r3, [sp, #4]
      {
    3350:	f8cd a000 	str.w	sl, [sp]
    3354:	f000 fd26 	bl	3da4 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const>
  class On :
    3358:	4620      	mov	r0, r4
    335a:	f8cd a000 	str.w	sl, [sp]
    335e:	f7fd f8ed 	bl	53c <Fw::Serializable::~Serializable()>

      //! Constructor (user-provided value)
      CmdResponse(
          const T e1 //!< The raw enum value
      )
      {
    3362:	4e20      	ldr	r6, [pc, #128]	; (33e4 <Components::Led::BLINKING_ON_OFF_cmdHandler(unsigned long, unsigned long, Fw::On)+0xc4>)
    3364:	4620      	mov	r0, r4
    3366:	f7fd f8e3 	bl	530 <Fw::Serializable::Serializable()>
    this->cmdResponse_out(opCode,cmdSeq,cmdResp);
    336a:	4628      	mov	r0, r5
    336c:	4642      	mov	r2, r8
    336e:	4639      	mov	r1, r7
    3370:	4623      	mov	r3, r4
        this->e = e1;
    3372:	f88d 9004 	strb.w	r9, [sp, #4]
      {
    3376:	9600      	str	r6, [sp, #0]
    3378:	f000 fb3c 	bl	39f4 <Components::LedComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    337c:	4620      	mov	r0, r4
    337e:	9600      	str	r6, [sp, #0]
    3380:	f7fd f8dc 	bl	53c <Fw::Serializable::~Serializable()>
  }
    3384:	b004      	add	sp, #16
    3386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->count = 0; // Reset count on any successful command
    338a:	2300      	movs	r3, #0
      {
    338c:	466c      	mov	r4, sp
    338e:	f8df a058 	ldr.w	sl, [pc, #88]	; 33e8 <Components::Led::BLINKING_ON_OFF_cmdHandler(unsigned long, unsigned long, Fw::On)+0xc8>
    3392:	f8c5 3588 	str.w	r3, [r5, #1416]	; 0x588
    auto cmdResp = Fw::CmdResponse::OK;
    3396:	4699      	mov	r9, r3
      this->blinking = Fw::On::ON == on_off; // Update blinking state
    3398:	7933      	ldrb	r3, [r6, #4]
    339a:	4620      	mov	r0, r4
    339c:	f1a3 0301 	sub.w	r3, r3, #1
    33a0:	fab3 f383 	clz	r3, r3
    33a4:	095b      	lsrs	r3, r3, #5
    33a6:	f885 358c 	strb.w	r3, [r5, #1420]	; 0x58c
    33aa:	f7fd f8c1 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    33ae:	7933      	ldrb	r3, [r6, #4]
            this->log_ACTIVITY_HI_SetBlinkingState(on_off);
    33b0:	4621      	mov	r1, r4
    33b2:	4628      	mov	r0, r5
    33b4:	f88d 3004 	strb.w	r3, [sp, #4]
      {
    33b8:	f8cd a000 	str.w	sl, [sp]
    33bc:	f000 fda0 	bl	3f00 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const>
  class On :
    33c0:	4620      	mov	r0, r4
    33c2:	f8cd a000 	str.w	sl, [sp]
    33c6:	f7fd f8b9 	bl	53c <Fw::Serializable::~Serializable()>
              this->tlmWrite_BlinkingState(on_off);
    33ca:	4620      	mov	r0, r4
    33cc:	f014 fa70 	bl	178b0 <Fw::Time::Time()>
    33d0:	4628      	mov	r0, r5
    33d2:	4622      	mov	r2, r4
    33d4:	4631      	mov	r1, r6
    33d6:	f000 fe41 	bl	405c <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const>
    33da:	4620      	mov	r0, r4
    33dc:	f014 fa10 	bl	17800 <Fw::Time::~Time()>
    33e0:	e7bf      	b.n	3362 <Components::Led::BLINKING_ON_OFF_cmdHandler(unsigned long, unsigned long, Fw::On)+0x42>
    33e2:	bf00      	nop
    33e4:	20002bec 	.word	0x20002bec
    33e8:	2000326c 	.word	0x2000326c

000033ec <Fw::TextLogString::toChar() const>:
    TextLogString& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
    33ec:	3004      	adds	r0, #4
    33ee:	4770      	bx	lr

000033f0 <Fw::TextLogString::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
    33f0:	2081      	movs	r0, #129	; 0x81
    33f2:	4770      	bx	lr

000033f4 <Components::LedComponentBase::parameterUpdated(unsigned long)>:

  void LedComponentBase ::
    parameterUpdated(FwPrmIdType id)
  {
    // Do nothing by default
  }
    33f4:	4770      	bx	lr
    33f6:	bf00      	nop

000033f8 <Components::LedComponentBase::parametersLoaded()>:

  void LedComponentBase ::
    parametersLoaded()
  {
    // Do nothing by default
  }
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop

000033fc <Fw::TextLogString::~TextLogString()>:
    ~TextLogString() {}
    33fc:	4b03      	ldr	r3, [pc, #12]	; (340c <Fw::TextLogString::~TextLogString()+0x10>)
    33fe:	b510      	push	{r4, lr}
    3400:	4604      	mov	r4, r0
    3402:	6003      	str	r3, [r0, #0]
    3404:	f7fd ff16 	bl	1234 <Fw::StringBase::~StringBase()>
    3408:	4620      	mov	r0, r4
    340a:	bd10      	pop	{r4, pc}
    340c:	20002f60 	.word	0x20002f60

00003410 <Fw::TextLogString::~TextLogString()>:
    3410:	4b05      	ldr	r3, [pc, #20]	; (3428 <Fw::TextLogString::~TextLogString()+0x18>)
    3412:	b510      	push	{r4, lr}
    3414:	4604      	mov	r4, r0
    3416:	6003      	str	r3, [r0, #0]
    3418:	f7fd ff0c 	bl	1234 <Fw::StringBase::~StringBase()>
    341c:	2188      	movs	r1, #136	; 0x88
    341e:	4620      	mov	r0, r4
    3420:	f015 fc56 	bl	18cd0 <operator delete(void*, unsigned int)>
    3424:	4620      	mov	r0, r4
    3426:	bd10      	pop	{r4, pc}
    3428:	20002f60 	.word	0x20002f60

0000342c <Components::LedComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    342c:	b570      	push	{r4, r5, r6, lr}
    342e:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    3430:	4604      	mov	r4, r0
  {
    3432:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    3434:	b178      	cbz	r0, 3456 <Components::LedComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x2a>
    FW_ASSERT(
    3436:	2d00      	cmp	r5, #0
    3438:	dd05      	ble.n	3446 <Components::LedComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x1a>
    343a:	f240 3231 	movw	r2, #817	; 0x331
    343e:	4629      	mov	r1, r5
    3440:	4808      	ldr	r0, [pc, #32]	; (3464 <Components::LedComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    3442:	f7fe f8f1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->run_handler(
    3446:	6823      	ldr	r3, [r4, #0]
    3448:	4632      	mov	r2, r6
    344a:	4629      	mov	r1, r5
    344c:	4620      	mov	r0, r4
    344e:	691b      	ldr	r3, [r3, #16]
    LedComponentBase* compPtr = static_cast<LedComponentBase*>(callComp);
    compPtr->run_handlerBase(
      portNum,
      context
    );
  }
    3450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->run_handler(
    3454:	4718      	bx	r3
    FW_ASSERT(callComp);
    3456:	f240 41d6 	movw	r1, #1238	; 0x4d6
    345a:	4802      	ldr	r0, [pc, #8]	; (3464 <Components::LedComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    345c:	f7fe f8d6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    3460:	e7e9      	b.n	3436 <Components::LedComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0xa>
    3462:	bf00      	nop
    3464:	20000494 	.word	0x20000494

00003468 <Components::LedComponentBase::init(long)>:
  {
    3468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    346c:	4605      	mov	r5, r0
    346e:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    3470:	f00e fd36 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    3474:	4fa0      	ldr	r7, [pc, #640]	; (36f8 <Components::LedComponentBase::init(long)+0x290>)
      this->m_cmdIn_InputPort[port].init();
    3476:	f105 0864 	add.w	r8, r5, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    347a:	4ca0      	ldr	r4, [pc, #640]	; (36fc <Components::LedComponentBase::init(long)+0x294>)
    const char* toChar() const { return this->m_buf; }
    347c:	f105 0608 	add.w	r6, r5, #8
      this->m_cmdRegOut_OutputPort[port].init();
    3480:	f505 79a2 	add.w	r9, r5, #324	; 0x144
      this->m_cmdIn_InputPort[port].init();
    3484:	4640      	mov	r0, r8
    3486:	f012 fd41 	bl	15f0c <Fw::InputCmdPort::init()>
      this->m_cmdIn_InputPort[port].addCallComp(
    348a:	4a9d      	ldr	r2, [pc, #628]	; (3700 <Components::LedComponentBase::init(long)+0x298>)
    348c:	4629      	mov	r1, r5
    348e:	4640      	mov	r0, r8
    3490:	f012 fc82 	bl	15d98 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))>
      this->m_cmdIn_InputPort[port].setPortNum(port);
    3494:	2100      	movs	r1, #0
    3496:	4640      	mov	r0, r8
    3498:	f014 fc1c 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    349c:	4668      	mov	r0, sp
    349e:	f7fd febf 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    34a2:	4639      	mov	r1, r7
    34a4:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    34a6:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    34a8:	f7fd ff22 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    34ac:	2300      	movs	r3, #0
    34ae:	4632      	mov	r2, r6
    34b0:	4994      	ldr	r1, [pc, #592]	; (3704 <Components::LedComponentBase::init(long)+0x29c>)
    34b2:	4668      	mov	r0, sp
    34b4:	f7fd feea 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
    34b8:	a901      	add	r1, sp, #4
    34ba:	4640      	mov	r0, r8
      this->m_run_InputPort[port].init();
    34bc:	f105 08d4 	add.w	r8, r5, #212	; 0xd4
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
    34c0:	f014 fd6e 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    34c4:	4668      	mov	r0, sp
    34c6:	9400      	str	r4, [sp, #0]
    34c8:	f7fd feb4 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_run_InputPort[port].init();
    34cc:	4640      	mov	r0, r8
    34ce:	f00d fdf5 	bl	110bc <Svc::InputSchedPort::init()>
      this->m_run_InputPort[port].addCallComp(
    34d2:	4a8d      	ldr	r2, [pc, #564]	; (3708 <Components::LedComponentBase::init(long)+0x2a0>)
    34d4:	4629      	mov	r1, r5
    34d6:	4640      	mov	r0, r8
    34d8:	f00d fd54 	bl	10f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_run_InputPort[port].setPortNum(port);
    34dc:	2100      	movs	r1, #0
    34de:	4640      	mov	r0, r8
    34e0:	f014 fbf8 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    34e4:	4668      	mov	r0, sp
    34e6:	f7fd fe9b 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    34ea:	4639      	mov	r1, r7
    34ec:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    34ee:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    34f0:	f7fd fefe 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    34f4:	4632      	mov	r2, r6
    34f6:	2300      	movs	r3, #0
    34f8:	4984      	ldr	r1, [pc, #528]	; (370c <Components::LedComponentBase::init(long)+0x2a4>)
    34fa:	4668      	mov	r0, sp
    34fc:	f7fd fec6 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_run_InputPort[port].setObjName(portName.toChar());
    3500:	a901      	add	r1, sp, #4
    3502:	4640      	mov	r0, r8
      this->m_logOut_OutputPort[port].init();
    3504:	f505 7807 	add.w	r8, r5, #540	; 0x21c
      this->m_run_InputPort[port].setObjName(portName.toChar());
    3508:	f014 fd4a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    350c:	4668      	mov	r0, sp
    350e:	9400      	str	r4, [sp, #0]
    3510:	f7fd fe90 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_cmdRegOut_OutputPort[port].init();
    3514:	4648      	mov	r0, r9
    3516:	f012 fe59 	bl	161cc <Fw::OutputCmdRegPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    351a:	4668      	mov	r0, sp
    351c:	f7fd fe80 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    3520:	4639      	mov	r1, r7
    3522:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    3524:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    3526:	f7fd fee3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    352a:	4632      	mov	r2, r6
    352c:	2300      	movs	r3, #0
    352e:	4978      	ldr	r1, [pc, #480]	; (3710 <Components::LedComponentBase::init(long)+0x2a8>)
    3530:	4668      	mov	r0, sp
    3532:	f7fd feab 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
    3536:	a901      	add	r1, sp, #4
    3538:	4648      	mov	r0, r9
      this->m_cmdResponseOut_OutputPort[port].init();
    353a:	f505 79d8 	add.w	r9, r5, #432	; 0x1b0
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
    353e:	f014 fd2f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    3542:	4668      	mov	r0, sp
    3544:	9400      	str	r4, [sp, #0]
    3546:	f7fd fe75 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_cmdResponseOut_OutputPort[port].init();
    354a:	4648      	mov	r0, r9
    354c:	f013 f826 	bl	1659c <Fw::OutputCmdResponsePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    3550:	4668      	mov	r0, sp
    3552:	f7fd fe65 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    3556:	4639      	mov	r1, r7
    3558:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    355a:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    355c:	f7fd fec8 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    3560:	4632      	mov	r2, r6
    3562:	2300      	movs	r3, #0
    3564:	496b      	ldr	r1, [pc, #428]	; (3714 <Components::LedComponentBase::init(long)+0x2ac>)
    3566:	4668      	mov	r0, sp
    3568:	f7fd fe90 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
    356c:	a901      	add	r1, sp, #4
    356e:	4648      	mov	r0, r9
      this->m_logTextOut_OutputPort[port].init();
    3570:	f505 7922 	add.w	r9, r5, #648	; 0x288
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
    3574:	f014 fd14 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    3578:	4668      	mov	r0, sp
    357a:	9400      	str	r4, [sp, #0]
    357c:	f7fd fe5a 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_logOut_OutputPort[port].init();
    3580:	4640      	mov	r0, r8
    3582:	f013 fa7d 	bl	16a80 <Fw::OutputLogPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    3586:	4668      	mov	r0, sp
    3588:	f7fd fe4a 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    358c:	4639      	mov	r1, r7
    358e:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    3590:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    3592:	f7fd fead 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    3596:	4632      	mov	r2, r6
    3598:	2300      	movs	r3, #0
    359a:	495f      	ldr	r1, [pc, #380]	; (3718 <Components::LedComponentBase::init(long)+0x2b0>)
    359c:	4668      	mov	r0, sp
    359e:	f7fd fe75 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_logOut_OutputPort[port].setObjName(portName.toChar());
    35a2:	a901      	add	r1, sp, #4
    35a4:	4640      	mov	r0, r8
      this->m_prmGetOut_OutputPort[port].init();
    35a6:	f505 783d 	add.w	r8, r5, #756	; 0x2f4
      this->m_logOut_OutputPort[port].setObjName(portName.toChar());
    35aa:	f014 fcf9 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    35ae:	4668      	mov	r0, sp
    35b0:	9400      	str	r4, [sp, #0]
    35b2:	f7fd fe3f 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_logTextOut_OutputPort[port].init();
    35b6:	4648      	mov	r0, r9
    35b8:	f013 fc8a 	bl	16ed0 <Fw::OutputLogTextPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    35bc:	4668      	mov	r0, sp
    35be:	f7fd fe2f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    35c2:	4639      	mov	r1, r7
    35c4:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    35c6:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    35c8:	f7fd fe92 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    35cc:	4632      	mov	r2, r6
    35ce:	2300      	movs	r3, #0
    35d0:	4952      	ldr	r1, [pc, #328]	; (371c <Components::LedComponentBase::init(long)+0x2b4>)
    35d2:	4668      	mov	r0, sp
    35d4:	f7fd fe5a 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_logTextOut_OutputPort[port].setObjName(portName.toChar());
    35d8:	a901      	add	r1, sp, #4
    35da:	4648      	mov	r0, r9
      this->m_prmSetOut_OutputPort[port].init();
    35dc:	f505 7958 	add.w	r9, r5, #864	; 0x360
      this->m_logTextOut_OutputPort[port].setObjName(portName.toChar());
    35e0:	f014 fcde 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    35e4:	4668      	mov	r0, sp
    35e6:	9400      	str	r4, [sp, #0]
    35e8:	f7fd fe24 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_prmGetOut_OutputPort[port].init();
    35ec:	4640      	mov	r0, r8
    35ee:	f012 fa3b 	bl	15a68 <Fw::OutputPrmGetPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    35f2:	4668      	mov	r0, sp
    35f4:	f7fd fe14 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    35f8:	4639      	mov	r1, r7
    35fa:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    35fc:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    35fe:	f7fd fe77 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    3602:	4632      	mov	r2, r6
    3604:	2300      	movs	r3, #0
    3606:	4946      	ldr	r1, [pc, #280]	; (3720 <Components::LedComponentBase::init(long)+0x2b8>)
    3608:	4668      	mov	r0, sp
    360a:	f7fd fe3f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_prmGetOut_OutputPort[port].setObjName(portName.toChar());
    360e:	a901      	add	r1, sp, #4
    3610:	4640      	mov	r0, r8
      this->m_timeCaller_OutputPort[port].init();
    3612:	f505 7873 	add.w	r8, r5, #972	; 0x3cc
      this->m_prmGetOut_OutputPort[port].setObjName(portName.toChar());
    3616:	f014 fcc3 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    361a:	4668      	mov	r0, sp
    361c:	9400      	str	r4, [sp, #0]
    361e:	f7fd fe09 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_prmSetOut_OutputPort[port].init();
    3622:	4648      	mov	r0, r9
    3624:	f012 fad4 	bl	15bd0 <Fw::OutputPrmSetPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    3628:	4668      	mov	r0, sp
    362a:	f7fd fdf9 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    362e:	4639      	mov	r1, r7
    3630:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    3632:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    3634:	f7fd fe5c 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    3638:	4632      	mov	r2, r6
    363a:	2300      	movs	r3, #0
    363c:	4939      	ldr	r1, [pc, #228]	; (3724 <Components::LedComponentBase::init(long)+0x2bc>)
    363e:	4668      	mov	r0, sp
    3640:	f7fd fe24 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_prmSetOut_OutputPort[port].setObjName(portName.toChar());
    3644:	a901      	add	r1, sp, #4
    3646:	4648      	mov	r0, r9
    3648:	f014 fcaa 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    364c:	4668      	mov	r0, sp
    364e:	9400      	str	r4, [sp, #0]
    3650:	f7fd fdf0 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_timeCaller_OutputPort[port].init();
    3654:	4640      	mov	r0, r8
    3656:	f014 fb1d 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    365a:	4668      	mov	r0, sp
    365c:	f7fd fde0 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    3660:	4639      	mov	r1, r7
    3662:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    3664:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    3666:	f7fd fe43 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    366a:	4632      	mov	r2, r6
    366c:	2300      	movs	r3, #0
    366e:	492e      	ldr	r1, [pc, #184]	; (3728 <Components::LedComponentBase::init(long)+0x2c0>)
    3670:	4668      	mov	r0, sp
    3672:	f7fd fe0b 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
    3676:	a901      	add	r1, sp, #4
    3678:	4640      	mov	r0, r8
      this->m_tlmOut_OutputPort[port].init();
    367a:	f505 6887 	add.w	r8, r5, #1080	; 0x438
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
    367e:	f014 fc8f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    3682:	4668      	mov	r0, sp
    3684:	9400      	str	r4, [sp, #0]
    3686:	f7fd fdd5 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_tlmOut_OutputPort[port].init();
    368a:	4640      	mov	r0, r8
      this->m_gpioSet_OutputPort[port].init();
    368c:	f205 45a4 	addw	r5, r5, #1188	; 0x4a4
      this->m_tlmOut_OutputPort[port].init();
    3690:	f013 ff28 	bl	174e4 <Fw::OutputTlmPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    3694:	4668      	mov	r0, sp
    3696:	f7fd fdc3 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    369a:	4639      	mov	r1, r7
    369c:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    369e:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    36a0:	f7fd fe26 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    36a4:	4632      	mov	r2, r6
    36a6:	2300      	movs	r3, #0
    36a8:	4920      	ldr	r1, [pc, #128]	; (372c <Components::LedComponentBase::init(long)+0x2c4>)
    36aa:	4668      	mov	r0, sp
    36ac:	f7fd fdee 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_tlmOut_OutputPort[port].setObjName(portName.toChar());
    36b0:	a901      	add	r1, sp, #4
    36b2:	4640      	mov	r0, r8
    36b4:	f014 fc74 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    36b8:	4668      	mov	r0, sp
    36ba:	9400      	str	r4, [sp, #0]
    36bc:	f7fd fdba 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_gpioSet_OutputPort[port].init();
    36c0:	4628      	mov	r0, r5
    36c2:	f001 f9a9 	bl	4a18 <Drv::OutputGpioWritePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    36c6:	4668      	mov	r0, sp
    36c8:	f7fd fdaa 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    36cc:	4639      	mov	r1, r7
    36ce:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    36d0:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    36d2:	f7fd fe0d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    36d6:	4632      	mov	r2, r6
    36d8:	2300      	movs	r3, #0
    36da:	4915      	ldr	r1, [pc, #84]	; (3730 <Components::LedComponentBase::init(long)+0x2c8>)
    36dc:	4668      	mov	r0, sp
    36de:	f7fd fdd5 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_gpioSet_OutputPort[port].setObjName(portName.toChar());
    36e2:	a901      	add	r1, sp, #4
    36e4:	4628      	mov	r0, r5
    36e6:	f014 fc5b 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    36ea:	4668      	mov	r0, sp
    36ec:	9400      	str	r4, [sp, #0]
    36ee:	f7fd fda1 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    36f2:	b017      	add	sp, #92	; 0x5c
    36f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    36f8:	20001d2c 	.word	0x20001d2c
    36fc:	20002b80 	.word	0x20002b80
    3700:	00003c19 	.word	0x00003c19
    3704:	200004d8 	.word	0x200004d8
    3708:	0000342d 	.word	0x0000342d
    370c:	200004f0 	.word	0x200004f0
    3710:	20000508 	.word	0x20000508
    3714:	20000528 	.word	0x20000528
    3718:	2000054c 	.word	0x2000054c
    371c:	20000568 	.word	0x20000568
    3720:	20000588 	.word	0x20000588
    3724:	200005a8 	.word	0x200005a8
    3728:	200005c8 	.word	0x200005c8
    372c:	200005e8 	.word	0x200005e8
    3730:	20000604 	.word	0x20000604

00003734 <Components::LedComponentBase::get_cmdIn_InputPort(long)>:
  {
    3734:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    3736:	1e0c      	subs	r4, r1, #0
  {
    3738:	4605      	mov	r5, r0
    FW_ASSERT(
    373a:	dd03      	ble.n	3744 <Components::LedComponentBase::get_cmdIn_InputPort(long)+0x10>
    373c:	22ff      	movs	r2, #255	; 0xff
    373e:	4804      	ldr	r0, [pc, #16]	; (3750 <Components::LedComponentBase::get_cmdIn_InputPort(long)+0x1c>)
    3740:	f7fd ff72 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_cmdIn_InputPort[portNum];
    3744:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3748:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    374c:	3064      	adds	r0, #100	; 0x64
    374e:	bd38      	pop	{r3, r4, r5, pc}
    3750:	20000494 	.word	0x20000494

00003754 <Components::LedComponentBase::get_run_InputPort(long)>:
  {
    3754:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    3756:	1e0c      	subs	r4, r1, #0
  {
    3758:	4605      	mov	r5, r0
    FW_ASSERT(
    375a:	dd04      	ble.n	3766 <Components::LedComponentBase::get_run_InputPort(long)+0x12>
    375c:	f44f 7287 	mov.w	r2, #270	; 0x10e
    3760:	4804      	ldr	r0, [pc, #16]	; (3774 <Components::LedComponentBase::get_run_InputPort(long)+0x20>)
    3762:	f7fd ff61 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_run_InputPort[portNum];
    3766:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    376a:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    376e:	30d4      	adds	r0, #212	; 0xd4
    3770:	bd38      	pop	{r3, r4, r5, pc}
    3772:	bf00      	nop
    3774:	20000494 	.word	0x20000494

00003778 <Components::LedComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)>:
  {
    3778:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    377a:	1e0d      	subs	r5, r1, #0
  {
    377c:	4604      	mov	r4, r0
    377e:	4616      	mov	r6, r2
    FW_ASSERT(
    3780:	dd04      	ble.n	378c <Components::LedComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)+0x14>
    3782:	f44f 7290 	mov.w	r2, #288	; 0x120
    3786:	4806      	ldr	r0, [pc, #24]	; (37a0 <Components::LedComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)+0x28>)
    3788:	f7fd ff4e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
    378c:	236c      	movs	r3, #108	; 0x6c
    378e:	4631      	mov	r1, r6
    3790:	fb03 4005 	mla	r0, r3, r5, r4
  }
    3794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
    3798:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    379c:	f012 bcc6 	b.w	1612c <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)>
    37a0:	20000494 	.word	0x20000494

000037a4 <Components::LedComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)>:
  {
    37a4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    37a6:	1e0d      	subs	r5, r1, #0
  {
    37a8:	4604      	mov	r4, r0
    37aa:	4616      	mov	r6, r2
    FW_ASSERT(
    37ac:	dd04      	ble.n	37b8 <Components::LedComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)+0x14>
    37ae:	f44f 7297 	mov.w	r2, #302	; 0x12e
    37b2:	4806      	ldr	r0, [pc, #24]	; (37cc <Components::LedComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)+0x28>)
    37b4:	f7fd ff38 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
    37b8:	236c      	movs	r3, #108	; 0x6c
    37ba:	4631      	mov	r1, r6
    37bc:	fb03 4005 	mla	r0, r3, r5, r4
  }
    37c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
    37c4:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    37c8:	f012 be78 	b.w	164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>
    37cc:	20000494 	.word	0x20000494

000037d0 <Components::LedComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)>:
  {
    37d0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    37d2:	1e0d      	subs	r5, r1, #0
  {
    37d4:	4604      	mov	r4, r0
    37d6:	4616      	mov	r6, r2
    FW_ASSERT(
    37d8:	dd04      	ble.n	37e4 <Components::LedComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)+0x14>
    37da:	f44f 729e 	mov.w	r2, #316	; 0x13c
    37de:	4806      	ldr	r0, [pc, #24]	; (37f8 <Components::LedComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)+0x28>)
    37e0:	f7fd ff22 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_logOut_OutputPort[portNum].addCallPort(port);
    37e4:	236c      	movs	r3, #108	; 0x6c
    37e6:	4631      	mov	r1, r6
    37e8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    37ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_logOut_OutputPort[portNum].addCallPort(port);
    37f0:	f500 7007 	add.w	r0, r0, #540	; 0x21c
    37f4:	f013 b866 	b.w	168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>
    37f8:	20000494 	.word	0x20000494

000037fc <Components::LedComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)>:
  {
    37fc:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    37fe:	1e0d      	subs	r5, r1, #0
  {
    3800:	4604      	mov	r4, r0
    3802:	4616      	mov	r6, r2
    FW_ASSERT(
    3804:	dd04      	ble.n	3810 <Components::LedComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)+0x14>
    3806:	f44f 72a6 	mov.w	r2, #332	; 0x14c
    380a:	4806      	ldr	r0, [pc, #24]	; (3824 <Components::LedComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)+0x28>)
    380c:	f7fd ff0c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
    3810:	236c      	movs	r3, #108	; 0x6c
    3812:	4631      	mov	r1, r6
    3814:	fb03 4005 	mla	r0, r3, r5, r4
  }
    3818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
    381c:	f500 7022 	add.w	r0, r0, #648	; 0x288
    3820:	f013 ba68 	b.w	16cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>
    3824:	20000494 	.word	0x20000494

00003828 <Components::LedComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)>:
  {
    3828:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    382a:	1e0d      	subs	r5, r1, #0
  {
    382c:	4604      	mov	r4, r0
    382e:	4616      	mov	r6, r2
    FW_ASSERT(
    3830:	dd04      	ble.n	383c <Components::LedComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)+0x14>
    3832:	f44f 72bc 	mov.w	r2, #376	; 0x178
    3836:	4806      	ldr	r0, [pc, #24]	; (3850 <Components::LedComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)+0x28>)
    3838:	f7fd fef6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
    383c:	236c      	movs	r3, #108	; 0x6c
    383e:	4631      	mov	r1, r6
    3840:	fb03 4005 	mla	r0, r3, r5, r4
  }
    3844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
    3848:	f500 7073 	add.w	r0, r0, #972	; 0x3cc
    384c:	f014 b9a6 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    3850:	20000494 	.word	0x20000494

00003854 <Components::LedComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)>:
  {
    3854:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    3856:	1e0d      	subs	r5, r1, #0
  {
    3858:	4604      	mov	r4, r0
    385a:	4616      	mov	r6, r2
    FW_ASSERT(
    385c:	dd04      	ble.n	3868 <Components::LedComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)+0x14>
    385e:	f44f 72c3 	mov.w	r2, #390	; 0x186
    3862:	4806      	ldr	r0, [pc, #24]	; (387c <Components::LedComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)+0x28>)
    3864:	f7fd fee0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
    3868:	236c      	movs	r3, #108	; 0x6c
    386a:	4631      	mov	r1, r6
    386c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    3870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
    3874:	f500 6087 	add.w	r0, r0, #1080	; 0x438
    3878:	f013 bd7e 	b.w	17378 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)>
    387c:	20000494 	.word	0x20000494

00003880 <Components::LedComponentBase::set_gpioSet_OutputPort(long, Drv::InputGpioWritePort*)>:
  {
    3880:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    3882:	1e0d      	subs	r5, r1, #0
  {
    3884:	4604      	mov	r4, r0
    3886:	4616      	mov	r6, r2
    FW_ASSERT(
    3888:	dd04      	ble.n	3894 <Components::LedComponentBase::set_gpioSet_OutputPort(long, Drv::InputGpioWritePort*)+0x14>
    388a:	f44f 72cc 	mov.w	r2, #408	; 0x198
    388e:	4806      	ldr	r0, [pc, #24]	; (38a8 <Components::LedComponentBase::set_gpioSet_OutputPort(long, Drv::InputGpioWritePort*)+0x28>)
    3890:	f7fd feca 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_gpioSet_OutputPort[portNum].addCallPort(port);
    3894:	236c      	movs	r3, #108	; 0x6c
    3896:	4631      	mov	r1, r6
    3898:	fb03 4005 	mla	r0, r3, r5, r4
  }
    389c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_gpioSet_OutputPort[portNum].addCallPort(port);
    38a0:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
    38a4:	f001 b886 	b.w	49b4 <Drv::OutputGpioWritePort::addCallPort(Drv::InputGpioWritePort*)>
    38a8:	20000494 	.word	0x20000494

000038ac <Components::LedComponentBase::regCommands()>:
  {
    38ac:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());
    38ae:	f500 75a2 	add.w	r5, r0, #324	; 0x144
  {
    38b2:	4604      	mov	r4, r0
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());
    38b4:	4628      	mov	r0, r5
    38b6:	f014 fac9 	bl	17e4c <Fw::PortBase::isConnected() const>
    38ba:	b1c0      	cbz	r0, 38ee <Components::LedComponentBase::regCommands()+0x42>
    this->m_cmdRegOut_OutputPort[0].invoke(
    38bc:	4620      	mov	r0, r4
    38be:	f00e fb19 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    38c2:	4601      	mov	r1, r0
    38c4:	4628      	mov	r0, r5
    38c6:	f012 fc41 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_BLINK_INTERVAL_SET
    38ca:	4620      	mov	r0, r4
    38cc:	f00e fb12 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    38d0:	4601      	mov	r1, r0
    this->m_cmdRegOut_OutputPort[0].invoke(
    38d2:	4628      	mov	r0, r5
    38d4:	3101      	adds	r1, #1
    38d6:	f012 fc39 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_BLINK_INTERVAL_SAVE
    38da:	4620      	mov	r0, r4
    38dc:	f00e fb0a 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    38e0:	4601      	mov	r1, r0
    this->m_cmdRegOut_OutputPort[0].invoke(
    38e2:	4628      	mov	r0, r5
    38e4:	3102      	adds	r1, #2
  }
    38e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    this->m_cmdRegOut_OutputPort[0].invoke(
    38ea:	f012 bc2f 	b.w	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());
    38ee:	f240 2115 	movw	r1, #533	; 0x215
    38f2:	4802      	ldr	r0, [pc, #8]	; (38fc <Components::LedComponentBase::regCommands()+0x50>)
    38f4:	f7fd fe8a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    38f8:	e7e0      	b.n	38bc <Components::LedComponentBase::regCommands()+0x10>
    38fa:	bf00      	nop
    38fc:	20000494 	.word	0x20000494

00003900 <Components::LedComponentBase::LedComponentBase(char const*)>:
  LedComponentBase ::
    3900:	b570      	push	{r4, r5, r6, lr}
    3902:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    3904:	f00e fade 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    3908:	4b21      	ldr	r3, [pc, #132]	; (3990 <Components::LedComponentBase::LedComponentBase(char const*)+0x90>)
        this->e = UNINIT;
    390a:	2600      	movs	r6, #0
    390c:	4620      	mov	r0, r4
    390e:	f504 65a2 	add.w	r5, r4, #1296	; 0x510
    3912:	f840 3b64 	str.w	r3, [r0], #100
    3916:	f012 fa33 	bl	15d80 <Fw::InputCmdPort::InputCmdPort()>
    391a:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    391e:	f00d fb25 	bl	10f6c <Svc::InputSchedPort::InputSchedPort()>
    3922:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    3926:	f012 fbf5 	bl	16114 <Fw::OutputCmdRegPort::OutputCmdRegPort()>
    392a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    392e:	f012 fdb9 	bl	164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>
    3932:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    3936:	f012 ffb9 	bl	168ac <Fw::OutputLogPort::OutputLogPort()>
    393a:	f504 7022 	add.w	r0, r4, #648	; 0x288
    393e:	f013 f9cd 	bl	16cdc <Fw::OutputLogTextPort::OutputLogTextPort()>
    3942:	f504 703d 	add.w	r0, r4, #756	; 0x2f4
    3946:	f012 f883 	bl	15a50 <Fw::OutputPrmGetPort::OutputPrmGetPort()>
    394a:	f504 7058 	add.w	r0, r4, #864	; 0x360
    394e:	f012 f8e7 	bl	15b20 <Fw::OutputPrmSetPort::OutputPrmSetPort()>
    3952:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
    3956:	f014 f915 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
    395a:	f504 6087 	add.w	r0, r4, #1080	; 0x438
    395e:	f013 fcff 	bl	17360 <Fw::OutputTlmPort::OutputTlmPort()>
    3962:	f204 40a4 	addw	r0, r4, #1188	; 0x4a4
    3966:	f001 f819 	bl	499c <Drv::OutputGpioWritePort::OutputGpioWritePort()>
      {
    396a:	4628      	mov	r0, r5
    396c:	f7fc fde0 	bl	530 <Fw::Serializable::Serializable()>
    3970:	4b08      	ldr	r3, [pc, #32]	; (3994 <Components::LedComponentBase::LedComponentBase(char const*)+0x94>)
    3972:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
        this->e = UNINIT;
    3976:	f884 6514 	strb.w	r6, [r4, #1300]	; 0x514
      {
    397a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    397e:	f00f ff5f 	bl	13840 <Os::Mutex::Mutex()>
    this->m_param_BLINK_INTERVAL_valid = Fw::ParamValid::UNINIT;
    3982:	4631      	mov	r1, r6
    3984:	4628      	mov	r0, r5
    3986:	f012 f849 	bl	15a1c <Fw::ParamValid::operator=(Fw::ParamValid::T)>
  }
    398a:	4620      	mov	r0, r4
    398c:	bd70      	pop	{r4, r5, r6, pc}
    398e:	bf00      	nop
    3990:	20002ad8 	.word	0x20002ad8
    3994:	20002ba8 	.word	0x20002ba8

00003998 <Components::LedComponentBase::isConnected_gpioSet_OutputPort(long)>:
  {
    3998:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    399a:	1e0d      	subs	r5, r1, #0
  {
    399c:	4604      	mov	r4, r0
    FW_ASSERT(
    399e:	dd04      	ble.n	39aa <Components::LedComponentBase::isConnected_gpioSet_OutputPort(long)+0x12>
    39a0:	f44f 7247 	mov.w	r2, #796	; 0x31c
    39a4:	4805      	ldr	r0, [pc, #20]	; (39bc <Components::LedComponentBase::isConnected_gpioSet_OutputPort(long)+0x24>)
    39a6:	f7fd fe3f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_gpioSet_OutputPort[portNum].isConnected();
    39aa:	236c      	movs	r3, #108	; 0x6c
    39ac:	fb03 4005 	mla	r0, r3, r5, r4
  }
    39b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_gpioSet_OutputPort[portNum].isConnected();
    39b4:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
    39b8:	f014 ba48 	b.w	17e4c <Fw::PortBase::isConnected() const>
    39bc:	20000494 	.word	0x20000494

000039c0 <Components::LedComponentBase::gpioSet_out(long, Fw::Logic const&)>:
  {
    39c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    39c2:	1e15      	subs	r5, r2, #0
  {
    39c4:	4606      	mov	r6, r0
    39c6:	460c      	mov	r4, r1
    39c8:	461f      	mov	r7, r3
    FW_ASSERT(
    39ca:	dd05      	ble.n	39d8 <Components::LedComponentBase::gpioSet_out(long, Fw::Logic const&)+0x18>
    39cc:	f240 3247 	movw	r2, #839	; 0x347
    39d0:	4629      	mov	r1, r5
    39d2:	4807      	ldr	r0, [pc, #28]	; (39f0 <Components::LedComponentBase::gpioSet_out(long, Fw::Logic const&)+0x30>)
    39d4:	f7fd fe28 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    );
    39d8:	236c      	movs	r3, #108	; 0x6c
    39da:	4630      	mov	r0, r6
    39dc:	463a      	mov	r2, r7
    39de:	fb03 4105 	mla	r1, r3, r5, r4
    39e2:	f201 41a4 	addw	r1, r1, #1188	; 0x4a4
    39e6:	f000 fff5 	bl	49d4 <Drv::OutputGpioWritePort::invoke(Fw::Logic const&) const>
  }
    39ea:	4630      	mov	r0, r6
    39ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39ee:	bf00      	nop
    39f0:	20000494 	.word	0x20000494

000039f4 <Components::LedComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>:
  {
    39f4:	b530      	push	{r4, r5, lr}
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    39f6:	f500 74d8 	add.w	r4, r0, #432	; 0x1b0
  {
    39fa:	b083      	sub	sp, #12
    39fc:	460d      	mov	r5, r1
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    39fe:	4620      	mov	r0, r4
  {
    3a00:	e9cd 3200 	strd	r3, r2, [sp]
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3a04:	f014 fa22 	bl	17e4c <Fw::PortBase::isConnected() const>
    3a08:	e9dd 3200 	ldrd	r3, r2, [sp]
    3a0c:	b130      	cbz	r0, 3a1c <Components::LedComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x28>
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    3a0e:	4629      	mov	r1, r5
    3a10:	4620      	mov	r0, r4
  }
    3a12:	b003      	add	sp, #12
    3a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    3a18:	f012 bd60 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3a1c:	f240 315b 	movw	r1, #859	; 0x35b
    3a20:	4806      	ldr	r0, [pc, #24]	; (3a3c <Components::LedComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x48>)
    3a22:	e9cd 2300 	strd	r2, r3, [sp]
    3a26:	f7fd fdf1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    3a2a:	4629      	mov	r1, r5
    3a2c:	4620      	mov	r0, r4
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    3a32:	b003      	add	sp, #12
    3a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    3a38:	f012 bd50 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    3a3c:	20000494 	.word	0x20000494

00003a40 <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    3a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a44:	b084      	sub	sp, #16
    3a46:	4604      	mov	r4, r0
    args.resetDeser();
    3a48:	4618      	mov	r0, r3
  {
    3a4a:	461d      	mov	r5, r3
    3a4c:	460f      	mov	r7, r1
    3a4e:	4616      	mov	r6, r2
    args.resetDeser();
    3a50:	f7fd fad4 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
      {
    3a54:	4668      	mov	r0, sp
    3a56:	f7fc fd6b 	bl	530 <Fw::Serializable::Serializable()>
    3a5a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3ae4 <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xa4>
        this->e = OFF;
    3a5e:	2300      	movs	r3, #0
    _status = args.deserialize(on_off);
    3a60:	4628      	mov	r0, r5
    3a62:	4669      	mov	r1, sp
      {
    3a64:	f8cd 8000 	str.w	r8, [sp]
        this->e = OFF;
    3a68:	f88d 3004 	strb.w	r3, [sp, #4]
    3a6c:	f7fd fa32 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    3a70:	b9e0      	cbnz	r0, 3aac <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6c>
    this->BLINKING_ON_OFF_cmdHandler(
    3a72:	6823      	ldr	r3, [r4, #0]
      {
    3a74:	a802      	add	r0, sp, #8
    3a76:	695d      	ldr	r5, [r3, #20]
    3a78:	f7fc fd5a 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    3a7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3a80:	4620      	mov	r0, r4
    3a82:	4632      	mov	r2, r6
    3a84:	4639      	mov	r1, r7
    3a86:	f88d 300c 	strb.w	r3, [sp, #12]
    3a8a:	ab02      	add	r3, sp, #8
      {
    3a8c:	f8cd 8008 	str.w	r8, [sp, #8]
    3a90:	47a8      	blx	r5
  class On :
    3a92:	a802      	add	r0, sp, #8
    3a94:	f8cd 8008 	str.w	r8, [sp, #8]
    3a98:	f7fc fd50 	bl	53c <Fw::Serializable::~Serializable()>
    3a9c:	4668      	mov	r0, sp
    3a9e:	f8cd 8000 	str.w	r8, [sp]
    3aa2:	f7fc fd4b 	bl	53c <Fw::Serializable::~Serializable()>
  }
    3aa6:	b004      	add	sp, #16
    3aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
    3aac:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
    3ab0:	4620      	mov	r0, r4
    3ab2:	f014 f9cb 	bl	17e4c <Fw::PortBase::isConnected() const>
    3ab6:	2800      	cmp	r0, #0
    3ab8:	d0f0      	beq.n	3a9c <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
      {
    3aba:	a802      	add	r0, sp, #8
    3abc:	4d08      	ldr	r5, [pc, #32]	; (3ae0 <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xa0>)
    3abe:	f7fc fd37 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    3ac2:	2303      	movs	r3, #3
        this->m_cmdResponseOut_OutputPort[0].invoke(
    3ac4:	4620      	mov	r0, r4
    3ac6:	4632      	mov	r2, r6
    3ac8:	f88d 300c 	strb.w	r3, [sp, #12]
    3acc:	4639      	mov	r1, r7
    3ace:	ab02      	add	r3, sp, #8
      {
    3ad0:	9502      	str	r5, [sp, #8]
    3ad2:	f012 fd03 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    3ad6:	a802      	add	r0, sp, #8
    3ad8:	9502      	str	r5, [sp, #8]
    3ada:	f7fc fd2f 	bl	53c <Fw::Serializable::~Serializable()>
    3ade:	e7dd      	b.n	3a9c <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    3ae0:	20002bec 	.word	0x20002bec
    3ae4:	2000326c 	.word	0x2000326c

00003ae8 <Components::LedComponentBase::paramGet_BLINK_INTERVAL(Fw::ParamValid&)>:
  {
    3ae8:	b570      	push	{r4, r5, r6, lr}
    this->m_paramLock.lock();
    3aea:	f500 66a4 	add.w	r6, r0, #1312	; 0x520
  {
    3aee:	460d      	mov	r5, r1
    3af0:	4604      	mov	r4, r0
    this->m_paramLock.lock();
    3af2:	4630      	mov	r0, r6
    3af4:	f00f fec0 	bl	13878 <Os::Mutex::lock()>
    valid = this->m_param_BLINK_INTERVAL_valid;
    3af8:	f504 61a2 	add.w	r1, r4, #1296	; 0x510
    3afc:	4628      	mov	r0, r5
    3afe:	f011 ff89 	bl	15a14 <Fw::ParamValid::operator=(Fw::ParamValid const&)>
    _local = this->m_BLINK_INTERVAL;
    3b02:	f8d4 4518 	ldr.w	r4, [r4, #1304]	; 0x518
    this->m_paramLock.unLock();
    3b06:	4630      	mov	r0, r6
    3b08:	f00f ff0a 	bl	13920 <Os::Mutex::unLock()>
  }
    3b0c:	4620      	mov	r0, r4
    3b0e:	bd70      	pop	{r4, r5, r6, pc}

00003b10 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)>:
  // Parameter set functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse LedComponentBase ::
    paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase& val)
  {
    3b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b12:	b083      	sub	sp, #12
    3b14:	4604      	mov	r4, r0
    3b16:	460d      	mov	r5, r1
    U32 _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    3b18:	4610      	mov	r0, r2
    3b1a:	a901      	add	r1, sp, #4
    3b1c:	f7fd f8d0 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_stat != Fw::FW_SERIALIZE_OK) {
    3b20:	b148      	cbz	r0, 3b36 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)+0x26>
      {
    3b22:	4620      	mov	r0, r4
    3b24:	f7fc fd04 	bl	530 <Fw::Serializable::Serializable()>
    3b28:	4a15      	ldr	r2, [pc, #84]	; (3b80 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)+0x70>)
        this->e = e1;
    3b2a:	2302      	movs	r3, #2
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_BLINK_INTERVAL);
    return Fw::CmdResponse::OK;
  }
    3b2c:	4620      	mov	r0, r4
      {
    3b2e:	6022      	str	r2, [r4, #0]
        this->e = e1;
    3b30:	7123      	strb	r3, [r4, #4]
    3b32:	b003      	add	sp, #12
    3b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    this->m_paramLock.lock();
    3b36:	f505 67a4 	add.w	r7, r5, #1312	; 0x520
    3b3a:	4606      	mov	r6, r0
    3b3c:	4638      	mov	r0, r7
    3b3e:	f00f fe9b 	bl	13878 <Os::Mutex::lock()>
    this->m_BLINK_INTERVAL = _local_val;
    3b42:	9b01      	ldr	r3, [sp, #4]
    this->m_param_BLINK_INTERVAL_valid = Fw::ParamValid::VALID;
    3b44:	2101      	movs	r1, #1
    3b46:	f505 60a2 	add.w	r0, r5, #1296	; 0x510
    this->m_BLINK_INTERVAL = _local_val;
    3b4a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    this->m_param_BLINK_INTERVAL_valid = Fw::ParamValid::VALID;
    3b4e:	f011 ff65 	bl	15a1c <Fw::ParamValid::operator=(Fw::ParamValid::T)>
    this->m_paramLock.unLock();
    3b52:	4638      	mov	r0, r7
    3b54:	f00f fee4 	bl	13920 <Os::Mutex::unLock()>
    this->parameterUpdated(PARAMID_BLINK_INTERVAL);
    3b58:	682b      	ldr	r3, [r5, #0]
    3b5a:	4a0a      	ldr	r2, [pc, #40]	; (3b84 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)+0x74>)
    3b5c:	699b      	ldr	r3, [r3, #24]
    3b5e:	4293      	cmp	r3, r2
    3b60:	d109      	bne.n	3b76 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)+0x66>
      {
    3b62:	4620      	mov	r0, r4
    3b64:	f7fc fce4 	bl	530 <Fw::Serializable::Serializable()>
    3b68:	4a05      	ldr	r2, [pc, #20]	; (3b80 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)+0x70>)
        this->e = e1;
    3b6a:	2300      	movs	r3, #0
  }
    3b6c:	4620      	mov	r0, r4
      {
    3b6e:	6022      	str	r2, [r4, #0]
        this->e = e1;
    3b70:	7123      	strb	r3, [r4, #4]
    3b72:	b003      	add	sp, #12
    3b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    this->parameterUpdated(PARAMID_BLINK_INTERVAL);
    3b76:	4631      	mov	r1, r6
    3b78:	4628      	mov	r0, r5
    3b7a:	4798      	blx	r3
    3b7c:	e7f1      	b.n	3b62 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)+0x52>
    3b7e:	bf00      	nop
    3b80:	20002bec 	.word	0x20002bec
    3b84:	000033f5 	.word	0x000033f5

00003b88 <Components::LedComponentBase::paramSave_BLINK_INTERVAL()>:
  // Parameter save functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse LedComponentBase ::
    paramSave_BLINK_INTERVAL()
  {
    3b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
    3b8c:	f501 7758 	add.w	r7, r1, #864	; 0x360
  {
    3b90:	b0a2      	sub	sp, #136	; 0x88
    3b92:	4604      	mov	r4, r0
    3b94:	460d      	mov	r5, r1
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
    3b96:	4638      	mov	r0, r7
    3b98:	f014 f958 	bl	17e4c <Fw::PortBase::isConnected() const>
    3b9c:	b330      	cbz	r0, 3bec <Components::LedComponentBase::paramSave_BLINK_INTERVAL()+0x64>
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();
    3b9e:	f505 68a4 	add.w	r8, r5, #1312	; 0x520
      Fw::ParamBuffer saveBuff;
    3ba2:	a801      	add	r0, sp, #4
    3ba4:	f011 feb2 	bl	1590c <Fw::ParamBuffer::ParamBuffer()>
      this->m_paramLock.lock();
    3ba8:	4640      	mov	r0, r8
    3baa:	f00f fe65 	bl	13878 <Os::Mutex::lock()>

      Fw::SerializeStatus stat = saveBuff.serialize(m_BLINK_INTERVAL);
    3bae:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
    3bb2:	a801      	add	r0, sp, #4
    3bb4:	f7fc fd52 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    3bb8:	4606      	mov	r6, r0

      this->m_paramLock.unLock();
    3bba:	4640      	mov	r0, r8
    3bbc:	f00f feb0 	bl	13920 <Os::Mutex::unLock()>
      if (stat != Fw::FW_SERIALIZE_OK) {
    3bc0:	b9fe      	cbnz	r6, 3c02 <Components::LedComponentBase::paramSave_BLINK_INTERVAL()+0x7a>
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_BLINK_INTERVAL;
    3bc2:	4628      	mov	r0, r5
    3bc4:	f00e f996 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
    3bc8:	aa01      	add	r2, sp, #4
      id = this->getIdBase() + PARAMID_BLINK_INTERVAL;
    3bca:	4601      	mov	r1, r0
      this->m_prmSetOut_OutputPort[0].invoke(
    3bcc:	4638      	mov	r0, r7
    3bce:	f011 ffb3 	bl	15b38 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const>
      {
    3bd2:	4620      	mov	r0, r4
    3bd4:	f7fc fcac 	bl	530 <Fw::Serializable::Serializable()>
    3bd8:	4b0e      	ldr	r3, [pc, #56]	; (3c14 <Components::LedComponentBase::paramSave_BLINK_INTERVAL()+0x8c>)
        this->e = e1;
    3bda:	7126      	strb	r6, [r4, #4]
      {
    3bdc:	6023      	str	r3, [r4, #0]
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }
    3bde:	a801      	add	r0, sp, #4
    3be0:	f011 fe7c 	bl	158dc <Fw::ParamBuffer::~ParamBuffer()>

    return Fw::CmdResponse::EXECUTION_ERROR;
  }
    3be4:	4620      	mov	r0, r4
    3be6:	b022      	add	sp, #136	; 0x88
    3be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bec:	4620      	mov	r0, r4
    3bee:	f7fc fc9f 	bl	530 <Fw::Serializable::Serializable()>
    3bf2:	4a08      	ldr	r2, [pc, #32]	; (3c14 <Components::LedComponentBase::paramSave_BLINK_INTERVAL()+0x8c>)
        this->e = e1;
    3bf4:	2304      	movs	r3, #4
    3bf6:	4620      	mov	r0, r4
      {
    3bf8:	6022      	str	r2, [r4, #0]
        this->e = e1;
    3bfa:	7123      	strb	r3, [r4, #4]
    3bfc:	b022      	add	sp, #136	; 0x88
    3bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
    3c02:	4620      	mov	r0, r4
    3c04:	f7fc fc94 	bl	530 <Fw::Serializable::Serializable()>
    3c08:	4a02      	ldr	r2, [pc, #8]	; (3c14 <Components::LedComponentBase::paramSave_BLINK_INTERVAL()+0x8c>)
        this->e = e1;
    3c0a:	2302      	movs	r3, #2
      {
    3c0c:	6022      	str	r2, [r4, #0]
        this->e = e1;
    3c0e:	7123      	strb	r3, [r4, #4]
      }
    3c10:	e7e5      	b.n	3bde <Components::LedComponentBase::paramSave_BLINK_INTERVAL()+0x56>
    3c12:	bf00      	nop
    3c14:	20002bec 	.word	0x20002bec

00003c18 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    3c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c1c:	b085      	sub	sp, #20
    3c1e:	4615      	mov	r5, r2
    FW_ASSERT(callComp);
    3c20:	4606      	mov	r6, r0
  {
    3c22:	4698      	mov	r8, r3
    3c24:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    FW_ASSERT(callComp);
    3c26:	2800      	cmp	r0, #0
    3c28:	d051      	beq.n	3cce <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xb6>
    const U32 idBase = callComp->getIdBase();
    3c2a:	4630      	mov	r0, r6
    3c2c:	f00e f962 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    3c30:	42a8      	cmp	r0, r5
    const U32 idBase = callComp->getIdBase();
    3c32:	4604      	mov	r4, r0
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    3c34:	d808      	bhi.n	3c48 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x30>
    switch (opCode - idBase) {
    3c36:	1b2c      	subs	r4, r5, r4
    3c38:	2c01      	cmp	r4, #1
    3c3a:	d00f      	beq.n	3c5c <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x44>
    3c3c:	2c02      	cmp	r4, #2
    3c3e:	d020      	beq.n	3c82 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6a>
    3c40:	b1b4      	cbz	r4, 3c70 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x58>
  }
    3c42:	b005      	add	sp, #20
    3c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (opCode - idBase) {
    3c48:	1b2c      	subs	r4, r5, r4
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    3c4a:	4602      	mov	r2, r0
    3c4c:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
    3c50:	4629      	mov	r1, r5
    3c52:	4825      	ldr	r0, [pc, #148]	; (3ce8 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd0>)
    3c54:	f7fd fcf8 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    switch (opCode - idBase) {
    3c58:	2c01      	cmp	r4, #1
    3c5a:	d1ef      	bne.n	3c3c <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x24>
        Fw::CmdResponse _cstat = compPtr->paramSet_BLINK_INTERVAL(args);
    3c5c:	46e9      	mov	r9, sp
    3c5e:	463a      	mov	r2, r7
    3c60:	4631      	mov	r1, r6

      //! Copy constructor
      CmdResponse(
          const CmdResponse& obj //!< The source object
      )
      {
    3c62:	af02      	add	r7, sp, #8
    3c64:	4648      	mov	r0, r9
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3c66:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
        Fw::CmdResponse _cstat = compPtr->paramSet_BLINK_INTERVAL(args);
    3c6a:	f7ff ff51 	bl	3b10 <Components::LedComponentBase::paramSet_BLINK_INTERVAL(Fw::SerializeBufferBase&)>
      CmdResponse(
    3c6e:	e010      	b.n	3c92 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7a>
        compPtr->BLINKING_ON_OFF_cmdHandlerBase(
    3c70:	463b      	mov	r3, r7
    3c72:	4642      	mov	r2, r8
    3c74:	4629      	mov	r1, r5
    3c76:	4630      	mov	r0, r6
  }
    3c78:	b005      	add	sp, #20
    3c7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        compPtr->BLINKING_ON_OFF_cmdHandlerBase(
    3c7e:	f7ff bedf 	b.w	3a40 <Components::LedComponentBase::BLINKING_ON_OFF_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
        Fw::CmdResponse _cstat = compPtr->paramSave_BLINK_INTERVAL();
    3c82:	46e9      	mov	r9, sp
    3c84:	4631      	mov	r1, r6
      {
    3c86:	af02      	add	r7, sp, #8
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3c88:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
        Fw::CmdResponse _cstat = compPtr->paramSave_BLINK_INTERVAL();
    3c8c:	4648      	mov	r0, r9
    3c8e:	f7ff ff7b 	bl	3b88 <Components::LedComponentBase::paramSave_BLINK_INTERVAL()>
    3c92:	4638      	mov	r0, r7
    3c94:	4c15      	ldr	r4, [pc, #84]	; (3cec <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd4>)
    3c96:	f7fc fc4b 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    3c9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3c9e:	4630      	mov	r0, r6
      {
    3ca0:	9402      	str	r4, [sp, #8]
        this->e = obj.e;
    3ca2:	f88d 300c 	strb.w	r3, [sp, #12]
    3ca6:	f014 f8d1 	bl	17e4c <Fw::PortBase::isConnected() const>
    3caa:	b1b0      	cbz	r0, 3cda <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc2>
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    3cac:	4642      	mov	r2, r8
    3cae:	4629      	mov	r1, r5
    3cb0:	463b      	mov	r3, r7
    3cb2:	4630      	mov	r0, r6
    3cb4:	f012 fc12 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    3cb8:	4638      	mov	r0, r7
    3cba:	9402      	str	r4, [sp, #8]
    3cbc:	f7fc fc3e 	bl	53c <Fw::Serializable::~Serializable()>
    3cc0:	4648      	mov	r0, r9
    3cc2:	9400      	str	r4, [sp, #0]
    3cc4:	f7fc fc3a 	bl	53c <Fw::Serializable::~Serializable()>
  }
    3cc8:	b005      	add	sp, #20
    3cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(callComp);
    3cce:	f240 41a4 	movw	r1, #1188	; 0x4a4
    3cd2:	4805      	ldr	r0, [pc, #20]	; (3ce8 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd0>)
    3cd4:	f7fd fc9a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    3cd8:	e7a7      	b.n	3c2a <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x12>
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    3cda:	f240 315b 	movw	r1, #859	; 0x35b
    3cde:	4802      	ldr	r0, [pc, #8]	; (3ce8 <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd0>)
    3ce0:	f7fd fc94 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    3ce4:	e7e2      	b.n	3cac <Components::LedComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
    3ce6:	bf00      	nop
    3ce8:	20000494 	.word	0x20000494
    3cec:	20002bec 	.word	0x20002bec

00003cf0 <Components::LedComponentBase::~LedComponentBase()>:
  LedComponentBase ::
    3cf0:	b510      	push	{r4, lr}
    ~LedComponentBase()
    3cf2:	4b2a      	ldr	r3, [pc, #168]	; (3d9c <Components::LedComponentBase::~LedComponentBase()+0xac>)
  LedComponentBase ::
    3cf4:	4604      	mov	r4, r0
    ~LedComponentBase()
    3cf6:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
    3cfa:	6023      	str	r3, [r4, #0]
    3cfc:	f00f fb56 	bl	133ac <Os::Mutex::~Mutex()>
  class ParamValid :
    3d00:	4b27      	ldr	r3, [pc, #156]	; (3da0 <Components::LedComponentBase::~LedComponentBase()+0xb0>)
    3d02:	f504 60a2 	add.w	r0, r4, #1296	; 0x510
    3d06:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    3d0a:	f7fc fc17 	bl	53c <Fw::Serializable::~Serializable()>
    3d0e:	f8d4 34a4 	ldr.w	r3, [r4, #1188]	; 0x4a4
    3d12:	f204 40a4 	addw	r0, r4, #1188	; 0x4a4
    3d16:	685b      	ldr	r3, [r3, #4]
    3d18:	4798      	blx	r3
    3d1a:	f8d4 3438 	ldr.w	r3, [r4, #1080]	; 0x438
    3d1e:	f504 6087 	add.w	r0, r4, #1080	; 0x438
    3d22:	685b      	ldr	r3, [r3, #4]
    3d24:	4798      	blx	r3
    3d26:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
    3d2a:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
    3d2e:	685b      	ldr	r3, [r3, #4]
    3d30:	4798      	blx	r3
    3d32:	f8d4 3360 	ldr.w	r3, [r4, #864]	; 0x360
    3d36:	f504 7058 	add.w	r0, r4, #864	; 0x360
    3d3a:	685b      	ldr	r3, [r3, #4]
    3d3c:	4798      	blx	r3
    3d3e:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    3d42:	f504 703d 	add.w	r0, r4, #756	; 0x2f4
    3d46:	685b      	ldr	r3, [r3, #4]
    3d48:	4798      	blx	r3
    3d4a:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
    3d4e:	f504 7022 	add.w	r0, r4, #648	; 0x288
    3d52:	685b      	ldr	r3, [r3, #4]
    3d54:	4798      	blx	r3
    3d56:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    3d5a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    3d5e:	685b      	ldr	r3, [r3, #4]
    3d60:	4798      	blx	r3
    3d62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3d66:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    3d6a:	685b      	ldr	r3, [r3, #4]
    3d6c:	4798      	blx	r3
    3d6e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    3d72:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    3d76:	685b      	ldr	r3, [r3, #4]
    3d78:	4798      	blx	r3
    3d7a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    3d7e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    3d82:	685b      	ldr	r3, [r3, #4]
    3d84:	4798      	blx	r3
    3d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3d88:	f104 0064 	add.w	r0, r4, #100	; 0x64
    3d8c:	685b      	ldr	r3, [r3, #4]
    3d8e:	4798      	blx	r3
    3d90:	4620      	mov	r0, r4
    3d92:	f00e f83f 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    3d96:	4620      	mov	r0, r4
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	bf00      	nop
    3d9c:	20002ad8 	.word	0x20002ad8
    3da0:	20002ba8 	.word	0x20002ba8

00003da4 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const>:
  {
    3da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3da8:	4604      	mov	r4, r0
    3daa:	b0cc      	sub	sp, #304	; 0x130
    3dac:	460e      	mov	r6, r1
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    3dae:	f504 7573 	add.w	r5, r4, #972	; 0x3cc
    Fw::Time _logTime;
    3db2:	a804      	add	r0, sp, #16
    3db4:	f013 fd7c 	bl	178b0 <Fw::Time::Time()>
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    3db8:	4628      	mov	r0, r5
    3dba:	f014 f847 	bl	17e4c <Fw::PortBase::isConnected() const>
    3dbe:	b9b0      	cbnz	r0, 3dee <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x4a>
    if (this->m_logOut_OutputPort[0].isConnected()) {
    3dc0:	f504 7507 	add.w	r5, r4, #540	; 0x21c
    _id = this->getIdBase() + EVENTID_INVALIDBLINKARGUMENT;
    3dc4:	4620      	mov	r0, r4
    3dc6:	f00e f895 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    3dca:	4607      	mov	r7, r0
    if (this->m_logOut_OutputPort[0].isConnected()) {
    3dcc:	4628      	mov	r0, r5
    3dce:	f014 f83d 	bl	17e4c <Fw::PortBase::isConnected() const>
    3dd2:	2800      	cmp	r0, #0
    3dd4:	d159      	bne.n	3e8a <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0xe6>
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
    3dd6:	f504 7522 	add.w	r5, r4, #648	; 0x288
    3dda:	4628      	mov	r0, r5
    3ddc:	f014 f836 	bl	17e4c <Fw::PortBase::isConnected() const>
    3de0:	b950      	cbnz	r0, 3df8 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x54>
  }
    3de2:	a804      	add	r0, sp, #16
    3de4:	f013 fd0c 	bl	17800 <Fw::Time::~Time()>
    3de8:	b04c      	add	sp, #304	; 0x130
    3dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    3dee:	a904      	add	r1, sp, #16
    3df0:	4628      	mov	r0, r5
    3df2:	f013 fee3 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    3df6:	e7e3      	b.n	3dc0 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x1c>
    String() : StringBase() { *this = ""; }
    3df8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3ef8 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x154>
    3dfc:	a808      	add	r0, sp, #32
    3dfe:	f7fd fa0f 	bl	1220 <Fw::StringBase::StringBase()>
    TextLogString() : StringBase() { *this = ""; }
    3e02:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
        (void)StringBase::operator=(src);
    3e06:	4937      	ldr	r1, [pc, #220]	; (3ee4 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x140>)
    3e08:	a808      	add	r0, sp, #32
    String() : StringBase() { *this = ""; }
    3e0a:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    3e0e:	f7fd fa6f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      badArgument.toString(badArgumentStr);
    3e12:	a908      	add	r1, sp, #32
    3e14:	4630      	mov	r0, r6
    3e16:	f014 fa0f 	bl	18238 <Fw::On::toString(Fw::StringBase&) const>
    3e1a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 3efc <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x158>
    3e1e:	4640      	mov	r0, r8
    3e20:	f7fd f9fe 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    3e24:	492f      	ldr	r1, [pc, #188]	; (3ee4 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x140>)
    3e26:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    3e28:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
        (void)StringBase::operator=(src);
    3e2c:	f7fd fa60 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    3e30:	ab09      	add	r3, sp, #36	; 0x24
    3e32:	f104 0208 	add.w	r2, r4, #8
    3e36:	492c      	ldr	r1, [pc, #176]	; (3ee8 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x144>)
    3e38:	9300      	str	r3, [sp, #0]
    3e3a:	4640      	mov	r0, r8
    3e3c:	4b2b      	ldr	r3, [pc, #172]	; (3eec <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x148>)
    3e3e:	f7fd fa25 	bl	128c <Fw::StringBase::format(char const*, ...)>

      //! Constructor (user-provided value)
      LogSeverity(
          const T e1 //!< The raw enum value
      )
      {
    3e42:	a802      	add	r0, sp, #8
    3e44:	f7fc fb74 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    3e48:	2303      	movs	r3, #3
      {
    3e4a:	4c29      	ldr	r4, [pc, #164]	; (3ef0 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x14c>)
      this->m_logTextOut_OutputPort[0].invoke(
    3e4c:	4639      	mov	r1, r7
    3e4e:	aa04      	add	r2, sp, #16
    3e50:	4628      	mov	r0, r5
        this->e = e1;
    3e52:	f88d 300c 	strb.w	r3, [sp, #12]
    3e56:	ab02      	add	r3, sp, #8
    3e58:	f8cd 8000 	str.w	r8, [sp]
      {
    3e5c:	9402      	str	r4, [sp, #8]
    3e5e:	f012 ff59 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    3e62:	a802      	add	r0, sp, #8
    3e64:	9402      	str	r4, [sp, #8]
    3e66:	f7fc fb69 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    3e6a:	4640      	mov	r0, r8
    3e6c:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    3e70:	f7fd f9e0 	bl	1234 <Fw::StringBase::~StringBase()>
    ~String() {}
    3e74:	a808      	add	r0, sp, #32
    3e76:	f8cd 9020 	str.w	r9, [sp, #32]
    3e7a:	f7fd f9db 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    3e7e:	a804      	add	r0, sp, #16
    3e80:	f013 fcbe 	bl	17800 <Fw::Time::~Time()>
    3e84:	b04c      	add	sp, #304	; 0x130
    3e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    3e8a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
    3e8e:	4640      	mov	r0, r8
    3e90:	f012 fba2 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(badArgument);
    3e94:	4631      	mov	r1, r6
    3e96:	4640      	mov	r0, r8
    3e98:	f7fc fe32 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    3e9c:	b9d0      	cbnz	r0, 3ed4 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x130>
      {
    3e9e:	a808      	add	r0, sp, #32
    3ea0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3ef0 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x14c>
    3ea4:	f7fc fb44 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    3ea8:	2303      	movs	r3, #3
      this->m_logOut_OutputPort[0].invoke(
    3eaa:	4628      	mov	r0, r5
    3eac:	aa04      	add	r2, sp, #16
    3eae:	4639      	mov	r1, r7
    3eb0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    3eb4:	f8cd 8000 	str.w	r8, [sp]
    3eb8:	ab08      	add	r3, sp, #32
      {
    3eba:	f8cd 9020 	str.w	r9, [sp, #32]
    3ebe:	f012 fd11 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    3ec2:	a808      	add	r0, sp, #32
    3ec4:	f8cd 9020 	str.w	r9, [sp, #32]
    3ec8:	f7fc fb38 	bl	53c <Fw::Serializable::~Serializable()>
    }
    3ecc:	4640      	mov	r0, r8
    3ece:	f012 fb6b 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    3ed2:	e780      	b.n	3dd6 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x32>
      FW_ASSERT(
    3ed4:	4601      	mov	r1, r0
    3ed6:	f240 32be 	movw	r2, #958	; 0x3be
    3eda:	4806      	ldr	r0, [pc, #24]	; (3ef4 <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0x150>)
    3edc:	f7fd fba4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    3ee0:	e7dd      	b.n	3e9e <Components::LedComponentBase::log_WARNING_LO_InvalidBlinkArgument(Fw::On) const+0xfa>
    3ee2:	bf00      	nop
    3ee4:	20001d2c 	.word	0x20001d2c
    3ee8:	200022e0 	.word	0x200022e0
    3eec:	200022c8 	.word	0x200022c8
    3ef0:	20002c08 	.word	0x20002c08
    3ef4:	20000494 	.word	0x20000494
    3ef8:	200032dc 	.word	0x200032dc
    3efc:	20002f60 	.word	0x20002f60

00003f00 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const>:
  {
    3f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f04:	4604      	mov	r4, r0
    3f06:	b0cc      	sub	sp, #304	; 0x130
    3f08:	460e      	mov	r6, r1
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    3f0a:	f504 7573 	add.w	r5, r4, #972	; 0x3cc
    Fw::Time _logTime;
    3f0e:	a804      	add	r0, sp, #16
    3f10:	f013 fcce 	bl	178b0 <Fw::Time::Time()>
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    3f14:	4628      	mov	r0, r5
    3f16:	f013 ff99 	bl	17e4c <Fw::PortBase::isConnected() const>
    3f1a:	b9b0      	cbnz	r0, 3f4a <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x4a>
    if (this->m_logOut_OutputPort[0].isConnected()) {
    3f1c:	f504 7507 	add.w	r5, r4, #540	; 0x21c
    _id = this->getIdBase() + EVENTID_SETBLINKINGSTATE;
    3f20:	4620      	mov	r0, r4
    3f22:	f00d ffe7 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    3f26:	1c47      	adds	r7, r0, #1
    if (this->m_logOut_OutputPort[0].isConnected()) {
    3f28:	4628      	mov	r0, r5
    3f2a:	f013 ff8f 	bl	17e4c <Fw::PortBase::isConnected() const>
    3f2e:	2800      	cmp	r0, #0
    3f30:	d159      	bne.n	3fe6 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0xe6>
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
    3f32:	f504 7522 	add.w	r5, r4, #648	; 0x288
    3f36:	4628      	mov	r0, r5
    3f38:	f013 ff88 	bl	17e4c <Fw::PortBase::isConnected() const>
    3f3c:	b950      	cbnz	r0, 3f54 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x54>
  }
    3f3e:	a804      	add	r0, sp, #16
    3f40:	f013 fc5e 	bl	17800 <Fw::Time::~Time()>
    3f44:	b04c      	add	sp, #304	; 0x130
    3f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    3f4a:	a904      	add	r1, sp, #16
    3f4c:	4628      	mov	r0, r5
    3f4e:	f013 fe35 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    3f52:	e7e3      	b.n	3f1c <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x1c>
    String() : StringBase() { *this = ""; }
    3f54:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4054 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x154>
    3f58:	a808      	add	r0, sp, #32
    3f5a:	f7fd f961 	bl	1220 <Fw::StringBase::StringBase()>
    TextLogString() : StringBase() { *this = ""; }
    3f5e:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
        (void)StringBase::operator=(src);
    3f62:	4937      	ldr	r1, [pc, #220]	; (4040 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x140>)
    3f64:	a808      	add	r0, sp, #32
    String() : StringBase() { *this = ""; }
    3f66:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    3f6a:	f7fd f9c1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      state.toString(stateStr);
    3f6e:	a908      	add	r1, sp, #32
    3f70:	4630      	mov	r0, r6
    3f72:	f014 f961 	bl	18238 <Fw::On::toString(Fw::StringBase&) const>
    3f76:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 4058 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x158>
    3f7a:	4640      	mov	r0, r8
    3f7c:	f7fd f950 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    3f80:	492f      	ldr	r1, [pc, #188]	; (4040 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x140>)
    3f82:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    3f84:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
        (void)StringBase::operator=(src);
    3f88:	f7fd f9b2 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    3f8c:	ab09      	add	r3, sp, #36	; 0x24
    3f8e:	f104 0208 	add.w	r2, r4, #8
    3f92:	492c      	ldr	r1, [pc, #176]	; (4044 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x144>)
    3f94:	9300      	str	r3, [sp, #0]
    3f96:	4640      	mov	r0, r8
    3f98:	4b2b      	ldr	r3, [pc, #172]	; (4048 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x148>)
    3f9a:	f7fd f977 	bl	128c <Fw::StringBase::format(char const*, ...)>
      {
    3f9e:	a802      	add	r0, sp, #8
    3fa0:	f7fc fac6 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    3fa4:	2305      	movs	r3, #5
      {
    3fa6:	4c29      	ldr	r4, [pc, #164]	; (404c <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x14c>)
      this->m_logTextOut_OutputPort[0].invoke(
    3fa8:	4639      	mov	r1, r7
    3faa:	aa04      	add	r2, sp, #16
    3fac:	4628      	mov	r0, r5
        this->e = e1;
    3fae:	f88d 300c 	strb.w	r3, [sp, #12]
    3fb2:	ab02      	add	r3, sp, #8
    3fb4:	f8cd 8000 	str.w	r8, [sp]
      {
    3fb8:	9402      	str	r4, [sp, #8]
    3fba:	f012 feab 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    3fbe:	a802      	add	r0, sp, #8
    3fc0:	9402      	str	r4, [sp, #8]
    3fc2:	f7fc fabb 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    3fc6:	4640      	mov	r0, r8
    3fc8:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    3fcc:	f7fd f932 	bl	1234 <Fw::StringBase::~StringBase()>
    ~String() {}
    3fd0:	a808      	add	r0, sp, #32
    3fd2:	f8cd 9020 	str.w	r9, [sp, #32]
    3fd6:	f7fd f92d 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    3fda:	a804      	add	r0, sp, #16
    3fdc:	f013 fc10 	bl	17800 <Fw::Time::~Time()>
    3fe0:	b04c      	add	sp, #304	; 0x130
    3fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    3fe6:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
    3fea:	4640      	mov	r0, r8
    3fec:	f012 faf4 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(state);
    3ff0:	4631      	mov	r1, r6
    3ff2:	4640      	mov	r0, r8
    3ff4:	f7fc fd84 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    3ff8:	b9d0      	cbnz	r0, 4030 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x130>
      {
    3ffa:	a808      	add	r0, sp, #32
    3ffc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 404c <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x14c>
    4000:	f7fc fa96 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    4004:	2305      	movs	r3, #5
      this->m_logOut_OutputPort[0].invoke(
    4006:	4628      	mov	r0, r5
    4008:	aa04      	add	r2, sp, #16
    400a:	4639      	mov	r1, r7
    400c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    4010:	f8cd 8000 	str.w	r8, [sp]
    4014:	ab08      	add	r3, sp, #32
      {
    4016:	f8cd 9020 	str.w	r9, [sp, #32]
    401a:	f012 fc63 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    401e:	a808      	add	r0, sp, #32
    4020:	f8cd 9020 	str.w	r9, [sp, #32]
    4024:	f7fc fa8a 	bl	53c <Fw::Serializable::~Serializable()>
    }
    4028:	4640      	mov	r0, r8
    402a:	f012 fabd 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    402e:	e780      	b.n	3f32 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x32>
      FW_ASSERT(
    4030:	4601      	mov	r1, r0
    4032:	f240 4213 	movw	r2, #1043	; 0x413
    4036:	4806      	ldr	r0, [pc, #24]	; (4050 <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0x150>)
    4038:	f7fd faf6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    403c:	e7dd      	b.n	3ffa <Components::LedComponentBase::log_ACTIVITY_HI_SetBlinkingState(Fw::On) const+0xfa>
    403e:	bf00      	nop
    4040:	20001d2c 	.word	0x20001d2c
    4044:	200022a4 	.word	0x200022a4
    4048:	20002290 	.word	0x20002290
    404c:	20002c08 	.word	0x20002c08
    4050:	20000494 	.word	0x20000494
    4054:	200032dc 	.word	0x200032dc
    4058:	20002f60 	.word	0x20002f60

0000405c <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const>:
  {
    405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    4060:	f500 6787 	add.w	r7, r0, #1080	; 0x438
  {
    4064:	b088      	sub	sp, #32
    4066:	4604      	mov	r4, r0
    4068:	460e      	mov	r6, r1
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    406a:	4638      	mov	r0, r7
  {
    406c:	4615      	mov	r5, r2
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    406e:	f013 feed 	bl	17e4c <Fw::PortBase::isConnected() const>
    4072:	b910      	cbnz	r0, 407a <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x1e>
  }
    4074:	b008      	add	sp, #32
    4076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_timeCaller_OutputPort[0].isConnected() &&
    407a:	f504 7873 	add.w	r8, r4, #972	; 0x3cc
    407e:	4640      	mov	r0, r8
    4080:	f013 fee4 	bl	17e4c <Fw::PortBase::isConnected() const>
    4084:	b9b0      	cbnz	r0, 40b4 <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x58>
      Fw::TlmBuffer _tlmBuff;
    4086:	4668      	mov	r0, sp
    4088:	f012 ff40 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    408c:	4631      	mov	r1, r6
    408e:	4668      	mov	r0, sp
    4090:	f7fc fd36 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    4094:	b9c8      	cbnz	r0, 40ca <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x6e>
      _id = this->getIdBase() + CHANNELID_BLINKINGSTATE;
    4096:	4620      	mov	r0, r4
    4098:	f00d ff2c 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_tlmOut_OutputPort[0].invoke(
    409c:	466b      	mov	r3, sp
      _id = this->getIdBase() + CHANNELID_BLINKINGSTATE;
    409e:	4601      	mov	r1, r0
      this->m_tlmOut_OutputPort[0].invoke(
    40a0:	462a      	mov	r2, r5
    40a2:	4638      	mov	r0, r7
    40a4:	f013 f978 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    40a8:	4668      	mov	r0, sp
    40aa:	f012 ff17 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    40ae:	b008      	add	sp, #32
    40b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    40b4:	4908      	ldr	r1, [pc, #32]	; (40d8 <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x7c>)
    40b6:	4628      	mov	r0, r5
    40b8:	f013 fc40 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    40bc:	2800      	cmp	r0, #0
    40be:	d0e2      	beq.n	4086 <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x2a>
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
    40c0:	4640      	mov	r0, r8
    40c2:	4629      	mov	r1, r5
    40c4:	f013 fd7a 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    40c8:	e7dd      	b.n	4086 <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x2a>
      FW_ASSERT(
    40ca:	4601      	mov	r1, r0
    40cc:	f240 4256 	movw	r2, #1110	; 0x456
    40d0:	4802      	ldr	r0, [pc, #8]	; (40dc <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x80>)
    40d2:	f7fd faa9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    40d6:	e7de      	b.n	4096 <Components::LedComponentBase::tlmWrite_BlinkingState(Fw::On const&, Fw::Time) const+0x3a>
    40d8:	2000c9b0 	.word	0x2000c9b0
    40dc:	20000494 	.word	0x20000494

000040e0 <Arduino::GpioDriver::~GpioDriver()>:

void GpioDriver ::init(const NATIVE_INT_TYPE instance) {
    GpioDriverComponentBase::init(instance);
}

GpioDriver ::~GpioDriver() {}
    40e0:	4b03      	ldr	r3, [pc, #12]	; (40f0 <Arduino::GpioDriver::~GpioDriver()+0x10>)
    40e2:	b510      	push	{r4, lr}
    40e4:	4604      	mov	r4, r0
    40e6:	6003      	str	r3, [r0, #0]
    40e8:	f000 f8ea 	bl	42c0 <Arduino::GpioDriverComponentBase::~GpioDriverComponentBase()>
    40ec:	4620      	mov	r0, r4
    40ee:	bd10      	pop	{r4, pc}
    40f0:	20003f9c 	.word	0x20003f9c

000040f4 <Arduino::GpioDriver::~GpioDriver()>:
    40f4:	4b06      	ldr	r3, [pc, #24]	; (4110 <Arduino::GpioDriver::~GpioDriver()+0x1c>)
    40f6:	b510      	push	{r4, lr}
    40f8:	4604      	mov	r4, r0
    40fa:	6003      	str	r3, [r0, #0]
    40fc:	f000 f8e0 	bl	42c0 <Arduino::GpioDriverComponentBase::~GpioDriverComponentBase()>
    4100:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4104:	4620      	mov	r0, r4
    4106:	f014 fde3 	bl	18cd0 <operator delete(void*, unsigned int)>
    410a:	4620      	mov	r0, r4
    410c:	bd10      	pop	{r4, pc}
    410e:	bf00      	nop
    4110:	20003f9c 	.word	0x20003f9c

00004114 <Arduino::GpioDriver::gpioRead_handler(long, Fw::Logic&)>:
    m_pin = gpio;
    pinMode(m_pin, (direction == IN) ? Arduino::DEF_INPUT : Arduino::DEF_OUTPUT);
    return true;
}

Drv::GpioStatus GpioDriver ::gpioRead_handler(const NATIVE_INT_TYPE portNum, Fw::Logic& state) {
    4114:	b538      	push	{r3, r4, r5, lr}
    4116:	4604      	mov	r4, r0
    U8 value = digitalRead(m_pin);
    4118:	f891 0144 	ldrb.w	r0, [r1, #324]	; 0x144
Drv::GpioStatus GpioDriver ::gpioRead_handler(const NATIVE_INT_TYPE portNum, Fw::Logic& state) {
    411c:	461d      	mov	r5, r3
    U8 value = digitalRead(m_pin);
    411e:	f014 fce9 	bl	18af4 <digitalRead>
    4122:	4601      	mov	r1, r0
    state = (value == Arduino::DEF_HIGH) ? Fw::Logic::HIGH : Fw::Logic::LOW;
    4124:	4628      	mov	r0, r5
    4126:	f1a1 0101 	sub.w	r1, r1, #1
    412a:	fab1 f181 	clz	r1, r1
    412e:	0949      	lsrs	r1, r1, #5
    4130:	f014 f866 	bl	18200 <Fw::Logic::operator=(Fw::Logic::T)>

      //! Constructor (user-provided value)
      GpioStatus(
          const T e1 //!< The raw enum value
      )
      {
    4134:	4620      	mov	r0, r4
    4136:	f7fc f9fb 	bl	530 <Fw::Serializable::Serializable()>
    413a:	4a03      	ldr	r2, [pc, #12]	; (4148 <Arduino::GpioDriver::gpioRead_handler(long, Fw::Logic&)+0x34>)
        this->e = e1;
    413c:	2300      	movs	r3, #0
    return Drv::GpioStatus::OP_OK;
}
    413e:	4620      	mov	r0, r4
      {
    4140:	6022      	str	r2, [r4, #0]
        this->e = e1;
    4142:	7123      	strb	r3, [r4, #4]
    4144:	bd38      	pop	{r3, r4, r5, pc}
    4146:	bf00      	nop
    4148:	20003748 	.word	0x20003748

0000414c <Arduino::GpioDriver::gpioWrite_handler(long, Fw::Logic const&)>:

Drv::GpioStatus GpioDriver ::gpioWrite_handler(const NATIVE_INT_TYPE portNum, const Fw::Logic& state) {
    digitalWrite(m_pin, (state == Fw::Logic::HIGH) ? Arduino::DEF_HIGH : Arduino::DEF_LOW);
    414c:	791b      	ldrb	r3, [r3, #4]
Drv::GpioStatus GpioDriver ::gpioWrite_handler(const NATIVE_INT_TYPE portNum, const Fw::Logic& state) {
    414e:	b510      	push	{r4, lr}
    4150:	4604      	mov	r4, r0
    digitalWrite(m_pin, (state == Fw::Logic::HIGH) ? Arduino::DEF_HIGH : Arduino::DEF_LOW);
    4152:	f891 0144 	ldrb.w	r0, [r1, #324]	; 0x144
    4156:	f1a3 0101 	sub.w	r1, r3, #1
    415a:	fab1 f181 	clz	r1, r1
    415e:	0949      	lsrs	r1, r1, #5
    4160:	f014 fc9e 	bl	18aa0 <digitalWrite>
      {
    4164:	4620      	mov	r0, r4
    4166:	f7fc f9e3 	bl	530 <Fw::Serializable::Serializable()>
    416a:	4a03      	ldr	r2, [pc, #12]	; (4178 <Arduino::GpioDriver::gpioWrite_handler(long, Fw::Logic const&)+0x2c>)
        this->e = e1;
    416c:	2300      	movs	r3, #0
    return Drv::GpioStatus::OP_OK;
}
    416e:	4620      	mov	r0, r4
      {
    4170:	6022      	str	r2, [r4, #0]
        this->e = e1;
    4172:	7123      	strb	r3, [r4, #4]
    4174:	bd10      	pop	{r4, pc}
    4176:	bf00      	nop
    4178:	20003748 	.word	0x20003748

0000417c <Arduino::GpioDriver::GpioDriver(char const*)>:
GpioDriver ::GpioDriver(const char* const compName)
    417c:	b510      	push	{r4, lr}
    417e:	4604      	mov	r4, r0
    : GpioDriverComponentBase(compName), m_pin(-1) {}
    4180:	f000 f88c 	bl	429c <Arduino::GpioDriverComponentBase::GpioDriverComponentBase(char const*)>
    4184:	4a03      	ldr	r2, [pc, #12]	; (4194 <Arduino::GpioDriver::GpioDriver(char const*)+0x18>)
    4186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    418a:	4620      	mov	r0, r4
    418c:	6022      	str	r2, [r4, #0]
    418e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    4192:	bd10      	pop	{r4, pc}
    4194:	20003f9c 	.word	0x20003f9c

00004198 <Arduino::GpioDriver::init(long)>:
    GpioDriverComponentBase::init(instance);
    4198:	f000 b80e 	b.w	41b8 <Arduino::GpioDriverComponentBase::init(long)>

0000419c <Arduino::GpioDriver::open(long, Arduino::GpioDriver::GpioDirection)>:
bool GpioDriver ::open(NATIVE_INT_TYPE gpio, GpioDirection direction) {
    419c:	4684      	mov	ip, r0
    419e:	b508      	push	{r3, lr}
    41a0:	460b      	mov	r3, r1
    pinMode(m_pin, (direction == IN) ? Arduino::DEF_INPUT : Arduino::DEF_OUTPUT);
    41a2:	1e11      	subs	r1, r2, #0
    41a4:	b2d8      	uxtb	r0, r3
    41a6:	bf18      	it	ne
    41a8:	2101      	movne	r1, #1
    m_pin = gpio;
    41aa:	f8cc 3144 	str.w	r3, [ip, #324]	; 0x144
    pinMode(m_pin, (direction == IN) ? Arduino::DEF_INPUT : Arduino::DEF_OUTPUT);
    41ae:	f014 fcb3 	bl	18b18 <pinMode>
}
    41b2:	2001      	movs	r0, #1
    41b4:	bd08      	pop	{r3, pc}
    41b6:	bf00      	nop

000041b8 <Arduino::GpioDriverComponentBase::init(long)>:
  // Component initialization
  // ----------------------------------------------------------------------

  void GpioDriverComponentBase ::
    init(FwEnumStoreType instance)
  {
    41b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41bc:	4604      	mov	r4, r0
    41be:	b096      	sub	sp, #88	; 0x58
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);
    41c0:	f00d fe8e 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    41c4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4278 <Arduino::GpioDriverComponentBase::init(long)+0xc0>
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_gpioRead_InputPorts());
      port++
    ) {
      this->m_gpioRead_InputPort[port].init();
    41c8:	f104 0664 	add.w	r6, r4, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    41cc:	4d25      	ldr	r5, [pc, #148]	; (4264 <Arduino::GpioDriverComponentBase::init(long)+0xac>)
    const char* toChar() const { return this->m_buf; }
    41ce:	f104 0708 	add.w	r7, r4, #8
    41d2:	4630      	mov	r0, r6
    41d4:	f000 fadc 	bl	4790 <Drv::InputGpioReadPort::init()>
      this->m_gpioRead_InputPort[port].addCallComp(
    41d8:	4a23      	ldr	r2, [pc, #140]	; (4268 <Arduino::GpioDriverComponentBase::init(long)+0xb0>)
    41da:	4621      	mov	r1, r4
    41dc:	4630      	mov	r0, r6
    41de:	f000 fabd 	bl	475c <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))>
        this,
        m_p_gpioRead_in
      );
      this->m_gpioRead_InputPort[port].setPortNum(port);
    41e2:	2100      	movs	r1, #0
    41e4:	4630      	mov	r0, r6
    41e6:	f013 fd75 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    41ea:	4668      	mov	r0, sp
    41ec:	f7fd f818 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    41f0:	4641      	mov	r1, r8
    41f2:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    41f4:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    41f6:	f7fd f87b 	bl	12f0 <Fw::StringBase::operator=(char const*)>

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
    41fa:	2300      	movs	r3, #0
    41fc:	463a      	mov	r2, r7
    41fe:	491b      	ldr	r1, [pc, #108]	; (426c <Arduino::GpioDriverComponentBase::init(long)+0xb4>)
    4200:	4668      	mov	r0, sp
    4202:	f7fd f843 	bl	128c <Fw::StringBase::format(char const*, ...)>
        "%s_gpioRead_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_gpioRead_InputPort[port].setObjName(portName.toChar());
    4206:	a901      	add	r1, sp, #4
    4208:	4630      	mov	r0, r6
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_gpioWrite_InputPorts());
      port++
    ) {
      this->m_gpioWrite_InputPort[port].init();
    420a:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
      this->m_gpioRead_InputPort[port].setObjName(portName.toChar());
    420e:	f013 fec7 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4212:	4668      	mov	r0, sp
    4214:	9500      	str	r5, [sp, #0]
    4216:	f7fd f80d 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_gpioWrite_InputPort[port].init();
    421a:	4630      	mov	r0, r6
    421c:	f000 fbfa 	bl	4a14 <Drv::InputGpioWritePort::init()>
      this->m_gpioWrite_InputPort[port].addCallComp(
    4220:	4a13      	ldr	r2, [pc, #76]	; (4270 <Arduino::GpioDriverComponentBase::init(long)+0xb8>)
    4222:	4621      	mov	r1, r4
    4224:	4630      	mov	r0, r6
    4226:	f000 fb79 	bl	491c <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))>
        this,
        m_p_gpioWrite_in
      );
      this->m_gpioWrite_InputPort[port].setPortNum(port);
    422a:	2100      	movs	r1, #0
    422c:	4630      	mov	r0, r6
    422e:	f013 fd51 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    4232:	4668      	mov	r0, sp
    4234:	f7fc fff4 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4238:	4641      	mov	r1, r8
    423a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    423c:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    423e:	f7fd f857 	bl	12f0 <Fw::StringBase::operator=(char const*)>

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
    4242:	463a      	mov	r2, r7
    4244:	2300      	movs	r3, #0
    4246:	490b      	ldr	r1, [pc, #44]	; (4274 <Arduino::GpioDriverComponentBase::init(long)+0xbc>)
    4248:	4668      	mov	r0, sp
    424a:	f7fd f81f 	bl	128c <Fw::StringBase::format(char const*, ...)>
        "%s_gpioWrite_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_gpioWrite_InputPort[port].setObjName(portName.toChar());
    424e:	a901      	add	r1, sp, #4
    4250:	4630      	mov	r0, r6
    4252:	f013 fea5 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4256:	4668      	mov	r0, sp
    4258:	9500      	str	r5, [sp, #0]
    425a:	f7fc ffeb 	bl	1234 <Fw::StringBase::~StringBase()>
#endif
    }
  }
    425e:	b016      	add	sp, #88	; 0x58
    4260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4264:	20002b80 	.word	0x20002b80
    4268:	00004345 	.word	0x00004345
    426c:	20001f0c 	.word	0x20001f0c
    4270:	000043d9 	.word	0x000043d9
    4274:	20001f28 	.word	0x20001f28
    4278:	20001d2c 	.word	0x20001d2c

0000427c <Arduino::GpioDriverComponentBase::get_gpioWrite_InputPort(long)>:
    return &this->m_gpioRead_InputPort[portNum];
  }

  Drv::InputGpioWritePort* GpioDriverComponentBase ::
    get_gpioWrite_InputPort(FwIndexType portNum)
  {
    427c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    427e:	1e0c      	subs	r4, r1, #0
  {
    4280:	4605      	mov	r5, r0
    FW_ASSERT(
    4282:	dd03      	ble.n	428c <Arduino::GpioDriverComponentBase::get_gpioWrite_InputPort(long)+0x10>
    4284:	225d      	movs	r2, #93	; 0x5d
    4286:	4804      	ldr	r0, [pc, #16]	; (4298 <Arduino::GpioDriverComponentBase::get_gpioWrite_InputPort(long)+0x1c>)
    4288:	f7fd f9ce 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      portNum < this->getNum_gpioWrite_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_gpioWrite_InputPort[portNum];
    428c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    4290:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    4294:	30d4      	adds	r0, #212	; 0xd4
    4296:	bd38      	pop	{r3, r4, r5, pc}
    4298:	20001eb8 	.word	0x20001eb8

0000429c <Arduino::GpioDriverComponentBase::GpioDriverComponentBase(char const*)>:

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  GpioDriverComponentBase ::
    429c:	b510      	push	{r4, lr}
    429e:	4604      	mov	r4, r0
    GpioDriverComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
    42a0:	f00d fe10 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    42a4:	4b05      	ldr	r3, [pc, #20]	; (42bc <Arduino::GpioDriverComponentBase::GpioDriverComponentBase(char const*)+0x20>)
    42a6:	4620      	mov	r0, r4
    42a8:	f840 3b64 	str.w	r3, [r0], #100
    42ac:	f000 fa4a 	bl	4744 <Drv::InputGpioReadPort::InputGpioReadPort()>
    42b0:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    42b4:	f000 fb26 	bl	4904 <Drv::InputGpioWritePort::InputGpioWritePort()>
  {

  }
    42b8:	4620      	mov	r0, r4
    42ba:	bd10      	pop	{r4, pc}
    42bc:	20004040 	.word	0x20004040

000042c0 <Arduino::GpioDriverComponentBase::~GpioDriverComponentBase()>:

  GpioDriverComponentBase ::
    42c0:	b510      	push	{r4, lr}
    ~GpioDriverComponentBase()
    42c2:	4b09      	ldr	r3, [pc, #36]	; (42e8 <Arduino::GpioDriverComponentBase::~GpioDriverComponentBase()+0x28>)
  GpioDriverComponentBase ::
    42c4:	4604      	mov	r4, r0
    ~GpioDriverComponentBase()
    42c6:	f840 3bd4 	str.w	r3, [r0], #212
    42ca:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    42ce:	685b      	ldr	r3, [r3, #4]
    42d0:	4798      	blx	r3
    42d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    42d4:	f104 0064 	add.w	r0, r4, #100	; 0x64
    42d8:	685b      	ldr	r3, [r3, #4]
    42da:	4798      	blx	r3
    42dc:	4620      	mov	r0, r4
    42de:	f00d fd99 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  {

  }
    42e2:	4620      	mov	r0, r4
    42e4:	bd10      	pop	{r4, pc}
    42e6:	bf00      	nop
    42e8:	20004040 	.word	0x20004040

000042ec <Arduino::GpioDriverComponentBase::gpioRead_handlerBase(long, Fw::Logic&)>:
  Drv::GpioStatus GpioDriverComponentBase ::
    gpioRead_handlerBase(
        FwIndexType portNum,
        Fw::Logic& state
    )
  {
    42ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Make sure port number is valid
    FW_ASSERT(
    42ee:	1e15      	subs	r5, r2, #0
  {
    42f0:	b085      	sub	sp, #20
    42f2:	4604      	mov	r4, r0
    42f4:	460e      	mov	r6, r1
    FW_ASSERT(
    42f6:	dd06      	ble.n	4306 <Arduino::GpioDriverComponentBase::gpioRead_handlerBase(long, Fw::Logic&)+0x1a>
    42f8:	2293      	movs	r2, #147	; 0x93
    42fa:	4629      	mov	r1, r5
    42fc:	480f      	ldr	r0, [pc, #60]	; (433c <Arduino::GpioDriverComponentBase::gpioRead_handlerBase(long, Fw::Logic&)+0x50>)
    42fe:	9301      	str	r3, [sp, #4]
    4300:	f7fd f992 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    4304:	9b01      	ldr	r3, [sp, #4]
      {
    4306:	4f0e      	ldr	r7, [pc, #56]	; (4340 <Arduino::GpioDriverComponentBase::gpioRead_handlerBase(long, Fw::Logic&)+0x54>)
    4308:	4620      	mov	r0, r4
    430a:	9301      	str	r3, [sp, #4]
    430c:	f7fc f910 	bl	530 <Fw::Serializable::Serializable()>
    4310:	6027      	str	r7, [r4, #0]
    );

    Drv::GpioStatus retVal;

    // Call handler function
    retVal = this->gpioRead_handler(
    4312:	462a      	mov	r2, r5
    4314:	6830      	ldr	r0, [r6, #0]
    4316:	4631      	mov	r1, r6
    4318:	9b01      	ldr	r3, [sp, #4]
    431a:	6905      	ldr	r5, [r0, #16]
        this->e = OP_OK;
    431c:	2000      	movs	r0, #0
    431e:	7120      	strb	r0, [r4, #4]
    4320:	a802      	add	r0, sp, #8
    4322:	47a8      	blx	r5
      portNum,
      state
    );
    4324:	a902      	add	r1, sp, #8
    4326:	4620      	mov	r0, r4
    4328:	f000 faae 	bl	4888 <Drv::GpioStatus::operator=(Drv::GpioStatus const&)>
  class GpioStatus :
    432c:	a802      	add	r0, sp, #8
    432e:	9702      	str	r7, [sp, #8]
    4330:	f7fc f904 	bl	53c <Fw::Serializable::~Serializable()>

    return retVal;
  }
    4334:	4620      	mov	r0, r4
    4336:	b005      	add	sp, #20
    4338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    433a:	bf00      	nop
    433c:	20001eb8 	.word	0x20001eb8
    4340:	20003748 	.word	0x20003748

00004344 <Arduino::GpioDriverComponentBase::m_p_gpioRead_in(Fw::PassiveComponentBase*, long, Fw::Logic&)>:
    m_p_gpioRead_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Logic& state
    )
  {
    4344:	b530      	push	{r4, r5, lr}
    4346:	4604      	mov	r4, r0
    4348:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    434a:	460d      	mov	r5, r1
    434c:	b131      	cbz	r1, 435c <Arduino::GpioDriverComponentBase::m_p_gpioRead_in(Fw::PassiveComponentBase*, long, Fw::Logic&)+0x18>
    GpioDriverComponentBase* compPtr = static_cast<GpioDriverComponentBase*>(callComp);
    return compPtr->gpioRead_handlerBase(
      portNum,
      state
    );
    434e:	4620      	mov	r0, r4
    4350:	4629      	mov	r1, r5
    4352:	f7ff ffcb 	bl	42ec <Arduino::GpioDriverComponentBase::gpioRead_handlerBase(long, Fw::Logic&)>
  }
    4356:	4620      	mov	r0, r4
    4358:	b003      	add	sp, #12
    435a:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(callComp);
    435c:	21c5      	movs	r1, #197	; 0xc5
    435e:	4807      	ldr	r0, [pc, #28]	; (437c <Arduino::GpioDriverComponentBase::m_p_gpioRead_in(Fw::PassiveComponentBase*, long, Fw::Logic&)+0x38>)
    4360:	e9cd 2300 	strd	r2, r3, [sp]
    4364:	f7fd f952 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    );
    4368:	4620      	mov	r0, r4
    436a:	4629      	mov	r1, r5
    FW_ASSERT(callComp);
    436c:	e9dd 2300 	ldrd	r2, r3, [sp]
    );
    4370:	f7ff ffbc 	bl	42ec <Arduino::GpioDriverComponentBase::gpioRead_handlerBase(long, Fw::Logic&)>
  }
    4374:	4620      	mov	r0, r4
    4376:	b003      	add	sp, #12
    4378:	bd30      	pop	{r4, r5, pc}
    437a:	bf00      	nop
    437c:	20001eb8 	.word	0x20001eb8

00004380 <Arduino::GpioDriverComponentBase::gpioWrite_handlerBase(long, Fw::Logic const&)>:
  {
    4380:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
    4382:	1e15      	subs	r5, r2, #0
  {
    4384:	b085      	sub	sp, #20
    4386:	4604      	mov	r4, r0
    4388:	460e      	mov	r6, r1
    FW_ASSERT(
    438a:	dd06      	ble.n	439a <Arduino::GpioDriverComponentBase::gpioWrite_handlerBase(long, Fw::Logic const&)+0x1a>
    438c:	22aa      	movs	r2, #170	; 0xaa
    438e:	4629      	mov	r1, r5
    4390:	480f      	ldr	r0, [pc, #60]	; (43d0 <Arduino::GpioDriverComponentBase::gpioWrite_handlerBase(long, Fw::Logic const&)+0x50>)
    4392:	9301      	str	r3, [sp, #4]
    4394:	f7fd f948 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    4398:	9b01      	ldr	r3, [sp, #4]
      {
    439a:	4f0e      	ldr	r7, [pc, #56]	; (43d4 <Arduino::GpioDriverComponentBase::gpioWrite_handlerBase(long, Fw::Logic const&)+0x54>)
    439c:	4620      	mov	r0, r4
    439e:	9301      	str	r3, [sp, #4]
    43a0:	f7fc f8c6 	bl	530 <Fw::Serializable::Serializable()>
    43a4:	6027      	str	r7, [r4, #0]
    retVal = this->gpioWrite_handler(
    43a6:	462a      	mov	r2, r5
    43a8:	6830      	ldr	r0, [r6, #0]
    43aa:	4631      	mov	r1, r6
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	6945      	ldr	r5, [r0, #20]
        this->e = OP_OK;
    43b0:	2000      	movs	r0, #0
    43b2:	7120      	strb	r0, [r4, #4]
    43b4:	a802      	add	r0, sp, #8
    43b6:	47a8      	blx	r5
    );
    43b8:	a902      	add	r1, sp, #8
    43ba:	4620      	mov	r0, r4
    43bc:	f000 fa64 	bl	4888 <Drv::GpioStatus::operator=(Drv::GpioStatus const&)>
  class GpioStatus :
    43c0:	a802      	add	r0, sp, #8
    43c2:	9702      	str	r7, [sp, #8]
    43c4:	f7fc f8ba 	bl	53c <Fw::Serializable::~Serializable()>
  }
    43c8:	4620      	mov	r0, r4
    43ca:	b005      	add	sp, #20
    43cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43ce:	bf00      	nop
    43d0:	20001eb8 	.word	0x20001eb8
    43d4:	20003748 	.word	0x20003748

000043d8 <Arduino::GpioDriverComponentBase::m_p_gpioWrite_in(Fw::PassiveComponentBase*, long, Fw::Logic const&)>:
    m_p_gpioWrite_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        const Fw::Logic& state
    )
  {
    43d8:	b530      	push	{r4, r5, lr}
    43da:	4604      	mov	r4, r0
    43dc:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    43de:	460d      	mov	r5, r1
    43e0:	b131      	cbz	r1, 43f0 <Arduino::GpioDriverComponentBase::m_p_gpioWrite_in(Fw::PassiveComponentBase*, long, Fw::Logic const&)+0x18>
    GpioDriverComponentBase* compPtr = static_cast<GpioDriverComponentBase*>(callComp);
    return compPtr->gpioWrite_handlerBase(
      portNum,
      state
    );
    43e2:	4620      	mov	r0, r4
    43e4:	4629      	mov	r1, r5
    43e6:	f7ff ffcb 	bl	4380 <Arduino::GpioDriverComponentBase::gpioWrite_handlerBase(long, Fw::Logic const&)>
  }
    43ea:	4620      	mov	r0, r4
    43ec:	b003      	add	sp, #12
    43ee:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(callComp);
    43f0:	21d4      	movs	r1, #212	; 0xd4
    43f2:	4807      	ldr	r0, [pc, #28]	; (4410 <Arduino::GpioDriverComponentBase::m_p_gpioWrite_in(Fw::PassiveComponentBase*, long, Fw::Logic const&)+0x38>)
    43f4:	e9cd 2300 	strd	r2, r3, [sp]
    43f8:	f7fd f908 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    );
    43fc:	4620      	mov	r0, r4
    43fe:	4629      	mov	r1, r5
    FW_ASSERT(callComp);
    4400:	e9dd 2300 	ldrd	r2, r3, [sp]
    );
    4404:	f7ff ffbc 	bl	4380 <Arduino::GpioDriverComponentBase::gpioWrite_handlerBase(long, Fw::Logic const&)>
  }
    4408:	4620      	mov	r0, r4
    440a:	b003      	add	sp, #12
    440c:	bd30      	pop	{r4, r5, pc}
    440e:	bf00      	nop
    4410:	20001eb8 	.word	0x20001eb8

00004414 <Arduino::HardwareRateDriver::HardwareRateDriver(char const*)>:

namespace Arduino {

HardwareRateDriver* HardwareRateDriver::s_driver = NULL;

HardwareRateDriver::HardwareRateDriver(const char* compName)
    4414:	b510      	push	{r4, lr}
    4416:	4604      	mov	r4, r0
    : HardwareRateDriverComponentBase(compName), m_interval(std::numeric_limits<U32>::max()) {
    4418:	f000 f93a 	bl	4690 <Arduino::HardwareRateDriverComponentBase::HardwareRateDriverComponentBase(char const*)>
    441c:	4a06      	ldr	r2, [pc, #24]	; (4438 <Arduino::HardwareRateDriver::HardwareRateDriver(char const*)+0x24>)
    441e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4422:	f504 70a0 	add.w	r0, r4, #320	; 0x140
    4426:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    442a:	6022      	str	r2, [r4, #0]
    442c:	f010 ff06 	bl	1523c <Os::RawTime::RawTime()>
    s_driver = this;
    4430:	4b02      	ldr	r3, [pc, #8]	; (443c <Arduino::HardwareRateDriver::HardwareRateDriver(char const*)+0x28>)
}
    4432:	4620      	mov	r0, r4
    s_driver = this;
    4434:	601c      	str	r4, [r3, #0]
}
    4436:	bd10      	pop	{r4, pc}
    4438:	20004028 	.word	0x20004028
    443c:	2000c9d4 	.word	0x2000c9d4

00004440 <Arduino::HardwareRateDriver::configure(unsigned long)>:

HardwareRateDriver::~HardwareRateDriver(void) {}


void HardwareRateDriver::configure(U32 intervalMs) {
    m_interval = intervalMs;
    4440:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
}
    4444:	4770      	bx	lr
    4446:	bf00      	nop

00004448 <Arduino::HardwareRateDriver::~HardwareRateDriver()>:
HardwareRateDriver::~HardwareRateDriver(void) {}
    4448:	b510      	push	{r4, lr}
    444a:	4b06      	ldr	r3, [pc, #24]	; (4464 <Arduino::HardwareRateDriver::~HardwareRateDriver()+0x1c>)
    444c:	4604      	mov	r4, r0
    444e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    4452:	6023      	str	r3, [r4, #0]
    4454:	f010 fc6e 	bl	14d34 <Os::RawTime::~RawTime()>
    4458:	4620      	mov	r0, r4
    445a:	f000 f899 	bl	4590 <Arduino::HardwareRateDriverComponentBase::~HardwareRateDriverComponentBase()>
    445e:	4620      	mov	r0, r4
    4460:	bd10      	pop	{r4, pc}
    4462:	bf00      	nop
    4464:	20004028 	.word	0x20004028

00004468 <Arduino::HardwareRateDriver::~HardwareRateDriver()>:
    4468:	b510      	push	{r4, lr}
    446a:	4b08      	ldr	r3, [pc, #32]	; (448c <Arduino::HardwareRateDriver::~HardwareRateDriver()+0x24>)
    446c:	4604      	mov	r4, r0
    446e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    4472:	6023      	str	r3, [r4, #0]
    4474:	f010 fc5e 	bl	14d34 <Os::RawTime::~RawTime()>
    4478:	4620      	mov	r0, r4
    447a:	f000 f889 	bl	4590 <Arduino::HardwareRateDriverComponentBase::~HardwareRateDriverComponentBase()>
    447e:	4620      	mov	r0, r4
    4480:	f44f 71b4 	mov.w	r1, #360	; 0x168
    4484:	f014 fc24 	bl	18cd0 <operator delete(void*, unsigned int)>
    4488:	4620      	mov	r0, r4
    448a:	bd10      	pop	{r4, pc}
    448c:	20004028 	.word	0x20004028

00004490 <Arduino::HardwareRateDriver::s_timer(void*)>:

void HardwareRateDriver::s_timer(void* comp) {
    4490:	b510      	push	{r4, lr}
    4492:	b08a      	sub	sp, #40	; 0x28
    4494:	4604      	mov	r4, r0
    Os::RawTime now;
    4496:	4668      	mov	r0, sp
    4498:	f010 fed0 	bl	1523c <Os::RawTime::RawTime()>
    now.now();
    449c:	4668      	mov	r0, sp
    449e:	f010 fd17 	bl	14ed0 <Os::RawTime::now()>
    interrupts();  // Enable interrupts so UART RX interrupt handler can receive incoming bytes during remainder of this ISR
    44a2:	b662      	cpsie	i
    HardwareRateDriver* driver = reinterpret_cast<HardwareRateDriver*>(comp);
    // Check if it is time to run the group
    if(driver->isConnected_CycleOut_OutputPort(0))
    44a4:	2100      	movs	r1, #0
    44a6:	4620      	mov	r0, r4
    44a8:	f000 f904 	bl	46b4 <Arduino::HardwareRateDriverComponentBase::isConnected_CycleOut_OutputPort(long)>
    44ac:	b948      	cbnz	r0, 44c2 <Arduino::HardwareRateDriver::s_timer(void*)+0x32>
    {
        driver->CycleOut_out(0, now);
    }
    driver->m_last = now;
    44ae:	4669      	mov	r1, sp
    44b0:	f504 70a0 	add.w	r0, r4, #320	; 0x140
    44b4:	f010 fee2 	bl	1527c <Os::RawTime::operator=(Os::RawTime const&)>
}
    44b8:	4668      	mov	r0, sp
    44ba:	f010 fc3b 	bl	14d34 <Os::RawTime::~RawTime()>
    44be:	b00a      	add	sp, #40	; 0x28
    44c0:	bd10      	pop	{r4, pc}
        driver->CycleOut_out(0, now);
    44c2:	466a      	mov	r2, sp
    44c4:	2100      	movs	r1, #0
    44c6:	4620      	mov	r0, r4
    44c8:	f000 f906 	bl	46d8 <Arduino::HardwareRateDriverComponentBase::CycleOut_out(long, Os::RawTime&)>
    44cc:	e7ef      	b.n	44ae <Arduino::HardwareRateDriver::s_timer(void*)+0x1e>
    44ce:	bf00      	nop

000044d0 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
    44d0:	6803      	ldr	r3, [r0, #0]
    44d2:	4718      	bx	r3

000044d4 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    44d4:	680b      	ldr	r3, [r1, #0]
    44d6:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    44d8:	4770      	bx	lr
    44da:	bf00      	nop

000044dc <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    44dc:	680b      	ldr	r3, [r1, #0]
    44de:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop

000044e4 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop

000044e8 <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    44e8:	b510      	push	{r4, lr}
    44ea:	4604      	mov	r4, r0
		end();
    44ec:	f014 f894 	bl	18618 <IntervalTimer::end()>
	}
    44f0:	4620      	mov	r0, r4
    44f2:	bd10      	pop	{r4, pc}

000044f4 <Arduino::HardwareRateDriver::s_timerISR()>:
void HardwareRateDriver::stop() {
    s_itimer.end();
}

void HardwareRateDriver::s_timerISR() {
    s_timer(s_driver);
    44f4:	4b01      	ldr	r3, [pc, #4]	; (44fc <Arduino::HardwareRateDriver::s_timerISR()+0x8>)
    44f6:	6818      	ldr	r0, [r3, #0]
    44f8:	f7ff bfca 	b.w	4490 <Arduino::HardwareRateDriver::s_timer(void*)>
    44fc:	2000c9d4 	.word	0x2000c9d4

00004500 <Arduino::HardwareRateDriver::start()>:
void HardwareRateDriver::start() {
    4500:	b570      	push	{r4, r5, r6, lr}
    U32 microseconds = m_interval * 1000;
    4502:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4506:	f8d0 513c 	ldr.w	r5, [r0, #316]	; 0x13c

	template <typename period_t>
	uint32_t cyclesFromPeriod(period_t period) {
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
    450a:	4a15      	ldr	r2, [pc, #84]	; (4560 <Arduino::HardwareRateDriver::start()+0x60>)
void HardwareRateDriver::start() {
    450c:	b08c      	sub	sp, #48	; 0x30
    U32 microseconds = m_interval * 1000;
    450e:	fb05 f404 	mul.w	r4, r5, r4
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
    4512:	4b14      	ldr	r3, [pc, #80]	; (4564 <Arduino::HardwareRateDriver::start()+0x64>)

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    4514:	4914      	ldr	r1, [pc, #80]	; (4568 <Arduino::HardwareRateDriver::start()+0x68>)
    4516:	4294      	cmp	r4, r2
        vtable_ptr_ = std::addressof(vt);
    4518:	9300      	str	r3, [sp, #0]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    451a:	9102      	str	r1, [sp, #8]
    451c:	d81d      	bhi.n	455a <Arduino::HardwareRateDriver::start()+0x5a>
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
    451e:	ae02      	add	r6, sp, #8
    4520:	a808      	add	r0, sp, #32
        vtable_ptr_{other.vtable_ptr_}
    4522:	9306      	str	r3, [sp, #24]
        vtable_ptr_->copy_ptr(
    4524:	4631      	mov	r1, r6
    4526:	f7ff ffd5 	bl	44d4 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
    452a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    452e:	a906      	add	r1, sp, #24
    4530:	480e      	ldr	r0, [pc, #56]	; (456c <Arduino::HardwareRateDriver::start()+0x6c>)
			return (24000000 / 1000000) * period - 1;
    4532:	fb03 f205 	mul.w	r2, r3, r5
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    4536:	3a01      	subs	r2, #1
    4538:	f013 ffec 	bl	18514 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    453c:	9b06      	ldr	r3, [sp, #24]
    453e:	a808      	add	r0, sp, #32
    4540:	68db      	ldr	r3, [r3, #12]
    4542:	4798      	blx	r3
    4544:	9b00      	ldr	r3, [sp, #0]
    4546:	68db      	ldr	r3, [r3, #12]
    4548:	4630      	mov	r0, r6
    454a:	4798      	blx	r3
    Fw::Logger::log("Starting base rate group clock with period of %" PRIu32 " microseconds\n", microseconds);
    454c:	4621      	mov	r1, r4
    454e:	4808      	ldr	r0, [pc, #32]	; (4570 <Arduino::HardwareRateDriver::start()+0x70>)
}
    4550:	b00c      	add	sp, #48	; 0x30
    4552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Fw::Logger::log("Starting base rate group clock with period of %" PRIu32 " microseconds\n", microseconds);
    4556:	f7fd b8b7 	b.w	16c8 <Fw::Logger::log(char const*, ...)>
    455a:	4b06      	ldr	r3, [pc, #24]	; (4574 <Arduino::HardwareRateDriver::start()+0x74>)
    455c:	ae02      	add	r6, sp, #8
    455e:	e7f3      	b.n	4548 <Arduino::HardwareRateDriver::start()+0x48>
    4560:	0aaaaaaa 	.word	0x0aaaaaaa
    4564:	20004108 	.word	0x20004108
    4568:	000044f5 	.word	0x000044f5
    456c:	20005a48 	.word	0x20005a48
    4570:	20001e78 	.word	0x20001e78
    4574:	000044e5 	.word	0x000044e5

00004578 <_GLOBAL__sub_I__ZN7Arduino8s_itimerE>:
IntervalTimer s_itimer;
    4578:	4a02      	ldr	r2, [pc, #8]	; (4584 <_GLOBAL__sub_I__ZN7Arduino8s_itimerE+0xc>)
    457a:	4903      	ldr	r1, [pc, #12]	; (4588 <_GLOBAL__sub_I__ZN7Arduino8s_itimerE+0x10>)
    457c:	4803      	ldr	r0, [pc, #12]	; (458c <_GLOBAL__sub_I__ZN7Arduino8s_itimerE+0x14>)
    457e:	f015 beff 	b.w	1a380 <__aeabi_atexit>
    4582:	bf00      	nop
    4584:	20005a58 	.word	0x20005a58
    4588:	000044e9 	.word	0x000044e9
    458c:	20005a48 	.word	0x20005a48

00004590 <Arduino::HardwareRateDriverComponentBase::~HardwareRateDriverComponentBase()>:
      Fw::PassiveComponentBase(compName)
  {

  }

  HardwareRateDriverComponentBase ::
    4590:	b510      	push	{r4, lr}
    ~HardwareRateDriverComponentBase()
    4592:	4b09      	ldr	r3, [pc, #36]	; (45b8 <Arduino::HardwareRateDriverComponentBase::~HardwareRateDriverComponentBase()+0x28>)
  HardwareRateDriverComponentBase ::
    4594:	4604      	mov	r4, r0
    ~HardwareRateDriverComponentBase()
    4596:	f840 3bd0 	str.w	r3, [r0], #208
    459a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    459e:	685b      	ldr	r3, [r3, #4]
    45a0:	4798      	blx	r3
    45a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    45a4:	f104 0064 	add.w	r0, r4, #100	; 0x64
    45a8:	685b      	ldr	r3, [r3, #4]
    45aa:	4798      	blx	r3
    45ac:	4620      	mov	r0, r4
    45ae:	f00d fc31 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  {

  }
    45b2:	4620      	mov	r0, r4
    45b4:	bd10      	pop	{r4, pc}
    45b6:	bf00      	nop
    45b8:	200040ac 	.word	0x200040ac

000045bc <Arduino::HardwareRateDriverComponentBase::~HardwareRateDriverComponentBase()>:
  HardwareRateDriverComponentBase ::
    45bc:	b510      	push	{r4, lr}
    45be:	4604      	mov	r4, r0
  }
    45c0:	f7ff ffe6 	bl	4590 <Arduino::HardwareRateDriverComponentBase::~HardwareRateDriverComponentBase()>
    45c4:	f44f 719e 	mov.w	r1, #316	; 0x13c
    45c8:	4620      	mov	r0, r4
    45ca:	f014 fb81 	bl	18cd0 <operator delete(void*, unsigned int)>
    45ce:	4620      	mov	r0, r4
    45d0:	bd10      	pop	{r4, pc}
    45d2:	bf00      	nop

000045d4 <Arduino::HardwareRateDriverComponentBase::init(long)>:
  {
    45d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45d6:	4604      	mov	r4, r0
    45d8:	b099      	sub	sp, #100	; 0x64
    Fw::PassiveComponentBase::init(instance);
    45da:	f00d fc81 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    45de:	4e1e      	ldr	r6, [pc, #120]	; (4658 <Arduino::HardwareRateDriverComponentBase::init(long)+0x84>)
      this->m_CycleOut_OutputPort[port].init();
    45e0:	f104 0764 	add.w	r7, r4, #100	; 0x64
    const char* toChar() const { return this->m_buf; }
    45e4:	f104 0208 	add.w	r2, r4, #8
    ObjectName() : StringBase() { *this = ""; }
    45e8:	4d1c      	ldr	r5, [pc, #112]	; (465c <Arduino::HardwareRateDriverComponentBase::init(long)+0x88>)
      this->m_error_OutputPort[port].init();
    45ea:	34d0      	adds	r4, #208	; 0xd0
      this->m_CycleOut_OutputPort[port].init();
    45ec:	4638      	mov	r0, r7
    const char* toChar() const { return this->m_buf; }
    45ee:	9201      	str	r2, [sp, #4]
    45f0:	f00a fa12 	bl	ea18 <Svc::OutputCyclePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    45f4:	a802      	add	r0, sp, #8
    45f6:	f7fc fe13 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    45fa:	4631      	mov	r1, r6
    45fc:	a802      	add	r0, sp, #8
    ObjectName() : StringBase() { *this = ""; }
    45fe:	9502      	str	r5, [sp, #8]
        (void)StringBase::operator=(src);
    4600:	f7fc fe76 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4604:	9a01      	ldr	r2, [sp, #4]
    4606:	2300      	movs	r3, #0
    4608:	4915      	ldr	r1, [pc, #84]	; (4660 <Arduino::HardwareRateDriverComponentBase::init(long)+0x8c>)
    460a:	a802      	add	r0, sp, #8
    460c:	f7fc fe3e 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CycleOut_OutputPort[port].setObjName(portName.toChar());
    4610:	a903      	add	r1, sp, #12
    4612:	4638      	mov	r0, r7
    4614:	f013 fcc4 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4618:	a802      	add	r0, sp, #8
    461a:	9502      	str	r5, [sp, #8]
    461c:	f7fc fe0a 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_error_OutputPort[port].init();
    4620:	4620      	mov	r0, r4
    4622:	f000 f9f9 	bl	4a18 <Drv::OutputGpioWritePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    4626:	a802      	add	r0, sp, #8
    4628:	f7fc fdfa 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    462c:	4631      	mov	r1, r6
    462e:	a802      	add	r0, sp, #8
    ObjectName() : StringBase() { *this = ""; }
    4630:	9502      	str	r5, [sp, #8]
        (void)StringBase::operator=(src);
    4632:	f7fc fe5d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4636:	9a01      	ldr	r2, [sp, #4]
    4638:	2300      	movs	r3, #0
    463a:	490a      	ldr	r1, [pc, #40]	; (4664 <Arduino::HardwareRateDriverComponentBase::init(long)+0x90>)
    463c:	a802      	add	r0, sp, #8
    463e:	f7fc fe25 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_error_OutputPort[port].setObjName(portName.toChar());
    4642:	a903      	add	r1, sp, #12
    4644:	4620      	mov	r0, r4
    4646:	f013 fcab 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    464a:	a802      	add	r0, sp, #8
    464c:	9502      	str	r5, [sp, #8]
    464e:	f7fc fdf1 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    4652:	b019      	add	sp, #100	; 0x64
    4654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4656:	bf00      	nop
    4658:	20001d2c 	.word	0x20001d2c
    465c:	20002b80 	.word	0x20002b80
    4660:	20002130 	.word	0x20002130
    4664:	2000214c 	.word	0x2000214c

00004668 <Arduino::HardwareRateDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)>:
  {
    4668:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    466a:	1e0d      	subs	r5, r1, #0
  {
    466c:	4604      	mov	r4, r0
    466e:	4616      	mov	r6, r2
    FW_ASSERT(
    4670:	dd03      	ble.n	467a <Arduino::HardwareRateDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)+0x12>
    4672:	224b      	movs	r2, #75	; 0x4b
    4674:	4805      	ldr	r0, [pc, #20]	; (468c <Arduino::HardwareRateDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)+0x24>)
    4676:	f7fc ffd7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CycleOut_OutputPort[portNum].addCallPort(port);
    467a:	236c      	movs	r3, #108	; 0x6c
    467c:	4631      	mov	r1, r6
    467e:	fb03 4005 	mla	r0, r3, r5, r4
  }
    4682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CycleOut_OutputPort[portNum].addCallPort(port);
    4686:	3064      	adds	r0, #100	; 0x64
    4688:	f00a b94a 	b.w	e920 <Svc::OutputCyclePort::addCallPort(Svc::InputCyclePort*)>
    468c:	200020cc 	.word	0x200020cc

00004690 <Arduino::HardwareRateDriverComponentBase::HardwareRateDriverComponentBase(char const*)>:
  HardwareRateDriverComponentBase ::
    4690:	b510      	push	{r4, lr}
    4692:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    4694:	f00d fc16 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    4698:	4b05      	ldr	r3, [pc, #20]	; (46b0 <Arduino::HardwareRateDriverComponentBase::HardwareRateDriverComponentBase(char const*)+0x20>)
    469a:	4620      	mov	r0, r4
    469c:	f840 3b64 	str.w	r3, [r0], #100
    46a0:	f00a f932 	bl	e908 <Svc::OutputCyclePort::OutputCyclePort()>
    46a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    46a8:	f000 f978 	bl	499c <Drv::OutputGpioWritePort::OutputGpioWritePort()>
  }
    46ac:	4620      	mov	r0, r4
    46ae:	bd10      	pop	{r4, pc}
    46b0:	200040ac 	.word	0x200040ac

000046b4 <Arduino::HardwareRateDriverComponentBase::isConnected_CycleOut_OutputPort(long)>:
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool HardwareRateDriverComponentBase ::
    isConnected_CycleOut_OutputPort(FwIndexType portNum)
  {
    46b4:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    46b6:	1e0d      	subs	r5, r1, #0
  {
    46b8:	4604      	mov	r4, r0
    FW_ASSERT(
    46ba:	dd03      	ble.n	46c4 <Arduino::HardwareRateDriverComponentBase::isConnected_CycleOut_OutputPort(long)+0x10>
    46bc:	229f      	movs	r2, #159	; 0x9f
    46be:	4805      	ldr	r0, [pc, #20]	; (46d4 <Arduino::HardwareRateDriverComponentBase::isConnected_CycleOut_OutputPort(long)+0x20>)
    46c0:	f7fc ffb2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CycleOut_OutputPort[portNum].isConnected();
    46c4:	236c      	movs	r3, #108	; 0x6c
    46c6:	fb03 4005 	mla	r0, r3, r5, r4
  }
    46ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_CycleOut_OutputPort[portNum].isConnected();
    46ce:	3064      	adds	r0, #100	; 0x64
    46d0:	f013 bbbc 	b.w	17e4c <Fw::PortBase::isConnected() const>
    46d4:	200020cc 	.word	0x200020cc

000046d8 <Arduino::HardwareRateDriverComponentBase::CycleOut_out(long, Os::RawTime&)>:
  void HardwareRateDriverComponentBase ::
    CycleOut_out(
        FwIndexType portNum,
        Os::RawTime& cycleStart
    )
  {
    46d8:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    46da:	1e0d      	subs	r5, r1, #0
  {
    46dc:	4604      	mov	r4, r0
    46de:	4616      	mov	r6, r2
    FW_ASSERT(
    46e0:	dd03      	ble.n	46ea <Arduino::HardwareRateDriverComponentBase::CycleOut_out(long, Os::RawTime&)+0x12>
    46e2:	22bc      	movs	r2, #188	; 0xbc
    46e4:	4805      	ldr	r0, [pc, #20]	; (46fc <Arduino::HardwareRateDriverComponentBase::CycleOut_out(long, Os::RawTime&)+0x24>)
    46e6:	f7fc ff9f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      portNum < this->getNum_CycleOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_CycleOut_OutputPort[portNum].invoke(
    46ea:	236c      	movs	r3, #108	; 0x6c
    46ec:	4631      	mov	r1, r6
    46ee:	fb03 4005 	mla	r0, r3, r5, r4
      cycleStart
    );
  }
    46f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CycleOut_OutputPort[portNum].invoke(
    46f6:	3064      	adds	r0, #100	; 0x64
    46f8:	f00a b922 	b.w	e940 <Svc::OutputCyclePort::invoke(Os::RawTime&) const>
    46fc:	200020cc 	.word	0x200020cc

00004700 <Drv::InputGpioReadPort::invokeSerial(Fw::SerializeBufferBase&)>:
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    // For ports with a return type, invokeSerial is not used
    (void) _buffer;

    FW_ASSERT(0);
    4700:	2142      	movs	r1, #66	; 0x42
    4702:	4803      	ldr	r0, [pc, #12]	; (4710 <Drv::InputGpioReadPort::invokeSerial(Fw::SerializeBufferBase&)+0x10>)
  {
    4704:	b508      	push	{r3, lr}
    FW_ASSERT(0);
    4706:	f7fc ff81 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return Fw::FW_SERIALIZE_OK;
  }
    470a:	2000      	movs	r0, #0
    470c:	bd08      	pop	{r3, pc}
    470e:	bf00      	nop
    4710:	20000e80 	.word	0x20000e80

00004714 <Drv::InputGpioReadPort::~InputGpioReadPort()>:
#include "Fw/Types/StringType.hpp"

namespace Drv {

  //! Input GpioRead port
  class InputGpioReadPort :
    4714:	4b03      	ldr	r3, [pc, #12]	; (4724 <Drv::InputGpioReadPort::~InputGpioReadPort()+0x10>)
    4716:	b510      	push	{r4, lr}
    4718:	4604      	mov	r4, r0
    471a:	6003      	str	r3, [r0, #0]
    471c:	f013 fad0 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    4720:	4620      	mov	r0, r4
    4722:	bd10      	pop	{r4, pc}
    4724:	200037f0 	.word	0x200037f0

00004728 <Drv::InputGpioReadPort::~InputGpioReadPort()>:
    4728:	4b05      	ldr	r3, [pc, #20]	; (4740 <Drv::InputGpioReadPort::~InputGpioReadPort()+0x18>)
    472a:	b510      	push	{r4, lr}
    472c:	4604      	mov	r4, r0
    472e:	6003      	str	r3, [r0, #0]
    4730:	f013 fac6 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    4734:	2170      	movs	r1, #112	; 0x70
    4736:	4620      	mov	r0, r4
    4738:	f014 faca 	bl	18cd0 <operator delete(void*, unsigned int)>
    473c:	4620      	mov	r0, r4
    473e:	bd10      	pop	{r4, pc}
    4740:	200037f0 	.word	0x200037f0

00004744 <Drv::InputGpioReadPort::InputGpioReadPort()>:
  InputGpioReadPort ::
    4744:	b510      	push	{r4, lr}
    4746:	4604      	mov	r4, r0
      m_func(nullptr)
    4748:	f013 faaa 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    474c:	4a02      	ldr	r2, [pc, #8]	; (4758 <Drv::InputGpioReadPort::InputGpioReadPort()+0x14>)
    474e:	2300      	movs	r3, #0
  }
    4750:	4620      	mov	r0, r4
      m_func(nullptr)
    4752:	6022      	str	r2, [r4, #0]
    4754:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    4756:	bd10      	pop	{r4, pc}
    4758:	200037f0 	.word	0x200037f0

0000475c <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))>:
  {
    475c:	b570      	push	{r4, r5, r6, lr}
    475e:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    4760:	460d      	mov	r5, r1
  {
    4762:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    4764:	b121      	cbz	r1, 4770 <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    4766:	b14e      	cbz	r6, 477c <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))+0x20>
    this->m_comp = callComp;
    4768:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    476a:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    476c:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    476e:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    4770:	2125      	movs	r1, #37	; 0x25
    4772:	4806      	ldr	r0, [pc, #24]	; (478c <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))+0x30>)
    4774:	f7fc ff4a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    4778:	2e00      	cmp	r6, #0
    477a:	d1f5      	bne.n	4768 <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))+0xc>
    477c:	2126      	movs	r1, #38	; 0x26
    477e:	4803      	ldr	r0, [pc, #12]	; (478c <Drv::InputGpioReadPort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic&))+0x30>)
    4780:	f7fc ff44 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    4784:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    4786:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    4788:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    478a:	bd70      	pop	{r4, r5, r6, pc}
    478c:	20000e80 	.word	0x20000e80

00004790 <Drv::InputGpioReadPort::init()>:
    Fw::InputPortBase::init();
    4790:	f013 baae 	b.w	17cf0 <Fw::InputPortBase::init()>

00004794 <Drv::GpioStatus::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= OP_OK) && (e <= UNKNOWN_ERROR));
  }

  Fw::SerializeStatus GpioStatus ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    4794:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
    4796:	7901      	ldrb	r1, [r0, #4]
    4798:	4618      	mov	r0, r3
    479a:	f7fb bfc5 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
    479e:	bf00      	nop

000047a0 <Drv::GpioStatus::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus GpioStatus ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    47a0:	b510      	push	{r4, lr}
    47a2:	460a      	mov	r2, r1
    47a4:	b082      	sub	sp, #8
    47a6:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    47a8:	a901      	add	r1, sp, #4
    47aa:	4610      	mov	r0, r2
    47ac:	f7fc fa96 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    47b0:	b938      	cbnz	r0, 47c2 <Drv::GpioStatus::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
    47b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
    47b6:	2a03      	cmp	r2, #3
      this->e = static_cast<T>(es);
    47b8:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
    47ba:	bf94      	ite	ls
    47bc:	2300      	movls	r3, #0
    47be:	2301      	movhi	r3, #1
    47c0:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
    47c2:	b002      	add	sp, #8
    47c4:	bd10      	pop	{r4, pc}
    47c6:	bf00      	nop

000047c8 <Drv::GpioStatus::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void GpioStatus ::
    toString(Fw::StringBase& sb) const
  {
    47c8:	b570      	push	{r4, r5, r6, lr}
    47ca:	b0a2      	sub	sp, #136	; 0x88
    47cc:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
    47ce:	4e1a      	ldr	r6, [pc, #104]	; (4838 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x70>)
    47d0:	460d      	mov	r5, r1
    47d2:	4668      	mov	r0, sp
    47d4:	f7fc fd24 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    47d8:	4918      	ldr	r1, [pc, #96]	; (483c <Drv::GpioStatus::toString(Fw::StringBase&) const+0x74>)
    47da:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
    47dc:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    47de:	f7fc fd87 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
    47e2:	7923      	ldrb	r3, [r4, #4]
    47e4:	2b03      	cmp	r3, #3
    47e6:	d822      	bhi.n	482e <Drv::GpioStatus::toString(Fw::StringBase&) const+0x66>
    47e8:	e8df f003 	tbb	[pc, r3]
    47ec:	0212171c 	.word	0x0212171c
    47f0:	4913      	ldr	r1, [pc, #76]	; (4840 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x78>)
    47f2:	4668      	mov	r0, sp
    47f4:	f7fc fd7c 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
    47f8:	7923      	ldrb	r3, [r4, #4]
    47fa:	aa01      	add	r2, sp, #4
    47fc:	4911      	ldr	r1, [pc, #68]	; (4844 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x7c>)
    47fe:	4628      	mov	r0, r5
    4800:	f7fc fd44 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
    4804:	4668      	mov	r0, sp
    4806:	9600      	str	r6, [sp, #0]
    4808:	f7fc fd14 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    480c:	b022      	add	sp, #136	; 0x88
    480e:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
    4810:	490d      	ldr	r1, [pc, #52]	; (4848 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x80>)
    4812:	4668      	mov	r0, sp
    4814:	f7fc fd6c 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    4818:	e7ee      	b.n	47f8 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x30>
        (void)StringBase::operator=(src);
    481a:	490c      	ldr	r1, [pc, #48]	; (484c <Drv::GpioStatus::toString(Fw::StringBase&) const+0x84>)
    481c:	4668      	mov	r0, sp
    481e:	f7fc fd67 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    4822:	e7e9      	b.n	47f8 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x30>
        (void)StringBase::operator=(src);
    4824:	490a      	ldr	r1, [pc, #40]	; (4850 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x88>)
    4826:	4668      	mov	r0, sp
    4828:	f7fc fd62 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    482c:	e7e4      	b.n	47f8 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x30>
        (void)StringBase::operator=(src);
    482e:	4909      	ldr	r1, [pc, #36]	; (4854 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x8c>)
    4830:	4668      	mov	r0, sp
    4832:	f7fc fd5d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    4836:	e7df      	b.n	47f8 <Drv::GpioStatus::toString(Fw::StringBase&) const+0x30>
    4838:	200032dc 	.word	0x200032dc
    483c:	20001d2c 	.word	0x20001d2c
    4840:	20002454 	.word	0x20002454
    4844:	20002470 	.word	0x20002470
    4848:	20002444 	.word	0x20002444
    484c:	20002438 	.word	0x20002438
    4850:	20002430 	.word	0x20002430
    4854:	20002464 	.word	0x20002464

00004858 <Drv::GpioStatus::~GpioStatus()>:
    4858:	4b03      	ldr	r3, [pc, #12]	; (4868 <Drv::GpioStatus::~GpioStatus()+0x10>)
    485a:	b510      	push	{r4, lr}
    485c:	4604      	mov	r4, r0
    485e:	6003      	str	r3, [r0, #0]
    4860:	f7fb fe6c 	bl	53c <Fw::Serializable::~Serializable()>
    4864:	4620      	mov	r0, r4
    4866:	bd10      	pop	{r4, pc}
    4868:	20003748 	.word	0x20003748

0000486c <Drv::GpioStatus::~GpioStatus()>:
    486c:	4b05      	ldr	r3, [pc, #20]	; (4884 <Drv::GpioStatus::~GpioStatus()+0x18>)
    486e:	b510      	push	{r4, lr}
    4870:	4604      	mov	r4, r0
    4872:	6003      	str	r3, [r0, #0]
    4874:	f7fb fe62 	bl	53c <Fw::Serializable::~Serializable()>
    4878:	2108      	movs	r1, #8
    487a:	4620      	mov	r0, r4
    487c:	f014 fa28 	bl	18cd0 <operator delete(void*, unsigned int)>
    4880:	4620      	mov	r0, r4
    4882:	bd10      	pop	{r4, pc}
    4884:	20003748 	.word	0x20003748

00004888 <Drv::GpioStatus::operator=(Drv::GpioStatus const&)>:
    this->e = obj.e;
    4888:	790b      	ldrb	r3, [r1, #4]
    488a:	7103      	strb	r3, [r0, #4]
  }
    488c:	4770      	bx	lr
    488e:	bf00      	nop

00004890 <Drv::InputGpioWritePort::invokeSerial(Fw::SerializeBufferBase&)>:
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    // For ports with a return type, invokeSerial is not used
    (void) _buffer;

    FW_ASSERT(0);
    4890:	2142      	movs	r1, #66	; 0x42
    4892:	4803      	ldr	r0, [pc, #12]	; (48a0 <Drv::InputGpioWritePort::invokeSerial(Fw::SerializeBufferBase&)+0x10>)
  {
    4894:	b508      	push	{r3, lr}
    FW_ASSERT(0);
    4896:	f7fc feb9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return Fw::FW_SERIALIZE_OK;
  }
    489a:	2000      	movs	r0, #0
    489c:	bd08      	pop	{r3, pc}
    489e:	bf00      	nop
    48a0:	20000ec8 	.word	0x20000ec8

000048a4 <Drv::OutputGpioWritePort::~OutputGpioWritePort()>:
      CompFuncPtr m_func;

  };

  //! Output GpioWrite port
  class OutputGpioWritePort :
    48a4:	4b03      	ldr	r3, [pc, #12]	; (48b4 <Drv::OutputGpioWritePort::~OutputGpioWritePort()+0x10>)
    48a6:	b510      	push	{r4, lr}
    48a8:	4604      	mov	r4, r0
    48aa:	6003      	str	r3, [r0, #0]
    48ac:	f013 fa26 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    48b0:	4620      	mov	r0, r4
    48b2:	bd10      	pop	{r4, pc}
    48b4:	20003830 	.word	0x20003830

000048b8 <Drv::OutputGpioWritePort::~OutputGpioWritePort()>:
    48b8:	4b05      	ldr	r3, [pc, #20]	; (48d0 <Drv::OutputGpioWritePort::~OutputGpioWritePort()+0x18>)
    48ba:	b510      	push	{r4, lr}
    48bc:	4604      	mov	r4, r0
    48be:	6003      	str	r3, [r0, #0]
    48c0:	f013 fa1c 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    48c4:	216c      	movs	r1, #108	; 0x6c
    48c6:	4620      	mov	r0, r4
    48c8:	f014 fa02 	bl	18cd0 <operator delete(void*, unsigned int)>
    48cc:	4620      	mov	r0, r4
    48ce:	bd10      	pop	{r4, pc}
    48d0:	20003830 	.word	0x20003830

000048d4 <Drv::InputGpioWritePort::~InputGpioWritePort()>:
  class InputGpioWritePort :
    48d4:	4b03      	ldr	r3, [pc, #12]	; (48e4 <Drv::InputGpioWritePort::~InputGpioWritePort()+0x10>)
    48d6:	b510      	push	{r4, lr}
    48d8:	4604      	mov	r4, r0
    48da:	6003      	str	r3, [r0, #0]
    48dc:	f013 f9f0 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    48e0:	4620      	mov	r0, r4
    48e2:	bd10      	pop	{r4, pc}
    48e4:	20003810 	.word	0x20003810

000048e8 <Drv::InputGpioWritePort::~InputGpioWritePort()>:
    48e8:	4b05      	ldr	r3, [pc, #20]	; (4900 <Drv::InputGpioWritePort::~InputGpioWritePort()+0x18>)
    48ea:	b510      	push	{r4, lr}
    48ec:	4604      	mov	r4, r0
    48ee:	6003      	str	r3, [r0, #0]
    48f0:	f013 f9e6 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    48f4:	2170      	movs	r1, #112	; 0x70
    48f6:	4620      	mov	r0, r4
    48f8:	f014 f9ea 	bl	18cd0 <operator delete(void*, unsigned int)>
    48fc:	4620      	mov	r0, r4
    48fe:	bd10      	pop	{r4, pc}
    4900:	20003810 	.word	0x20003810

00004904 <Drv::InputGpioWritePort::InputGpioWritePort()>:
  InputGpioWritePort ::
    4904:	b510      	push	{r4, lr}
    4906:	4604      	mov	r4, r0
      m_func(nullptr)
    4908:	f013 f9ca 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    490c:	4a02      	ldr	r2, [pc, #8]	; (4918 <Drv::InputGpioWritePort::InputGpioWritePort()+0x14>)
    490e:	2300      	movs	r3, #0
  }
    4910:	4620      	mov	r0, r4
      m_func(nullptr)
    4912:	6022      	str	r2, [r4, #0]
    4914:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    4916:	bd10      	pop	{r4, pc}
    4918:	20003810 	.word	0x20003810

0000491c <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))>:
  {
    491c:	b570      	push	{r4, r5, r6, lr}
    491e:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    4920:	460d      	mov	r5, r1
  {
    4922:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    4924:	b121      	cbz	r1, 4930 <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    4926:	b14e      	cbz	r6, 493c <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))+0x20>
    this->m_comp = callComp;
    4928:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    492a:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    492c:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    492e:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    4930:	2125      	movs	r1, #37	; 0x25
    4932:	4806      	ldr	r0, [pc, #24]	; (494c <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))+0x30>)
    4934:	f7fc fe6a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    4938:	2e00      	cmp	r6, #0
    493a:	d1f5      	bne.n	4928 <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))+0xc>
    493c:	2126      	movs	r1, #38	; 0x26
    493e:	4803      	ldr	r0, [pc, #12]	; (494c <Drv::InputGpioWritePort::addCallComp(Fw::PassiveComponentBase*, Drv::GpioStatus (*)(Fw::PassiveComponentBase*, long, Fw::Logic const&))+0x30>)
    4940:	f7fc fe64 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    4944:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    4946:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    4948:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    494a:	bd70      	pop	{r4, r5, r6, pc}
    494c:	20000ec8 	.word	0x20000ec8

00004950 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)>:
  {
    4950:	b570      	push	{r4, r5, r6, lr}
    4952:	460c      	mov	r4, r1
    4954:	b082      	sub	sp, #8
    4956:	4605      	mov	r5, r0
    this->trace();
    4958:	4608      	mov	r0, r1
  {
    495a:	9201      	str	r2, [sp, #4]
    this->trace();
    495c:	f013 fa7c 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    4960:	6e62      	ldr	r2, [r4, #100]	; 0x64
    4962:	9b01      	ldr	r3, [sp, #4]
    4964:	b142      	cbz	r2, 4978 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
    4966:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    4968:	b176      	cbz	r6, 4988 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)+0x38>
    return this->m_func(this->m_comp, this->m_portNum, state);
    496a:	4628      	mov	r0, r5
    496c:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    4970:	47b0      	blx	r6
  }
    4972:	4628      	mov	r0, r5
    4974:	b002      	add	sp, #8
    4976:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
    4978:	2134      	movs	r1, #52	; 0x34
    497a:	4807      	ldr	r0, [pc, #28]	; (4998 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)+0x48>)
    497c:	f7fc fe46 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    4980:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    4982:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    4984:	2e00      	cmp	r6, #0
    4986:	d1f0      	bne.n	496a <Drv::InputGpioWritePort::invoke(Fw::Logic const&)+0x1a>
    4988:	2135      	movs	r1, #53	; 0x35
    498a:	4803      	ldr	r0, [pc, #12]	; (4998 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)+0x48>)
    498c:	9301      	str	r3, [sp, #4]
    498e:	f7fc fe3d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, state);
    4992:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    4994:	9b01      	ldr	r3, [sp, #4]
    4996:	e7e8      	b.n	496a <Drv::InputGpioWritePort::invoke(Fw::Logic const&)+0x1a>
    4998:	20000ec8 	.word	0x20000ec8

0000499c <Drv::OutputGpioWritePort::OutputGpioWritePort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputGpioWritePort ::
    499c:	b510      	push	{r4, lr}
    499e:	4604      	mov	r4, r0
    OutputGpioWritePort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    49a0:	f013 f9c4 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    49a4:	4a02      	ldr	r2, [pc, #8]	; (49b0 <Drv::OutputGpioWritePort::OutputGpioWritePort()+0x14>)
    49a6:	2300      	movs	r3, #0
  {

  }
    49a8:	4620      	mov	r0, r4
      m_port(nullptr)
    49aa:	6022      	str	r2, [r4, #0]
    49ac:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    49ae:	bd10      	pop	{r4, pc}
    49b0:	20003830 	.word	0x20003830

000049b4 <Drv::OutputGpioWritePort::addCallPort(Drv::InputGpioWritePort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputGpioWritePort ::
    addCallPort(InputGpioWritePort* callPort)
  {
    49b4:	b538      	push	{r3, r4, r5, lr}
    49b6:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
    49b8:	460d      	mov	r5, r1
    49ba:	b121      	cbz	r1, 49c6 <Drv::OutputGpioWritePort::addCallPort(Drv::InputGpioWritePort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
    49bc:	2300      	movs	r3, #0
    this->m_port = callPort;
    49be:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
    49c0:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
    49c2:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
    49c4:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
    49c6:	215d      	movs	r1, #93	; 0x5d
    49c8:	4801      	ldr	r0, [pc, #4]	; (49d0 <Drv::OutputGpioWritePort::addCallPort(Drv::InputGpioWritePort*)+0x1c>)
    49ca:	f7fc fe1f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    49ce:	e7f5      	b.n	49bc <Drv::OutputGpioWritePort::addCallPort(Drv::InputGpioWritePort*)+0x8>
    49d0:	20000ec8 	.word	0x20000ec8

000049d4 <Drv::OutputGpioWritePort::invoke(Fw::Logic const&) const>:

  Drv::GpioStatus OutputGpioWritePort ::
    invoke(const Fw::Logic& state) const
  {
    49d4:	b530      	push	{r4, r5, lr}
    49d6:	460c      	mov	r4, r1
    49d8:	b083      	sub	sp, #12
    49da:	4605      	mov	r5, r0
#if FW_PORT_TRACING == 1
    this->trace();
    49dc:	4608      	mov	r0, r1
  {
    49de:	9201      	str	r2, [sp, #4]
    this->trace();
    49e0:	f013 fa3a 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_port != nullptr);
    49e4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    49e6:	9a01      	ldr	r2, [sp, #4]
    49e8:	b129      	cbz	r1, 49f6 <Drv::OutputGpioWritePort::invoke(Fw::Logic const&) const+0x22>
    return this->m_port->invoke(state);
    49ea:	4628      	mov	r0, r5
    49ec:	f7ff ffb0 	bl	4950 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)>
  }
    49f0:	4628      	mov	r0, r5
    49f2:	b003      	add	sp, #12
    49f4:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_port != nullptr);
    49f6:	216e      	movs	r1, #110	; 0x6e
    49f8:	4805      	ldr	r0, [pc, #20]	; (4a10 <Drv::OutputGpioWritePort::invoke(Fw::Logic const&) const+0x3c>)
    49fa:	f7fc fe07 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_port->invoke(state);
    49fe:	4628      	mov	r0, r5
    4a00:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    4a02:	9a01      	ldr	r2, [sp, #4]
    4a04:	f7ff ffa4 	bl	4950 <Drv::InputGpioWritePort::invoke(Fw::Logic const&)>
  }
    4a08:	4628      	mov	r0, r5
    4a0a:	b003      	add	sp, #12
    4a0c:	bd30      	pop	{r4, r5, pc}
    4a0e:	bf00      	nop
    4a10:	20000ec8 	.word	0x20000ec8

00004a14 <Drv::InputGpioWritePort::init()>:
    Fw::InputPortBase::init();
    4a14:	f013 b96c 	b.w	17cf0 <Fw::InputPortBase::init()>

00004a18 <Drv::OutputGpioWritePort::init()>:
    Fw::OutputPortBase::init();
    4a18:	f013 b994 	b.w	17d44 <Fw::OutputPortBase::init()>

00004a1c <Arduino::ArduinoTime::~ArduinoTime()>:

constexpr FwSizeType TIME_ROLLOVER_RETRIES = 3;
constexpr  U32 MICROSECONDS_PER_SECOND = 1000000;

ArduinoTime::ArduinoTime(const char* name) : ArduinoTimeComponentBase(name) {}
ArduinoTime::~ArduinoTime() {}
    4a1c:	4b03      	ldr	r3, [pc, #12]	; (4a2c <Arduino::ArduinoTime::~ArduinoTime()+0x10>)
    4a1e:	b510      	push	{r4, lr}
    4a20:	4604      	mov	r4, r0
    4a22:	6003      	str	r3, [r0, #0]
    4a24:	f000 fb2a 	bl	507c <Arduino::ArduinoTimeComponentBase::~ArduinoTimeComponentBase()>
    4a28:	4620      	mov	r0, r4
    4a2a:	bd10      	pop	{r4, pc}
    4a2c:	20003fbc 	.word	0x20003fbc

00004a30 <Arduino::ArduinoTime::~ArduinoTime()>:
    4a30:	4b06      	ldr	r3, [pc, #24]	; (4a4c <Arduino::ArduinoTime::~ArduinoTime()+0x1c>)
    4a32:	b510      	push	{r4, lr}
    4a34:	4604      	mov	r4, r0
    4a36:	6003      	str	r3, [r0, #0]
    4a38:	f000 fb20 	bl	507c <Arduino::ArduinoTimeComponentBase::~ArduinoTimeComponentBase()>
    4a3c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    4a40:	4620      	mov	r0, r4
    4a42:	f014 f945 	bl	18cd0 <operator delete(void*, unsigned int)>
    4a46:	4620      	mov	r0, r4
    4a48:	bd10      	pop	{r4, pc}
    4a4a:	bf00      	nop
    4a4c:	20003fbc 	.word	0x20003fbc

00004a50 <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)>:

void ArduinoTime::getTime_handler(NATIVE_INT_TYPE portNum, /*!< The port number*/
                                      Fw::Time& time           /*!< The time to set */
) {
    4a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a54:	f04f 0803 	mov.w	r8, #3
    4a58:	b081      	sub	sp, #4
    time_t time_seconds = 0;
    U32 time_microseconds = 0;
    for (FwSizeType i = 0; i < TIME_ROLLOVER_RETRIES; i++) {
        U32 time_microseconds_rollover = ::micros() % MICROSECONDS_PER_SECOND;
        time_seconds = ::now();
        time_microseconds = ::micros() % MICROSECONDS_PER_SECOND;
    4a5a:	f8df b074 	ldr.w	fp, [pc, #116]	; 4ad0 <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x80>
) {
    4a5e:	4691      	mov	r9, r2
        time_microseconds = ::micros() % MICROSECONDS_PER_SECOND;
    4a60:	f8df a070 	ldr.w	sl, [pc, #112]	; 4ad4 <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x84>
        U32 time_microseconds_rollover = ::micros() % MICROSECONDS_PER_SECOND;
    4a64:	f013 fff2 	bl	18a4c <micros>
    4a68:	4604      	mov	r4, r0
        time_seconds = ::now();
    4a6a:	f7fb fc6b 	bl	344 <now()>
    4a6e:	4606      	mov	r6, r0
    4a70:	460f      	mov	r7, r1
        time_microseconds = ::micros() % MICROSECONDS_PER_SECOND;
    4a72:	f013 ffeb 	bl	18a4c <micros>
        U32 time_microseconds_rollover = ::micros() % MICROSECONDS_PER_SECOND;
    4a76:	fbab 2304 	umull	r2, r3, fp, r4
        time_microseconds = ::micros() % MICROSECONDS_PER_SECOND;
    4a7a:	fbab 2500 	umull	r2, r5, fp, r0
        U32 time_microseconds_rollover = ::micros() % MICROSECONDS_PER_SECOND;
    4a7e:	0c9b      	lsrs	r3, r3, #18
        time_microseconds = ::micros() % MICROSECONDS_PER_SECOND;
    4a80:	0cad      	lsrs	r5, r5, #18
        U32 time_microseconds_rollover = ::micros() % MICROSECONDS_PER_SECOND;
    4a82:	fb0a 4413 	mls	r4, sl, r3, r4
        time_microseconds = ::micros() % MICROSECONDS_PER_SECOND;
    4a86:	fb0a 0515 	mls	r5, sl, r5, r0
        // No rollover exit the loop without further retries
        if (time_microseconds > time_microseconds_rollover) {
    4a8a:	42ac      	cmp	r4, r5
    4a8c:	d302      	bcc.n	4a94 <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x44>
    for (FwSizeType i = 0; i < TIME_ROLLOVER_RETRIES; i++) {
    4a8e:	f1b8 0801 	subs.w	r8, r8, #1
    4a92:	d1e7      	bne.n	4a64 <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x14>
            break;
        }
    }
    TimeBase base = (::timeStatus() == timeStatus_t::timeNeedsSync) ? TimeBase::TB_PROC_TIME : TimeBase::TB_WORKSTATION_TIME;
    4a94:	f7fb fcd2 	bl	43c <timeStatus()>
    // Look for seconds overflow
    FW_ASSERT(time_seconds < std::numeric_limits<U32>::max());
    4a98:	f06f 0201 	mvn.w	r2, #1
    TimeBase base = (::timeStatus() == timeStatus_t::timeNeedsSync) ? TimeBase::TB_PROC_TIME : TimeBase::TB_WORKSTATION_TIME;
    4a9c:	2801      	cmp	r0, #1
    FW_ASSERT(time_seconds < std::numeric_limits<U32>::max());
    4a9e:	f04f 0300 	mov.w	r3, #0
    TimeBase base = (::timeStatus() == timeStatus_t::timeNeedsSync) ? TimeBase::TB_PROC_TIME : TimeBase::TB_WORKSTATION_TIME;
    4aa2:	bf0c      	ite	eq
    4aa4:	2401      	moveq	r4, #1
    4aa6:	2402      	movne	r4, #2
    FW_ASSERT(time_seconds < std::numeric_limits<U32>::max());
    4aa8:	42b2      	cmp	r2, r6
    4aaa:	41bb      	sbcs	r3, r7
    4aac:	db08      	blt.n	4ac0 <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x70>
    time.set(base, static_cast<U32>(time_seconds), time_microseconds);
    4aae:	462b      	mov	r3, r5
    4ab0:	4632      	mov	r2, r6
    4ab2:	4621      	mov	r1, r4
    4ab4:	4648      	mov	r0, r9
}
    4ab6:	b001      	add	sp, #4
    4ab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    time.set(base, static_cast<U32>(time_seconds), time_microseconds);
    4abc:	f012 bf2e 	b.w	1791c <Fw::Time::set(TimeBase, unsigned long, unsigned long)>
    FW_ASSERT(time_seconds < std::numeric_limits<U32>::max());
    4ac0:	2127      	movs	r1, #39	; 0x27
    4ac2:	4802      	ldr	r0, [pc, #8]	; (4acc <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x7c>)
    4ac4:	f7fc fda2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    4ac8:	e7f1      	b.n	4aae <Arduino::ArduinoTime::getTime_handler(long, Fw::Time&)+0x5e>
    4aca:	bf00      	nop
    4acc:	20001dd8 	.word	0x20001dd8
    4ad0:	431bde83 	.word	0x431bde83
    4ad4:	000f4240 	.word	0x000f4240

00004ad8 <Arduino::ArduinoTime::ArduinoTime(char const*)>:
ArduinoTime::ArduinoTime(const char* name) : ArduinoTimeComponentBase(name) {}
    4ad8:	b510      	push	{r4, lr}
    4ada:	4604      	mov	r4, r0
    4adc:	f000 faa4 	bl	5028 <Arduino::ArduinoTimeComponentBase::ArduinoTimeComponentBase(char const*)>
    4ae0:	4b01      	ldr	r3, [pc, #4]	; (4ae8 <Arduino::ArduinoTime::ArduinoTime(char const*)+0x10>)
    4ae2:	4620      	mov	r0, r4
    4ae4:	6023      	str	r3, [r4, #0]
    4ae6:	bd10      	pop	{r4, pc}
    4ae8:	20003fbc 	.word	0x20003fbc

00004aec <Arduino::ArduinoTime::setTime(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

void ArduinoTime ::setTime(U32 year, U8 month, U8 day, U8 hour, U8 minute, U8 second) {
    4aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4af0:	b08e      	sub	sp, #56	; 0x38
    4af2:	4616      	mov	r6, r2
    4af4:	460d      	mov	r5, r1
    4af6:	4604      	mov	r4, r0
    4af8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    year = (year > std::numeric_limits<int>::max()) ? std::numeric_limits<int>::max() : year;
    Fw::Time before_set = this->getTime();
    4afc:	4601      	mov	r1, r0
    4afe:	a806      	add	r0, sp, #24
void ArduinoTime ::setTime(U32 year, U8 month, U8 day, U8 hour, U8 minute, U8 second) {
    4b00:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    4b04:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    4b08:	9305      	str	r3, [sp, #20]
    4b0a:	9204      	str	r2, [sp, #16]
    Fw::Time before_set = this->getTime();
    4b0c:	f000 fc9a 	bl	5444 <Arduino::ArduinoTimeComponentBase::getTime()>
    ::setTime(hour, minute, second, day, month, year);
    4b10:	9600      	str	r6, [sp, #0]
    4b12:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    4b16:	4641      	mov	r1, r8
    4b18:	4638      	mov	r0, r7
    4b1a:	42b5      	cmp	r5, r6
    4b1c:	bf28      	it	cs
    4b1e:	4635      	movcs	r5, r6
    4b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4b24:	9501      	str	r5, [sp, #4]
    4b26:	f7fb fc57 	bl	3d8 <setTime(int, int, int, int, int, int)>
    Fw::Time after_set = this->getTime();
    4b2a:	4621      	mov	r1, r4
    4b2c:	a80a      	add	r0, sp, #40	; 0x28
    4b2e:	f000 fc89 	bl	5444 <Arduino::ArduinoTimeComponentBase::getTime()>
    this->log_ACTIVITY_HI_TimeUpdate(before_set.getSeconds(), before_set.getUSeconds(), before_set.getTimeBase(),
    4b32:	a806      	add	r0, sp, #24
    4b34:	f012 ff1a 	bl	1796c <Fw::Time::getSeconds() const>
    4b38:	4601      	mov	r1, r0
    4b3a:	a806      	add	r0, sp, #24
    4b3c:	9105      	str	r1, [sp, #20]
    4b3e:	f012 ff17 	bl	17970 <Fw::Time::getUSeconds() const>
    4b42:	9004      	str	r0, [sp, #16]
    4b44:	a806      	add	r0, sp, #24
    4b46:	f012 ff15 	bl	17974 <Fw::Time::getTimeBase() const>
    4b4a:	4605      	mov	r5, r0
    4b4c:	a80a      	add	r0, sp, #40	; 0x28
    4b4e:	f012 ff0d 	bl	1796c <Fw::Time::getSeconds() const>
    4b52:	4606      	mov	r6, r0
    4b54:	a80a      	add	r0, sp, #40	; 0x28
    4b56:	f012 ff0b 	bl	17970 <Fw::Time::getUSeconds() const>
    4b5a:	4607      	mov	r7, r0
                                  after_set.getSeconds(), after_set.getUSeconds(), after_set.getTimeBase());
    4b5c:	a80a      	add	r0, sp, #40	; 0x28
    4b5e:	f012 ff09 	bl	17974 <Fw::Time::getTimeBase() const>
    this->log_ACTIVITY_HI_TimeUpdate(before_set.getSeconds(), before_set.getUSeconds(), before_set.getTimeBase(),
    4b62:	b2c3      	uxtb	r3, r0
    4b64:	4620      	mov	r0, r4
    4b66:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
    4b6a:	9302      	str	r3, [sp, #8]
    4b6c:	b2eb      	uxtb	r3, r5
    4b6e:	e9cd 6700 	strd	r6, r7, [sp]
    4b72:	f000 fb6b 	bl	524c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const>
}
    4b76:	a80a      	add	r0, sp, #40	; 0x28
    4b78:	f012 fe42 	bl	17800 <Fw::Time::~Time()>
    4b7c:	a806      	add	r0, sp, #24
    4b7e:	f012 fe3f 	bl	17800 <Fw::Time::~Time()>
    4b82:	b00e      	add	sp, #56	; 0x38
    4b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004b88 <Arduino::ArduinoTime::setTime_handler(long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:

void ArduinoTime ::setTime_handler(FwIndexType portNum, U32 year, U8 month, U8 day, U8 hour, U8 minute, U8 second) {
    4b88:	b410      	push	{r4}
    4b8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    4b8e:	4611      	mov	r1, r2
    4b90:	461a      	mov	r2, r3
    4b92:	f89d 3004 	ldrb.w	r3, [sp, #4]
    this->setTime(year, month, day, hour, minute, second);
    4b96:	9401      	str	r4, [sp, #4]
void ArduinoTime ::setTime_handler(FwIndexType portNum, U32 year, U8 month, U8 day, U8 hour, U8 minute, U8 second) {
    4b98:	f89d 400c 	ldrb.w	r4, [sp, #12]
    this->setTime(year, month, day, hour, minute, second);
    4b9c:	9402      	str	r4, [sp, #8]
void ArduinoTime ::setTime_handler(FwIndexType portNum, U32 year, U8 month, U8 day, U8 hour, U8 minute, U8 second) {
    4b9e:	f89d 4010 	ldrb.w	r4, [sp, #16]
    this->setTime(year, month, day, hour, minute, second);
    4ba2:	9403      	str	r4, [sp, #12]
}
    4ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
    this->setTime(year, month, day, hour, minute, second);
    4ba8:	f7ff bfa0 	b.w	4aec <Arduino::ArduinoTime::setTime(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>

00004bac <Arduino::ArduinoTime::SET_TIME_cmdHandler(unsigned long, unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
                                       U32 year,
                                       U8 month,
                                       U8 day,
                                       U8 hour,
                                       U8 minute,
                                       U8 second) {
    4bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bae:	b087      	sub	sp, #28
    4bb0:	460c      	mov	r4, r1
    this->setTime(year, month, day, hour, minute, second);
    4bb2:	4619      	mov	r1, r3
                                       U8 second) {
    4bb4:	4615      	mov	r5, r2
    4bb6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4bba:	4606      	mov	r6, r0
    this->setTime(year, month, day, hour, minute, second);
    4bbc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    4bc0:	9300      	str	r3, [sp, #0]
                                       U8 second) {
    4bc2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
      {
    4bc6:	4f0e      	ldr	r7, [pc, #56]	; (4c00 <Arduino::ArduinoTime::SET_TIME_cmdHandler(unsigned long, unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x54>)
    this->setTime(year, month, day, hour, minute, second);
    4bc8:	9301      	str	r3, [sp, #4]
                                       U8 second) {
    4bca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    this->setTime(year, month, day, hour, minute, second);
    4bce:	9302      	str	r3, [sp, #8]
    4bd0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    4bd4:	f7ff ff8a 	bl	4aec <Arduino::ArduinoTime::setTime(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    4bd8:	a804      	add	r0, sp, #16
    4bda:	f7fb fca9 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    4bde:	2300      	movs	r3, #0
    this->cmdResponse_out(opCode, cmdSeq, Fw::CmdResponse::OK);
    4be0:	4630      	mov	r0, r6
    4be2:	462a      	mov	r2, r5
    4be4:	4621      	mov	r1, r4
    4be6:	f88d 3014 	strb.w	r3, [sp, #20]
    4bea:	ab04      	add	r3, sp, #16
      {
    4bec:	9704      	str	r7, [sp, #16]
    4bee:	f000 fa7f 	bl	50f0 <Arduino::ArduinoTimeComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    4bf2:	a804      	add	r0, sp, #16
    4bf4:	9704      	str	r7, [sp, #16]
    4bf6:	f7fb fca1 	bl	53c <Fw::Serializable::~Serializable()>
}
    4bfa:	b007      	add	sp, #28
    4bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bfe:	bf00      	nop
    4c00:	20002bec 	.word	0x20002bec

00004c04 <Arduino::ArduinoTimeComponentBase::m_p_setTime_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
        U8 day,
        U8 hour,
        U8 minute,
        U8 second
    )
  {
    4c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c08:	b082      	sub	sp, #8
    4c0a:	460d      	mov	r5, r1
    4c0c:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    4c0e:	4604      	mov	r4, r0
  {
    4c10:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    4c14:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    4c18:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    4c1c:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    FW_ASSERT(callComp);
    4c20:	b1b8      	cbz	r0, 4c52 <Arduino::ArduinoTimeComponentBase::m_p_setTime_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4e>
    FW_ASSERT(
    4c22:	2d00      	cmp	r5, #0
    4c24:	dd07      	ble.n	4c36 <Arduino::ArduinoTimeComponentBase::m_p_setTime_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    4c26:	f44f 7214 	mov.w	r2, #592	; 0x250
    4c2a:	4629      	mov	r1, r5
    4c2c:	480d      	ldr	r0, [pc, #52]	; (4c64 <Arduino::ArduinoTimeComponentBase::m_p_setTime_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x60>)
    4c2e:	9301      	str	r3, [sp, #4]
    4c30:	f7fc fcfa 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    4c34:	9b01      	ldr	r3, [sp, #4]
    this->setTime_handler(
    4c36:	4629      	mov	r1, r5
    4c38:	4620      	mov	r0, r4
    4c3a:	4632      	mov	r2, r6
    4c3c:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    4c40:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
    4c44:	6825      	ldr	r5, [r4, #0]
    4c46:	696c      	ldr	r4, [r5, #20]
    4c48:	46a4      	mov	ip, r4
      day,
      hour,
      minute,
      second
    );
  }
    4c4a:	b002      	add	sp, #8
    4c4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    this->setTime_handler(
    4c50:	4760      	bx	ip
    FW_ASSERT(callComp);
    4c52:	f240 31ed 	movw	r1, #1005	; 0x3ed
    4c56:	4803      	ldr	r0, [pc, #12]	; (4c64 <Arduino::ArduinoTimeComponentBase::m_p_setTime_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x60>)
    4c58:	9301      	str	r3, [sp, #4]
    4c5a:	f7fc fcd7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    4c5e:	9b01      	ldr	r3, [sp, #4]
    4c60:	e7df      	b.n	4c22 <Arduino::ArduinoTimeComponentBase::m_p_setTime_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1e>
    4c62:	bf00      	nop
    4c64:	20001f44 	.word	0x20001f44

00004c68 <Arduino::ArduinoTimeComponentBase::m_p_getTime_in(Fw::PassiveComponentBase*, long, Fw::Time&)>:
  {
    4c68:	b570      	push	{r4, r5, r6, lr}
    4c6a:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    4c6c:	4604      	mov	r4, r0
  {
    4c6e:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    4c70:	b178      	cbz	r0, 4c92 <Arduino::ArduinoTimeComponentBase::m_p_getTime_in(Fw::PassiveComponentBase*, long, Fw::Time&)+0x2a>
    FW_ASSERT(
    4c72:	2d00      	cmp	r5, #0
    4c74:	dd05      	ble.n	4c82 <Arduino::ArduinoTimeComponentBase::m_p_getTime_in(Fw::PassiveComponentBase*, long, Fw::Time&)+0x1a>
    4c76:	f44f 720e 	mov.w	r2, #568	; 0x238
    4c7a:	4629      	mov	r1, r5
    4c7c:	4808      	ldr	r0, [pc, #32]	; (4ca0 <Arduino::ArduinoTimeComponentBase::m_p_getTime_in(Fw::PassiveComponentBase*, long, Fw::Time&)+0x38>)
    4c7e:	f7fc fcd3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->getTime_handler(
    4c82:	6823      	ldr	r3, [r4, #0]
    4c84:	4632      	mov	r2, r6
    4c86:	4629      	mov	r1, r5
    4c88:	4620      	mov	r0, r4
    4c8a:	691b      	ldr	r3, [r3, #16]
  }
    4c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->getTime_handler(
    4c90:	4718      	bx	r3
    FW_ASSERT(callComp);
    4c92:	f240 31d9 	movw	r1, #985	; 0x3d9
    4c96:	4802      	ldr	r0, [pc, #8]	; (4ca0 <Arduino::ArduinoTimeComponentBase::m_p_getTime_in(Fw::PassiveComponentBase*, long, Fw::Time&)+0x38>)
    4c98:	f7fc fcb8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    4c9c:	e7e9      	b.n	4c72 <Arduino::ArduinoTimeComponentBase::m_p_getTime_in(Fw::PassiveComponentBase*, long, Fw::Time&)+0xa>
    4c9e:	bf00      	nop
    4ca0:	20001f44 	.word	0x20001f44

00004ca4 <Arduino::ArduinoTimeComponentBase::init(long)>:
  {
    4ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4ca8:	4604      	mov	r4, r0
    4caa:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    4cac:	f00d f918 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    4cb0:	4f7c      	ldr	r7, [pc, #496]	; (4ea4 <Arduino::ArduinoTimeComponentBase::init(long)+0x200>)
      this->m_cmdIn_InputPort[port].init();
    4cb2:	f104 0864 	add.w	r8, r4, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    4cb6:	4d7c      	ldr	r5, [pc, #496]	; (4ea8 <Arduino::ArduinoTimeComponentBase::init(long)+0x204>)
    const char* toChar() const { return this->m_buf; }
    4cb8:	f104 0608 	add.w	r6, r4, #8
      this->m_getTime_InputPort[port].init();
    4cbc:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
      this->m_cmdIn_InputPort[port].init();
    4cc0:	4640      	mov	r0, r8
    4cc2:	f011 f923 	bl	15f0c <Fw::InputCmdPort::init()>
      this->m_cmdIn_InputPort[port].addCallComp(
    4cc6:	4a79      	ldr	r2, [pc, #484]	; (4eac <Arduino::ArduinoTimeComponentBase::init(long)+0x208>)
    4cc8:	4621      	mov	r1, r4
    4cca:	4640      	mov	r0, r8
    4ccc:	f011 f864 	bl	15d98 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))>
      this->m_cmdIn_InputPort[port].setPortNum(port);
    4cd0:	2100      	movs	r1, #0
    4cd2:	4640      	mov	r0, r8
    4cd4:	f012 fffe 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    4cd8:	4668      	mov	r0, sp
    4cda:	f7fc faa1 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4cde:	4639      	mov	r1, r7
    4ce0:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4ce2:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4ce4:	f7fc fb04 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4ce8:	2300      	movs	r3, #0
    4cea:	4632      	mov	r2, r6
    4cec:	4970      	ldr	r1, [pc, #448]	; (4eb0 <Arduino::ArduinoTimeComponentBase::init(long)+0x20c>)
    4cee:	4668      	mov	r0, sp
    4cf0:	f7fc facc 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
    4cf4:	a901      	add	r1, sp, #4
    4cf6:	4640      	mov	r0, r8
      this->m_setTime_InputPort[port].init();
    4cf8:	f504 78a2 	add.w	r8, r4, #324	; 0x144
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
    4cfc:	f013 f950 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4d00:	4668      	mov	r0, sp
    4d02:	9500      	str	r5, [sp, #0]
    4d04:	f7fc fa96 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_getTime_InputPort[port].init();
    4d08:	4648      	mov	r0, r9
    4d0a:	f012 ff95 	bl	17c38 <Fw::InputTimePort::init()>
      this->m_getTime_InputPort[port].addCallComp(
    4d0e:	4a69      	ldr	r2, [pc, #420]	; (4eb4 <Arduino::ArduinoTimeComponentBase::init(long)+0x210>)
    4d10:	4621      	mov	r1, r4
    4d12:	4648      	mov	r0, r9
    4d14:	f012 fef4 	bl	17b00 <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))>
      this->m_getTime_InputPort[port].setPortNum(port);
    4d18:	2100      	movs	r1, #0
    4d1a:	4648      	mov	r0, r9
    4d1c:	f012 ffda 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    4d20:	4668      	mov	r0, sp
    4d22:	f7fc fa7d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4d26:	4639      	mov	r1, r7
    4d28:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4d2a:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4d2c:	f7fc fae0 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4d30:	2300      	movs	r3, #0
    4d32:	4632      	mov	r2, r6
    4d34:	4960      	ldr	r1, [pc, #384]	; (4eb8 <Arduino::ArduinoTimeComponentBase::init(long)+0x214>)
    4d36:	4668      	mov	r0, sp
    4d38:	f7fc faa8 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_getTime_InputPort[port].setObjName(portName.toChar());
    4d3c:	a901      	add	r1, sp, #4
    4d3e:	4648      	mov	r0, r9
      this->m_cmdRegOut_OutputPort[port].init();
    4d40:	f504 79da 	add.w	r9, r4, #436	; 0x1b4
      this->m_getTime_InputPort[port].setObjName(portName.toChar());
    4d44:	f013 f92c 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4d48:	4668      	mov	r0, sp
    4d4a:	9500      	str	r5, [sp, #0]
    4d4c:	f7fc fa72 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_setTime_InputPort[port].init();
    4d50:	4640      	mov	r0, r8
    4d52:	f000 fc37 	bl	55c4 <Arduino::InputSetTimePort::init()>
      this->m_setTime_InputPort[port].addCallComp(
    4d56:	4a59      	ldr	r2, [pc, #356]	; (4ebc <Arduino::ArduinoTimeComponentBase::init(long)+0x218>)
    4d58:	4621      	mov	r1, r4
    4d5a:	4640      	mov	r0, r8
    4d5c:	f000 fc18 	bl	5590 <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))>
      this->m_setTime_InputPort[port].setPortNum(port);
    4d60:	2100      	movs	r1, #0
    4d62:	4640      	mov	r0, r8
    4d64:	f012 ffb6 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    4d68:	4668      	mov	r0, sp
    4d6a:	f7fc fa59 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4d6e:	4639      	mov	r1, r7
    4d70:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4d72:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4d74:	f7fc fabc 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4d78:	4632      	mov	r2, r6
    4d7a:	2300      	movs	r3, #0
    4d7c:	4950      	ldr	r1, [pc, #320]	; (4ec0 <Arduino::ArduinoTimeComponentBase::init(long)+0x21c>)
    4d7e:	4668      	mov	r0, sp
    4d80:	f7fc fa84 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_setTime_InputPort[port].setObjName(portName.toChar());
    4d84:	a901      	add	r1, sp, #4
    4d86:	4640      	mov	r0, r8
      this->m_cmdResponseOut_OutputPort[port].init();
    4d88:	f504 7808 	add.w	r8, r4, #544	; 0x220
      this->m_setTime_InputPort[port].setObjName(portName.toChar());
    4d8c:	f013 f908 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4d90:	4668      	mov	r0, sp
    4d92:	9500      	str	r5, [sp, #0]
    4d94:	f7fc fa4e 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_cmdRegOut_OutputPort[port].init();
    4d98:	4648      	mov	r0, r9
    4d9a:	f011 fa17 	bl	161cc <Fw::OutputCmdRegPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    4d9e:	4668      	mov	r0, sp
    4da0:	f7fc fa3e 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4da4:	4639      	mov	r1, r7
    4da6:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4da8:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4daa:	f7fc faa1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4dae:	4632      	mov	r2, r6
    4db0:	2300      	movs	r3, #0
    4db2:	4944      	ldr	r1, [pc, #272]	; (4ec4 <Arduino::ArduinoTimeComponentBase::init(long)+0x220>)
    4db4:	4668      	mov	r0, sp
    4db6:	f7fc fa69 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
    4dba:	a901      	add	r1, sp, #4
    4dbc:	4648      	mov	r0, r9
      this->m_logOut_OutputPort[port].init();
    4dbe:	f504 7923 	add.w	r9, r4, #652	; 0x28c
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
    4dc2:	f013 f8ed 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4dc6:	4668      	mov	r0, sp
    4dc8:	9500      	str	r5, [sp, #0]
    4dca:	f7fc fa33 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_cmdResponseOut_OutputPort[port].init();
    4dce:	4640      	mov	r0, r8
    4dd0:	f011 fbe4 	bl	1659c <Fw::OutputCmdResponsePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    4dd4:	4668      	mov	r0, sp
    4dd6:	f7fc fa23 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4dda:	4639      	mov	r1, r7
    4ddc:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4dde:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4de0:	f7fc fa86 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4de4:	4632      	mov	r2, r6
    4de6:	2300      	movs	r3, #0
    4de8:	4937      	ldr	r1, [pc, #220]	; (4ec8 <Arduino::ArduinoTimeComponentBase::init(long)+0x224>)
    4dea:	4668      	mov	r0, sp
    4dec:	f7fc fa4e 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
    4df0:	a901      	add	r1, sp, #4
    4df2:	4640      	mov	r0, r8
      this->m_logTextOut_OutputPort[port].init();
    4df4:	f504 783e 	add.w	r8, r4, #760	; 0x2f8
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
    4df8:	f013 f8d2 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4dfc:	4668      	mov	r0, sp
    4dfe:	9500      	str	r5, [sp, #0]
    4e00:	f7fc fa18 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_logOut_OutputPort[port].init();
    4e04:	4648      	mov	r0, r9
      this->m_timeCaller_OutputPort[port].init();
    4e06:	f504 7459 	add.w	r4, r4, #868	; 0x364
      this->m_logOut_OutputPort[port].init();
    4e0a:	f011 fe39 	bl	16a80 <Fw::OutputLogPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    4e0e:	4668      	mov	r0, sp
    4e10:	f7fc fa06 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4e14:	4639      	mov	r1, r7
    4e16:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4e18:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4e1a:	f7fc fa69 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4e1e:	4632      	mov	r2, r6
    4e20:	2300      	movs	r3, #0
    4e22:	492a      	ldr	r1, [pc, #168]	; (4ecc <Arduino::ArduinoTimeComponentBase::init(long)+0x228>)
    4e24:	4668      	mov	r0, sp
    4e26:	f7fc fa31 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_logOut_OutputPort[port].setObjName(portName.toChar());
    4e2a:	a901      	add	r1, sp, #4
    4e2c:	4648      	mov	r0, r9
    4e2e:	f013 f8b7 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4e32:	4668      	mov	r0, sp
    4e34:	9500      	str	r5, [sp, #0]
    4e36:	f7fc f9fd 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_logTextOut_OutputPort[port].init();
    4e3a:	4640      	mov	r0, r8
    4e3c:	f012 f848 	bl	16ed0 <Fw::OutputLogTextPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    4e40:	4668      	mov	r0, sp
    4e42:	f7fc f9ed 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4e46:	4639      	mov	r1, r7
    4e48:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4e4a:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4e4c:	f7fc fa50 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4e50:	4632      	mov	r2, r6
    4e52:	2300      	movs	r3, #0
    4e54:	491e      	ldr	r1, [pc, #120]	; (4ed0 <Arduino::ArduinoTimeComponentBase::init(long)+0x22c>)
    4e56:	4668      	mov	r0, sp
    4e58:	f7fc fa18 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_logTextOut_OutputPort[port].setObjName(portName.toChar());
    4e5c:	a901      	add	r1, sp, #4
    4e5e:	4640      	mov	r0, r8
    4e60:	f013 f89e 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4e64:	4668      	mov	r0, sp
    4e66:	9500      	str	r5, [sp, #0]
    4e68:	f7fc f9e4 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_timeCaller_OutputPort[port].init();
    4e6c:	4620      	mov	r0, r4
    4e6e:	f012 ff11 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    4e72:	4668      	mov	r0, sp
    4e74:	f7fc f9d4 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    4e78:	4639      	mov	r1, r7
    4e7a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    4e7c:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    4e7e:	f7fc fa37 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    4e82:	4632      	mov	r2, r6
    4e84:	2300      	movs	r3, #0
    4e86:	4913      	ldr	r1, [pc, #76]	; (4ed4 <Arduino::ArduinoTimeComponentBase::init(long)+0x230>)
    4e88:	4668      	mov	r0, sp
    4e8a:	f7fc f9ff 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
    4e8e:	a901      	add	r1, sp, #4
    4e90:	4620      	mov	r0, r4
    4e92:	f013 f885 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    4e96:	4668      	mov	r0, sp
    4e98:	9500      	str	r5, [sp, #0]
    4e9a:	f7fc f9cb 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    4e9e:	b017      	add	sp, #92	; 0x5c
    4ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ea4:	20001d2c 	.word	0x20001d2c
    4ea8:	20002b80 	.word	0x20002b80
    4eac:	000051fd 	.word	0x000051fd
    4eb0:	200004d8 	.word	0x200004d8
    4eb4:	00004c69 	.word	0x00004c69
    4eb8:	20001f98 	.word	0x20001f98
    4ebc:	00004c05 	.word	0x00004c05
    4ec0:	20001fb4 	.word	0x20001fb4
    4ec4:	20000508 	.word	0x20000508
    4ec8:	20000528 	.word	0x20000528
    4ecc:	2000054c 	.word	0x2000054c
    4ed0:	20000568 	.word	0x20000568
    4ed4:	200005c8 	.word	0x200005c8

00004ed8 <Arduino::ArduinoTimeComponentBase::get_cmdIn_InputPort(long)>:
  {
    4ed8:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    4eda:	1e0c      	subs	r4, r1, #0
  {
    4edc:	4605      	mov	r5, r0
    FW_ASSERT(
    4ede:	dd03      	ble.n	4ee8 <Arduino::ArduinoTimeComponentBase::get_cmdIn_InputPort(long)+0x10>
    4ee0:	22cb      	movs	r2, #203	; 0xcb
    4ee2:	4804      	ldr	r0, [pc, #16]	; (4ef4 <Arduino::ArduinoTimeComponentBase::get_cmdIn_InputPort(long)+0x1c>)
    4ee4:	f7fc fba0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_cmdIn_InputPort[portNum];
    4ee8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    4eec:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    4ef0:	3064      	adds	r0, #100	; 0x64
    4ef2:	bd38      	pop	{r3, r4, r5, pc}
    4ef4:	20001f44 	.word	0x20001f44

00004ef8 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)>:
  {
    4ef8:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    4efa:	1e0c      	subs	r4, r1, #0
  {
    4efc:	4605      	mov	r5, r0
    FW_ASSERT(
    4efe:	dd03      	ble.n	4f08 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)+0x10>
    4f00:	22da      	movs	r2, #218	; 0xda
    4f02:	4804      	ldr	r0, [pc, #16]	; (4f14 <Arduino::ArduinoTimeComponentBase::get_getTime_InputPort(long)+0x1c>)
    4f04:	f7fc fb90 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_getTime_InputPort[portNum];
    4f08:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    4f0c:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    4f10:	30d4      	adds	r0, #212	; 0xd4
    4f12:	bd38      	pop	{r3, r4, r5, pc}
    4f14:	20001f44 	.word	0x20001f44

00004f18 <Arduino::ArduinoTimeComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)>:
  {
    4f18:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    4f1a:	1e0d      	subs	r5, r1, #0
  {
    4f1c:	4604      	mov	r4, r0
    4f1e:	4616      	mov	r6, r2
    FW_ASSERT(
    4f20:	dd03      	ble.n	4f2a <Arduino::ArduinoTimeComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)+0x12>
    4f22:	22f7      	movs	r2, #247	; 0xf7
    4f24:	4806      	ldr	r0, [pc, #24]	; (4f40 <Arduino::ArduinoTimeComponentBase::set_cmdRegOut_OutputPort(long, Fw::InputCmdRegPort*)+0x28>)
    4f26:	f7fc fb7f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
    4f2a:	236c      	movs	r3, #108	; 0x6c
    4f2c:	4631      	mov	r1, r6
    4f2e:	fb03 4005 	mla	r0, r3, r5, r4
  }
    4f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
    4f36:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
    4f3a:	f011 b8f7 	b.w	1612c <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)>
    4f3e:	bf00      	nop
    4f40:	20001f44 	.word	0x20001f44

00004f44 <Arduino::ArduinoTimeComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)>:
  {
    4f44:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    4f46:	1e0d      	subs	r5, r1, #0
  {
    4f48:	4604      	mov	r4, r0
    4f4a:	4616      	mov	r6, r2
    FW_ASSERT(
    4f4c:	dd04      	ble.n	4f58 <Arduino::ArduinoTimeComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)+0x14>
    4f4e:	f240 1205 	movw	r2, #261	; 0x105
    4f52:	4806      	ldr	r0, [pc, #24]	; (4f6c <Arduino::ArduinoTimeComponentBase::set_cmdResponseOut_OutputPort(long, Fw::InputCmdResponsePort*)+0x28>)
    4f54:	f7fc fb68 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
    4f58:	236c      	movs	r3, #108	; 0x6c
    4f5a:	4631      	mov	r1, r6
    4f5c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    4f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
    4f64:	f500 7008 	add.w	r0, r0, #544	; 0x220
    4f68:	f011 baa8 	b.w	164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>
    4f6c:	20001f44 	.word	0x20001f44

00004f70 <Arduino::ArduinoTimeComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)>:
  {
    4f70:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    4f72:	1e0d      	subs	r5, r1, #0
  {
    4f74:	4604      	mov	r4, r0
    4f76:	4616      	mov	r6, r2
    FW_ASSERT(
    4f78:	dd04      	ble.n	4f84 <Arduino::ArduinoTimeComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)+0x14>
    4f7a:	f240 1213 	movw	r2, #275	; 0x113
    4f7e:	4806      	ldr	r0, [pc, #24]	; (4f98 <Arduino::ArduinoTimeComponentBase::set_logOut_OutputPort(long, Fw::InputLogPort*)+0x28>)
    4f80:	f7fc fb52 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_logOut_OutputPort[portNum].addCallPort(port);
    4f84:	236c      	movs	r3, #108	; 0x6c
    4f86:	4631      	mov	r1, r6
    4f88:	fb03 4005 	mla	r0, r3, r5, r4
  }
    4f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_logOut_OutputPort[portNum].addCallPort(port);
    4f90:	f500 7023 	add.w	r0, r0, #652	; 0x28c
    4f94:	f011 bc96 	b.w	168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>
    4f98:	20001f44 	.word	0x20001f44

00004f9c <Arduino::ArduinoTimeComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)>:
  {
    4f9c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    4f9e:	1e0d      	subs	r5, r1, #0
  {
    4fa0:	4604      	mov	r4, r0
    4fa2:	4616      	mov	r6, r2
    FW_ASSERT(
    4fa4:	dd04      	ble.n	4fb0 <Arduino::ArduinoTimeComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)+0x14>
    4fa6:	f240 1223 	movw	r2, #291	; 0x123
    4faa:	4806      	ldr	r0, [pc, #24]	; (4fc4 <Arduino::ArduinoTimeComponentBase::set_logTextOut_OutputPort(long, Fw::InputLogTextPort*)+0x28>)
    4fac:	f7fc fb3c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
    4fb0:	236c      	movs	r3, #108	; 0x6c
    4fb2:	4631      	mov	r1, r6
    4fb4:	fb03 4005 	mla	r0, r3, r5, r4
  }
    4fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
    4fbc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    4fc0:	f011 be98 	b.w	16cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>
    4fc4:	20001f44 	.word	0x20001f44

00004fc8 <Arduino::ArduinoTimeComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)>:
  {
    4fc8:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    4fca:	1e0d      	subs	r5, r1, #0
  {
    4fcc:	4604      	mov	r4, r0
    4fce:	4616      	mov	r6, r2
    FW_ASSERT(
    4fd0:	dd04      	ble.n	4fdc <Arduino::ArduinoTimeComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)+0x14>
    4fd2:	f240 1233 	movw	r2, #307	; 0x133
    4fd6:	4806      	ldr	r0, [pc, #24]	; (4ff0 <Arduino::ArduinoTimeComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)+0x28>)
    4fd8:	f7fc fb26 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
    4fdc:	236c      	movs	r3, #108	; 0x6c
    4fde:	4631      	mov	r1, r6
    4fe0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    4fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
    4fe8:	f500 7059 	add.w	r0, r0, #868	; 0x364
    4fec:	f012 bdd6 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    4ff0:	20001f44 	.word	0x20001f44

00004ff4 <Arduino::ArduinoTimeComponentBase::regCommands()>:
  {
    4ff4:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());
    4ff6:	f500 75da 	add.w	r5, r0, #436	; 0x1b4
  {
    4ffa:	4604      	mov	r4, r0
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());
    4ffc:	4628      	mov	r0, r5
    4ffe:	f012 ff25 	bl	17e4c <Fw::PortBase::isConnected() const>
    5002:	b140      	cbz	r0, 5016 <Arduino::ArduinoTimeComponentBase::regCommands()+0x22>
    this->m_cmdRegOut_OutputPort[0].invoke(
    5004:	4620      	mov	r0, r4
    5006:	f00c ff75 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    500a:	4601      	mov	r1, r0
    500c:	4628      	mov	r0, r5
  }
    500e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    this->m_cmdRegOut_OutputPort[0].invoke(
    5012:	f011 b89b 	b.w	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());
    5016:	f44f 71ca 	mov.w	r1, #404	; 0x194
    501a:	4802      	ldr	r0, [pc, #8]	; (5024 <Arduino::ArduinoTimeComponentBase::regCommands()+0x30>)
    501c:	f7fc faf6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    5020:	e7f0      	b.n	5004 <Arduino::ArduinoTimeComponentBase::regCommands()+0x10>
    5022:	bf00      	nop
    5024:	20001f44 	.word	0x20001f44

00005028 <Arduino::ArduinoTimeComponentBase::ArduinoTimeComponentBase(char const*)>:
  ArduinoTimeComponentBase ::
    5028:	b510      	push	{r4, lr}
    502a:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    502c:	f00c ff4a 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    5030:	4b11      	ldr	r3, [pc, #68]	; (5078 <Arduino::ArduinoTimeComponentBase::ArduinoTimeComponentBase(char const*)+0x50>)
    5032:	4620      	mov	r0, r4
    5034:	f840 3b64 	str.w	r3, [r0], #100
    5038:	f010 fea2 	bl	15d80 <Fw::InputCmdPort::InputCmdPort()>
    503c:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    5040:	f012 fd52 	bl	17ae8 <Fw::InputTimePort::InputTimePort()>
    5044:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    5048:	f000 fa96 	bl	5578 <Arduino::InputSetTimePort::InputSetTimePort()>
    504c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    5050:	f011 f860 	bl	16114 <Fw::OutputCmdRegPort::OutputCmdRegPort()>
    5054:	f504 7008 	add.w	r0, r4, #544	; 0x220
    5058:	f011 fa24 	bl	164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>
    505c:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    5060:	f011 fc24 	bl	168ac <Fw::OutputLogPort::OutputLogPort()>
    5064:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    5068:	f011 fe38 	bl	16cdc <Fw::OutputLogTextPort::OutputLogTextPort()>
    506c:	f504 7059 	add.w	r0, r4, #868	; 0x364
    5070:	f012 fd88 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
  }
    5074:	4620      	mov	r0, r4
    5076:	bd10      	pop	{r4, pc}
    5078:	20004060 	.word	0x20004060

0000507c <Arduino::ArduinoTimeComponentBase::~ArduinoTimeComponentBase()>:
  ArduinoTimeComponentBase ::
    507c:	b510      	push	{r4, lr}
    ~ArduinoTimeComponentBase()
    507e:	4a1b      	ldr	r2, [pc, #108]	; (50ec <Arduino::ArduinoTimeComponentBase::~ArduinoTimeComponentBase()+0x70>)
  ArduinoTimeComponentBase ::
    5080:	4604      	mov	r4, r0
    ~ArduinoTimeComponentBase()
    5082:	f8d0 3364 	ldr.w	r3, [r0, #868]	; 0x364
    5086:	f500 7059 	add.w	r0, r0, #868	; 0x364
    508a:	6022      	str	r2, [r4, #0]
    508c:	685b      	ldr	r3, [r3, #4]
    508e:	4798      	blx	r3
    5090:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    5094:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    5098:	685b      	ldr	r3, [r3, #4]
    509a:	4798      	blx	r3
    509c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
    50a0:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    50a4:	685b      	ldr	r3, [r3, #4]
    50a6:	4798      	blx	r3
    50a8:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    50ac:	f504 7008 	add.w	r0, r4, #544	; 0x220
    50b0:	685b      	ldr	r3, [r3, #4]
    50b2:	4798      	blx	r3
    50b4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    50b8:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    50bc:	685b      	ldr	r3, [r3, #4]
    50be:	4798      	blx	r3
    50c0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    50c4:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    50c8:	685b      	ldr	r3, [r3, #4]
    50ca:	4798      	blx	r3
    50cc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    50d0:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    50d4:	685b      	ldr	r3, [r3, #4]
    50d6:	4798      	blx	r3
    50d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    50da:	f104 0064 	add.w	r0, r4, #100	; 0x64
    50de:	685b      	ldr	r3, [r3, #4]
    50e0:	4798      	blx	r3
    50e2:	4620      	mov	r0, r4
    50e4:	f00c fe96 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    50e8:	4620      	mov	r0, r4
    50ea:	bd10      	pop	{r4, pc}
    50ec:	20004060 	.word	0x20004060

000050f0 <Arduino::ArduinoTimeComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>:
  {
    50f0:	b530      	push	{r4, r5, lr}
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    50f2:	f500 7408 	add.w	r4, r0, #544	; 0x220
  {
    50f6:	b083      	sub	sp, #12
    50f8:	460d      	mov	r5, r1
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    50fa:	4620      	mov	r0, r4
  {
    50fc:	e9cd 3200 	strd	r3, r2, [sp]
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    5100:	f012 fea4 	bl	17e4c <Fw::PortBase::isConnected() const>
    5104:	e9dd 3200 	ldrd	r3, r2, [sp]
    5108:	b130      	cbz	r0, 5118 <Arduino::ArduinoTimeComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x28>
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    510a:	4629      	mov	r1, r5
    510c:	4620      	mov	r0, r4
  }
    510e:	b003      	add	sp, #12
    5110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    5114:	f011 b9e2 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    5118:	f44f 711b 	mov.w	r1, #620	; 0x26c
    511c:	4806      	ldr	r0, [pc, #24]	; (5138 <Arduino::ArduinoTimeComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x48>)
    511e:	e9cd 2300 	strd	r2, r3, [sp]
    5122:	f7fc fa73 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    5126:	4629      	mov	r1, r5
    5128:	4620      	mov	r0, r4
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    512a:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    512e:	b003      	add	sp, #12
    5130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
    5134:	f011 b9d2 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    5138:	20001f44 	.word	0x20001f44

0000513c <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    513c:	b5f0      	push	{r4, r5, r6, r7, lr}
    513e:	461c      	mov	r4, r3
    5140:	b08d      	sub	sp, #52	; 0x34
    5142:	4605      	mov	r5, r0
    args.resetDeser();
    5144:	4618      	mov	r0, r3
  {
    5146:	460e      	mov	r6, r1
    5148:	4617      	mov	r7, r2
    args.resetDeser();
    514a:	f7fb ff57 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
    _status = args.deserialize(year);
    514e:	a909      	add	r1, sp, #36	; 0x24
    5150:	4620      	mov	r0, r4
    5152:	f7fb fdb5 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    5156:	bb98      	cbnz	r0, 51c0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x84>
    _status = args.deserialize(month);
    5158:	f10d 011f 	add.w	r1, sp, #31
    515c:	4620      	mov	r0, r4
    515e:	f7fb fd39 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    5162:	bb68      	cbnz	r0, 51c0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x84>
    _status = args.deserialize(day);
    5164:	a908      	add	r1, sp, #32
    5166:	4620      	mov	r0, r4
    5168:	f7fb fd34 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    516c:	bb40      	cbnz	r0, 51c0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x84>
    _status = args.deserialize(hour);
    516e:	f10d 0121 	add.w	r1, sp, #33	; 0x21
    5172:	4620      	mov	r0, r4
    5174:	f7fb fd2e 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    5178:	bb10      	cbnz	r0, 51c0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x84>
    _status = args.deserialize(minute);
    517a:	f10d 0122 	add.w	r1, sp, #34	; 0x22
    517e:	4620      	mov	r0, r4
    5180:	f7fb fd28 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    5184:	b9e0      	cbnz	r0, 51c0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x84>
    _status = args.deserialize(second);
    5186:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    518a:	4620      	mov	r0, r4
    518c:	f7fb fd22 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    5190:	b9b0      	cbnz	r0, 51c0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x84>
    this->SET_TIME_cmdHandler(
    5192:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    5196:	463a      	mov	r2, r7
    5198:	682c      	ldr	r4, [r5, #0]
    519a:	4631      	mov	r1, r6
    519c:	9304      	str	r3, [sp, #16]
    519e:	4628      	mov	r0, r5
    51a0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    51a4:	9303      	str	r3, [sp, #12]
    51a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    51aa:	9302      	str	r3, [sp, #8]
    51ac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    51b0:	9301      	str	r3, [sp, #4]
    51b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    51b6:	9300      	str	r3, [sp, #0]
    51b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51ba:	69a4      	ldr	r4, [r4, #24]
    51bc:	47a0      	blx	r4
    51be:	e005      	b.n	51cc <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x90>
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
    51c0:	f505 7508 	add.w	r5, r5, #544	; 0x220
    51c4:	4628      	mov	r0, r5
    51c6:	f012 fe41 	bl	17e4c <Fw::PortBase::isConnected() const>
    51ca:	b908      	cbnz	r0, 51d0 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
  }
    51cc:	b00d      	add	sp, #52	; 0x34
    51ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
    51d0:	a80a      	add	r0, sp, #40	; 0x28
    51d2:	4c09      	ldr	r4, [pc, #36]	; (51f8 <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xbc>)
    51d4:	f7fb f9ac 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    51d8:	2303      	movs	r3, #3
        this->m_cmdResponseOut_OutputPort[0].invoke(
    51da:	4628      	mov	r0, r5
    51dc:	463a      	mov	r2, r7
    51de:	4631      	mov	r1, r6
    51e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    51e4:	ab0a      	add	r3, sp, #40	; 0x28
      {
    51e6:	940a      	str	r4, [sp, #40]	; 0x28
    51e8:	f011 f978 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    51ec:	a80a      	add	r0, sp, #40	; 0x28
    51ee:	940a      	str	r4, [sp, #40]	; 0x28
    51f0:	f7fb f9a4 	bl	53c <Fw::Serializable::~Serializable()>
  }
    51f4:	b00d      	add	sp, #52	; 0x34
    51f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51f8:	20002bec 	.word	0x20002bec

000051fc <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    51fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5200:	9e06      	ldr	r6, [sp, #24]
    5202:	4615      	mov	r5, r2
    FW_ASSERT(callComp);
    5204:	4604      	mov	r4, r0
  {
    5206:	461f      	mov	r7, r3
    FW_ASSERT(callComp);
    5208:	b1c0      	cbz	r0, 523c <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x40>
    const U32 idBase = callComp->getIdBase();
    520a:	4620      	mov	r0, r4
    520c:	f00c fe72 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    5210:	42a8      	cmp	r0, r5
    5212:	d80a      	bhi.n	522a <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x2e>
    switch (opCode - idBase) {
    5214:	d001      	beq.n	521a <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x1e>
  }
    5216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        compPtr->SET_TIME_cmdHandlerBase(
    521a:	4633      	mov	r3, r6
    521c:	463a      	mov	r2, r7
    521e:	4629      	mov	r1, r5
    5220:	4620      	mov	r0, r4
  }
    5222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->SET_TIME_cmdHandlerBase(
    5226:	f7ff bf89 	b.w	513c <Arduino::ArduinoTimeComponentBase::SET_TIME_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    522a:	4602      	mov	r2, r0
    522c:	4629      	mov	r1, r5
    522e:	f240 33bf 	movw	r3, #959	; 0x3bf
    5232:	4805      	ldr	r0, [pc, #20]	; (5248 <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x4c>)
  }
    5234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    5238:	f7fc ba06 	b.w	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(callComp);
    523c:	f240 31bb 	movw	r1, #955	; 0x3bb
    5240:	4801      	ldr	r0, [pc, #4]	; (5248 <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x4c>)
    5242:	f7fc f9e3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    5246:	e7e0      	b.n	520a <Arduino::ArduinoTimeComponentBase::m_p_cmdIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xe>
    5248:	20001f44 	.word	0x20001f44

0000524c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const>:
  {
    524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5250:	b0af      	sub	sp, #188	; 0xbc
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    5252:	f500 7559 	add.w	r5, r0, #868	; 0x364
  {
    5256:	4604      	mov	r4, r0
    5258:	460e      	mov	r6, r1
    Fw::Time _logTime;
    525a:	a808      	add	r0, sp, #32
  {
    525c:	4617      	mov	r7, r2
    525e:	4698      	mov	r8, r3
    5260:	f89d b0e8 	ldrb.w	fp, [sp, #232]	; 0xe8
    Fw::Time _logTime;
    5264:	f012 fb24 	bl	178b0 <Fw::Time::Time()>
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    5268:	4628      	mov	r0, r5
    526a:	f012 fdef 	bl	17e4c <Fw::PortBase::isConnected() const>
    526e:	b9b0      	cbnz	r0, 529e <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x52>
    if (this->m_logOut_OutputPort[0].isConnected()) {
    5270:	f504 7a23 	add.w	sl, r4, #652	; 0x28c
    _id = this->getIdBase() + EVENTID_TIMEUPDATE;
    5274:	4620      	mov	r0, r4
    5276:	f00c fe3d 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    527a:	4605      	mov	r5, r0
    if (this->m_logOut_OutputPort[0].isConnected()) {
    527c:	4650      	mov	r0, sl
    527e:	f012 fde5 	bl	17e4c <Fw::PortBase::isConnected() const>
    5282:	2800      	cmp	r0, #0
    5284:	d14b      	bne.n	531e <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0xd2>
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
    5286:	f504 793e 	add.w	r9, r4, #760	; 0x2f8
    528a:	4648      	mov	r0, r9
    528c:	f012 fdde 	bl	17e4c <Fw::PortBase::isConnected() const>
    5290:	b950      	cbnz	r0, 52a8 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x5c>
  }
    5292:	a808      	add	r0, sp, #32
    5294:	f012 fab4 	bl	17800 <Fw::Time::~Time()>
    5298:	b02f      	add	sp, #188	; 0xbc
    529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    529e:	4628      	mov	r0, r5
    52a0:	a908      	add	r1, sp, #32
    52a2:	f012 fc8b 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    52a6:	e7e3      	b.n	5270 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x24>
    TextLogString() : StringBase() { *this = ""; }
    52a8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    52ac:	4650      	mov	r0, sl
    52ae:	f7fb ffb7 	bl	1220 <Fw::StringBase::StringBase()>
    52b2:	4b5e      	ldr	r3, [pc, #376]	; (542c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1e0>)
        (void)StringBase::operator=(src);
    52b4:	495e      	ldr	r1, [pc, #376]	; (5430 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1e4>)
    52b6:	4650      	mov	r0, sl
    TextLogString() : StringBase() { *this = ""; }
    52b8:	930c      	str	r3, [sp, #48]	; 0x30
        (void)StringBase::operator=(src);
    52ba:	f7fc f819 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    52be:	9939      	ldr	r1, [sp, #228]	; 0xe4
    52c0:	f104 0208 	add.w	r2, r4, #8
    52c4:	4b5b      	ldr	r3, [pc, #364]	; (5434 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1e8>)
    52c6:	4650      	mov	r0, sl
    52c8:	9104      	str	r1, [sp, #16]
    52ca:	9938      	ldr	r1, [sp, #224]	; 0xe0
    52cc:	f8cd b014 	str.w	fp, [sp, #20]
    52d0:	9103      	str	r1, [sp, #12]
    52d2:	9600      	str	r6, [sp, #0]
    52d4:	4958      	ldr	r1, [pc, #352]	; (5438 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1ec>)
      {
    52d6:	4c59      	ldr	r4, [pc, #356]	; (543c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f0>)
    52d8:	e9cd 7801 	strd	r7, r8, [sp, #4]
    52dc:	f7fb ffd6 	bl	128c <Fw::StringBase::format(char const*, ...)>
    52e0:	a806      	add	r0, sp, #24
    52e2:	f7fb f925 	bl	530 <Fw::Serializable::Serializable()>
      this->m_logTextOut_OutputPort[0].invoke(
    52e6:	aa06      	add	r2, sp, #24
        this->e = e1;
    52e8:	2305      	movs	r3, #5
    52ea:	4629      	mov	r1, r5
    52ec:	4648      	mov	r0, r9
    52ee:	f8cd a000 	str.w	sl, [sp]
    52f2:	f88d 301c 	strb.w	r3, [sp, #28]
    52f6:	4613      	mov	r3, r2
    52f8:	aa08      	add	r2, sp, #32
      {
    52fa:	9406      	str	r4, [sp, #24]
    52fc:	f011 fd0a 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    5300:	a806      	add	r0, sp, #24
    5302:	9406      	str	r4, [sp, #24]
    5304:	f7fb f91a 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    5308:	4b48      	ldr	r3, [pc, #288]	; (542c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1e0>)
    530a:	4650      	mov	r0, sl
    530c:	930c      	str	r3, [sp, #48]	; 0x30
    530e:	f7fb ff91 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    5312:	a808      	add	r0, sp, #32
    5314:	f012 fa74 	bl	17800 <Fw::Time::~Time()>
    5318:	b02f      	add	sp, #188	; 0xbc
    531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Fw::LogBuffer _logBuff;
    531e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    5322:	4648      	mov	r0, r9
    5324:	f011 f958 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(original_seconds);
    5328:	4631      	mov	r1, r6
    532a:	4648      	mov	r0, r9
    532c:	f7fb f996 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    5330:	2800      	cmp	r0, #0
    5332:	d137      	bne.n	53a4 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x158>
      _status = _logBuff.serialize(original_microseconds);
    5334:	4639      	mov	r1, r7
    5336:	4648      	mov	r0, r9
    5338:	f7fb f990 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    533c:	2800      	cmp	r0, #0
    533e:	d13d      	bne.n	53bc <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x170>
      _status = _logBuff.serialize(original_base);
    5340:	4641      	mov	r1, r8
    5342:	4648      	mov	r0, r9
    5344:	f7fb f906 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
      FW_ASSERT(
    5348:	2800      	cmp	r0, #0
    534a:	d143      	bne.n	53d4 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x188>
      _status = _logBuff.serialize(new_seconds);
    534c:	9938      	ldr	r1, [sp, #224]	; 0xe0
    534e:	4648      	mov	r0, r9
    5350:	f7fb f984 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    5354:	2800      	cmp	r0, #0
    5356:	d149      	bne.n	53ec <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1a0>
      _status = _logBuff.serialize(new_microseconds);
    5358:	9939      	ldr	r1, [sp, #228]	; 0xe4
    535a:	4648      	mov	r0, r9
    535c:	f7fb f97e 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    5360:	2800      	cmp	r0, #0
    5362:	d14f      	bne.n	5404 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1b8>
      _status = _logBuff.serialize(new_base);
    5364:	4659      	mov	r1, fp
    5366:	4648      	mov	r0, r9
    5368:	f7fb f8f4 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
      FW_ASSERT(
    536c:	2800      	cmp	r0, #0
    536e:	d155      	bne.n	541c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1d0>
      {
    5370:	a806      	add	r0, sp, #24
    5372:	f7fb f8dd 	bl	530 <Fw::Serializable::Serializable()>
    5376:	4b31      	ldr	r3, [pc, #196]	; (543c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f0>)
      this->m_logOut_OutputPort[0].invoke(
    5378:	aa06      	add	r2, sp, #24
    537a:	4650      	mov	r0, sl
    537c:	9306      	str	r3, [sp, #24]
        this->e = e1;
    537e:	2305      	movs	r3, #5
    5380:	4629      	mov	r1, r5
    5382:	f8cd 9000 	str.w	r9, [sp]
    5386:	f88d 301c 	strb.w	r3, [sp, #28]
    538a:	4613      	mov	r3, r2
    538c:	aa08      	add	r2, sp, #32
    538e:	f011 faa9 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    5392:	4b2a      	ldr	r3, [pc, #168]	; (543c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f0>)
    5394:	a806      	add	r0, sp, #24
    5396:	9306      	str	r3, [sp, #24]
    5398:	f7fb f8d0 	bl	53c <Fw::Serializable::~Serializable()>
    }
    539c:	4648      	mov	r0, r9
    539e:	f011 f903 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    53a2:	e770      	b.n	5286 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x3a>
      FW_ASSERT(
    53a4:	4601      	mov	r1, r0
    53a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
    53aa:	4825      	ldr	r0, [pc, #148]	; (5440 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f4>)
    53ac:	f7fc f93c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(original_microseconds);
    53b0:	4639      	mov	r1, r7
    53b2:	4648      	mov	r0, r9
    53b4:	f7fb f952 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    53b8:	2800      	cmp	r0, #0
    53ba:	d0c1      	beq.n	5340 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0xf4>
    53bc:	4601      	mov	r1, r0
    53be:	f44f 724b 	mov.w	r2, #812	; 0x32c
    53c2:	481f      	ldr	r0, [pc, #124]	; (5440 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f4>)
    53c4:	f7fc f930 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(original_base);
    53c8:	4641      	mov	r1, r8
    53ca:	4648      	mov	r0, r9
    53cc:	f7fb f8c2 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
      FW_ASSERT(
    53d0:	2800      	cmp	r0, #0
    53d2:	d0bb      	beq.n	534c <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x100>
    53d4:	4601      	mov	r1, r0
    53d6:	f44f 724f 	mov.w	r2, #828	; 0x33c
    53da:	4819      	ldr	r0, [pc, #100]	; (5440 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f4>)
    53dc:	f7fc f924 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(new_seconds);
    53e0:	9938      	ldr	r1, [sp, #224]	; 0xe0
    53e2:	4648      	mov	r0, r9
    53e4:	f7fb f93a 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    53e8:	2800      	cmp	r0, #0
    53ea:	d0b5      	beq.n	5358 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x10c>
    53ec:	4601      	mov	r1, r0
    53ee:	f44f 7253 	mov.w	r2, #844	; 0x34c
    53f2:	4813      	ldr	r0, [pc, #76]	; (5440 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f4>)
    53f4:	f7fc f918 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(new_microseconds);
    53f8:	9939      	ldr	r1, [sp, #228]	; 0xe4
    53fa:	4648      	mov	r0, r9
    53fc:	f7fb f92e 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    5400:	2800      	cmp	r0, #0
    5402:	d0af      	beq.n	5364 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x118>
    5404:	4601      	mov	r1, r0
    5406:	f44f 7257 	mov.w	r2, #860	; 0x35c
    540a:	480d      	ldr	r0, [pc, #52]	; (5440 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f4>)
    540c:	f7fc f90c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(new_base);
    5410:	4659      	mov	r1, fp
    5412:	4648      	mov	r0, r9
    5414:	f7fb f89e 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
      FW_ASSERT(
    5418:	2800      	cmp	r0, #0
    541a:	d0a9      	beq.n	5370 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x124>
    541c:	4601      	mov	r1, r0
    541e:	f44f 725b 	mov.w	r2, #876	; 0x36c
    5422:	4807      	ldr	r0, [pc, #28]	; (5440 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x1f4>)
    5424:	f7fc f900 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    5428:	e7a2      	b.n	5370 <Arduino::ArduinoTimeComponentBase::log_ACTIVITY_HI_TimeUpdate(unsigned long, unsigned long, unsigned char, unsigned long, unsigned long, unsigned char) const+0x124>
    542a:	bf00      	nop
    542c:	20002f60 	.word	0x20002f60
    5430:	20001d2c 	.word	0x20001d2c
    5434:	20002940 	.word	0x20002940
    5438:	2000294c 	.word	0x2000294c
    543c:	20002c08 	.word	0x20002c08
    5440:	20001f44 	.word	0x20001f44

00005444 <Arduino::ArduinoTimeComponentBase::getTime()>:
  {
    5444:	b530      	push	{r4, r5, lr}
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    5446:	f501 7559 	add.w	r5, r1, #868	; 0x364
  {
    544a:	b085      	sub	sp, #20
    544c:	4604      	mov	r4, r0
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    544e:	4628      	mov	r0, r5
    5450:	f012 fcfc 	bl	17e4c <Fw::PortBase::isConnected() const>
    5454:	b180      	cbz	r0, 5478 <Arduino::ArduinoTimeComponentBase::getTime()+0x34>
      Fw::Time _time;
    5456:	4668      	mov	r0, sp
    5458:	f012 fa2a 	bl	178b0 <Fw::Time::Time()>
      this->m_timeCaller_OutputPort[0].invoke(_time);
    545c:	4669      	mov	r1, sp
    545e:	4628      	mov	r0, r5
    5460:	f012 fbac 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
      return _time;
    5464:	4669      	mov	r1, sp
    5466:	4620      	mov	r0, r4
    5468:	f012 fa32 	bl	178d0 <Fw::Time::Time(Fw::Time const&)>
    }
    546c:	4668      	mov	r0, sp
    546e:	f012 f9c7 	bl	17800 <Fw::Time::~Time()>
  }
    5472:	4620      	mov	r0, r4
    5474:	b005      	add	sp, #20
    5476:	bd30      	pop	{r4, r5, pc}
      return Fw::Time(TB_NONE, 0, 0);
    5478:	4603      	mov	r3, r0
    547a:	4602      	mov	r2, r0
    547c:	4601      	mov	r1, r0
    547e:	4620      	mov	r0, r4
    5480:	f012 fa3a 	bl	178f8 <Fw::Time::Time(TimeBase, unsigned long, unsigned long)>
  }
    5484:	4620      	mov	r0, r4
    5486:	b005      	add	sp, #20
    5488:	bd30      	pop	{r4, r5, pc}
    548a:	bf00      	nop

0000548c <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
    548c:	b570      	push	{r4, r5, r6, lr}
    548e:	4605      	mov	r5, r0
    5490:	b088      	sub	sp, #32
    5492:	460e      	mov	r6, r1
    this->trace();
    5494:	f012 fce0 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    5498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    549a:	2b00      	cmp	r3, #0
    549c:	d046      	beq.n	552c <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0xa0>
    FW_ASSERT(this->m_func != nullptr);
    549e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    54a0:	2b00      	cmp	r3, #0
    54a2:	d04a      	beq.n	553a <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0xae>
    _status = _buffer.deserialize(year);
    54a4:	a907      	add	r1, sp, #28
    54a6:	4630      	mov	r0, r6
    54a8:	f7fb fc0a 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    54ac:	4604      	mov	r4, r0
    54ae:	b110      	cbz	r0, 54b6 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
  }
    54b0:	4620      	mov	r0, r4
    54b2:	b008      	add	sp, #32
    54b4:	bd70      	pop	{r4, r5, r6, pc}
    _status = _buffer.deserialize(month);
    54b6:	f10d 0117 	add.w	r1, sp, #23
    54ba:	4630      	mov	r0, r6
    54bc:	f7fb fb8a 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    54c0:	4604      	mov	r4, r0
    54c2:	2800      	cmp	r0, #0
    54c4:	d1f4      	bne.n	54b0 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
    _status = _buffer.deserialize(day);
    54c6:	a906      	add	r1, sp, #24
    54c8:	4630      	mov	r0, r6
    54ca:	f7fb fb83 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    54ce:	4604      	mov	r4, r0
    54d0:	2800      	cmp	r0, #0
    54d2:	d1ed      	bne.n	54b0 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
    _status = _buffer.deserialize(hour);
    54d4:	f10d 0119 	add.w	r1, sp, #25
    54d8:	4630      	mov	r0, r6
    54da:	f7fb fb7b 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    54de:	4604      	mov	r4, r0
    54e0:	2800      	cmp	r0, #0
    54e2:	d1e5      	bne.n	54b0 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
    _status = _buffer.deserialize(minute);
    54e4:	f10d 011a 	add.w	r1, sp, #26
    54e8:	4630      	mov	r0, r6
    54ea:	f7fb fb73 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    54ee:	4604      	mov	r4, r0
    54f0:	2800      	cmp	r0, #0
    54f2:	d1dd      	bne.n	54b0 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
    _status = _buffer.deserialize(second);
    54f4:	f10d 011b 	add.w	r1, sp, #27
    54f8:	4630      	mov	r0, r6
    54fa:	f7fb fb6b 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    54fe:	4604      	mov	r4, r0
    5500:	2800      	cmp	r0, #0
    5502:	d1d5      	bne.n	54b0 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
    this->m_func(this->m_comp, this->m_portNum, year, month, day, hour, minute, second);
    5504:	f89d 101b 	ldrb.w	r1, [sp, #27]
    5508:	f89d 301a 	ldrb.w	r3, [sp, #26]
    550c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    5510:	e9cd 3102 	strd	r3, r1, [sp, #8]
    5514:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5518:	6eee      	ldr	r6, [r5, #108]	; 0x6c
    551a:	e9cd 3200 	strd	r3, r2, [sp]
    551e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5522:	9a07      	ldr	r2, [sp, #28]
    5524:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
    5528:	47b0      	blx	r6
    return Fw::FW_SERIALIZE_OK;
    552a:	e7c1      	b.n	54b0 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
    FW_ASSERT(this->m_comp != nullptr);
    552c:	216a      	movs	r1, #106	; 0x6a
    552e:	4805      	ldr	r0, [pc, #20]	; (5544 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0xb8>)
    5530:	f7fc f86c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    5534:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    5536:	2b00      	cmp	r3, #0
    5538:	d1b4      	bne.n	54a4 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
    553a:	216b      	movs	r1, #107	; 0x6b
    553c:	4801      	ldr	r0, [pc, #4]	; (5544 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0xb8>)
    553e:	f7fc f865 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    5542:	e7af      	b.n	54a4 <Arduino::InputSetTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
    5544:	20001e34 	.word	0x20001e34

00005548 <Arduino::InputSetTimePort::~InputSetTimePort()>:

namespace Arduino {

  //! Input SetTime port
  //! Port allowing a component to set the time
  class InputSetTimePort :
    5548:	4b03      	ldr	r3, [pc, #12]	; (5558 <Arduino::InputSetTimePort::~InputSetTimePort()+0x10>)
    554a:	b510      	push	{r4, lr}
    554c:	4604      	mov	r4, r0
    554e:	6003      	str	r3, [r0, #0]
    5550:	f012 fbb6 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    5554:	4620      	mov	r0, r4
    5556:	bd10      	pop	{r4, pc}
    5558:	20004008 	.word	0x20004008

0000555c <Arduino::InputSetTimePort::~InputSetTimePort()>:
    555c:	4b05      	ldr	r3, [pc, #20]	; (5574 <Arduino::InputSetTimePort::~InputSetTimePort()+0x18>)
    555e:	b510      	push	{r4, lr}
    5560:	4604      	mov	r4, r0
    5562:	6003      	str	r3, [r0, #0]
    5564:	f012 fbac 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    5568:	2170      	movs	r1, #112	; 0x70
    556a:	4620      	mov	r0, r4
    556c:	f013 fbb0 	bl	18cd0 <operator delete(void*, unsigned int)>
    5570:	4620      	mov	r0, r4
    5572:	bd10      	pop	{r4, pc}
    5574:	20004008 	.word	0x20004008

00005578 <Arduino::InputSetTimePort::InputSetTimePort()>:
  InputSetTimePort ::
    5578:	b510      	push	{r4, lr}
    557a:	4604      	mov	r4, r0
      m_func(nullptr)
    557c:	f012 fb90 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    5580:	4a02      	ldr	r2, [pc, #8]	; (558c <Arduino::InputSetTimePort::InputSetTimePort()+0x14>)
    5582:	2300      	movs	r3, #0
  }
    5584:	4620      	mov	r0, r4
      m_func(nullptr)
    5586:	6022      	str	r2, [r4, #0]
    5588:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    558a:	bd10      	pop	{r4, pc}
    558c:	20004008 	.word	0x20004008

00005590 <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))>:
  {
    5590:	b570      	push	{r4, r5, r6, lr}
    5592:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    5594:	460d      	mov	r5, r1
  {
    5596:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    5598:	b121      	cbz	r1, 55a4 <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    559a:	b14e      	cbz	r6, 55b0 <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))+0x20>
    this->m_comp = callComp;
    559c:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    559e:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    55a0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    55a2:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    55a4:	2143      	movs	r1, #67	; 0x43
    55a6:	4806      	ldr	r0, [pc, #24]	; (55c0 <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))+0x30>)
    55a8:	f7fc f830 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    55ac:	2e00      	cmp	r6, #0
    55ae:	d1f5      	bne.n	559c <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))+0xc>
    55b0:	2144      	movs	r1, #68	; 0x44
    55b2:	4803      	ldr	r0, [pc, #12]	; (55c0 <Arduino::InputSetTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char))+0x30>)
    55b4:	f7fc f82a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    55b8:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    55ba:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    55bc:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    55be:	bd70      	pop	{r4, r5, r6, pc}
    55c0:	20001e34 	.word	0x20001e34

000055c4 <Arduino::InputSetTimePort::init()>:
    Fw::InputPortBase::init();
    55c4:	f012 bb94 	b.w	17cf0 <Fw::InputPortBase::init()>

000055c8 <Baremetal::FatalHandler::~FatalHandler()>:
// Construction, initialization, and destruction
// ----------------------------------------------------------------------

FatalHandler ::FatalHandler(const char* const compName) : FatalHandlerComponentBase(compName) {}

FatalHandler ::~FatalHandler() {}
    55c8:	4b03      	ldr	r3, [pc, #12]	; (55d8 <Baremetal::FatalHandler::~FatalHandler()+0x10>)
    55ca:	b510      	push	{r4, lr}
    55cc:	4604      	mov	r4, r0
    55ce:	6003      	str	r3, [r0, #0]
    55d0:	f000 f894 	bl	56fc <Baremetal::FatalHandlerComponentBase::~FatalHandlerComponentBase()>
    55d4:	4620      	mov	r0, r4
    55d6:	bd10      	pop	{r4, pc}
    55d8:	200040c4 	.word	0x200040c4

000055dc <Baremetal::FatalHandler::~FatalHandler()>:
    55dc:	4b05      	ldr	r3, [pc, #20]	; (55f4 <Baremetal::FatalHandler::~FatalHandler()+0x18>)
    55de:	b510      	push	{r4, lr}
    55e0:	4604      	mov	r4, r0
    55e2:	6003      	str	r3, [r0, #0]
    55e4:	f000 f88a 	bl	56fc <Baremetal::FatalHandlerComponentBase::~FatalHandlerComponentBase()>
    55e8:	21d4      	movs	r1, #212	; 0xd4
    55ea:	4620      	mov	r0, r4
    55ec:	f013 fb70 	bl	18cd0 <operator delete(void*, unsigned int)>
    55f0:	4620      	mov	r0, r4
    55f2:	bd10      	pop	{r4, pc}
    55f4:	200040c4 	.word	0x200040c4

000055f8 <Baremetal::FatalHandler::FatalReceive_handler(long, unsigned long)>:
// Handler implementations for user-defined typed input ports
// ----------------------------------------------------------------------

void FatalHandler::FatalReceive_handler(const NATIVE_INT_TYPE portNum, FwEventIdType Id) {
    // for **nix, delay then exit with error code
    Fw::Logger::log("FATAL %" PRI_FwEventIdType "handled.\n", Id);
    55f8:	4802      	ldr	r0, [pc, #8]	; (5604 <Baremetal::FatalHandler::FatalReceive_handler(long, unsigned long)+0xc>)
    55fa:	4611      	mov	r1, r2
void FatalHandler::FatalReceive_handler(const NATIVE_INT_TYPE portNum, FwEventIdType Id) {
    55fc:	b508      	push	{r3, lr}
    Fw::Logger::log("FATAL %" PRI_FwEventIdType "handled.\n", Id);
    55fe:	f7fc f863 	bl	16c8 <Fw::Logger::log(char const*, ...)>
    while (true) {}  // Returning might be bad
    5602:	e7fe      	b.n	5602 <Baremetal::FatalHandler::FatalReceive_handler(long, unsigned long)+0xa>
    5604:	20002168 	.word	0x20002168

00005608 <Baremetal::FatalHandler::FatalHandler(char const*)>:
FatalHandler ::FatalHandler(const char* const compName) : FatalHandlerComponentBase(compName) {}
    5608:	b510      	push	{r4, lr}
    560a:	4604      	mov	r4, r0
    560c:	f000 f868 	bl	56e0 <Baremetal::FatalHandlerComponentBase::FatalHandlerComponentBase(char const*)>
    5610:	4b01      	ldr	r3, [pc, #4]	; (5618 <Baremetal::FatalHandler::FatalHandler(char const*)+0x10>)
    5612:	4620      	mov	r0, r4
    5614:	6023      	str	r3, [r4, #0]
    5616:	bd10      	pop	{r4, pc}
    5618:	200040c4 	.word	0x200040c4

0000561c <Baremetal::FatalHandlerComponentBase::m_p_FatalReceive_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_FatalReceive_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwEventIdType Id
    )
  {
    561c:	b570      	push	{r4, r5, r6, lr}
    561e:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    5620:	4604      	mov	r4, r0
  {
    5622:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    5624:	b170      	cbz	r0, 5644 <Baremetal::FatalHandlerComponentBase::m_p_FatalReceive_in(Fw::PassiveComponentBase*, long, unsigned long)+0x28>
    FW_ASSERT(
    5626:	2d00      	cmp	r5, #0
    5628:	dd04      	ble.n	5634 <Baremetal::FatalHandlerComponentBase::m_p_FatalReceive_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    562a:	226a      	movs	r2, #106	; 0x6a
    562c:	4629      	mov	r1, r5
    562e:	4808      	ldr	r0, [pc, #32]	; (5650 <Baremetal::FatalHandlerComponentBase::m_p_FatalReceive_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    5630:	f7fb fffa 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->FatalReceive_handler(
    5634:	6823      	ldr	r3, [r4, #0]
    5636:	4632      	mov	r2, r6
    5638:	4629      	mov	r1, r5
    563a:	4620      	mov	r0, r4
    563c:	691b      	ldr	r3, [r3, #16]
    FatalHandlerComponentBase* compPtr = static_cast<FatalHandlerComponentBase*>(callComp);
    compPtr->FatalReceive_handlerBase(
      portNum,
      Id
    );
  }
    563e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->FatalReceive_handler(
    5642:	4718      	bx	r3
    FW_ASSERT(callComp);
    5644:	2181      	movs	r1, #129	; 0x81
    5646:	4802      	ldr	r0, [pc, #8]	; (5650 <Baremetal::FatalHandlerComponentBase::m_p_FatalReceive_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    5648:	f7fb ffe0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    564c:	e7eb      	b.n	5626 <Baremetal::FatalHandlerComponentBase::m_p_FatalReceive_in(Fw::PassiveComponentBase*, long, unsigned long)+0xa>
    564e:	bf00      	nop
    5650:	2000217c 	.word	0x2000217c

00005654 <Baremetal::FatalHandlerComponentBase::init(long)>:
  {
    5654:	b570      	push	{r4, r5, r6, lr}
    5656:	4604      	mov	r4, r0
    5658:	b096      	sub	sp, #88	; 0x58
    Fw::PassiveComponentBase::init(instance);
    565a:	f00c fc41 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
    ObjectName() : StringBase() { *this = ""; }
    565e:	4e14      	ldr	r6, [pc, #80]	; (56b0 <Baremetal::FatalHandlerComponentBase::init(long)+0x5c>)
      this->m_FatalReceive_InputPort[port].init();
    5660:	f104 0564 	add.w	r5, r4, #100	; 0x64
    5664:	4628      	mov	r0, r5
    5666:	f002 f885 	bl	7774 <Svc::InputFatalEventPort::init()>
      this->m_FatalReceive_InputPort[port].addCallComp(
    566a:	4a12      	ldr	r2, [pc, #72]	; (56b4 <Baremetal::FatalHandlerComponentBase::init(long)+0x60>)
    566c:	4621      	mov	r1, r4
    566e:	4628      	mov	r0, r5
    5670:	f001 ffe4 	bl	763c <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_FatalReceive_InputPort[port].setPortNum(port);
    5674:	2100      	movs	r1, #0
    5676:	4628      	mov	r0, r5
    5678:	f012 fb2c 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    567c:	4668      	mov	r0, sp
    567e:	f7fb fdcf 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5682:	490d      	ldr	r1, [pc, #52]	; (56b8 <Baremetal::FatalHandlerComponentBase::init(long)+0x64>)
    5684:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5686:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    5688:	f7fb fe32 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    568c:	2300      	movs	r3, #0
    568e:	f104 0208 	add.w	r2, r4, #8
    5692:	490a      	ldr	r1, [pc, #40]	; (56bc <Baremetal::FatalHandlerComponentBase::init(long)+0x68>)
    5694:	4668      	mov	r0, sp
    5696:	f7fb fdf9 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_FatalReceive_InputPort[port].setObjName(portName.toChar());
    569a:	4628      	mov	r0, r5
    569c:	a901      	add	r1, sp, #4
    569e:	f012 fc7f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    56a2:	4668      	mov	r0, sp
    56a4:	9600      	str	r6, [sp, #0]
    56a6:	f7fb fdc5 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    56aa:	b016      	add	sp, #88	; 0x58
    56ac:	bd70      	pop	{r4, r5, r6, pc}
    56ae:	bf00      	nop
    56b0:	20002b80 	.word	0x20002b80
    56b4:	0000561d 	.word	0x0000561d
    56b8:	20001d2c 	.word	0x20001d2c
    56bc:	200021dc 	.word	0x200021dc

000056c0 <Baremetal::FatalHandlerComponentBase::get_FatalReceive_InputPort(long)>:
  {
    56c0:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    56c2:	1e0c      	subs	r4, r1, #0
  {
    56c4:	4605      	mov	r5, r0
    FW_ASSERT(
    56c6:	dd03      	ble.n	56d0 <Baremetal::FatalHandlerComponentBase::get_FatalReceive_InputPort(long)+0x10>
    56c8:	223a      	movs	r2, #58	; 0x3a
    56ca:	4804      	ldr	r0, [pc, #16]	; (56dc <Baremetal::FatalHandlerComponentBase::get_FatalReceive_InputPort(long)+0x1c>)
    56cc:	f7fb ffac 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_FatalReceive_InputPort[portNum];
    56d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    56d4:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    56d8:	3064      	adds	r0, #100	; 0x64
    56da:	bd38      	pop	{r3, r4, r5, pc}
    56dc:	2000217c 	.word	0x2000217c

000056e0 <Baremetal::FatalHandlerComponentBase::FatalHandlerComponentBase(char const*)>:
  FatalHandlerComponentBase ::
    56e0:	b510      	push	{r4, lr}
    56e2:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    56e4:	f00c fbee 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    56e8:	4b03      	ldr	r3, [pc, #12]	; (56f8 <Baremetal::FatalHandlerComponentBase::FatalHandlerComponentBase(char const*)+0x18>)
    56ea:	4620      	mov	r0, r4
    56ec:	f840 3b64 	str.w	r3, [r0], #100
    56f0:	f001 ff98 	bl	7624 <Svc::InputFatalEventPort::InputFatalEventPort()>
  }
    56f4:	4620      	mov	r0, r4
    56f6:	bd10      	pop	{r4, pc}
    56f8:	200040e0 	.word	0x200040e0

000056fc <Baremetal::FatalHandlerComponentBase::~FatalHandlerComponentBase()>:
  FatalHandlerComponentBase ::
    56fc:	b510      	push	{r4, lr}
    ~FatalHandlerComponentBase()
    56fe:	4b06      	ldr	r3, [pc, #24]	; (5718 <Baremetal::FatalHandlerComponentBase::~FatalHandlerComponentBase()+0x1c>)
  FatalHandlerComponentBase ::
    5700:	4604      	mov	r4, r0
    ~FatalHandlerComponentBase()
    5702:	f840 3b64 	str.w	r3, [r0], #100
    5706:	6e63      	ldr	r3, [r4, #100]	; 0x64
    5708:	685b      	ldr	r3, [r3, #4]
    570a:	4798      	blx	r3
    570c:	4620      	mov	r0, r4
    570e:	f00c fb81 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    5712:	4620      	mov	r0, r4
    5714:	bd10      	pop	{r4, pc}
    5716:	bf00      	nop
    5718:	200040e0 	.word	0x200040e0

0000571c <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)>:
    }

    ActiveLoggerImpl::~ActiveLoggerImpl() {
    }

    void ActiveLoggerImpl::LogRecv_handler(NATIVE_INT_TYPE portNum, FwEventIdType id, Fw::Time &timeTag, const Fw::LogSeverity& severity, Fw::LogBuffer &args) {
    571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5720:	b082      	sub	sp, #8
    5722:	4605      	mov	r5, r0
    5724:	461e      	mov	r6, r3

        // make sure ID is not zero. Zero is reserved for ID filter.
        FW_ASSERT(id != 0);
    5726:	4614      	mov	r4, r2
    void ActiveLoggerImpl::LogRecv_handler(NATIVE_INT_TYPE portNum, FwEventIdType id, Fw::Time &timeTag, const Fw::LogSeverity& severity, Fw::LogBuffer &args) {
    5728:	9f08      	ldr	r7, [sp, #32]
    572a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
        FW_ASSERT(id != 0);
    572e:	b33a      	cbz	r2, 5780 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x64>

        switch (severity.e) {
    5730:	7939      	ldrb	r1, [r7, #4]
    5732:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    5736:	f1bc 0f06 	cmp.w	ip, #6
    573a:	d84d      	bhi.n	57d8 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0xbc>
    573c:	e8df f00c 	tbb	[pc, ip]
    5740:	2f2a2512 	.word	0x2f2a2512
    5744:	3934      	.short	0x3934
    5746:	04          	.byte	0x04
    5747:	00          	.byte	0x00
                if (this->m_filterState[FilterSeverity::ACTIVITY_LO].enabled == Enabled::DISABLED) {
                    return;
                }
                break;
            case Fw::LogSeverity::DIAGNOSTIC:
                if (this->m_filterState[FilterSeverity::DIAGNOSTIC].enabled == Enabled::DISABLED) {
    5748:	f895 3770 	ldrb.w	r3, [r5, #1904]	; 0x770
    574c:	2b01      	cmp	r3, #1
    574e:	d014      	beq.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
        }

        // check ID filters
        for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
            if (
              (m_filteredIDs[entry] == id) &&
    5750:	f8d5 38a0 	ldr.w	r3, [r5, #2208]	; 0x8a0
    5754:	429c      	cmp	r4, r3
    5756:	d010      	beq.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
    5758:	f8d5 38a4 	ldr.w	r3, [r5, #2212]	; 0x8a4
    575c:	42a3      	cmp	r3, r4
    575e:	d101      	bne.n	5764 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x48>
    5760:	2901      	cmp	r1, #1
    5762:	d10a      	bne.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
                return;
            }
        }

        // send event to the logger thread
        this->loqQueue_internalInterfaceInvoke(id,timeTag,severity,args);
    5764:	463b      	mov	r3, r7
    5766:	4632      	mov	r2, r6
    5768:	4621      	mov	r1, r4
    576a:	4628      	mov	r0, r5
    576c:	f8cd 8000 	str.w	r8, [sp]
    5770:	f000 fe28 	bl	63c4 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)>

        // if connected, announce the FATAL
        if (Fw::LogSeverity::FATAL == severity.e) {
    5774:	793b      	ldrb	r3, [r7, #4]
    5776:	2b01      	cmp	r3, #1
    5778:	d020      	beq.n	57bc <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0xa0>
            if (this->isConnected_FatalAnnounce_OutputPort(0)) {
                this->FatalAnnounce_out(0,id);
            }
        }
    }
    577a:	b002      	add	sp, #8
    577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FW_ASSERT(id != 0);
    5780:	212e      	movs	r1, #46	; 0x2e
    5782:	4819      	ldr	r0, [pc, #100]	; (57e8 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0xcc>)
    5784:	f7fb ff42 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    5788:	e7d2      	b.n	5730 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x14>
                if (this->m_filterState[FilterSeverity::WARNING_HI].enabled == Enabled::DISABLED) {
    578a:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
    578e:	2b01      	cmp	r3, #1
    5790:	d1de      	bne.n	5750 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x34>
    5792:	e7f2      	b.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
                if (this->m_filterState[FilterSeverity::WARNING_LO].enabled == Enabled::DISABLED) {
    5794:	f895 3750 	ldrb.w	r3, [r5, #1872]	; 0x750
    5798:	2b01      	cmp	r3, #1
    579a:	d1d9      	bne.n	5750 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x34>
    579c:	e7ed      	b.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
                if (this->m_filterState[FilterSeverity::COMMAND].enabled == Enabled::DISABLED) {
    579e:	f895 3758 	ldrb.w	r3, [r5, #1880]	; 0x758
    57a2:	2b01      	cmp	r3, #1
    57a4:	d1d4      	bne.n	5750 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x34>
    57a6:	e7e8      	b.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
                if (this->m_filterState[FilterSeverity::ACTIVITY_HI].enabled == Enabled::DISABLED) {
    57a8:	f895 3760 	ldrb.w	r3, [r5, #1888]	; 0x760
    57ac:	2b01      	cmp	r3, #1
    57ae:	d1cf      	bne.n	5750 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x34>
    57b0:	e7e3      	b.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
                if (this->m_filterState[FilterSeverity::ACTIVITY_LO].enabled == Enabled::DISABLED) {
    57b2:	f895 3768 	ldrb.w	r3, [r5, #1896]	; 0x768
    57b6:	2b01      	cmp	r3, #1
    57b8:	d1ca      	bne.n	5750 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x34>
    57ba:	e7de      	b.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
            if (this->isConnected_FatalAnnounce_OutputPort(0)) {
    57bc:	2100      	movs	r1, #0
    57be:	4628      	mov	r0, r5
    57c0:	f000 fd14 	bl	61ec <Svc::ActiveLoggerComponentBase::isConnected_FatalAnnounce_OutputPort(long)>
    57c4:	2800      	cmp	r0, #0
    57c6:	d0d8      	beq.n	577a <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x5e>
                this->FatalAnnounce_out(0,id);
    57c8:	4622      	mov	r2, r4
    57ca:	2100      	movs	r1, #0
    57cc:	4628      	mov	r0, r5
    }
    57ce:	b002      	add	sp, #8
    57d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                this->FatalAnnounce_out(0,id);
    57d4:	f000 bdb2 	b.w	633c <Svc::ActiveLoggerComponentBase::FatalAnnounce_out(long, unsigned long)>
                FW_ASSERT(0,static_cast<NATIVE_INT_TYPE>(severity.e));
    57d8:	2252      	movs	r2, #82	; 0x52
    57da:	4803      	ldr	r0, [pc, #12]	; (57e8 <Svc::ActiveLoggerImpl::LogRecv_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0xcc>)
    }
    57dc:	b002      	add	sp, #8
    57de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                FW_ASSERT(0,static_cast<NATIVE_INT_TYPE>(severity.e));
    57e2:	f7fb bf21 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    57e6:	bf00      	nop
    57e8:	200011ec 	.word	0x200011ec

000057ec <Svc::ActiveLoggerImpl::SET_EVENT_FILTER_cmdHandler(unsigned long, unsigned long, Svc::ActiveLogger_FilterSeverity, Svc::ActiveLogger_Enabled)>:
        if (this->isConnected_PktSend_OutputPort(0)) {
            this->PktSend_out(0, this->m_comBuffer,0);
        }
    }

    void ActiveLoggerImpl::SET_EVENT_FILTER_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, FilterSeverity filterLevel, Enabled filterEnable) {
    57ec:	b570      	push	{r4, r5, r6, lr}
    57ee:	4604      	mov	r4, r0
        this->m_filterState[filterLevel.e].enabled = filterEnable;
    57f0:	7918      	ldrb	r0, [r3, #4]
    void ActiveLoggerImpl::SET_EVENT_FILTER_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, FilterSeverity filterLevel, Enabled filterEnable) {
    57f2:	b084      	sub	sp, #16
    57f4:	460d      	mov	r5, r1
        this->m_filterState[filterLevel.e].enabled = filterEnable;
    57f6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
      {
    57fa:	4e0d      	ldr	r6, [pc, #52]	; (5830 <Svc::ActiveLoggerImpl::SET_EVENT_FILTER_cmdHandler(unsigned long, unsigned long, Svc::ActiveLogger_FilterSeverity, Svc::ActiveLogger_Enabled)+0x44>)
    57fc:	9908      	ldr	r1, [sp, #32]
    57fe:	f200 7044 	addw	r0, r0, #1860	; 0x744
    void ActiveLoggerImpl::SET_EVENT_FILTER_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, FilterSeverity filterLevel, Enabled filterEnable) {
    5802:	9201      	str	r2, [sp, #4]
        this->m_filterState[filterLevel.e].enabled = filterEnable;
    5804:	f001 fe0c 	bl	7420 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled const&)>
    5808:	a802      	add	r0, sp, #8
    580a:	f7fa fe91 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    580e:	2300      	movs	r3, #0
        this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    5810:	4620      	mov	r0, r4
    5812:	9a01      	ldr	r2, [sp, #4]
    5814:	4629      	mov	r1, r5
    5816:	f88d 300c 	strb.w	r3, [sp, #12]
    581a:	ab02      	add	r3, sp, #8
      {
    581c:	9602      	str	r6, [sp, #8]
    581e:	f000 fe6d 	bl	64fc <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    5822:	a802      	add	r0, sp, #8
    5824:	9602      	str	r6, [sp, #8]
    5826:	f7fa fe89 	bl	53c <Fw::Serializable::~Serializable()>
    }
    582a:	b004      	add	sp, #16
    582c:	bd70      	pop	{r4, r5, r6, pc}
    582e:	bf00      	nop
    5830:	20002bec 	.word	0x20002bec

00005834 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)>:
    void ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(
            FwOpcodeType opCode, //!< The opcode
            U32 cmdSeq, //!< The command sequence number
            U32 ID,
            Enabled idEnabled //!< ID filter state
        ) {
    5834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5838:	b084      	sub	sp, #16
    583a:	461d      	mov	r5, r3
    583c:	4604      	mov	r4, r0
    583e:	460e      	mov	r6, r1
    5840:	9b0a      	ldr	r3, [sp, #40]	; 0x28

        if (Enabled::ENABLED == idEnabled.e) { // add ID
    5842:	791b      	ldrb	r3, [r3, #4]
    5844:	b163      	cbz	r3, 5860 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0x2c>
            this->log_WARNING_LO_ID_FILTER_LIST_FULL(ID);
            this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::EXECUTION_ERROR);
        } else { // remove ID
            // search list for existing entry
            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
                if (this->m_filteredIDs[entry] == ID) {
    5846:	f8d0 38a0 	ldr.w	r3, [r0, #2208]	; 0x8a0
    584a:	429d      	cmp	r5, r3
    584c:	d047      	beq.n	58de <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xaa>
    584e:	f8d0 38a4 	ldr.w	r3, [r0, #2212]	; 0x8a4
    5852:	429d      	cmp	r5, r3
    5854:	d06a      	beq.n	592c <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xf8>
                    this->log_ACTIVITY_HI_ID_FILTER_REMOVED(ID);
                    return;
                }
            }
            // if it gets here, wasn't found
            this->log_WARNING_LO_ID_FILTER_NOT_FOUND(ID);
    5856:	4629      	mov	r1, r5
    5858:	9201      	str	r2, [sp, #4]
    585a:	f001 fae7 	bl	6e2c <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const>
      CmdResponse(
    585e:	e00f      	b.n	5880 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0x4c>
                if (this->m_filteredIDs[entry] == ID) {
    5860:	f8d0 38a0 	ldr.w	r3, [r0, #2208]	; 0x8a0
    5864:	429d      	cmp	r5, r3
    5866:	d020      	beq.n	58aa <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0x76>
    5868:	f8d0 18a4 	ldr.w	r1, [r0, #2212]	; 0x8a4
    586c:	428d      	cmp	r5, r1
    586e:	d01c      	beq.n	58aa <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0x76>
                if (this->m_filteredIDs[entry] == 0) {
    5870:	2b00      	cmp	r3, #0
    5872:	d055      	beq.n	5920 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xec>
    5874:	2900      	cmp	r1, #0
    5876:	d052      	beq.n	591e <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xea>
            this->log_WARNING_LO_ID_FILTER_LIST_FULL(ID);
    5878:	4629      	mov	r1, r5
    587a:	9201      	str	r2, [sp, #4]
    587c:	f001 f9a2 	bl	6bc4 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const>
      {
    5880:	a802      	add	r0, sp, #8
    5882:	4d2b      	ldr	r5, [pc, #172]	; (5930 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xfc>)
    5884:	f7fa fe54 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    5888:	2304      	movs	r3, #4
            this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::EXECUTION_ERROR);
    588a:	4620      	mov	r0, r4
    588c:	9a01      	ldr	r2, [sp, #4]
    588e:	4631      	mov	r1, r6
    5890:	f88d 300c 	strb.w	r3, [sp, #12]
    5894:	ab02      	add	r3, sp, #8
      {
    5896:	9502      	str	r5, [sp, #8]
    5898:	f000 fe30 	bl	64fc <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    589c:	a802      	add	r0, sp, #8
    589e:	9502      	str	r5, [sp, #8]
    58a0:	f7fa fe4c 	bl	53c <Fw::Serializable::~Serializable()>
            this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::EXECUTION_ERROR);
        }

    }
    58a4:	b004      	add	sp, #16
    58a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58aa:	9201      	str	r2, [sp, #4]
      {
    58ac:	a802      	add	r0, sp, #8
    58ae:	4f20      	ldr	r7, [pc, #128]	; (5930 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xfc>)
    58b0:	f7fa fe3e 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    58b4:	2300      	movs	r3, #0
                    this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    58b6:	4631      	mov	r1, r6
    58b8:	9a01      	ldr	r2, [sp, #4]
    58ba:	4620      	mov	r0, r4
    58bc:	f88d 300c 	strb.w	r3, [sp, #12]
    58c0:	ab02      	add	r3, sp, #8
      {
    58c2:	9702      	str	r7, [sp, #8]
    58c4:	f000 fe1a 	bl	64fc <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    58c8:	a802      	add	r0, sp, #8
    58ca:	9702      	str	r7, [sp, #8]
    58cc:	f7fa fe36 	bl	53c <Fw::Serializable::~Serializable()>
                    this->log_ACTIVITY_HI_ID_FILTER_ENABLED(ID);
    58d0:	4629      	mov	r1, r5
    58d2:	4620      	mov	r0, r4
    }
    58d4:	b004      	add	sp, #16
    58d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    this->log_ACTIVITY_HI_ID_FILTER_ENABLED(ID);
    58da:	f001 b8d9 	b.w	6a90 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const>
            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
    58de:	2300      	movs	r3, #0
                    this->m_filteredIDs[entry] = 0; // zero entry
    58e0:	f503 730a 	add.w	r3, r3, #552	; 0x228
    58e4:	f04f 0800 	mov.w	r8, #0
      {
    58e8:	4f11      	ldr	r7, [pc, #68]	; (5930 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xfc>)
    58ea:	a802      	add	r0, sp, #8
    58ec:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    58f0:	9201      	str	r2, [sp, #4]
    58f2:	f7fa fe1d 	bl	530 <Fw::Serializable::Serializable()>
                    this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    58f6:	4631      	mov	r1, r6
    58f8:	9a01      	ldr	r2, [sp, #4]
    58fa:	ab02      	add	r3, sp, #8
    58fc:	4620      	mov	r0, r4
        this->e = e1;
    58fe:	f88d 800c 	strb.w	r8, [sp, #12]
      {
    5902:	9702      	str	r7, [sp, #8]
    5904:	f000 fdfa 	bl	64fc <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    5908:	a802      	add	r0, sp, #8
    590a:	9702      	str	r7, [sp, #8]
    590c:	f7fa fe16 	bl	53c <Fw::Serializable::~Serializable()>
                    this->log_ACTIVITY_HI_ID_FILTER_REMOVED(ID);
    5910:	4629      	mov	r1, r5
    5912:	4620      	mov	r0, r4
    }
    5914:	b004      	add	sp, #16
    5916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    this->log_ACTIVITY_HI_ID_FILTER_REMOVED(ID);
    591a:	f001 b9ed 	b.w	6cf8 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const>
            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
    591e:	2301      	movs	r3, #1
                    this->m_filteredIDs[entry] = ID;
    5920:	f503 730a 	add.w	r3, r3, #552	; 0x228
    5924:	9201      	str	r2, [sp, #4]
    5926:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    592a:	e7bf      	b.n	58ac <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0x78>
            for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
    592c:	2301      	movs	r3, #1
    592e:	e7d7      	b.n	58e0 <Svc::ActiveLoggerImpl::SET_ID_FILTER_cmdHandler(unsigned long, unsigned long, unsigned long, Svc::ActiveLogger_Enabled)+0xac>
    5930:	20002bec 	.word	0x20002bec

00005934 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)>:

    void ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(
            FwOpcodeType opCode, //!< The opcode
            U32 cmdSeq //!< The command sequence number
        ) {
    5934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

        // first, iterate through severity filters
        for (NATIVE_UINT_TYPE filter = 0; filter < FilterSeverity::NUM_CONSTANTS; filter++) {
    5938:	2400      	movs	r4, #0
        ) {
    593a:	b085      	sub	sp, #20
    593c:	4606      	mov	r6, r0
    593e:	4688      	mov	r8, r1
    5940:	4691      	mov	r9, r2
    5942:	4d25      	ldr	r5, [pc, #148]	; (59d8 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0xa4>)
    5944:	f500 67e9 	add.w	r7, r0, #1864	; 0x748

      //! Constructor (user-provided value)
      ActiveLogger_FilterSeverity(
          const T e1 //!< The raw enum value
      )
      {
    5948:	4668      	mov	r0, sp
    594a:	f7fa fdf1 	bl	530 <Fw::Serializable::Serializable()>

      //! Copy constructor
      ActiveLogger_FilterSeverity(
          const ActiveLogger_FilterSeverity& obj //!< The source object
      )
      {
    594e:	a802      	add	r0, sp, #8
        this->e = e1;
    5950:	f88d 4004 	strb.w	r4, [sp, #4]
      {
    5954:	9500      	str	r5, [sp, #0]
      {
    5956:	f7fa fdeb 	bl	530 <Fw::Serializable::Serializable()>
           FilterSeverity filterState(static_cast<FilterSeverity::t>(filter));
           this->log_ACTIVITY_LO_SEVERITY_FILTER_STATE(
    595a:	f817 2034 	ldrb.w	r2, [r7, r4, lsl #3]
    595e:	a902      	add	r1, sp, #8
        this->e = obj.e;
    5960:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5964:	4630      	mov	r0, r6
    5966:	fab2 f282 	clz	r2, r2
        for (NATIVE_UINT_TYPE filter = 0; filter < FilterSeverity::NUM_CONSTANTS; filter++) {
    596a:	3401      	adds	r4, #1
    596c:	f88d 300c 	strb.w	r3, [sp, #12]
           this->log_ACTIVITY_LO_SEVERITY_FILTER_STATE(
    5970:	0952      	lsrs	r2, r2, #5
      {
    5972:	9502      	str	r5, [sp, #8]
    5974:	f000 ffcc 	bl	6910 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const>
  class ActiveLogger_FilterSeverity :
    5978:	a802      	add	r0, sp, #8
    597a:	9502      	str	r5, [sp, #8]
    597c:	f7fa fdde 	bl	53c <Fw::Serializable::~Serializable()>
    5980:	4668      	mov	r0, sp
    5982:	9500      	str	r5, [sp, #0]
    5984:	f7fa fdda 	bl	53c <Fw::Serializable::~Serializable()>
        for (NATIVE_UINT_TYPE filter = 0; filter < FilterSeverity::NUM_CONSTANTS; filter++) {
    5988:	2c06      	cmp	r4, #6
    598a:	d1dd      	bne.n	5948 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0x14>
           );
        }

        // iterate through ID filter
        for (NATIVE_INT_TYPE entry = 0; entry < TELEM_ID_FILTER_SIZE; entry++) {
            if (this->m_filteredIDs[entry] != 0) {
    598c:	f8d6 18a0 	ldr.w	r1, [r6, #2208]	; 0x8a0
    5990:	b9b9      	cbnz	r1, 59c2 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0x8e>
    5992:	f8d6 18a4 	ldr.w	r1, [r6, #2212]	; 0x8a4
    5996:	b9d9      	cbnz	r1, 59d0 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0x9c>
      {
    5998:	a802      	add	r0, sp, #8
    599a:	4c10      	ldr	r4, [pc, #64]	; (59dc <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0xa8>)
    599c:	f7fa fdc8 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    59a0:	2300      	movs	r3, #0
                this->log_ACTIVITY_HI_ID_FILTER_ENABLED(this->m_filteredIDs[entry]);
            }
        }

        this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    59a2:	4630      	mov	r0, r6
    59a4:	464a      	mov	r2, r9
    59a6:	4641      	mov	r1, r8
    59a8:	f88d 300c 	strb.w	r3, [sp, #12]
    59ac:	ab02      	add	r3, sp, #8
      {
    59ae:	9402      	str	r4, [sp, #8]
    59b0:	f000 fda4 	bl	64fc <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    59b4:	a802      	add	r0, sp, #8
    59b6:	9402      	str	r4, [sp, #8]
    59b8:	f7fa fdc0 	bl	53c <Fw::Serializable::~Serializable()>
    }
    59bc:	b005      	add	sp, #20
    59be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                this->log_ACTIVITY_HI_ID_FILTER_ENABLED(this->m_filteredIDs[entry]);
    59c2:	4630      	mov	r0, r6
    59c4:	f001 f864 	bl	6a90 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const>
            if (this->m_filteredIDs[entry] != 0) {
    59c8:	f8d6 18a4 	ldr.w	r1, [r6, #2212]	; 0x8a4
    59cc:	2900      	cmp	r1, #0
    59ce:	d0e3      	beq.n	5998 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0x64>
                this->log_ACTIVITY_HI_ID_FILTER_ENABLED(this->m_filteredIDs[entry]);
    59d0:	4630      	mov	r0, r6
    59d2:	f001 f85d 	bl	6a90 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const>
    59d6:	e7df      	b.n	5998 <Svc::ActiveLoggerImpl::DUMP_FILTER_STATE_cmdHandler(unsigned long, unsigned long)+0x64>
    59d8:	20003da0 	.word	0x20003da0
    59dc:	20002bec 	.word	0x20002bec

000059e0 <Svc::ActiveLoggerImpl::pingIn_handler(long, unsigned long)>:
          const NATIVE_INT_TYPE portNum,
          U32 key
      )
    {
        // return key
        this->pingOut_out(0,key);
    59e0:	2100      	movs	r1, #0
    59e2:	f000 bcd9 	b.w	6398 <Svc::ActiveLoggerComponentBase::pingOut_out(long, unsigned long)>
    59e6:	bf00      	nop

000059e8 <Svc::ActiveLoggerImpl::ActiveLoggerImpl(char const*)>:
    ActiveLoggerImpl::ActiveLoggerImpl(const char* name) : 
    59e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59ec:	4605      	mov	r5, r0
    59ee:	f8df 8084 	ldr.w	r8, [pc, #132]	; 5a74 <Svc::ActiveLoggerImpl::ActiveLoggerImpl(char const*)+0x8c>
        ActiveLoggerComponentBase(name)
    59f2:	f000 fb77 	bl	60e4 <Svc::ActiveLoggerComponentBase::ActiveLoggerComponentBase(char const*)>
      // ----------------------------------------------------------------------

      //! Constructor (default value of ENABLED)
      ActiveLogger_Enabled()
      {
        this->e = ENABLED;
    59f6:	2600      	movs	r6, #0
    59f8:	f205 7944 	addw	r9, r5, #1860	; 0x744
    59fc:	4b1c      	ldr	r3, [pc, #112]	; (5a70 <Svc::ActiveLoggerImpl::ActiveLoggerImpl(char const*)+0x88>)
    59fe:	f205 7774 	addw	r7, r5, #1908	; 0x774
    5a02:	464c      	mov	r4, r9
    5a04:	602b      	str	r3, [r5, #0]
      {
    5a06:	4620      	mov	r0, r4
    5a08:	3408      	adds	r4, #8
    5a0a:	f7fa fd91 	bl	530 <Fw::Serializable::Serializable()>
    5a0e:	42bc      	cmp	r4, r7
    5a10:	f844 8c08 	str.w	r8, [r4, #-8]
        this->e = ENABLED;
    5a14:	f804 6c04 	strb.w	r6, [r4, #-4]
    5a18:	d1f5      	bne.n	5a06 <Svc::ActiveLoggerImpl::ActiveLoggerImpl(char const*)+0x1e>
    5a1a:	4620      	mov	r0, r4
    5a1c:	f010 fe00 	bl	16620 <Fw::LogPacket::LogPacket()>
    5a20:	f605 0014 	addw	r0, r5, #2068	; 0x814
    5a24:	f011 fda6 	bl	17574 <Fw::ComBuffer::ComBuffer()>
                FILTER_WARNING_HI_DEFAULT?Enabled::ENABLED:Enabled::DISABLED;
    5a28:	2100      	movs	r1, #0
    5a2a:	4648      	mov	r0, r9
    5a2c:	f001 fcfc 	bl	7428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>
                FILTER_WARNING_LO_DEFAULT?Enabled::ENABLED:Enabled::DISABLED;
    5a30:	2100      	movs	r1, #0
    5a32:	f205 704c 	addw	r0, r5, #1868	; 0x74c
    5a36:	f001 fcf7 	bl	7428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>
                FILTER_COMMAND_DEFAULT?Enabled::ENABLED:Enabled::DISABLED;
    5a3a:	2100      	movs	r1, #0
    5a3c:	f205 7054 	addw	r0, r5, #1876	; 0x754
    5a40:	f001 fcf2 	bl	7428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>
                FILTER_ACTIVITY_HI_DEFAULT?Enabled::ENABLED:Enabled::DISABLED;
    5a44:	2100      	movs	r1, #0
    5a46:	f205 705c 	addw	r0, r5, #1884	; 0x75c
    5a4a:	f001 fced 	bl	7428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>
                FILTER_ACTIVITY_LO_DEFAULT?Enabled::ENABLED:Enabled::DISABLED;
    5a4e:	2100      	movs	r1, #0
    5a50:	f205 7064 	addw	r0, r5, #1892	; 0x764
    5a54:	f001 fce8 	bl	7428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>
                FILTER_DIAGNOSTIC_DEFAULT?Enabled::ENABLED:Enabled::DISABLED;
    5a58:	2101      	movs	r1, #1
    5a5a:	f205 706c 	addw	r0, r5, #1900	; 0x76c
    5a5e:	f001 fce3 	bl	7428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>
    }
    5a62:	4628      	mov	r0, r5
        memset(m_filteredIDs,0,sizeof(m_filteredIDs));
    5a64:	f8c5 68a0 	str.w	r6, [r5, #2208]	; 0x8a0
    5a68:	f8c5 68a4 	str.w	r6, [r5, #2212]	; 0x8a4
    }
    5a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5a70:	20003af4 	.word	0x20003af4
    5a74:	20003bb8 	.word	0x20003bb8

00005a78 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()>:
    ActiveLoggerImpl::~ActiveLoggerImpl() {
    5a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a7a:	4605      	mov	r5, r0
    5a7c:	4b0c      	ldr	r3, [pc, #48]	; (5ab0 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()+0x38>)
    5a7e:	f200 7474 	addw	r4, r0, #1908	; 0x774
    5a82:	f600 0014 	addw	r0, r0, #2068	; 0x814
    5a86:	602b      	str	r3, [r5, #0]
    5a88:	f205 7644 	addw	r6, r5, #1860	; 0x744
    5a8c:	f011 fd5a 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
    5a90:	4620      	mov	r0, r4
    5a92:	4f08      	ldr	r7, [pc, #32]	; (5ab4 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()+0x3c>)
    5a94:	f010 fde4 	bl	16660 <Fw::LogPacket::~LogPacket()>
  class ActiveLogger_Enabled :
    5a98:	f844 7d08 	str.w	r7, [r4, #-8]!
    5a9c:	4620      	mov	r0, r4
    5a9e:	f7fa fd4d 	bl	53c <Fw::Serializable::~Serializable()>
    }
    5aa2:	42b4      	cmp	r4, r6
    5aa4:	d1f8      	bne.n	5a98 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()+0x20>
    ActiveLoggerImpl::~ActiveLoggerImpl() {
    5aa6:	4628      	mov	r0, r5
    5aa8:	f000 fb52 	bl	6150 <Svc::ActiveLoggerComponentBase::~ActiveLoggerComponentBase()>
    }
    5aac:	4628      	mov	r0, r5
    5aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ab0:	20003af4 	.word	0x20003af4
    5ab4:	20003bb8 	.word	0x20003bb8

00005ab8 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()>:
    ActiveLoggerImpl::~ActiveLoggerImpl() {
    5ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aba:	4605      	mov	r5, r0
    5abc:	4b0f      	ldr	r3, [pc, #60]	; (5afc <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()+0x44>)
    5abe:	f200 7474 	addw	r4, r0, #1908	; 0x774
    5ac2:	f600 0014 	addw	r0, r0, #2068	; 0x814
    5ac6:	602b      	str	r3, [r5, #0]
    5ac8:	f205 7644 	addw	r6, r5, #1860	; 0x744
    5acc:	f011 fd3a 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
    5ad0:	4620      	mov	r0, r4
    5ad2:	4f0b      	ldr	r7, [pc, #44]	; (5b00 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()+0x48>)
    5ad4:	f010 fdc4 	bl	16660 <Fw::LogPacket::~LogPacket()>
    5ad8:	f844 7d08 	str.w	r7, [r4, #-8]!
    5adc:	4620      	mov	r0, r4
    5ade:	f7fa fd2d 	bl	53c <Fw::Serializable::~Serializable()>
    }
    5ae2:	42b4      	cmp	r4, r6
    5ae4:	d1f8      	bne.n	5ad8 <Svc::ActiveLoggerImpl::~ActiveLoggerImpl()+0x20>
    ActiveLoggerImpl::~ActiveLoggerImpl() {
    5ae6:	4628      	mov	r0, r5
    5ae8:	f000 fb32 	bl	6150 <Svc::ActiveLoggerComponentBase::~ActiveLoggerComponentBase()>
    }
    5aec:	4628      	mov	r0, r5
    5aee:	f640 01a8 	movw	r1, #2216	; 0x8a8
    5af2:	f013 f8ed 	bl	18cd0 <operator delete(void*, unsigned int)>
    5af6:	4628      	mov	r0, r5
    5af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5afa:	bf00      	nop
    5afc:	20003af4 	.word	0x20003af4
    5b00:	20003bb8 	.word	0x20003bb8

00005b04 <Svc::ActiveLoggerImpl::loqQueue_internalInterfaceHandler(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)>:
    void ActiveLoggerImpl::loqQueue_internalInterfaceHandler(FwEventIdType id, const Fw::Time &timeTag, const Fw::LogSeverity& severity, const Fw::LogBuffer &args) {
    5b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        this->m_logPacket.setId(id);
    5b08:	f200 7574 	addw	r5, r0, #1908	; 0x774
    void ActiveLoggerImpl::loqQueue_internalInterfaceHandler(FwEventIdType id, const Fw::Time &timeTag, const Fw::LogSeverity& severity, const Fw::LogBuffer &args) {
    5b0c:	4616      	mov	r6, r2
        this->m_comBuffer.resetSer();
    5b0e:	f600 0714 	addw	r7, r0, #2068	; 0x814
    void ActiveLoggerImpl::loqQueue_internalInterfaceHandler(FwEventIdType id, const Fw::Time &timeTag, const Fw::LogSeverity& severity, const Fw::LogBuffer &args) {
    5b12:	f8dd 8018 	ldr.w	r8, [sp, #24]
    5b16:	4604      	mov	r4, r0
        this->m_logPacket.setId(id);
    5b18:	4628      	mov	r0, r5
    5b1a:	f010 fd97 	bl	1664c <Fw::LogPacket::setId(unsigned long)>
        this->m_logPacket.setTimeTag(timeTag);
    5b1e:	4631      	mov	r1, r6
    5b20:	4628      	mov	r0, r5
    5b22:	f010 fd99 	bl	16658 <Fw::LogPacket::setTimeTag(Fw::Time const&)>
        this->m_logPacket.setLogBuffer(args);
    5b26:	4641      	mov	r1, r8
    5b28:	4628      	mov	r0, r5
    5b2a:	f010 fd91 	bl	16650 <Fw::LogPacket::setLogBuffer(Fw::LogBuffer const&)>
        this->m_comBuffer.resetSer();
    5b2e:	4638      	mov	r0, r7
    5b30:	f7fb fa60 	bl	ff4 <Fw::SerializeBufferBase::resetSer()>
        Fw::SerializeStatus stat = this->m_logPacket.serialize(this->m_comBuffer);
    5b34:	4639      	mov	r1, r7
    5b36:	4628      	mov	r0, r5
    5b38:	f010 fdba 	bl	166b0 <Fw::LogPacket::serialize(Fw::SerializeBufferBase&) const>
        FW_ASSERT(Fw::FW_SERIALIZE_OK == stat,static_cast<NATIVE_INT_TYPE>(stat));
    5b3c:	b930      	cbnz	r0, 5b4c <Svc::ActiveLoggerImpl::loqQueue_internalInterfaceHandler(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x48>
        if (this->isConnected_PktSend_OutputPort(0)) {
    5b3e:	2100      	movs	r1, #0
    5b40:	4620      	mov	r0, r4
    5b42:	f000 fb67 	bl	6214 <Svc::ActiveLoggerComponentBase::isConnected_PktSend_OutputPort(long)>
    5b46:	b960      	cbnz	r0, 5b62 <Svc::ActiveLoggerImpl::loqQueue_internalInterfaceHandler(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x5e>
    }
    5b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FW_ASSERT(Fw::FW_SERIALIZE_OK == stat,static_cast<NATIVE_INT_TYPE>(stat));
    5b4c:	4601      	mov	r1, r0
    5b4e:	2273      	movs	r2, #115	; 0x73
    5b50:	4808      	ldr	r0, [pc, #32]	; (5b74 <Svc::ActiveLoggerImpl::loqQueue_internalInterfaceHandler(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x70>)
    5b52:	f7fb fd69 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
        if (this->isConnected_PktSend_OutputPort(0)) {
    5b56:	2100      	movs	r1, #0
    5b58:	4620      	mov	r0, r4
    5b5a:	f000 fb5b 	bl	6214 <Svc::ActiveLoggerComponentBase::isConnected_PktSend_OutputPort(long)>
    5b5e:	2800      	cmp	r0, #0
    5b60:	d0f2      	beq.n	5b48 <Svc::ActiveLoggerImpl::loqQueue_internalInterfaceHandler(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x44>
            this->PktSend_out(0, this->m_comBuffer,0);
    5b62:	2300      	movs	r3, #0
    5b64:	463a      	mov	r2, r7
    5b66:	4620      	mov	r0, r4
    5b68:	4619      	mov	r1, r3
    }
    5b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            this->PktSend_out(0, this->m_comBuffer,0);
    5b6e:	f000 bbfb 	b.w	6368 <Svc::ActiveLoggerComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)>
    5b72:	bf00      	nop
    5b74:	200011ec 	.word	0x200011ec

00005b78 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::getBuffCapacity() const>:
        }
    5b78:	2095      	movs	r0, #149	; 0x95
    5b7a:	4770      	bx	lr

00005b7c <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::getBuffAddr()>:
        }
    5b7c:	300c      	adds	r0, #12
    5b7e:	4770      	bx	lr

00005b80 <Svc::ActiveLoggerComponentBase::pingIn_preMsgHook(long, unsigned long)>:
  }
    5b80:	4770      	bx	lr
    5b82:	bf00      	nop

00005b84 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_preMsgHook(unsigned long, unsigned long)>:
  }
    5b84:	4770      	bx	lr
    5b86:	bf00      	nop

00005b88 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()>:
    class ComponentIpcSerializableBuffer :
    5b88:	4b03      	ldr	r3, [pc, #12]	; (5b98 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()+0x10>)
    5b8a:	b510      	push	{r4, lr}
    5b8c:	4604      	mov	r4, r0
    5b8e:	6003      	str	r3, [r0, #0]
    5b90:	f7fa fcde 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    5b94:	4620      	mov	r0, r4
    5b96:	bd10      	pop	{r4, pc}
    5b98:	2000396c 	.word	0x2000396c

00005b9c <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()>:
    5b9c:	4b05      	ldr	r3, [pc, #20]	; (5bb4 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()+0x18>)
    5b9e:	b510      	push	{r4, lr}
    5ba0:	4604      	mov	r4, r0
    5ba2:	6003      	str	r3, [r0, #0]
    5ba4:	f7fa fcd4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    5ba8:	21a4      	movs	r1, #164	; 0xa4
    5baa:	4620      	mov	r0, r4
    5bac:	f013 f890 	bl	18cd0 <operator delete(void*, unsigned int)>
    5bb0:	4620      	mov	r0, r4
    5bb2:	bd10      	pop	{r4, pc}
    5bb4:	2000396c 	.word	0x2000396c

00005bb8 <Svc::ActiveLoggerComponentBase::m_p_LogRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)>:
        FwEventIdType id,
        Fw::Time& timeTag,
        const Fw::LogSeverity& severity,
        Fw::LogBuffer& args
    )
  {
    5bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bbc:	b082      	sub	sp, #8
    5bbe:	460d      	mov	r5, r1
    5bc0:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    5bc2:	4604      	mov	r4, r0
  {
    5bc4:	9f08      	ldr	r7, [sp, #32]
    5bc6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    FW_ASSERT(callComp);
    5bca:	b1a8      	cbz	r0, 5bf8 <Svc::ActiveLoggerComponentBase::m_p_LogRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x40>
    FW_ASSERT(
    5bcc:	2d00      	cmp	r5, #0
    5bce:	dd07      	ble.n	5be0 <Svc::ActiveLoggerComponentBase::m_p_LogRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x28>
    5bd0:	f240 325f 	movw	r2, #863	; 0x35f
    5bd4:	4629      	mov	r1, r5
    5bd6:	480c      	ldr	r0, [pc, #48]	; (5c08 <Svc::ActiveLoggerComponentBase::m_p_LogRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x50>)
    5bd8:	9301      	str	r3, [sp, #4]
    5bda:	f7fb fd25 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    5bde:	9b01      	ldr	r3, [sp, #4]
    this->LogRecv_handler(
    5be0:	4629      	mov	r1, r5
    5be2:	4620      	mov	r0, r4
    5be4:	4632      	mov	r2, r6
    5be6:	e9cd 7808 	strd	r7, r8, [sp, #32]
    5bea:	6825      	ldr	r5, [r4, #0]
    5bec:	69ec      	ldr	r4, [r5, #28]
    5bee:	46a4      	mov	ip, r4
      id,
      timeTag,
      severity,
      args
    );
  }
    5bf0:	b002      	add	sp, #8
    5bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    this->LogRecv_handler(
    5bf6:	4760      	bx	ip
    FW_ASSERT(callComp);
    5bf8:	f640 0114 	movw	r1, #2068	; 0x814
    5bfc:	4802      	ldr	r0, [pc, #8]	; (5c08 <Svc::ActiveLoggerComponentBase::m_p_LogRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x50>)
    5bfe:	9301      	str	r3, [sp, #4]
    5c00:	f7fb fd04 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    5c04:	9b01      	ldr	r3, [sp, #4]
    5c06:	e7e1      	b.n	5bcc <Svc::ActiveLoggerComponentBase::m_p_LogRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x14>
    5c08:	20001618 	.word	0x20001618

00005c0c <Svc::ActiveLoggerComponentBase::init(unsigned long, long)>:
  {
    5c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c10:	4605      	mov	r5, r0
    5c12:	b097      	sub	sp, #92	; 0x5c
    5c14:	4689      	mov	r9, r1
    Fw::ActiveComponentBase::init(instance);
    5c16:	4611      	mov	r1, r2
      this->m_CmdDisp_InputPort[port].init();
    5c18:	f505 7725 	add.w	r7, r5, #660	; 0x294
    Fw::ActiveComponentBase::init(instance);
    5c1c:	f00b fbfe 	bl	1141c <Fw::ActiveComponentBase::init(long)>
    ObjectName() : StringBase() { *this = ""; }
    5c20:	4cab      	ldr	r4, [pc, #684]	; (5ed0 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2c4>)
    const char* toChar() const { return this->m_buf; }
    5c22:	f105 0608 	add.w	r6, r5, #8
      this->m_CmdDisp_InputPort[port].init();
    5c26:	4638      	mov	r0, r7
      this->m_LogRecv_InputPort[port].init();
    5c28:	f505 7841 	add.w	r8, r5, #772	; 0x304
      this->m_CmdDisp_InputPort[port].init();
    5c2c:	f010 f96e 	bl	15f0c <Fw::InputCmdPort::init()>
      this->m_CmdDisp_InputPort[port].addCallComp(
    5c30:	4aa8      	ldr	r2, [pc, #672]	; (5ed4 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2c8>)
    5c32:	4638      	mov	r0, r7
    5c34:	4629      	mov	r1, r5
    5c36:	f010 f8af 	bl	15d98 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))>
      this->m_CmdDisp_InputPort[port].setPortNum(port);
    5c3a:	2100      	movs	r1, #0
    5c3c:	4638      	mov	r0, r7
    5c3e:	f012 f849 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    5c42:	4668      	mov	r0, sp
    5c44:	f7fb faec 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5c48:	49a3      	ldr	r1, [pc, #652]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5c4a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5c4c:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5c4e:	f7fb fb4f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5c52:	2300      	movs	r3, #0
    5c54:	4632      	mov	r2, r6
    5c56:	49a1      	ldr	r1, [pc, #644]	; (5edc <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2d0>)
    5c58:	4668      	mov	r0, sp
    5c5a:	f7fb fb17 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
    5c5e:	a901      	add	r1, sp, #4
    5c60:	4638      	mov	r0, r7
      this->m_pingIn_InputPort[port].init();
    5c62:	f505 775d 	add.w	r7, r5, #884	; 0x374
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
    5c66:	f012 f99b 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5c6a:	4668      	mov	r0, sp
    5c6c:	9400      	str	r4, [sp, #0]
    5c6e:	f7fb fae1 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_LogRecv_InputPort[port].init();
    5c72:	4640      	mov	r0, r8
    5c74:	f010 fea4 	bl	169c0 <Fw::InputLogPort::init()>
      this->m_LogRecv_InputPort[port].addCallComp(
    5c78:	4a99      	ldr	r2, [pc, #612]	; (5ee0 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2d4>)
    5c7a:	4640      	mov	r0, r8
    5c7c:	4629      	mov	r1, r5
    5c7e:	f010 fdd3 	bl	16828 <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))>
      this->m_LogRecv_InputPort[port].setPortNum(port);
    5c82:	2100      	movs	r1, #0
    5c84:	4640      	mov	r0, r8
    5c86:	f012 f825 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    5c8a:	4668      	mov	r0, sp
    5c8c:	f7fb fac8 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5c90:	4991      	ldr	r1, [pc, #580]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5c92:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5c94:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5c96:	f7fb fb2b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5c9a:	2300      	movs	r3, #0
    5c9c:	4632      	mov	r2, r6
    5c9e:	4991      	ldr	r1, [pc, #580]	; (5ee4 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2d8>)
    5ca0:	4668      	mov	r0, sp
    5ca2:	f7fb faf3 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_LogRecv_InputPort[port].setObjName(portName.toChar());
    5ca6:	a901      	add	r1, sp, #4
    5ca8:	4640      	mov	r0, r8
      this->m_CmdReg_OutputPort[port].init();
    5caa:	f505 7879 	add.w	r8, r5, #996	; 0x3e4
      this->m_LogRecv_InputPort[port].setObjName(portName.toChar());
    5cae:	f012 f977 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5cb2:	4668      	mov	r0, sp
    5cb4:	9400      	str	r4, [sp, #0]
    5cb6:	f7fb fabd 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_pingIn_InputPort[port].init();
    5cba:	4638      	mov	r0, r7
    5cbc:	f00b fb0c 	bl	112d8 <Svc::InputPingPort::init()>
      this->m_pingIn_InputPort[port].addCallComp(
    5cc0:	4a89      	ldr	r2, [pc, #548]	; (5ee8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2dc>)
    5cc2:	4638      	mov	r0, r7
    5cc4:	4629      	mov	r1, r5
    5cc6:	f00b fa7b 	bl	111c0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_pingIn_InputPort[port].setPortNum(port);
    5cca:	2100      	movs	r1, #0
    5ccc:	4638      	mov	r0, r7
    5cce:	f012 f801 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    5cd2:	4668      	mov	r0, sp
    5cd4:	f7fb faa4 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5cd8:	497f      	ldr	r1, [pc, #508]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5cda:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5cdc:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5cde:	f7fb fb07 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5ce2:	2300      	movs	r3, #0
    5ce4:	4632      	mov	r2, r6
    5ce6:	4981      	ldr	r1, [pc, #516]	; (5eec <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2e0>)
    5ce8:	4668      	mov	r0, sp
    5cea:	f7fb facf 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
    5cee:	a901      	add	r1, sp, #4
    5cf0:	4638      	mov	r0, r7
      this->m_CmdStatus_OutputPort[port].init();
    5cf2:	f505 678a 	add.w	r7, r5, #1104	; 0x450
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
    5cf6:	f012 f953 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5cfa:	4668      	mov	r0, sp
    5cfc:	9400      	str	r4, [sp, #0]
    5cfe:	f7fb fa99 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CmdReg_OutputPort[port].init();
    5d02:	4640      	mov	r0, r8
    5d04:	f010 fa62 	bl	161cc <Fw::OutputCmdRegPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5d08:	4668      	mov	r0, sp
    5d0a:	f7fb fa89 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5d0e:	4972      	ldr	r1, [pc, #456]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5d10:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5d12:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5d14:	f7fb faec 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5d18:	2300      	movs	r3, #0
    5d1a:	4632      	mov	r2, r6
    5d1c:	4974      	ldr	r1, [pc, #464]	; (5ef0 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2e4>)
    5d1e:	4668      	mov	r0, sp
    5d20:	f7fb fab4 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
    5d24:	a901      	add	r1, sp, #4
    5d26:	4640      	mov	r0, r8
      this->m_Log_OutputPort[port].init();
    5d28:	f205 48bc 	addw	r8, r5, #1212	; 0x4bc
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
    5d2c:	f012 f938 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5d30:	4668      	mov	r0, sp
    5d32:	9400      	str	r4, [sp, #0]
    5d34:	f7fb fa7e 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CmdStatus_OutputPort[port].init();
    5d38:	4638      	mov	r0, r7
    5d3a:	f010 fc2f 	bl	1659c <Fw::OutputCmdResponsePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5d3e:	4668      	mov	r0, sp
    5d40:	f7fb fa6e 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5d44:	4964      	ldr	r1, [pc, #400]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5d46:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5d48:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5d4a:	f7fb fad1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5d4e:	2300      	movs	r3, #0
    5d50:	4632      	mov	r2, r6
    5d52:	4968      	ldr	r1, [pc, #416]	; (5ef4 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2e8>)
    5d54:	4668      	mov	r0, sp
    5d56:	f7fb fa99 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
    5d5a:	a901      	add	r1, sp, #4
    5d5c:	4638      	mov	r0, r7
      this->m_LogText_OutputPort[port].init();
    5d5e:	f505 67a5 	add.w	r7, r5, #1320	; 0x528
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
    5d62:	f012 f91d 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5d66:	4668      	mov	r0, sp
    5d68:	9400      	str	r4, [sp, #0]
    5d6a:	f7fb fa63 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Log_OutputPort[port].init();
    5d6e:	4640      	mov	r0, r8
    5d70:	f010 fe86 	bl	16a80 <Fw::OutputLogPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5d74:	4668      	mov	r0, sp
    5d76:	f7fb fa53 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5d7a:	4957      	ldr	r1, [pc, #348]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5d7c:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5d7e:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5d80:	f7fb fab6 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5d84:	2300      	movs	r3, #0
    5d86:	4632      	mov	r2, r6
    5d88:	495b      	ldr	r1, [pc, #364]	; (5ef8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2ec>)
    5d8a:	4668      	mov	r0, sp
    5d8c:	f7fb fa7e 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
    5d90:	a901      	add	r1, sp, #4
    5d92:	4640      	mov	r0, r8
      this->m_Time_OutputPort[port].init();
    5d94:	f205 5894 	addw	r8, r5, #1428	; 0x594
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
    5d98:	f012 f902 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5d9c:	4668      	mov	r0, sp
    5d9e:	9400      	str	r4, [sp, #0]
    5da0:	f7fb fa48 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_LogText_OutputPort[port].init();
    5da4:	4638      	mov	r0, r7
    5da6:	f011 f893 	bl	16ed0 <Fw::OutputLogTextPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5daa:	4668      	mov	r0, sp
    5dac:	f7fb fa38 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5db0:	4949      	ldr	r1, [pc, #292]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5db2:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5db4:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5db6:	f7fb fa9b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5dba:	2300      	movs	r3, #0
    5dbc:	4632      	mov	r2, r6
    5dbe:	494f      	ldr	r1, [pc, #316]	; (5efc <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2f0>)
    5dc0:	4668      	mov	r0, sp
    5dc2:	f7fb fa63 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
    5dc6:	a901      	add	r1, sp, #4
    5dc8:	4638      	mov	r0, r7
      this->m_FatalAnnounce_OutputPort[port].init();
    5dca:	f505 67c0 	add.w	r7, r5, #1536	; 0x600
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
    5dce:	f012 f8e7 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5dd2:	4668      	mov	r0, sp
    5dd4:	9400      	str	r4, [sp, #0]
    5dd6:	f7fb fa2d 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Time_OutputPort[port].init();
    5dda:	4640      	mov	r0, r8
    5ddc:	f011 ff5a 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5de0:	4668      	mov	r0, sp
    5de2:	f7fb fa1d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5de6:	493c      	ldr	r1, [pc, #240]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5de8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5dea:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5dec:	f7fb fa80 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5df0:	2300      	movs	r3, #0
    5df2:	4632      	mov	r2, r6
    5df4:	4942      	ldr	r1, [pc, #264]	; (5f00 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2f4>)
    5df6:	4668      	mov	r0, sp
    5df8:	f7fb fa48 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
    5dfc:	a901      	add	r1, sp, #4
    5dfe:	4640      	mov	r0, r8
      this->m_PktSend_OutputPort[port].init();
    5e00:	f205 686c 	addw	r8, r5, #1644	; 0x66c
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
    5e04:	f012 f8cc 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5e08:	4668      	mov	r0, sp
    5e0a:	9400      	str	r4, [sp, #0]
    5e0c:	f7fb fa12 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_FatalAnnounce_OutputPort[port].init();
    5e10:	4638      	mov	r0, r7
    5e12:	f001 fcb1 	bl	7778 <Svc::OutputFatalEventPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5e16:	4668      	mov	r0, sp
    5e18:	f7fb fa02 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5e1c:	492e      	ldr	r1, [pc, #184]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5e1e:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5e20:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5e22:	f7fb fa65 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5e26:	2300      	movs	r3, #0
    5e28:	4632      	mov	r2, r6
    5e2a:	4936      	ldr	r1, [pc, #216]	; (5f04 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2f8>)
    5e2c:	4668      	mov	r0, sp
    5e2e:	f7fb fa2d 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_FatalAnnounce_OutputPort[port].setObjName(portName.toChar());
    5e32:	a901      	add	r1, sp, #4
    5e34:	4638      	mov	r0, r7
      this->m_pingOut_OutputPort[port].init();
    5e36:	f505 67db 	add.w	r7, r5, #1752	; 0x6d8
      this->m_FatalAnnounce_OutputPort[port].setObjName(portName.toChar());
    5e3a:	f012 f8b1 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5e3e:	4668      	mov	r0, sp
    5e40:	9400      	str	r4, [sp, #0]
    5e42:	f7fb f9f7 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_PktSend_OutputPort[port].init();
    5e46:	4640      	mov	r0, r8
    5e48:	f011 fcd8 	bl	177fc <Fw::OutputComPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5e4c:	4668      	mov	r0, sp
    5e4e:	f7fb f9e7 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5e52:	4921      	ldr	r1, [pc, #132]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5e54:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5e56:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5e58:	f7fb fa4a 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5e5c:	2300      	movs	r3, #0
    5e5e:	4632      	mov	r2, r6
    5e60:	4929      	ldr	r1, [pc, #164]	; (5f08 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2fc>)
    5e62:	4668      	mov	r0, sp
    5e64:	f7fb fa12 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_PktSend_OutputPort[port].setObjName(portName.toChar());
    5e68:	a901      	add	r1, sp, #4
    5e6a:	4640      	mov	r0, r8
    5e6c:	f012 f898 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5e70:	4668      	mov	r0, sp
    5e72:	9400      	str	r4, [sp, #0]
    5e74:	f7fb f9de 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_pingOut_OutputPort[port].init();
    5e78:	4638      	mov	r0, r7
    5e7a:	f00b fa2f 	bl	112dc <Svc::OutputPingPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    5e7e:	4668      	mov	r0, sp
    5e80:	f7fb f9ce 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    5e84:	4914      	ldr	r1, [pc, #80]	; (5ed8 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2cc>)
    5e86:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    5e88:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    5e8a:	f7fb fa31 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    5e8e:	4632      	mov	r2, r6
    5e90:	2300      	movs	r3, #0
    5e92:	491e      	ldr	r1, [pc, #120]	; (5f0c <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x300>)
    5e94:	4668      	mov	r0, sp
    5e96:	f7fb f9f9 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_pingOut_OutputPort[port].setObjName(portName.toChar());
    5e9a:	a901      	add	r1, sp, #4
    5e9c:	4638      	mov	r0, r7
    5e9e:	f012 f87f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    5ea2:	4668      	mov	r0, sp
    5ea4:	9400      	str	r4, [sp, #0]
    5ea6:	f7fb f9c5 	bl	1234 <Fw::StringBase::~StringBase()>
    Os::Queue::Status qStat = this->createQueue(
    5eaa:	2295      	movs	r2, #149	; 0x95
    5eac:	4649      	mov	r1, r9
    5eae:	4628      	mov	r0, r5
    5eb0:	f00b fa5e 	bl	11370 <Fw::QueuedComponentBase::createQueue(unsigned long, unsigned long)>
    FW_ASSERT(
    5eb4:	b910      	cbnz	r0, 5ebc <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x2b0>
  }
    5eb6:	b017      	add	sp, #92	; 0x5c
    5eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(
    5ebc:	4601      	mov	r1, r0
    5ebe:	f240 123f 	movw	r2, #319	; 0x13f
    5ec2:	4813      	ldr	r0, [pc, #76]	; (5f10 <Svc::ActiveLoggerComponentBase::init(unsigned long, long)+0x304>)
  }
    5ec4:	b017      	add	sp, #92	; 0x5c
    5ec6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    FW_ASSERT(
    5eca:	f7fb bbad 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    5ece:	bf00      	nop
    5ed0:	20002b80 	.word	0x20002b80
    5ed4:	00006891 	.word	0x00006891
    5ed8:	20001d2c 	.word	0x20001d2c
    5edc:	20001670 	.word	0x20001670
    5ee0:	00005bb9 	.word	0x00005bb9
    5ee4:	2000168c 	.word	0x2000168c
    5ee8:	00006305 	.word	0x00006305
    5eec:	200016a8 	.word	0x200016a8
    5ef0:	200016c4 	.word	0x200016c4
    5ef4:	200016e0 	.word	0x200016e0
    5ef8:	20001700 	.word	0x20001700
    5efc:	20001718 	.word	0x20001718
    5f00:	20001734 	.word	0x20001734
    5f04:	2000174c 	.word	0x2000174c
    5f08:	20001770 	.word	0x20001770
    5f0c:	2000178c 	.word	0x2000178c
    5f10:	20001618 	.word	0x20001618

00005f14 <Svc::ActiveLoggerComponentBase::get_CmdDisp_InputPort(long)>:
  {
    5f14:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    5f16:	1e0c      	subs	r4, r1, #0
  {
    5f18:	4605      	mov	r5, r0
    FW_ASSERT(
    5f1a:	dd04      	ble.n	5f26 <Svc::ActiveLoggerComponentBase::get_CmdDisp_InputPort(long)+0x12>
    5f1c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
    5f20:	4804      	ldr	r0, [pc, #16]	; (5f34 <Svc::ActiveLoggerComponentBase::get_CmdDisp_InputPort(long)+0x20>)
    5f22:	f7fb fb81 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_CmdDisp_InputPort[portNum];
    5f26:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5f2a:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    5f2e:	f500 7025 	add.w	r0, r0, #660	; 0x294
    5f32:	bd38      	pop	{r3, r4, r5, pc}
    5f34:	20001618 	.word	0x20001618

00005f38 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)>:
  {
    5f38:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    5f3a:	1e0c      	subs	r4, r1, #0
  {
    5f3c:	4605      	mov	r5, r0
    FW_ASSERT(
    5f3e:	dd04      	ble.n	5f4a <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)+0x12>
    5f40:	f240 125b 	movw	r2, #347	; 0x15b
    5f44:	4804      	ldr	r0, [pc, #16]	; (5f58 <Svc::ActiveLoggerComponentBase::get_LogRecv_InputPort(long)+0x20>)
    5f46:	f7fb fb6f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_LogRecv_InputPort[portNum];
    5f4a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5f4e:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    5f52:	f500 7041 	add.w	r0, r0, #772	; 0x304
    5f56:	bd38      	pop	{r3, r4, r5, pc}
    5f58:	20001618 	.word	0x20001618

00005f5c <Svc::ActiveLoggerComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)>:
  {
    5f5c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    5f5e:	1e0d      	subs	r5, r1, #0
  {
    5f60:	4604      	mov	r4, r0
    5f62:	4616      	mov	r6, r2
    FW_ASSERT(
    5f64:	dd04      	ble.n	5f70 <Svc::ActiveLoggerComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)+0x14>
    5f66:	f44f 72bc 	mov.w	r2, #376	; 0x178
    5f6a:	4806      	ldr	r0, [pc, #24]	; (5f84 <Svc::ActiveLoggerComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)+0x28>)
    5f6c:	f7fb fb5c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    5f70:	236c      	movs	r3, #108	; 0x6c
    5f72:	4631      	mov	r1, r6
    5f74:	fb03 4005 	mla	r0, r3, r5, r4
  }
    5f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    5f7c:	f500 7079 	add.w	r0, r0, #996	; 0x3e4
    5f80:	f010 b8d4 	b.w	1612c <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)>
    5f84:	20001618 	.word	0x20001618

00005f88 <Svc::ActiveLoggerComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>:
  {
    5f88:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    5f8a:	1e0d      	subs	r5, r1, #0
  {
    5f8c:	4604      	mov	r4, r0
    5f8e:	4616      	mov	r6, r2
    FW_ASSERT(
    5f90:	dd04      	ble.n	5f9c <Svc::ActiveLoggerComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x14>
    5f92:	f44f 72c3 	mov.w	r2, #390	; 0x186
    5f96:	4806      	ldr	r0, [pc, #24]	; (5fb0 <Svc::ActiveLoggerComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x28>)
    5f98:	f7fb fb46 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
    5f9c:	236c      	movs	r3, #108	; 0x6c
    5f9e:	4631      	mov	r1, r6
    5fa0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    5fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
    5fa8:	f500 608a 	add.w	r0, r0, #1104	; 0x450
    5fac:	f010 ba86 	b.w	164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>
    5fb0:	20001618 	.word	0x20001618

00005fb4 <Svc::ActiveLoggerComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)>:
  {
    5fb4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    5fb6:	1e0d      	subs	r5, r1, #0
  {
    5fb8:	4604      	mov	r4, r0
    5fba:	4616      	mov	r6, r2
    FW_ASSERT(
    5fbc:	dd04      	ble.n	5fc8 <Svc::ActiveLoggerComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)+0x14>
    5fbe:	f44f 72ca 	mov.w	r2, #404	; 0x194
    5fc2:	4806      	ldr	r0, [pc, #24]	; (5fdc <Svc::ActiveLoggerComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)+0x28>)
    5fc4:	f7fb fb30 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Log_OutputPort[portNum].addCallPort(port);
    5fc8:	236c      	movs	r3, #108	; 0x6c
    5fca:	4631      	mov	r1, r6
    5fcc:	fb03 4005 	mla	r0, r3, r5, r4
  }
    5fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Log_OutputPort[portNum].addCallPort(port);
    5fd4:	f200 40bc 	addw	r0, r0, #1212	; 0x4bc
    5fd8:	f010 bc74 	b.w	168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>
    5fdc:	20001618 	.word	0x20001618

00005fe0 <Svc::ActiveLoggerComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)>:
  {
    5fe0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    5fe2:	1e0d      	subs	r5, r1, #0
  {
    5fe4:	4604      	mov	r4, r0
    5fe6:	4616      	mov	r6, r2
    FW_ASSERT(
    5fe8:	dd04      	ble.n	5ff4 <Svc::ActiveLoggerComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)+0x14>
    5fea:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    5fee:	4806      	ldr	r0, [pc, #24]	; (6008 <Svc::ActiveLoggerComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)+0x28>)
    5ff0:	f7fb fb1a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_LogText_OutputPort[portNum].addCallPort(port);
    5ff4:	236c      	movs	r3, #108	; 0x6c
    5ff6:	4631      	mov	r1, r6
    5ff8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    5ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_LogText_OutputPort[portNum].addCallPort(port);
    6000:	f500 60a5 	add.w	r0, r0, #1320	; 0x528
    6004:	f010 be76 	b.w	16cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>
    6008:	20001618 	.word	0x20001618

0000600c <Svc::ActiveLoggerComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>:
  {
    600c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    600e:	1e0d      	subs	r5, r1, #0
  {
    6010:	4604      	mov	r4, r0
    6012:	4616      	mov	r6, r2
    FW_ASSERT(
    6014:	dd04      	ble.n	6020 <Svc::ActiveLoggerComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x14>
    6016:	f44f 72da 	mov.w	r2, #436	; 0x1b4
    601a:	4806      	ldr	r0, [pc, #24]	; (6034 <Svc::ActiveLoggerComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x28>)
    601c:	f7fb fb04 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Time_OutputPort[portNum].addCallPort(port);
    6020:	236c      	movs	r3, #108	; 0x6c
    6022:	4631      	mov	r1, r6
    6024:	fb03 4005 	mla	r0, r3, r5, r4
  }
    6028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Time_OutputPort[portNum].addCallPort(port);
    602c:	f200 5094 	addw	r0, r0, #1428	; 0x594
    6030:	f011 bdb4 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    6034:	20001618 	.word	0x20001618

00006038 <Svc::ActiveLoggerComponentBase::set_FatalAnnounce_OutputPort(long, Svc::InputFatalEventPort*)>:
  {
    6038:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    603a:	1e0d      	subs	r5, r1, #0
  {
    603c:	4604      	mov	r4, r0
    603e:	4616      	mov	r6, r2
    FW_ASSERT(
    6040:	dd04      	ble.n	604c <Svc::ActiveLoggerComponentBase::set_FatalAnnounce_OutputPort(long, Svc::InputFatalEventPort*)+0x14>
    6042:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
    6046:	4806      	ldr	r0, [pc, #24]	; (6060 <Svc::ActiveLoggerComponentBase::set_FatalAnnounce_OutputPort(long, Svc::InputFatalEventPort*)+0x28>)
    6048:	f7fb faee 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_FatalAnnounce_OutputPort[portNum].addCallPort(port);
    604c:	236c      	movs	r3, #108	; 0x6c
    604e:	4631      	mov	r1, r6
    6050:	fb03 4005 	mla	r0, r3, r5, r4
  }
    6054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_FatalAnnounce_OutputPort[portNum].addCallPort(port);
    6058:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
    605c:	f001 bb3c 	b.w	76d8 <Svc::OutputFatalEventPort::addCallPort(Svc::InputFatalEventPort*)>
    6060:	20001618 	.word	0x20001618

00006064 <Svc::ActiveLoggerComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)>:
  {
    6064:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    6066:	1e0d      	subs	r5, r1, #0
  {
    6068:	4604      	mov	r4, r0
    606a:	4616      	mov	r6, r2
    FW_ASSERT(
    606c:	dd04      	ble.n	6078 <Svc::ActiveLoggerComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)+0x14>
    606e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
    6072:	4806      	ldr	r0, [pc, #24]	; (608c <Svc::ActiveLoggerComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)+0x28>)
    6074:	f7fb fad8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_PktSend_OutputPort[portNum].addCallPort(port);
    6078:	236c      	movs	r3, #108	; 0x6c
    607a:	4631      	mov	r1, r6
    607c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    6080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_PktSend_OutputPort[portNum].addCallPort(port);
    6084:	f200 606c 	addw	r0, r0, #1644	; 0x66c
    6088:	f011 bb22 	b.w	176d0 <Fw::OutputComPort::addCallPort(Fw::InputComPort*)>
    608c:	20001618 	.word	0x20001618

00006090 <Svc::ActiveLoggerComponentBase::regCommands()>:
  {
    6090:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    6092:	f500 7579 	add.w	r5, r0, #996	; 0x3e4
  {
    6096:	4604      	mov	r4, r0
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    6098:	4628      	mov	r0, r5
    609a:	f011 fed7 	bl	17e4c <Fw::PortBase::isConnected() const>
    609e:	b1c0      	cbz	r0, 60d2 <Svc::ActiveLoggerComponentBase::regCommands()+0x42>
    this->m_CmdReg_OutputPort[0].invoke(
    60a0:	4620      	mov	r0, r4
    60a2:	f00b ff27 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    60a6:	4601      	mov	r1, r0
    60a8:	4628      	mov	r0, r5
    60aa:	f010 f84f 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_SET_ID_FILTER
    60ae:	4620      	mov	r0, r4
    60b0:	f00b ff20 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    60b4:	4601      	mov	r1, r0
    this->m_CmdReg_OutputPort[0].invoke(
    60b6:	4628      	mov	r0, r5
    60b8:	3102      	adds	r1, #2
    60ba:	f010 f847 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_DUMP_FILTER_STATE
    60be:	4620      	mov	r0, r4
    60c0:	f00b ff18 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    60c4:	4601      	mov	r1, r0
    this->m_CmdReg_OutputPort[0].invoke(
    60c6:	4628      	mov	r0, r5
    60c8:	3103      	adds	r1, #3
  }
    60ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    this->m_CmdReg_OutputPort[0].invoke(
    60ce:	f010 b83d 	b.w	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    60d2:	f240 2175 	movw	r1, #629	; 0x275
    60d6:	4802      	ldr	r0, [pc, #8]	; (60e0 <Svc::ActiveLoggerComponentBase::regCommands()+0x50>)
    60d8:	f7fb fa98 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    60dc:	e7e0      	b.n	60a0 <Svc::ActiveLoggerComponentBase::regCommands()+0x10>
    60de:	bf00      	nop
    60e0:	20001618 	.word	0x20001618

000060e4 <Svc::ActiveLoggerComponentBase::ActiveLoggerComponentBase(char const*)>:
  ActiveLoggerComponentBase ::
    60e4:	b510      	push	{r4, lr}
    60e6:	4604      	mov	r4, r0
      Fw::ActiveComponentBase(compName)
    60e8:	f00b f98a 	bl	11400 <Fw::ActiveComponentBase::ActiveComponentBase(char const*)>
    60ec:	4b17      	ldr	r3, [pc, #92]	; (614c <Svc::ActiveLoggerComponentBase::ActiveLoggerComponentBase(char const*)+0x68>)
    60ee:	f504 7025 	add.w	r0, r4, #660	; 0x294
    60f2:	6023      	str	r3, [r4, #0]
    60f4:	f00f fe44 	bl	15d80 <Fw::InputCmdPort::InputCmdPort()>
    60f8:	f504 7041 	add.w	r0, r4, #772	; 0x304
    60fc:	f010 fb88 	bl	16810 <Fw::InputLogPort::InputLogPort()>
    6100:	f504 705d 	add.w	r0, r4, #884	; 0x374
    6104:	f00b f850 	bl	111a8 <Svc::InputPingPort::InputPingPort()>
    6108:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
    610c:	f010 f802 	bl	16114 <Fw::OutputCmdRegPort::OutputCmdRegPort()>
    6110:	f504 608a 	add.w	r0, r4, #1104	; 0x450
    6114:	f010 f9c6 	bl	164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>
    6118:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
    611c:	f010 fbc6 	bl	168ac <Fw::OutputLogPort::OutputLogPort()>
    6120:	f504 60a5 	add.w	r0, r4, #1320	; 0x528
    6124:	f010 fdda 	bl	16cdc <Fw::OutputLogTextPort::OutputLogTextPort()>
    6128:	f204 5094 	addw	r0, r4, #1428	; 0x594
    612c:	f011 fd2a 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
    6130:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
    6134:	f001 fac4 	bl	76c0 <Svc::OutputFatalEventPort::OutputFatalEventPort()>
    6138:	f204 606c 	addw	r0, r4, #1644	; 0x66c
    613c:	f011 fabc 	bl	176b8 <Fw::OutputComPort::OutputComPort()>
    6140:	f504 60db 	add.w	r0, r4, #1752	; 0x6d8
    6144:	f00b f87e 	bl	11244 <Svc::OutputPingPort::OutputPingPort()>
  }
    6148:	4620      	mov	r0, r4
    614a:	bd10      	pop	{r4, pc}
    614c:	20003d00 	.word	0x20003d00

00006150 <Svc::ActiveLoggerComponentBase::~ActiveLoggerComponentBase()>:
  ActiveLoggerComponentBase ::
    6150:	b510      	push	{r4, lr}
    ~ActiveLoggerComponentBase()
    6152:	4a25      	ldr	r2, [pc, #148]	; (61e8 <Svc::ActiveLoggerComponentBase::~ActiveLoggerComponentBase()+0x98>)
  ActiveLoggerComponentBase ::
    6154:	4604      	mov	r4, r0
    ~ActiveLoggerComponentBase()
    6156:	f8d0 36d8 	ldr.w	r3, [r0, #1752]	; 0x6d8
    615a:	f500 60db 	add.w	r0, r0, #1752	; 0x6d8
    615e:	6022      	str	r2, [r4, #0]
    6160:	685b      	ldr	r3, [r3, #4]
    6162:	4798      	blx	r3
    6164:	f8d4 366c 	ldr.w	r3, [r4, #1644]	; 0x66c
    6168:	f204 606c 	addw	r0, r4, #1644	; 0x66c
    616c:	685b      	ldr	r3, [r3, #4]
    616e:	4798      	blx	r3
    6170:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
    6174:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
    6178:	685b      	ldr	r3, [r3, #4]
    617a:	4798      	blx	r3
    617c:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
    6180:	f204 5094 	addw	r0, r4, #1428	; 0x594
    6184:	685b      	ldr	r3, [r3, #4]
    6186:	4798      	blx	r3
    6188:	f8d4 3528 	ldr.w	r3, [r4, #1320]	; 0x528
    618c:	f504 60a5 	add.w	r0, r4, #1320	; 0x528
    6190:	685b      	ldr	r3, [r3, #4]
    6192:	4798      	blx	r3
    6194:	f8d4 34bc 	ldr.w	r3, [r4, #1212]	; 0x4bc
    6198:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
    619c:	685b      	ldr	r3, [r3, #4]
    619e:	4798      	blx	r3
    61a0:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
    61a4:	f504 608a 	add.w	r0, r4, #1104	; 0x450
    61a8:	685b      	ldr	r3, [r3, #4]
    61aa:	4798      	blx	r3
    61ac:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
    61b0:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
    61b4:	685b      	ldr	r3, [r3, #4]
    61b6:	4798      	blx	r3
    61b8:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
    61bc:	f504 705d 	add.w	r0, r4, #884	; 0x374
    61c0:	685b      	ldr	r3, [r3, #4]
    61c2:	4798      	blx	r3
    61c4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    61c8:	f504 7041 	add.w	r0, r4, #772	; 0x304
    61cc:	685b      	ldr	r3, [r3, #4]
    61ce:	4798      	blx	r3
    61d0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    61d4:	f504 7025 	add.w	r0, r4, #660	; 0x294
    61d8:	685b      	ldr	r3, [r3, #4]
    61da:	4798      	blx	r3
    61dc:	4620      	mov	r0, r4
    61de:	f00b f91f 	bl	11420 <Fw::ActiveComponentBase::~ActiveComponentBase()>
  }
    61e2:	4620      	mov	r0, r4
    61e4:	bd10      	pop	{r4, pc}
    61e6:	bf00      	nop
    61e8:	20003d00 	.word	0x20003d00

000061ec <Svc::ActiveLoggerComponentBase::isConnected_FatalAnnounce_OutputPort(long)>:
  {
    61ec:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    61ee:	1e0d      	subs	r5, r1, #0
  {
    61f0:	4604      	mov	r4, r0
    FW_ASSERT(
    61f2:	dd04      	ble.n	61fe <Svc::ActiveLoggerComponentBase::isConnected_FatalAnnounce_OutputPort(long)+0x12>
    61f4:	f240 3231 	movw	r2, #817	; 0x331
    61f8:	4805      	ldr	r0, [pc, #20]	; (6210 <Svc::ActiveLoggerComponentBase::isConnected_FatalAnnounce_OutputPort(long)+0x24>)
    61fa:	f7fb fa15 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_FatalAnnounce_OutputPort[portNum].isConnected();
    61fe:	236c      	movs	r3, #108	; 0x6c
    6200:	fb03 4005 	mla	r0, r3, r5, r4
  }
    6204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_FatalAnnounce_OutputPort[portNum].isConnected();
    6208:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
    620c:	f011 be1e 	b.w	17e4c <Fw::PortBase::isConnected() const>
    6210:	20001618 	.word	0x20001618

00006214 <Svc::ActiveLoggerComponentBase::isConnected_PktSend_OutputPort(long)>:
  {
    6214:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    6216:	1e0d      	subs	r5, r1, #0
  {
    6218:	4604      	mov	r4, r0
    FW_ASSERT(
    621a:	dd04      	ble.n	6226 <Svc::ActiveLoggerComponentBase::isConnected_PktSend_OutputPort(long)+0x12>
    621c:	f44f 724f 	mov.w	r2, #828	; 0x33c
    6220:	4805      	ldr	r0, [pc, #20]	; (6238 <Svc::ActiveLoggerComponentBase::isConnected_PktSend_OutputPort(long)+0x24>)
    6222:	f7fb fa01 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_PktSend_OutputPort[portNum].isConnected();
    6226:	236c      	movs	r3, #108	; 0x6c
    6228:	fb03 4005 	mla	r0, r3, r5, r4
  }
    622c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_PktSend_OutputPort[portNum].isConnected();
    6230:	f200 606c 	addw	r0, r0, #1644	; 0x66c
    6234:	f011 be0a 	b.w	17e4c <Fw::PortBase::isConnected() const>
    6238:	20001618 	.word	0x20001618

0000623c <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)>:
  {
    623c:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
    623e:	1e0f      	subs	r7, r1, #0
  {
    6240:	b0ab      	sub	sp, #172	; 0xac
    6242:	4604      	mov	r4, r0
    6244:	4616      	mov	r6, r2
    FW_ASSERT(
    6246:	dd04      	ble.n	6252 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x16>
    6248:	f240 3275 	movw	r2, #885	; 0x375
    624c:	482a      	ldr	r0, [pc, #168]	; (62f8 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    624e:	f7fb f9eb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    pingIn_preMsgHook(
    6252:	6823      	ldr	r3, [r4, #0]
    6254:	4a29      	ldr	r2, [pc, #164]	; (62fc <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xc0>)
    6256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6258:	4293      	cmp	r3, r2
    625a:	d147      	bne.n	62ec <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xb0>
    class ComponentIpcSerializableBuffer :
    625c:	a801      	add	r0, sp, #4
    625e:	4d28      	ldr	r5, [pc, #160]	; (6300 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
    6260:	f7fa f96e 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(
    6264:	2101      	movs	r1, #1
    6266:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    6268:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(
    626a:	f7fa fa5d 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    626e:	b9b8      	cbnz	r0, 62a0 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x64>
    _status = msg.serialize(portNum);
    6270:	4639      	mov	r1, r7
    6272:	a801      	add	r0, sp, #4
    6274:	f7fa fa58 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    6278:	b9f0      	cbnz	r0, 62b8 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x7c>
    _status = msg.serialize(key);
    627a:	4631      	mov	r1, r6
    627c:	a801      	add	r0, sp, #4
    627e:	f7fa f9ed 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    6282:	bb28      	cbnz	r0, 62d0 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x94>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    6284:	2301      	movs	r3, #1
    6286:	2200      	movs	r2, #0
    6288:	f104 0068 	add.w	r0, r4, #104	; 0x68
    628c:	a901      	add	r1, sp, #4
    628e:	f00b fd5f 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    6292:	bb20      	cbnz	r0, 62de <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xa2>
    class ComponentIpcSerializableBuffer :
    6294:	a801      	add	r0, sp, #4
    6296:	9501      	str	r5, [sp, #4]
    6298:	f7fa f95a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    629c:	b02b      	add	sp, #172	; 0xac
    629e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(
    62a0:	4601      	mov	r1, r0
    62a2:	f240 3286 	movw	r2, #902	; 0x386
    62a6:	4814      	ldr	r0, [pc, #80]	; (62f8 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    62a8:	f7fb f9be 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(portNum);
    62ac:	4639      	mov	r1, r7
    62ae:	a801      	add	r0, sp, #4
    62b0:	f7fa fa3a 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    62b4:	2800      	cmp	r0, #0
    62b6:	d0e0      	beq.n	627a <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x3e>
    62b8:	4601      	mov	r1, r0
    62ba:	f240 328d 	movw	r2, #909	; 0x38d
    62be:	480e      	ldr	r0, [pc, #56]	; (62f8 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    62c0:	f7fb f9b2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(key);
    62c4:	4631      	mov	r1, r6
    62c6:	a801      	add	r0, sp, #4
    62c8:	f7fa f9c8 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    62cc:	2800      	cmp	r0, #0
    62ce:	d0d9      	beq.n	6284 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x48>
    62d0:	4601      	mov	r1, r0
    62d2:	f44f 7265 	mov.w	r2, #916	; 0x394
    62d6:	4808      	ldr	r0, [pc, #32]	; (62f8 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    62d8:	f7fb f9a6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    62dc:	e7d2      	b.n	6284 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x48>
    FW_ASSERT(
    62de:	4601      	mov	r1, r0
    62e0:	f240 329d 	movw	r2, #925	; 0x39d
    62e4:	4804      	ldr	r0, [pc, #16]	; (62f8 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    62e6:	f7fb f99f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    62ea:	e7d3      	b.n	6294 <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x58>
    pingIn_preMsgHook(
    62ec:	4632      	mov	r2, r6
    62ee:	4639      	mov	r1, r7
    62f0:	4620      	mov	r0, r4
    62f2:	4798      	blx	r3
    62f4:	e7b2      	b.n	625c <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)+0x20>
    62f6:	bf00      	nop
    62f8:	20001618 	.word	0x20001618
    62fc:	00005b81 	.word	0x00005b81
    6300:	2000396c 	.word	0x2000396c

00006304 <Svc::ActiveLoggerComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_pingIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 key
    )
  {
    6304:	b530      	push	{r4, r5, lr}
    6306:	460d      	mov	r5, r1
    6308:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    630a:	4604      	mov	r4, r0
    630c:	b130      	cbz	r0, 631c <Svc::ActiveLoggerComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    ActiveLoggerComponentBase* compPtr = static_cast<ActiveLoggerComponentBase*>(callComp);
    compPtr->pingIn_handlerBase(
    630e:	4629      	mov	r1, r5
    6310:	4620      	mov	r0, r4
      portNum,
      key
    );
  }
    6312:	b003      	add	sp, #12
    6314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->pingIn_handlerBase(
    6318:	f7ff bf90 	b.w	623c <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
    631c:	f640 0126 	movw	r1, #2086	; 0x826
    6320:	4805      	ldr	r0, [pc, #20]	; (6338 <Svc::ActiveLoggerComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    6322:	9201      	str	r2, [sp, #4]
    6324:	f7fb f972 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    6328:	9a01      	ldr	r2, [sp, #4]
    compPtr->pingIn_handlerBase(
    632a:	4629      	mov	r1, r5
    632c:	4620      	mov	r0, r4
  }
    632e:	b003      	add	sp, #12
    6330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->pingIn_handlerBase(
    6334:	f7ff bf82 	b.w	623c <Svc::ActiveLoggerComponentBase::pingIn_handlerBase(long, unsigned long)>
    6338:	20001618 	.word	0x20001618

0000633c <Svc::ActiveLoggerComponentBase::FatalAnnounce_out(long, unsigned long)>:
  {
    633c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    633e:	1e0d      	subs	r5, r1, #0
  {
    6340:	4604      	mov	r4, r0
    6342:	4616      	mov	r6, r2
    FW_ASSERT(
    6344:	dd04      	ble.n	6350 <Svc::ActiveLoggerComponentBase::FatalAnnounce_out(long, unsigned long)+0x14>
    6346:	f240 32be 	movw	r2, #958	; 0x3be
    634a:	4806      	ldr	r0, [pc, #24]	; (6364 <Svc::ActiveLoggerComponentBase::FatalAnnounce_out(long, unsigned long)+0x28>)
    634c:	f7fb f96c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_FatalAnnounce_OutputPort[portNum].invoke(
    6350:	236c      	movs	r3, #108	; 0x6c
    6352:	4631      	mov	r1, r6
    6354:	fb03 4005 	mla	r0, r3, r5, r4
  }
    6358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_FatalAnnounce_OutputPort[portNum].invoke(
    635c:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
    6360:	f001 b9ca 	b.w	76f8 <Svc::OutputFatalEventPort::invoke(unsigned long) const>
    6364:	20001618 	.word	0x20001618

00006368 <Svc::ActiveLoggerComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)>:
  {
    6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    636a:	1e0d      	subs	r5, r1, #0
  {
    636c:	4604      	mov	r4, r0
    636e:	4616      	mov	r6, r2
    6370:	461f      	mov	r7, r3
    FW_ASSERT(
    6372:	dd04      	ble.n	637e <Svc::ActiveLoggerComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)+0x16>
    6374:	f240 32ce 	movw	r2, #974	; 0x3ce
    6378:	4806      	ldr	r0, [pc, #24]	; (6394 <Svc::ActiveLoggerComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)+0x2c>)
    637a:	f7fb f955 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_PktSend_OutputPort[portNum].invoke(
    637e:	236c      	movs	r3, #108	; 0x6c
    6380:	463a      	mov	r2, r7
    6382:	4631      	mov	r1, r6
    6384:	fb03 4005 	mla	r0, r3, r5, r4
  }
    6388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    this->m_PktSend_OutputPort[portNum].invoke(
    638c:	f200 606c 	addw	r0, r0, #1644	; 0x66c
    6390:	f011 b9ae 	b.w	176f0 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const>
    6394:	20001618 	.word	0x20001618

00006398 <Svc::ActiveLoggerComponentBase::pingOut_out(long, unsigned long)>:
  {
    6398:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    639a:	1e0d      	subs	r5, r1, #0
  {
    639c:	4604      	mov	r4, r0
    639e:	4616      	mov	r6, r2
    FW_ASSERT(
    63a0:	dd04      	ble.n	63ac <Svc::ActiveLoggerComponentBase::pingOut_out(long, unsigned long)+0x14>
    63a2:	f240 32de 	movw	r2, #990	; 0x3de
    63a6:	4806      	ldr	r0, [pc, #24]	; (63c0 <Svc::ActiveLoggerComponentBase::pingOut_out(long, unsigned long)+0x28>)
    63a8:	f7fb f93e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_pingOut_OutputPort[portNum].invoke(
    63ac:	236c      	movs	r3, #108	; 0x6c
    63ae:	4631      	mov	r1, r6
    63b0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    63b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_pingOut_OutputPort[portNum].invoke(
    63b8:	f500 60db 	add.w	r0, r0, #1752	; 0x6d8
    63bc:	f00a bf4e 	b.w	1125c <Svc::OutputPingPort::invoke(unsigned long) const>
    63c0:	20001618 	.word	0x20001618

000063c4 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)>:
  {
    63c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63c8:	b0aa      	sub	sp, #168	; 0xa8
    63ca:	4604      	mov	r4, r0
    63cc:	4688      	mov	r8, r1
    63ce:	4617      	mov	r7, r2
    class ComponentIpcSerializableBuffer :
    63d0:	a801      	add	r0, sp, #4
  {
    63d2:	461e      	mov	r6, r3
    class ComponentIpcSerializableBuffer :
    63d4:	f7fa f8b4 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(INT_IF_LOQQUEUE));
    63d8:	2104      	movs	r1, #4
    class ComponentIpcSerializableBuffer :
    63da:	4d46      	ldr	r5, [pc, #280]	; (64f4 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x130>)
    _status = msg.serialize(static_cast<FwEnumStoreType>(INT_IF_LOQQUEUE));
    63dc:	eb0d 0001 	add.w	r0, sp, r1
    class ComponentIpcSerializableBuffer :
    63e0:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(INT_IF_LOQQUEUE));
    63e2:	f7fa f9a1 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    63e6:	2800      	cmp	r0, #0
    63e8:	d12f      	bne.n	644a <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x86>
    _status = msg.serialize(static_cast<FwIndexType>(0));
    63ea:	2100      	movs	r1, #0
    63ec:	a801      	add	r0, sp, #4
    63ee:	f7fa f99b 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    63f2:	2800      	cmp	r0, #0
    63f4:	d135      	bne.n	6462 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x9e>
    _status = msg.serialize(id);
    63f6:	4641      	mov	r1, r8
    63f8:	a801      	add	r0, sp, #4
    63fa:	f7fa f92f 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    63fe:	2800      	cmp	r0, #0
    6400:	d13b      	bne.n	647a <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0xb6>
    _status = msg.serialize(timeTag);
    6402:	4639      	mov	r1, r7
    6404:	a801      	add	r0, sp, #4
    6406:	f7fa fb7b 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
    FW_ASSERT(
    640a:	2800      	cmp	r0, #0
    640c:	d141      	bne.n	6492 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0xce>
    _status = msg.serialize(severity);
    640e:	4631      	mov	r1, r6
    6410:	a801      	add	r0, sp, #4
    6412:	f7fa fb75 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
    FW_ASSERT(
    6416:	2800      	cmp	r0, #0
    6418:	d147      	bne.n	64aa <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0xe6>
    _status = msg.serialize(args);
    641a:	9930      	ldr	r1, [sp, #192]	; 0xc0
    641c:	a801      	add	r0, sp, #4
    641e:	f7fa fb75 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT(
    6422:	2800      	cmp	r0, #0
    6424:	d14d      	bne.n	64c2 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0xfe>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    6426:	2301      	movs	r3, #1
    6428:	2200      	movs	r2, #0
    642a:	a901      	add	r1, sp, #4
    642c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    6430:	f00b fc8e 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    if (qStatus == Os::Queue::Status::FULL) {
    6434:	2808      	cmp	r0, #8
    6436:	d052      	beq.n	64de <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x11a>
    FW_ASSERT(
    6438:	2800      	cmp	r0, #0
    643a:	d149      	bne.n	64d0 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x10c>
    class ComponentIpcSerializableBuffer :
    643c:	a801      	add	r0, sp, #4
    643e:	9501      	str	r5, [sp, #4]
    6440:	f7fa f886 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    6444:	b02a      	add	sp, #168	; 0xa8
    6446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    644a:	4601      	mov	r1, r0
    644c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    6450:	4829      	ldr	r0, [pc, #164]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    6452:	f7fb f8e9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(static_cast<FwIndexType>(0));
    6456:	2100      	movs	r1, #0
    6458:	a801      	add	r0, sp, #4
    645a:	f7fa f965 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    645e:	2800      	cmp	r0, #0
    6460:	d0c9      	beq.n	63f6 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x32>
    6462:	4601      	mov	r1, r0
    6464:	f240 32ff 	movw	r2, #1023	; 0x3ff
    6468:	4823      	ldr	r0, [pc, #140]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    646a:	f7fb f8dd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(id);
    646e:	4641      	mov	r1, r8
    6470:	a801      	add	r0, sp, #4
    6472:	f7fa f8f3 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    6476:	2800      	cmp	r0, #0
    6478:	d0c3      	beq.n	6402 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x3e>
    647a:	4601      	mov	r1, r0
    647c:	f240 4205 	movw	r2, #1029	; 0x405
    6480:	481d      	ldr	r0, [pc, #116]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    6482:	f7fb f8d1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(timeTag);
    6486:	4639      	mov	r1, r7
    6488:	a801      	add	r0, sp, #4
    648a:	f7fa fb39 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
    FW_ASSERT(
    648e:	2800      	cmp	r0, #0
    6490:	d0bd      	beq.n	640e <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x4a>
    6492:	4601      	mov	r1, r0
    6494:	f240 420b 	movw	r2, #1035	; 0x40b
    6498:	4817      	ldr	r0, [pc, #92]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    649a:	f7fb f8c5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(severity);
    649e:	4631      	mov	r1, r6
    64a0:	a801      	add	r0, sp, #4
    64a2:	f7fa fb2d 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
    FW_ASSERT(
    64a6:	2800      	cmp	r0, #0
    64a8:	d0b7      	beq.n	641a <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x56>
    64aa:	4601      	mov	r1, r0
    64ac:	f240 4211 	movw	r2, #1041	; 0x411
    64b0:	4811      	ldr	r0, [pc, #68]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    64b2:	f7fb f8b9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    64b6:	9930      	ldr	r1, [sp, #192]	; 0xc0
    64b8:	a801      	add	r0, sp, #4
    64ba:	f7fa fb27 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT(
    64be:	2800      	cmp	r0, #0
    64c0:	d0b1      	beq.n	6426 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x62>
    64c2:	4601      	mov	r1, r0
    64c4:	f240 4217 	movw	r2, #1047	; 0x417
    64c8:	480b      	ldr	r0, [pc, #44]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    64ca:	f7fb f8ad 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    64ce:	e7aa      	b.n	6426 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x62>
    FW_ASSERT(
    64d0:	4601      	mov	r1, r0
    64d2:	f240 4225 	movw	r2, #1061	; 0x425
    64d6:	4808      	ldr	r0, [pc, #32]	; (64f8 <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x134>)
    64d8:	f7fb f8a6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    64dc:	e7ae      	b.n	643c <Svc::ActiveLoggerComponentBase::loqQueue_internalInterfaceInvoke(unsigned long, Fw::Time const&, Fw::LogSeverity const&, Fw::LogBuffer const&)+0x78>
      this->incNumMsgDropped();
    64de:	4620      	mov	r0, r4
    64e0:	f00a ff32 	bl	11348 <Fw::QueuedComponentBase::incNumMsgDropped()>
    class ComponentIpcSerializableBuffer :
    64e4:	a801      	add	r0, sp, #4
    64e6:	9501      	str	r5, [sp, #4]
    64e8:	f7fa f832 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    64ec:	b02a      	add	sp, #168	; 0xa8
    64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64f2:	bf00      	nop
    64f4:	2000396c 	.word	0x2000396c
    64f8:	20001618 	.word	0x20001618

000064fc <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>:
  {
    64fc:	b530      	push	{r4, r5, lr}
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    64fe:	f500 648a 	add.w	r4, r0, #1104	; 0x450
  {
    6502:	b083      	sub	sp, #12
    6504:	460d      	mov	r5, r1
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    6506:	4620      	mov	r0, r4
  {
    6508:	e9cd 3200 	strd	r3, r2, [sp]
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    650c:	f011 fc9e 	bl	17e4c <Fw::PortBase::isConnected() const>
    6510:	e9dd 3200 	ldrd	r3, r2, [sp]
    6514:	b130      	cbz	r0, 6524 <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x28>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    6516:	4629      	mov	r1, r5
    6518:	4620      	mov	r0, r4
  }
    651a:	b003      	add	sp, #12
    651c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    6520:	f00f bfdc 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    6524:	f240 4136 	movw	r1, #1078	; 0x436
    6528:	4806      	ldr	r0, [pc, #24]	; (6544 <Svc::ActiveLoggerComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x48>)
    652a:	e9cd 2300 	strd	r2, r3, [sp]
    652e:	f7fb f86d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    6532:	4629      	mov	r1, r5
    6534:	4620      	mov	r0, r4
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    6536:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    653a:	b003      	add	sp, #12
    653c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    6540:	f00f bfcc 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    6544:	20001618 	.word	0x20001618

00006548 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    6548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    654c:	b08a      	sub	sp, #40	; 0x28
    654e:	4604      	mov	r4, r0
    args.resetDeser();
    6550:	4618      	mov	r0, r3
  {
    6552:	461d      	mov	r5, r3
    6554:	4688      	mov	r8, r1
    6556:	4691      	mov	r9, r2
    args.resetDeser();
    6558:	f7fa fd50 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
      {
    655c:	a802      	add	r0, sp, #8
    655e:	f7f9 ffe7 	bl	530 <Fw::Serializable::Serializable()>
    6562:	4f44      	ldr	r7, [pc, #272]	; (6674 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x12c>)
        this->e = WARNING_HI;
    6564:	2300      	movs	r3, #0
    _status = args.deserialize(filterLevel);
    6566:	a902      	add	r1, sp, #8
    6568:	4628      	mov	r0, r5
      {
    656a:	9702      	str	r7, [sp, #8]
        this->e = WARNING_HI;
    656c:	f88d 300c 	strb.w	r3, [sp, #12]
    6570:	f7fa fcb0 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    6574:	2800      	cmp	r0, #0
    6576:	d14f      	bne.n	6618 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd0>
      ActiveLogger_Enabled()
    6578:	4606      	mov	r6, r0
      {
    657a:	f8df a100 	ldr.w	sl, [pc, #256]	; 667c <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x134>
    657e:	a804      	add	r0, sp, #16
    6580:	f7f9 ffd6 	bl	530 <Fw::Serializable::Serializable()>
    _status = args.deserialize(filterEnabled);
    6584:	4628      	mov	r0, r5
    6586:	a904      	add	r1, sp, #16
        this->e = ENABLED;
    6588:	f88d 6014 	strb.w	r6, [sp, #20]
      {
    658c:	f8cd a010 	str.w	sl, [sp, #16]
    6590:	f7fa fca0 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    6594:	bb70      	cbnz	r0, 65f4 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xac>
    this->SET_EVENT_FILTER_cmdHandler(
    6596:	6823      	ldr	r3, [r4, #0]

      //! Copy constructor
      ActiveLogger_Enabled(
          const ActiveLogger_Enabled& obj //!< The source object
      )
      {
    6598:	ad08      	add	r5, sp, #32
      {
    659a:	a806      	add	r0, sp, #24
    659c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    659e:	f7f9 ffc7 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    65a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65a6:	4628      	mov	r0, r5
      {
    65a8:	9706      	str	r7, [sp, #24]
        this->e = obj.e;
    65aa:	f88d 301c 	strb.w	r3, [sp, #28]
    65ae:	f7f9 ffbf 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    65b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    65b6:	464a      	mov	r2, r9
    65b8:	4641      	mov	r1, r8
    65ba:	4620      	mov	r0, r4
    65bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    65c0:	ab06      	add	r3, sp, #24
      {
    65c2:	f8cd a020 	str.w	sl, [sp, #32]
    65c6:	9500      	str	r5, [sp, #0]
    65c8:	47b0      	blx	r6
  class ActiveLogger_Enabled :
    65ca:	4628      	mov	r0, r5
    65cc:	f8cd a020 	str.w	sl, [sp, #32]
    65d0:	f7f9 ffb4 	bl	53c <Fw::Serializable::~Serializable()>
  class ActiveLogger_FilterSeverity :
    65d4:	a806      	add	r0, sp, #24
    65d6:	9706      	str	r7, [sp, #24]
    65d8:	f7f9 ffb0 	bl	53c <Fw::Serializable::~Serializable()>
    65dc:	a804      	add	r0, sp, #16
    65de:	f8cd a010 	str.w	sl, [sp, #16]
    65e2:	f7f9 ffab 	bl	53c <Fw::Serializable::~Serializable()>
    65e6:	a802      	add	r0, sp, #8
    65e8:	9702      	str	r7, [sp, #8]
    65ea:	f7f9 ffa7 	bl	53c <Fw::Serializable::~Serializable()>
  }
    65ee:	b00a      	add	sp, #40	; 0x28
    65f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    65f4:	f504 648a 	add.w	r4, r4, #1104	; 0x450
    65f8:	4620      	mov	r0, r4
    65fa:	f011 fc27 	bl	17e4c <Fw::PortBase::isConnected() const>
    65fe:	bb28      	cbnz	r0, 664c <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>
    6600:	a804      	add	r0, sp, #16
    6602:	f8cd a010 	str.w	sl, [sp, #16]
    6606:	f7f9 ff99 	bl	53c <Fw::Serializable::~Serializable()>
    660a:	a802      	add	r0, sp, #8
    660c:	9702      	str	r7, [sp, #8]
    660e:	f7f9 ff95 	bl	53c <Fw::Serializable::~Serializable()>
  }
    6612:	b00a      	add	sp, #40	; 0x28
    6614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    6618:	f504 648a 	add.w	r4, r4, #1104	; 0x450
    661c:	4620      	mov	r0, r4
    661e:	f011 fc15 	bl	17e4c <Fw::PortBase::isConnected() const>
    6622:	2800      	cmp	r0, #0
    6624:	d0f1      	beq.n	660a <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc2>
      {
    6626:	a808      	add	r0, sp, #32
    6628:	4d13      	ldr	r5, [pc, #76]	; (6678 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x130>)
    662a:	f7f9 ff81 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    662e:	2303      	movs	r3, #3
        this->m_CmdStatus_OutputPort[0].invoke(
    6630:	4620      	mov	r0, r4
    6632:	464a      	mov	r2, r9
    6634:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    6638:	4641      	mov	r1, r8
    663a:	ab08      	add	r3, sp, #32
      {
    663c:	9508      	str	r5, [sp, #32]
    663e:	f00f ff4d 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    6642:	a808      	add	r0, sp, #32
    6644:	9508      	str	r5, [sp, #32]
    6646:	f7f9 ff79 	bl	53c <Fw::Serializable::~Serializable()>
    664a:	e7de      	b.n	660a <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc2>
      {
    664c:	a808      	add	r0, sp, #32
    664e:	4d0a      	ldr	r5, [pc, #40]	; (6678 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x130>)
    6650:	f7f9 ff6e 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6654:	2303      	movs	r3, #3
        this->m_CmdStatus_OutputPort[0].invoke(
    6656:	4620      	mov	r0, r4
    6658:	464a      	mov	r2, r9
    665a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    665e:	4641      	mov	r1, r8
    6660:	ab08      	add	r3, sp, #32
      {
    6662:	9508      	str	r5, [sp, #32]
    6664:	f00f ff3a 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    6668:	a808      	add	r0, sp, #32
    666a:	9508      	str	r5, [sp, #32]
    666c:	f7f9 ff66 	bl	53c <Fw::Serializable::~Serializable()>
    6670:	e7c6      	b.n	6600 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xb8>
    6672:	bf00      	nop
    6674:	20003da0 	.word	0x20003da0
    6678:	20002bec 	.word	0x20002bec
    667c:	20003bb8 	.word	0x20003bb8

00006680 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    6680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6684:	461e      	mov	r6, r3
    this->SET_ID_FILTER_preMsgHook(opCode,cmdSeq);
    6686:	6803      	ldr	r3, [r0, #0]
    6688:	4d3c      	ldr	r5, [pc, #240]	; (677c <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xfc>)
  {
    668a:	b0aa      	sub	sp, #168	; 0xa8
    this->SET_ID_FILTER_preMsgHook(opCode,cmdSeq);
    668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    668e:	4604      	mov	r4, r0
    6690:	4688      	mov	r8, r1
    6692:	4617      	mov	r7, r2
    6694:	42ab      	cmp	r3, r5
    6696:	d16f      	bne.n	6778 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xf8>
    class ComponentIpcSerializableBuffer :
    6698:	4d39      	ldr	r5, [pc, #228]	; (6780 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x100>)
    669a:	a801      	add	r0, sp, #4
    669c:	f7f9 ff50 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_SET_ID_FILTER));
    66a0:	2102      	movs	r1, #2
    66a2:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    66a4:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_SET_ID_FILTER));
    66a6:	f7fa f83f 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    66aa:	bb38      	cbnz	r0, 66fc <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>
    _status = msg.serialize(port);
    66ac:	2100      	movs	r1, #0
    66ae:	a801      	add	r0, sp, #4
    66b0:	f7fa f83a 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    66b4:	2800      	cmp	r0, #0
    66b6:	d12d      	bne.n	6714 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
    _status = msg.serialize(opCode);
    66b8:	4641      	mov	r1, r8
    66ba:	a801      	add	r0, sp, #4
    66bc:	f7f9 ffce 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    66c0:	2800      	cmp	r0, #0
    66c2:	d133      	bne.n	672c <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xac>
    _status = msg.serialize(cmdSeq);
    66c4:	4639      	mov	r1, r7
    66c6:	a801      	add	r0, sp, #4
    66c8:	f7f9 ffc8 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    66cc:	2800      	cmp	r0, #0
    66ce:	d139      	bne.n	6744 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc4>
    _status = msg.serialize(args);
    66d0:	4631      	mov	r1, r6
    66d2:	a801      	add	r0, sp, #4
    66d4:	f7fa fa1a 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    66d8:	2800      	cmp	r0, #0
    66da:	d13f      	bne.n	675c <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xdc>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    66dc:	2301      	movs	r3, #1
    66de:	2200      	movs	r2, #0
    66e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
    66e4:	a901      	add	r1, sp, #4
    66e6:	f00b fb33 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    66ea:	2800      	cmp	r0, #0
    66ec:	d13d      	bne.n	676a <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xea>
    class ComponentIpcSerializableBuffer :
    66ee:	a801      	add	r0, sp, #4
    66f0:	9501      	str	r5, [sp, #4]
    66f2:	f7f9 ff2d 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    66f6:	b02a      	add	sp, #168	; 0xa8
    66f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    66fc:	4601      	mov	r1, r0
    66fe:	f240 428e 	movw	r2, #1166	; 0x48e
    6702:	4820      	ldr	r0, [pc, #128]	; (6784 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    6704:	f7fa ff90 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(port);
    6708:	2100      	movs	r1, #0
    670a:	a801      	add	r0, sp, #4
    670c:	f7fa f80c 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    6710:	2800      	cmp	r0, #0
    6712:	d0d1      	beq.n	66b8 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x38>
    6714:	4601      	mov	r1, r0
    6716:	f240 4297 	movw	r2, #1175	; 0x497
    671a:	481a      	ldr	r0, [pc, #104]	; (6784 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    671c:	f7fa ff84 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    6720:	4641      	mov	r1, r8
    6722:	a801      	add	r0, sp, #4
    6724:	f7f9 ff9a 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    6728:	2800      	cmp	r0, #0
    672a:	d0cb      	beq.n	66c4 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x44>
    672c:	4601      	mov	r1, r0
    672e:	f240 429d 	movw	r2, #1181	; 0x49d
    6732:	4814      	ldr	r0, [pc, #80]	; (6784 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    6734:	f7fa ff78 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    6738:	4639      	mov	r1, r7
    673a:	a801      	add	r0, sp, #4
    673c:	f7f9 ff8e 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    6740:	2800      	cmp	r0, #0
    6742:	d0c5      	beq.n	66d0 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x50>
    6744:	4601      	mov	r1, r0
    6746:	f240 42a3 	movw	r2, #1187	; 0x4a3
    674a:	480e      	ldr	r0, [pc, #56]	; (6784 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    674c:	f7fa ff6c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    6750:	4631      	mov	r1, r6
    6752:	a801      	add	r0, sp, #4
    6754:	f7fa f9da 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    6758:	2800      	cmp	r0, #0
    675a:	d0bf      	beq.n	66dc <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    675c:	4601      	mov	r1, r0
    675e:	f240 42a9 	movw	r2, #1193	; 0x4a9
    6762:	4808      	ldr	r0, [pc, #32]	; (6784 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    6764:	f7fa ff60 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6768:	e7b8      	b.n	66dc <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    FW_ASSERT(
    676a:	4601      	mov	r1, r0
    676c:	f240 42b2 	movw	r2, #1202	; 0x4b2
    6770:	4804      	ldr	r0, [pc, #16]	; (6784 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    6772:	f7fa ff59 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6776:	e7ba      	b.n	66ee <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6e>
    this->SET_ID_FILTER_preMsgHook(opCode,cmdSeq);
    6778:	4798      	blx	r3
    677a:	e78d      	b.n	6698 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x18>
    677c:	00005b85 	.word	0x00005b85
    6780:	2000396c 	.word	0x2000396c
    6784:	20001618 	.word	0x20001618

00006788 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    6788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    678c:	461e      	mov	r6, r3
    this->DUMP_FILTER_STATE_preMsgHook(opCode,cmdSeq);
    678e:	6803      	ldr	r3, [r0, #0]
    6790:	4d3c      	ldr	r5, [pc, #240]	; (6884 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xfc>)
  {
    6792:	b0aa      	sub	sp, #168	; 0xa8
    this->DUMP_FILTER_STATE_preMsgHook(opCode,cmdSeq);
    6794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    6796:	4604      	mov	r4, r0
    6798:	4688      	mov	r8, r1
    679a:	4617      	mov	r7, r2
    679c:	42ab      	cmp	r3, r5
    679e:	d16f      	bne.n	6880 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xf8>
    class ComponentIpcSerializableBuffer :
    67a0:	4d39      	ldr	r5, [pc, #228]	; (6888 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x100>)
    67a2:	a801      	add	r0, sp, #4
    67a4:	f7f9 fecc 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_DUMP_FILTER_STATE));
    67a8:	2103      	movs	r1, #3
    67aa:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    67ac:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_DUMP_FILTER_STATE));
    67ae:	f7f9 ffbb 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    67b2:	bb38      	cbnz	r0, 6804 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>
    _status = msg.serialize(port);
    67b4:	2100      	movs	r1, #0
    67b6:	a801      	add	r0, sp, #4
    67b8:	f7f9 ffb6 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    67bc:	2800      	cmp	r0, #0
    67be:	d12d      	bne.n	681c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
    _status = msg.serialize(opCode);
    67c0:	4641      	mov	r1, r8
    67c2:	a801      	add	r0, sp, #4
    67c4:	f7f9 ff4a 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    67c8:	2800      	cmp	r0, #0
    67ca:	d133      	bne.n	6834 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xac>
    _status = msg.serialize(cmdSeq);
    67cc:	4639      	mov	r1, r7
    67ce:	a801      	add	r0, sp, #4
    67d0:	f7f9 ff44 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    67d4:	2800      	cmp	r0, #0
    67d6:	d139      	bne.n	684c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc4>
    _status = msg.serialize(args);
    67d8:	4631      	mov	r1, r6
    67da:	a801      	add	r0, sp, #4
    67dc:	f7fa f996 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    67e0:	2800      	cmp	r0, #0
    67e2:	d13f      	bne.n	6864 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xdc>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    67e4:	2301      	movs	r3, #1
    67e6:	2200      	movs	r2, #0
    67e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
    67ec:	a901      	add	r1, sp, #4
    67ee:	f00b faaf 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    67f2:	2800      	cmp	r0, #0
    67f4:	d13d      	bne.n	6872 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xea>
    class ComponentIpcSerializableBuffer :
    67f6:	a801      	add	r0, sp, #4
    67f8:	9501      	str	r5, [sp, #4]
    67fa:	f7f9 fea9 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    67fe:	b02a      	add	sp, #168	; 0xa8
    6800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    6804:	4601      	mov	r1, r0
    6806:	f240 42c9 	movw	r2, #1225	; 0x4c9
    680a:	4820      	ldr	r0, [pc, #128]	; (688c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    680c:	f7fa ff0c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(port);
    6810:	2100      	movs	r1, #0
    6812:	a801      	add	r0, sp, #4
    6814:	f7f9 ff88 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    6818:	2800      	cmp	r0, #0
    681a:	d0d1      	beq.n	67c0 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x38>
    681c:	4601      	mov	r1, r0
    681e:	f240 42d2 	movw	r2, #1234	; 0x4d2
    6822:	481a      	ldr	r0, [pc, #104]	; (688c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    6824:	f7fa ff00 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    6828:	4641      	mov	r1, r8
    682a:	a801      	add	r0, sp, #4
    682c:	f7f9 ff16 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    6830:	2800      	cmp	r0, #0
    6832:	d0cb      	beq.n	67cc <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x44>
    6834:	4601      	mov	r1, r0
    6836:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
    683a:	4814      	ldr	r0, [pc, #80]	; (688c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    683c:	f7fa fef4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    6840:	4639      	mov	r1, r7
    6842:	a801      	add	r0, sp, #4
    6844:	f7f9 ff0a 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    6848:	2800      	cmp	r0, #0
    684a:	d0c5      	beq.n	67d8 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x50>
    684c:	4601      	mov	r1, r0
    684e:	f240 42de 	movw	r2, #1246	; 0x4de
    6852:	480e      	ldr	r0, [pc, #56]	; (688c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    6854:	f7fa fee8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    6858:	4631      	mov	r1, r6
    685a:	a801      	add	r0, sp, #4
    685c:	f7fa f956 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    6860:	2800      	cmp	r0, #0
    6862:	d0bf      	beq.n	67e4 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    6864:	4601      	mov	r1, r0
    6866:	f240 42e4 	movw	r2, #1252	; 0x4e4
    686a:	4808      	ldr	r0, [pc, #32]	; (688c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    686c:	f7fa fedc 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6870:	e7b8      	b.n	67e4 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    FW_ASSERT(
    6872:	4601      	mov	r1, r0
    6874:	f240 42ed 	movw	r2, #1261	; 0x4ed
    6878:	4804      	ldr	r0, [pc, #16]	; (688c <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    687a:	f7fa fed5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    687e:	e7ba      	b.n	67f6 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6e>
    this->DUMP_FILTER_STATE_preMsgHook(opCode,cmdSeq);
    6880:	4798      	blx	r3
    6882:	e78d      	b.n	67a0 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x18>
    6884:	00005b85 	.word	0x00005b85
    6888:	2000396c 	.word	0x2000396c
    688c:	20001618 	.word	0x20001618

00006890 <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    6890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6894:	9f06      	ldr	r7, [sp, #24]
    6896:	4615      	mov	r5, r2
    FW_ASSERT(callComp);
    6898:	4606      	mov	r6, r0
  {
    689a:	4698      	mov	r8, r3
    FW_ASSERT(callComp);
    689c:	b378      	cbz	r0, 68fe <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6e>
    const U32 idBase = callComp->getIdBase();
    689e:	4630      	mov	r0, r6
    68a0:	f00b fb28 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    68a4:	42a8      	cmp	r0, r5
    const U32 idBase = callComp->getIdBase();
    68a6:	4604      	mov	r4, r0
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    68a8:	d807      	bhi.n	68ba <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x2a>
    switch (opCode - idBase) {
    68aa:	1b2c      	subs	r4, r5, r4
    68ac:	2c02      	cmp	r4, #2
    68ae:	d00e      	beq.n	68ce <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x3e>
    68b0:	2c03      	cmp	r4, #3
    68b2:	d01c      	beq.n	68ee <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5e>
    68b4:	b19c      	cbz	r4, 68de <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x4e>
  }
    68b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (opCode - idBase) {
    68ba:	1b2c      	subs	r4, r5, r4
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    68bc:	4602      	mov	r2, r0
    68be:	f240 73e5 	movw	r3, #2021	; 0x7e5
    68c2:	4629      	mov	r1, r5
    68c4:	4811      	ldr	r0, [pc, #68]	; (690c <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>)
    68c6:	f7fa febf 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    switch (opCode - idBase) {
    68ca:	2c02      	cmp	r4, #2
    68cc:	d1f0      	bne.n	68b0 <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x20>
        compPtr->SET_ID_FILTER_cmdHandlerBase(
    68ce:	463b      	mov	r3, r7
    68d0:	4642      	mov	r2, r8
    68d2:	4629      	mov	r1, r5
    68d4:	4630      	mov	r0, r6
  }
    68d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->SET_ID_FILTER_cmdHandlerBase(
    68da:	f7ff bed1 	b.w	6680 <Svc::ActiveLoggerComponentBase::SET_ID_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
        compPtr->SET_EVENT_FILTER_cmdHandlerBase(
    68de:	463b      	mov	r3, r7
    68e0:	4642      	mov	r2, r8
    68e2:	4629      	mov	r1, r5
    68e4:	4630      	mov	r0, r6
  }
    68e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->SET_EVENT_FILTER_cmdHandlerBase(
    68ea:	f7ff be2d 	b.w	6548 <Svc::ActiveLoggerComponentBase::SET_EVENT_FILTER_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
        compPtr->DUMP_FILTER_STATE_cmdHandlerBase(
    68ee:	463b      	mov	r3, r7
    68f0:	4642      	mov	r2, r8
    68f2:	4629      	mov	r1, r5
    68f4:	4630      	mov	r0, r6
  }
    68f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->DUMP_FILTER_STATE_cmdHandlerBase(
    68fa:	f7ff bf45 	b.w	6788 <Svc::ActiveLoggerComponentBase::DUMP_FILTER_STATE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
    FW_ASSERT(callComp);
    68fe:	f240 71e1 	movw	r1, #2017	; 0x7e1
    6902:	4802      	ldr	r0, [pc, #8]	; (690c <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>)
    6904:	f7fa fe82 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    6908:	e7c9      	b.n	689e <Svc::ActiveLoggerComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xe>
    690a:	bf00      	nop
    690c:	20001618 	.word	0x20001618

00006910 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const>:
  {
    6910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6914:	4604      	mov	r4, r0
    6916:	b0cd      	sub	sp, #308	; 0x134
    6918:	460e      	mov	r6, r1
    691a:	4615      	mov	r5, r2
    if (this->m_Time_OutputPort[0].isConnected()) {
    691c:	f204 5794 	addw	r7, r4, #1428	; 0x594
    Fw::Time _logTime;
    6920:	a804      	add	r0, sp, #16
    6922:	f010 ffc5 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    6926:	4638      	mov	r0, r7
    6928:	f011 fa90 	bl	17e4c <Fw::PortBase::isConnected() const>
    692c:	b9b0      	cbnz	r0, 695c <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x4c>
    if (this->m_Log_OutputPort[0].isConnected()) {
    692e:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
    _id = this->getIdBase() + EVENTID_SEVERITY_FILTER_STATE;
    6932:	4620      	mov	r0, r4
    6934:	f00b fade 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    6938:	4680      	mov	r8, r0
    if (this->m_Log_OutputPort[0].isConnected()) {
    693a:	4638      	mov	r0, r7
    693c:	f011 fa86 	bl	17e4c <Fw::PortBase::isConnected() const>
    6940:	2800      	cmp	r0, #0
    6942:	d15a      	bne.n	69fa <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0xea>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    6944:	f504 67a5 	add.w	r7, r4, #1320	; 0x528
    6948:	4638      	mov	r0, r7
    694a:	f011 fa7f 	bl	17e4c <Fw::PortBase::isConnected() const>
    694e:	b950      	cbnz	r0, 6966 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x56>
  }
    6950:	a804      	add	r0, sp, #16
    6952:	f010 ff55 	bl	17800 <Fw::Time::~Time()>
    6956:	b04d      	add	sp, #308	; 0x134
    6958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    695c:	4638      	mov	r0, r7
    695e:	a904      	add	r1, sp, #16
    6960:	f011 f92c 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    6964:	e7e3      	b.n	692e <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x1e>
    String() : StringBase() { *this = ""; }
    6966:	f8df a120 	ldr.w	sl, [pc, #288]	; 6a88 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x178>
    696a:	a808      	add	r0, sp, #32
    696c:	f7fa fc58 	bl	1220 <Fw::StringBase::StringBase()>
    TextLogString() : StringBase() { *this = ""; }
    6970:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
        (void)StringBase::operator=(src);
    6974:	493f      	ldr	r1, [pc, #252]	; (6a74 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x164>)
    6976:	a808      	add	r0, sp, #32
    String() : StringBase() { *this = ""; }
    6978:	f8cd a020 	str.w	sl, [sp, #32]
        (void)StringBase::operator=(src);
    697c:	f7fa fcb8 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      severity.toString(severityStr);
    6980:	a908      	add	r1, sp, #32
    6982:	4630      	mov	r0, r6
    6984:	f000 fd6c 	bl	7460 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const>
    6988:	f8df b100 	ldr.w	fp, [pc, #256]	; 6a8c <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x17c>
    698c:	4648      	mov	r0, r9
    698e:	f7fa fc47 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    6992:	4938      	ldr	r1, [pc, #224]	; (6a74 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x164>)
    6994:	4648      	mov	r0, r9
    TextLogString() : StringBase() { *this = ""; }
    6996:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
        (void)StringBase::operator=(src);
    699a:	f7fa fca9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    699e:	ab09      	add	r3, sp, #36	; 0x24
    69a0:	f104 0208 	add.w	r2, r4, #8
    69a4:	4934      	ldr	r1, [pc, #208]	; (6a78 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x168>)
    69a6:	9300      	str	r3, [sp, #0]
    69a8:	4648      	mov	r0, r9
    69aa:	4b34      	ldr	r3, [pc, #208]	; (6a7c <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x16c>)
    69ac:	9501      	str	r5, [sp, #4]
    69ae:	f7fa fc6d 	bl	128c <Fw::StringBase::format(char const*, ...)>
      {
    69b2:	a802      	add	r0, sp, #8
    69b4:	f7f9 fdbc 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    69b8:	2306      	movs	r3, #6
      {
    69ba:	4c31      	ldr	r4, [pc, #196]	; (6a80 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x170>)
      this->m_LogText_OutputPort[0].invoke(
    69bc:	4641      	mov	r1, r8
    69be:	aa04      	add	r2, sp, #16
    69c0:	4638      	mov	r0, r7
        this->e = e1;
    69c2:	f88d 300c 	strb.w	r3, [sp, #12]
    69c6:	ab02      	add	r3, sp, #8
    69c8:	f8cd 9000 	str.w	r9, [sp]
      {
    69cc:	9402      	str	r4, [sp, #8]
    69ce:	f010 f9a1 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    69d2:	a802      	add	r0, sp, #8
    69d4:	9402      	str	r4, [sp, #8]
    69d6:	f7f9 fdb1 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    69da:	4648      	mov	r0, r9
    69dc:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
    69e0:	f7fa fc28 	bl	1234 <Fw::StringBase::~StringBase()>
    ~String() {}
    69e4:	a808      	add	r0, sp, #32
    69e6:	f8cd a020 	str.w	sl, [sp, #32]
    69ea:	f7fa fc23 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    69ee:	a804      	add	r0, sp, #16
    69f0:	f010 ff06 	bl	17800 <Fw::Time::~Time()>
    69f4:	b04d      	add	sp, #308	; 0x134
    69f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Fw::LogBuffer _logBuff;
    69fa:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    69fe:	4648      	mov	r0, r9
    6a00:	f00f fdea 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(severity);
    6a04:	4631      	mov	r1, r6
    6a06:	4648      	mov	r0, r9
    6a08:	f7fa f87a 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    6a0c:	b9f8      	cbnz	r0, 6a4e <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x13e>
      _status = _logBuff.serialize(enabled);
    6a0e:	4629      	mov	r1, r5
    6a10:	4648      	mov	r0, r9
    6a12:	f7f9 ff95 	bl	940 <Fw::SerializeBufferBase::serialize(bool)>
      FW_ASSERT(
    6a16:	bb30      	cbnz	r0, 6a66 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x156>
      {
    6a18:	a808      	add	r0, sp, #32
    6a1a:	f8df a064 	ldr.w	sl, [pc, #100]	; 6a80 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x170>
    6a1e:	f7f9 fd87 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6a22:	2306      	movs	r3, #6
      this->m_Log_OutputPort[0].invoke(
    6a24:	4638      	mov	r0, r7
    6a26:	aa04      	add	r2, sp, #16
    6a28:	4641      	mov	r1, r8
    6a2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    6a2e:	f8cd 9000 	str.w	r9, [sp]
    6a32:	ab08      	add	r3, sp, #32
      {
    6a34:	f8cd a020 	str.w	sl, [sp, #32]
    6a38:	f00f ff54 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    6a3c:	a808      	add	r0, sp, #32
    6a3e:	f8cd a020 	str.w	sl, [sp, #32]
    6a42:	f7f9 fd7b 	bl	53c <Fw::Serializable::~Serializable()>
    }
    6a46:	4648      	mov	r0, r9
    6a48:	f00f fdae 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    6a4c:	e77a      	b.n	6944 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x34>
      FW_ASSERT(
    6a4e:	4601      	mov	r1, r0
    6a50:	f240 523e 	movw	r2, #1342	; 0x53e
    6a54:	480b      	ldr	r0, [pc, #44]	; (6a84 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x174>)
    6a56:	f7fa fde7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(enabled);
    6a5a:	4629      	mov	r1, r5
    6a5c:	4648      	mov	r0, r9
    6a5e:	f7f9 ff6f 	bl	940 <Fw::SerializeBufferBase::serialize(bool)>
      FW_ASSERT(
    6a62:	2800      	cmp	r0, #0
    6a64:	d0d8      	beq.n	6a18 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x108>
    6a66:	4601      	mov	r1, r0
    6a68:	f240 524e 	movw	r2, #1358	; 0x54e
    6a6c:	4805      	ldr	r0, [pc, #20]	; (6a84 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x174>)
    6a6e:	f7fa fddb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6a72:	e7d1      	b.n	6a18 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_LO_SEVERITY_FILTER_STATE(Svc::ActiveLogger_FilterSeverity, bool) const+0x108>
    6a74:	20001d2c 	.word	0x20001d2c
    6a78:	20002608 	.word	0x20002608
    6a7c:	200025f0 	.word	0x200025f0
    6a80:	20002c08 	.word	0x20002c08
    6a84:	20001618 	.word	0x20001618
    6a88:	200032dc 	.word	0x200032dc
    6a8c:	20002f60 	.word	0x20002f60

00006a90 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const>:
  {
    6a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a94:	4604      	mov	r4, r0
    6a96:	b0aa      	sub	sp, #168	; 0xa8
    6a98:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    6a9a:	f204 5594 	addw	r5, r4, #1428	; 0x594
    Fw::Time _logTime;
    6a9e:	a804      	add	r0, sp, #16
    6aa0:	f010 ff06 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    6aa4:	4628      	mov	r0, r5
    6aa6:	f011 f9d1 	bl	17e4c <Fw::PortBase::isConnected() const>
    6aaa:	b9b0      	cbnz	r0, 6ada <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    6aac:	f204 45bc 	addw	r5, r4, #1212	; 0x4bc
    _id = this->getIdBase() + EVENTID_ID_FILTER_ENABLED;
    6ab0:	4620      	mov	r0, r4
    6ab2:	f00b fa1f 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    6ab6:	1c47      	adds	r7, r0, #1
    if (this->m_Log_OutputPort[0].isConnected()) {
    6ab8:	4628      	mov	r0, r5
    6aba:	f011 f9c7 	bl	17e4c <Fw::PortBase::isConnected() const>
    6abe:	2800      	cmp	r0, #0
    6ac0:	d147      	bne.n	6b52 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    6ac2:	f504 65a5 	add.w	r5, r4, #1320	; 0x528
    6ac6:	4628      	mov	r0, r5
    6ac8:	f011 f9c0 	bl	17e4c <Fw::PortBase::isConnected() const>
    6acc:	b950      	cbnz	r0, 6ae4 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x54>
  }
    6ace:	a804      	add	r0, sp, #16
    6ad0:	f010 fe96 	bl	17800 <Fw::Time::~Time()>
    6ad4:	b02a      	add	sp, #168	; 0xa8
    6ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    6ada:	a904      	add	r1, sp, #16
    6adc:	4628      	mov	r0, r5
    6ade:	f011 f86d 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    6ae2:	e7e3      	b.n	6aac <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    6ae4:	f10d 0820 	add.w	r8, sp, #32
    6ae8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 6bbc <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x12c>
      {
    6aec:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 6bc0 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x130>
    6af0:	4640      	mov	r0, r8
    6af2:	f7fa fb95 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    6af6:	492d      	ldr	r1, [pc, #180]	; (6bac <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x11c>)
    6af8:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    6afa:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    6afe:	f7fa fbf7 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    6b02:	f104 0208 	add.w	r2, r4, #8
    6b06:	4b2a      	ldr	r3, [pc, #168]	; (6bb0 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x120>)
    6b08:	4640      	mov	r0, r8
    6b0a:	492a      	ldr	r1, [pc, #168]	; (6bb4 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x124>)
    6b0c:	9600      	str	r6, [sp, #0]
    6b0e:	f7fa fbbd 	bl	128c <Fw::StringBase::format(char const*, ...)>
    6b12:	a802      	add	r0, sp, #8
    6b14:	f7f9 fd0c 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6b18:	2305      	movs	r3, #5
      this->m_LogText_OutputPort[0].invoke(
    6b1a:	4639      	mov	r1, r7
    6b1c:	aa04      	add	r2, sp, #16
    6b1e:	4628      	mov	r0, r5
    6b20:	f88d 300c 	strb.w	r3, [sp, #12]
    6b24:	f8cd 8000 	str.w	r8, [sp]
    6b28:	ab02      	add	r3, sp, #8
      {
    6b2a:	f8cd a008 	str.w	sl, [sp, #8]
    6b2e:	f010 f8f1 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    6b32:	a802      	add	r0, sp, #8
    6b34:	f8cd a008 	str.w	sl, [sp, #8]
    6b38:	f7f9 fd00 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    6b3c:	4640      	mov	r0, r8
    6b3e:	f8cd 9020 	str.w	r9, [sp, #32]
    6b42:	f7fa fb77 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    6b46:	a804      	add	r0, sp, #16
    6b48:	f010 fe5a 	bl	17800 <Fw::Time::~Time()>
    6b4c:	b02a      	add	sp, #168	; 0xa8
    6b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    6b52:	f10d 0820 	add.w	r8, sp, #32
    6b56:	4640      	mov	r0, r8
    6b58:	f00f fd3e 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(ID);
    6b5c:	4631      	mov	r1, r6
    6b5e:	4640      	mov	r0, r8
    6b60:	f7f9 fd7c 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    6b64:	b9d0      	cbnz	r0, 6b9c <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x10c>
      {
    6b66:	a802      	add	r0, sp, #8
    6b68:	f8df 9054 	ldr.w	r9, [pc, #84]	; 6bc0 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x130>
    6b6c:	f7f9 fce0 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6b70:	2305      	movs	r3, #5
      this->m_Log_OutputPort[0].invoke(
    6b72:	4628      	mov	r0, r5
    6b74:	aa04      	add	r2, sp, #16
    6b76:	4639      	mov	r1, r7
    6b78:	f88d 300c 	strb.w	r3, [sp, #12]
    6b7c:	f8cd 8000 	str.w	r8, [sp]
    6b80:	ab02      	add	r3, sp, #8
      {
    6b82:	f8cd 9008 	str.w	r9, [sp, #8]
    6b86:	f00f fead 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    6b8a:	a802      	add	r0, sp, #8
    6b8c:	f8cd 9008 	str.w	r9, [sp, #8]
    6b90:	f7f9 fcd4 	bl	53c <Fw::Serializable::~Serializable()>
    }
    6b94:	4640      	mov	r0, r8
    6b96:	f00f fd07 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    6b9a:	e792      	b.n	6ac2 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x32>
      FW_ASSERT(
    6b9c:	4601      	mov	r1, r0
    6b9e:	f240 52a4 	movw	r2, #1444	; 0x5a4
    6ba2:	4805      	ldr	r0, [pc, #20]	; (6bb8 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0x128>)
    6ba4:	f7fa fd40 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6ba8:	e7dd      	b.n	6b66 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_ENABLED(unsigned long) const+0xd6>
    6baa:	bf00      	nop
    6bac:	20001d2c 	.word	0x20001d2c
    6bb0:	200024f4 	.word	0x200024f4
    6bb4:	20002508 	.word	0x20002508
    6bb8:	20001618 	.word	0x20001618
    6bbc:	20002f60 	.word	0x20002f60
    6bc0:	20002c08 	.word	0x20002c08

00006bc4 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const>:
  {
    6bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bc8:	4604      	mov	r4, r0
    6bca:	b0aa      	sub	sp, #168	; 0xa8
    6bcc:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    6bce:	f204 5594 	addw	r5, r4, #1428	; 0x594
    Fw::Time _logTime;
    6bd2:	a804      	add	r0, sp, #16
    6bd4:	f010 fe6c 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    6bd8:	4628      	mov	r0, r5
    6bda:	f011 f937 	bl	17e4c <Fw::PortBase::isConnected() const>
    6bde:	b9b0      	cbnz	r0, 6c0e <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    6be0:	f204 45bc 	addw	r5, r4, #1212	; 0x4bc
    _id = this->getIdBase() + EVENTID_ID_FILTER_LIST_FULL;
    6be4:	4620      	mov	r0, r4
    6be6:	f00b f985 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    6bea:	1c87      	adds	r7, r0, #2
    if (this->m_Log_OutputPort[0].isConnected()) {
    6bec:	4628      	mov	r0, r5
    6bee:	f011 f92d 	bl	17e4c <Fw::PortBase::isConnected() const>
    6bf2:	2800      	cmp	r0, #0
    6bf4:	d147      	bne.n	6c86 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    6bf6:	f504 65a5 	add.w	r5, r4, #1320	; 0x528
    6bfa:	4628      	mov	r0, r5
    6bfc:	f011 f926 	bl	17e4c <Fw::PortBase::isConnected() const>
    6c00:	b950      	cbnz	r0, 6c18 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x54>
  }
    6c02:	a804      	add	r0, sp, #16
    6c04:	f010 fdfc 	bl	17800 <Fw::Time::~Time()>
    6c08:	b02a      	add	sp, #168	; 0xa8
    6c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    6c0e:	a904      	add	r1, sp, #16
    6c10:	4628      	mov	r0, r5
    6c12:	f010 ffd3 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    6c16:	e7e3      	b.n	6be0 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    6c18:	f10d 0820 	add.w	r8, sp, #32
    6c1c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 6cf0 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x12c>
      {
    6c20:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 6cf4 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x130>
    6c24:	4640      	mov	r0, r8
    6c26:	f7fa fafb 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    6c2a:	492d      	ldr	r1, [pc, #180]	; (6ce0 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x11c>)
    6c2c:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    6c2e:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    6c32:	f7fa fb5d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    6c36:	f104 0208 	add.w	r2, r4, #8
    6c3a:	4b2a      	ldr	r3, [pc, #168]	; (6ce4 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x120>)
    6c3c:	4640      	mov	r0, r8
    6c3e:	492a      	ldr	r1, [pc, #168]	; (6ce8 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x124>)
    6c40:	9600      	str	r6, [sp, #0]
    6c42:	f7fa fb23 	bl	128c <Fw::StringBase::format(char const*, ...)>
    6c46:	a802      	add	r0, sp, #8
    6c48:	f7f9 fc72 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6c4c:	2303      	movs	r3, #3
      this->m_LogText_OutputPort[0].invoke(
    6c4e:	4639      	mov	r1, r7
    6c50:	aa04      	add	r2, sp, #16
    6c52:	4628      	mov	r0, r5
    6c54:	f88d 300c 	strb.w	r3, [sp, #12]
    6c58:	f8cd 8000 	str.w	r8, [sp]
    6c5c:	ab02      	add	r3, sp, #8
      {
    6c5e:	f8cd a008 	str.w	sl, [sp, #8]
    6c62:	f010 f857 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    6c66:	a802      	add	r0, sp, #8
    6c68:	f8cd a008 	str.w	sl, [sp, #8]
    6c6c:	f7f9 fc66 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    6c70:	4640      	mov	r0, r8
    6c72:	f8cd 9020 	str.w	r9, [sp, #32]
    6c76:	f7fa fadd 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    6c7a:	a804      	add	r0, sp, #16
    6c7c:	f010 fdc0 	bl	17800 <Fw::Time::~Time()>
    6c80:	b02a      	add	sp, #168	; 0xa8
    6c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    6c86:	f10d 0820 	add.w	r8, sp, #32
    6c8a:	4640      	mov	r0, r8
    6c8c:	f00f fca4 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(ID);
    6c90:	4631      	mov	r1, r6
    6c92:	4640      	mov	r0, r8
    6c94:	f7f9 fce2 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    6c98:	b9d0      	cbnz	r0, 6cd0 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x10c>
      {
    6c9a:	a802      	add	r0, sp, #8
    6c9c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 6cf4 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x130>
    6ca0:	f7f9 fc46 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6ca4:	2303      	movs	r3, #3
      this->m_Log_OutputPort[0].invoke(
    6ca6:	4628      	mov	r0, r5
    6ca8:	aa04      	add	r2, sp, #16
    6caa:	4639      	mov	r1, r7
    6cac:	f88d 300c 	strb.w	r3, [sp, #12]
    6cb0:	f8cd 8000 	str.w	r8, [sp]
    6cb4:	ab02      	add	r3, sp, #8
      {
    6cb6:	f8cd 9008 	str.w	r9, [sp, #8]
    6cba:	f00f fe13 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    6cbe:	a802      	add	r0, sp, #8
    6cc0:	f8cd 9008 	str.w	r9, [sp, #8]
    6cc4:	f7f9 fc3a 	bl	53c <Fw::Serializable::~Serializable()>
    }
    6cc8:	4640      	mov	r0, r8
    6cca:	f00f fc6d 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    6cce:	e792      	b.n	6bf6 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x32>
      FW_ASSERT(
    6cd0:	4601      	mov	r1, r0
    6cd2:	f240 52f6 	movw	r2, #1526	; 0x5f6
    6cd6:	4805      	ldr	r0, [pc, #20]	; (6cec <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0x128>)
    6cd8:	f7fa fca6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6cdc:	e7dd      	b.n	6c9a <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_LIST_FULL(unsigned long) const+0xd6>
    6cde:	bf00      	nop
    6ce0:	20001d2c 	.word	0x20001d2c
    6ce4:	20002560 	.word	0x20002560
    6ce8:	20002578 	.word	0x20002578
    6cec:	20001618 	.word	0x20001618
    6cf0:	20002f60 	.word	0x20002f60
    6cf4:	20002c08 	.word	0x20002c08

00006cf8 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const>:
  {
    6cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cfc:	4604      	mov	r4, r0
    6cfe:	b0aa      	sub	sp, #168	; 0xa8
    6d00:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    6d02:	f204 5594 	addw	r5, r4, #1428	; 0x594
    Fw::Time _logTime;
    6d06:	a804      	add	r0, sp, #16
    6d08:	f010 fdd2 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    6d0c:	4628      	mov	r0, r5
    6d0e:	f011 f89d 	bl	17e4c <Fw::PortBase::isConnected() const>
    6d12:	b9b0      	cbnz	r0, 6d42 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    6d14:	f204 45bc 	addw	r5, r4, #1212	; 0x4bc
    _id = this->getIdBase() + EVENTID_ID_FILTER_REMOVED;
    6d18:	4620      	mov	r0, r4
    6d1a:	f00b f8eb 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    6d1e:	1cc7      	adds	r7, r0, #3
    if (this->m_Log_OutputPort[0].isConnected()) {
    6d20:	4628      	mov	r0, r5
    6d22:	f011 f893 	bl	17e4c <Fw::PortBase::isConnected() const>
    6d26:	2800      	cmp	r0, #0
    6d28:	d147      	bne.n	6dba <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    6d2a:	f504 65a5 	add.w	r5, r4, #1320	; 0x528
    6d2e:	4628      	mov	r0, r5
    6d30:	f011 f88c 	bl	17e4c <Fw::PortBase::isConnected() const>
    6d34:	b950      	cbnz	r0, 6d4c <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x54>
  }
    6d36:	a804      	add	r0, sp, #16
    6d38:	f010 fd62 	bl	17800 <Fw::Time::~Time()>
    6d3c:	b02a      	add	sp, #168	; 0xa8
    6d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    6d42:	a904      	add	r1, sp, #16
    6d44:	4628      	mov	r0, r5
    6d46:	f010 ff39 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    6d4a:	e7e3      	b.n	6d14 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    6d4c:	f10d 0820 	add.w	r8, sp, #32
    6d50:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 6e24 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x12c>
      {
    6d54:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 6e28 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x130>
    6d58:	4640      	mov	r0, r8
    6d5a:	f7fa fa61 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    6d5e:	492d      	ldr	r1, [pc, #180]	; (6e14 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x11c>)
    6d60:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    6d62:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    6d66:	f7fa fac3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    6d6a:	f104 0208 	add.w	r2, r4, #8
    6d6e:	4b2a      	ldr	r3, [pc, #168]	; (6e18 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x120>)
    6d70:	4640      	mov	r0, r8
    6d72:	492a      	ldr	r1, [pc, #168]	; (6e1c <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x124>)
    6d74:	9600      	str	r6, [sp, #0]
    6d76:	f7fa fa89 	bl	128c <Fw::StringBase::format(char const*, ...)>
    6d7a:	a802      	add	r0, sp, #8
    6d7c:	f7f9 fbd8 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6d80:	2305      	movs	r3, #5
      this->m_LogText_OutputPort[0].invoke(
    6d82:	4639      	mov	r1, r7
    6d84:	aa04      	add	r2, sp, #16
    6d86:	4628      	mov	r0, r5
    6d88:	f88d 300c 	strb.w	r3, [sp, #12]
    6d8c:	f8cd 8000 	str.w	r8, [sp]
    6d90:	ab02      	add	r3, sp, #8
      {
    6d92:	f8cd a008 	str.w	sl, [sp, #8]
    6d96:	f00f ffbd 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    6d9a:	a802      	add	r0, sp, #8
    6d9c:	f8cd a008 	str.w	sl, [sp, #8]
    6da0:	f7f9 fbcc 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    6da4:	4640      	mov	r0, r8
    6da6:	f8cd 9020 	str.w	r9, [sp, #32]
    6daa:	f7fa fa43 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    6dae:	a804      	add	r0, sp, #16
    6db0:	f010 fd26 	bl	17800 <Fw::Time::~Time()>
    6db4:	b02a      	add	sp, #168	; 0xa8
    6db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    6dba:	f10d 0820 	add.w	r8, sp, #32
    6dbe:	4640      	mov	r0, r8
    6dc0:	f00f fc0a 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(ID);
    6dc4:	4631      	mov	r1, r6
    6dc6:	4640      	mov	r0, r8
    6dc8:	f7f9 fc48 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    6dcc:	b9d0      	cbnz	r0, 6e04 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x10c>
      {
    6dce:	a802      	add	r0, sp, #8
    6dd0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 6e28 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x130>
    6dd4:	f7f9 fbac 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6dd8:	2305      	movs	r3, #5
      this->m_Log_OutputPort[0].invoke(
    6dda:	4628      	mov	r0, r5
    6ddc:	aa04      	add	r2, sp, #16
    6dde:	4639      	mov	r1, r7
    6de0:	f88d 300c 	strb.w	r3, [sp, #12]
    6de4:	f8cd 8000 	str.w	r8, [sp]
    6de8:	ab02      	add	r3, sp, #8
      {
    6dea:	f8cd 9008 	str.w	r9, [sp, #8]
    6dee:	f00f fd79 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    6df2:	a802      	add	r0, sp, #8
    6df4:	f8cd 9008 	str.w	r9, [sp, #8]
    6df8:	f7f9 fba0 	bl	53c <Fw::Serializable::~Serializable()>
    }
    6dfc:	4640      	mov	r0, r8
    6dfe:	f00f fbd3 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    6e02:	e792      	b.n	6d2a <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x32>
      FW_ASSERT(
    6e04:	4601      	mov	r1, r0
    6e06:	f44f 62c9 	mov.w	r2, #1608	; 0x648
    6e0a:	4805      	ldr	r0, [pc, #20]	; (6e20 <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0x128>)
    6e0c:	f7fa fc0c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6e10:	e7dd      	b.n	6dce <Svc::ActiveLoggerComponentBase::log_ACTIVITY_HI_ID_FILTER_REMOVED(unsigned long) const+0xd6>
    6e12:	bf00      	nop
    6e14:	20001d2c 	.word	0x20001d2c
    6e18:	20002528 	.word	0x20002528
    6e1c:	2000253c 	.word	0x2000253c
    6e20:	20001618 	.word	0x20001618
    6e24:	20002f60 	.word	0x20002f60
    6e28:	20002c08 	.word	0x20002c08

00006e2c <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const>:
  {
    6e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e30:	4604      	mov	r4, r0
    6e32:	b0aa      	sub	sp, #168	; 0xa8
    6e34:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    6e36:	f204 5594 	addw	r5, r4, #1428	; 0x594
    Fw::Time _logTime;
    6e3a:	a804      	add	r0, sp, #16
    6e3c:	f010 fd38 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    6e40:	4628      	mov	r0, r5
    6e42:	f011 f803 	bl	17e4c <Fw::PortBase::isConnected() const>
    6e46:	b9b0      	cbnz	r0, 6e76 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    6e48:	f204 45bc 	addw	r5, r4, #1212	; 0x4bc
    _id = this->getIdBase() + EVENTID_ID_FILTER_NOT_FOUND;
    6e4c:	4620      	mov	r0, r4
    6e4e:	f00b f851 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    6e52:	1d07      	adds	r7, r0, #4
    if (this->m_Log_OutputPort[0].isConnected()) {
    6e54:	4628      	mov	r0, r5
    6e56:	f010 fff9 	bl	17e4c <Fw::PortBase::isConnected() const>
    6e5a:	2800      	cmp	r0, #0
    6e5c:	d147      	bne.n	6eee <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    6e5e:	f504 65a5 	add.w	r5, r4, #1320	; 0x528
    6e62:	4628      	mov	r0, r5
    6e64:	f010 fff2 	bl	17e4c <Fw::PortBase::isConnected() const>
    6e68:	b950      	cbnz	r0, 6e80 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x54>
  }
    6e6a:	a804      	add	r0, sp, #16
    6e6c:	f010 fcc8 	bl	17800 <Fw::Time::~Time()>
    6e70:	b02a      	add	sp, #168	; 0xa8
    6e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    6e76:	a904      	add	r1, sp, #16
    6e78:	4628      	mov	r0, r5
    6e7a:	f010 fe9f 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    6e7e:	e7e3      	b.n	6e48 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    6e80:	f10d 0820 	add.w	r8, sp, #32
    6e84:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 6f58 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x12c>
      {
    6e88:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 6f5c <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x130>
    6e8c:	4640      	mov	r0, r8
    6e8e:	f7fa f9c7 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    6e92:	492d      	ldr	r1, [pc, #180]	; (6f48 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x11c>)
    6e94:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    6e96:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    6e9a:	f7fa fa29 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    6e9e:	f104 0208 	add.w	r2, r4, #8
    6ea2:	4b2a      	ldr	r3, [pc, #168]	; (6f4c <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x120>)
    6ea4:	4640      	mov	r0, r8
    6ea6:	492a      	ldr	r1, [pc, #168]	; (6f50 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x124>)
    6ea8:	9600      	str	r6, [sp, #0]
    6eaa:	f7fa f9ef 	bl	128c <Fw::StringBase::format(char const*, ...)>
    6eae:	a802      	add	r0, sp, #8
    6eb0:	f7f9 fb3e 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6eb4:	2303      	movs	r3, #3
      this->m_LogText_OutputPort[0].invoke(
    6eb6:	4639      	mov	r1, r7
    6eb8:	aa04      	add	r2, sp, #16
    6eba:	4628      	mov	r0, r5
    6ebc:	f88d 300c 	strb.w	r3, [sp, #12]
    6ec0:	f8cd 8000 	str.w	r8, [sp]
    6ec4:	ab02      	add	r3, sp, #8
      {
    6ec6:	f8cd a008 	str.w	sl, [sp, #8]
    6eca:	f00f ff23 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    6ece:	a802      	add	r0, sp, #8
    6ed0:	f8cd a008 	str.w	sl, [sp, #8]
    6ed4:	f7f9 fb32 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    6ed8:	4640      	mov	r0, r8
    6eda:	f8cd 9020 	str.w	r9, [sp, #32]
    6ede:	f7fa f9a9 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    6ee2:	a804      	add	r0, sp, #16
    6ee4:	f010 fc8c 	bl	17800 <Fw::Time::~Time()>
    6ee8:	b02a      	add	sp, #168	; 0xa8
    6eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    6eee:	f10d 0820 	add.w	r8, sp, #32
    6ef2:	4640      	mov	r0, r8
    6ef4:	f00f fb70 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(ID);
    6ef8:	4631      	mov	r1, r6
    6efa:	4640      	mov	r0, r8
    6efc:	f7f9 fbae 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    6f00:	b9d0      	cbnz	r0, 6f38 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x10c>
      {
    6f02:	a802      	add	r0, sp, #8
    6f04:	f8df 9054 	ldr.w	r9, [pc, #84]	; 6f5c <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x130>
    6f08:	f7f9 fb12 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    6f0c:	2303      	movs	r3, #3
      this->m_Log_OutputPort[0].invoke(
    6f0e:	4628      	mov	r0, r5
    6f10:	aa04      	add	r2, sp, #16
    6f12:	4639      	mov	r1, r7
    6f14:	f88d 300c 	strb.w	r3, [sp, #12]
    6f18:	f8cd 8000 	str.w	r8, [sp]
    6f1c:	ab02      	add	r3, sp, #8
      {
    6f1e:	f8cd 9008 	str.w	r9, [sp, #8]
    6f22:	f00f fcdf 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    6f26:	a802      	add	r0, sp, #8
    6f28:	f8cd 9008 	str.w	r9, [sp, #8]
    6f2c:	f7f9 fb06 	bl	53c <Fw::Serializable::~Serializable()>
    }
    6f30:	4640      	mov	r0, r8
    6f32:	f00f fb39 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    6f36:	e792      	b.n	6e5e <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x32>
      FW_ASSERT(
    6f38:	4601      	mov	r1, r0
    6f3a:	f240 629a 	movw	r2, #1690	; 0x69a
    6f3e:	4805      	ldr	r0, [pc, #20]	; (6f54 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0x128>)
    6f40:	f7fa fb72 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6f44:	e7dd      	b.n	6f02 <Svc::ActiveLoggerComponentBase::log_WARNING_LO_ID_FILTER_NOT_FOUND(unsigned long) const+0xd6>
    6f46:	bf00      	nop
    6f48:	20001d2c 	.word	0x20001d2c
    6f4c:	200025b0 	.word	0x200025b0
    6f50:	200025c8 	.word	0x200025c8
    6f54:	20001618 	.word	0x20001618
    6f58:	20002f60 	.word	0x20002f60
    6f5c:	20002c08 	.word	0x20002c08

00006f60 <Svc::ActiveLoggerComponentBase::doDispatch()>:
  {
    6f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f64:	b0dd      	sub	sp, #372	; 0x174
    6f66:	4604      	mov	r4, r0
    class ComponentIpcSerializableBuffer :
    6f68:	4ebe      	ldr	r6, [pc, #760]	; (7264 <Svc::ActiveLoggerComponentBase::doDispatch()+0x304>)
    6f6a:	a833      	add	r0, sp, #204	; 0xcc
    6f6c:	f7f9 fae8 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    FwQueuePriorityType priority = 0;
    6f70:	2200      	movs	r2, #0
    Os::Queue::Status msgStatus = this->m_queue.receive(
    6f72:	ab06      	add	r3, sp, #24
    6f74:	a933      	add	r1, sp, #204	; 0xcc
    6f76:	f104 0068 	add.w	r0, r4, #104	; 0x68
    class ComponentIpcSerializableBuffer :
    6f7a:	9633      	str	r6, [sp, #204]	; 0xcc
    FwQueuePriorityType priority = 0;
    6f7c:	9206      	str	r2, [sp, #24]
    Os::Queue::Status msgStatus = this->m_queue.receive(
    6f7e:	f00a feff 	bl	11d80 <Os::Queue::receive(Fw::SerializeBufferBase&, Os::QueueInterface::BlockingType, long&)>
    FW_ASSERT(
    6f82:	2800      	cmp	r0, #0
    6f84:	d132      	bne.n	6fec <Svc::ActiveLoggerComponentBase::doDispatch()+0x8c>
    msg.resetDeser();
    6f86:	a833      	add	r0, sp, #204	; 0xcc
    6f88:	f7fa f838 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
    FwEnumStoreType desMsg = 0;
    6f8c:	2300      	movs	r3, #0
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    6f8e:	a907      	add	r1, sp, #28
    6f90:	a833      	add	r0, sp, #204	; 0xcc
    FwEnumStoreType desMsg = 0;
    6f92:	9307      	str	r3, [sp, #28]
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    6f94:	f7f9 fea2 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    FW_ASSERT(
    6f98:	bb08      	cbnz	r0, 6fde <Svc::ActiveLoggerComponentBase::doDispatch()+0x7e>
    if (msgType == ACTIVELOGGER_COMPONENT_EXIT) {
    6f9a:	f89d 501c 	ldrb.w	r5, [sp, #28]
    6f9e:	b1ad      	cbz	r5, 6fcc <Svc::ActiveLoggerComponentBase::doDispatch()+0x6c>
    FwIndexType portNum = 0;
    6fa0:	2300      	movs	r3, #0
    deserStatus = msg.deserialize(portNum);
    6fa2:	a908      	add	r1, sp, #32
    6fa4:	a833      	add	r0, sp, #204	; 0xcc
    FwIndexType portNum = 0;
    6fa6:	9308      	str	r3, [sp, #32]
    deserStatus = msg.deserialize(portNum);
    6fa8:	f7f9 fe98 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    FW_ASSERT(
    6fac:	b938      	cbnz	r0, 6fbe <Svc::ActiveLoggerComponentBase::doDispatch()+0x5e>
    switch (msgType) {
    6fae:	3d01      	subs	r5, #1
    6fb0:	2d03      	cmp	r5, #3
    6fb2:	f200 81c6 	bhi.w	7342 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e2>
    6fb6:	e8df f005 	tbb	[pc, r5]
    6fba:	7a6a      	.short	0x7a6a
    6fbc:	20c9      	.short	0x20c9
    FW_ASSERT(
    6fbe:	4601      	mov	r1, r0
    6fc0:	f240 62fd 	movw	r2, #1789	; 0x6fd
    6fc4:	48a8      	ldr	r0, [pc, #672]	; (7268 <Svc::ActiveLoggerComponentBase::doDispatch()+0x308>)
    6fc6:	f7fa fb2f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6fca:	e7f0      	b.n	6fae <Svc::ActiveLoggerComponentBase::doDispatch()+0x4e>
      return MSG_DISPATCH_EXIT;
    6fcc:	2403      	movs	r4, #3
    class ComponentIpcSerializableBuffer :
    6fce:	a833      	add	r0, sp, #204	; 0xcc
    6fd0:	9633      	str	r6, [sp, #204]	; 0xcc
    6fd2:	f7f9 fabd 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    6fd6:	4620      	mov	r0, r4
    6fd8:	b05d      	add	sp, #372	; 0x174
    6fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FW_ASSERT(
    6fde:	4601      	mov	r1, r0
    6fe0:	f44f 62de 	mov.w	r2, #1776	; 0x6f0
    6fe4:	48a0      	ldr	r0, [pc, #640]	; (7268 <Svc::ActiveLoggerComponentBase::doDispatch()+0x308>)
    6fe6:	f7fa fb1f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6fea:	e7d6      	b.n	6f9a <Svc::ActiveLoggerComponentBase::doDispatch()+0x3a>
    FW_ASSERT(
    6fec:	4601      	mov	r1, r0
    6fee:	f240 62e6 	movw	r2, #1766	; 0x6e6
    6ff2:	489d      	ldr	r0, [pc, #628]	; (7268 <Svc::ActiveLoggerComponentBase::doDispatch()+0x308>)
    6ff4:	f7fa fb18 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    6ff8:	e7c5      	b.n	6f86 <Svc::ActiveLoggerComponentBase::doDispatch()+0x26>
        deserStatus = msg.deserialize(id);
    6ffa:	a90b      	add	r1, sp, #44	; 0x2c
    6ffc:	a833      	add	r0, sp, #204	; 0xcc
    6ffe:	f7f9 fe5f 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
    7002:	2800      	cmp	r0, #0
    7004:	f040 8188 	bne.w	7318 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3b8>
        Fw::Time timeTag;
    7008:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    700c:	4640      	mov	r0, r8
    700e:	f010 fc4f 	bl	178b0 <Fw::Time::Time()>
        deserStatus = msg.deserialize(timeTag);
    7012:	4641      	mov	r1, r8
    7014:	a833      	add	r0, sp, #204	; 0xcc
    7016:	f7f9 ff5d 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
        FW_ASSERT(
    701a:	2800      	cmp	r0, #0
    701c:	f040 8175 	bne.w	730a <Svc::ActiveLoggerComponentBase::doDispatch()+0x3aa>
      {
    7020:	af0c      	add	r7, sp, #48	; 0x30
    7022:	f8df 9248 	ldr.w	r9, [pc, #584]	; 726c <Svc::ActiveLoggerComponentBase::doDispatch()+0x30c>
    7026:	4638      	mov	r0, r7
    7028:	f7f9 fa82 	bl	530 <Fw::Serializable::Serializable()>
        this->e = FATAL;
    702c:	2301      	movs	r3, #1
        deserStatus = msg.deserialize(severity);
    702e:	4639      	mov	r1, r7
    7030:	a833      	add	r0, sp, #204	; 0xcc
      {
    7032:	f8c7 9000 	str.w	r9, [r7]
        this->e = FATAL;
    7036:	713b      	strb	r3, [r7, #4]
    7038:	f7f9 ff4c 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
        FW_ASSERT(
    703c:	2800      	cmp	r0, #0
    703e:	f040 815d 	bne.w	72fc <Svc::ActiveLoggerComponentBase::doDispatch()+0x39c>
        Fw::LogBuffer args;
    7042:	ad12      	add	r5, sp, #72	; 0x48
    7044:	4628      	mov	r0, r5
    7046:	f00f fac7 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
        deserStatus = msg.deserialize(args);
    704a:	4629      	mov	r1, r5
    704c:	a833      	add	r0, sp, #204	; 0xcc
    704e:	f7f9 ff47 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT(
    7052:	2800      	cmp	r0, #0
    7054:	f040 814b 	bne.w	72ee <Svc::ActiveLoggerComponentBase::doDispatch()+0x38e>
        FW_ASSERT(
    7058:	a833      	add	r0, sp, #204	; 0xcc
    705a:	f7fa f829 	bl	10b0 <Fw::SerializeBufferBase::getBuffLeft() const>
    705e:	2800      	cmp	r0, #0
    7060:	f040 813b 	bne.w	72da <Svc::ActiveLoggerComponentBase::doDispatch()+0x37a>
        this->loqQueue_internalInterfaceHandler(
    7064:	9500      	str	r5, [sp, #0]
    7066:	4642      	mov	r2, r8
    7068:	6823      	ldr	r3, [r4, #0]
    706a:	4620      	mov	r0, r4
    706c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    706e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    7070:	463b      	mov	r3, r7
    7072:	47a0      	blx	r4
      }
    7074:	4628      	mov	r0, r5
    7076:	f00f fa97 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
  class LogSeverity :
    707a:	4638      	mov	r0, r7
    707c:	f8c7 9000 	str.w	r9, [r7]
    return MSG_DISPATCH_OK;
    7080:	2400      	movs	r4, #0
    7082:	f7f9 fa5b 	bl	53c <Fw::Serializable::~Serializable()>
      }
    7086:	4640      	mov	r0, r8
    7088:	f010 fbba 	bl	17800 <Fw::Time::~Time()>
    708c:	e79f      	b.n	6fce <Svc::ActiveLoggerComponentBase::doDispatch()+0x6e>
        deserStatus = msg.deserialize(key);
    708e:	ad12      	add	r5, sp, #72	; 0x48
    7090:	a833      	add	r0, sp, #204	; 0xcc
    7092:	4629      	mov	r1, r5
    7094:	f7f9 fe14 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
    7098:	2800      	cmp	r0, #0
    709a:	f040 8117 	bne.w	72cc <Svc::ActiveLoggerComponentBase::doDispatch()+0x36c>
        this->pingIn_handler(
    709e:	6823      	ldr	r3, [r4, #0]
    70a0:	4620      	mov	r0, r4
    70a2:	682a      	ldr	r2, [r5, #0]
    return MSG_DISPATCH_OK;
    70a4:	2400      	movs	r4, #0
        this->pingIn_handler(
    70a6:	9908      	ldr	r1, [sp, #32]
    70a8:	6a1b      	ldr	r3, [r3, #32]
    70aa:	4798      	blx	r3
        break;
    70ac:	e78f      	b.n	6fce <Svc::ActiveLoggerComponentBase::doDispatch()+0x6e>
        FwOpcodeType opCode = 0;
    70ae:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(opCode);
    70b0:	a909      	add	r1, sp, #36	; 0x24
    70b2:	a833      	add	r0, sp, #204	; 0xcc
        FwOpcodeType opCode = 0;
    70b4:	9309      	str	r3, [sp, #36]	; 0x24
        deserStatus = msg.deserialize(opCode);
    70b6:	f7f9 fe03 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    70ba:	2800      	cmp	r0, #0
    70bc:	f040 80ff 	bne.w	72be <Svc::ActiveLoggerComponentBase::doDispatch()+0x35e>
        U32 cmdSeq = 0;
    70c0:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(cmdSeq);
    70c2:	a90a      	add	r1, sp, #40	; 0x28
    70c4:	a833      	add	r0, sp, #204	; 0xcc
        U32 cmdSeq = 0;
    70c6:	930a      	str	r3, [sp, #40]	; 0x28
        deserStatus = msg.deserialize(cmdSeq);
    70c8:	f7f9 fdfa 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    70cc:	2800      	cmp	r0, #0
    70ce:	f040 80e8 	bne.w	72a2 <Svc::ActiveLoggerComponentBase::doDispatch()+0x342>
        Fw::CmdArgBuffer args;
    70d2:	ad12      	add	r5, sp, #72	; 0x48
    70d4:	4628      	mov	r0, r5
    70d6:	f00e fd99 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
        deserStatus = msg.deserialize(args);
    70da:	4629      	mov	r1, r5
    70dc:	a833      	add	r0, sp, #204	; 0xcc
    70de:	f7f9 feff 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT (
    70e2:	2800      	cmp	r0, #0
    70e4:	f040 80d6 	bne.w	7294 <Svc::ActiveLoggerComponentBase::doDispatch()+0x334>
        args.resetDeser();
    70e8:	4628      	mov	r0, r5
    70ea:	f7f9 ff87 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
        deserStatus = args.deserialize(ID);
    70ee:	4628      	mov	r0, r5
    70f0:	a90b      	add	r1, sp, #44	; 0x2c
    70f2:	f7f9 fde5 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    70f6:	4680      	mov	r8, r0
    70f8:	2800      	cmp	r0, #0
    70fa:	d056      	beq.n	71aa <Svc::ActiveLoggerComponentBase::doDispatch()+0x24a>
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    70fc:	f504 648a 	add.w	r4, r4, #1104	; 0x450
    7100:	4620      	mov	r0, r4
    7102:	f010 fea3 	bl	17e4c <Fw::PortBase::isConnected() const>
    7106:	2800      	cmp	r0, #0
    7108:	d04a      	beq.n	71a0 <Svc::ActiveLoggerComponentBase::doDispatch()+0x240>
      {
    710a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    710e:	f8df a160 	ldr.w	sl, [pc, #352]	; 7270 <Svc::ActiveLoggerComponentBase::doDispatch()+0x310>
            this->cmdResponse_out(
    7112:	e9dd 7209 	ldrd	r7, r2, [sp, #36]	; 0x24
    7116:	4640      	mov	r0, r8
    7118:	9203      	str	r2, [sp, #12]
    711a:	f7f9 fa09 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    711e:	2303      	movs	r3, #3
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    7120:	4620      	mov	r0, r4
      {
    7122:	f8c8 a000 	str.w	sl, [r8]
        this->e = e1;
    7126:	f888 3004 	strb.w	r3, [r8, #4]
    712a:	f010 fe8f 	bl	17e4c <Fw::PortBase::isConnected() const>
    712e:	9a03      	ldr	r2, [sp, #12]
    7130:	2800      	cmp	r0, #0
    7132:	f000 80f8 	beq.w	7326 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3c6>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    7136:	4620      	mov	r0, r4
    7138:	4639      	mov	r1, r7
    713a:	4643      	mov	r3, r8
    713c:	f00f f9ce 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    7140:	4640      	mov	r0, r8
    7142:	f8c8 a000 	str.w	sl, [r8]
    7146:	f7f9 f9f9 	bl	53c <Fw::Serializable::~Serializable()>
    714a:	e029      	b.n	71a0 <Svc::ActiveLoggerComponentBase::doDispatch()+0x240>
        FwOpcodeType opCode = 0;
    714c:	af0c      	add	r7, sp, #48	; 0x30
    714e:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(opCode);
    7150:	a833      	add	r0, sp, #204	; 0xcc
    7152:	4639      	mov	r1, r7
        FwOpcodeType opCode = 0;
    7154:	603b      	str	r3, [r7, #0]
        deserStatus = msg.deserialize(opCode);
    7156:	f7f9 fdb3 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    715a:	2800      	cmp	r0, #0
    715c:	f040 80a8 	bne.w	72b0 <Svc::ActiveLoggerComponentBase::doDispatch()+0x350>
        U32 cmdSeq = 0;
    7160:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    7164:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(cmdSeq);
    7166:	a833      	add	r0, sp, #204	; 0xcc
    7168:	4641      	mov	r1, r8
        U32 cmdSeq = 0;
    716a:	f8c8 3000 	str.w	r3, [r8]
        deserStatus = msg.deserialize(cmdSeq);
    716e:	f7f9 fda7 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    7172:	2800      	cmp	r0, #0
    7174:	f040 8087 	bne.w	7286 <Svc::ActiveLoggerComponentBase::doDispatch()+0x326>
        Fw::CmdArgBuffer args;
    7178:	ad12      	add	r5, sp, #72	; 0x48
    717a:	4628      	mov	r0, r5
    717c:	f00e fd46 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
        deserStatus = msg.deserialize(args);
    7180:	4629      	mov	r1, r5
    7182:	a833      	add	r0, sp, #204	; 0xcc
    7184:	f7f9 feac 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT (
    7188:	2800      	cmp	r0, #0
    718a:	d175      	bne.n	7278 <Svc::ActiveLoggerComponentBase::doDispatch()+0x318>
        args.resetDeser();
    718c:	4628      	mov	r0, r5
    718e:	f7f9 ff35 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
        this->DUMP_FILTER_STATE_cmdHandler(opCode, cmdSeq);
    7192:	6823      	ldr	r3, [r4, #0]
    7194:	f8d8 2000 	ldr.w	r2, [r8]
    7198:	4620      	mov	r0, r4
    719a:	6839      	ldr	r1, [r7, #0]
    719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    719e:	4798      	blx	r3
      }
    71a0:	4628      	mov	r0, r5
    return MSG_DISPATCH_OK;
    71a2:	2400      	movs	r4, #0
      }
    71a4:	f00e fd1a 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
    71a8:	e711      	b.n	6fce <Svc::ActiveLoggerComponentBase::doDispatch()+0x6e>
      {
    71aa:	af0c      	add	r7, sp, #48	; 0x30
    71ac:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 7274 <Svc::ActiveLoggerComponentBase::doDispatch()+0x314>
    71b0:	4638      	mov	r0, r7
    71b2:	f7f9 f9bd 	bl	530 <Fw::Serializable::Serializable()>
        deserStatus = args.deserialize(idFilterEnabled);
    71b6:	4639      	mov	r1, r7
    71b8:	4628      	mov	r0, r5
        this->e = ENABLED;
    71ba:	f887 8004 	strb.w	r8, [r7, #4]
      {
    71be:	f8c7 9000 	str.w	r9, [r7]
    71c2:	f7f9 fe87 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    71c6:	b338      	cbz	r0, 7218 <Svc::ActiveLoggerComponentBase::doDispatch()+0x2b8>
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    71c8:	f504 648a 	add.w	r4, r4, #1104	; 0x450
    71cc:	4620      	mov	r0, r4
    71ce:	f010 fe3d 	bl	17e4c <Fw::PortBase::isConnected() const>
    71d2:	2800      	cmp	r0, #0
    71d4:	d03f      	beq.n	7256 <Svc::ActiveLoggerComponentBase::doDispatch()+0x2f6>
      {
    71d6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    71da:	f8df a094 	ldr.w	sl, [pc, #148]	; 7270 <Svc::ActiveLoggerComponentBase::doDispatch()+0x310>
            this->cmdResponse_out(
    71de:	e9dd b209 	ldrd	fp, r2, [sp, #36]	; 0x24
    71e2:	4640      	mov	r0, r8
    71e4:	9203      	str	r2, [sp, #12]
    71e6:	f7f9 f9a3 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    71ea:	2303      	movs	r3, #3
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    71ec:	4620      	mov	r0, r4
      {
    71ee:	f8c8 a000 	str.w	sl, [r8]
        this->e = e1;
    71f2:	f888 3004 	strb.w	r3, [r8, #4]
    71f6:	f010 fe29 	bl	17e4c <Fw::PortBase::isConnected() const>
    71fa:	9a03      	ldr	r2, [sp, #12]
    71fc:	2800      	cmp	r0, #0
    71fe:	f000 8099 	beq.w	7334 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3d4>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    7202:	4620      	mov	r0, r4
    7204:	4659      	mov	r1, fp
    7206:	4643      	mov	r3, r8
    7208:	f00f f968 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    720c:	4640      	mov	r0, r8
    720e:	f8c8 a000 	str.w	sl, [r8]
    7212:	f7f9 f993 	bl	53c <Fw::Serializable::~Serializable()>
    7216:	e01e      	b.n	7256 <Svc::ActiveLoggerComponentBase::doDispatch()+0x2f6>
        this->SET_ID_FILTER_cmdHandler(
    7218:	6820      	ldr	r0, [r4, #0]
      {
    721a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    721e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7224:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
    7228:	4640      	mov	r0, r8
    722a:	9105      	str	r1, [sp, #20]
    722c:	9204      	str	r2, [sp, #16]
    722e:	9303      	str	r3, [sp, #12]
    7230:	f7f9 f97e 	bl	530 <Fw::Serializable::Serializable()>
    7234:	4620      	mov	r0, r4
    7236:	f8cd 8000 	str.w	r8, [sp]
        this->e = obj.e;
    723a:	793c      	ldrb	r4, [r7, #4]
    723c:	9905      	ldr	r1, [sp, #20]
      {
    723e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
        this->e = obj.e;
    7242:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    7246:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    724a:	47d0      	blx	sl
  class ActiveLogger_Enabled :
    724c:	4640      	mov	r0, r8
    724e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    7252:	f7f9 f973 	bl	53c <Fw::Serializable::~Serializable()>
    7256:	4638      	mov	r0, r7
    7258:	f8c7 9000 	str.w	r9, [r7]
    725c:	f7f9 f96e 	bl	53c <Fw::Serializable::~Serializable()>
    7260:	e79e      	b.n	71a0 <Svc::ActiveLoggerComponentBase::doDispatch()+0x240>
    7262:	bf00      	nop
    7264:	2000396c 	.word	0x2000396c
    7268:	20001618 	.word	0x20001618
    726c:	20002c08 	.word	0x20002c08
    7270:	20002bec 	.word	0x20002bec
    7274:	20003bb8 	.word	0x20003bb8
        FW_ASSERT (
    7278:	4601      	mov	r1, r0
    727a:	f240 727b 	movw	r2, #1915	; 0x77b
    727e:	4832      	ldr	r0, [pc, #200]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    7280:	f7fa f9d2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    7284:	e782      	b.n	718c <Svc::ActiveLoggerComponentBase::doDispatch()+0x22c>
        FW_ASSERT (
    7286:	4601      	mov	r1, r0
    7288:	f240 7273 	movw	r2, #1907	; 0x773
    728c:	482e      	ldr	r0, [pc, #184]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    728e:	f7fa f9cb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    7292:	e771      	b.n	7178 <Svc::ActiveLoggerComponentBase::doDispatch()+0x218>
        FW_ASSERT (
    7294:	4601      	mov	r1, r0
    7296:	f240 722a 	movw	r2, #1834	; 0x72a
    729a:	482b      	ldr	r0, [pc, #172]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    729c:	f7fa f9c4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72a0:	e722      	b.n	70e8 <Svc::ActiveLoggerComponentBase::doDispatch()+0x188>
        FW_ASSERT (
    72a2:	4601      	mov	r1, r0
    72a4:	f240 7222 	movw	r2, #1826	; 0x722
    72a8:	4827      	ldr	r0, [pc, #156]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    72aa:	f7fa f9bd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72ae:	e710      	b.n	70d2 <Svc::ActiveLoggerComponentBase::doDispatch()+0x172>
        FW_ASSERT (
    72b0:	4601      	mov	r1, r0
    72b2:	f240 726b 	movw	r2, #1899	; 0x76b
    72b6:	4824      	ldr	r0, [pc, #144]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    72b8:	f7fa f9b6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72bc:	e750      	b.n	7160 <Svc::ActiveLoggerComponentBase::doDispatch()+0x200>
        FW_ASSERT (
    72be:	4601      	mov	r1, r0
    72c0:	f240 721a 	movw	r2, #1818	; 0x71a
    72c4:	4820      	ldr	r0, [pc, #128]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    72c6:	f7fa f9af 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72ca:	e6f9      	b.n	70c0 <Svc::ActiveLoggerComponentBase::doDispatch()+0x160>
        FW_ASSERT(
    72cc:	4601      	mov	r1, r0
    72ce:	f44f 62e1 	mov.w	r2, #1800	; 0x708
    72d2:	481d      	ldr	r0, [pc, #116]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    72d4:	f7fa f9a8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72d8:	e6e1      	b.n	709e <Svc::ActiveLoggerComponentBase::doDispatch()+0x13e>
        FW_ASSERT(
    72da:	a833      	add	r0, sp, #204	; 0xcc
    72dc:	f7f9 fee8 	bl	10b0 <Fw::SerializeBufferBase::getBuffLeft() const>
    72e0:	f240 72bd 	movw	r2, #1981	; 0x7bd
    72e4:	4601      	mov	r1, r0
    72e6:	4818      	ldr	r0, [pc, #96]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    72e8:	f7fa f99e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72ec:	e6ba      	b.n	7064 <Svc::ActiveLoggerComponentBase::doDispatch()+0x104>
        FW_ASSERT(
    72ee:	4601      	mov	r1, r0
    72f0:	f240 72b6 	movw	r2, #1974	; 0x7b6
    72f4:	4814      	ldr	r0, [pc, #80]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    72f6:	f7fa f997 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    72fa:	e6ad      	b.n	7058 <Svc::ActiveLoggerComponentBase::doDispatch()+0xf8>
        FW_ASSERT(
    72fc:	4601      	mov	r1, r0
    72fe:	f240 72ad 	movw	r2, #1965	; 0x7ad
    7302:	4811      	ldr	r0, [pc, #68]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    7304:	f7fa f990 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    7308:	e69b      	b.n	7042 <Svc::ActiveLoggerComponentBase::doDispatch()+0xe2>
        FW_ASSERT(
    730a:	4601      	mov	r1, r0
    730c:	f240 72a4 	movw	r2, #1956	; 0x7a4
    7310:	480d      	ldr	r0, [pc, #52]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    7312:	f7fa f989 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    7316:	e683      	b.n	7020 <Svc::ActiveLoggerComponentBase::doDispatch()+0xc0>
        FW_ASSERT(
    7318:	4601      	mov	r1, r0
    731a:	f240 729b 	movw	r2, #1947	; 0x79b
    731e:	480a      	ldr	r0, [pc, #40]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    7320:	f7fa f982 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    7324:	e670      	b.n	7008 <Svc::ActiveLoggerComponentBase::doDispatch()+0xa8>
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    7326:	f240 4136 	movw	r1, #1078	; 0x436
    732a:	4807      	ldr	r0, [pc, #28]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    732c:	f7fa f96e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    7330:	9a03      	ldr	r2, [sp, #12]
    7332:	e700      	b.n	7136 <Svc::ActiveLoggerComponentBase::doDispatch()+0x1d6>
    7334:	f240 4136 	movw	r1, #1078	; 0x436
    7338:	4803      	ldr	r0, [pc, #12]	; (7348 <Svc::ActiveLoggerComponentBase::doDispatch()+0x3e8>)
    733a:	f7fa f967 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    733e:	9a03      	ldr	r2, [sp, #12]
    7340:	e75f      	b.n	7202 <Svc::ActiveLoggerComponentBase::doDispatch()+0x2a2>
    switch (msgType) {
    7342:	2402      	movs	r4, #2
    7344:	e643      	b.n	6fce <Svc::ActiveLoggerComponentBase::doDispatch()+0x6e>
    7346:	bf00      	nop
    7348:	20001618 	.word	0x20001618

0000734c <Svc::ActiveLogger_Enabled::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= ENABLED) && (e <= DISABLED));
  }

  Fw::SerializeStatus ActiveLogger_Enabled ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    734c:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
    734e:	7901      	ldrb	r1, [r0, #4]
    7350:	4618      	mov	r0, r3
    7352:	f7f9 b9e9 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
    7356:	bf00      	nop

00007358 <Svc::ActiveLogger_Enabled::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus ActiveLogger_Enabled ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    7358:	b510      	push	{r4, lr}
    735a:	460a      	mov	r2, r1
    735c:	b082      	sub	sp, #8
    735e:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    7360:	a901      	add	r1, sp, #4
    7362:	4610      	mov	r0, r2
    7364:	f7f9 fcba 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    7368:	b938      	cbnz	r0, 737a <Svc::ActiveLogger_Enabled::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
    736a:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
    736e:	2a01      	cmp	r2, #1
      this->e = static_cast<T>(es);
    7370:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
    7372:	bf94      	ite	ls
    7374:	2300      	movls	r3, #0
    7376:	2301      	movhi	r3, #1
    7378:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
    737a:	b002      	add	sp, #8
    737c:	bd10      	pop	{r4, pc}
    737e:	bf00      	nop

00007380 <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void ActiveLogger_Enabled ::
    toString(Fw::StringBase& sb) const
  {
    7380:	b570      	push	{r4, r5, r6, lr}
    7382:	b0a2      	sub	sp, #136	; 0x88
    7384:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
    7386:	4e14      	ldr	r6, [pc, #80]	; (73d8 <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x58>)
    7388:	460d      	mov	r5, r1
    738a:	4668      	mov	r0, sp
    738c:	f7f9 ff48 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7390:	4912      	ldr	r1, [pc, #72]	; (73dc <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x5c>)
    7392:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
    7394:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    7396:	f7f9 ffab 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
    739a:	7923      	ldrb	r3, [r4, #4]
    739c:	b18b      	cbz	r3, 73c2 <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x42>
    739e:	2b01      	cmp	r3, #1
    73a0:	d014      	beq.n	73cc <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x4c>
    73a2:	490f      	ldr	r1, [pc, #60]	; (73e0 <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x60>)
    73a4:	4668      	mov	r0, sp
    73a6:	f7f9 ffa3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
    73aa:	7923      	ldrb	r3, [r4, #4]
    73ac:	aa01      	add	r2, sp, #4
    73ae:	490d      	ldr	r1, [pc, #52]	; (73e4 <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x64>)
    73b0:	4628      	mov	r0, r5
    73b2:	f7f9 ff6b 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
    73b6:	4668      	mov	r0, sp
    73b8:	9600      	str	r6, [sp, #0]
    73ba:	f7f9 ff3b 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    73be:	b022      	add	sp, #136	; 0x88
    73c0:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
    73c2:	4909      	ldr	r1, [pc, #36]	; (73e8 <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x68>)
    73c4:	4668      	mov	r0, sp
    73c6:	f7f9 ff93 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    73ca:	e7ee      	b.n	73aa <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x2a>
        (void)StringBase::operator=(src);
    73cc:	4907      	ldr	r1, [pc, #28]	; (73ec <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x6c>)
    73ce:	4668      	mov	r0, sp
    73d0:	f7f9 ff8e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    73d4:	e7e9      	b.n	73aa <Svc::ActiveLogger_Enabled::toString(Fw::StringBase&) const+0x2a>
    73d6:	bf00      	nop
    73d8:	200032dc 	.word	0x200032dc
    73dc:	20001d2c 	.word	0x20001d2c
    73e0:	20002464 	.word	0x20002464
    73e4:	20002470 	.word	0x20002470
    73e8:	200024e0 	.word	0x200024e0
    73ec:	200024e8 	.word	0x200024e8

000073f0 <Svc::ActiveLogger_Enabled::~ActiveLogger_Enabled()>:
    73f0:	4b03      	ldr	r3, [pc, #12]	; (7400 <Svc::ActiveLogger_Enabled::~ActiveLogger_Enabled()+0x10>)
    73f2:	b510      	push	{r4, lr}
    73f4:	4604      	mov	r4, r0
    73f6:	6003      	str	r3, [r0, #0]
    73f8:	f7f9 f8a0 	bl	53c <Fw::Serializable::~Serializable()>
    73fc:	4620      	mov	r0, r4
    73fe:	bd10      	pop	{r4, pc}
    7400:	20003bb8 	.word	0x20003bb8

00007404 <Svc::ActiveLogger_Enabled::~ActiveLogger_Enabled()>:
    7404:	4b05      	ldr	r3, [pc, #20]	; (741c <Svc::ActiveLogger_Enabled::~ActiveLogger_Enabled()+0x18>)
    7406:	b510      	push	{r4, lr}
    7408:	4604      	mov	r4, r0
    740a:	6003      	str	r3, [r0, #0]
    740c:	f7f9 f896 	bl	53c <Fw::Serializable::~Serializable()>
    7410:	2108      	movs	r1, #8
    7412:	4620      	mov	r0, r4
    7414:	f011 fc5c 	bl	18cd0 <operator delete(void*, unsigned int)>
    7418:	4620      	mov	r0, r4
    741a:	bd10      	pop	{r4, pc}
    741c:	20003bb8 	.word	0x20003bb8

00007420 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled const&)>:
    this->e = obj.e;
    7420:	790b      	ldrb	r3, [r1, #4]
    7422:	7103      	strb	r3, [r0, #4]
  }
    7424:	4770      	bx	lr
    7426:	bf00      	nop

00007428 <Svc::ActiveLogger_Enabled::operator=(Svc::ActiveLogger_Enabled::T)>:
    this->e = e1;
    7428:	7101      	strb	r1, [r0, #4]
  }
    742a:	4770      	bx	lr

0000742c <Svc::ActiveLogger_FilterSeverity::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= WARNING_HI) && (e <= DIAGNOSTIC));
  }

  Fw::SerializeStatus ActiveLogger_FilterSeverity ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    742c:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
    742e:	7901      	ldrb	r1, [r0, #4]
    7430:	4618      	mov	r0, r3
    7432:	f7f9 b979 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
    7436:	bf00      	nop

00007438 <Svc::ActiveLogger_FilterSeverity::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus ActiveLogger_FilterSeverity ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    7438:	b510      	push	{r4, lr}
    743a:	460a      	mov	r2, r1
    743c:	b082      	sub	sp, #8
    743e:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    7440:	a901      	add	r1, sp, #4
    7442:	4610      	mov	r0, r2
    7444:	f7f9 fc4a 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    7448:	b938      	cbnz	r0, 745a <Svc::ActiveLogger_FilterSeverity::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
    744a:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
    744e:	2a05      	cmp	r2, #5
      this->e = static_cast<T>(es);
    7450:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
    7452:	bf94      	ite	ls
    7454:	2300      	movls	r3, #0
    7456:	2301      	movhi	r3, #1
    7458:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
    745a:	b002      	add	sp, #8
    745c:	bd10      	pop	{r4, pc}
    745e:	bf00      	nop

00007460 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void ActiveLogger_FilterSeverity ::
    toString(Fw::StringBase& sb) const
  {
    7460:	b570      	push	{r4, r5, r6, lr}
    7462:	b0a2      	sub	sp, #136	; 0x88
    7464:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
    7466:	4e20      	ldr	r6, [pc, #128]	; (74e8 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x88>)
    7468:	460d      	mov	r5, r1
    746a:	4668      	mov	r0, sp
    746c:	f7f9 fed8 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7470:	491e      	ldr	r1, [pc, #120]	; (74ec <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x8c>)
    7472:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
    7474:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    7476:	f7f9 ff3b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
    747a:	7923      	ldrb	r3, [r4, #4]
    747c:	2b05      	cmp	r3, #5
    747e:	d82d      	bhi.n	74dc <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x7c>
    7480:	e8df f003 	tbb	[pc, r3]
    7484:	221d1813 	.word	0x221d1813
    7488:	0327      	.short	0x0327
    748a:	4919      	ldr	r1, [pc, #100]	; (74f0 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x90>)
    748c:	4668      	mov	r0, sp
    748e:	f7f9 ff2f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
    7492:	7923      	ldrb	r3, [r4, #4]
    7494:	aa01      	add	r2, sp, #4
    7496:	4917      	ldr	r1, [pc, #92]	; (74f4 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x94>)
    7498:	4628      	mov	r0, r5
    749a:	f7f9 fef7 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
    749e:	4668      	mov	r0, sp
    74a0:	9600      	str	r6, [sp, #0]
    74a2:	f7f9 fec7 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    74a6:	b022      	add	sp, #136	; 0x88
    74a8:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
    74aa:	4913      	ldr	r1, [pc, #76]	; (74f8 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x98>)
    74ac:	4668      	mov	r0, sp
    74ae:	f7f9 ff1f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    74b2:	e7ee      	b.n	7492 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
    74b4:	4911      	ldr	r1, [pc, #68]	; (74fc <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x9c>)
    74b6:	4668      	mov	r0, sp
    74b8:	f7f9 ff1a 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    74bc:	e7e9      	b.n	7492 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
    74be:	4910      	ldr	r1, [pc, #64]	; (7500 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0xa0>)
    74c0:	4668      	mov	r0, sp
    74c2:	f7f9 ff15 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    74c6:	e7e4      	b.n	7492 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
    74c8:	490e      	ldr	r1, [pc, #56]	; (7504 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0xa4>)
    74ca:	4668      	mov	r0, sp
    74cc:	f7f9 ff10 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    74d0:	e7df      	b.n	7492 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
    74d2:	490d      	ldr	r1, [pc, #52]	; (7508 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0xa8>)
    74d4:	4668      	mov	r0, sp
    74d6:	f7f9 ff0b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    74da:	e7da      	b.n	7492 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
    74dc:	490b      	ldr	r1, [pc, #44]	; (750c <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0xac>)
    74de:	4668      	mov	r0, sp
    74e0:	f7f9 ff06 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    74e4:	e7d5      	b.n	7492 <Svc::ActiveLogger_FilterSeverity::toString(Fw::StringBase&) const+0x32>
    74e6:	bf00      	nop
    74e8:	200032dc 	.word	0x200032dc
    74ec:	20001d2c 	.word	0x20001d2c
    74f0:	20002660 	.word	0x20002660
    74f4:	20002470 	.word	0x20002470
    74f8:	20002628 	.word	0x20002628
    74fc:	20002634 	.word	0x20002634
    7500:	20002640 	.word	0x20002640
    7504:	20002648 	.word	0x20002648
    7508:	20002654 	.word	0x20002654
    750c:	20002464 	.word	0x20002464

00007510 <Svc::ActiveLogger_FilterSeverity::~ActiveLogger_FilterSeverity()>:
    7510:	4b03      	ldr	r3, [pc, #12]	; (7520 <Svc::ActiveLogger_FilterSeverity::~ActiveLogger_FilterSeverity()+0x10>)
    7512:	b510      	push	{r4, lr}
    7514:	4604      	mov	r4, r0
    7516:	6003      	str	r3, [r0, #0]
    7518:	f7f9 f810 	bl	53c <Fw::Serializable::~Serializable()>
    751c:	4620      	mov	r0, r4
    751e:	bd10      	pop	{r4, pc}
    7520:	20003da0 	.word	0x20003da0

00007524 <Svc::ActiveLogger_FilterSeverity::~ActiveLogger_FilterSeverity()>:
    7524:	4b05      	ldr	r3, [pc, #20]	; (753c <Svc::ActiveLogger_FilterSeverity::~ActiveLogger_FilterSeverity()+0x18>)
    7526:	b510      	push	{r4, lr}
    7528:	4604      	mov	r4, r0
    752a:	6003      	str	r3, [r0, #0]
    752c:	f7f9 f806 	bl	53c <Fw::Serializable::~Serializable()>
    7530:	2108      	movs	r1, #8
    7532:	4620      	mov	r0, r4
    7534:	f011 fbcc 	bl	18cd0 <operator delete(void*, unsigned int)>
    7538:	4620      	mov	r0, r4
    753a:	bd10      	pop	{r4, pc}
    753c:	20003da0 	.word	0x20003da0

00007540 <Svc::(anonymous namespace)::FatalEventPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputFatalEventPort::SERIALIZED_SIZE;
        }
    7540:	2004      	movs	r0, #4
    7542:	4770      	bx	lr

00007544 <Svc::(anonymous namespace)::FatalEventPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
    7544:	300c      	adds	r0, #12
    7546:	4770      	bx	lr

00007548 <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputFatalEventPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    7548:	b530      	push	{r4, r5, lr}
    754a:	4604      	mov	r4, r0
    754c:	b083      	sub	sp, #12
    754e:	460d      	mov	r5, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
    7550:	f010 fc82 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
    7554:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7556:	b17b      	cbz	r3, 7578 <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
    FW_ASSERT(this->m_func != nullptr);
    7558:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    755a:	b1a3      	cbz	r3, 7586 <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x3e>

    FwEventIdType Id;
    _status = _buffer.deserialize(Id);
    755c:	4628      	mov	r0, r5
    755e:	a901      	add	r1, sp, #4
    7560:	f7f9 fbae 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    7564:	4605      	mov	r5, r0
    7566:	b920      	cbnz	r0, 7572 <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, Id);
    7568:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    756a:	9a01      	ldr	r2, [sp, #4]
    756c:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
    7570:	4798      	blx	r3

    return Fw::FW_SERIALIZE_OK;
  }
    7572:	4628      	mov	r0, r5
    7574:	b003      	add	sp, #12
    7576:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
    7578:	2163      	movs	r1, #99	; 0x63
    757a:	4805      	ldr	r0, [pc, #20]	; (7590 <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
    757c:	f7fa f846 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    7580:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7582:	2b00      	cmp	r3, #0
    7584:	d1ea      	bne.n	755c <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    7586:	2164      	movs	r1, #100	; 0x64
    7588:	4801      	ldr	r0, [pc, #4]	; (7590 <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
    758a:	f7fa f83f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    758e:	e7e5      	b.n	755c <Svc::InputFatalEventPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    7590:	20001370 	.word	0x20001370

00007594 <Svc::(anonymous namespace)::FatalEventPortBuffer::~FatalEventPortBuffer()>:
    class FatalEventPortBuffer : public Fw::SerializeBufferBase {
    7594:	4b03      	ldr	r3, [pc, #12]	; (75a4 <Svc::(anonymous namespace)::FatalEventPortBuffer::~FatalEventPortBuffer()+0x10>)
    7596:	b510      	push	{r4, lr}
    7598:	4604      	mov	r4, r0
    759a:	6003      	str	r3, [r0, #0]
    759c:	f7f8 ffd8 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    75a0:	4620      	mov	r0, r4
    75a2:	bd10      	pop	{r4, pc}
    75a4:	20003950 	.word	0x20003950

000075a8 <Svc::(anonymous namespace)::FatalEventPortBuffer::~FatalEventPortBuffer()>:
    75a8:	4b05      	ldr	r3, [pc, #20]	; (75c0 <Svc::(anonymous namespace)::FatalEventPortBuffer::~FatalEventPortBuffer()+0x18>)
    75aa:	b510      	push	{r4, lr}
    75ac:	4604      	mov	r4, r0
    75ae:	6003      	str	r3, [r0, #0]
    75b0:	f7f8 ffce 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    75b4:	2110      	movs	r1, #16
    75b6:	4620      	mov	r0, r4
    75b8:	f011 fb8a 	bl	18cd0 <operator delete(void*, unsigned int)>
    75bc:	4620      	mov	r0, r4
    75be:	bd10      	pop	{r4, pc}
    75c0:	20003950 	.word	0x20003950

000075c4 <Svc::OutputFatalEventPort::~OutputFatalEventPort()>:

  };

  //! Output FatalEvent port
  //! Fatal announce port with FATAL Event ID
  class OutputFatalEventPort :
    75c4:	4b03      	ldr	r3, [pc, #12]	; (75d4 <Svc::OutputFatalEventPort::~OutputFatalEventPort()+0x10>)
    75c6:	b510      	push	{r4, lr}
    75c8:	4604      	mov	r4, r0
    75ca:	6003      	str	r3, [r0, #0]
    75cc:	f010 fb96 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    75d0:	4620      	mov	r0, r4
    75d2:	bd10      	pop	{r4, pc}
    75d4:	20003bd4 	.word	0x20003bd4

000075d8 <Svc::OutputFatalEventPort::~OutputFatalEventPort()>:
    75d8:	4b05      	ldr	r3, [pc, #20]	; (75f0 <Svc::OutputFatalEventPort::~OutputFatalEventPort()+0x18>)
    75da:	b510      	push	{r4, lr}
    75dc:	4604      	mov	r4, r0
    75de:	6003      	str	r3, [r0, #0]
    75e0:	f010 fb8c 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    75e4:	216c      	movs	r1, #108	; 0x6c
    75e6:	4620      	mov	r0, r4
    75e8:	f011 fb72 	bl	18cd0 <operator delete(void*, unsigned int)>
    75ec:	4620      	mov	r0, r4
    75ee:	bd10      	pop	{r4, pc}
    75f0:	20003bd4 	.word	0x20003bd4

000075f4 <Svc::InputFatalEventPort::~InputFatalEventPort()>:
  class InputFatalEventPort :
    75f4:	4b03      	ldr	r3, [pc, #12]	; (7604 <Svc::InputFatalEventPort::~InputFatalEventPort()+0x10>)
    75f6:	b510      	push	{r4, lr}
    75f8:	4604      	mov	r4, r0
    75fa:	6003      	str	r3, [r0, #0]
    75fc:	f010 fb60 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    7600:	4620      	mov	r0, r4
    7602:	bd10      	pop	{r4, pc}
    7604:	20003b98 	.word	0x20003b98

00007608 <Svc::InputFatalEventPort::~InputFatalEventPort()>:
    7608:	4b05      	ldr	r3, [pc, #20]	; (7620 <Svc::InputFatalEventPort::~InputFatalEventPort()+0x18>)
    760a:	b510      	push	{r4, lr}
    760c:	4604      	mov	r4, r0
    760e:	6003      	str	r3, [r0, #0]
    7610:	f010 fb56 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    7614:	2170      	movs	r1, #112	; 0x70
    7616:	4620      	mov	r0, r4
    7618:	f011 fb5a 	bl	18cd0 <operator delete(void*, unsigned int)>
    761c:	4620      	mov	r0, r4
    761e:	bd10      	pop	{r4, pc}
    7620:	20003b98 	.word	0x20003b98

00007624 <Svc::InputFatalEventPort::InputFatalEventPort()>:
  InputFatalEventPort ::
    7624:	b510      	push	{r4, lr}
    7626:	4604      	mov	r4, r0
      m_func(nullptr)
    7628:	f010 fb3a 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    762c:	4a02      	ldr	r2, [pc, #8]	; (7638 <Svc::InputFatalEventPort::InputFatalEventPort()+0x14>)
    762e:	2300      	movs	r3, #0
  }
    7630:	4620      	mov	r0, r4
      m_func(nullptr)
    7632:	6022      	str	r2, [r4, #0]
    7634:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    7636:	bd10      	pop	{r4, pc}
    7638:	20003b98 	.word	0x20003b98

0000763c <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>:
  {
    763c:	b570      	push	{r4, r5, r6, lr}
    763e:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    7640:	460d      	mov	r5, r1
  {
    7642:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    7644:	b121      	cbz	r1, 7650 <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    7646:	b14e      	cbz	r6, 765c <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x20>
    this->m_comp = callComp;
    7648:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    764a:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    764c:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    764e:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    7650:	2143      	movs	r1, #67	; 0x43
    7652:	4806      	ldr	r0, [pc, #24]	; (766c <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
    7654:	f7f9 ffda 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    7658:	2e00      	cmp	r6, #0
    765a:	d1f5      	bne.n	7648 <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0xc>
    765c:	2144      	movs	r1, #68	; 0x44
    765e:	4803      	ldr	r0, [pc, #12]	; (766c <Svc::InputFatalEventPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
    7660:	f7f9 ffd4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    7664:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    7666:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    7668:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    766a:	bd70      	pop	{r4, r5, r6, pc}
    766c:	20001370 	.word	0x20001370

00007670 <Svc::InputFatalEventPort::invoke(unsigned long)>:
  {
    7670:	b510      	push	{r4, lr}
    7672:	4604      	mov	r4, r0
    7674:	b082      	sub	sp, #8
    7676:	9101      	str	r1, [sp, #4]
    this->trace();
    7678:	f010 fbee 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    767c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    767e:	9a01      	ldr	r2, [sp, #4]
    7680:	b13b      	cbz	r3, 7692 <Svc::InputFatalEventPort::invoke(unsigned long)+0x22>
    FW_ASSERT(this->m_func != nullptr);
    7682:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7684:	b16b      	cbz	r3, 76a2 <Svc::InputFatalEventPort::invoke(unsigned long)+0x32>
    return this->m_func(this->m_comp, this->m_portNum, Id);
    7686:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    768a:	b002      	add	sp, #8
    768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, Id);
    7690:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
    7692:	2152      	movs	r1, #82	; 0x52
    7694:	4809      	ldr	r0, [pc, #36]	; (76bc <Svc::InputFatalEventPort::invoke(unsigned long)+0x4c>)
    7696:	f7f9 ffb9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    769a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    769c:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    769e:	2b00      	cmp	r3, #0
    76a0:	d1f1      	bne.n	7686 <Svc::InputFatalEventPort::invoke(unsigned long)+0x16>
    76a2:	2153      	movs	r1, #83	; 0x53
    76a4:	4805      	ldr	r0, [pc, #20]	; (76bc <Svc::InputFatalEventPort::invoke(unsigned long)+0x4c>)
    76a6:	9201      	str	r2, [sp, #4]
    76a8:	f7f9 ffb0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, Id);
    76ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    76ae:	9a01      	ldr	r2, [sp, #4]
    76b0:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    76b4:	b002      	add	sp, #8
    76b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, Id);
    76ba:	4718      	bx	r3
    76bc:	20001370 	.word	0x20001370

000076c0 <Svc::OutputFatalEventPort::OutputFatalEventPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputFatalEventPort ::
    76c0:	b510      	push	{r4, lr}
    76c2:	4604      	mov	r4, r0
    OutputFatalEventPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    76c4:	f010 fb32 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    76c8:	4a02      	ldr	r2, [pc, #8]	; (76d4 <Svc::OutputFatalEventPort::OutputFatalEventPort()+0x14>)
    76ca:	2300      	movs	r3, #0
  {

  }
    76cc:	4620      	mov	r0, r4
      m_port(nullptr)
    76ce:	6022      	str	r2, [r4, #0]
    76d0:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    76d2:	bd10      	pop	{r4, pc}
    76d4:	20003bd4 	.word	0x20003bd4

000076d8 <Svc::OutputFatalEventPort::addCallPort(Svc::InputFatalEventPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputFatalEventPort ::
    addCallPort(InputFatalEventPort* callPort)
  {
    76d8:	b538      	push	{r3, r4, r5, lr}
    76da:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
    76dc:	460d      	mov	r5, r1
    76de:	b121      	cbz	r1, 76ea <Svc::OutputFatalEventPort::addCallPort(Svc::InputFatalEventPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
    76e0:	2300      	movs	r3, #0
    this->m_port = callPort;
    76e2:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
    76e4:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
    76e6:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
    76e8:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
    76ea:	2188      	movs	r1, #136	; 0x88
    76ec:	4801      	ldr	r0, [pc, #4]	; (76f4 <Svc::OutputFatalEventPort::addCallPort(Svc::InputFatalEventPort*)+0x1c>)
    76ee:	f7f9 ff8d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    76f2:	e7f5      	b.n	76e0 <Svc::OutputFatalEventPort::addCallPort(Svc::InputFatalEventPort*)+0x8>
    76f4:	20001370 	.word	0x20001370

000076f8 <Svc::OutputFatalEventPort::invoke(unsigned long) const>:

  void OutputFatalEventPort ::
    invoke(FwEventIdType Id) const
  {
    76f8:	b570      	push	{r4, r5, r6, lr}
    76fa:	4604      	mov	r4, r0
    76fc:	b084      	sub	sp, #16
    76fe:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
    7700:	f010 fbaa 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    7704:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    7706:	b128      	cbz	r0, 7714 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(Id);
    7708:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(Id);
#endif
  }
    770a:	b004      	add	sp, #16
    770c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(Id);
    7710:	f7ff bfae 	b.w	7670 <Svc::InputFatalEventPort::invoke(unsigned long)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    7714:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7716:	b30b      	cbz	r3, 775c <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x64>
    class FatalEventPortBuffer : public Fw::SerializeBufferBase {
    7718:	4e14      	ldr	r6, [pc, #80]	; (776c <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x74>)
    771a:	4668      	mov	r0, sp
    771c:	f7f8 ff10 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(Id);
    7720:	4629      	mov	r1, r5
    7722:	4668      	mov	r0, sp
    class FatalEventPortBuffer : public Fw::SerializeBufferBase {
    7724:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(Id);
    7726:	f7f8 ff99 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    772a:	b958      	cbnz	r0, 7744 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
    772c:	6e60      	ldr	r0, [r4, #100]	; 0x64
    772e:	4669      	mov	r1, sp
    7730:	6803      	ldr	r3, [r0, #0]
    7732:	695b      	ldr	r3, [r3, #20]
    7734:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    7736:	b958      	cbnz	r0, 7750 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x58>
    class FatalEventPortBuffer : public Fw::SerializeBufferBase {
    7738:	4668      	mov	r0, sp
    773a:	9600      	str	r6, [sp, #0]
    773c:	f7f8 ff08 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    7740:	b004      	add	sp, #16
    7742:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    7744:	4601      	mov	r1, r0
    7746:	22a4      	movs	r2, #164	; 0xa4
    7748:	4809      	ldr	r0, [pc, #36]	; (7770 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x78>)
    774a:	f7f9 ff6d 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    774e:	e7ed      	b.n	772c <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    7750:	4601      	mov	r1, r0
    7752:	22a7      	movs	r2, #167	; 0xa7
    7754:	4806      	ldr	r0, [pc, #24]	; (7770 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x78>)
    7756:	f7f9 ff67 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    775a:	e7ed      	b.n	7738 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    775c:	219a      	movs	r1, #154	; 0x9a
    775e:	4804      	ldr	r0, [pc, #16]	; (7770 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x78>)
    7760:	f7f9 ff54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
    7764:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    7766:	2800      	cmp	r0, #0
    7768:	d0d6      	beq.n	7718 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x20>
    776a:	e7cd      	b.n	7708 <Svc::OutputFatalEventPort::invoke(unsigned long) const+0x10>
    776c:	20003950 	.word	0x20003950
    7770:	20001370 	.word	0x20001370

00007774 <Svc::InputFatalEventPort::init()>:
    Fw::InputPortBase::init();
    7774:	f010 babc 	b.w	17cf0 <Fw::InputPortBase::init()>

00007778 <Svc::OutputFatalEventPort::init()>:
    Fw::OutputPortBase::init();
    7778:	f010 bae4 	b.w	17d44 <Fw::OutputPortBase::init()>

0000777c <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)>:
        const NATIVE_INT_TYPE portNum,
        Fw::Buffer &fwBuffer
    )
  {
      // make sure component has been set up
      FW_ASSERT(this->m_setup);
    777c:	f890 33e0 	ldrb.w	r3, [r0, #992]	; 0x3e0
  {
    7780:	b5f0      	push	{r4, r5, r6, r7, lr}
    7782:	4604      	mov	r4, r0
    7784:	b083      	sub	sp, #12
    7786:	4615      	mov	r5, r2
      FW_ASSERT(this->m_setup);
    7788:	2b00      	cmp	r3, #0
    778a:	d04f      	beq.n	782c <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0xb0>
      FW_ASSERT(m_buffers);
    778c:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    7790:	2b00      	cmp	r3, #0
    7792:	d053      	beq.n	783c <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0xc0>
      // check for null, empty buffers - this is a warning because this component returns
      // null, empty buffers if it can't allocate one.
      // however, empty non-null buffers could potentially be previously allocated
      // buffers with their size reduced. the user is allowed to make buffers smaller.
      if (fwBuffer.getData() == nullptr && fwBuffer.getSize() == 0) {
    7794:	4628      	mov	r0, r5
    7796:	f00d fe8f 	bl	154b8 <Fw::Buffer::getData() const>
    779a:	2800      	cmp	r0, #0
    779c:	d057      	beq.n	784e <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0xd2>
          this->log_WARNING_HI_NullEmptyBuffer();
          this->m_emptyBuffs++;
          return;
      }
      // use the bufferID member field to find the original slot
      U32 context = fwBuffer.getContext();
    779e:	4628      	mov	r0, r5
    77a0:	f00d fe8e 	bl	154c0 <Fw::Buffer::getContext() const>
      U32 id = context & 0xFFFF;
      U32 mgrId = context >> 16;
      // check some things
      FW_ASSERT(
    77a4:	f8d4 23fc 	ldr.w	r2, [r4, #1020]	; 0x3fc
      U32 id = context & 0xFFFF;
    77a8:	b287      	uxth	r7, r0
      U32 mgrId = context >> 16;
    77aa:	0c06      	lsrs	r6, r0, #16
      FW_ASSERT(
    77ac:	42ba      	cmp	r2, r7
    77ae:	d95c      	bls.n	786a <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0xee>
        id < this->m_numStructs,
        static_cast<FwAssertArgType>(id),
        static_cast<FwAssertArgType>(this->m_numStructs));
      FW_ASSERT(
    77b0:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
    77b4:	42b3      	cmp	r3, r6
    77b6:	d131      	bne.n	781c <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0xa0>
        mgrId == this->m_mgrId,
        static_cast<FwAssertArgType>(mgrId),
        static_cast<FwAssertArgType>(id),
        static_cast<FwAssertArgType>(this->m_mgrId));
      FW_ASSERT(
    77b8:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    77bc:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    77c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    77c4:	0116      	lsls	r6, r2, #4
    77c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    77ca:	2b00      	cmp	r3, #0
    77cc:	d06e      	beq.n	78ac <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x130>
        true == this->m_buffers[id].allocated,
        static_cast<FwAssertArgType>(id),
        static_cast<FwAssertArgType>(this->m_mgrId));
      FW_ASSERT(
    77ce:	4628      	mov	r0, r5
    77d0:	f00d fe72 	bl	154b8 <Fw::Buffer::getData() const>
    77d4:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    77d8:	4433      	add	r3, r6
    77da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    77dc:	4283      	cmp	r3, r0
    77de:	d85d      	bhi.n	789c <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x120>
        reinterpret_cast<U8*>(fwBuffer.getData()) >= this->m_buffers[id].memory,
        static_cast<FwAssertArgType>(id),
        static_cast<FwAssertArgType>(this->m_mgrId));
      FW_ASSERT(
    77e0:	4628      	mov	r0, r5
    77e2:	f00d fe69 	bl	154b8 <Fw::Buffer::getData() const>
    77e6:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    77ea:	4433      	add	r3, r6
    77ec:	e9d3 2309 	ldrd	r2, r3, [r3, #36]	; 0x24
    77f0:	4413      	add	r3, r2
    77f2:	4298      	cmp	r0, r3
    77f4:	d24a      	bcs.n	788c <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x110>
        reinterpret_cast<U8*>(fwBuffer.getData()) < (this->m_buffers[id].memory + this->m_buffers[id].size),
        static_cast<FwAssertArgType>(id),
        static_cast<FwAssertArgType>(this->m_mgrId));
      // user can make smaller for their own purposes, but it shouldn't be bigger
      FW_ASSERT(
    77f6:	4628      	mov	r0, r5
    77f8:	f00d fe60 	bl	154bc <Fw::Buffer::getSize() const>
    77fc:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    7800:	4433      	add	r3, r6
    7802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7804:	4290      	cmp	r0, r2
    7806:	d836      	bhi.n	7876 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0xfa>
        fwBuffer.getSize() <= this->m_buffers[id].size,
        static_cast<FwAssertArgType>(id),
        static_cast<FwAssertArgType>(this->m_mgrId));
      // clear the allocated flag
      this->m_buffers[id].allocated = false;
      this->m_currBuffs--;
    7808:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
      this->m_buffers[id].allocated = false;
    780c:	2100      	movs	r1, #0
      this->m_currBuffs--;
    780e:	3a01      	subs	r2, #1
      this->m_buffers[id].allocated = false;
    7810:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
      this->m_currBuffs--;
    7814:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
  }
    7818:	b003      	add	sp, #12
    781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FW_ASSERT(
    781c:	2267      	movs	r2, #103	; 0x67
    781e:	4631      	mov	r1, r6
    7820:	4826      	ldr	r0, [pc, #152]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    7822:	9200      	str	r2, [sp, #0]
    7824:	463a      	mov	r2, r7
    7826:	f7f9 ff21 	bl	166c <Fw::SwAssert(char const*, long, long, long, unsigned long)>
    782a:	e7c5      	b.n	77b8 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x3c>
      FW_ASSERT(this->m_setup);
    782c:	2153      	movs	r1, #83	; 0x53
    782e:	4823      	ldr	r0, [pc, #140]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    7830:	f7f9 feec 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
      FW_ASSERT(m_buffers);
    7834:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    7838:	2b00      	cmp	r3, #0
    783a:	d1ab      	bne.n	7794 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x18>
    783c:	2154      	movs	r1, #84	; 0x54
    783e:	481f      	ldr	r0, [pc, #124]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    7840:	f7f9 fee4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
      if (fwBuffer.getData() == nullptr && fwBuffer.getSize() == 0) {
    7844:	4628      	mov	r0, r5
    7846:	f00d fe37 	bl	154b8 <Fw::Buffer::getData() const>
    784a:	2800      	cmp	r0, #0
    784c:	d1a7      	bne.n	779e <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x22>
    784e:	4628      	mov	r0, r5
    7850:	f00d fe34 	bl	154bc <Fw::Buffer::getSize() const>
    7854:	2800      	cmp	r0, #0
    7856:	d1a2      	bne.n	779e <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x22>
          this->log_WARNING_HI_NullEmptyBuffer();
    7858:	4620      	mov	r0, r4
    785a:	f000 fd67 	bl	832c <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()>
          this->m_emptyBuffs++;
    785e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
    7862:	3301      	adds	r3, #1
    7864:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
          return;
    7868:	e7d6      	b.n	7818 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x9c>
      FW_ASSERT(
    786a:	2363      	movs	r3, #99	; 0x63
    786c:	4639      	mov	r1, r7
    786e:	4813      	ldr	r0, [pc, #76]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    7870:	f7f9 feea 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    7874:	e79c      	b.n	77b0 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x34>
      FW_ASSERT(
    7876:	2379      	movs	r3, #121	; 0x79
    7878:	f8d4 23e4 	ldr.w	r2, [r4, #996]	; 0x3e4
    787c:	4639      	mov	r1, r7
    787e:	480f      	ldr	r0, [pc, #60]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    7880:	f7f9 fee2 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
      this->m_buffers[id].allocated = false;
    7884:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	; 0x3f0
    7888:	4433      	add	r3, r6
    788a:	e7bd      	b.n	7808 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x8c>
      FW_ASSERT(
    788c:	2374      	movs	r3, #116	; 0x74
    788e:	f8d4 23e4 	ldr.w	r2, [r4, #996]	; 0x3e4
    7892:	4639      	mov	r1, r7
    7894:	4809      	ldr	r0, [pc, #36]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    7896:	f7f9 fed7 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    789a:	e7ac      	b.n	77f6 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x7a>
      FW_ASSERT(
    789c:	2370      	movs	r3, #112	; 0x70
    789e:	f8d4 23e4 	ldr.w	r2, [r4, #996]	; 0x3e4
    78a2:	4639      	mov	r1, r7
    78a4:	4805      	ldr	r0, [pc, #20]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    78a6:	f7f9 fecf 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    78aa:	e799      	b.n	77e0 <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x64>
      FW_ASSERT(
    78ac:	236c      	movs	r3, #108	; 0x6c
    78ae:	f8d4 23e4 	ldr.w	r2, [r4, #996]	; 0x3e4
    78b2:	4639      	mov	r1, r7
    78b4:	4801      	ldr	r0, [pc, #4]	; (78bc <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x140>)
    78b6:	f7f9 fec7 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    78ba:	e788      	b.n	77ce <Svc::BufferManagerComponentImpl::bufferSendIn_handler(long, Fw::Buffer&)+0x52>
    78bc:	20001908 	.word	0x20001908

000078c0 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)>:
  Fw::Buffer BufferManagerComponentImpl ::
    bufferGetCallee_handler(
        const NATIVE_INT_TYPE portNum,
        U32 size
    )
  {
    78c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78c4:	461f      	mov	r7, r3
      // make sure component has been set up
      FW_ASSERT(this->m_setup);
    78c6:	f891 33e0 	ldrb.w	r3, [r1, #992]	; 0x3e0
  {
    78ca:	b08a      	sub	sp, #40	; 0x28
    78cc:	460e      	mov	r6, r1
    78ce:	4680      	mov	r8, r0
      FW_ASSERT(this->m_setup);
    78d0:	b32b      	cbz	r3, 791e <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x5e>
      FW_ASSERT(m_buffers);
    78d2:	f8d6 33f0 	ldr.w	r3, [r6, #1008]	; 0x3f0
    78d6:	b353      	cbz	r3, 792e <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x6e>
      // find smallest buffer based on size.
      for (NATIVE_UINT_TYPE buff = 0; buff < this->m_numStructs; buff++) {
    78d8:	f8d6 53fc 	ldr.w	r5, [r6, #1020]	; 0x3fc
    78dc:	b17d      	cbz	r5, 78fe <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x3e>
    78de:	f8d6 13f0 	ldr.w	r1, [r6, #1008]	; 0x3f0
    78e2:	f04f 0c00 	mov.w	ip, #0
          if ((not this->m_buffers[buff].allocated) and (size <= this->m_buffers[buff].size)) {
    78e6:	f891 402c 	ldrb.w	r4, [r1, #44]	; 0x2c
      for (NATIVE_UINT_TYPE buff = 0; buff < this->m_numStructs; buff++) {
    78ea:	f10c 0c01 	add.w	ip, ip, #1
          if ((not this->m_buffers[buff].allocated) and (size <= this->m_buffers[buff].size)) {
    78ee:	b914      	cbnz	r4, 78f6 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x36>
    78f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    78f2:	42bc      	cmp	r4, r7
    78f4:	d220      	bcs.n	7938 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x78>
      for (NATIVE_UINT_TYPE buff = 0; buff < this->m_numStructs; buff++) {
    78f6:	45ac      	cmp	ip, r5
    78f8:	f101 0130 	add.w	r1, r1, #48	; 0x30
    78fc:	d1f3      	bne.n	78e6 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x26>
              return copy;
          }
      }

      // if no buffers found, return empty buffer
      this->log_WARNING_HI_NoBuffsAvailable(size);
    78fe:	4630      	mov	r0, r6
    7900:	4639      	mov	r1, r7
    7902:	f000 fc71 	bl	81e8 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)>
      this->m_noBuffs++;
    7906:	f8d6 3408 	ldr.w	r3, [r6, #1032]	; 0x408
      return Fw::Buffer();
    790a:	4640      	mov	r0, r8
      this->m_noBuffs++;
    790c:	3301      	adds	r3, #1
    790e:	f8c6 3408 	str.w	r3, [r6, #1032]	; 0x408
      return Fw::Buffer();
    7912:	f00d fd73 	bl	153fc <Fw::Buffer::Buffer()>

  }
    7916:	4640      	mov	r0, r8
    7918:	b00a      	add	sp, #40	; 0x28
    791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(this->m_setup);
    791e:	2189      	movs	r1, #137	; 0x89
    7920:	4819      	ldr	r0, [pc, #100]	; (7988 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0xc8>)
    7922:	f7f9 fe73 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
      FW_ASSERT(m_buffers);
    7926:	f8d6 33f0 	ldr.w	r3, [r6, #1008]	; 0x3f0
    792a:	2b00      	cmp	r3, #0
    792c:	d1d4      	bne.n	78d8 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x18>
    792e:	218a      	movs	r1, #138	; 0x8a
    7930:	4815      	ldr	r0, [pc, #84]	; (7988 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0xc8>)
    7932:	f7f9 fe6b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    7936:	e7cf      	b.n	78d8 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0x18>
              this->m_buffers[buff].allocated = true;
    7938:	2301      	movs	r3, #1
              if (this->m_currBuffs > this->m_highWater) {
    793a:	f8d6 2400 	ldr.w	r2, [r6, #1024]	; 0x400
              Fw::Buffer copy = this->m_buffers[buff].buff;
    793e:	a801      	add	r0, sp, #4
              this->m_buffers[buff].allocated = true;
    7940:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
              this->m_currBuffs++;
    7944:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
    7948:	3301      	adds	r3, #1
              if (this->m_currBuffs > this->m_highWater) {
    794a:	4293      	cmp	r3, r2
              this->m_currBuffs++;
    794c:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
                  this->m_highWater = this->m_currBuffs;
    7950:	bf88      	it	hi
    7952:	f8c6 3400 	strhi.w	r3, [r6, #1024]	; 0x400
              Fw::Buffer copy = this->m_buffers[buff].buff;
    7956:	f00d fd65 	bl	15424 <Fw::Buffer::Buffer(Fw::Buffer const&)>
              copy.setSize(size);
    795a:	4639      	mov	r1, r7
    795c:	a801      	add	r0, sp, #4
    795e:	f00d fdb9 	bl	154d4 <Fw::Buffer::setSize(unsigned long)>
              return copy;
    7962:	a901      	add	r1, sp, #4
    7964:	4640      	mov	r0, r8
    7966:	f00d fd5d 	bl	15424 <Fw::Buffer::Buffer(Fw::Buffer const&)>
    796a:	4a08      	ldr	r2, [pc, #32]	; (798c <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0xcc>)
    796c:	4b08      	ldr	r3, [pc, #32]	; (7990 <Svc::BufferManagerComponentImpl::bufferGetCallee_handler(long, unsigned long)+0xd0>)
    796e:	a802      	add	r0, sp, #8
    7970:	e9cd 2301 	strd	r2, r3, [sp, #4]
    7974:	f7f8 fdec 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    7978:	a801      	add	r0, sp, #4
    797a:	f7f8 fddf 	bl	53c <Fw::Serializable::~Serializable()>
  }
    797e:	4640      	mov	r0, r8
    7980:	b00a      	add	sp, #40	; 0x28
    7982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7986:	bf00      	nop
    7988:	20001908 	.word	0x20001908
    798c:	200032c0 	.word	0x200032c0
    7990:	20003214 	.word	0x20003214

00007994 <Svc::BufferManagerComponentImpl::BufferManagerComponentImpl(char const*)>:
  BufferManagerComponentImpl ::
    7994:	b510      	push	{r4, lr}
    7996:	4604      	mov	r4, r0
    ,m_emptyBuffs(0)
    7998:	f000 fafc 	bl	7f94 <Svc::BufferManagerComponentBase::BufferManagerComponentBase(char const*)>
    ,m_setup(false)
    799c:	2300      	movs	r3, #0
    ,m_emptyBuffs(0)
    799e:	4a0a      	ldr	r2, [pc, #40]	; (79c8 <Svc::BufferManagerComponentImpl::BufferManagerComponentImpl(char const*)+0x34>)
  }
    79a0:	4620      	mov	r0, r4
    ,m_emptyBuffs(0)
    79a2:	6022      	str	r2, [r4, #0]
    ,m_setup(false)
    79a4:	f8a4 33e0 	strh.w	r3, [r4, #992]	; 0x3e0
    ,m_mgrId(0)
    79a8:	f8c4 33e4 	str.w	r3, [r4, #996]	; 0x3e4
    ,m_highWater(0)
    79ac:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    ,m_currBuffs(0)
    79b0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    ,m_noBuffs(0)
    79b4:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    ,m_emptyBuffs(0)
    79b8:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    ,m_allocator(nullptr)
    79bc:	e9c4 33fc 	strd	r3, r3, [r4, #1008]	; 0x3f0
    ,m_numStructs(0)
    79c0:	e9c4 33fe 	strd	r3, r3, [r4, #1016]	; 0x3f8
  }
    79c4:	bd10      	pop	{r4, pc}
    79c6:	bf00      	nop
    79c8:	20003d74 	.word	0x20003d74

000079cc <Svc::BufferManagerComponentImpl::cleanup()>:
  {
    79cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      FW_ASSERT(this->m_buffers);
    79d0:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	; 0x3f0
  {
    79d4:	4605      	mov	r5, r0
      FW_ASSERT(this->m_buffers);
    79d6:	b3b3      	cbz	r3, 7a46 <Svc::BufferManagerComponentImpl::cleanup()+0x7a>
      FW_ASSERT(this->m_allocator);
    79d8:	f8d5 33f4 	ldr.w	r3, [r5, #1012]	; 0x3f4
    79dc:	b373      	cbz	r3, 7a3c <Svc::BufferManagerComponentImpl::cleanup()+0x70>
      if (not this->m_cleaned) {
    79de:	f895 43e1 	ldrb.w	r4, [r5, #993]	; 0x3e1
    79e2:	bb4c      	cbnz	r4, 7a38 <Svc::BufferManagerComponentImpl::cleanup()+0x6c>
          for (NATIVE_UINT_TYPE entry = 0; entry < this->m_numStructs; entry++) {
    79e4:	f8d5 33fc 	ldr.w	r3, [r5, #1020]	; 0x3fc
    79e8:	b1bb      	cbz	r3, 7a1a <Svc::BufferManagerComponentImpl::cleanup()+0x4e>
    79ea:	f8df 9068 	ldr.w	r9, [pc, #104]	; 7a54 <Svc::BufferManagerComponentImpl::cleanup()+0x88>
    79ee:	4626      	mov	r6, r4
    79f0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 7a58 <Svc::BufferManagerComponentImpl::cleanup()+0x8c>
              this->m_buffers[entry].buff.~Buffer();
    79f4:	f8d5 33f0 	ldr.w	r3, [r5, #1008]	; 0x3f0
          for (NATIVE_UINT_TYPE entry = 0; entry < this->m_numStructs; entry++) {
    79f8:	3601      	adds	r6, #1
              this->m_buffers[entry].buff.~Buffer();
    79fa:	191f      	adds	r7, r3, r4
    79fc:	f843 9004 	str.w	r9, [r3, r4]
    7a00:	3430      	adds	r4, #48	; 0x30
    7a02:	4638      	mov	r0, r7
    7a04:	f840 8f04 	str.w	r8, [r0, #4]!
    7a08:	f7f8 fda2 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    7a0c:	4638      	mov	r0, r7
    7a0e:	f7f8 fd95 	bl	53c <Fw::Serializable::~Serializable()>
          for (NATIVE_UINT_TYPE entry = 0; entry < this->m_numStructs; entry++) {
    7a12:	f8d5 33fc 	ldr.w	r3, [r5, #1020]	; 0x3fc
    7a16:	429e      	cmp	r6, r3
    7a18:	d3ec      	bcc.n	79f4 <Svc::BufferManagerComponentImpl::cleanup()+0x28>
          this->m_allocator->deallocate(this->m_memId,this->m_buffers);
    7a1a:	f8d5 03f4 	ldr.w	r0, [r5, #1012]	; 0x3f4
          this->m_cleaned = true;
    7a1e:	2401      	movs	r4, #1
          this->m_allocator->deallocate(this->m_memId,this->m_buffers);
    7a20:	f8d5 23f0 	ldr.w	r2, [r5, #1008]	; 0x3f0
    7a24:	6803      	ldr	r3, [r0, #0]
    7a26:	f8d5 13f8 	ldr.w	r1, [r5, #1016]	; 0x3f8
    7a2a:	685b      	ldr	r3, [r3, #4]
          this->m_cleaned = true;
    7a2c:	f885 43e1 	strb.w	r4, [r5, #993]	; 0x3e1
          this->m_allocator->deallocate(this->m_memId,this->m_buffers);
    7a30:	4798      	blx	r3
          this->m_setup = false;
    7a32:	2300      	movs	r3, #0
    7a34:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
  }
    7a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      FW_ASSERT(this->m_allocator);
    7a3c:	2139      	movs	r1, #57	; 0x39
    7a3e:	4804      	ldr	r0, [pc, #16]	; (7a50 <Svc::BufferManagerComponentImpl::cleanup()+0x84>)
    7a40:	f7f9 fde4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    7a44:	e7cb      	b.n	79de <Svc::BufferManagerComponentImpl::cleanup()+0x12>
      FW_ASSERT(this->m_buffers);
    7a46:	2138      	movs	r1, #56	; 0x38
    7a48:	4801      	ldr	r0, [pc, #4]	; (7a50 <Svc::BufferManagerComponentImpl::cleanup()+0x84>)
    7a4a:	f7f9 fddf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    7a4e:	e7c3      	b.n	79d8 <Svc::BufferManagerComponentImpl::cleanup()+0xc>
    7a50:	20001908 	.word	0x20001908
    7a54:	200032c0 	.word	0x200032c0
    7a58:	20003214 	.word	0x20003214

00007a5c <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()>:
    ~BufferManagerComponentImpl()
    7a5c:	4a09      	ldr	r2, [pc, #36]	; (7a84 <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()+0x28>)
      if (m_setup) {
    7a5e:	f890 33e0 	ldrb.w	r3, [r0, #992]	; 0x3e0
  BufferManagerComponentImpl ::
    7a62:	b510      	push	{r4, lr}
    7a64:	4604      	mov	r4, r0
    ~BufferManagerComponentImpl()
    7a66:	6002      	str	r2, [r0, #0]
      if (m_setup) {
    7a68:	b923      	cbnz	r3, 7a74 <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()+0x18>
    ~BufferManagerComponentImpl()
    7a6a:	4620      	mov	r0, r4
    7a6c:	f000 fb84 	bl	8178 <Svc::BufferManagerComponentBase::~BufferManagerComponentBase()>
  }
    7a70:	4620      	mov	r0, r4
    7a72:	bd10      	pop	{r4, pc}
          this->cleanup();
    7a74:	f7ff ffaa 	bl	79cc <Svc::BufferManagerComponentImpl::cleanup()>
    ~BufferManagerComponentImpl()
    7a78:	4620      	mov	r0, r4
    7a7a:	f000 fb7d 	bl	8178 <Svc::BufferManagerComponentBase::~BufferManagerComponentBase()>
  }
    7a7e:	4620      	mov	r0, r4
    7a80:	bd10      	pop	{r4, pc}
    7a82:	bf00      	nop
    7a84:	20003d74 	.word	0x20003d74

00007a88 <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()>:
    ~BufferManagerComponentImpl()
    7a88:	4a09      	ldr	r2, [pc, #36]	; (7ab0 <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()+0x28>)
      if (m_setup) {
    7a8a:	f890 33e0 	ldrb.w	r3, [r0, #992]	; 0x3e0
  BufferManagerComponentImpl ::
    7a8e:	b510      	push	{r4, lr}
    7a90:	4604      	mov	r4, r0
    ~BufferManagerComponentImpl()
    7a92:	6002      	str	r2, [r0, #0]
      if (m_setup) {
    7a94:	b94b      	cbnz	r3, 7aaa <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()+0x22>
    ~BufferManagerComponentImpl()
    7a96:	4620      	mov	r0, r4
    7a98:	f000 fb6e 	bl	8178 <Svc::BufferManagerComponentBase::~BufferManagerComponentBase()>
  }
    7a9c:	4620      	mov	r0, r4
    7a9e:	f44f 6182 	mov.w	r1, #1040	; 0x410
    7aa2:	f011 f915 	bl	18cd0 <operator delete(void*, unsigned int)>
    7aa6:	4620      	mov	r0, r4
    7aa8:	bd10      	pop	{r4, pc}
          this->cleanup();
    7aaa:	f7ff ff8f 	bl	79cc <Svc::BufferManagerComponentImpl::cleanup()>
    7aae:	e7f2      	b.n	7a96 <Svc::BufferManagerComponentImpl::~BufferManagerComponentImpl()+0xe>
    7ab0:	20003d74 	.word	0x20003d74

00007ab4 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)>:
  void BufferManagerComponentImpl::setup(
    NATIVE_UINT_TYPE mgrId, //!< manager ID
    NATIVE_UINT_TYPE memId, //!< Memory segment identifier
    Fw::MemAllocator& allocator, //!< memory allocator
    const BufferBins& bins //!< Set of user bins
  ) {
    7ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ab8:	b082      	sub	sp, #8
    7aba:	4605      	mov	r5, r0

    this->m_mgrId = mgrId;
    this->m_memId = memId;
    this->m_allocator = &allocator;
    // clear bins
    memset(&this->m_bufferBins,0,sizeof(this->m_bufferBins));
    7abc:	2400      	movs	r4, #0
  ) {
    7abe:	980a      	ldr	r0, [sp, #40]	; 0x28
    memset(&this->m_bufferBins,0,sizeof(this->m_bufferBins));
    7ac0:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
    7ac4:	f8c5 43ec 	str.w	r4, [r5, #1004]	; 0x3ec
    this->m_mgrId = mgrId;
    7ac8:	f8c5 13e4 	str.w	r1, [r5, #996]	; 0x3e4
    this->m_memId = memId;
    7acc:	f8c5 23f8 	str.w	r2, [r5, #1016]	; 0x3f8
    memset(&this->m_bufferBins,0,sizeof(this->m_bufferBins));
    7ad0:	f8c5 43e8 	str.w	r4, [r5, #1000]	; 0x3e8
    this->m_allocator = &allocator;
    7ad4:	f8c5 33f4 	str.w	r3, [r5, #1012]	; 0x3f4

    this->m_bufferBins = bins;
    7ad8:	c803      	ldmia	r0, {r0, r1}
    7ada:	e886 0003 	stmia.w	r6, {r0, r1}
    // compute the amount of memory needed
    NATIVE_UINT_TYPE memorySize = 0; // track needed memory
    this->m_numStructs = 0; // size the number of tracking structs
    // walk through bins and add up the sizes
    for (NATIVE_UINT_TYPE bin = 0; bin < BUFFERMGR_MAX_NUM_BINS; bin++) {
        if (this->m_bufferBins.bins[bin].numBuffers) {
    7ade:	f8d5 03ec 	ldr.w	r0, [r5, #1004]	; 0x3ec
    this->m_numStructs = 0; // size the number of tracking structs
    7ae2:	f8c5 43fc 	str.w	r4, [r5, #1020]	; 0x3fc
        if (this->m_bufferBins.bins[bin].numBuffers) {
    7ae6:	2800      	cmp	r0, #0
    7ae8:	d063      	beq.n	7bb2 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0xfe>
            memorySize +=
                (this->m_bufferBins.bins[bin].bufferSize * this->m_bufferBins.bins[bin].numBuffers) + // allocate each set of buffer memory
    7aea:	f8d5 13e8 	ldr.w	r1, [r5, #1000]	; 0x3e8
                (static_cast<NATIVE_UINT_TYPE>(sizeof(AllocatedBuffer)) * this->m_bufferBins.bins[bin].numBuffers); // allocate the structs to track the buffers
            this->m_numStructs += this->m_bufferBins.bins[bin].numBuffers;
    7aee:	f8c5 03fc 	str.w	r0, [r5, #1020]	; 0x3fc
                (this->m_bufferBins.bins[bin].bufferSize * this->m_bufferBins.bins[bin].numBuffers) + // allocate each set of buffer memory
    7af2:	3130      	adds	r1, #48	; 0x30
    7af4:	fb00 f801 	mul.w	r8, r0, r1
        }
    }

    NATIVE_UINT_TYPE allocatedSize = memorySize;
    bool recoverable = false; //!< don't care if it is recoverable since they are a pool of user buffers
    7af8:	2000      	movs	r0, #0

    // allocate memory
    void *memory = allocator.allocate(memId,allocatedSize,recoverable);
    7afa:	4611      	mov	r1, r2
    7afc:	681a      	ldr	r2, [r3, #0]
    bool recoverable = false; //!< don't care if it is recoverable since they are a pool of user buffers
    7afe:	f88d 0003 	strb.w	r0, [sp, #3]
    void *memory = allocator.allocate(memId,allocatedSize,recoverable);
    7b02:	4618      	mov	r0, r3
    7b04:	6814      	ldr	r4, [r2, #0]
    7b06:	f10d 0303 	add.w	r3, sp, #3
    7b0a:	aa01      	add	r2, sp, #4
    NATIVE_UINT_TYPE allocatedSize = memorySize;
    7b0c:	f8cd 8004 	str.w	r8, [sp, #4]
    void *memory = allocator.allocate(memId,allocatedSize,recoverable);
    7b10:	47a0      	blx	r4
    // make sure the memory returns was non-zero and the size requested
    FW_ASSERT(memory);
    7b12:	4681      	mov	r9, r0
    7b14:	2800      	cmp	r0, #0
    7b16:	d04e      	beq.n	7bb6 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x102>
    FW_ASSERT(
    7b18:	9a01      	ldr	r2, [sp, #4]
    7b1a:	4542      	cmp	r2, r8
    7b1c:	d004      	beq.n	7b28 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x74>
    7b1e:	23c4      	movs	r3, #196	; 0xc4
    7b20:	4641      	mov	r1, r8
    7b22:	4827      	ldr	r0, [pc, #156]	; (7bc0 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x10c>)
    7b24:	f7f9 fd90 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
      static_cast<FwAssertArgType>(allocatedSize));
    // structs will be at beginning of memory
    this->m_buffers = static_cast<AllocatedBuffer*>(memory);
    // memory buffers will be at end of structs in memory, so compute that memory as the beginning of the
    // struct past the number of structs
    U8* bufferMem = reinterpret_cast<U8*>(&this->m_buffers[this->m_numStructs]);
    7b28:	f8d5 63fc 	ldr.w	r6, [r5, #1020]	; 0x3fc

    // walk through entries and initialize them
    NATIVE_UINT_TYPE currStruct = 0;
    for (NATIVE_UINT_TYPE bin = 0; bin < BUFFERMGR_MAX_NUM_BINS; bin++) {
        if (this->m_bufferBins.bins[bin].numBuffers) {
    7b2c:	f8d5 43ec 	ldr.w	r4, [r5, #1004]	; 0x3ec
    U8* bufferMem = reinterpret_cast<U8*>(&this->m_buffers[this->m_numStructs]);
    7b30:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    this->m_buffers = static_cast<AllocatedBuffer*>(memory);
    7b34:	f8c5 93f0 	str.w	r9, [r5, #1008]	; 0x3f0
    U8* bufferMem = reinterpret_cast<U8*>(&this->m_buffers[this->m_numStructs]);
    7b38:	eb09 1606 	add.w	r6, r9, r6, lsl #4
        if (this->m_bufferBins.bins[bin].numBuffers) {
    7b3c:	b30c      	cbz	r4, 7b82 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0xce>
            for (NATIVE_UINT_TYPE binEntry = 0; binEntry < this->m_bufferBins.bins[bin].numBuffers; binEntry++) {
                // placement new for Fw::Buffer instance. We don't need the new() return value,
                // because we know where the Fw::Buffer instance is
                U32 context = (this->m_mgrId << 16) | currStruct;
                (void) new(&this->m_buffers[currStruct].buff) Fw::Buffer(bufferMem,this->m_bufferBins.bins[bin].bufferSize,context);
    7b3e:	2400      	movs	r4, #0
    7b40:	f8d5 23e8 	ldr.w	r2, [r5, #1000]	; 0x3e8
    void *memory = allocator.allocate(memId,allocatedSize,recoverable);
    7b44:	4648      	mov	r0, r9
                this->m_buffers[currStruct].allocated = false;
    7b46:	4627      	mov	r7, r4
                (void) new(&this->m_buffers[currStruct].buff) Fw::Buffer(bufferMem,this->m_bufferBins.bins[bin].bufferSize,context);
    7b48:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
                U32 context = (this->m_mgrId << 16) | currStruct;
    7b4c:	f8d5 33e4 	ldr.w	r3, [r5, #996]	; 0x3e4
                (void) new(&this->m_buffers[currStruct].buff) Fw::Buffer(bufferMem,this->m_bufferBins.bins[bin].bufferSize,context);
    7b50:	4631      	mov	r1, r6
    7b52:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
                this->m_buffers[currStruct].memory = bufferMem;
                this->m_buffers[currStruct].size = this->m_bufferBins.bins[bin].bufferSize;
                bufferMem += this->m_bufferBins.bins[bin].bufferSize;
                currStruct++;
    7b56:	3401      	adds	r4, #1
                (void) new(&this->m_buffers[currStruct].buff) Fw::Buffer(bufferMem,this->m_bufferBins.bins[bin].bufferSize,context);
    7b58:	eb00 100c 	add.w	r0, r0, ip, lsl #4
    7b5c:	ea4f 1a0c 	mov.w	sl, ip, lsl #4
    7b60:	f00d fc7a 	bl	15458 <Fw::Buffer::Buffer(unsigned char*, unsigned long, unsigned long)>
                this->m_buffers[currStruct].allocated = false;
    7b64:	f8d5 03f0 	ldr.w	r0, [r5, #1008]	; 0x3f0
                this->m_buffers[currStruct].size = this->m_bufferBins.bins[bin].bufferSize;
    7b68:	f8d5 23e8 	ldr.w	r2, [r5, #1000]	; 0x3e8
                this->m_buffers[currStruct].allocated = false;
    7b6c:	eb00 030a 	add.w	r3, r0, sl
                this->m_buffers[currStruct].size = this->m_bufferBins.bins[bin].bufferSize;
    7b70:	629a      	str	r2, [r3, #40]	; 0x28
            for (NATIVE_UINT_TYPE binEntry = 0; binEntry < this->m_bufferBins.bins[bin].numBuffers; binEntry++) {
    7b72:	e9d5 21fa 	ldrd	r2, r1, [r5, #1000]	; 0x3e8
                this->m_buffers[currStruct].memory = bufferMem;
    7b76:	625e      	str	r6, [r3, #36]	; 0x24
            for (NATIVE_UINT_TYPE binEntry = 0; binEntry < this->m_bufferBins.bins[bin].numBuffers; binEntry++) {
    7b78:	42a1      	cmp	r1, r4
                bufferMem += this->m_bufferBins.bins[bin].bufferSize;
    7b7a:	4416      	add	r6, r2
                this->m_buffers[currStruct].allocated = false;
    7b7c:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
            for (NATIVE_UINT_TYPE binEntry = 0; binEntry < this->m_bufferBins.bins[bin].numBuffers; binEntry++) {
    7b80:	d8e2      	bhi.n	7b48 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x94>
        }
    }

    // check that the initiation pointer made it to the end of allocated space
    U8* const CURR_PTR = bufferMem;
    U8* const END_PTR = static_cast<U8*>(memory) + memorySize;
    7b82:	eb09 0208 	add.w	r2, r9, r8
    FW_ASSERT(CURR_PTR == END_PTR,
    7b86:	42b2      	cmp	r2, r6
    7b88:	d004      	beq.n	7b94 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0xe0>
    7b8a:	23e3      	movs	r3, #227	; 0xe3
    7b8c:	4631      	mov	r1, r6
    7b8e:	480c      	ldr	r0, [pc, #48]	; (7bc0 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x10c>)
    7b90:	f7f9 fd5a 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
        static_cast<FwAssertArgType>(reinterpret_cast<POINTER_CAST>(CURR_PTR)),
        static_cast<FwAssertArgType>(reinterpret_cast<POINTER_CAST>(END_PTR)));
    // secondary init verification
    FW_ASSERT(
    7b94:	f8d5 23fc 	ldr.w	r2, [r5, #1020]	; 0x3fc
    7b98:	42a2      	cmp	r2, r4
    7b9a:	d004      	beq.n	7ba6 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0xf2>
    7b9c:	23e7      	movs	r3, #231	; 0xe7
    7b9e:	4621      	mov	r1, r4
    7ba0:	4807      	ldr	r0, [pc, #28]	; (7bc0 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x10c>)
    7ba2:	f7f9 fd51 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
      currStruct == this->m_numStructs,
      static_cast<FwAssertArgType>(currStruct),
      static_cast<FwAssertArgType>(this->m_numStructs));
    // indicate setup is done
    this->m_setup = true;
    7ba6:	2301      	movs	r3, #1
    7ba8:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
  }
    7bac:	b002      	add	sp, #8
    7bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bb2:	4680      	mov	r8, r0
    7bb4:	e7a0      	b.n	7af8 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x44>
    FW_ASSERT(memory);
    7bb6:	21c3      	movs	r1, #195	; 0xc3
    7bb8:	4801      	ldr	r0, [pc, #4]	; (7bc0 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x10c>)
    7bba:	f7f9 fd27 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    7bbe:	e7ab      	b.n	7b18 <Svc::BufferManagerComponentImpl::setup(unsigned long, unsigned long, Fw::MemAllocator&, Svc::BufferManagerComponentImpl::BufferBins const&)+0x64>
    7bc0:	20001908 	.word	0x20001908

00007bc4 <Svc::BufferManagerComponentImpl::schedIn_handler(long, unsigned long)>:
  void BufferManagerComponentImpl ::
    schedIn_handler(
        const NATIVE_INT_TYPE portNum,
        U32 context
    )
  {
    7bc4:	b510      	push	{r4, lr}
    7bc6:	4604      	mov	r4, r0
    7bc8:	b086      	sub	sp, #24
    // write telemetry values
    this->tlmWrite_HiBuffs(this->m_highWater);
    7bca:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
    7bce:	a802      	add	r0, sp, #8
    7bd0:	9101      	str	r1, [sp, #4]
    7bd2:	f00f fe6d 	bl	178b0 <Fw::Time::Time()>
    7bd6:	aa02      	add	r2, sp, #8
    7bd8:	9901      	ldr	r1, [sp, #4]
    7bda:	4620      	mov	r0, r4
    7bdc:	f000 fce4 	bl	85a8 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)>
    7be0:	a802      	add	r0, sp, #8
    7be2:	f00f fe0d 	bl	17800 <Fw::Time::~Time()>
    this->tlmWrite_CurrBuffs(this->m_currBuffs);
    7be6:	f8d4 1404 	ldr.w	r1, [r4, #1028]	; 0x404
    7bea:	a802      	add	r0, sp, #8
    7bec:	9101      	str	r1, [sp, #4]
    7bee:	f00f fe5f 	bl	178b0 <Fw::Time::Time()>
    7bf2:	aa02      	add	r2, sp, #8
    7bf4:	9901      	ldr	r1, [sp, #4]
    7bf6:	4620      	mov	r0, r4
    7bf8:	f000 fc7e 	bl	84f8 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)>
    7bfc:	a802      	add	r0, sp, #8
    7bfe:	f00f fdff 	bl	17800 <Fw::Time::~Time()>
    this->tlmWrite_TotalBuffs(this->m_numStructs);
    7c02:	f8d4 13fc 	ldr.w	r1, [r4, #1020]	; 0x3fc
    7c06:	a802      	add	r0, sp, #8
    7c08:	9101      	str	r1, [sp, #4]
    7c0a:	f00f fe51 	bl	178b0 <Fw::Time::Time()>
    7c0e:	aa02      	add	r2, sp, #8
    7c10:	9901      	ldr	r1, [sp, #4]
    7c12:	4620      	mov	r0, r4
    7c14:	f000 fc18 	bl	8448 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)>
    7c18:	a802      	add	r0, sp, #8
    7c1a:	f00f fdf1 	bl	17800 <Fw::Time::~Time()>
    this->tlmWrite_NoBuffs(this->m_noBuffs);
    7c1e:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
    7c22:	a802      	add	r0, sp, #8
    7c24:	9101      	str	r1, [sp, #4]
    7c26:	f00f fe43 	bl	178b0 <Fw::Time::Time()>
    7c2a:	aa02      	add	r2, sp, #8
    7c2c:	9901      	ldr	r1, [sp, #4]
    7c2e:	4620      	mov	r0, r4
    7c30:	f000 fd12 	bl	8658 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)>
    7c34:	a802      	add	r0, sp, #8
    7c36:	f00f fde3 	bl	17800 <Fw::Time::~Time()>
    this->tlmWrite_EmptyBuffs(this->m_emptyBuffs);
    7c3a:	f8d4 140c 	ldr.w	r1, [r4, #1036]	; 0x40c
    7c3e:	a802      	add	r0, sp, #8
    7c40:	9101      	str	r1, [sp, #4]
    7c42:	f00f fe35 	bl	178b0 <Fw::Time::Time()>
    7c46:	aa02      	add	r2, sp, #8
    7c48:	9901      	ldr	r1, [sp, #4]
    7c4a:	4620      	mov	r0, r4
    7c4c:	f000 fd5c 	bl	8708 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)>
    7c50:	a802      	add	r0, sp, #8
    7c52:	f00f fdd5 	bl	17800 <Fw::Time::~Time()>
  }
    7c56:	b006      	add	sp, #24
    7c58:	bd10      	pop	{r4, pc}
    7c5a:	bf00      	nop

00007c5c <Svc::BufferManagerComponentBase::lock()>:
  // ----------------------------------------------------------------------

  void BufferManagerComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
    7c5c:	f500 7062 	add.w	r0, r0, #904	; 0x388
    7c60:	f00b be0a 	b.w	13878 <Os::Mutex::lock()>

00007c64 <Svc::BufferManagerComponentBase::unLock()>:
  }

  void BufferManagerComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
    7c64:	f500 7062 	add.w	r0, r0, #904	; 0x388
    7c68:	f00b be5a 	b.w	13920 <Os::Mutex::unLock()>

00007c6c <Svc::BufferManagerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_schedIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    7c6c:	b570      	push	{r4, r5, r6, lr}
    7c6e:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    7c70:	4604      	mov	r4, r0
  {
    7c72:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    7c74:	b178      	cbz	r0, 7c96 <Svc::BufferManagerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x2a>
    FW_ASSERT(
    7c76:	2d00      	cmp	r5, #0
    7c78:	dd05      	ble.n	7c86 <Svc::BufferManagerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x1a>
    7c7a:	f240 222d 	movw	r2, #557	; 0x22d
    7c7e:	4629      	mov	r1, r5
    7c80:	4808      	ldr	r0, [pc, #32]	; (7ca4 <Svc::BufferManagerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    7c82:	f7f9 fcd1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->schedIn_handler(
    7c86:	6823      	ldr	r3, [r4, #0]
    7c88:	4632      	mov	r2, r6
    7c8a:	4629      	mov	r1, r5
    7c8c:	4620      	mov	r0, r4
    7c8e:	699b      	ldr	r3, [r3, #24]
    BufferManagerComponentBase* compPtr = static_cast<BufferManagerComponentBase*>(callComp);
    compPtr->schedIn_handlerBase(
      portNum,
      context
    );
  }
    7c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->schedIn_handler(
    7c94:	4718      	bx	r3
    FW_ASSERT(callComp);
    7c96:	f240 4133 	movw	r1, #1075	; 0x433
    7c9a:	4802      	ldr	r0, [pc, #8]	; (7ca4 <Svc::BufferManagerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    7c9c:	f7f9 fcb6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    7ca0:	e7e9      	b.n	7c76 <Svc::BufferManagerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0xa>
    7ca2:	bf00      	nop
    7ca4:	200017a8 	.word	0x200017a8

00007ca8 <Svc::BufferManagerComponentBase::init(long)>:
  {
    7ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7cac:	4604      	mov	r4, r0
    7cae:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    7cb0:	f00a f916 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    7cb4:	4f6f      	ldr	r7, [pc, #444]	; (7e74 <Svc::BufferManagerComponentBase::init(long)+0x1cc>)
      this->m_bufferGetCallee_InputPort[port].init();
    7cb6:	f104 0864 	add.w	r8, r4, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    7cba:	4d6f      	ldr	r5, [pc, #444]	; (7e78 <Svc::BufferManagerComponentBase::init(long)+0x1d0>)
    const char* toChar() const { return this->m_buf; }
    7cbc:	f104 0608 	add.w	r6, r4, #8
      this->m_bufferSendIn_InputPort[port].init();
    7cc0:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
      this->m_bufferGetCallee_InputPort[port].init();
    7cc4:	4640      	mov	r0, r8
    7cc6:	f00d fcd1 	bl	1566c <Fw::InputBufferGetPort::init()>
      this->m_bufferGetCallee_InputPort[port].addCallComp(
    7cca:	4a6c      	ldr	r2, [pc, #432]	; (7e7c <Svc::BufferManagerComponentBase::init(long)+0x1d4>)
    7ccc:	4621      	mov	r1, r4
    7cce:	4640      	mov	r0, r8
    7cd0:	f00d fc50 	bl	15574 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_bufferGetCallee_InputPort[port].setPortNum(port);
    7cd4:	2100      	movs	r1, #0
    7cd6:	4640      	mov	r0, r8
    7cd8:	f00f fffc 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    7cdc:	4668      	mov	r0, sp
    7cde:	f7f9 fa9f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7ce2:	4639      	mov	r1, r7
    7ce4:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7ce6:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7ce8:	f7f9 fb02 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7cec:	2300      	movs	r3, #0
    7cee:	4632      	mov	r2, r6
    7cf0:	4963      	ldr	r1, [pc, #396]	; (7e80 <Svc::BufferManagerComponentBase::init(long)+0x1d8>)
    7cf2:	4668      	mov	r0, sp
    7cf4:	f7f9 faca 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferGetCallee_InputPort[port].setObjName(portName.toChar());
    7cf8:	a901      	add	r1, sp, #4
    7cfa:	4640      	mov	r0, r8
      this->m_schedIn_InputPort[port].init();
    7cfc:	f504 78a2 	add.w	r8, r4, #324	; 0x144
      this->m_bufferGetCallee_InputPort[port].setObjName(portName.toChar());
    7d00:	f010 f94e 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7d04:	4668      	mov	r0, sp
    7d06:	9500      	str	r5, [sp, #0]
    7d08:	f7f9 fa94 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_bufferSendIn_InputPort[port].init();
    7d0c:	4648      	mov	r0, r9
    7d0e:	f00d fddd 	bl	158cc <Fw::InputBufferSendPort::init()>
      this->m_bufferSendIn_InputPort[port].addCallComp(
    7d12:	4a5c      	ldr	r2, [pc, #368]	; (7e84 <Svc::BufferManagerComponentBase::init(long)+0x1dc>)
    7d14:	4621      	mov	r1, r4
    7d16:	4648      	mov	r0, r9
    7d18:	f00d fd3c 	bl	15794 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))>
      this->m_bufferSendIn_InputPort[port].setPortNum(port);
    7d1c:	2100      	movs	r1, #0
    7d1e:	4648      	mov	r0, r9
    7d20:	f00f ffd8 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    7d24:	4668      	mov	r0, sp
    7d26:	f7f9 fa7b 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7d2a:	4639      	mov	r1, r7
    7d2c:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7d2e:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7d30:	f7f9 fade 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7d34:	2300      	movs	r3, #0
    7d36:	4632      	mov	r2, r6
    7d38:	4953      	ldr	r1, [pc, #332]	; (7e88 <Svc::BufferManagerComponentBase::init(long)+0x1e0>)
    7d3a:	4668      	mov	r0, sp
    7d3c:	f7f9 faa6 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferSendIn_InputPort[port].setObjName(portName.toChar());
    7d40:	a901      	add	r1, sp, #4
    7d42:	4648      	mov	r0, r9
      this->m_eventOut_OutputPort[port].init();
    7d44:	f504 79da 	add.w	r9, r4, #436	; 0x1b4
      this->m_bufferSendIn_InputPort[port].setObjName(portName.toChar());
    7d48:	f010 f92a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7d4c:	4668      	mov	r0, sp
    7d4e:	9500      	str	r5, [sp, #0]
    7d50:	f7f9 fa70 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_schedIn_InputPort[port].init();
    7d54:	4640      	mov	r0, r8
    7d56:	f009 f9b1 	bl	110bc <Svc::InputSchedPort::init()>
      this->m_schedIn_InputPort[port].addCallComp(
    7d5a:	4a4c      	ldr	r2, [pc, #304]	; (7e8c <Svc::BufferManagerComponentBase::init(long)+0x1e4>)
    7d5c:	4621      	mov	r1, r4
    7d5e:	4640      	mov	r0, r8
    7d60:	f009 f910 	bl	10f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_schedIn_InputPort[port].setPortNum(port);
    7d64:	2100      	movs	r1, #0
    7d66:	4640      	mov	r0, r8
    7d68:	f00f ffb4 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    7d6c:	4668      	mov	r0, sp
    7d6e:	f7f9 fa57 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7d72:	4639      	mov	r1, r7
    7d74:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7d76:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7d78:	f7f9 faba 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7d7c:	4632      	mov	r2, r6
    7d7e:	2300      	movs	r3, #0
    7d80:	4943      	ldr	r1, [pc, #268]	; (7e90 <Svc::BufferManagerComponentBase::init(long)+0x1e8>)
    7d82:	4668      	mov	r0, sp
    7d84:	f7f9 fa82 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
    7d88:	a901      	add	r1, sp, #4
    7d8a:	4640      	mov	r0, r8
      this->m_textEventOut_OutputPort[port].init();
    7d8c:	f504 7808 	add.w	r8, r4, #544	; 0x220
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
    7d90:	f010 f906 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7d94:	4668      	mov	r0, sp
    7d96:	9500      	str	r5, [sp, #0]
    7d98:	f7f9 fa4c 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_eventOut_OutputPort[port].init();
    7d9c:	4648      	mov	r0, r9
    7d9e:	f00e fe6f 	bl	16a80 <Fw::OutputLogPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    7da2:	4668      	mov	r0, sp
    7da4:	f7f9 fa3c 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7da8:	4639      	mov	r1, r7
    7daa:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7dac:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7dae:	f7f9 fa9f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7db2:	4632      	mov	r2, r6
    7db4:	2300      	movs	r3, #0
    7db6:	4937      	ldr	r1, [pc, #220]	; (7e94 <Svc::BufferManagerComponentBase::init(long)+0x1ec>)
    7db8:	4668      	mov	r0, sp
    7dba:	f7f9 fa67 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_eventOut_OutputPort[port].setObjName(portName.toChar());
    7dbe:	a901      	add	r1, sp, #4
    7dc0:	4648      	mov	r0, r9
    7dc2:	f010 f8ed 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7dc6:	4668      	mov	r0, sp
    7dc8:	9500      	str	r5, [sp, #0]
    7dca:	f7f9 fa33 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_textEventOut_OutputPort[port].init();
    7dce:	4640      	mov	r0, r8
    7dd0:	f00f f87e 	bl	16ed0 <Fw::OutputLogTextPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    7dd4:	4668      	mov	r0, sp
    7dd6:	f7f9 fa23 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7dda:	4639      	mov	r1, r7
    7ddc:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7dde:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7de0:	f7f9 fa86 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7de4:	4632      	mov	r2, r6
    7de6:	2300      	movs	r3, #0
    7de8:	492b      	ldr	r1, [pc, #172]	; (7e98 <Svc::BufferManagerComponentBase::init(long)+0x1f0>)
    7dea:	4668      	mov	r0, sp
    7dec:	f7f9 fa4e 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_textEventOut_OutputPort[port].setObjName(portName.toChar());
    7df0:	a901      	add	r1, sp, #4
    7df2:	4640      	mov	r0, r8
      this->m_timeCaller_OutputPort[port].init();
    7df4:	f504 7823 	add.w	r8, r4, #652	; 0x28c
      this->m_textEventOut_OutputPort[port].setObjName(portName.toChar());
    7df8:	f010 f8d2 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7dfc:	4668      	mov	r0, sp
    7dfe:	9500      	str	r5, [sp, #0]
    7e00:	f7f9 fa18 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_timeCaller_OutputPort[port].init();
    7e04:	4640      	mov	r0, r8
      this->m_tlmOut_OutputPort[port].init();
    7e06:	f504 743e 	add.w	r4, r4, #760	; 0x2f8
      this->m_timeCaller_OutputPort[port].init();
    7e0a:	f00f ff43 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    7e0e:	4668      	mov	r0, sp
    7e10:	f7f9 fa06 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7e14:	4639      	mov	r1, r7
    7e16:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7e18:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7e1a:	f7f9 fa69 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7e1e:	4632      	mov	r2, r6
    7e20:	2300      	movs	r3, #0
    7e22:	491e      	ldr	r1, [pc, #120]	; (7e9c <Svc::BufferManagerComponentBase::init(long)+0x1f4>)
    7e24:	4668      	mov	r0, sp
    7e26:	f7f9 fa31 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
    7e2a:	a901      	add	r1, sp, #4
    7e2c:	4640      	mov	r0, r8
    7e2e:	f010 f8b7 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7e32:	4668      	mov	r0, sp
    7e34:	9500      	str	r5, [sp, #0]
    7e36:	f7f9 f9fd 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_tlmOut_OutputPort[port].init();
    7e3a:	4620      	mov	r0, r4
    7e3c:	f00f fb52 	bl	174e4 <Fw::OutputTlmPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    7e40:	4668      	mov	r0, sp
    7e42:	f7f9 f9ed 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    7e46:	4639      	mov	r1, r7
    7e48:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    7e4a:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    7e4c:	f7f9 fa50 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    7e50:	4632      	mov	r2, r6
    7e52:	2300      	movs	r3, #0
    7e54:	4912      	ldr	r1, [pc, #72]	; (7ea0 <Svc::BufferManagerComponentBase::init(long)+0x1f8>)
    7e56:	4668      	mov	r0, sp
    7e58:	f7f9 fa18 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_tlmOut_OutputPort[port].setObjName(portName.toChar());
    7e5c:	a901      	add	r1, sp, #4
    7e5e:	4620      	mov	r0, r4
    7e60:	f010 f89e 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    7e64:	4668      	mov	r0, sp
    7e66:	9500      	str	r5, [sp, #0]
    7e68:	f7f9 f9e4 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    7e6c:	b017      	add	sp, #92	; 0x5c
    7e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7e72:	bf00      	nop
    7e74:	20001d2c 	.word	0x20001d2c
    7e78:	20002b80 	.word	0x20002b80
    7e7c:	000080a1 	.word	0x000080a1
    7e80:	20001888 	.word	0x20001888
    7e84:	00008141 	.word	0x00008141
    7e88:	200018ac 	.word	0x200018ac
    7e8c:	00007c6d 	.word	0x00007c6d
    7e90:	20002028 	.word	0x20002028
    7e94:	200018cc 	.word	0x200018cc
    7e98:	200018e8 	.word	0x200018e8
    7e9c:	200005c8 	.word	0x200005c8
    7ea0:	200005e8 	.word	0x200005e8

00007ea4 <Svc::BufferManagerComponentBase::get_bufferGetCallee_InputPort(long)>:
  {
    7ea4:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    7ea6:	1e0c      	subs	r4, r1, #0
  {
    7ea8:	4605      	mov	r5, r0
    FW_ASSERT(
    7eaa:	dd03      	ble.n	7eb4 <Svc::BufferManagerComponentBase::get_bufferGetCallee_InputPort(long)+0x10>
    7eac:	22b8      	movs	r2, #184	; 0xb8
    7eae:	4804      	ldr	r0, [pc, #16]	; (7ec0 <Svc::BufferManagerComponentBase::get_bufferGetCallee_InputPort(long)+0x1c>)
    7eb0:	f7f9 fbba 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_bufferGetCallee_InputPort[portNum];
    7eb4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    7eb8:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    7ebc:	3064      	adds	r0, #100	; 0x64
    7ebe:	bd38      	pop	{r3, r4, r5, pc}
    7ec0:	200017a8 	.word	0x200017a8

00007ec4 <Svc::BufferManagerComponentBase::get_bufferSendIn_InputPort(long)>:
  {
    7ec4:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    7ec6:	1e0c      	subs	r4, r1, #0
  {
    7ec8:	4605      	mov	r5, r0
    FW_ASSERT(
    7eca:	dd03      	ble.n	7ed4 <Svc::BufferManagerComponentBase::get_bufferSendIn_InputPort(long)+0x10>
    7ecc:	22c3      	movs	r2, #195	; 0xc3
    7ece:	4804      	ldr	r0, [pc, #16]	; (7ee0 <Svc::BufferManagerComponentBase::get_bufferSendIn_InputPort(long)+0x1c>)
    7ed0:	f7f9 fbaa 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_bufferSendIn_InputPort[portNum];
    7ed4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    7ed8:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    7edc:	30d4      	adds	r0, #212	; 0xd4
    7ede:	bd38      	pop	{r3, r4, r5, pc}
    7ee0:	200017a8 	.word	0x200017a8

00007ee4 <Svc::BufferManagerComponentBase::set_eventOut_OutputPort(long, Fw::InputLogPort*)>:
  {
    7ee4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    7ee6:	1e0d      	subs	r5, r1, #0
  {
    7ee8:	4604      	mov	r4, r0
    7eea:	4616      	mov	r6, r2
    FW_ASSERT(
    7eec:	dd03      	ble.n	7ef6 <Svc::BufferManagerComponentBase::set_eventOut_OutputPort(long, Fw::InputLogPort*)+0x12>
    7eee:	22e0      	movs	r2, #224	; 0xe0
    7ef0:	4806      	ldr	r0, [pc, #24]	; (7f0c <Svc::BufferManagerComponentBase::set_eventOut_OutputPort(long, Fw::InputLogPort*)+0x28>)
    7ef2:	f7f9 fb99 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_eventOut_OutputPort[portNum].addCallPort(port);
    7ef6:	236c      	movs	r3, #108	; 0x6c
    7ef8:	4631      	mov	r1, r6
    7efa:	fb03 4005 	mla	r0, r3, r5, r4
  }
    7efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_eventOut_OutputPort[portNum].addCallPort(port);
    7f02:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
    7f06:	f00e bcdd 	b.w	168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>
    7f0a:	bf00      	nop
    7f0c:	200017a8 	.word	0x200017a8

00007f10 <Svc::BufferManagerComponentBase::set_textEventOut_OutputPort(long, Fw::InputLogTextPort*)>:
  {
    7f10:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    7f12:	1e0d      	subs	r5, r1, #0
  {
    7f14:	4604      	mov	r4, r0
    7f16:	4616      	mov	r6, r2
    FW_ASSERT(
    7f18:	dd03      	ble.n	7f22 <Svc::BufferManagerComponentBase::set_textEventOut_OutputPort(long, Fw::InputLogTextPort*)+0x12>
    7f1a:	22f0      	movs	r2, #240	; 0xf0
    7f1c:	4806      	ldr	r0, [pc, #24]	; (7f38 <Svc::BufferManagerComponentBase::set_textEventOut_OutputPort(long, Fw::InputLogTextPort*)+0x28>)
    7f1e:	f7f9 fb83 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_textEventOut_OutputPort[portNum].addCallPort(port);
    7f22:	236c      	movs	r3, #108	; 0x6c
    7f24:	4631      	mov	r1, r6
    7f26:	fb03 4005 	mla	r0, r3, r5, r4
  }
    7f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_textEventOut_OutputPort[portNum].addCallPort(port);
    7f2e:	f500 7008 	add.w	r0, r0, #544	; 0x220
    7f32:	f00e bedf 	b.w	16cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>
    7f36:	bf00      	nop
    7f38:	200017a8 	.word	0x200017a8

00007f3c <Svc::BufferManagerComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)>:
  {
    7f3c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    7f3e:	1e0d      	subs	r5, r1, #0
  {
    7f40:	4604      	mov	r4, r0
    7f42:	4616      	mov	r6, r2
    FW_ASSERT(
    7f44:	dd04      	ble.n	7f50 <Svc::BufferManagerComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)+0x14>
    7f46:	f44f 7280 	mov.w	r2, #256	; 0x100
    7f4a:	4806      	ldr	r0, [pc, #24]	; (7f64 <Svc::BufferManagerComponentBase::set_timeCaller_OutputPort(long, Fw::InputTimePort*)+0x28>)
    7f4c:	f7f9 fb6c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
    7f50:	236c      	movs	r3, #108	; 0x6c
    7f52:	4631      	mov	r1, r6
    7f54:	fb03 4005 	mla	r0, r3, r5, r4
  }
    7f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
    7f5c:	f500 7023 	add.w	r0, r0, #652	; 0x28c
    7f60:	f00f be1c 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    7f64:	200017a8 	.word	0x200017a8

00007f68 <Svc::BufferManagerComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)>:
  {
    7f68:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    7f6a:	1e0d      	subs	r5, r1, #0
  {
    7f6c:	4604      	mov	r4, r0
    7f6e:	4616      	mov	r6, r2
    FW_ASSERT(
    7f70:	dd04      	ble.n	7f7c <Svc::BufferManagerComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)+0x14>
    7f72:	f44f 7287 	mov.w	r2, #270	; 0x10e
    7f76:	4806      	ldr	r0, [pc, #24]	; (7f90 <Svc::BufferManagerComponentBase::set_tlmOut_OutputPort(long, Fw::InputTlmPort*)+0x28>)
    7f78:	f7f9 fb56 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
    7f7c:	236c      	movs	r3, #108	; 0x6c
    7f7e:	4631      	mov	r1, r6
    7f80:	fb03 4005 	mla	r0, r3, r5, r4
  }
    7f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
    7f88:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    7f8c:	f00f b9f4 	b.w	17378 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)>
    7f90:	200017a8 	.word	0x200017a8

00007f94 <Svc::BufferManagerComponentBase::BufferManagerComponentBase(char const*)>:
  BufferManagerComponentBase ::
    7f94:	b510      	push	{r4, lr}
    7f96:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    7f98:	f009 ff94 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    7f9c:	4b19      	ldr	r3, [pc, #100]	; (8004 <Svc::BufferManagerComponentBase::BufferManagerComponentBase(char const*)+0x70>)
    7f9e:	4620      	mov	r0, r4
    7fa0:	f840 3b64 	str.w	r3, [r0], #100
    7fa4:	f00d fada 	bl	1555c <Fw::InputBufferGetPort::InputBufferGetPort()>
    7fa8:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    7fac:	f00d fbe6 	bl	1577c <Fw::InputBufferSendPort::InputBufferSendPort()>
    7fb0:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    7fb4:	f008 ffda 	bl	10f6c <Svc::InputSchedPort::InputSchedPort()>
    7fb8:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    7fbc:	f00e fc76 	bl	168ac <Fw::OutputLogPort::OutputLogPort()>
    7fc0:	f504 7008 	add.w	r0, r4, #544	; 0x220
    7fc4:	f00e fe8a 	bl	16cdc <Fw::OutputLogTextPort::OutputLogTextPort()>
    7fc8:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    7fcc:	f00f fdda 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
    7fd0:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    7fd4:	f00f f9c4 	bl	17360 <Fw::OutputTlmPort::OutputTlmPort()>
    7fd8:	f504 7062 	add.w	r0, r4, #904	; 0x388
    7fdc:	f00b fc30 	bl	13840 <Os::Mutex::Mutex()>
    this->m_last_TotalBuffs = 0;
    7fe0:	2300      	movs	r3, #0
    this->m_first_update_TotalBuffs = true;
    7fe2:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
    this->m_first_update_EmptyBuffs = true;
    7fe6:	2201      	movs	r2, #1
  }
    7fe8:	4620      	mov	r0, r4
    this->m_last_EmptyBuffs = 0;
    7fea:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
    this->m_first_update_TotalBuffs = true;
    7fee:	f8c4 136c 	str.w	r1, [r4, #876]	; 0x36c
    this->m_first_update_EmptyBuffs = true;
    7ff2:	f884 2370 	strb.w	r2, [r4, #880]	; 0x370
    this->m_last_CurrBuffs = 0;
    7ff6:	e9c4 33dd 	strd	r3, r3, [r4, #884]	; 0x374
    this->m_last_NoBuffs = 0;
    7ffa:	e9c4 33df 	strd	r3, r3, [r4, #892]	; 0x37c
    this->m_NullEmptyBufferThrottle = 0;
    7ffe:	e9c4 33d9 	strd	r3, r3, [r4, #868]	; 0x364
  }
    8002:	bd10      	pop	{r4, pc}
    8004:	20003d48 	.word	0x20003d48

00008008 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)>:
  {
    8008:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
    800a:	1e16      	subs	r6, r2, #0
  {
    800c:	b08b      	sub	sp, #44	; 0x2c
    800e:	4605      	mov	r5, r0
    8010:	460c      	mov	r4, r1
    8012:	461f      	mov	r7, r3
    FW_ASSERT(
    8014:	dd05      	ble.n	8022 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x1a>
    8016:	f240 12f7 	movw	r2, #503	; 0x1f7
    801a:	4631      	mov	r1, r6
    801c:	481b      	ldr	r0, [pc, #108]	; (808c <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x84>)
    801e:	f7f9 fb03 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    Fw::Buffer retVal;
    8022:	4628      	mov	r0, r5
    8024:	f00d f9ea 	bl	153fc <Fw::Buffer::Buffer()>
    this->lock();
    8028:	6823      	ldr	r3, [r4, #0]
    802a:	4a19      	ldr	r2, [pc, #100]	; (8090 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x88>)
    802c:	69db      	ldr	r3, [r3, #28]
    802e:	4293      	cmp	r3, r2
    8030:	d124      	bne.n	807c <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x74>
    this->m_guardedPortMutex.lock();
    8032:	f504 7062 	add.w	r0, r4, #904	; 0x388
    8036:	f00b fc1f 	bl	13878 <Os::Mutex::lock()>
    retVal = this->bufferGetCallee_handler(
    803a:	6821      	ldr	r1, [r4, #0]
    803c:	4632      	mov	r2, r6
    803e:	463b      	mov	r3, r7
    8040:	a801      	add	r0, sp, #4
    8042:	690e      	ldr	r6, [r1, #16]
    8044:	4621      	mov	r1, r4
    8046:	47b0      	blx	r6
    );
    8048:	a901      	add	r1, sp, #4
    804a:	4628      	mov	r0, r5
    804c:	f00d fa22 	bl	15494 <Fw::Buffer::operator=(Fw::Buffer const&)>
    8050:	4a10      	ldr	r2, [pc, #64]	; (8094 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x8c>)
    8052:	4b11      	ldr	r3, [pc, #68]	; (8098 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x90>)
    8054:	a802      	add	r0, sp, #8
    8056:	e9cd 2301 	strd	r2, r3, [sp, #4]
    805a:	f7f8 fa79 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    805e:	a801      	add	r0, sp, #4
    8060:	f7f8 fa6c 	bl	53c <Fw::Serializable::~Serializable()>
    this->unLock();
    8064:	6823      	ldr	r3, [r4, #0]
    8066:	4a0d      	ldr	r2, [pc, #52]	; (809c <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x94>)
    8068:	6a1b      	ldr	r3, [r3, #32]
    806a:	4293      	cmp	r3, r2
    806c:	d109      	bne.n	8082 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x7a>
    this->m_guardedPortMutex.unLock();
    806e:	f504 7062 	add.w	r0, r4, #904	; 0x388
    8072:	f00b fc55 	bl	13920 <Os::Mutex::unLock()>
  }
    8076:	4628      	mov	r0, r5
    8078:	b00b      	add	sp, #44	; 0x2c
    807a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    this->lock();
    807c:	4620      	mov	r0, r4
    807e:	4798      	blx	r3
    8080:	e7db      	b.n	803a <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)+0x32>
    this->unLock();
    8082:	4620      	mov	r0, r4
    8084:	4798      	blx	r3
  }
    8086:	4628      	mov	r0, r5
    8088:	b00b      	add	sp, #44	; 0x2c
    808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    808c:	200017a8 	.word	0x200017a8
    8090:	00007c5d 	.word	0x00007c5d
    8094:	200032c0 	.word	0x200032c0
    8098:	20003214 	.word	0x20003214
    809c:	00007c65 	.word	0x00007c65

000080a0 <Svc::BufferManagerComponentBase::m_p_bufferGetCallee_in(Fw::PassiveComponentBase*, long, unsigned long)>:
  {
    80a0:	b530      	push	{r4, r5, lr}
    80a2:	4604      	mov	r4, r0
    80a4:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    80a6:	460d      	mov	r5, r1
    80a8:	b131      	cbz	r1, 80b8 <Svc::BufferManagerComponentBase::m_p_bufferGetCallee_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    );
    80aa:	4620      	mov	r0, r4
    80ac:	4629      	mov	r1, r5
    80ae:	f7ff ffab 	bl	8008 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)>
  }
    80b2:	4620      	mov	r0, r4
    80b4:	b003      	add	sp, #12
    80b6:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(callComp);
    80b8:	f240 4115 	movw	r1, #1045	; 0x415
    80bc:	4806      	ldr	r0, [pc, #24]	; (80d8 <Svc::BufferManagerComponentBase::m_p_bufferGetCallee_in(Fw::PassiveComponentBase*, long, unsigned long)+0x38>)
    80be:	e9cd 2300 	strd	r2, r3, [sp]
    80c2:	f7f9 faa3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    );
    80c6:	4620      	mov	r0, r4
    80c8:	4629      	mov	r1, r5
    FW_ASSERT(callComp);
    80ca:	e9dd 2300 	ldrd	r2, r3, [sp]
    );
    80ce:	f7ff ff9b 	bl	8008 <Svc::BufferManagerComponentBase::bufferGetCallee_handlerBase(long, unsigned long)>
  }
    80d2:	4620      	mov	r0, r4
    80d4:	b003      	add	sp, #12
    80d6:	bd30      	pop	{r4, r5, pc}
    80d8:	200017a8 	.word	0x200017a8

000080dc <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)>:
  {
    80dc:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    80de:	1e0d      	subs	r5, r1, #0
  {
    80e0:	4604      	mov	r4, r0
    80e2:	4616      	mov	r6, r2
    FW_ASSERT(
    80e4:	dd04      	ble.n	80f0 <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x14>
    80e6:	f44f 7205 	mov.w	r2, #532	; 0x214
    80ea:	4812      	ldr	r0, [pc, #72]	; (8134 <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x58>)
    80ec:	f7f9 fa9c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->lock();
    80f0:	6823      	ldr	r3, [r4, #0]
    80f2:	4a11      	ldr	r2, [pc, #68]	; (8138 <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x5c>)
    80f4:	69db      	ldr	r3, [r3, #28]
    80f6:	4293      	cmp	r3, r2
    80f8:	d114      	bne.n	8124 <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x48>
    this->m_guardedPortMutex.lock();
    80fa:	f504 7062 	add.w	r0, r4, #904	; 0x388
    80fe:	f00b fbbb 	bl	13878 <Os::Mutex::lock()>
    this->bufferSendIn_handler(
    8102:	6823      	ldr	r3, [r4, #0]
    8104:	4632      	mov	r2, r6
    8106:	4629      	mov	r1, r5
    8108:	4620      	mov	r0, r4
    810a:	695b      	ldr	r3, [r3, #20]
    810c:	4798      	blx	r3
    this->unLock();
    810e:	6823      	ldr	r3, [r4, #0]
    8110:	4a0a      	ldr	r2, [pc, #40]	; (813c <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x60>)
    8112:	6a1b      	ldr	r3, [r3, #32]
    8114:	4293      	cmp	r3, r2
    8116:	d108      	bne.n	812a <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x4e>
    this->m_guardedPortMutex.unLock();
    8118:	f504 7062 	add.w	r0, r4, #904	; 0x388
  }
    811c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    8120:	f00b bbfe 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
    8124:	4620      	mov	r0, r4
    8126:	4798      	blx	r3
    8128:	e7eb      	b.n	8102 <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)+0x26>
    this->unLock();
    812a:	4620      	mov	r0, r4
  }
    812c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    8130:	4718      	bx	r3
    8132:	bf00      	nop
    8134:	200017a8 	.word	0x200017a8
    8138:	00007c5d 	.word	0x00007c5d
    813c:	00007c65 	.word	0x00007c65

00008140 <Svc::BufferManagerComponentBase::m_p_bufferSendIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)>:
  {
    8140:	b530      	push	{r4, r5, lr}
    8142:	460d      	mov	r5, r1
    8144:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    8146:	4604      	mov	r4, r0
    8148:	b130      	cbz	r0, 8158 <Svc::BufferManagerComponentBase::m_p_bufferSendIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)+0x18>
    compPtr->bufferSendIn_handlerBase(
    814a:	4629      	mov	r1, r5
    814c:	4620      	mov	r0, r4
  }
    814e:	b003      	add	sp, #12
    8150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->bufferSendIn_handlerBase(
    8154:	f7ff bfc2 	b.w	80dc <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)>
    FW_ASSERT(callComp);
    8158:	f240 4124 	movw	r1, #1060	; 0x424
    815c:	4805      	ldr	r0, [pc, #20]	; (8174 <Svc::BufferManagerComponentBase::m_p_bufferSendIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)+0x34>)
    815e:	9201      	str	r2, [sp, #4]
    8160:	f7f9 fa54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    8164:	9a01      	ldr	r2, [sp, #4]
    compPtr->bufferSendIn_handlerBase(
    8166:	4629      	mov	r1, r5
    8168:	4620      	mov	r0, r4
  }
    816a:	b003      	add	sp, #12
    816c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->bufferSendIn_handlerBase(
    8170:	f7ff bfb4 	b.w	80dc <Svc::BufferManagerComponentBase::bufferSendIn_handlerBase(long, Fw::Buffer&)>
    8174:	200017a8 	.word	0x200017a8

00008178 <Svc::BufferManagerComponentBase::~BufferManagerComponentBase()>:
  BufferManagerComponentBase ::
    8178:	b510      	push	{r4, lr}
    ~BufferManagerComponentBase()
    817a:	4b1a      	ldr	r3, [pc, #104]	; (81e4 <Svc::BufferManagerComponentBase::~BufferManagerComponentBase()+0x6c>)
  BufferManagerComponentBase ::
    817c:	4604      	mov	r4, r0
    ~BufferManagerComponentBase()
    817e:	f500 7062 	add.w	r0, r0, #904	; 0x388
    8182:	6023      	str	r3, [r4, #0]
    8184:	f00b f912 	bl	133ac <Os::Mutex::~Mutex()>
    8188:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    818c:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    8190:	685b      	ldr	r3, [r3, #4]
    8192:	4798      	blx	r3
    8194:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
    8198:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    819c:	685b      	ldr	r3, [r3, #4]
    819e:	4798      	blx	r3
    81a0:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    81a4:	f504 7008 	add.w	r0, r4, #544	; 0x220
    81a8:	685b      	ldr	r3, [r3, #4]
    81aa:	4798      	blx	r3
    81ac:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    81b0:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    81b4:	685b      	ldr	r3, [r3, #4]
    81b6:	4798      	blx	r3
    81b8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    81bc:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    81c0:	685b      	ldr	r3, [r3, #4]
    81c2:	4798      	blx	r3
    81c4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    81c8:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    81cc:	685b      	ldr	r3, [r3, #4]
    81ce:	4798      	blx	r3
    81d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    81d2:	f104 0064 	add.w	r0, r4, #100	; 0x64
    81d6:	685b      	ldr	r3, [r3, #4]
    81d8:	4798      	blx	r3
    81da:	4620      	mov	r0, r4
    81dc:	f009 fe1a 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    81e0:	4620      	mov	r0, r4
    81e2:	bd10      	pop	{r4, pc}
    81e4:	20003d48 	.word	0x20003d48

000081e8 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)>:
    if (this->m_NoBuffsAvailableThrottle >= EVENTID_NOBUFFSAVAILABLE_THROTTLE) {
    81e8:	f8d0 3364 	ldr.w	r3, [r0, #868]	; 0x364
    81ec:	2b09      	cmp	r3, #9
    81ee:	dd00      	ble.n	81f2 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0xa>
    81f0:	4770      	bx	lr
  {
    81f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81f6:	4604      	mov	r4, r0
    81f8:	b0aa      	sub	sp, #168	; 0xa8
      this->m_NoBuffsAvailableThrottle++;
    81fa:	3301      	adds	r3, #1
    81fc:	460d      	mov	r5, r1
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    81fe:	f504 7623 	add.w	r6, r4, #652	; 0x28c
      this->m_NoBuffsAvailableThrottle++;
    8202:	f8c0 3364 	str.w	r3, [r0, #868]	; 0x364
    Fw::Time _logTime;
    8206:	a804      	add	r0, sp, #16
    8208:	f00f fb52 	bl	178b0 <Fw::Time::Time()>
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    820c:	4630      	mov	r0, r6
    820e:	f00f fe1d 	bl	17e4c <Fw::PortBase::isConnected() const>
    8212:	b9b0      	cbnz	r0, 8242 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x5a>
    if (this->m_eventOut_OutputPort[0].isConnected()) {
    8214:	f504 76da 	add.w	r6, r4, #436	; 0x1b4
    _id = this->getIdBase() + EVENTID_NOBUFFSAVAILABLE;
    8218:	4620      	mov	r0, r4
    821a:	f009 fe6b 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    821e:	4607      	mov	r7, r0
    if (this->m_eventOut_OutputPort[0].isConnected()) {
    8220:	4630      	mov	r0, r6
    8222:	f00f fe13 	bl	17e4c <Fw::PortBase::isConnected() const>
    8226:	2800      	cmp	r0, #0
    8228:	d147      	bne.n	82ba <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0xd2>
    if (this->m_textEventOut_OutputPort[0].isConnected()) {
    822a:	f504 7608 	add.w	r6, r4, #544	; 0x220
    822e:	4630      	mov	r0, r6
    8230:	f00f fe0c 	bl	17e4c <Fw::PortBase::isConnected() const>
    8234:	b950      	cbnz	r0, 824c <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x64>
  }
    8236:	a804      	add	r0, sp, #16
    8238:	f00f fae2 	bl	17800 <Fw::Time::~Time()>
    823c:	b02a      	add	sp, #168	; 0xa8
    823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    8242:	a904      	add	r1, sp, #16
    8244:	4630      	mov	r0, r6
    8246:	f00f fcb9 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    824a:	e7e3      	b.n	8214 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x2c>
    TextLogString() : StringBase() { *this = ""; }
    824c:	f10d 0820 	add.w	r8, sp, #32
    8250:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8324 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x13c>
      {
    8254:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8328 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x140>
    8258:	4640      	mov	r0, r8
    825a:	f7f8 ffe1 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    825e:	492d      	ldr	r1, [pc, #180]	; (8314 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x12c>)
    8260:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    8262:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    8266:	f7f9 f843 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    826a:	f104 0208 	add.w	r2, r4, #8
    826e:	4b2a      	ldr	r3, [pc, #168]	; (8318 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x130>)
    8270:	4640      	mov	r0, r8
    8272:	492a      	ldr	r1, [pc, #168]	; (831c <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x134>)
    8274:	9500      	str	r5, [sp, #0]
    8276:	f7f9 f809 	bl	128c <Fw::StringBase::format(char const*, ...)>
    827a:	a802      	add	r0, sp, #8
    827c:	f7f8 f958 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    8280:	2302      	movs	r3, #2
      this->m_textEventOut_OutputPort[0].invoke(
    8282:	4639      	mov	r1, r7
    8284:	aa04      	add	r2, sp, #16
    8286:	4630      	mov	r0, r6
    8288:	f88d 300c 	strb.w	r3, [sp, #12]
    828c:	f8cd 8000 	str.w	r8, [sp]
    8290:	ab02      	add	r3, sp, #8
      {
    8292:	f8cd a008 	str.w	sl, [sp, #8]
    8296:	f00e fd3d 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    829a:	a802      	add	r0, sp, #8
    829c:	f8cd a008 	str.w	sl, [sp, #8]
    82a0:	f7f8 f94c 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    82a4:	4640      	mov	r0, r8
    82a6:	f8cd 9020 	str.w	r9, [sp, #32]
    82aa:	f7f8 ffc3 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    82ae:	a804      	add	r0, sp, #16
    82b0:	f00f faa6 	bl	17800 <Fw::Time::~Time()>
    82b4:	b02a      	add	sp, #168	; 0xa8
    82b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    82ba:	f10d 0820 	add.w	r8, sp, #32
    82be:	4640      	mov	r0, r8
    82c0:	f00e f98a 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(size);
    82c4:	4629      	mov	r1, r5
    82c6:	4640      	mov	r0, r8
    82c8:	f7f8 f9c8 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    82cc:	b9d0      	cbnz	r0, 8304 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x11c>
      {
    82ce:	a802      	add	r0, sp, #8
    82d0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8328 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x140>
    82d4:	f7f8 f92c 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    82d8:	2302      	movs	r3, #2
      this->m_eventOut_OutputPort[0].invoke(
    82da:	4630      	mov	r0, r6
    82dc:	aa04      	add	r2, sp, #16
    82de:	4639      	mov	r1, r7
    82e0:	f88d 300c 	strb.w	r3, [sp, #12]
    82e4:	f8cd 8000 	str.w	r8, [sp]
    82e8:	ab02      	add	r3, sp, #8
      {
    82ea:	f8cd 9008 	str.w	r9, [sp, #8]
    82ee:	f00e faf9 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    82f2:	a802      	add	r0, sp, #8
    82f4:	f8cd 9008 	str.w	r9, [sp, #8]
    82f8:	f7f8 f920 	bl	53c <Fw::Serializable::~Serializable()>
    }
    82fc:	4640      	mov	r0, r8
    82fe:	f00e f953 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    8302:	e792      	b.n	822a <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x42>
      FW_ASSERT(
    8304:	4601      	mov	r1, r0
    8306:	f240 226b 	movw	r2, #619	; 0x26b
    830a:	4805      	ldr	r0, [pc, #20]	; (8320 <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0x138>)
    830c:	f7f9 f98c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    8310:	e7dd      	b.n	82ce <Svc::BufferManagerComponentBase::log_WARNING_HI_NoBuffsAvailable(unsigned long)+0xe6>
    8312:	bf00      	nop
    8314:	20001d2c 	.word	0x20001d2c
    8318:	20001848 	.word	0x20001848
    831c:	2000185c 	.word	0x2000185c
    8320:	200017a8 	.word	0x200017a8
    8324:	20002f60 	.word	0x20002f60
    8328:	20002c08 	.word	0x20002c08

0000832c <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()>:
    if (this->m_NullEmptyBufferThrottle >= EVENTID_NULLEMPTYBUFFER_THROTTLE) {
    832c:	f8d0 3368 	ldr.w	r3, [r0, #872]	; 0x368
    8330:	2b09      	cmp	r3, #9
    8332:	dd00      	ble.n	8336 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0xa>
    8334:	4770      	bx	lr
  {
    8336:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      this->m_NullEmptyBufferThrottle++;
    833a:	3301      	adds	r3, #1
  {
    833c:	b0ab      	sub	sp, #172	; 0xac
    833e:	4604      	mov	r4, r0
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    8340:	f500 7523 	add.w	r5, r0, #652	; 0x28c
    Fw::Time _logTime;
    8344:	a804      	add	r0, sp, #16
      this->m_NullEmptyBufferThrottle++;
    8346:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    Fw::Time _logTime;
    834a:	f00f fab1 	bl	178b0 <Fw::Time::Time()>
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
    834e:	4628      	mov	r0, r5
    8350:	f00f fd7c 	bl	17e4c <Fw::PortBase::isConnected() const>
    8354:	b9b8      	cbnz	r0, 8386 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x5a>
    _id = this->getIdBase() + EVENTID_NULLEMPTYBUFFER;
    8356:	4620      	mov	r0, r4
    if (this->m_eventOut_OutputPort[0].isConnected()) {
    8358:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
    _id = this->getIdBase() + EVENTID_NULLEMPTYBUFFER;
    835c:	f009 fdca 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    8360:	4606      	mov	r6, r0
    if (this->m_eventOut_OutputPort[0].isConnected()) {
    8362:	4628      	mov	r0, r5
    _id = this->getIdBase() + EVENTID_NULLEMPTYBUFFER;
    8364:	3601      	adds	r6, #1
    if (this->m_eventOut_OutputPort[0].isConnected()) {
    8366:	f00f fd71 	bl	17e4c <Fw::PortBase::isConnected() const>
    836a:	2800      	cmp	r0, #0
    836c:	d144      	bne.n	83f8 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0xcc>
    if (this->m_textEventOut_OutputPort[0].isConnected()) {
    836e:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8372:	4628      	mov	r0, r5
    8374:	f00f fd6a 	bl	17e4c <Fw::PortBase::isConnected() const>
    8378:	b950      	cbnz	r0, 8390 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x64>
  }
    837a:	a804      	add	r0, sp, #16
    837c:	f00f fa40 	bl	17800 <Fw::Time::~Time()>
    8380:	b02b      	add	sp, #172	; 0xac
    8382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    8386:	a904      	add	r1, sp, #16
    8388:	4628      	mov	r0, r5
    838a:	f00f fc17 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    838e:	e7e2      	b.n	8356 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x2a>
    TextLogString() : StringBase() { *this = ""; }
    8390:	af08      	add	r7, sp, #32
    8392:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8440 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x114>
      {
    8396:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8444 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x118>
    839a:	4638      	mov	r0, r7
    839c:	f7f8 ff40 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    83a0:	4924      	ldr	r1, [pc, #144]	; (8434 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x108>)
    83a2:	4638      	mov	r0, r7
    TextLogString() : StringBase() { *this = ""; }
    83a4:	f8cd 8020 	str.w	r8, [sp, #32]
        (void)StringBase::operator=(src);
    83a8:	f7f8 ffa2 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    83ac:	f104 0208 	add.w	r2, r4, #8
    83b0:	4b21      	ldr	r3, [pc, #132]	; (8438 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x10c>)
    83b2:	4638      	mov	r0, r7
    83b4:	4921      	ldr	r1, [pc, #132]	; (843c <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x110>)
    83b6:	f7f8 ff69 	bl	128c <Fw::StringBase::format(char const*, ...)>
    83ba:	a802      	add	r0, sp, #8
    83bc:	f7f8 f8b8 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    83c0:	2302      	movs	r3, #2
      this->m_textEventOut_OutputPort[0].invoke(
    83c2:	4631      	mov	r1, r6
    83c4:	aa04      	add	r2, sp, #16
    83c6:	4628      	mov	r0, r5
    83c8:	f88d 300c 	strb.w	r3, [sp, #12]
    83cc:	9700      	str	r7, [sp, #0]
    83ce:	ab02      	add	r3, sp, #8
      {
    83d0:	f8cd 9008 	str.w	r9, [sp, #8]
    83d4:	f00e fc9e 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    83d8:	a802      	add	r0, sp, #8
    83da:	f8cd 9008 	str.w	r9, [sp, #8]
    83de:	f7f8 f8ad 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    83e2:	4638      	mov	r0, r7
    83e4:	f8cd 8020 	str.w	r8, [sp, #32]
    83e8:	f7f8 ff24 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    83ec:	a804      	add	r0, sp, #16
    83ee:	f00f fa07 	bl	17800 <Fw::Time::~Time()>
    83f2:	b02b      	add	sp, #172	; 0xac
    83f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Fw::LogBuffer _logBuff;
    83f8:	af08      	add	r7, sp, #32
      {
    83fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8444 <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x118>
    83fe:	4638      	mov	r0, r7
    8400:	f00e f8ea 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
    8404:	a802      	add	r0, sp, #8
    8406:	f7f8 f893 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    840a:	2302      	movs	r3, #2
      this->m_eventOut_OutputPort[0].invoke(
    840c:	4628      	mov	r0, r5
    840e:	aa04      	add	r2, sp, #16
    8410:	4631      	mov	r1, r6
    8412:	f88d 300c 	strb.w	r3, [sp, #12]
    8416:	9700      	str	r7, [sp, #0]
    8418:	ab02      	add	r3, sp, #8
      {
    841a:	f8cd 8008 	str.w	r8, [sp, #8]
    841e:	f00e fa61 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    8422:	a802      	add	r0, sp, #8
    8424:	f8cd 8008 	str.w	r8, [sp, #8]
    8428:	f7f8 f888 	bl	53c <Fw::Serializable::~Serializable()>
    }
    842c:	4638      	mov	r0, r7
    842e:	f00e f8bb 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    8432:	e79c      	b.n	836e <Svc::BufferManagerComponentBase::log_WARNING_HI_NullEmptyBuffer()+0x42>
    8434:	20001d2c 	.word	0x20001d2c
    8438:	20001800 	.word	0x20001800
    843c:	20001814 	.word	0x20001814
    8440:	20002f60 	.word	0x20002f60
    8444:	20002c08 	.word	0x20002c08

00008448 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)>:
    if (not this->m_first_update_TotalBuffs) {
    8448:	f890 336c 	ldrb.w	r3, [r0, #876]	; 0x36c
  {
    844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8450:	4604      	mov	r4, r0
    8452:	b088      	sub	sp, #32
    8454:	460d      	mov	r5, r1
    8456:	4617      	mov	r7, r2
    if (not this->m_first_update_TotalBuffs) {
    8458:	b973      	cbnz	r3, 8478 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_TotalBuffs) {
    845a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
    845e:	428b      	cmp	r3, r1
    8460:	d007      	beq.n	8472 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x2a>
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8462:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
        this->m_last_TotalBuffs = arg;
    8466:	f8c4 5374 	str.w	r5, [r4, #884]	; 0x374
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    846a:	4630      	mov	r0, r6
    846c:	f00f fcee 	bl	17e4c <Fw::PortBase::isConnected() const>
    8470:	b970      	cbnz	r0, 8490 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x48>
  }
    8472:	b008      	add	sp, #32
    8474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_TotalBuffs = false;
    8478:	2300      	movs	r3, #0
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    847a:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
      this->m_first_update_TotalBuffs = false;
    847e:	f880 336c 	strb.w	r3, [r0, #876]	; 0x36c
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8482:	4630      	mov	r0, r6
        this->m_last_TotalBuffs = arg;
    8484:	f8c4 5374 	str.w	r5, [r4, #884]	; 0x374
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8488:	f00f fce0 	bl	17e4c <Fw::PortBase::isConnected() const>
    848c:	2800      	cmp	r0, #0
    848e:	d0f0      	beq.n	8472 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x2a>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    8490:	f504 7823 	add.w	r8, r4, #652	; 0x28c
    8494:	4640      	mov	r0, r8
    8496:	f00f fcd9 	bl	17e4c <Fw::PortBase::isConnected() const>
    849a:	b9e8      	cbnz	r0, 84d8 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x90>
      Fw::TlmBuffer _tlmBuff;
    849c:	4668      	mov	r0, sp
    849e:	f00e fd35 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    84a2:	4629      	mov	r1, r5
    84a4:	4668      	mov	r0, sp
    84a6:	f7f8 f8d9 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    84aa:	b970      	cbnz	r0, 84ca <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x82>
      _id = this->getIdBase() + CHANNELID_TOTALBUFFS;
    84ac:	4620      	mov	r0, r4
    84ae:	f009 fd21 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_tlmOut_OutputPort[0].invoke(
    84b2:	466b      	mov	r3, sp
      _id = this->getIdBase() + CHANNELID_TOTALBUFFS;
    84b4:	4601      	mov	r1, r0
      this->m_tlmOut_OutputPort[0].invoke(
    84b6:	463a      	mov	r2, r7
    84b8:	4630      	mov	r0, r6
    84ba:	f00e ff6d 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    84be:	4668      	mov	r0, sp
    84c0:	f00e fd0c 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    84c4:	b008      	add	sp, #32
    84c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    84ca:	4601      	mov	r1, r0
    84cc:	f240 3215 	movw	r2, #789	; 0x315
    84d0:	4807      	ldr	r0, [pc, #28]	; (84f0 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0xa8>)
    84d2:	f7f9 f8a9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    84d6:	e7e9      	b.n	84ac <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x64>
        (_tlmTime ==  Fw::ZERO_TIME)
    84d8:	4906      	ldr	r1, [pc, #24]	; (84f4 <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0xac>)
    84da:	4638      	mov	r0, r7
    84dc:	f00f fa2e 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    84e0:	2800      	cmp	r0, #0
    84e2:	d0db      	beq.n	849c <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x54>
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
    84e4:	4640      	mov	r0, r8
    84e6:	4639      	mov	r1, r7
    84e8:	f00f fb68 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    84ec:	e7d6      	b.n	849c <Svc::BufferManagerComponentBase::tlmWrite_TotalBuffs(unsigned long, Fw::Time)+0x54>
    84ee:	bf00      	nop
    84f0:	200017a8 	.word	0x200017a8
    84f4:	2000c9b0 	.word	0x2000c9b0

000084f8 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)>:
    if (not this->m_first_update_CurrBuffs) {
    84f8:	f890 336d 	ldrb.w	r3, [r0, #877]	; 0x36d
  {
    84fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8500:	4604      	mov	r4, r0
    8502:	b088      	sub	sp, #32
    8504:	460d      	mov	r5, r1
    8506:	4617      	mov	r7, r2
    if (not this->m_first_update_CurrBuffs) {
    8508:	b973      	cbnz	r3, 8528 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_CurrBuffs) {
    850a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
    850e:	428b      	cmp	r3, r1
    8510:	d007      	beq.n	8522 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x2a>
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8512:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
        this->m_last_CurrBuffs = arg;
    8516:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    851a:	4630      	mov	r0, r6
    851c:	f00f fc96 	bl	17e4c <Fw::PortBase::isConnected() const>
    8520:	b970      	cbnz	r0, 8540 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x48>
  }
    8522:	b008      	add	sp, #32
    8524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_CurrBuffs = false;
    8528:	2300      	movs	r3, #0
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    852a:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
      this->m_first_update_CurrBuffs = false;
    852e:	f880 336d 	strb.w	r3, [r0, #877]	; 0x36d
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8532:	4630      	mov	r0, r6
        this->m_last_CurrBuffs = arg;
    8534:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8538:	f00f fc88 	bl	17e4c <Fw::PortBase::isConnected() const>
    853c:	2800      	cmp	r0, #0
    853e:	d0f0      	beq.n	8522 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x2a>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    8540:	f504 7823 	add.w	r8, r4, #652	; 0x28c
    8544:	4640      	mov	r0, r8
    8546:	f00f fc81 	bl	17e4c <Fw::PortBase::isConnected() const>
    854a:	b9e8      	cbnz	r0, 8588 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x90>
      Fw::TlmBuffer _tlmBuff;
    854c:	4668      	mov	r0, sp
    854e:	f00e fcdd 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    8552:	4629      	mov	r1, r5
    8554:	4668      	mov	r0, sp
    8556:	f7f8 f881 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    855a:	b970      	cbnz	r0, 857a <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x82>
      _id = this->getIdBase() + CHANNELID_CURRBUFFS;
    855c:	4620      	mov	r0, r4
    855e:	f009 fcc9 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_tlmOut_OutputPort[0].invoke(
    8562:	466b      	mov	r3, sp
    8564:	1c41      	adds	r1, r0, #1
    8566:	463a      	mov	r2, r7
    8568:	4630      	mov	r0, r6
    856a:	f00e ff15 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    856e:	4668      	mov	r0, sp
    8570:	f00e fcb4 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    8574:	b008      	add	sp, #32
    8576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    857a:	4601      	mov	r1, r0
    857c:	f240 3245 	movw	r2, #837	; 0x345
    8580:	4807      	ldr	r0, [pc, #28]	; (85a0 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0xa8>)
    8582:	f7f9 f851 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    8586:	e7e9      	b.n	855c <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x64>
        (_tlmTime ==  Fw::ZERO_TIME)
    8588:	4906      	ldr	r1, [pc, #24]	; (85a4 <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0xac>)
    858a:	4638      	mov	r0, r7
    858c:	f00f f9d6 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    8590:	2800      	cmp	r0, #0
    8592:	d0db      	beq.n	854c <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x54>
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
    8594:	4640      	mov	r0, r8
    8596:	4639      	mov	r1, r7
    8598:	f00f fb10 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    859c:	e7d6      	b.n	854c <Svc::BufferManagerComponentBase::tlmWrite_CurrBuffs(unsigned long, Fw::Time)+0x54>
    859e:	bf00      	nop
    85a0:	200017a8 	.word	0x200017a8
    85a4:	2000c9b0 	.word	0x2000c9b0

000085a8 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)>:
    if (not this->m_first_update_HiBuffs) {
    85a8:	f890 336e 	ldrb.w	r3, [r0, #878]	; 0x36e
  {
    85ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85b0:	4604      	mov	r4, r0
    85b2:	b088      	sub	sp, #32
    85b4:	460d      	mov	r5, r1
    85b6:	4617      	mov	r7, r2
    if (not this->m_first_update_HiBuffs) {
    85b8:	b973      	cbnz	r3, 85d8 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_HiBuffs) {
    85ba:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
    85be:	428b      	cmp	r3, r1
    85c0:	d007      	beq.n	85d2 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x2a>
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    85c2:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
        this->m_last_HiBuffs = arg;
    85c6:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    85ca:	4630      	mov	r0, r6
    85cc:	f00f fc3e 	bl	17e4c <Fw::PortBase::isConnected() const>
    85d0:	b970      	cbnz	r0, 85f0 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x48>
  }
    85d2:	b008      	add	sp, #32
    85d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_HiBuffs = false;
    85d8:	2300      	movs	r3, #0
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    85da:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
      this->m_first_update_HiBuffs = false;
    85de:	f880 336e 	strb.w	r3, [r0, #878]	; 0x36e
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    85e2:	4630      	mov	r0, r6
        this->m_last_HiBuffs = arg;
    85e4:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    85e8:	f00f fc30 	bl	17e4c <Fw::PortBase::isConnected() const>
    85ec:	2800      	cmp	r0, #0
    85ee:	d0f0      	beq.n	85d2 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x2a>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    85f0:	f504 7823 	add.w	r8, r4, #652	; 0x28c
    85f4:	4640      	mov	r0, r8
    85f6:	f00f fc29 	bl	17e4c <Fw::PortBase::isConnected() const>
    85fa:	b9e8      	cbnz	r0, 8638 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x90>
      Fw::TlmBuffer _tlmBuff;
    85fc:	4668      	mov	r0, sp
    85fe:	f00e fc85 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    8602:	4629      	mov	r1, r5
    8604:	4668      	mov	r0, sp
    8606:	f7f8 f829 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    860a:	b970      	cbnz	r0, 862a <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x82>
      _id = this->getIdBase() + CHANNELID_HIBUFFS;
    860c:	4620      	mov	r0, r4
    860e:	f009 fc71 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_tlmOut_OutputPort[0].invoke(
    8612:	466b      	mov	r3, sp
    8614:	1c81      	adds	r1, r0, #2
    8616:	463a      	mov	r2, r7
    8618:	4630      	mov	r0, r6
    861a:	f00e febd 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    861e:	4668      	mov	r0, sp
    8620:	f00e fc5c 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    8624:	b008      	add	sp, #32
    8626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    862a:	4601      	mov	r1, r0
    862c:	f240 3275 	movw	r2, #885	; 0x375
    8630:	4807      	ldr	r0, [pc, #28]	; (8650 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0xa8>)
    8632:	f7f8 fff9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    8636:	e7e9      	b.n	860c <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x64>
        (_tlmTime ==  Fw::ZERO_TIME)
    8638:	4906      	ldr	r1, [pc, #24]	; (8654 <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0xac>)
    863a:	4638      	mov	r0, r7
    863c:	f00f f97e 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    8640:	2800      	cmp	r0, #0
    8642:	d0db      	beq.n	85fc <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x54>
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
    8644:	4640      	mov	r0, r8
    8646:	4639      	mov	r1, r7
    8648:	f00f fab8 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    864c:	e7d6      	b.n	85fc <Svc::BufferManagerComponentBase::tlmWrite_HiBuffs(unsigned long, Fw::Time)+0x54>
    864e:	bf00      	nop
    8650:	200017a8 	.word	0x200017a8
    8654:	2000c9b0 	.word	0x2000c9b0

00008658 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)>:
    if (not this->m_first_update_NoBuffs) {
    8658:	f890 336f 	ldrb.w	r3, [r0, #879]	; 0x36f
  {
    865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8660:	4604      	mov	r4, r0
    8662:	b088      	sub	sp, #32
    8664:	460d      	mov	r5, r1
    8666:	4617      	mov	r7, r2
    if (not this->m_first_update_NoBuffs) {
    8668:	b973      	cbnz	r3, 8688 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_NoBuffs) {
    866a:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
    866e:	428b      	cmp	r3, r1
    8670:	d007      	beq.n	8682 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x2a>
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8672:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
        this->m_last_NoBuffs = arg;
    8676:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    867a:	4630      	mov	r0, r6
    867c:	f00f fbe6 	bl	17e4c <Fw::PortBase::isConnected() const>
    8680:	b970      	cbnz	r0, 86a0 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x48>
  }
    8682:	b008      	add	sp, #32
    8684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_NoBuffs = false;
    8688:	2300      	movs	r3, #0
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    868a:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
      this->m_first_update_NoBuffs = false;
    868e:	f880 336f 	strb.w	r3, [r0, #879]	; 0x36f
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8692:	4630      	mov	r0, r6
        this->m_last_NoBuffs = arg;
    8694:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8698:	f00f fbd8 	bl	17e4c <Fw::PortBase::isConnected() const>
    869c:	2800      	cmp	r0, #0
    869e:	d0f0      	beq.n	8682 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x2a>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    86a0:	f504 7823 	add.w	r8, r4, #652	; 0x28c
    86a4:	4640      	mov	r0, r8
    86a6:	f00f fbd1 	bl	17e4c <Fw::PortBase::isConnected() const>
    86aa:	b9e8      	cbnz	r0, 86e8 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x90>
      Fw::TlmBuffer _tlmBuff;
    86ac:	4668      	mov	r0, sp
    86ae:	f00e fc2d 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    86b2:	4629      	mov	r1, r5
    86b4:	4668      	mov	r0, sp
    86b6:	f7f7 ffd1 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    86ba:	b970      	cbnz	r0, 86da <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x82>
      _id = this->getIdBase() + CHANNELID_NOBUFFS;
    86bc:	4620      	mov	r0, r4
    86be:	f009 fc19 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_tlmOut_OutputPort[0].invoke(
    86c2:	466b      	mov	r3, sp
    86c4:	1cc1      	adds	r1, r0, #3
    86c6:	463a      	mov	r2, r7
    86c8:	4630      	mov	r0, r6
    86ca:	f00e fe65 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    86ce:	4668      	mov	r0, sp
    86d0:	f00e fc04 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    86d4:	b008      	add	sp, #32
    86d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    86da:	4601      	mov	r1, r0
    86dc:	f240 32a5 	movw	r2, #933	; 0x3a5
    86e0:	4807      	ldr	r0, [pc, #28]	; (8700 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0xa8>)
    86e2:	f7f8 ffa1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    86e6:	e7e9      	b.n	86bc <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x64>
        (_tlmTime ==  Fw::ZERO_TIME)
    86e8:	4906      	ldr	r1, [pc, #24]	; (8704 <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0xac>)
    86ea:	4638      	mov	r0, r7
    86ec:	f00f f926 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    86f0:	2800      	cmp	r0, #0
    86f2:	d0db      	beq.n	86ac <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x54>
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
    86f4:	4640      	mov	r0, r8
    86f6:	4639      	mov	r1, r7
    86f8:	f00f fa60 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    86fc:	e7d6      	b.n	86ac <Svc::BufferManagerComponentBase::tlmWrite_NoBuffs(unsigned long, Fw::Time)+0x54>
    86fe:	bf00      	nop
    8700:	200017a8 	.word	0x200017a8
    8704:	2000c9b0 	.word	0x2000c9b0

00008708 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)>:
    if (not this->m_first_update_EmptyBuffs) {
    8708:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
  {
    870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8710:	4604      	mov	r4, r0
    8712:	b088      	sub	sp, #32
    8714:	460d      	mov	r5, r1
    8716:	4617      	mov	r7, r2
    if (not this->m_first_update_EmptyBuffs) {
    8718:	b973      	cbnz	r3, 8738 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_EmptyBuffs) {
    871a:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
    871e:	428b      	cmp	r3, r1
    8720:	d007      	beq.n	8732 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x2a>
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8722:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
        this->m_last_EmptyBuffs = arg;
    8726:	f8c4 5384 	str.w	r5, [r4, #900]	; 0x384
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    872a:	4630      	mov	r0, r6
    872c:	f00f fb8e 	bl	17e4c <Fw::PortBase::isConnected() const>
    8730:	b970      	cbnz	r0, 8750 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x48>
  }
    8732:	b008      	add	sp, #32
    8734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_EmptyBuffs = false;
    8738:	2300      	movs	r3, #0
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    873a:	f504 763e 	add.w	r6, r4, #760	; 0x2f8
      this->m_first_update_EmptyBuffs = false;
    873e:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8742:	4630      	mov	r0, r6
        this->m_last_EmptyBuffs = arg;
    8744:	f8c4 5384 	str.w	r5, [r4, #900]	; 0x384
    if (this->m_tlmOut_OutputPort[0].isConnected()) {
    8748:	f00f fb80 	bl	17e4c <Fw::PortBase::isConnected() const>
    874c:	2800      	cmp	r0, #0
    874e:	d0f0      	beq.n	8732 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x2a>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    8750:	f504 7823 	add.w	r8, r4, #652	; 0x28c
    8754:	4640      	mov	r0, r8
    8756:	f00f fb79 	bl	17e4c <Fw::PortBase::isConnected() const>
    875a:	b9e8      	cbnz	r0, 8798 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x90>
      Fw::TlmBuffer _tlmBuff;
    875c:	4668      	mov	r0, sp
    875e:	f00e fbd5 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    8762:	4629      	mov	r1, r5
    8764:	4668      	mov	r0, sp
    8766:	f7f7 ff79 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    876a:	b970      	cbnz	r0, 878a <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x82>
      _id = this->getIdBase() + CHANNELID_EMPTYBUFFS;
    876c:	4620      	mov	r0, r4
    876e:	f009 fbc1 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_tlmOut_OutputPort[0].invoke(
    8772:	466b      	mov	r3, sp
    8774:	1d01      	adds	r1, r0, #4
    8776:	463a      	mov	r2, r7
    8778:	4630      	mov	r0, r6
    877a:	f00e fe0d 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    877e:	4668      	mov	r0, sp
    8780:	f00e fbac 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    8784:	b008      	add	sp, #32
    8786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    878a:	4601      	mov	r1, r0
    878c:	f240 32d5 	movw	r2, #981	; 0x3d5
    8790:	4807      	ldr	r0, [pc, #28]	; (87b0 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0xa8>)
    8792:	f7f8 ff49 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    8796:	e7e9      	b.n	876c <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x64>
        (_tlmTime ==  Fw::ZERO_TIME)
    8798:	4906      	ldr	r1, [pc, #24]	; (87b4 <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0xac>)
    879a:	4638      	mov	r0, r7
    879c:	f00f f8ce 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_timeCaller_OutputPort[0].isConnected() &&
    87a0:	2800      	cmp	r0, #0
    87a2:	d0db      	beq.n	875c <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x54>
        this->m_timeCaller_OutputPort[0].invoke(_tlmTime);
    87a4:	4640      	mov	r0, r8
    87a6:	4639      	mov	r1, r7
    87a8:	f00f fa08 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    87ac:	e7d6      	b.n	875c <Svc::BufferManagerComponentBase::tlmWrite_EmptyBuffs(unsigned long, Fw::Time)+0x54>
    87ae:	bf00      	nop
    87b0:	200017a8 	.word	0x200017a8
    87b4:	2000c9b0 	.word	0x2000c9b0

000087b8 <Fw::LogStringArg::toChar() const>:
    LogStringArg& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
    87b8:	3004      	adds	r0, #4
    87ba:	4770      	bx	lr

000087bc <Fw::LogStringArg::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
    87bc:	2041      	movs	r0, #65	; 0x41
    87be:	4770      	bx	lr

000087c0 <Svc::CommandDispatcherImpl::~CommandDispatcherImpl()>:
    {
        memset(this->m_entryTable,0,sizeof(this->m_entryTable));
        memset(this->m_sequenceTracker,0,sizeof(this->m_sequenceTracker));
    }

    CommandDispatcherImpl::~CommandDispatcherImpl() {
    87c0:	4b03      	ldr	r3, [pc, #12]	; (87d0 <Svc::CommandDispatcherImpl::~CommandDispatcherImpl()+0x10>)
    87c2:	b510      	push	{r4, lr}
    87c4:	4604      	mov	r4, r0
    87c6:	6003      	str	r3, [r0, #0]
    87c8:	f001 fc44 	bl	a054 <Svc::CommandDispatcherComponentBase::~CommandDispatcherComponentBase()>
    }
    87cc:	4620      	mov	r0, r4
    87ce:	bd10      	pop	{r4, pc}
    87d0:	20003c34 	.word	0x20003c34

000087d4 <Svc::CommandDispatcherImpl::~CommandDispatcherImpl()>:
    CommandDispatcherImpl::~CommandDispatcherImpl() {
    87d4:	4b06      	ldr	r3, [pc, #24]	; (87f0 <Svc::CommandDispatcherImpl::~CommandDispatcherImpl()+0x1c>)
    87d6:	b510      	push	{r4, lr}
    87d8:	4604      	mov	r4, r0
    87da:	6003      	str	r3, [r0, #0]
    87dc:	f001 fc3a 	bl	a054 <Svc::CommandDispatcherComponentBase::~CommandDispatcherComponentBase()>
    }
    87e0:	f241 2190 	movw	r1, #4752	; 0x1290
    87e4:	4620      	mov	r0, r4
    87e6:	f010 fa73 	bl	18cd0 <operator delete(void*, unsigned int)>
    87ea:	4620      	mov	r0, r4
    87ec:	bd10      	pop	{r4, pc}
    87ee:	bf00      	nop
    87f0:	20003c34 	.word	0x20003c34

000087f4 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)>:

    void CommandDispatcherImpl::compCmdReg_handler(NATIVE_INT_TYPE portNum, FwOpcodeType opCode) {
    87f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        // search for an empty slot
        bool slotFound = false;
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    87f8:	2400      	movs	r4, #0
    void CommandDispatcherImpl::compCmdReg_handler(NATIVE_INT_TYPE portNum, FwOpcodeType opCode) {
    87fa:	4606      	mov	r6, r0
    87fc:	4689      	mov	r9, r1
    87fe:	4692      	mov	sl, r2
        bool slotFound = false;
    8800:	46a0      	mov	r8, r4
            if ((not this->m_entryTable[slot].used) and (not slotFound)) {
    8802:	f241 07b0 	movw	r7, #4272	; 0x10b0
    8806:	e008      	b.n	881a <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x26>
                this->m_entryTable[slot].port = portNum;
                this->m_entryTable[slot].used = true;
                this->log_DIAGNOSTIC_OpCodeRegistered(opCode,portNum,static_cast<I32>(slot));
                slotFound = true;
            } else if ((this->m_entryTable[slot].used) &&
                (this->m_entryTable[slot].opcode == opCode) &&
    8808:	f241 0bb4 	movw	fp, #4276	; 0x10b4
            } else if ((this->m_entryTable[slot].used) &&
    880c:	f850 300b 	ldr.w	r3, [r0, fp]
    8810:	4553      	cmp	r3, sl
    8812:	d031      	beq.n	8878 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x84>
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    8814:	3401      	adds	r4, #1
    8816:	2c20      	cmp	r4, #32
    8818:	d029      	beq.n	886e <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x7a>
            if ((not this->m_entryTable[slot].used) and (not slotFound)) {
    881a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    881e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8822:	5dc5      	ldrb	r5, [r0, r7]
    8824:	2d00      	cmp	r5, #0
    8826:	d1ef      	bne.n	8808 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x14>
    8828:	f1b8 0f00 	cmp.w	r8, #0
    882c:	d1f2      	bne.n	8814 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x20>
                this->m_entryTable[slot].used = true;
    882e:	2501      	movs	r5, #1
                this->m_entryTable[slot].port = portNum;
    8830:	f241 0cb8 	movw	ip, #4280	; 0x10b8
                this->m_entryTable[slot].opcode = opCode;
    8834:	f241 0bb4 	movw	fp, #4276	; 0x10b4
                this->log_DIAGNOSTIC_OpCodeRegistered(opCode,portNum,static_cast<I32>(slot));
    8838:	4623      	mov	r3, r4
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    883a:	442c      	add	r4, r5
                this->log_DIAGNOSTIC_OpCodeRegistered(opCode,portNum,static_cast<I32>(slot));
    883c:	464a      	mov	r2, r9
                this->m_entryTable[slot].opcode = opCode;
    883e:	f840 a00b 	str.w	sl, [r0, fp]
                this->log_DIAGNOSTIC_OpCodeRegistered(opCode,portNum,static_cast<I32>(slot));
    8842:	4651      	mov	r1, sl
                this->m_entryTable[slot].port = portNum;
    8844:	f840 900c 	str.w	r9, [r0, ip]
                this->m_entryTable[slot].used = true;
    8848:	55c5      	strb	r5, [r0, r7]
                this->log_DIAGNOSTIC_OpCodeRegistered(opCode,portNum,static_cast<I32>(slot));
    884a:	4630      	mov	r0, r6
    884c:	f001 fc6e 	bl	a12c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const>
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    8850:	2c20      	cmp	r4, #32
    8852:	d00f      	beq.n	8874 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x80>
            if ((not this->m_entryTable[slot].used) and (not slotFound)) {
    8854:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    8858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    885c:	f813 8007 	ldrb.w	r8, [r3, r7]
            } else if ((this->m_entryTable[slot].used) &&
    8860:	f1b8 0f00 	cmp.w	r8, #0
    8864:	d113      	bne.n	888e <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x9a>
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    8866:	3401      	adds	r4, #1
                (this->m_entryTable[slot].port == portNum) &&
                (not slotFound)) {
                    slotFound = true;
    8868:	46a8      	mov	r8, r5
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    886a:	2c20      	cmp	r4, #32
    886c:	d1d5      	bne.n	881a <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x26>
                    this->log_DIAGNOSTIC_OpCodeReregistered(opCode,portNum);
            } else if (this->m_entryTable[slot].used) { // make sure no duplicates
                FW_ASSERT(this->m_entryTable[slot].opcode != opCode, static_cast<FwAssertArgType>(opCode));
            }
        }
        FW_ASSERT(slotFound,static_cast<FwAssertArgType>(opCode));
    886e:	f1b8 0f00 	cmp.w	r8, #0
    8872:	d01d      	beq.n	88b0 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0xbc>
    }
    8874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                (this->m_entryTable[slot].port == portNum) &&
    8878:	f241 03b8 	movw	r3, #4280	; 0x10b8
                (this->m_entryTable[slot].opcode == opCode) &&
    887c:	58c3      	ldr	r3, [r0, r3]
    887e:	454b      	cmp	r3, r9
    8880:	d00a      	beq.n	8898 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0xa4>
                FW_ASSERT(this->m_entryTable[slot].opcode != opCode, static_cast<FwAssertArgType>(opCode));
    8882:	222c      	movs	r2, #44	; 0x2c
    8884:	4651      	mov	r1, sl
    8886:	480e      	ldr	r0, [pc, #56]	; (88c0 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0xcc>)
    8888:	f7f8 fece 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    888c:	e7c2      	b.n	8814 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x20>
            } else if ((this->m_entryTable[slot].used) &&
    888e:	f853 300b 	ldr.w	r3, [r3, fp]
    8892:	459a      	cmp	sl, r3
    8894:	d1be      	bne.n	8814 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x20>
    8896:	e7f4      	b.n	8882 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x8e>
                (this->m_entryTable[slot].port == portNum) &&
    8898:	f1b8 0f00 	cmp.w	r8, #0
    889c:	d1f1      	bne.n	8882 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x8e>
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    889e:	3401      	adds	r4, #1
                    this->log_DIAGNOSTIC_OpCodeReregistered(opCode,portNum);
    88a0:	464a      	mov	r2, r9
    88a2:	4651      	mov	r1, sl
    88a4:	4630      	mov	r0, r6
    88a6:	f002 fa29 	bl	acfc <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const>
        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
    88aa:	2c20      	cmp	r4, #32
    88ac:	d1d2      	bne.n	8854 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x60>
    88ae:	e7e1      	b.n	8874 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0x80>
        FW_ASSERT(slotFound,static_cast<FwAssertArgType>(opCode));
    88b0:	4651      	mov	r1, sl
    88b2:	222f      	movs	r2, #47	; 0x2f
    88b4:	4802      	ldr	r0, [pc, #8]	; (88c0 <Svc::CommandDispatcherImpl::compCmdReg_handler(long, unsigned long)+0xcc>)
    }
    88b6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        FW_ASSERT(slotFound,static_cast<FwAssertArgType>(opCode));
    88ba:	f7f8 beb5 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    88be:	bf00      	nop
    88c0:	20001454 	.word	0x20001454

000088c4 <Svc::CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(unsigned long, unsigned long)>:
    void CommandDispatcherImpl::CMD_TEST_CMD_1_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, I32 arg1, F32 arg2, U8 arg3) {
    	this->log_ACTIVITY_HI_TestCmd1Args(arg1,arg2,arg3);
    	this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    }

    void CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
    88c4:	b570      	push	{r4, r5, r6, lr}
        // clear tracking table
        for (NATIVE_INT_TYPE entry = 0; entry < CMD_DISPATCHER_SEQUENCER_TABLE_SIZE; entry++) {
            this->m_sequenceTracker[entry].used = false;
    88c6:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    void CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
    88ca:	b084      	sub	sp, #16
            this->m_sequenceTracker[entry].used = false;
    88cc:	2400      	movs	r4, #0
    void CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
    88ce:	4605      	mov	r5, r0
      {
    88d0:	4e0e      	ldr	r6, [pc, #56]	; (890c <Svc::CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(unsigned long, unsigned long)+0x48>)
    88d2:	a802      	add	r0, sp, #8
            this->m_sequenceTracker[entry].used = false;
    88d4:	f883 4230 	strb.w	r4, [r3, #560]	; 0x230
    88d8:	f883 4244 	strb.w	r4, [r3, #580]	; 0x244
    88dc:	f883 4258 	strb.w	r4, [r3, #600]	; 0x258
    88e0:	f883 426c 	strb.w	r4, [r3, #620]	; 0x26c
    void CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
    88e4:	e9cd 2100 	strd	r2, r1, [sp]
    88e8:	f7f7 fe22 	bl	530 <Fw::Serializable::Serializable()>
        }
        this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    88ec:	4628      	mov	r0, r5
    88ee:	ab02      	add	r3, sp, #8
        this->e = e1;
    88f0:	f88d 400c 	strb.w	r4, [sp, #12]
      {
    88f4:	9602      	str	r6, [sp, #8]
    88f6:	e9dd 2100 	ldrd	r2, r1, [sp]
    88fa:	f001 f92b 	bl	9b54 <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    88fe:	a802      	add	r0, sp, #8
    8900:	9602      	str	r6, [sp, #8]
    8902:	f7f7 fe1b 	bl	53c <Fw::Serializable::~Serializable()>
    }
    8906:	b004      	add	sp, #16
    8908:	bd70      	pop	{r4, r5, r6, pc}
    890a:	bf00      	nop
    890c:	20002bec 	.word	0x20002bec

00008910 <Fw::LogStringArg::~LogStringArg()>:
    ~LogStringArg() {}
    8910:	4b03      	ldr	r3, [pc, #12]	; (8920 <Fw::LogStringArg::~LogStringArg()+0x10>)
    8912:	b510      	push	{r4, lr}
    8914:	4604      	mov	r4, r0
    8916:	6003      	str	r3, [r0, #0]
    8918:	f7f8 fc8c 	bl	1234 <Fw::StringBase::~StringBase()>
    891c:	4620      	mov	r0, r4
    891e:	bd10      	pop	{r4, pc}
    8920:	20002d04 	.word	0x20002d04

00008924 <Fw::LogStringArg::~LogStringArg()>:
    8924:	4b05      	ldr	r3, [pc, #20]	; (893c <Fw::LogStringArg::~LogStringArg()+0x18>)
    8926:	b510      	push	{r4, lr}
    8928:	4604      	mov	r4, r0
    892a:	6003      	str	r3, [r0, #0]
    892c:	f7f8 fc82 	bl	1234 <Fw::StringBase::~StringBase()>
    8930:	2148      	movs	r1, #72	; 0x48
    8932:	4620      	mov	r0, r4
    8934:	f010 f9cc 	bl	18cd0 <operator delete(void*, unsigned int)>
    8938:	4620      	mov	r0, r4
    893a:	bd10      	pop	{r4, pc}
    893c:	20002d04 	.word	0x20002d04

00008940 <Svc::CommandDispatcherImpl::CMD_NO_OP_STRING_cmdHandler(unsigned long, unsigned long, Fw::CmdStringArg const&)>:
    void CommandDispatcherImpl::CMD_NO_OP_STRING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& arg1) {
    8940:	b5f0      	push	{r4, r5, r6, r7, lr}
    8942:	b097      	sub	sp, #92	; 0x5c
    8944:	461e      	mov	r6, r3
    8946:	4604      	mov	r4, r0
    LogStringArg(const char* src) : StringBase() { *this = src; }
    8948:	4f13      	ldr	r7, [pc, #76]	; (8998 <Svc::CommandDispatcherImpl::CMD_NO_OP_STRING_cmdHandler(unsigned long, unsigned long, Fw::CmdStringArg const&)+0x58>)
    894a:	a804      	add	r0, sp, #16
    894c:	9201      	str	r2, [sp, #4]
    894e:	460d      	mov	r5, r1
    8950:	f7f8 fc66 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    8954:	1d31      	adds	r1, r6, #4
    8956:	a804      	add	r0, sp, #16
    LogStringArg(const char* src) : StringBase() { *this = src; }
    8958:	9704      	str	r7, [sp, #16]
        (void)StringBase::operator=(src);
    895a:	f7f8 fcc9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    	this->log_ACTIVITY_HI_NoOpStringReceived(msg);
    895e:	a904      	add	r1, sp, #16
    8960:	4620      	mov	r0, r4
    8962:	f002 f865 	bl	aa30 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const>
      {
    8966:	a802      	add	r0, sp, #8
    8968:	f7f7 fde2 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    896c:	2300      	movs	r3, #0
    	this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    896e:	4620      	mov	r0, r4
      {
    8970:	4c0a      	ldr	r4, [pc, #40]	; (899c <Svc::CommandDispatcherImpl::CMD_NO_OP_STRING_cmdHandler(unsigned long, unsigned long, Fw::CmdStringArg const&)+0x5c>)
    8972:	9a01      	ldr	r2, [sp, #4]
    8974:	4629      	mov	r1, r5
        this->e = e1;
    8976:	f88d 300c 	strb.w	r3, [sp, #12]
    897a:	ab02      	add	r3, sp, #8
      {
    897c:	9402      	str	r4, [sp, #8]
    897e:	f001 f8e9 	bl	9b54 <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    8982:	a802      	add	r0, sp, #8
    8984:	9402      	str	r4, [sp, #8]
    8986:	f7f7 fdd9 	bl	53c <Fw::Serializable::~Serializable()>
    ~LogStringArg() {}
    898a:	a804      	add	r0, sp, #16
    898c:	9704      	str	r7, [sp, #16]
    898e:	f7f8 fc51 	bl	1234 <Fw::StringBase::~StringBase()>
    }
    8992:	b017      	add	sp, #92	; 0x5c
    8994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8996:	bf00      	nop
    8998:	20002d04 	.word	0x20002d04
    899c:	20002bec 	.word	0x20002bec

000089a0 <Svc::CommandDispatcherImpl::CMD_TEST_CMD_1_cmdHandler(unsigned long, unsigned long, long, float, unsigned char)>:
    void CommandDispatcherImpl::CMD_TEST_CMD_1_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, I32 arg1, F32 arg2, U8 arg3) {
    89a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89a2:	b083      	sub	sp, #12
    89a4:	460c      	mov	r4, r1
    89a6:	4615      	mov	r5, r2
    	this->log_ACTIVITY_HI_TestCmd1Args(arg1,arg2,arg3);
    89a8:	4619      	mov	r1, r3
    89aa:	f89d 2020 	ldrb.w	r2, [sp, #32]
    void CommandDispatcherImpl::CMD_TEST_CMD_1_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, I32 arg1, F32 arg2, U8 arg3) {
    89ae:	4606      	mov	r6, r0
    	this->log_ACTIVITY_HI_TestCmd1Args(arg1,arg2,arg3);
    89b0:	f002 f8de 	bl	ab70 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const>
      {
    89b4:	4668      	mov	r0, sp
    89b6:	f7f7 fdbb 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    89ba:	2300      	movs	r3, #0
      {
    89bc:	4f07      	ldr	r7, [pc, #28]	; (89dc <Svc::CommandDispatcherImpl::CMD_TEST_CMD_1_cmdHandler(unsigned long, unsigned long, long, float, unsigned char)+0x3c>)
    	this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    89be:	4630      	mov	r0, r6
    89c0:	462a      	mov	r2, r5
    89c2:	4621      	mov	r1, r4
        this->e = e1;
    89c4:	f88d 3004 	strb.w	r3, [sp, #4]
    89c8:	466b      	mov	r3, sp
      {
    89ca:	9700      	str	r7, [sp, #0]
    89cc:	f001 f8c2 	bl	9b54 <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    89d0:	4668      	mov	r0, sp
    89d2:	9700      	str	r7, [sp, #0]
    89d4:	f7f7 fdb2 	bl	53c <Fw::Serializable::~Serializable()>
    }
    89d8:	b003      	add	sp, #12
    89da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89dc:	20002bec 	.word	0x20002bec

000089e0 <Svc::CommandDispatcherImpl::pingIn_handler(long, unsigned long)>:

    void CommandDispatcherImpl::pingIn_handler(NATIVE_INT_TYPE portNum, U32 key) {
        // respond to ping
        this->pingOut_out(0,key);
    89e0:	2100      	movs	r1, #0
    89e2:	f001 b883 	b.w	9aec <Svc::CommandDispatcherComponentBase::pingOut_out(long, unsigned long)>
    89e6:	bf00      	nop

000089e8 <Svc::CommandDispatcherImpl::CMD_NO_OP_cmdHandler(unsigned long, unsigned long)>:
    void CommandDispatcherImpl::CMD_NO_OP_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
    89e8:	b570      	push	{r4, r5, r6, lr}
    89ea:	b096      	sub	sp, #88	; 0x58
    89ec:	4604      	mov	r4, r0
    LogStringArg(const char* src) : StringBase() { *this = src; }
    89ee:	4e13      	ldr	r6, [pc, #76]	; (8a3c <Svc::CommandDispatcherImpl::CMD_NO_OP_cmdHandler(unsigned long, unsigned long)+0x54>)
    89f0:	460d      	mov	r5, r1
    89f2:	a804      	add	r0, sp, #16
    89f4:	9201      	str	r2, [sp, #4]
    89f6:	f7f8 fc13 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    89fa:	4911      	ldr	r1, [pc, #68]	; (8a40 <Svc::CommandDispatcherImpl::CMD_NO_OP_cmdHandler(unsigned long, unsigned long)+0x58>)
    89fc:	a804      	add	r0, sp, #16
    LogStringArg(const char* src) : StringBase() { *this = src; }
    89fe:	9604      	str	r6, [sp, #16]
        (void)StringBase::operator=(src);
    8a00:	f7f8 fc76 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    	this->log_ACTIVITY_HI_NoOpReceived();
    8a04:	4620      	mov	r0, r4
    8a06:	f001 ff8d 	bl	a924 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const>
      {
    8a0a:	a802      	add	r0, sp, #8
    8a0c:	f7f7 fd90 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    8a10:	2300      	movs	r3, #0
        this->cmdResponse_out(opCode,cmdSeq,Fw::CmdResponse::OK);
    8a12:	4620      	mov	r0, r4
      {
    8a14:	4c0b      	ldr	r4, [pc, #44]	; (8a44 <Svc::CommandDispatcherImpl::CMD_NO_OP_cmdHandler(unsigned long, unsigned long)+0x5c>)
    8a16:	9a01      	ldr	r2, [sp, #4]
    8a18:	4629      	mov	r1, r5
        this->e = e1;
    8a1a:	f88d 300c 	strb.w	r3, [sp, #12]
    8a1e:	ab02      	add	r3, sp, #8
      {
    8a20:	9402      	str	r4, [sp, #8]
    8a22:	f001 f897 	bl	9b54 <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    8a26:	a802      	add	r0, sp, #8
    8a28:	9402      	str	r4, [sp, #8]
    8a2a:	f7f7 fd87 	bl	53c <Fw::Serializable::~Serializable()>
    ~LogStringArg() {}
    8a2e:	a804      	add	r0, sp, #16
    8a30:	9604      	str	r6, [sp, #16]
    8a32:	f7f8 fbff 	bl	1234 <Fw::StringBase::~StringBase()>
    }
    8a36:	b016      	add	sp, #88	; 0x58
    8a38:	bd70      	pop	{r4, r5, r6, pc}
    8a3a:	bf00      	nop
    8a3c:	20002d04 	.word	0x20002d04
    8a40:	20001480 	.word	0x20001480
    8a44:	20002bec 	.word	0x20002bec

00008a48 <Svc::CommandDispatcherImpl::CommandDispatcherImpl(char const*)>:
    CommandDispatcherImpl::CommandDispatcherImpl(const char* name) :
    8a48:	b538      	push	{r3, r4, r5, lr}
    8a4a:	4604      	mov	r4, r0
        m_seq(0),
    8a4c:	2500      	movs	r5, #0
        m_numCmdErrors(0)
    8a4e:	f000 fd8b 	bl	9568 <Svc::CommandDispatcherComponentBase::CommandDispatcherComponentBase(char const*)>
    8a52:	490c      	ldr	r1, [pc, #48]	; (8a84 <Svc::CommandDispatcherImpl::CommandDispatcherImpl(char const*)+0x3c>)
        m_seq(0),
    8a54:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
        memset(this->m_entryTable,0,sizeof(this->m_entryTable));
    8a58:	f241 00b0 	movw	r0, #4272	; 0x10b0
        m_numCmdErrors(0)
    8a5c:	6021      	str	r1, [r4, #0]
        memset(this->m_entryTable,0,sizeof(this->m_entryTable));
    8a5e:	f44f 72c0 	mov.w	r2, #384	; 0x180
    8a62:	4629      	mov	r1, r5
        m_numCmdErrors(0)
    8a64:	f8c3 5288 	str.w	r5, [r3, #648]	; 0x288
        memset(this->m_entryTable,0,sizeof(this->m_entryTable));
    8a68:	4420      	add	r0, r4
        m_numCmdsDispatched(0),
    8a6a:	e9c3 55a0 	strd	r5, r5, [r3, #640]	; 0x280
        memset(this->m_entryTable,0,sizeof(this->m_entryTable));
    8a6e:	f01c f8bd 	bl	24bec <memset>
        memset(this->m_sequenceTracker,0,sizeof(this->m_sequenceTracker));
    8a72:	f241 2030 	movw	r0, #4656	; 0x1230
    8a76:	2250      	movs	r2, #80	; 0x50
    8a78:	4629      	mov	r1, r5
    8a7a:	4420      	add	r0, r4
    8a7c:	f01c f8b6 	bl	24bec <memset>
    }
    8a80:	4620      	mov	r0, r4
    8a82:	bd38      	pop	{r3, r4, r5, pc}
    8a84:	20003c34 	.word	0x20003c34

00008a88 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
    void CommandDispatcherImpl::compCmdStat_handler(NATIVE_INT_TYPE portNum, FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdResponse &response) {
    8a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a8c:	b084      	sub	sp, #16
    8a8e:	461e      	mov	r6, r3
    8a90:	4605      	mov	r5, r0
    8a92:	4617      	mov	r7, r2
    8a94:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        if (Fw::CmdResponse::OK == response.e) {
    8a98:	f898 3004 	ldrb.w	r3, [r8, #4]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d148      	bne.n	8b32 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xaa>
            this->log_COMMAND_OpCodeCompleted(opCode);
    8aa0:	4611      	mov	r1, r2
    8aa2:	f001 fcaf 	bl	a404 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const>
        for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
    8aa6:	f241 2c34 	movw	ip, #4660	; 0x1234
    8aaa:	2400      	movs	r4, #0
    8aac:	44ac      	add	ip, r5
            if (
    8aae:	f8dc 3000 	ldr.w	r3, [ip]
    8ab2:	42b3      	cmp	r3, r6
    8ab4:	d007      	beq.n	8ac6 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x3e>
        for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
    8ab6:	3401      	adds	r4, #1
    8ab8:	f10c 0c14 	add.w	ip, ip, #20
    8abc:	2c04      	cmp	r4, #4
    8abe:	d1f6      	bne.n	8aae <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x26>
    }
    8ac0:	b004      	add	sp, #16
    8ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    (this->m_sequenceTracker[pending].seq == cmdSeq) &&
    8ac6:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
    8aca:	2b00      	cmp	r3, #0
    8acc:	d0f3      	beq.n	8ab6 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x2e>
                portToCall = this->m_sequenceTracker[pending].callerPort;
    8ace:	eb04 0384 	add.w	r3, r4, r4, lsl #2
                FW_ASSERT(opCode == this->m_sequenceTracker[pending].opCode);
    8ad2:	f241 2238 	movw	r2, #4664	; 0x1238
                portToCall = this->m_sequenceTracker[pending].callerPort;
    8ad6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    8ada:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8ade:	f503 5192 	add.w	r1, r3, #4672	; 0x1240
                FW_ASSERT(opCode == this->m_sequenceTracker[pending].opCode);
    8ae2:	589a      	ldr	r2, [r3, r2]
                portToCall = this->m_sequenceTracker[pending].callerPort;
    8ae4:	680e      	ldr	r6, [r1, #0]
                FW_ASSERT(opCode == this->m_sequenceTracker[pending].opCode);
    8ae6:	42ba      	cmp	r2, r7
                context = this->m_sequenceTracker[pending].context;
    8ae8:	f241 213c 	movw	r1, #4668	; 0x123c
    8aec:	f853 9001 	ldr.w	r9, [r3, r1]
                FW_ASSERT(opCode == this->m_sequenceTracker[pending].opCode);
    8af0:	d14c      	bne.n	8b8c <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x104>
                FW_ASSERT(portToCall < this->getNum_seqCmdStatus_OutputPorts());
    8af2:	4628      	mov	r0, r5
    8af4:	f000 fd92 	bl	961c <Svc::CommandDispatcherComponentBase::getNum_seqCmdStatus_OutputPorts() const>
    8af8:	42b0      	cmp	r0, r6
    8afa:	dd4c      	ble.n	8b96 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x10e>
                this->m_sequenceTracker[pending].used = false;
    8afc:	eb0a 0304 	add.w	r3, sl, r4
    8b00:	f241 2230 	movw	r2, #4656	; 0x1230
    8b04:	2100      	movs	r1, #0
    8b06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8b0a:	5499      	strb	r1, [r3, r2]
        if (portToCall != -1) {
    8b0c:	1c73      	adds	r3, r6, #1
    8b0e:	d0d7      	beq.n	8ac0 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x38>
            if (this->isConnected_seqCmdStatus_OutputPort(portToCall)) {
    8b10:	4631      	mov	r1, r6
    8b12:	4628      	mov	r0, r5
    8b14:	f000 fd9a 	bl	964c <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)>
    8b18:	2800      	cmp	r0, #0
    8b1a:	d0d1      	beq.n	8ac0 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x38>
                this->seqCmdStatus_out(portToCall,opCode,context,response);
    8b1c:	464b      	mov	r3, r9
    8b1e:	463a      	mov	r2, r7
    8b20:	4631      	mov	r1, r6
    8b22:	4628      	mov	r0, r5
    8b24:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
    8b28:	b004      	add	sp, #16
    8b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                this->seqCmdStatus_out(portToCall,opCode,context,response);
    8b2e:	f000 bff3 	b.w	9b18 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)>
            this->m_numCmdErrors++;
    8b32:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
            this->tlmWrite_CommandErrors(this->m_numCmdErrors);
    8b36:	4668      	mov	r0, sp
            this->m_numCmdErrors++;
    8b38:	f8d3 4288 	ldr.w	r4, [r3, #648]	; 0x288
    8b3c:	3401      	adds	r4, #1
    8b3e:	f8c3 4288 	str.w	r4, [r3, #648]	; 0x288
            this->tlmWrite_CommandErrors(this->m_numCmdErrors);
    8b42:	f00e feb5 	bl	178b0 <Fw::Time::Time()>
    8b46:	466a      	mov	r2, sp
    8b48:	4621      	mov	r1, r4
    8b4a:	4628      	mov	r0, r5
    8b4c:	f002 fa88 	bl	b060 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)>
    8b50:	4668      	mov	r0, sp
    8b52:	f00e fe55 	bl	17800 <Fw::Time::~Time()>
            FW_ASSERT(response.e != Fw::CmdResponse::OK);
    8b56:	f898 3004 	ldrb.w	r3, [r8, #4]
    8b5a:	b193      	cbz	r3, 8b82 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xfa>
      {
    8b5c:	4668      	mov	r0, sp
    8b5e:	4c10      	ldr	r4, [pc, #64]	; (8ba0 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    8b60:	f7f7 fce6 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    8b64:	f898 3004 	ldrb.w	r3, [r8, #4]
            this->log_COMMAND_OpCodeError(opCode,response);
    8b68:	4628      	mov	r0, r5
    8b6a:	466a      	mov	r2, sp
    8b6c:	4639      	mov	r1, r7
      {
    8b6e:	9400      	str	r4, [sp, #0]
        this->e = obj.e;
    8b70:	f88d 3004 	strb.w	r3, [sp, #4]
    8b74:	f001 fce0 	bl	a538 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const>
  class CmdResponse :
    8b78:	4668      	mov	r0, sp
    8b7a:	9400      	str	r4, [sp, #0]
    8b7c:	f7f7 fcde 	bl	53c <Fw::Serializable::~Serializable()>
    8b80:	e791      	b.n	8aa6 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x1e>
            FW_ASSERT(response.e != Fw::CmdResponse::OK);
    8b82:	2139      	movs	r1, #57	; 0x39
    8b84:	4807      	ldr	r0, [pc, #28]	; (8ba4 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x11c>)
    8b86:	f7f8 fd41 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    8b8a:	e7e7      	b.n	8b5c <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xd4>
                FW_ASSERT(opCode == this->m_sequenceTracker[pending].opCode);
    8b8c:	2146      	movs	r1, #70	; 0x46
    8b8e:	4805      	ldr	r0, [pc, #20]	; (8ba4 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x11c>)
    8b90:	f7f8 fd3c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    8b94:	e7ad      	b.n	8af2 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x6a>
                FW_ASSERT(portToCall < this->getNum_seqCmdStatus_OutputPorts());
    8b96:	2147      	movs	r1, #71	; 0x47
    8b98:	4802      	ldr	r0, [pc, #8]	; (8ba4 <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x11c>)
    8b9a:	f7f8 fd37 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    8b9e:	e7ad      	b.n	8afc <Svc::CommandDispatcherImpl::compCmdStat_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x74>
    8ba0:	20002bec 	.word	0x20002bec
    8ba4:	20001454 	.word	0x20001454

00008ba8 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)>:
    void CommandDispatcherImpl::seqCmdBuff_handler(NATIVE_INT_TYPE portNum, Fw::ComBuffer &data, U32 context) {
    8ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8bac:	b0b0      	sub	sp, #192	; 0xc0
    8bae:	4614      	mov	r4, r2
    8bb0:	4606      	mov	r6, r0
    8bb2:	4698      	mov	r8, r3
        Fw::CmdPacket cmdPkt;
    8bb4:	a80c      	add	r0, sp, #48	; 0x30
    void CommandDispatcherImpl::seqCmdBuff_handler(NATIVE_INT_TYPE portNum, Fw::ComBuffer &data, U32 context) {
    8bb6:	460f      	mov	r7, r1
        Fw::CmdPacket cmdPkt;
    8bb8:	f00d f860 	bl	15c7c <Fw::CmdPacket::CmdPacket()>
        Fw::SerializeStatus stat = cmdPkt.deserialize(data);
    8bbc:	4621      	mov	r1, r4
    8bbe:	a80c      	add	r0, sp, #48	; 0x30
    8bc0:	f00d f838 	bl	15c34 <Fw::CmdPacket::deserialize(Fw::SerializeBufferBase&)>
        if (stat != Fw::FW_SERIALIZE_OK) {
    8bc4:	4605      	mov	r5, r0
    8bc6:	2800      	cmp	r0, #0
    8bc8:	d168      	bne.n	8c9c <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0xf4>
    8bca:	f241 04b4 	movw	r4, #4276	; 0x10b4
    8bce:	4434      	add	r4, r6
    8bd0:	e003      	b.n	8bda <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x32>
        for (entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); entry++) {
    8bd2:	3501      	adds	r5, #1
    8bd4:	340c      	adds	r4, #12
    8bd6:	2d20      	cmp	r5, #32
    8bd8:	d017      	beq.n	8c0a <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x62>
            if ((this->m_entryTable[entry].used) and (cmdPkt.getOpCode() == this->m_entryTable[entry].opcode)) {
    8bda:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    8bde:	2a00      	cmp	r2, #0
    8be0:	d0f7      	beq.n	8bd2 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x2a>
    8be2:	a80c      	add	r0, sp, #48	; 0x30
    8be4:	f00d f85c 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8be8:	6822      	ldr	r2, [r4, #0]
    8bea:	4290      	cmp	r0, r2
    8bec:	d1f1      	bne.n	8bd2 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x2a>
        if (entryFound and this->isConnected_compCmdSend_OutputPort(this->m_entryTable[entry].port)) {
    8bee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    8bf2:	f241 02b8 	movw	r2, #4280	; 0x10b8
    8bf6:	4630      	mov	r0, r6
    8bf8:	ea4f 0945 	mov.w	r9, r5, lsl #1
    8bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    8c00:	5899      	ldr	r1, [r3, r2]
    8c02:	f000 fd0d 	bl	9620 <Svc::CommandDispatcherComponentBase::isConnected_compCmdSend_OutputPort(long)>
    8c06:	2800      	cmp	r0, #0
    8c08:	d16f      	bne.n	8cea <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x142>
        	this->m_numCmdErrors++;
    8c0a:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
        	this->log_WARNING_HI_InvalidCommand(cmdPkt.getOpCode());
    8c0e:	a80c      	add	r0, sp, #48	; 0x30
    8c10:	f00d f846 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8c14:	4601      	mov	r1, r0
    8c16:	4630      	mov	r0, r6
    8c18:	f001 fd50 	bl	a6bc <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const>
        	this->m_numCmdErrors++;
    8c1c:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
        	if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
    8c20:	4639      	mov	r1, r7
    8c22:	4630      	mov	r0, r6
        	this->m_numCmdErrors++;
    8c24:	3301      	adds	r3, #1
    8c26:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
        	if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
    8c2a:	f000 fd0f 	bl	964c <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)>
    8c2e:	b9c8      	cbnz	r0, 8c64 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0xbc>
    8c30:	ad08      	add	r5, sp, #32
        	this->tlmWrite_CommandErrors(this->m_numCmdErrors);
    8c32:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
    8c36:	4628      	mov	r0, r5
    8c38:	9103      	str	r1, [sp, #12]
    8c3a:	f00e fe39 	bl	178b0 <Fw::Time::Time()>
    8c3e:	4630      	mov	r0, r6
    8c40:	462a      	mov	r2, r5
    8c42:	9903      	ldr	r1, [sp, #12]
    8c44:	f002 fa0c 	bl	b060 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)>
    8c48:	4628      	mov	r0, r5
    8c4a:	f00e fdd9 	bl	17800 <Fw::Time::~Time()>
        this->m_seq++;
    8c4e:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    }
    8c52:	a80c      	add	r0, sp, #48	; 0x30
        this->m_seq++;
    8c54:	3301      	adds	r3, #1
    8c56:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    }
    8c5a:	f00d f825 	bl	15ca8 <Fw::CmdPacket::~CmdPacket()>
    8c5e:	b030      	add	sp, #192	; 0xc0
    8c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
    8c64:	ad08      	add	r5, sp, #32
        	    this->seqCmdStatus_out(portNum,cmdPkt.getOpCode(),context,Fw::CmdResponse::INVALID_OPCODE);
    8c66:	a80c      	add	r0, sp, #48	; 0x30
    8c68:	f00d f81a 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8c6c:	9003      	str	r0, [sp, #12]
    8c6e:	4628      	mov	r0, r5
    8c70:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8e3c <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x294>
    8c74:	f7f7 fc5c 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    8c78:	2001      	movs	r0, #1
    8c7a:	4643      	mov	r3, r8
    8c7c:	9a03      	ldr	r2, [sp, #12]
    8c7e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    8c82:	4639      	mov	r1, r7
    8c84:	4630      	mov	r0, r6
    8c86:	9500      	str	r5, [sp, #0]
      {
    8c88:	f8cd 9020 	str.w	r9, [sp, #32]
    8c8c:	f000 ff44 	bl	9b18 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)>
  class CmdResponse :
    8c90:	4628      	mov	r0, r5
    8c92:	f8cd 9020 	str.w	r9, [sp, #32]
    8c96:	f7f7 fc51 	bl	53c <Fw::Serializable::~Serializable()>
    8c9a:	e7ca      	b.n	8c32 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x8a>

      //! Constructor (user-provided value)
      DeserialStatus(
          const T e1 //!< The raw enum value
      )
      {
    8c9c:	4c66      	ldr	r4, [pc, #408]	; (8e38 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x290>)
    8c9e:	a806      	add	r0, sp, #24
    8ca0:	f7f7 fc46 	bl	530 <Fw::Serializable::Serializable()>

      //! Copy constructor
      DeserialStatus(
          const DeserialStatus& obj //!< The source object
      )
      {
    8ca4:	a808      	add	r0, sp, #32
        this->e = e1;
    8ca6:	f88d 501c 	strb.w	r5, [sp, #28]
      {
    8caa:	9406      	str	r4, [sp, #24]
      {
    8cac:	f7f7 fc40 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    8cb0:	f89d 301c 	ldrb.w	r3, [sp, #28]
            this->log_WARNING_HI_MalformedCommand(serErr);
    8cb4:	a908      	add	r1, sp, #32
    8cb6:	4630      	mov	r0, r6
      {
    8cb8:	9408      	str	r4, [sp, #32]
        this->e = obj.e;
    8cba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    8cbe:	f002 f8cb 	bl	ae58 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const>
  class DeserialStatus :
    8cc2:	a808      	add	r0, sp, #32
    8cc4:	9408      	str	r4, [sp, #32]
    8cc6:	f7f7 fc39 	bl	53c <Fw::Serializable::~Serializable()>
            if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
    8cca:	4639      	mov	r1, r7
    8ccc:	4630      	mov	r0, r6
    8cce:	f000 fcbd 	bl	964c <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)>
    8cd2:	2800      	cmp	r0, #0
    8cd4:	d142      	bne.n	8d5c <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x1b4>
    8cd6:	a806      	add	r0, sp, #24
    8cd8:	9406      	str	r4, [sp, #24]
    8cda:	f7f7 fc2f 	bl	53c <Fw::Serializable::~Serializable()>
    }
    8cde:	a80c      	add	r0, sp, #48	; 0x30
    8ce0:	f00c ffe2 	bl	15ca8 <Fw::CmdPacket::~CmdPacket()>
    8ce4:	b030      	add	sp, #192	; 0xc0
    8ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
    8cea:	4639      	mov	r1, r7
    8cec:	4630      	mov	r0, r6
    8cee:	f000 fcad 	bl	964c <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)>
    8cf2:	2800      	cmp	r0, #0
    8cf4:	d04b      	beq.n	8d8e <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x1e6>
    8cf6:	f241 2330 	movw	r3, #4656	; 0x1230
                for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
    8cfa:	2400      	movs	r4, #0
    8cfc:	4433      	add	r3, r6
                    if (not this->m_sequenceTracker[pending].used) {
    8cfe:	781a      	ldrb	r2, [r3, #0]
                for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
    8d00:	3314      	adds	r3, #20
                    if (not this->m_sequenceTracker[pending].used) {
    8d02:	2a00      	cmp	r2, #0
    8d04:	d076      	beq.n	8df4 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x24c>
                for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
    8d06:	3401      	adds	r4, #1
    8d08:	2c04      	cmp	r4, #4
    8d0a:	d1f8      	bne.n	8cfe <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x156>
                    this->log_WARNING_HI_TooManyCommands(cmdPkt.getOpCode());
    8d0c:	a80c      	add	r0, sp, #48	; 0x30
    8d0e:	f00c ffc7 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8d12:	4601      	mov	r1, r0
    8d14:	4630      	mov	r0, r6
    8d16:	f001 fd6b 	bl	a7f0 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const>
                    if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
    8d1a:	4639      	mov	r1, r7
    8d1c:	4630      	mov	r0, r6
    8d1e:	f000 fc95 	bl	964c <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)>
    8d22:	2800      	cmp	r0, #0
    8d24:	d0db      	beq.n	8cde <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x136>
      {
    8d26:	ad08      	add	r5, sp, #32
                        this->seqCmdStatus_out(portNum,cmdPkt.getOpCode(),context,Fw::CmdResponse::EXECUTION_ERROR);
    8d28:	a80c      	add	r0, sp, #48	; 0x30
    8d2a:	f00c ffb9 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8d2e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8e3c <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x294>
    8d32:	9003      	str	r0, [sp, #12]
    8d34:	4628      	mov	r0, r5
    8d36:	f7f7 fbfb 	bl	530 <Fw::Serializable::Serializable()>
    8d3a:	4630      	mov	r0, r6
    8d3c:	4643      	mov	r3, r8
    8d3e:	9a03      	ldr	r2, [sp, #12]
    8d40:	4639      	mov	r1, r7
    8d42:	9500      	str	r5, [sp, #0]
        this->e = e1;
    8d44:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      {
    8d48:	f8cd 9020 	str.w	r9, [sp, #32]
    8d4c:	f000 fee4 	bl	9b18 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)>
  class CmdResponse :
    8d50:	4628      	mov	r0, r5
    8d52:	f8cd 9020 	str.w	r9, [sp, #32]
    8d56:	f7f7 fbf1 	bl	53c <Fw::Serializable::~Serializable()>
    8d5a:	e7c0      	b.n	8cde <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x136>
                this->seqCmdStatus_out(portNum,cmdPkt.getOpCode(),context,Fw::CmdResponse::VALIDATION_ERROR);
    8d5c:	ad08      	add	r5, sp, #32
    8d5e:	a80c      	add	r0, sp, #48	; 0x30
    8d60:	f00c ff9e 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8d64:	9003      	str	r0, [sp, #12]
      {
    8d66:	a808      	add	r0, sp, #32
    8d68:	f7f7 fbe2 	bl	530 <Fw::Serializable::Serializable()>
    8d6c:	4630      	mov	r0, r6
    8d6e:	9500      	str	r5, [sp, #0]
        this->e = e1;
    8d70:	2602      	movs	r6, #2
      {
    8d72:	4d32      	ldr	r5, [pc, #200]	; (8e3c <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x294>)
    8d74:	4643      	mov	r3, r8
    8d76:	9a03      	ldr	r2, [sp, #12]
    8d78:	4639      	mov	r1, r7
    8d7a:	9508      	str	r5, [sp, #32]
        this->e = e1;
    8d7c:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    8d80:	f000 feca 	bl	9b18 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)>
  class CmdResponse :
    8d84:	a808      	add	r0, sp, #32
    8d86:	9508      	str	r5, [sp, #32]
    8d88:	f7f7 fbd8 	bl	53c <Fw::Serializable::~Serializable()>
    8d8c:	e7a3      	b.n	8cd6 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x12e>
    8d8e:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
            this->compCmdSend_out(
    8d92:	444d      	add	r5, r9
    8d94:	f241 07b8 	movw	r7, #4280	; 0x10b8
    8d98:	a80c      	add	r0, sp, #48	; 0x30
    8d9a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    8d9e:	59e9      	ldr	r1, [r5, r7]
    8da0:	9105      	str	r1, [sp, #20]
    8da2:	f00c ff7d 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8da6:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    8daa:	9004      	str	r0, [sp, #16]
    8dac:	a80c      	add	r0, sp, #48	; 0x30
    8dae:	9303      	str	r3, [sp, #12]
    8db0:	f00c ff78 	bl	15ca4 <Fw::CmdPacket::getArgBuffer()>
    8db4:	9905      	ldr	r1, [sp, #20]
    8db6:	9000      	str	r0, [sp, #0]
    8db8:	4630      	mov	r0, r6
    8dba:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    8dbe:	f000 fe75 	bl	9aac <Svc::CommandDispatcherComponentBase::compCmdSend_out(long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>
            this->log_COMMAND_OpCodeDispatched(cmdPkt.getOpCode(),this->m_entryTable[entry].port);
    8dc2:	a80c      	add	r0, sp, #48	; 0x30
    8dc4:	f00c ff6c 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8dc8:	59ea      	ldr	r2, [r5, r7]
    8dca:	4601      	mov	r1, r0
    8dcc:	4630      	mov	r0, r6
    8dce:	f001 fa6b 	bl	a2a8 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const>
            this->m_numCmdsDispatched++;
    8dd2:	f8d4 5284 	ldr.w	r5, [r4, #644]	; 0x284
            this->tlmWrite_CommandsDispatched(this->m_numCmdsDispatched);
    8dd6:	a808      	add	r0, sp, #32
            this->m_numCmdsDispatched++;
    8dd8:	3501      	adds	r5, #1
    8dda:	f8c4 5284 	str.w	r5, [r4, #644]	; 0x284
            this->tlmWrite_CommandsDispatched(this->m_numCmdsDispatched);
    8dde:	f00e fd67 	bl	178b0 <Fw::Time::Time()>
    8de2:	4630      	mov	r0, r6
    8de4:	aa08      	add	r2, sp, #32
    8de6:	4629      	mov	r1, r5
    8de8:	f002 f8e4 	bl	afb4 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)>
    8dec:	a808      	add	r0, sp, #32
    8dee:	f00e fd07 	bl	17800 <Fw::Time::~Time()>
    8df2:	e72c      	b.n	8c4e <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0xa6>
                        this->m_sequenceTracker[pending].used = true;
    8df4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8df8:	f241 2330 	movw	r3, #4656	; 0x1230
    8dfc:	2201      	movs	r2, #1
                        this->m_sequenceTracker[pending].opCode = cmdPkt.getOpCode();
    8dfe:	a80c      	add	r0, sp, #48	; 0x30
                        this->m_sequenceTracker[pending].used = true;
    8e00:	eb06 0a84 	add.w	sl, r6, r4, lsl #2
                        this->m_sequenceTracker[pending].seq = this->m_seq;
    8e04:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
                        this->m_sequenceTracker[pending].used = true;
    8e08:	f80a 2003 	strb.w	r2, [sl, r3]
                        this->m_sequenceTracker[pending].opCode = cmdPkt.getOpCode();
    8e0c:	f00c ff48 	bl	15ca0 <Fw::CmdPacket::getOpCode() const>
    8e10:	f241 2338 	movw	r3, #4664	; 0x1238
                        this->m_sequenceTracker[pending].seq = this->m_seq;
    8e14:	f241 2234 	movw	r2, #4660	; 0x1234
                        this->m_sequenceTracker[pending].context = context;
    8e18:	f241 213c 	movw	r1, #4668	; 0x123c
                        this->m_sequenceTracker[pending].opCode = cmdPkt.getOpCode();
    8e1c:	f84a 0003 	str.w	r0, [sl, r3]
                        this->m_sequenceTracker[pending].seq = this->m_seq;
    8e20:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
                        this->m_sequenceTracker[pending].context = context;
    8e24:	f84a 8001 	str.w	r8, [sl, r1]
                        this->m_sequenceTracker[pending].seq = this->m_seq;
    8e28:	f84a 3002 	str.w	r3, [sl, r2]
                        this->m_sequenceTracker[pending].callerPort = portNum;
    8e2c:	f50a 5a92 	add.w	sl, sl, #4672	; 0x1240
    8e30:	f8ca 7000 	str.w	r7, [sl]
                if (not pendingFound) {
    8e34:	e7ad      	b.n	8d92 <Svc::CommandDispatcherImpl::seqCmdBuff_handler(long, Fw::ComBuffer&, unsigned long)+0x1ea>
    8e36:	bf00      	nop
    8e38:	20002f88 	.word	0x20002f88
    8e3c:	20002bec 	.word	0x20002bec

00008e40 <Fw::CmdStringArg::toChar() const>:
    CmdStringArg& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
    8e40:	3004      	adds	r0, #4
    8e42:	4770      	bx	lr

00008e44 <Fw::CmdStringArg::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
    8e44:	2029      	movs	r0, #41	; 0x29
    8e46:	4770      	bx	lr

00008e48 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::getBuffCapacity() const>:
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }
    8e48:	208e      	movs	r0, #142	; 0x8e
    8e4a:	4770      	bx	lr

00008e4c <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
    8e4c:	300c      	adds	r0, #12
    8e4e:	4770      	bx	lr

00008e50 <Svc::CommandDispatcherComponentBase::compCmdStat_preMsgHook(long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    // Default: no-op
  }
    8e50:	4770      	bx	lr
    8e52:	bf00      	nop

00008e54 <Svc::CommandDispatcherComponentBase::pingIn_preMsgHook(long, unsigned long)>:
        FwIndexType portNum,
        U32 key
    )
  {
    // Default: no-op
  }
    8e54:	4770      	bx	lr
    8e56:	bf00      	nop

00008e58 <Svc::CommandDispatcherComponentBase::seqCmdBuff_preMsgHook(long, Fw::ComBuffer&, unsigned long)>:
        Fw::ComBuffer& data,
        U32 context
    )
  {
    // Default: no-op
  }
    8e58:	4770      	bx	lr
    8e5a:	bf00      	nop

00008e5c <Svc::CommandDispatcherComponentBase::CMD_NO_OP_preMsgHook(unsigned long, unsigned long)>:
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }
    8e5c:	4770      	bx	lr
    8e5e:	bf00      	nop

00008e60 <Fw::CmdStringArg::~CmdStringArg()>:
    ~CmdStringArg() {}
    8e60:	4b03      	ldr	r3, [pc, #12]	; (8e70 <Fw::CmdStringArg::~CmdStringArg()+0x10>)
    8e62:	b510      	push	{r4, lr}
    8e64:	4604      	mov	r4, r0
    8e66:	6003      	str	r3, [r0, #0]
    8e68:	f7f8 f9e4 	bl	1234 <Fw::StringBase::~StringBase()>
    8e6c:	4620      	mov	r0, r4
    8e6e:	bd10      	pop	{r4, pc}
    8e70:	20002c5c 	.word	0x20002c5c

00008e74 <Fw::CmdStringArg::~CmdStringArg()>:
    8e74:	4b05      	ldr	r3, [pc, #20]	; (8e8c <Fw::CmdStringArg::~CmdStringArg()+0x18>)
    8e76:	b510      	push	{r4, lr}
    8e78:	4604      	mov	r4, r0
    8e7a:	6003      	str	r3, [r0, #0]
    8e7c:	f7f8 f9da 	bl	1234 <Fw::StringBase::~StringBase()>
    8e80:	2130      	movs	r1, #48	; 0x30
    8e82:	4620      	mov	r0, r4
    8e84:	f00f ff24 	bl	18cd0 <operator delete(void*, unsigned int)>
    8e88:	4620      	mov	r0, r4
    8e8a:	bd10      	pop	{r4, pc}
    8e8c:	20002c5c 	.word	0x20002c5c

00008e90 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()>:
    class ComponentIpcSerializableBuffer :
    8e90:	4b03      	ldr	r3, [pc, #12]	; (8ea0 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()+0x10>)
    8e92:	b510      	push	{r4, lr}
    8e94:	4604      	mov	r4, r0
    8e96:	6003      	str	r3, [r0, #0]
    8e98:	f7f7 fb5a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    8e9c:	4620      	mov	r0, r4
    8e9e:	bd10      	pop	{r4, pc}
    8ea0:	20003988 	.word	0x20003988

00008ea4 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()>:
    8ea4:	4b05      	ldr	r3, [pc, #20]	; (8ebc <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()+0x18>)
    8ea6:	b510      	push	{r4, lr}
    8ea8:	4604      	mov	r4, r0
    8eaa:	6003      	str	r3, [r0, #0]
    8eac:	f7f7 fb50 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    8eb0:	219c      	movs	r1, #156	; 0x9c
    8eb2:	4620      	mov	r0, r4
    8eb4:	f00f ff0c 	bl	18cd0 <operator delete(void*, unsigned int)>
    8eb8:	4620      	mov	r0, r4
    8eba:	bd10      	pop	{r4, pc}
    8ebc:	20003988 	.word	0x20003988

00008ec0 <Svc::CommandDispatcherComponentBase::lock()>:
  // synchronization
  // ----------------------------------------------------------------------

  void CommandDispatcherComponentBase ::
    lock()
  {
    8ec0:	4603      	mov	r3, r0
    this->m_guardedPortMutex.lock();
    8ec2:	f241 0058 	movw	r0, #4184	; 0x1058
    8ec6:	4418      	add	r0, r3
    8ec8:	f00a bcd6 	b.w	13878 <Os::Mutex::lock()>

00008ecc <Svc::CommandDispatcherComponentBase::unLock()>:
  }

  void CommandDispatcherComponentBase ::
    unLock()
  {
    8ecc:	4603      	mov	r3, r0
    this->m_guardedPortMutex.unLock();
    8ece:	f241 0058 	movw	r0, #4184	; 0x1058
    8ed2:	4418      	add	r0, r3
    8ed4:	f00a bd24 	b.w	13920 <Os::Mutex::unLock()>

00008ed8 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)>:
  {
    8ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8edc:	4680      	mov	r8, r0
    8ede:	460b      	mov	r3, r1
    Fw::ActiveComponentBase::init(instance);
    8ee0:	4611      	mov	r1, r2
    ObjectName() : StringBase() { *this = ""; }
    8ee2:	4dd8      	ldr	r5, [pc, #864]	; (9244 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x36c>)
      this->m_CmdDisp_InputPort[port].init();
    8ee4:	f508 7425 	add.w	r4, r8, #660	; 0x294
    const char* toChar() const { return this->m_buf; }
    8ee8:	f108 0708 	add.w	r7, r8, #8
      FwIndexType port = 0;
    8eec:	2600      	movs	r6, #0
      this->m_compCmdReg_InputPort[port].addCallComp(
    8eee:	f8df b398 	ldr.w	fp, [pc, #920]	; 9288 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3b0>
        (void)StringBase::operator=(src);
    8ef2:	f8df a358 	ldr.w	sl, [pc, #856]	; 924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>
      portName.format(
    8ef6:	f8df 9394 	ldr.w	r9, [pc, #916]	; 928c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3b4>
  {
    8efa:	ed2d 8b02 	vpush	{d8}
    8efe:	b097      	sub	sp, #92	; 0x5c
    8f00:	ee08 3a10 	vmov	s16, r3
    Fw::ActiveComponentBase::init(instance);
    8f04:	f008 fa8a 	bl	1141c <Fw::ActiveComponentBase::init(long)>
      this->m_CmdDisp_InputPort[port].init();
    8f08:	4620      	mov	r0, r4
    8f0a:	f00c ffff 	bl	15f0c <Fw::InputCmdPort::init()>
      this->m_CmdDisp_InputPort[port].addCallComp(
    8f0e:	4ace      	ldr	r2, [pc, #824]	; (9248 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x370>)
    8f10:	4620      	mov	r0, r4
    8f12:	4641      	mov	r1, r8
    8f14:	f00c ff40 	bl	15d98 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))>
      this->m_CmdDisp_InputPort[port].setPortNum(port);
    8f18:	2100      	movs	r1, #0
    8f1a:	4620      	mov	r0, r4
    8f1c:	f00e feda 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    8f20:	4668      	mov	r0, sp
    8f22:	f7f8 f97d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    8f26:	49c9      	ldr	r1, [pc, #804]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    8f28:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    8f2a:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    8f2c:	f7f8 f9e0 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    8f30:	2300      	movs	r3, #0
    8f32:	463a      	mov	r2, r7
    8f34:	49c6      	ldr	r1, [pc, #792]	; (9250 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x378>)
    8f36:	4668      	mov	r0, sp
    8f38:	f7f8 f9a8 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
    8f3c:	4620      	mov	r0, r4
    8f3e:	a901      	add	r1, sp, #4
    8f40:	f508 7441 	add.w	r4, r8, #772	; 0x304
    8f44:	f00f f82c 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    8f48:	4668      	mov	r0, sp
    8f4a:	9500      	str	r5, [sp, #0]
    8f4c:	f7f8 f972 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_compCmdReg_InputPort[port].init();
    8f50:	6823      	ldr	r3, [r4, #0]
    8f52:	4620      	mov	r0, r4
    8f54:	68db      	ldr	r3, [r3, #12]
    8f56:	4798      	blx	r3
      this->m_compCmdReg_InputPort[port].addCallComp(
    8f58:	465a      	mov	r2, fp
    8f5a:	4620      	mov	r0, r4
    8f5c:	4641      	mov	r1, r8
    8f5e:	f00d f897 	bl	16090 <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_compCmdReg_InputPort[port].setPortNum(port);
    8f62:	4631      	mov	r1, r6
    8f64:	4620      	mov	r0, r4
    8f66:	f00e feb5 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    8f6a:	4668      	mov	r0, sp
    8f6c:	f7f8 f958 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    8f70:	4651      	mov	r1, sl
    8f72:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    8f74:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    8f76:	f7f8 f9bb 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    8f7a:	4633      	mov	r3, r6
    8f7c:	463a      	mov	r2, r7
    8f7e:	4649      	mov	r1, r9
    8f80:	4668      	mov	r0, sp
    for (
    8f82:	3601      	adds	r6, #1
      portName.format(
    8f84:	f7f8 f982 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_compCmdReg_InputPort[port].setObjName(portName.toChar());
    8f88:	4620      	mov	r0, r4
    8f8a:	a901      	add	r1, sp, #4
      port < static_cast<FwIndexType>(this->getNum_compCmdReg_InputPorts());
    8f8c:	3470      	adds	r4, #112	; 0x70
      this->m_compCmdReg_InputPort[port].setObjName(portName.toChar());
    8f8e:	f00f f807 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    8f92:	4668      	mov	r0, sp
    8f94:	9500      	str	r5, [sp, #0]
    8f96:	f7f8 f94d 	bl	1234 <Fw::StringBase::~StringBase()>
      port < static_cast<FwIndexType>(this->getNum_compCmdReg_InputPorts());
    8f9a:	2e0a      	cmp	r6, #10
    8f9c:	d1d8      	bne.n	8f50 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x78>
      this->m_compCmdStat_InputPort[port].init();
    8f9e:	f208 7a64 	addw	sl, r8, #1892	; 0x764
      this->m_pingIn_InputPort[port].init();
    8fa2:	f208 76d4 	addw	r6, r8, #2004	; 0x7d4
      this->m_seqCmdBuff_InputPort[port].init();
    8fa6:	f608 0444 	addw	r4, r8, #2116	; 0x844
      this->m_CmdReg_OutputPort[port].init();
    8faa:	f608 09b4 	addw	r9, r8, #2228	; 0x8b4
      this->m_compCmdStat_InputPort[port].init();
    8fae:	4650      	mov	r0, sl
    8fb0:	f00d faf2 	bl	16598 <Fw::InputCmdResponsePort::init()>
      this->m_compCmdStat_InputPort[port].addCallComp(
    8fb4:	4aa7      	ldr	r2, [pc, #668]	; (9254 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x37c>)
    8fb6:	4650      	mov	r0, sl
    8fb8:	4641      	mov	r1, r8
    8fba:	f00d fa33 	bl	16424 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))>
      this->m_compCmdStat_InputPort[port].setPortNum(port);
    8fbe:	2100      	movs	r1, #0
    8fc0:	4650      	mov	r0, sl
    8fc2:	f00e fe87 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    8fc6:	4668      	mov	r0, sp
    8fc8:	f7f8 f92a 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    8fcc:	499f      	ldr	r1, [pc, #636]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    8fce:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    8fd0:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    8fd2:	f7f8 f98d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    8fd6:	2300      	movs	r3, #0
    8fd8:	463a      	mov	r2, r7
    8fda:	499f      	ldr	r1, [pc, #636]	; (9258 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x380>)
    8fdc:	4668      	mov	r0, sp
    8fde:	f7f8 f955 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_compCmdStat_InputPort[port].setObjName(portName.toChar());
    8fe2:	a901      	add	r1, sp, #4
    8fe4:	4650      	mov	r0, sl
    8fe6:	f8df a264 	ldr.w	sl, [pc, #612]	; 924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>
    8fea:	f00e ffd9 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    8fee:	4668      	mov	r0, sp
    8ff0:	9500      	str	r5, [sp, #0]
    8ff2:	f7f8 f91f 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_pingIn_InputPort[port].init();
    8ff6:	4630      	mov	r0, r6
    8ff8:	f008 f96e 	bl	112d8 <Svc::InputPingPort::init()>
      this->m_pingIn_InputPort[port].addCallComp(
    8ffc:	4a97      	ldr	r2, [pc, #604]	; (925c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x384>)
    8ffe:	4630      	mov	r0, r6
    9000:	4641      	mov	r1, r8
    9002:	f008 f8dd 	bl	111c0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_pingIn_InputPort[port].setPortNum(port);
    9006:	2100      	movs	r1, #0
    9008:	4630      	mov	r0, r6
    900a:	f00e fe63 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    900e:	4668      	mov	r0, sp
    9010:	f7f8 f906 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    9014:	498d      	ldr	r1, [pc, #564]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    9016:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    9018:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    901a:	f7f8 f969 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    901e:	2300      	movs	r3, #0
    9020:	463a      	mov	r2, r7
    9022:	498f      	ldr	r1, [pc, #572]	; (9260 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x388>)
    9024:	4668      	mov	r0, sp
    9026:	f7f8 f931 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
    902a:	a901      	add	r1, sp, #4
    902c:	4630      	mov	r0, r6
      this->m_CmdStatus_OutputPort[port].init();
    902e:	f508 6612 	add.w	r6, r8, #2336	; 0x920
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
    9032:	f00e ffb5 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    9036:	4668      	mov	r0, sp
    9038:	9500      	str	r5, [sp, #0]
    903a:	f7f8 f8fb 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_seqCmdBuff_InputPort[port].init();
    903e:	4620      	mov	r0, r4
    9040:	f00e fba2 	bl	17788 <Fw::InputComPort::init()>
      this->m_seqCmdBuff_InputPort[port].addCallComp(
    9044:	4a87      	ldr	r2, [pc, #540]	; (9264 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x38c>)
    9046:	4620      	mov	r0, r4
    9048:	4641      	mov	r1, r8
    904a:	f00e faf5 	bl	17638 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))>
      this->m_seqCmdBuff_InputPort[port].setPortNum(port);
    904e:	2100      	movs	r1, #0
    9050:	4620      	mov	r0, r4
    9052:	f00e fe3f 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    9056:	4668      	mov	r0, sp
    9058:	f7f8 f8e2 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    905c:	497b      	ldr	r1, [pc, #492]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    905e:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    9060:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    9062:	f7f8 f945 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    9066:	2300      	movs	r3, #0
    9068:	463a      	mov	r2, r7
    906a:	497f      	ldr	r1, [pc, #508]	; (9268 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x390>)
    906c:	4668      	mov	r0, sp
    906e:	f7f8 f90d 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_seqCmdBuff_InputPort[port].setObjName(portName.toChar());
    9072:	a901      	add	r1, sp, #4
    9074:	4620      	mov	r0, r4
      this->m_Log_OutputPort[port].init();
    9076:	f608 148c 	addw	r4, r8, #2444	; 0x98c
      this->m_seqCmdBuff_InputPort[port].setObjName(portName.toChar());
    907a:	f00e ff91 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    907e:	4668      	mov	r0, sp
    9080:	9500      	str	r5, [sp, #0]
    9082:	f7f8 f8d7 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CmdReg_OutputPort[port].init();
    9086:	4648      	mov	r0, r9
    9088:	f00d f8a0 	bl	161cc <Fw::OutputCmdRegPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    908c:	4668      	mov	r0, sp
    908e:	f7f8 f8c7 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    9092:	496e      	ldr	r1, [pc, #440]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    9094:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    9096:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    9098:	f7f8 f92a 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    909c:	2300      	movs	r3, #0
    909e:	463a      	mov	r2, r7
    90a0:	4972      	ldr	r1, [pc, #456]	; (926c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x394>)
    90a2:	4668      	mov	r0, sp
    90a4:	f7f8 f8f2 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
    90a8:	a901      	add	r1, sp, #4
    90aa:	4648      	mov	r0, r9
      portName.format(
    90ac:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 9290 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3b8>
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
    90b0:	f00e ff76 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    90b4:	4668      	mov	r0, sp
    90b6:	9500      	str	r5, [sp, #0]
    90b8:	f7f8 f8bc 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CmdStatus_OutputPort[port].init();
    90bc:	4630      	mov	r0, r6
    90be:	f00d fa6d 	bl	1659c <Fw::OutputCmdResponsePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    90c2:	4668      	mov	r0, sp
    90c4:	f7f8 f8ac 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    90c8:	4960      	ldr	r1, [pc, #384]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    90ca:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    90cc:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    90ce:	f7f8 f90f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    90d2:	2300      	movs	r3, #0
    90d4:	463a      	mov	r2, r7
    90d6:	4966      	ldr	r1, [pc, #408]	; (9270 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x398>)
    90d8:	4668      	mov	r0, sp
    90da:	f7f8 f8d7 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
    90de:	a901      	add	r1, sp, #4
    90e0:	4630      	mov	r0, r6
      this->m_LogText_OutputPort[port].init();
    90e2:	f608 16f8 	addw	r6, r8, #2552	; 0x9f8
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
    90e6:	f00e ff5b 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    90ea:	4668      	mov	r0, sp
    90ec:	9500      	str	r5, [sp, #0]
    90ee:	f7f8 f8a1 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Log_OutputPort[port].init();
    90f2:	4620      	mov	r0, r4
    90f4:	f00d fcc4 	bl	16a80 <Fw::OutputLogPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    90f8:	4668      	mov	r0, sp
    90fa:	f7f8 f891 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    90fe:	4953      	ldr	r1, [pc, #332]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    9100:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    9102:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    9104:	f7f8 f8f4 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    9108:	2300      	movs	r3, #0
    910a:	463a      	mov	r2, r7
    910c:	4959      	ldr	r1, [pc, #356]	; (9274 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x39c>)
    910e:	4668      	mov	r0, sp
    9110:	f7f8 f8bc 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
    9114:	a901      	add	r1, sp, #4
    9116:	4620      	mov	r0, r4
      this->m_Time_OutputPort[port].init();
    9118:	f608 2464 	addw	r4, r8, #2660	; 0xa64
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
    911c:	f00e ff40 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    9120:	4668      	mov	r0, sp
    9122:	9500      	str	r5, [sp, #0]
    9124:	f7f8 f886 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_LogText_OutputPort[port].init();
    9128:	4630      	mov	r0, r6
    912a:	f00d fed1 	bl	16ed0 <Fw::OutputLogTextPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    912e:	4668      	mov	r0, sp
    9130:	f7f8 f876 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    9134:	4945      	ldr	r1, [pc, #276]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    9136:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    9138:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    913a:	f7f8 f8d9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    913e:	2300      	movs	r3, #0
    9140:	463a      	mov	r2, r7
    9142:	494d      	ldr	r1, [pc, #308]	; (9278 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3a0>)
    9144:	4668      	mov	r0, sp
    9146:	f7f8 f8a1 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
    914a:	a901      	add	r1, sp, #4
    914c:	4630      	mov	r0, r6
      this->m_Tlm_OutputPort[port].init();
    914e:	f508 662d 	add.w	r6, r8, #2768	; 0xad0
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
    9152:	f00e ff25 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    9156:	4668      	mov	r0, sp
    9158:	9500      	str	r5, [sp, #0]
    915a:	f7f8 f86b 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Time_OutputPort[port].init();
    915e:	4620      	mov	r0, r4
    9160:	f00e fd98 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    9164:	4668      	mov	r0, sp
    9166:	f7f8 f85b 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    916a:	4938      	ldr	r1, [pc, #224]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    916c:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    916e:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    9170:	f7f8 f8be 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    9174:	2300      	movs	r3, #0
    9176:	463a      	mov	r2, r7
    9178:	4940      	ldr	r1, [pc, #256]	; (927c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3a4>)
    917a:	4668      	mov	r0, sp
    917c:	f7f8 f886 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
    9180:	a901      	add	r1, sp, #4
    9182:	4620      	mov	r0, r4
    9184:	f608 343c 	addw	r4, r8, #2876	; 0xb3c
    9188:	f00e ff0a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    918c:	4668      	mov	r0, sp
    918e:	9500      	str	r5, [sp, #0]
    9190:	f7f8 f850 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Tlm_OutputPort[port].init();
    9194:	4630      	mov	r0, r6
    9196:	f00e f9a5 	bl	174e4 <Fw::OutputTlmPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    919a:	4668      	mov	r0, sp
    919c:	f7f8 f840 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    91a0:	492a      	ldr	r1, [pc, #168]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    91a2:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    91a4:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    91a6:	f7f8 f8a3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    91aa:	2300      	movs	r3, #0
    91ac:	463a      	mov	r2, r7
    91ae:	4934      	ldr	r1, [pc, #208]	; (9280 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3a8>)
    91b0:	4668      	mov	r0, sp
    91b2:	f7f8 f86b 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
    91b6:	4630      	mov	r0, r6
    91b8:	a901      	add	r1, sp, #4
      FwIndexType port = 0;
    91ba:	2600      	movs	r6, #0
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
    91bc:	f00e fef0 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    91c0:	4668      	mov	r0, sp
    91c2:	9500      	str	r5, [sp, #0]
    91c4:	f7f8 f836 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_compCmdSend_OutputPort[port].init();
    91c8:	6823      	ldr	r3, [r4, #0]
    91ca:	4620      	mov	r0, r4
    91cc:	68db      	ldr	r3, [r3, #12]
    91ce:	4798      	blx	r3
    ObjectName() : StringBase() { *this = ""; }
    91d0:	4668      	mov	r0, sp
    91d2:	f7f8 f825 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    91d6:	4651      	mov	r1, sl
    91d8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    91da:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    91dc:	f7f8 f888 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    91e0:	4633      	mov	r3, r6
    91e2:	463a      	mov	r2, r7
    91e4:	4649      	mov	r1, r9
    91e6:	4668      	mov	r0, sp
    for (
    91e8:	3601      	adds	r6, #1
      portName.format(
    91ea:	f7f8 f84f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_compCmdSend_OutputPort[port].setObjName(portName.toChar());
    91ee:	4620      	mov	r0, r4
    91f0:	a901      	add	r1, sp, #4
      port < static_cast<FwIndexType>(this->getNum_compCmdSend_OutputPorts());
    91f2:	346c      	adds	r4, #108	; 0x6c
      this->m_compCmdSend_OutputPort[port].setObjName(portName.toChar());
    91f4:	f00e fed4 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    91f8:	4668      	mov	r0, sp
    91fa:	9500      	str	r5, [sp, #0]
    91fc:	f7f8 f81a 	bl	1234 <Fw::StringBase::~StringBase()>
      port < static_cast<FwIndexType>(this->getNum_compCmdSend_OutputPorts());
    9200:	2e0a      	cmp	r6, #10
    9202:	d1e1      	bne.n	91c8 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x2f0>
      this->m_pingOut_OutputPort[port].init();
    9204:	f608 7674 	addw	r6, r8, #3956	; 0xf74
      this->m_seqCmdStatus_OutputPort[port].init();
    9208:	f508 647e 	add.w	r4, r8, #4064	; 0xfe0
      this->m_pingOut_OutputPort[port].init();
    920c:	4630      	mov	r0, r6
    920e:	f008 f865 	bl	112dc <Svc::OutputPingPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    9212:	4668      	mov	r0, sp
    9214:	f7f8 f804 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    9218:	490c      	ldr	r1, [pc, #48]	; (924c <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x374>)
    921a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    921c:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    921e:	f7f8 f867 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    9222:	2300      	movs	r3, #0
    9224:	463a      	mov	r2, r7
    9226:	4917      	ldr	r1, [pc, #92]	; (9284 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3ac>)
    9228:	4668      	mov	r0, sp
    922a:	f7f8 f82f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_pingOut_OutputPort[port].setObjName(portName.toChar());
    922e:	a901      	add	r1, sp, #4
    9230:	4630      	mov	r0, r6
    9232:	f00e feb5 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    9236:	4668      	mov	r0, sp
    9238:	9500      	str	r5, [sp, #0]
    923a:	f7f7 fffb 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_seqCmdStatus_OutputPort[port].init();
    923e:	4620      	mov	r0, r4
    9240:	e028      	b.n	9294 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x3bc>
    9242:	bf00      	nop
    9244:	20002b80 	.word	0x20002b80
    9248:	00009fc5 	.word	0x00009fc5
    924c:	20001d2c 	.word	0x20001d2c
    9250:	20001670 	.word	0x20001670
    9254:	00009845 	.word	0x00009845
    9258:	20001ab8 	.word	0x20001ab8
    925c:	00009941 	.word	0x00009941
    9260:	200016a8 	.word	0x200016a8
    9264:	00009a71 	.word	0x00009a71
    9268:	20001ad8 	.word	0x20001ad8
    926c:	200016c4 	.word	0x200016c4
    9270:	200016e0 	.word	0x200016e0
    9274:	20001700 	.word	0x20001700
    9278:	20001718 	.word	0x20001718
    927c:	20001734 	.word	0x20001734
    9280:	20001af8 	.word	0x20001af8
    9284:	2000178c 	.word	0x2000178c
    9288:	000096e9 	.word	0x000096e9
    928c:	20001a98 	.word	0x20001a98
    9290:	20001b10 	.word	0x20001b10
    9294:	f00d f982 	bl	1659c <Fw::OutputCmdResponsePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    9298:	4668      	mov	r0, sp
    929a:	f7f7 ffc1 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    929e:	4915      	ldr	r1, [pc, #84]	; (92f4 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x41c>)
    92a0:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    92a2:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    92a4:	f7f8 f824 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    92a8:	463a      	mov	r2, r7
    92aa:	2300      	movs	r3, #0
    92ac:	4912      	ldr	r1, [pc, #72]	; (92f8 <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x420>)
    92ae:	4668      	mov	r0, sp
    92b0:	f7f7 ffec 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_seqCmdStatus_OutputPort[port].setObjName(portName.toChar());
    92b4:	a901      	add	r1, sp, #4
    92b6:	4620      	mov	r0, r4
    92b8:	f00e fe72 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    92bc:	4668      	mov	r0, sp
    92be:	9500      	str	r5, [sp, #0]
    92c0:	f7f7 ffb8 	bl	1234 <Fw::StringBase::~StringBase()>
    Os::Queue::Status qStat = this->createQueue(
    92c4:	228e      	movs	r2, #142	; 0x8e
    92c6:	ee18 1a10 	vmov	r1, s16
    92ca:	4640      	mov	r0, r8
    92cc:	f008 f850 	bl	11370 <Fw::QueuedComponentBase::createQueue(unsigned long, unsigned long)>
    FW_ASSERT(
    92d0:	b920      	cbnz	r0, 92dc <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x404>
  }
    92d2:	b017      	add	sp, #92	; 0x5c
    92d4:	ecbd 8b02 	vpop	{d8}
    92d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FW_ASSERT(
    92dc:	4601      	mov	r1, r0
    92de:	f44f 72c0 	mov.w	r2, #384	; 0x180
    92e2:	4806      	ldr	r0, [pc, #24]	; (92fc <Svc::CommandDispatcherComponentBase::init(unsigned long, long)+0x424>)
  }
    92e4:	b017      	add	sp, #92	; 0x5c
    92e6:	ecbd 8b02 	vpop	{d8}
    92ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FW_ASSERT(
    92ee:	f7f8 b99b 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    92f2:	bf00      	nop
    92f4:	20001d2c 	.word	0x20001d2c
    92f8:	20001b30 	.word	0x20001b30
    92fc:	20001b50 	.word	0x20001b50

00009300 <Svc::CommandDispatcherComponentBase::get_CmdDisp_InputPort(long)>:
  {
    9300:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    9302:	1e0c      	subs	r4, r1, #0
  {
    9304:	4605      	mov	r5, r0
    FW_ASSERT(
    9306:	dd04      	ble.n	9312 <Svc::CommandDispatcherComponentBase::get_CmdDisp_InputPort(long)+0x12>
    9308:	f240 128d 	movw	r2, #397	; 0x18d
    930c:	4804      	ldr	r0, [pc, #16]	; (9320 <Svc::CommandDispatcherComponentBase::get_CmdDisp_InputPort(long)+0x20>)
    930e:	f7f8 f98b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_CmdDisp_InputPort[portNum];
    9312:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9316:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    931a:	f500 7025 	add.w	r0, r0, #660	; 0x294
    931e:	bd38      	pop	{r3, r4, r5, pc}
    9320:	20001b50 	.word	0x20001b50

00009324 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)>:
    FW_ASSERT(
    9324:	2909      	cmp	r1, #9
  {
    9326:	b538      	push	{r3, r4, r5, lr}
    9328:	460c      	mov	r4, r1
    932a:	4605      	mov	r5, r0
    FW_ASSERT(
    932c:	dc06      	bgt.n	933c <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)+0x18>
    return &this->m_compCmdReg_InputPort[portNum];
    932e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9332:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    9336:	f500 7041 	add.w	r0, r0, #772	; 0x304
    933a:	bd38      	pop	{r3, r4, r5, pc}
    return &this->m_compCmdReg_InputPort[portNum];
    933c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    FW_ASSERT(
    9340:	f44f 72ce 	mov.w	r2, #412	; 0x19c
    9344:	4803      	ldr	r0, [pc, #12]	; (9354 <Svc::CommandDispatcherComponentBase::get_compCmdReg_InputPort(long)+0x30>)
    9346:	f7f8 f96f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_compCmdReg_InputPort[portNum];
    934a:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    934e:	f500 7041 	add.w	r0, r0, #772	; 0x304
    9352:	bd38      	pop	{r3, r4, r5, pc}
    9354:	20001b50 	.word	0x20001b50

00009358 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)>:
  {
    9358:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    935a:	1e0c      	subs	r4, r1, #0
  {
    935c:	4605      	mov	r5, r0
    FW_ASSERT(
    935e:	dd04      	ble.n	936a <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)+0x12>
    9360:	f240 12a7 	movw	r2, #423	; 0x1a7
    9364:	4804      	ldr	r0, [pc, #16]	; (9378 <Svc::CommandDispatcherComponentBase::get_compCmdStat_InputPort(long)+0x20>)
    9366:	f7f8 f95f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_compCmdStat_InputPort[portNum];
    936a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    936e:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    9372:	f200 7064 	addw	r0, r0, #1892	; 0x764
    9376:	bd38      	pop	{r3, r4, r5, pc}
    9378:	20001b50 	.word	0x20001b50

0000937c <Svc::CommandDispatcherComponentBase::get_seqCmdBuff_InputPort(long)>:
  {
    937c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    937e:	1e0c      	subs	r4, r1, #0
  {
    9380:	4605      	mov	r5, r0
    FW_ASSERT(
    9382:	dd04      	ble.n	938e <Svc::CommandDispatcherComponentBase::get_seqCmdBuff_InputPort(long)+0x12>
    9384:	f240 12bd 	movw	r2, #445	; 0x1bd
    9388:	4804      	ldr	r0, [pc, #16]	; (939c <Svc::CommandDispatcherComponentBase::get_seqCmdBuff_InputPort(long)+0x20>)
    938a:	f7f8 f94d 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_seqCmdBuff_InputPort[portNum];
    938e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9392:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    9396:	f600 0044 	addw	r0, r0, #2116	; 0x844
    939a:	bd38      	pop	{r3, r4, r5, pc}
    939c:	20001b50 	.word	0x20001b50

000093a0 <Svc::CommandDispatcherComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)>:
  {
    93a0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    93a2:	1e0d      	subs	r5, r1, #0
  {
    93a4:	4604      	mov	r4, r0
    93a6:	4616      	mov	r6, r2
    FW_ASSERT(
    93a8:	dd04      	ble.n	93b4 <Svc::CommandDispatcherComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)+0x14>
    93aa:	f240 12cf 	movw	r2, #463	; 0x1cf
    93ae:	4806      	ldr	r0, [pc, #24]	; (93c8 <Svc::CommandDispatcherComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)+0x28>)
    93b0:	f7f8 f93a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    93b4:	236c      	movs	r3, #108	; 0x6c
    93b6:	4631      	mov	r1, r6
    93b8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    93bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    93c0:	f600 00b4 	addw	r0, r0, #2228	; 0x8b4
    93c4:	f00c beb2 	b.w	1612c <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)>
    93c8:	20001b50 	.word	0x20001b50

000093cc <Svc::CommandDispatcherComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>:
  {
    93cc:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    93ce:	1e0d      	subs	r5, r1, #0
  {
    93d0:	4604      	mov	r4, r0
    93d2:	4616      	mov	r6, r2
    FW_ASSERT(
    93d4:	dd04      	ble.n	93e0 <Svc::CommandDispatcherComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x14>
    93d6:	f240 12dd 	movw	r2, #477	; 0x1dd
    93da:	4806      	ldr	r0, [pc, #24]	; (93f4 <Svc::CommandDispatcherComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x28>)
    93dc:	f7f8 f924 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
    93e0:	236c      	movs	r3, #108	; 0x6c
    93e2:	4631      	mov	r1, r6
    93e4:	fb03 4005 	mla	r0, r3, r5, r4
  }
    93e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
    93ec:	f500 6012 	add.w	r0, r0, #2336	; 0x920
    93f0:	f00d b864 	b.w	164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>
    93f4:	20001b50 	.word	0x20001b50

000093f8 <Svc::CommandDispatcherComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)>:
  {
    93f8:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    93fa:	1e0d      	subs	r5, r1, #0
  {
    93fc:	4604      	mov	r4, r0
    93fe:	4616      	mov	r6, r2
    FW_ASSERT(
    9400:	dd04      	ble.n	940c <Svc::CommandDispatcherComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)+0x14>
    9402:	f240 12eb 	movw	r2, #491	; 0x1eb
    9406:	4806      	ldr	r0, [pc, #24]	; (9420 <Svc::CommandDispatcherComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)+0x28>)
    9408:	f7f8 f90e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Log_OutputPort[portNum].addCallPort(port);
    940c:	236c      	movs	r3, #108	; 0x6c
    940e:	4631      	mov	r1, r6
    9410:	fb03 4005 	mla	r0, r3, r5, r4
  }
    9414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Log_OutputPort[portNum].addCallPort(port);
    9418:	f600 108c 	addw	r0, r0, #2444	; 0x98c
    941c:	f00d ba52 	b.w	168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>
    9420:	20001b50 	.word	0x20001b50

00009424 <Svc::CommandDispatcherComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)>:
  {
    9424:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    9426:	1e0d      	subs	r5, r1, #0
  {
    9428:	4604      	mov	r4, r0
    942a:	4616      	mov	r6, r2
    FW_ASSERT(
    942c:	dd04      	ble.n	9438 <Svc::CommandDispatcherComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)+0x14>
    942e:	f240 12fb 	movw	r2, #507	; 0x1fb
    9432:	4806      	ldr	r0, [pc, #24]	; (944c <Svc::CommandDispatcherComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)+0x28>)
    9434:	f7f8 f8f8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_LogText_OutputPort[portNum].addCallPort(port);
    9438:	236c      	movs	r3, #108	; 0x6c
    943a:	4631      	mov	r1, r6
    943c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    9440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_LogText_OutputPort[portNum].addCallPort(port);
    9444:	f600 10f8 	addw	r0, r0, #2552	; 0x9f8
    9448:	f00d bc54 	b.w	16cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>
    944c:	20001b50 	.word	0x20001b50

00009450 <Svc::CommandDispatcherComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>:
  {
    9450:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    9452:	1e0d      	subs	r5, r1, #0
  {
    9454:	4604      	mov	r4, r0
    9456:	4616      	mov	r6, r2
    FW_ASSERT(
    9458:	dd04      	ble.n	9464 <Svc::CommandDispatcherComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x14>
    945a:	f240 220b 	movw	r2, #523	; 0x20b
    945e:	4806      	ldr	r0, [pc, #24]	; (9478 <Svc::CommandDispatcherComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x28>)
    9460:	f7f8 f8e2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Time_OutputPort[portNum].addCallPort(port);
    9464:	236c      	movs	r3, #108	; 0x6c
    9466:	4631      	mov	r1, r6
    9468:	fb03 4005 	mla	r0, r3, r5, r4
  }
    946c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Time_OutputPort[portNum].addCallPort(port);
    9470:	f600 2064 	addw	r0, r0, #2660	; 0xa64
    9474:	f00e bb92 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    9478:	20001b50 	.word	0x20001b50

0000947c <Svc::CommandDispatcherComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)>:
  {
    947c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    947e:	1e0d      	subs	r5, r1, #0
  {
    9480:	4604      	mov	r4, r0
    9482:	4616      	mov	r6, r2
    FW_ASSERT(
    9484:	dd04      	ble.n	9490 <Svc::CommandDispatcherComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)+0x14>
    9486:	f240 2219 	movw	r2, #537	; 0x219
    948a:	4806      	ldr	r0, [pc, #24]	; (94a4 <Svc::CommandDispatcherComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)+0x28>)
    948c:	f7f8 f8cc 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Tlm_OutputPort[portNum].addCallPort(port);
    9490:	236c      	movs	r3, #108	; 0x6c
    9492:	4631      	mov	r1, r6
    9494:	fb03 4005 	mla	r0, r3, r5, r4
  }
    9498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Tlm_OutputPort[portNum].addCallPort(port);
    949c:	f500 602d 	add.w	r0, r0, #2768	; 0xad0
    94a0:	f00d bf6a 	b.w	17378 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)>
    94a4:	20001b50 	.word	0x20001b50

000094a8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)>:
    FW_ASSERT(
    94a8:	2909      	cmp	r1, #9
  {
    94aa:	b570      	push	{r4, r5, r6, lr}
    94ac:	460d      	mov	r5, r1
    94ae:	4604      	mov	r4, r0
    94b0:	4616      	mov	r6, r2
    FW_ASSERT(
    94b2:	dc09      	bgt.n	94c8 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)+0x20>
    this->m_compCmdSend_OutputPort[portNum].addCallPort(port);
    94b4:	236c      	movs	r3, #108	; 0x6c
    94b6:	4631      	mov	r1, r6
    94b8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    94bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_compCmdSend_OutputPort[portNum].addCallPort(port);
    94c0:	f600 303c 	addw	r0, r0, #2876	; 0xb3c
    94c4:	f00c bcb4 	b.w	15e30 <Fw::OutputCmdPort::addCallPort(Fw::InputCmdPort*)>
    FW_ASSERT(
    94c8:	f240 222b 	movw	r2, #555	; 0x22b
    94cc:	4801      	ldr	r0, [pc, #4]	; (94d4 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)+0x2c>)
    94ce:	f7f8 f8ab 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    94d2:	e7ef      	b.n	94b4 <Svc::CommandDispatcherComponentBase::set_compCmdSend_OutputPort(long, Fw::InputCmdPort*)+0xc>
    94d4:	20001b50 	.word	0x20001b50

000094d8 <Svc::CommandDispatcherComponentBase::set_seqCmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>:
  {
    94d8:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    94da:	1e0d      	subs	r5, r1, #0
  {
    94dc:	4604      	mov	r4, r0
    94de:	4616      	mov	r6, r2
    FW_ASSERT(
    94e0:	dd04      	ble.n	94ec <Svc::CommandDispatcherComponentBase::set_seqCmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x14>
    94e2:	f240 2247 	movw	r2, #583	; 0x247
    94e6:	4806      	ldr	r0, [pc, #24]	; (9500 <Svc::CommandDispatcherComponentBase::set_seqCmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x28>)
    94e8:	f7f8 f89e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_seqCmdStatus_OutputPort[portNum].addCallPort(port);
    94ec:	236c      	movs	r3, #108	; 0x6c
    94ee:	4631      	mov	r1, r6
    94f0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    94f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_seqCmdStatus_OutputPort[portNum].addCallPort(port);
    94f8:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
    94fc:	f00c bfde 	b.w	164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>
    9500:	20001b50 	.word	0x20001b50

00009504 <Svc::CommandDispatcherComponentBase::regCommands()>:
  {
    9504:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    9506:	f600 05b4 	addw	r5, r0, #2228	; 0x8b4
  {
    950a:	4604      	mov	r4, r0
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    950c:	4628      	mov	r0, r5
    950e:	f00e fc9d 	bl	17e4c <Fw::PortBase::isConnected() const>
    9512:	b300      	cbz	r0, 9556 <Svc::CommandDispatcherComponentBase::regCommands()+0x52>
    this->m_CmdReg_OutputPort[0].invoke(
    9514:	4620      	mov	r0, r4
    9516:	f008 fced 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    951a:	4601      	mov	r1, r0
    951c:	4628      	mov	r0, r5
    951e:	f00c fe15 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_CMD_NO_OP_STRING
    9522:	4620      	mov	r0, r4
    9524:	f008 fce6 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    9528:	4601      	mov	r1, r0
    this->m_CmdReg_OutputPort[0].invoke(
    952a:	4628      	mov	r0, r5
    952c:	3101      	adds	r1, #1
    952e:	f00c fe0d 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_CMD_TEST_CMD_1
    9532:	4620      	mov	r0, r4
    9534:	f008 fcde 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    9538:	4601      	mov	r1, r0
    this->m_CmdReg_OutputPort[0].invoke(
    953a:	4628      	mov	r0, r5
    953c:	3102      	adds	r1, #2
    953e:	f00c fe05 	bl	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
      this->getIdBase() + OPCODE_CMD_CLEAR_TRACKING
    9542:	4620      	mov	r0, r4
    9544:	f008 fcd6 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    9548:	4601      	mov	r1, r0
    this->m_CmdReg_OutputPort[0].invoke(
    954a:	4628      	mov	r0, r5
    954c:	3103      	adds	r1, #3
  }
    954e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    this->m_CmdReg_OutputPort[0].invoke(
    9552:	f00c bdfb 	b.w	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    9556:	f44f 713a 	mov.w	r1, #744	; 0x2e8
    955a:	4802      	ldr	r0, [pc, #8]	; (9564 <Svc::CommandDispatcherComponentBase::regCommands()+0x60>)
    955c:	f7f8 f856 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    9560:	e7d8      	b.n	9514 <Svc::CommandDispatcherComponentBase::regCommands()+0x10>
    9562:	bf00      	nop
    9564:	20001b50 	.word	0x20001b50

00009568 <Svc::CommandDispatcherComponentBase::CommandDispatcherComponentBase(char const*)>:
  CommandDispatcherComponentBase ::
    9568:	b570      	push	{r4, r5, r6, lr}
    956a:	4605      	mov	r5, r0
      Fw::ActiveComponentBase(compName)
    956c:	f007 ff48 	bl	11400 <Fw::ActiveComponentBase::ActiveComponentBase(char const*)>
    9570:	4b29      	ldr	r3, [pc, #164]	; (9618 <Svc::CommandDispatcherComponentBase::CommandDispatcherComponentBase(char const*)+0xb0>)
    9572:	f505 7025 	add.w	r0, r5, #660	; 0x294
    9576:	f505 7441 	add.w	r4, r5, #772	; 0x304
    957a:	602b      	str	r3, [r5, #0]
    957c:	f205 7664 	addw	r6, r5, #1892	; 0x764
    9580:	f00c fbfe 	bl	15d80 <Fw::InputCmdPort::InputCmdPort()>
    9584:	4620      	mov	r0, r4
    9586:	3470      	adds	r4, #112	; 0x70
    9588:	f00c fd76 	bl	16078 <Fw::InputCmdRegPort::InputCmdRegPort()>
    958c:	42a6      	cmp	r6, r4
    958e:	d1f9      	bne.n	9584 <Svc::CommandDispatcherComponentBase::CommandDispatcherComponentBase(char const*)+0x1c>
    9590:	4630      	mov	r0, r6
    9592:	f605 343c 	addw	r4, r5, #2876	; 0xb3c
    9596:	f00c ff39 	bl	1640c <Fw::InputCmdResponsePort::InputCmdResponsePort()>
    959a:	f205 70d4 	addw	r0, r5, #2004	; 0x7d4
    959e:	f007 fe03 	bl	111a8 <Svc::InputPingPort::InputPingPort()>
    95a2:	f605 0044 	addw	r0, r5, #2116	; 0x844
    95a6:	f00e f83b 	bl	17620 <Fw::InputComPort::InputComPort()>
    95aa:	f605 00b4 	addw	r0, r5, #2228	; 0x8b4
    95ae:	f00c fdb1 	bl	16114 <Fw::OutputCmdRegPort::OutputCmdRegPort()>
    95b2:	f505 6012 	add.w	r0, r5, #2336	; 0x920
    95b6:	f00c ff75 	bl	164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>
    95ba:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    95be:	f00d f975 	bl	168ac <Fw::OutputLogPort::OutputLogPort()>
    95c2:	f605 10f8 	addw	r0, r5, #2552	; 0x9f8
    95c6:	f00d fb89 	bl	16cdc <Fw::OutputLogTextPort::OutputLogTextPort()>
    95ca:	f605 2064 	addw	r0, r5, #2660	; 0xa64
    95ce:	f00e fad9 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
    95d2:	f505 602d 	add.w	r0, r5, #2768	; 0xad0
    95d6:	f605 7674 	addw	r6, r5, #3956	; 0xf74
    95da:	f00d fec1 	bl	17360 <Fw::OutputTlmPort::OutputTlmPort()>
    95de:	4620      	mov	r0, r4
    95e0:	346c      	adds	r4, #108	; 0x6c
    95e2:	f00c fc19 	bl	15e18 <Fw::OutputCmdPort::OutputCmdPort()>
    95e6:	42a6      	cmp	r6, r4
    95e8:	d1f9      	bne.n	95de <Svc::CommandDispatcherComponentBase::CommandDispatcherComponentBase(char const*)+0x76>
    95ea:	4630      	mov	r0, r6
    95ec:	f007 fe2a 	bl	11244 <Svc::OutputPingPort::OutputPingPort()>
    95f0:	f505 607e 	add.w	r0, r5, #4064	; 0xfe0
    95f4:	f00c ff56 	bl	164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>
    95f8:	f241 0058 	movw	r0, #4184	; 0x1058
    95fc:	4428      	add	r0, r5
    95fe:	f00a f91f 	bl	13840 <Os::Mutex::Mutex()>
    this->m_last_CommandsDispatched = 0;
    9602:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
    9606:	2200      	movs	r2, #0
    this->m_first_update_CommandsDispatched = true;
    9608:	f240 1101 	movw	r1, #257	; 0x101
  }
    960c:	4628      	mov	r0, r5
    this->m_last_CommandsDispatched = 0;
    960e:	651a      	str	r2, [r3, #80]	; 0x50
    this->m_first_update_CommandsDispatched = true;
    9610:	f8a3 104c 	strh.w	r1, [r3, #76]	; 0x4c
    this->m_last_CommandErrors = 0;
    9614:	655a      	str	r2, [r3, #84]	; 0x54
  }
    9616:	bd70      	pop	{r4, r5, r6, pc}
    9618:	20003e1c 	.word	0x20003e1c

0000961c <Svc::CommandDispatcherComponentBase::getNum_seqCmdStatus_OutputPorts() const>:
    961c:	2001      	movs	r0, #1
    961e:	4770      	bx	lr

00009620 <Svc::CommandDispatcherComponentBase::isConnected_compCmdSend_OutputPort(long)>:
    FW_ASSERT(
    9620:	2909      	cmp	r1, #9
  {
    9622:	b538      	push	{r3, r4, r5, lr}
    9624:	460d      	mov	r5, r1
    9626:	4604      	mov	r4, r0
    FW_ASSERT(
    9628:	dc08      	bgt.n	963c <Svc::CommandDispatcherComponentBase::isConnected_compCmdSend_OutputPort(long)+0x1c>
    return this->m_compCmdSend_OutputPort[portNum].isConnected();
    962a:	236c      	movs	r3, #108	; 0x6c
    962c:	fb03 4305 	mla	r3, r3, r5, r4
    9630:	f603 303c 	addw	r0, r3, #2876	; 0xb3c
  }
    9634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_compCmdSend_OutputPort[portNum].isConnected();
    9638:	f00e bc08 	b.w	17e4c <Fw::PortBase::isConnected() const>
    FW_ASSERT(
    963c:	f240 32cb 	movw	r2, #971	; 0x3cb
    9640:	4801      	ldr	r0, [pc, #4]	; (9648 <Svc::CommandDispatcherComponentBase::isConnected_compCmdSend_OutputPort(long)+0x28>)
    9642:	f7f7 fff1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9646:	e7f0      	b.n	962a <Svc::CommandDispatcherComponentBase::isConnected_compCmdSend_OutputPort(long)+0xa>
    9648:	20001b50 	.word	0x20001b50

0000964c <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)>:
  {
    964c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    964e:	1e0d      	subs	r5, r1, #0
  {
    9650:	4604      	mov	r4, r0
    FW_ASSERT(
    9652:	dd04      	ble.n	965e <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)+0x12>
    9654:	f240 32e1 	movw	r2, #993	; 0x3e1
    9658:	4805      	ldr	r0, [pc, #20]	; (9670 <Svc::CommandDispatcherComponentBase::isConnected_seqCmdStatus_OutputPort(long)+0x24>)
    965a:	f7f7 ffe5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_seqCmdStatus_OutputPort[portNum].isConnected();
    965e:	236c      	movs	r3, #108	; 0x6c
    9660:	fb03 4005 	mla	r0, r3, r5, r4
  }
    9664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_seqCmdStatus_OutputPort[portNum].isConnected();
    9668:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
    966c:	f00e bbee 	b.w	17e4c <Fw::PortBase::isConnected() const>
    9670:	20001b50 	.word	0x20001b50

00009674 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)>:
    FW_ASSERT(
    9674:	2909      	cmp	r1, #9
  {
    9676:	b570      	push	{r4, r5, r6, lr}
    9678:	460d      	mov	r5, r1
    967a:	4604      	mov	r4, r0
    967c:	4616      	mov	r6, r2
    FW_ASSERT(
    967e:	dc1b      	bgt.n	96b8 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x44>
    this->lock();
    9680:	6823      	ldr	r3, [r4, #0]
    9682:	4a16      	ldr	r2, [pc, #88]	; (96dc <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x68>)
    9684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9686:	4293      	cmp	r3, r2
    9688:	d120      	bne.n	96cc <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x58>
    this->m_guardedPortMutex.lock();
    968a:	f241 0058 	movw	r0, #4184	; 0x1058
    968e:	4420      	add	r0, r4
    9690:	f00a f8f2 	bl	13878 <Os::Mutex::lock()>
    this->compCmdReg_handler(
    9694:	6823      	ldr	r3, [r4, #0]
    9696:	4632      	mov	r2, r6
    9698:	4629      	mov	r1, r5
    969a:	4620      	mov	r0, r4
    969c:	69db      	ldr	r3, [r3, #28]
    969e:	4798      	blx	r3
    this->unLock();
    96a0:	6823      	ldr	r3, [r4, #0]
    96a2:	4a0f      	ldr	r2, [pc, #60]	; (96e0 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x6c>)
    96a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    96a6:	4293      	cmp	r3, r2
    96a8:	d113      	bne.n	96d2 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x5e>
    this->m_guardedPortMutex.unLock();
    96aa:	f241 0058 	movw	r0, #4184	; 0x1058
    96ae:	4420      	add	r0, r4
  }
    96b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    96b4:	f00a b934 	b.w	13920 <Os::Mutex::unLock()>
    FW_ASSERT(
    96b8:	f240 32f6 	movw	r2, #1014	; 0x3f6
    96bc:	4809      	ldr	r0, [pc, #36]	; (96e4 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x70>)
    96be:	f7f7 ffb3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->lock();
    96c2:	6823      	ldr	r3, [r4, #0]
    96c4:	4a05      	ldr	r2, [pc, #20]	; (96dc <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x68>)
    96c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    96c8:	4293      	cmp	r3, r2
    96ca:	d0de      	beq.n	968a <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x16>
    96cc:	4620      	mov	r0, r4
    96ce:	4798      	blx	r3
    96d0:	e7e0      	b.n	9694 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)+0x20>
    this->unLock();
    96d2:	4620      	mov	r0, r4
  }
    96d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    96d8:	4718      	bx	r3
    96da:	bf00      	nop
    96dc:	00008ec1 	.word	0x00008ec1
    96e0:	00008ecd 	.word	0x00008ecd
    96e4:	20001b50 	.word	0x20001b50

000096e8 <Svc::CommandDispatcherComponentBase::m_p_compCmdReg_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_compCmdReg_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode
    )
  {
    96e8:	b530      	push	{r4, r5, lr}
    96ea:	460d      	mov	r5, r1
    96ec:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    96ee:	4604      	mov	r4, r0
    96f0:	b130      	cbz	r0, 9700 <Svc::CommandDispatcherComponentBase::m_p_compCmdReg_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    CommandDispatcherComponentBase* compPtr = static_cast<CommandDispatcherComponentBase*>(callComp);
    compPtr->compCmdReg_handlerBase(
    96f2:	4629      	mov	r1, r5
    96f4:	4620      	mov	r0, r4
      portNum,
      opCode
    );
  }
    96f6:	b003      	add	sp, #12
    96f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->compCmdReg_handlerBase(
    96fc:	f7ff bfba 	b.w	9674 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
    9700:	f640 41a5 	movw	r1, #3237	; 0xca5
    9704:	4805      	ldr	r0, [pc, #20]	; (971c <Svc::CommandDispatcherComponentBase::m_p_compCmdReg_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    9706:	9201      	str	r2, [sp, #4]
    9708:	f7f7 ff80 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    970c:	9a01      	ldr	r2, [sp, #4]
    compPtr->compCmdReg_handlerBase(
    970e:	4629      	mov	r1, r5
    9710:	4620      	mov	r0, r4
  }
    9712:	b003      	add	sp, #12
    9714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->compCmdReg_handlerBase(
    9718:	f7ff bfac 	b.w	9674 <Svc::CommandDispatcherComponentBase::compCmdReg_handlerBase(long, unsigned long)>
    971c:	20001b50 	.word	0x20001b50

00009720 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
  {
    9720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    FW_ASSERT(
    9724:	f1b1 0900 	subs.w	r9, r1, #0
  {
    9728:	b0ab      	sub	sp, #172	; 0xac
    972a:	4604      	mov	r4, r0
    972c:	4690      	mov	r8, r2
    972e:	461f      	mov	r7, r3
    9730:	9e32      	ldr	r6, [sp, #200]	; 0xc8
    FW_ASSERT(
    9732:	dd04      	ble.n	973e <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x1e>
    9734:	f240 4211 	movw	r2, #1041	; 0x411
    9738:	483f      	ldr	r0, [pc, #252]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    973a:	f7f7 ff75 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    compCmdStat_preMsgHook(
    973e:	6823      	ldr	r3, [r4, #0]
    9740:	6add      	ldr	r5, [r3, #44]	; 0x2c
    9742:	4b3e      	ldr	r3, [pc, #248]	; (983c <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x11c>)
    9744:	429d      	cmp	r5, r3
    9746:	d16f      	bne.n	9828 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x108>
    class ComponentIpcSerializableBuffer :
    9748:	4d3d      	ldr	r5, [pc, #244]	; (9840 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x120>)
    974a:	a803      	add	r0, sp, #12
    974c:	f7f6 fef8 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(
    9750:	2101      	movs	r1, #1
    9752:	a803      	add	r0, sp, #12
    class ComponentIpcSerializableBuffer :
    9754:	9503      	str	r5, [sp, #12]
    _status = msg.serialize(
    9756:	f7f6 ffe7 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    975a:	bb38      	cbnz	r0, 97ac <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x8c>
    _status = msg.serialize(portNum);
    975c:	4649      	mov	r1, r9
    975e:	a803      	add	r0, sp, #12
    9760:	f7f6 ffe2 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    9764:	2800      	cmp	r0, #0
    9766:	d12d      	bne.n	97c4 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xa4>
    _status = msg.serialize(opCode);
    9768:	4641      	mov	r1, r8
    976a:	a803      	add	r0, sp, #12
    976c:	f7f6 ff76 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    9770:	2800      	cmp	r0, #0
    9772:	d133      	bne.n	97dc <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xbc>
    _status = msg.serialize(cmdSeq);
    9774:	4639      	mov	r1, r7
    9776:	a803      	add	r0, sp, #12
    9778:	f7f6 ff70 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    977c:	2800      	cmp	r0, #0
    977e:	d139      	bne.n	97f4 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xd4>
    _status = msg.serialize(response);
    9780:	4631      	mov	r1, r6
    9782:	a803      	add	r0, sp, #12
    9784:	f7f7 f9bc 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
    FW_ASSERT(
    9788:	2800      	cmp	r0, #0
    978a:	d13f      	bne.n	980c <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xec>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    978c:	2301      	movs	r3, #1
    978e:	2200      	movs	r2, #0
    9790:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9794:	a903      	add	r1, sp, #12
    9796:	f008 fadb 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    979a:	2800      	cmp	r0, #0
    979c:	d13d      	bne.n	981a <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xfa>
    class ComponentIpcSerializableBuffer :
    979e:	a803      	add	r0, sp, #12
    97a0:	9503      	str	r5, [sp, #12]
    97a2:	f7f6 fed5 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    97a6:	b02b      	add	sp, #172	; 0xac
    97a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(
    97ac:	4601      	mov	r1, r0
    97ae:	f240 4224 	movw	r2, #1060	; 0x424
    97b2:	4821      	ldr	r0, [pc, #132]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    97b4:	f7f7 ff38 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(portNum);
    97b8:	4649      	mov	r1, r9
    97ba:	a803      	add	r0, sp, #12
    97bc:	f7f6 ffb4 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    97c0:	2800      	cmp	r0, #0
    97c2:	d0d1      	beq.n	9768 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x48>
    97c4:	4601      	mov	r1, r0
    97c6:	f240 422b 	movw	r2, #1067	; 0x42b
    97ca:	481b      	ldr	r0, [pc, #108]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    97cc:	f7f7 ff2c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    97d0:	4641      	mov	r1, r8
    97d2:	a803      	add	r0, sp, #12
    97d4:	f7f6 ff42 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    97d8:	2800      	cmp	r0, #0
    97da:	d0cb      	beq.n	9774 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x54>
    97dc:	4601      	mov	r1, r0
    97de:	f240 4232 	movw	r2, #1074	; 0x432
    97e2:	4815      	ldr	r0, [pc, #84]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    97e4:	f7f7 ff20 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    97e8:	4639      	mov	r1, r7
    97ea:	a803      	add	r0, sp, #12
    97ec:	f7f6 ff36 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    97f0:	2800      	cmp	r0, #0
    97f2:	d0c5      	beq.n	9780 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x60>
    97f4:	4601      	mov	r1, r0
    97f6:	f240 4239 	movw	r2, #1081	; 0x439
    97fa:	480f      	ldr	r0, [pc, #60]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    97fc:	f7f7 ff14 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(response);
    9800:	4631      	mov	r1, r6
    9802:	a803      	add	r0, sp, #12
    9804:	f7f7 f97c 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
    FW_ASSERT(
    9808:	2800      	cmp	r0, #0
    980a:	d0bf      	beq.n	978c <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x6c>
    980c:	4601      	mov	r1, r0
    980e:	f44f 6288 	mov.w	r2, #1088	; 0x440
    9812:	4809      	ldr	r0, [pc, #36]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    9814:	f7f7 ff08 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9818:	e7b8      	b.n	978c <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x6c>
    FW_ASSERT(
    981a:	4601      	mov	r1, r0
    981c:	f240 4249 	movw	r2, #1097	; 0x449
    9820:	4805      	ldr	r0, [pc, #20]	; (9838 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x118>)
    9822:	f7f7 ff01 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9826:	e7ba      	b.n	979e <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x7e>
    compCmdStat_preMsgHook(
    9828:	463b      	mov	r3, r7
    982a:	4642      	mov	r2, r8
    982c:	4649      	mov	r1, r9
    982e:	4620      	mov	r0, r4
    9830:	9600      	str	r6, [sp, #0]
    9832:	47a8      	blx	r5
    9834:	e788      	b.n	9748 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x28>
    9836:	bf00      	nop
    9838:	20001b50 	.word	0x20001b50
    983c:	00008e51 	.word	0x00008e51
    9840:	20003988 	.word	0x20003988

00009844 <Svc::CommandDispatcherComponentBase::m_p_compCmdStat_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    9844:	b570      	push	{r4, r5, r6, lr}
    9846:	b082      	sub	sp, #8
    9848:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    984a:	4604      	mov	r4, r0
  {
    984c:	9e06      	ldr	r6, [sp, #24]
    FW_ASSERT(callComp);
    984e:	b138      	cbz	r0, 9860 <Svc::CommandDispatcherComponentBase::m_p_compCmdStat_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x1c>
    CommandDispatcherComponentBase* compPtr = static_cast<CommandDispatcherComponentBase*>(callComp);
    compPtr->compCmdStat_handlerBase(
    9850:	4629      	mov	r1, r5
    9852:	4620      	mov	r0, r4
    9854:	9606      	str	r6, [sp, #24]
      portNum,
      opCode,
      cmdSeq,
      response
    );
  }
    9856:	b002      	add	sp, #8
    9858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    compPtr->compCmdStat_handlerBase(
    985c:	f7ff bf60 	b.w	9720 <Svc::CommandDispatcherComponentBase::compCmdStat_handlerBase(long, unsigned long, unsigned long, Fw::CmdResponse const&)>
    FW_ASSERT(callComp);
    9860:	f640 41b6 	movw	r1, #3254	; 0xcb6
    9864:	4803      	ldr	r0, [pc, #12]	; (9874 <Svc::CommandDispatcherComponentBase::m_p_compCmdStat_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x30>)
    9866:	e9cd 2300 	strd	r2, r3, [sp]
    986a:	f7f7 fecf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    986e:	e9dd 2300 	ldrd	r2, r3, [sp]
    9872:	e7ed      	b.n	9850 <Svc::CommandDispatcherComponentBase::m_p_compCmdStat_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xc>
    9874:	20001b50 	.word	0x20001b50

00009878 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)>:
  {
    9878:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
    987a:	1e0f      	subs	r7, r1, #0
  {
    987c:	b0a9      	sub	sp, #164	; 0xa4
    987e:	4604      	mov	r4, r0
    9880:	4616      	mov	r6, r2
    FW_ASSERT(
    9882:	dd04      	ble.n	988e <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x16>
    9884:	f240 4256 	movw	r2, #1110	; 0x456
    9888:	482a      	ldr	r0, [pc, #168]	; (9934 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    988a:	f7f7 fecd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    pingIn_preMsgHook(
    988e:	6823      	ldr	r3, [r4, #0]
    9890:	4a29      	ldr	r2, [pc, #164]	; (9938 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xc0>)
    9892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9894:	4293      	cmp	r3, r2
    9896:	d147      	bne.n	9928 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xb0>
    class ComponentIpcSerializableBuffer :
    9898:	a801      	add	r0, sp, #4
    989a:	4d28      	ldr	r5, [pc, #160]	; (993c <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
    989c:	f7f6 fe50 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(
    98a0:	2102      	movs	r1, #2
    98a2:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    98a4:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(
    98a6:	f7f6 ff3f 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    98aa:	b9b8      	cbnz	r0, 98dc <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x64>
    _status = msg.serialize(portNum);
    98ac:	4639      	mov	r1, r7
    98ae:	a801      	add	r0, sp, #4
    98b0:	f7f6 ff3a 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    98b4:	b9f0      	cbnz	r0, 98f4 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x7c>
    _status = msg.serialize(key);
    98b6:	4631      	mov	r1, r6
    98b8:	a801      	add	r0, sp, #4
    98ba:	f7f6 fecf 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    98be:	bb28      	cbnz	r0, 990c <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x94>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    98c0:	2301      	movs	r3, #1
    98c2:	2200      	movs	r2, #0
    98c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
    98c8:	a901      	add	r1, sp, #4
    98ca:	f008 fa41 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    98ce:	bb20      	cbnz	r0, 991a <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xa2>
    class ComponentIpcSerializableBuffer :
    98d0:	a801      	add	r0, sp, #4
    98d2:	9501      	str	r5, [sp, #4]
    98d4:	f7f6 fe3c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    98d8:	b029      	add	sp, #164	; 0xa4
    98da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(
    98dc:	4601      	mov	r1, r0
    98de:	f240 4267 	movw	r2, #1127	; 0x467
    98e2:	4814      	ldr	r0, [pc, #80]	; (9934 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    98e4:	f7f7 fea0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(portNum);
    98e8:	4639      	mov	r1, r7
    98ea:	a801      	add	r0, sp, #4
    98ec:	f7f6 ff1c 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    98f0:	2800      	cmp	r0, #0
    98f2:	d0e0      	beq.n	98b6 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x3e>
    98f4:	4601      	mov	r1, r0
    98f6:	f240 426e 	movw	r2, #1134	; 0x46e
    98fa:	480e      	ldr	r0, [pc, #56]	; (9934 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    98fc:	f7f7 fe94 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(key);
    9900:	4631      	mov	r1, r6
    9902:	a801      	add	r0, sp, #4
    9904:	f7f6 feaa 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    9908:	2800      	cmp	r0, #0
    990a:	d0d9      	beq.n	98c0 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x48>
    990c:	4601      	mov	r1, r0
    990e:	f240 4275 	movw	r2, #1141	; 0x475
    9912:	4808      	ldr	r0, [pc, #32]	; (9934 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    9914:	f7f7 fe88 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9918:	e7d2      	b.n	98c0 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x48>
    FW_ASSERT(
    991a:	4601      	mov	r1, r0
    991c:	f240 427e 	movw	r2, #1150	; 0x47e
    9920:	4804      	ldr	r0, [pc, #16]	; (9934 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0xbc>)
    9922:	f7f7 fe81 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9926:	e7d3      	b.n	98d0 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x58>
    pingIn_preMsgHook(
    9928:	4632      	mov	r2, r6
    992a:	4639      	mov	r1, r7
    992c:	4620      	mov	r0, r4
    992e:	4798      	blx	r3
    9930:	e7b2      	b.n	9898 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)+0x20>
    9932:	bf00      	nop
    9934:	20001b50 	.word	0x20001b50
    9938:	00008e55 	.word	0x00008e55
    993c:	20003988 	.word	0x20003988

00009940 <Svc::CommandDispatcherComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_pingIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 key
    )
  {
    9940:	b530      	push	{r4, r5, lr}
    9942:	460d      	mov	r5, r1
    9944:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    9946:	4604      	mov	r4, r0
    9948:	b130      	cbz	r0, 9958 <Svc::CommandDispatcherComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    CommandDispatcherComponentBase* compPtr = static_cast<CommandDispatcherComponentBase*>(callComp);
    compPtr->pingIn_handlerBase(
    994a:	4629      	mov	r1, r5
    994c:	4620      	mov	r0, r4
      portNum,
      key
    );
  }
    994e:	b003      	add	sp, #12
    9950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->pingIn_handlerBase(
    9954:	f7ff bf90 	b.w	9878 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
    9958:	f640 41c7 	movw	r1, #3271	; 0xcc7
    995c:	4805      	ldr	r0, [pc, #20]	; (9974 <Svc::CommandDispatcherComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    995e:	9201      	str	r2, [sp, #4]
    9960:	f7f7 fe54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    9964:	9a01      	ldr	r2, [sp, #4]
    compPtr->pingIn_handlerBase(
    9966:	4629      	mov	r1, r5
    9968:	4620      	mov	r0, r4
  }
    996a:	b003      	add	sp, #12
    996c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->pingIn_handlerBase(
    9970:	f7ff bf82 	b.w	9878 <Svc::CommandDispatcherComponentBase::pingIn_handlerBase(long, unsigned long)>
    9974:	20001b50 	.word	0x20001b50

00009978 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)>:
  {
    9978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(
    997c:	f1b1 0800 	subs.w	r8, r1, #0
  {
    9980:	b0a8      	sub	sp, #160	; 0xa0
    9982:	4604      	mov	r4, r0
    9984:	4617      	mov	r7, r2
    9986:	461e      	mov	r6, r3
    FW_ASSERT(
    9988:	dd04      	ble.n	9994 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x1c>
    998a:	f240 428c 	movw	r2, #1164	; 0x48c
    998e:	4835      	ldr	r0, [pc, #212]	; (9a64 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xec>)
    9990:	f7f7 fe4a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    seqCmdBuff_preMsgHook(
    9994:	6823      	ldr	r3, [r4, #0]
    9996:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    9998:	4b33      	ldr	r3, [pc, #204]	; (9a68 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xf0>)
    999a:	429d      	cmp	r5, r3
    999c:	d15b      	bne.n	9a56 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xde>
    class ComponentIpcSerializableBuffer :
    999e:	4d33      	ldr	r5, [pc, #204]	; (9a6c <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xf4>)
    99a0:	a801      	add	r0, sp, #4
    99a2:	f7f6 fdcd 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(
    99a6:	2103      	movs	r1, #3
    99a8:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    99aa:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(
    99ac:	f7f6 febc 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    99b0:	b9f8      	cbnz	r0, 99f2 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x7a>
    _status = msg.serialize(portNum);
    99b2:	4641      	mov	r1, r8
    99b4:	a801      	add	r0, sp, #4
    99b6:	f7f6 feb7 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    99ba:	bb30      	cbnz	r0, 9a0a <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x92>
    _status = msg.serialize(data);
    99bc:	4639      	mov	r1, r7
    99be:	a801      	add	r0, sp, #4
    99c0:	f7f7 f8a4 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT(
    99c4:	bb68      	cbnz	r0, 9a22 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xaa>
    _status = msg.serialize(context);
    99c6:	4631      	mov	r1, r6
    99c8:	a801      	add	r0, sp, #4
    99ca:	f7f6 fe47 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    99ce:	2800      	cmp	r0, #0
    99d0:	d133      	bne.n	9a3a <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xc2>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    99d2:	2301      	movs	r3, #1
    99d4:	2200      	movs	r2, #0
    99d6:	f104 0068 	add.w	r0, r4, #104	; 0x68
    99da:	a901      	add	r1, sp, #4
    99dc:	f008 f9b8 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    99e0:	2800      	cmp	r0, #0
    99e2:	d131      	bne.n	9a48 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xd0>
    class ComponentIpcSerializableBuffer :
    99e4:	a801      	add	r0, sp, #4
    99e6:	9501      	str	r5, [sp, #4]
    99e8:	f7f6 fdb2 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    99ec:	b028      	add	sp, #160	; 0xa0
    99ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(
    99f2:	4601      	mov	r1, r0
    99f4:	f240 429e 	movw	r2, #1182	; 0x49e
    99f8:	481a      	ldr	r0, [pc, #104]	; (9a64 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xec>)
    99fa:	f7f7 fe15 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(portNum);
    99fe:	4641      	mov	r1, r8
    9a00:	a801      	add	r0, sp, #4
    9a02:	f7f6 fe91 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
    9a06:	2800      	cmp	r0, #0
    9a08:	d0d8      	beq.n	99bc <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x44>
    9a0a:	4601      	mov	r1, r0
    9a0c:	f240 42a5 	movw	r2, #1189	; 0x4a5
    9a10:	4814      	ldr	r0, [pc, #80]	; (9a64 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xec>)
    9a12:	f7f7 fe09 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(data);
    9a16:	4639      	mov	r1, r7
    9a18:	a801      	add	r0, sp, #4
    9a1a:	f7f7 f877 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT(
    9a1e:	2800      	cmp	r0, #0
    9a20:	d0d1      	beq.n	99c6 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x4e>
    9a22:	4601      	mov	r1, r0
    9a24:	f240 42ac 	movw	r2, #1196	; 0x4ac
    9a28:	480e      	ldr	r0, [pc, #56]	; (9a64 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xec>)
    9a2a:	f7f7 fdfd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(context);
    9a2e:	4631      	mov	r1, r6
    9a30:	a801      	add	r0, sp, #4
    9a32:	f7f6 fe13 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
    9a36:	2800      	cmp	r0, #0
    9a38:	d0cb      	beq.n	99d2 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x5a>
    9a3a:	4601      	mov	r1, r0
    9a3c:	f240 42b3 	movw	r2, #1203	; 0x4b3
    9a40:	4808      	ldr	r0, [pc, #32]	; (9a64 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xec>)
    9a42:	f7f7 fdf1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9a46:	e7c4      	b.n	99d2 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x5a>
    FW_ASSERT(
    9a48:	4601      	mov	r1, r0
    9a4a:	f240 42bc 	movw	r2, #1212	; 0x4bc
    9a4e:	4805      	ldr	r0, [pc, #20]	; (9a64 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0xec>)
    9a50:	f7f7 fdea 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9a54:	e7c6      	b.n	99e4 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x6c>
    seqCmdBuff_preMsgHook(
    9a56:	4633      	mov	r3, r6
    9a58:	463a      	mov	r2, r7
    9a5a:	4641      	mov	r1, r8
    9a5c:	4620      	mov	r0, r4
    9a5e:	47a8      	blx	r5
    9a60:	e79d      	b.n	999e <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x26>
    9a62:	bf00      	nop
    9a64:	20001b50 	.word	0x20001b50
    9a68:	00008e59 	.word	0x00008e59
    9a6c:	20003988 	.word	0x20003988

00009a70 <Svc::CommandDispatcherComponentBase::m_p_seqCmdBuff_in(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long)>:
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    9a70:	b530      	push	{r4, r5, lr}
    9a72:	460d      	mov	r5, r1
    9a74:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    9a76:	4604      	mov	r4, r0
    9a78:	b130      	cbz	r0, 9a88 <Svc::CommandDispatcherComponentBase::m_p_seqCmdBuff_in(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long)+0x18>
    CommandDispatcherComponentBase* compPtr = static_cast<CommandDispatcherComponentBase*>(callComp);
    compPtr->seqCmdBuff_handlerBase(
    9a7a:	4629      	mov	r1, r5
    9a7c:	4620      	mov	r0, r4
      portNum,
      data,
      context
    );
  }
    9a7e:	b003      	add	sp, #12
    9a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->seqCmdBuff_handlerBase(
    9a84:	f7ff bf78 	b.w	9978 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)>
    FW_ASSERT(callComp);
    9a88:	f640 41d7 	movw	r1, #3287	; 0xcd7
    9a8c:	4806      	ldr	r0, [pc, #24]	; (9aa8 <Svc::CommandDispatcherComponentBase::m_p_seqCmdBuff_in(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long)+0x38>)
    9a8e:	e9cd 2300 	strd	r2, r3, [sp]
    9a92:	f7f7 fdbb 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    compPtr->seqCmdBuff_handlerBase(
    9a96:	4629      	mov	r1, r5
    9a98:	4620      	mov	r0, r4
    FW_ASSERT(callComp);
    9a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    9a9e:	b003      	add	sp, #12
    9aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->seqCmdBuff_handlerBase(
    9aa4:	f7ff bf68 	b.w	9978 <Svc::CommandDispatcherComponentBase::seqCmdBuff_handlerBase(long, Fw::ComBuffer&, unsigned long)>
    9aa8:	20001b50 	.word	0x20001b50

00009aac <Svc::CommandDispatcherComponentBase::compCmdSend_out(long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    9aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
    9aae:	2909      	cmp	r1, #9
  {
    9ab0:	b083      	sub	sp, #12
    9ab2:	461f      	mov	r7, r3
    9ab4:	460d      	mov	r5, r1
    9ab6:	4604      	mov	r4, r0
    9ab8:	4616      	mov	r6, r2
    9aba:	9b08      	ldr	r3, [sp, #32]
    FW_ASSERT(
    9abc:	dc0b      	bgt.n	9ad6 <Svc::CommandDispatcherComponentBase::compCmdSend_out(long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x2a>
    this->m_compCmdSend_OutputPort[portNum].invoke(
    9abe:	206c      	movs	r0, #108	; 0x6c
    9ac0:	463a      	mov	r2, r7
    9ac2:	4631      	mov	r1, r6
    9ac4:	fb00 4005 	mla	r0, r0, r5, r4
    9ac8:	f600 303c 	addw	r0, r0, #2876	; 0xb3c
  }
    9acc:	b003      	add	sp, #12
    9ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->m_compCmdSend_OutputPort[portNum].invoke(
    9ad2:	f00c b9bd 	b.w	15e50 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const>
    FW_ASSERT(
    9ad6:	f240 42f4 	movw	r2, #1268	; 0x4f4
    9ada:	4803      	ldr	r0, [pc, #12]	; (9ae8 <Svc::CommandDispatcherComponentBase::compCmdSend_out(long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x3c>)
    9adc:	9301      	str	r3, [sp, #4]
    9ade:	f7f7 fda3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9ae2:	9b01      	ldr	r3, [sp, #4]
    9ae4:	e7eb      	b.n	9abe <Svc::CommandDispatcherComponentBase::compCmdSend_out(long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x12>
    9ae6:	bf00      	nop
    9ae8:	20001b50 	.word	0x20001b50

00009aec <Svc::CommandDispatcherComponentBase::pingOut_out(long, unsigned long)>:
  {
    9aec:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    9aee:	1e0d      	subs	r5, r1, #0
  {
    9af0:	4604      	mov	r4, r0
    9af2:	4616      	mov	r6, r2
    FW_ASSERT(
    9af4:	dd04      	ble.n	9b00 <Svc::CommandDispatcherComponentBase::pingOut_out(long, unsigned long)+0x14>
    9af6:	f240 5205 	movw	r2, #1285	; 0x505
    9afa:	4806      	ldr	r0, [pc, #24]	; (9b14 <Svc::CommandDispatcherComponentBase::pingOut_out(long, unsigned long)+0x28>)
    9afc:	f7f7 fd94 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_pingOut_OutputPort[portNum].invoke(
    9b00:	236c      	movs	r3, #108	; 0x6c
    9b02:	4631      	mov	r1, r6
    9b04:	fb03 4005 	mla	r0, r3, r5, r4
  }
    9b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_pingOut_OutputPort[portNum].invoke(
    9b0c:	f600 7074 	addw	r0, r0, #3956	; 0xf74
    9b10:	f007 bba4 	b.w	1125c <Svc::OutputPingPort::invoke(unsigned long) const>
    9b14:	20001b50 	.word	0x20001b50

00009b18 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
  {
    9b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
    9b1a:	1e0d      	subs	r5, r1, #0
  {
    9b1c:	b083      	sub	sp, #12
    9b1e:	461f      	mov	r7, r3
    9b20:	4604      	mov	r4, r0
    9b22:	4616      	mov	r6, r2
    9b24:	9b08      	ldr	r3, [sp, #32]
    FW_ASSERT(
    9b26:	dd06      	ble.n	9b36 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x1e>
    9b28:	f240 5216 	movw	r2, #1302	; 0x516
    9b2c:	4808      	ldr	r0, [pc, #32]	; (9b50 <Svc::CommandDispatcherComponentBase::seqCmdStatus_out(long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x38>)
    9b2e:	9301      	str	r3, [sp, #4]
    9b30:	f7f7 fd7a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9b34:	9b01      	ldr	r3, [sp, #4]
    this->m_seqCmdStatus_OutputPort[portNum].invoke(
    9b36:	206c      	movs	r0, #108	; 0x6c
    9b38:	463a      	mov	r2, r7
    9b3a:	4631      	mov	r1, r6
    9b3c:	fb00 4005 	mla	r0, r0, r5, r4
    9b40:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  }
    9b44:	b003      	add	sp, #12
    9b46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->m_seqCmdStatus_OutputPort[portNum].invoke(
    9b4a:	f00c bcc7 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    9b4e:	bf00      	nop
    9b50:	20001b50 	.word	0x20001b50

00009b54 <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>:
  {
    9b54:	b530      	push	{r4, r5, lr}
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    9b56:	f500 6412 	add.w	r4, r0, #2336	; 0x920
  {
    9b5a:	b083      	sub	sp, #12
    9b5c:	460d      	mov	r5, r1
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    9b5e:	4620      	mov	r0, r4
  {
    9b60:	e9cd 3200 	strd	r3, r2, [sp]
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    9b64:	f00e f972 	bl	17e4c <Fw::PortBase::isConnected() const>
    9b68:	e9dd 3200 	ldrd	r3, r2, [sp]
    9b6c:	b130      	cbz	r0, 9b7c <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x28>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    9b6e:	4629      	mov	r1, r5
    9b70:	4620      	mov	r0, r4
  }
    9b72:	b003      	add	sp, #12
    9b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    9b78:	f00c bcb0 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    9b7c:	f240 512c 	movw	r1, #1324	; 0x52c
    9b80:	4806      	ldr	r0, [pc, #24]	; (9b9c <Svc::CommandDispatcherComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x48>)
    9b82:	e9cd 2300 	strd	r2, r3, [sp]
    9b86:	f7f7 fd41 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    9b8a:	4629      	mov	r1, r5
    9b8c:	4620      	mov	r0, r4
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    9b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    9b92:	b003      	add	sp, #12
    9b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    9b98:	f00c bca0 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    9b9c:	20001b50 	.word	0x20001b50

00009ba0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    9ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ba4:	461e      	mov	r6, r3
    this->CMD_NO_OP_preMsgHook(opCode,cmdSeq);
    9ba6:	6803      	ldr	r3, [r0, #0]
    9ba8:	4d3d      	ldr	r5, [pc, #244]	; (9ca0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x100>)
  {
    9baa:	b0a8      	sub	sp, #160	; 0xa0
    this->CMD_NO_OP_preMsgHook(opCode,cmdSeq);
    9bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  {
    9bae:	4604      	mov	r4, r0
    9bb0:	4688      	mov	r8, r1
    9bb2:	4617      	mov	r7, r2
    9bb4:	42ab      	cmp	r3, r5
    9bb6:	d170      	bne.n	9c9a <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xfa>
    class ComponentIpcSerializableBuffer :
    9bb8:	a801      	add	r0, sp, #4
    9bba:	4d3a      	ldr	r5, [pc, #232]	; (9ca4 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9bbc:	f7f6 fcc0 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_NO_OP));
    9bc0:	2104      	movs	r1, #4
    class ComponentIpcSerializableBuffer :
    9bc2:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_NO_OP));
    9bc4:	eb0d 0001 	add.w	r0, sp, r1
    9bc8:	f7f6 fdae 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9bcc:	bb38      	cbnz	r0, 9c1e <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7e>
    _status = msg.serialize(port);
    9bce:	2100      	movs	r1, #0
    9bd0:	a801      	add	r0, sp, #4
    9bd2:	f7f6 fda9 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9bd6:	2800      	cmp	r0, #0
    9bd8:	d12d      	bne.n	9c36 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x96>
    _status = msg.serialize(opCode);
    9bda:	4641      	mov	r1, r8
    9bdc:	a801      	add	r0, sp, #4
    9bde:	f7f6 fd3d 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9be2:	2800      	cmp	r0, #0
    9be4:	d133      	bne.n	9c4e <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xae>
    _status = msg.serialize(cmdSeq);
    9be6:	4639      	mov	r1, r7
    9be8:	a801      	add	r0, sp, #4
    9bea:	f7f6 fd37 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9bee:	2800      	cmp	r0, #0
    9bf0:	d139      	bne.n	9c66 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc6>
    _status = msg.serialize(args);
    9bf2:	4631      	mov	r1, r6
    9bf4:	a801      	add	r0, sp, #4
    9bf6:	f7f6 ff89 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9bfa:	2800      	cmp	r0, #0
    9bfc:	d13f      	bne.n	9c7e <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xde>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    9bfe:	2301      	movs	r3, #1
    9c00:	2200      	movs	r2, #0
    9c02:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9c06:	a901      	add	r1, sp, #4
    9c08:	f008 f8a2 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    9c0c:	2800      	cmp	r0, #0
    9c0e:	d13d      	bne.n	9c8c <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xec>
    class ComponentIpcSerializableBuffer :
    9c10:	a801      	add	r0, sp, #4
    9c12:	9501      	str	r5, [sp, #4]
    9c14:	f7f6 fc9c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    9c18:	b028      	add	sp, #160	; 0xa0
    9c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    9c1e:	4601      	mov	r1, r0
    9c20:	f240 5247 	movw	r2, #1351	; 0x547
    9c24:	4820      	ldr	r0, [pc, #128]	; (9ca8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x108>)
    9c26:	f7f7 fcff 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(port);
    9c2a:	2100      	movs	r1, #0
    9c2c:	a801      	add	r0, sp, #4
    9c2e:	f7f6 fd7b 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9c32:	2800      	cmp	r0, #0
    9c34:	d0d1      	beq.n	9bda <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x3a>
    9c36:	4601      	mov	r1, r0
    9c38:	f44f 62aa 	mov.w	r2, #1360	; 0x550
    9c3c:	481a      	ldr	r0, [pc, #104]	; (9ca8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x108>)
    9c3e:	f7f7 fcf3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    9c42:	4641      	mov	r1, r8
    9c44:	a801      	add	r0, sp, #4
    9c46:	f7f6 fd09 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9c4a:	2800      	cmp	r0, #0
    9c4c:	d0cb      	beq.n	9be6 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x46>
    9c4e:	4601      	mov	r1, r0
    9c50:	f240 5256 	movw	r2, #1366	; 0x556
    9c54:	4814      	ldr	r0, [pc, #80]	; (9ca8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x108>)
    9c56:	f7f7 fce7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    9c5a:	4639      	mov	r1, r7
    9c5c:	a801      	add	r0, sp, #4
    9c5e:	f7f6 fcfd 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9c62:	2800      	cmp	r0, #0
    9c64:	d0c5      	beq.n	9bf2 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x52>
    9c66:	4601      	mov	r1, r0
    9c68:	f240 525c 	movw	r2, #1372	; 0x55c
    9c6c:	480e      	ldr	r0, [pc, #56]	; (9ca8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x108>)
    9c6e:	f7f7 fcdb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    9c72:	4631      	mov	r1, r6
    9c74:	a801      	add	r0, sp, #4
    9c76:	f7f6 ff49 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9c7a:	2800      	cmp	r0, #0
    9c7c:	d0bf      	beq.n	9bfe <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5e>
    9c7e:	4601      	mov	r1, r0
    9c80:	f240 5262 	movw	r2, #1378	; 0x562
    9c84:	4808      	ldr	r0, [pc, #32]	; (9ca8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x108>)
    9c86:	f7f7 fccf 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9c8a:	e7b8      	b.n	9bfe <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5e>
    FW_ASSERT(
    9c8c:	4601      	mov	r1, r0
    9c8e:	f240 526b 	movw	r2, #1387	; 0x56b
    9c92:	4805      	ldr	r0, [pc, #20]	; (9ca8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x108>)
    9c94:	f7f7 fcc8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9c98:	e7ba      	b.n	9c10 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x70>
    this->CMD_NO_OP_preMsgHook(opCode,cmdSeq);
    9c9a:	4798      	blx	r3
    9c9c:	e78c      	b.n	9bb8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x18>
    9c9e:	bf00      	nop
    9ca0:	00008e5d 	.word	0x00008e5d
    9ca4:	20003988 	.word	0x20003988
    9ca8:	20001b50 	.word	0x20001b50

00009cac <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    9cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cb0:	461e      	mov	r6, r3
    this->CMD_NO_OP_STRING_preMsgHook(opCode,cmdSeq);
    9cb2:	6803      	ldr	r3, [r0, #0]
    9cb4:	4d3c      	ldr	r5, [pc, #240]	; (9da8 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xfc>)
  {
    9cb6:	b0a8      	sub	sp, #160	; 0xa0
    this->CMD_NO_OP_STRING_preMsgHook(opCode,cmdSeq);
    9cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  {
    9cba:	4604      	mov	r4, r0
    9cbc:	4688      	mov	r8, r1
    9cbe:	4617      	mov	r7, r2
    9cc0:	42ab      	cmp	r3, r5
    9cc2:	d16f      	bne.n	9da4 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xf8>
    class ComponentIpcSerializableBuffer :
    9cc4:	4d39      	ldr	r5, [pc, #228]	; (9dac <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x100>)
    9cc6:	a801      	add	r0, sp, #4
    9cc8:	f7f6 fc3a 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_NO_OP_STRING));
    9ccc:	2105      	movs	r1, #5
    9cce:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    9cd0:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_NO_OP_STRING));
    9cd2:	f7f6 fd29 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9cd6:	bb38      	cbnz	r0, 9d28 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>
    _status = msg.serialize(port);
    9cd8:	2100      	movs	r1, #0
    9cda:	a801      	add	r0, sp, #4
    9cdc:	f7f6 fd24 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9ce0:	2800      	cmp	r0, #0
    9ce2:	d12d      	bne.n	9d40 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
    _status = msg.serialize(opCode);
    9ce4:	4641      	mov	r1, r8
    9ce6:	a801      	add	r0, sp, #4
    9ce8:	f7f6 fcb8 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9cec:	2800      	cmp	r0, #0
    9cee:	d133      	bne.n	9d58 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xac>
    _status = msg.serialize(cmdSeq);
    9cf0:	4639      	mov	r1, r7
    9cf2:	a801      	add	r0, sp, #4
    9cf4:	f7f6 fcb2 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9cf8:	2800      	cmp	r0, #0
    9cfa:	d139      	bne.n	9d70 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc4>
    _status = msg.serialize(args);
    9cfc:	4631      	mov	r1, r6
    9cfe:	a801      	add	r0, sp, #4
    9d00:	f7f6 ff04 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9d04:	2800      	cmp	r0, #0
    9d06:	d13f      	bne.n	9d88 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xdc>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    9d08:	2301      	movs	r3, #1
    9d0a:	2200      	movs	r2, #0
    9d0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9d10:	a901      	add	r1, sp, #4
    9d12:	f008 f81d 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    9d16:	2800      	cmp	r0, #0
    9d18:	d13d      	bne.n	9d96 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xea>
    class ComponentIpcSerializableBuffer :
    9d1a:	a801      	add	r0, sp, #4
    9d1c:	9501      	str	r5, [sp, #4]
    9d1e:	f7f6 fc17 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    9d22:	b028      	add	sp, #160	; 0xa0
    9d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    9d28:	4601      	mov	r1, r0
    9d2a:	f240 5282 	movw	r2, #1410	; 0x582
    9d2e:	4820      	ldr	r0, [pc, #128]	; (9db0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9d30:	f7f7 fc7a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(port);
    9d34:	2100      	movs	r1, #0
    9d36:	a801      	add	r0, sp, #4
    9d38:	f7f6 fcf6 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9d3c:	2800      	cmp	r0, #0
    9d3e:	d0d1      	beq.n	9ce4 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x38>
    9d40:	4601      	mov	r1, r0
    9d42:	f240 528b 	movw	r2, #1419	; 0x58b
    9d46:	481a      	ldr	r0, [pc, #104]	; (9db0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9d48:	f7f7 fc6e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    9d4c:	4641      	mov	r1, r8
    9d4e:	a801      	add	r0, sp, #4
    9d50:	f7f6 fc84 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9d54:	2800      	cmp	r0, #0
    9d56:	d0cb      	beq.n	9cf0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x44>
    9d58:	4601      	mov	r1, r0
    9d5a:	f240 5291 	movw	r2, #1425	; 0x591
    9d5e:	4814      	ldr	r0, [pc, #80]	; (9db0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9d60:	f7f7 fc62 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    9d64:	4639      	mov	r1, r7
    9d66:	a801      	add	r0, sp, #4
    9d68:	f7f6 fc78 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9d6c:	2800      	cmp	r0, #0
    9d6e:	d0c5      	beq.n	9cfc <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x50>
    9d70:	4601      	mov	r1, r0
    9d72:	f240 5297 	movw	r2, #1431	; 0x597
    9d76:	480e      	ldr	r0, [pc, #56]	; (9db0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9d78:	f7f7 fc56 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    9d7c:	4631      	mov	r1, r6
    9d7e:	a801      	add	r0, sp, #4
    9d80:	f7f6 fec4 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9d84:	2800      	cmp	r0, #0
    9d86:	d0bf      	beq.n	9d08 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    9d88:	4601      	mov	r1, r0
    9d8a:	f240 529d 	movw	r2, #1437	; 0x59d
    9d8e:	4808      	ldr	r0, [pc, #32]	; (9db0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9d90:	f7f7 fc4a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9d94:	e7b8      	b.n	9d08 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    FW_ASSERT(
    9d96:	4601      	mov	r1, r0
    9d98:	f240 52a6 	movw	r2, #1446	; 0x5a6
    9d9c:	4804      	ldr	r0, [pc, #16]	; (9db0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9d9e:	f7f7 fc43 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9da2:	e7ba      	b.n	9d1a <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6e>
    this->CMD_NO_OP_STRING_preMsgHook(opCode,cmdSeq);
    9da4:	4798      	blx	r3
    9da6:	e78d      	b.n	9cc4 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x18>
    9da8:	00008e5d 	.word	0x00008e5d
    9dac:	20003988 	.word	0x20003988
    9db0:	20001b50 	.word	0x20001b50

00009db4 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    9db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9db8:	461e      	mov	r6, r3
    this->CMD_TEST_CMD_1_preMsgHook(opCode,cmdSeq);
    9dba:	6803      	ldr	r3, [r0, #0]
    9dbc:	4d3c      	ldr	r5, [pc, #240]	; (9eb0 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xfc>)
  {
    9dbe:	b0a8      	sub	sp, #160	; 0xa0
    this->CMD_TEST_CMD_1_preMsgHook(opCode,cmdSeq);
    9dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  {
    9dc2:	4604      	mov	r4, r0
    9dc4:	4688      	mov	r8, r1
    9dc6:	4617      	mov	r7, r2
    9dc8:	42ab      	cmp	r3, r5
    9dca:	d16f      	bne.n	9eac <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xf8>
    class ComponentIpcSerializableBuffer :
    9dcc:	4d39      	ldr	r5, [pc, #228]	; (9eb4 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x100>)
    9dce:	a801      	add	r0, sp, #4
    9dd0:	f7f6 fbb6 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_TEST_CMD_1));
    9dd4:	2106      	movs	r1, #6
    9dd6:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    9dd8:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_TEST_CMD_1));
    9dda:	f7f6 fca5 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9dde:	bb38      	cbnz	r0, 9e30 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>
    _status = msg.serialize(port);
    9de0:	2100      	movs	r1, #0
    9de2:	a801      	add	r0, sp, #4
    9de4:	f7f6 fca0 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9de8:	2800      	cmp	r0, #0
    9dea:	d12d      	bne.n	9e48 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
    _status = msg.serialize(opCode);
    9dec:	4641      	mov	r1, r8
    9dee:	a801      	add	r0, sp, #4
    9df0:	f7f6 fc34 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9df4:	2800      	cmp	r0, #0
    9df6:	d133      	bne.n	9e60 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xac>
    _status = msg.serialize(cmdSeq);
    9df8:	4639      	mov	r1, r7
    9dfa:	a801      	add	r0, sp, #4
    9dfc:	f7f6 fc2e 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9e00:	2800      	cmp	r0, #0
    9e02:	d139      	bne.n	9e78 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc4>
    _status = msg.serialize(args);
    9e04:	4631      	mov	r1, r6
    9e06:	a801      	add	r0, sp, #4
    9e08:	f7f6 fe80 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9e0c:	2800      	cmp	r0, #0
    9e0e:	d13f      	bne.n	9e90 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xdc>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    9e10:	2301      	movs	r3, #1
    9e12:	2200      	movs	r2, #0
    9e14:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9e18:	a901      	add	r1, sp, #4
    9e1a:	f007 ff99 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    9e1e:	2800      	cmp	r0, #0
    9e20:	d13d      	bne.n	9e9e <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xea>
    class ComponentIpcSerializableBuffer :
    9e22:	a801      	add	r0, sp, #4
    9e24:	9501      	str	r5, [sp, #4]
    9e26:	f7f6 fb93 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    9e2a:	b028      	add	sp, #160	; 0xa0
    9e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    9e30:	4601      	mov	r1, r0
    9e32:	f240 52bd 	movw	r2, #1469	; 0x5bd
    9e36:	4820      	ldr	r0, [pc, #128]	; (9eb8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9e38:	f7f7 fbf6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(port);
    9e3c:	2100      	movs	r1, #0
    9e3e:	a801      	add	r0, sp, #4
    9e40:	f7f6 fc72 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9e44:	2800      	cmp	r0, #0
    9e46:	d0d1      	beq.n	9dec <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x38>
    9e48:	4601      	mov	r1, r0
    9e4a:	f240 52c6 	movw	r2, #1478	; 0x5c6
    9e4e:	481a      	ldr	r0, [pc, #104]	; (9eb8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9e50:	f7f7 fbea 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    9e54:	4641      	mov	r1, r8
    9e56:	a801      	add	r0, sp, #4
    9e58:	f7f6 fc00 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d0cb      	beq.n	9df8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x44>
    9e60:	4601      	mov	r1, r0
    9e62:	f240 52cc 	movw	r2, #1484	; 0x5cc
    9e66:	4814      	ldr	r0, [pc, #80]	; (9eb8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9e68:	f7f7 fbde 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    9e6c:	4639      	mov	r1, r7
    9e6e:	a801      	add	r0, sp, #4
    9e70:	f7f6 fbf4 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9e74:	2800      	cmp	r0, #0
    9e76:	d0c5      	beq.n	9e04 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x50>
    9e78:	4601      	mov	r1, r0
    9e7a:	f240 52d2 	movw	r2, #1490	; 0x5d2
    9e7e:	480e      	ldr	r0, [pc, #56]	; (9eb8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9e80:	f7f7 fbd2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    9e84:	4631      	mov	r1, r6
    9e86:	a801      	add	r0, sp, #4
    9e88:	f7f6 fe40 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9e8c:	2800      	cmp	r0, #0
    9e8e:	d0bf      	beq.n	9e10 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    9e90:	4601      	mov	r1, r0
    9e92:	f44f 62bb 	mov.w	r2, #1496	; 0x5d8
    9e96:	4808      	ldr	r0, [pc, #32]	; (9eb8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9e98:	f7f7 fbc6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9e9c:	e7b8      	b.n	9e10 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    FW_ASSERT(
    9e9e:	4601      	mov	r1, r0
    9ea0:	f240 52e1 	movw	r2, #1505	; 0x5e1
    9ea4:	4804      	ldr	r0, [pc, #16]	; (9eb8 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9ea6:	f7f7 fbbf 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9eaa:	e7ba      	b.n	9e22 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6e>
    this->CMD_TEST_CMD_1_preMsgHook(opCode,cmdSeq);
    9eac:	4798      	blx	r3
    9eae:	e78d      	b.n	9dcc <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x18>
    9eb0:	00008e5d 	.word	0x00008e5d
    9eb4:	20003988 	.word	0x20003988
    9eb8:	20001b50 	.word	0x20001b50

00009ebc <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    9ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ec0:	461e      	mov	r6, r3
    this->CMD_CLEAR_TRACKING_preMsgHook(opCode,cmdSeq);
    9ec2:	6803      	ldr	r3, [r0, #0]
    9ec4:	4d3c      	ldr	r5, [pc, #240]	; (9fb8 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xfc>)
  {
    9ec6:	b0a8      	sub	sp, #160	; 0xa0
    this->CMD_CLEAR_TRACKING_preMsgHook(opCode,cmdSeq);
    9ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  {
    9eca:	4604      	mov	r4, r0
    9ecc:	4688      	mov	r8, r1
    9ece:	4617      	mov	r7, r2
    9ed0:	42ab      	cmp	r3, r5
    9ed2:	d16f      	bne.n	9fb4 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xf8>
    class ComponentIpcSerializableBuffer :
    9ed4:	4d39      	ldr	r5, [pc, #228]	; (9fbc <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x100>)
    9ed6:	a801      	add	r0, sp, #4
    9ed8:	f7f6 fb32 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_CLEAR_TRACKING));
    9edc:	2107      	movs	r1, #7
    9ede:	a801      	add	r0, sp, #4
    class ComponentIpcSerializableBuffer :
    9ee0:	9501      	str	r5, [sp, #4]
    _status = msg.serialize(static_cast<FwEnumStoreType>(CMD_CMD_CLEAR_TRACKING));
    9ee2:	f7f6 fc21 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9ee6:	bb38      	cbnz	r0, 9f38 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7c>
    _status = msg.serialize(port);
    9ee8:	2100      	movs	r1, #0
    9eea:	a801      	add	r0, sp, #4
    9eec:	f7f6 fc1c 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9ef0:	2800      	cmp	r0, #0
    9ef2:	d12d      	bne.n	9f50 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x94>
    _status = msg.serialize(opCode);
    9ef4:	4641      	mov	r1, r8
    9ef6:	a801      	add	r0, sp, #4
    9ef8:	f7f6 fbb0 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9efc:	2800      	cmp	r0, #0
    9efe:	d133      	bne.n	9f68 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xac>
    _status = msg.serialize(cmdSeq);
    9f00:	4639      	mov	r1, r7
    9f02:	a801      	add	r0, sp, #4
    9f04:	f7f6 fbaa 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9f08:	2800      	cmp	r0, #0
    9f0a:	d139      	bne.n	9f80 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc4>
    _status = msg.serialize(args);
    9f0c:	4631      	mov	r1, r6
    9f0e:	a801      	add	r0, sp, #4
    9f10:	f7f6 fdfc 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9f14:	2800      	cmp	r0, #0
    9f16:	d13f      	bne.n	9f98 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xdc>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
    9f18:	2301      	movs	r3, #1
    9f1a:	2200      	movs	r2, #0
    9f1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9f20:	a901      	add	r1, sp, #4
    9f22:	f007 ff15 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
    9f26:	2800      	cmp	r0, #0
    9f28:	d13d      	bne.n	9fa6 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xea>
    class ComponentIpcSerializableBuffer :
    9f2a:	a801      	add	r0, sp, #4
    9f2c:	9501      	str	r5, [sp, #4]
    9f2e:	f7f6 fb0f 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    9f32:	b028      	add	sp, #160	; 0xa0
    9f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT (
    9f38:	4601      	mov	r1, r0
    9f3a:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
    9f3e:	4820      	ldr	r0, [pc, #128]	; (9fc0 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9f40:	f7f7 fb72 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(port);
    9f44:	2100      	movs	r1, #0
    9f46:	a801      	add	r0, sp, #4
    9f48:	f7f6 fbee 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT (
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d0d1      	beq.n	9ef4 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x38>
    9f50:	4601      	mov	r1, r0
    9f52:	f240 6201 	movw	r2, #1537	; 0x601
    9f56:	481a      	ldr	r0, [pc, #104]	; (9fc0 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9f58:	f7f7 fb66 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(opCode);
    9f5c:	4641      	mov	r1, r8
    9f5e:	a801      	add	r0, sp, #4
    9f60:	f7f6 fb7c 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9f64:	2800      	cmp	r0, #0
    9f66:	d0cb      	beq.n	9f00 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x44>
    9f68:	4601      	mov	r1, r0
    9f6a:	f240 6207 	movw	r2, #1543	; 0x607
    9f6e:	4814      	ldr	r0, [pc, #80]	; (9fc0 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9f70:	f7f7 fb5a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(cmdSeq);
    9f74:	4639      	mov	r1, r7
    9f76:	a801      	add	r0, sp, #4
    9f78:	f7f6 fb70 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT (
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d0c5      	beq.n	9f0c <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x50>
    9f80:	4601      	mov	r1, r0
    9f82:	f240 620d 	movw	r2, #1549	; 0x60d
    9f86:	480e      	ldr	r0, [pc, #56]	; (9fc0 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9f88:	f7f7 fb4e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(args);
    9f8c:	4631      	mov	r1, r6
    9f8e:	a801      	add	r0, sp, #4
    9f90:	f7f6 fdbc 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
    FW_ASSERT (
    9f94:	2800      	cmp	r0, #0
    9f96:	d0bf      	beq.n	9f18 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    9f98:	4601      	mov	r1, r0
    9f9a:	f240 6213 	movw	r2, #1555	; 0x613
    9f9e:	4808      	ldr	r0, [pc, #32]	; (9fc0 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9fa0:	f7f7 fb42 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9fa4:	e7b8      	b.n	9f18 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x5c>
    FW_ASSERT(
    9fa6:	4601      	mov	r1, r0
    9fa8:	f240 621c 	movw	r2, #1564	; 0x61c
    9fac:	4804      	ldr	r0, [pc, #16]	; (9fc0 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x104>)
    9fae:	f7f7 fb3b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    9fb2:	e7ba      	b.n	9f2a <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6e>
    this->CMD_CLEAR_TRACKING_preMsgHook(opCode,cmdSeq);
    9fb4:	4798      	blx	r3
    9fb6:	e78d      	b.n	9ed4 <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x18>
    9fb8:	00008e5d 	.word	0x00008e5d
    9fbc:	20003988 	.word	0x20003988
    9fc0:	20001b50 	.word	0x20001b50

00009fc4 <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    9fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9fcc:	4615      	mov	r5, r2
    FW_ASSERT(callComp);
    9fce:	4606      	mov	r6, r0
  {
    9fd0:	461f      	mov	r7, r3
    FW_ASSERT(callComp);
    9fd2:	b3a0      	cbz	r0, a03e <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x7a>
    const U32 idBase = callComp->getIdBase();
    9fd4:	4630      	mov	r0, r6
    9fd6:	f007 ff8d 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    9fda:	42a8      	cmp	r0, r5
    const U32 idBase = callComp->getIdBase();
    9fdc:	4604      	mov	r4, r0
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    9fde:	d826      	bhi.n	a02e <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x6a>
    switch (opCode - idBase) {
    9fe0:	1b2c      	subs	r4, r5, r4
    9fe2:	2c03      	cmp	r4, #3
    9fe4:	d831      	bhi.n	a04a <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x86>
    9fe6:	e8df f004 	tbb	[pc, r4]
    9fea:	121a      	.short	0x121a
    9fec:	020a      	.short	0x020a
        compPtr->CMD_CLEAR_TRACKING_cmdHandlerBase(
    9fee:	4643      	mov	r3, r8
    9ff0:	463a      	mov	r2, r7
    9ff2:	4629      	mov	r1, r5
    9ff4:	4630      	mov	r0, r6
  }
    9ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->CMD_CLEAR_TRACKING_cmdHandlerBase(
    9ffa:	f7ff bf5f 	b.w	9ebc <Svc::CommandDispatcherComponentBase::CMD_CLEAR_TRACKING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
        compPtr->CMD_TEST_CMD_1_cmdHandlerBase(
    9ffe:	4643      	mov	r3, r8
    a000:	463a      	mov	r2, r7
    a002:	4629      	mov	r1, r5
    a004:	4630      	mov	r0, r6
  }
    a006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->CMD_TEST_CMD_1_cmdHandlerBase(
    a00a:	f7ff bed3 	b.w	9db4 <Svc::CommandDispatcherComponentBase::CMD_TEST_CMD_1_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
        compPtr->CMD_NO_OP_STRING_cmdHandlerBase(
    a00e:	4643      	mov	r3, r8
    a010:	463a      	mov	r2, r7
    a012:	4629      	mov	r1, r5
    a014:	4630      	mov	r0, r6
  }
    a016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->CMD_NO_OP_STRING_cmdHandlerBase(
    a01a:	f7ff be47 	b.w	9cac <Svc::CommandDispatcherComponentBase::CMD_NO_OP_STRING_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
        compPtr->CMD_NO_OP_cmdHandlerBase(
    a01e:	4643      	mov	r3, r8
    a020:	463a      	mov	r2, r7
    a022:	4629      	mov	r1, r5
    a024:	4630      	mov	r0, r6
  }
    a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->CMD_NO_OP_cmdHandlerBase(
    a02a:	f7ff bdb9 	b.w	9ba0 <Svc::CommandDispatcherComponentBase::CMD_NO_OP_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    a02e:	4602      	mov	r2, r0
    a030:	f44f 6347 	mov.w	r3, #3184	; 0xc70
    a034:	4629      	mov	r1, r5
    a036:	4806      	ldr	r0, [pc, #24]	; (a050 <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x8c>)
    a038:	f7f7 fb06 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    a03c:	e7d0      	b.n	9fe0 <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x1c>
    FW_ASSERT(callComp);
    a03e:	f640 416c 	movw	r1, #3180	; 0xc6c
    a042:	4803      	ldr	r0, [pc, #12]	; (a050 <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x8c>)
    a044:	f7f7 fae2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    a048:	e7c4      	b.n	9fd4 <Svc::CommandDispatcherComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x10>
  }
    a04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a04e:	bf00      	nop
    a050:	20001b50 	.word	0x20001b50

0000a054 <Svc::CommandDispatcherComponentBase::~CommandDispatcherComponentBase()>:
  CommandDispatcherComponentBase ::
    a054:	b570      	push	{r4, r5, r6, lr}
    ~CommandDispatcherComponentBase()
    a056:	4b34      	ldr	r3, [pc, #208]	; (a128 <Svc::CommandDispatcherComponentBase::~CommandDispatcherComponentBase()+0xd4>)
  CommandDispatcherComponentBase ::
    a058:	4605      	mov	r5, r0
    ~CommandDispatcherComponentBase()
    a05a:	f241 0058 	movw	r0, #4184	; 0x1058
    a05e:	602b      	str	r3, [r5, #0]
    a060:	f605 7474 	addw	r4, r5, #3956	; 0xf74
    a064:	4428      	add	r0, r5
    a066:	f605 363c 	addw	r6, r5, #2876	; 0xb3c
    a06a:	f009 f99f 	bl	133ac <Os::Mutex::~Mutex()>
    a06e:	f8d5 3fe0 	ldr.w	r3, [r5, #4064]	; 0xfe0
    a072:	f505 607e 	add.w	r0, r5, #4064	; 0xfe0
    a076:	685b      	ldr	r3, [r3, #4]
    a078:	4798      	blx	r3
    a07a:	f8d5 3f74 	ldr.w	r3, [r5, #3956]	; 0xf74
    a07e:	4620      	mov	r0, r4
    a080:	685b      	ldr	r3, [r3, #4]
    a082:	4798      	blx	r3
    a084:	f854 3d6c 	ldr.w	r3, [r4, #-108]!
    a088:	685b      	ldr	r3, [r3, #4]
    a08a:	4620      	mov	r0, r4
    a08c:	4798      	blx	r3
  }
    a08e:	42a6      	cmp	r6, r4
    a090:	d1f8      	bne.n	a084 <Svc::CommandDispatcherComponentBase::~CommandDispatcherComponentBase()+0x30>
    ~CommandDispatcherComponentBase()
    a092:	f8d5 3ad0 	ldr.w	r3, [r5, #2768]	; 0xad0
    a096:	f505 602d 	add.w	r0, r5, #2768	; 0xad0
    a09a:	f205 7464 	addw	r4, r5, #1892	; 0x764
    a09e:	f505 7641 	add.w	r6, r5, #772	; 0x304
    a0a2:	685b      	ldr	r3, [r3, #4]
    a0a4:	4798      	blx	r3
    a0a6:	f8d5 3a64 	ldr.w	r3, [r5, #2660]	; 0xa64
    a0aa:	f605 2064 	addw	r0, r5, #2660	; 0xa64
    a0ae:	685b      	ldr	r3, [r3, #4]
    a0b0:	4798      	blx	r3
    a0b2:	f8d5 39f8 	ldr.w	r3, [r5, #2552]	; 0x9f8
    a0b6:	f605 10f8 	addw	r0, r5, #2552	; 0x9f8
    a0ba:	685b      	ldr	r3, [r3, #4]
    a0bc:	4798      	blx	r3
    a0be:	f8d5 398c 	ldr.w	r3, [r5, #2444]	; 0x98c
    a0c2:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    a0c6:	685b      	ldr	r3, [r3, #4]
    a0c8:	4798      	blx	r3
    a0ca:	f8d5 3920 	ldr.w	r3, [r5, #2336]	; 0x920
    a0ce:	f505 6012 	add.w	r0, r5, #2336	; 0x920
    a0d2:	685b      	ldr	r3, [r3, #4]
    a0d4:	4798      	blx	r3
    a0d6:	f8d5 38b4 	ldr.w	r3, [r5, #2228]	; 0x8b4
    a0da:	f605 00b4 	addw	r0, r5, #2228	; 0x8b4
    a0de:	685b      	ldr	r3, [r3, #4]
    a0e0:	4798      	blx	r3
    a0e2:	f8d5 3844 	ldr.w	r3, [r5, #2116]	; 0x844
    a0e6:	f605 0044 	addw	r0, r5, #2116	; 0x844
    a0ea:	685b      	ldr	r3, [r3, #4]
    a0ec:	4798      	blx	r3
    a0ee:	f8d5 37d4 	ldr.w	r3, [r5, #2004]	; 0x7d4
    a0f2:	f205 70d4 	addw	r0, r5, #2004	; 0x7d4
    a0f6:	685b      	ldr	r3, [r3, #4]
    a0f8:	4798      	blx	r3
    a0fa:	f8d5 3764 	ldr.w	r3, [r5, #1892]	; 0x764
    a0fe:	4620      	mov	r0, r4
    a100:	685b      	ldr	r3, [r3, #4]
    a102:	4798      	blx	r3
    a104:	f854 3d70 	ldr.w	r3, [r4, #-112]!
    a108:	685b      	ldr	r3, [r3, #4]
    a10a:	4620      	mov	r0, r4
    a10c:	4798      	blx	r3
  }
    a10e:	42a6      	cmp	r6, r4
    a110:	d1f8      	bne.n	a104 <Svc::CommandDispatcherComponentBase::~CommandDispatcherComponentBase()+0xb0>
    ~CommandDispatcherComponentBase()
    a112:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    a116:	f505 7025 	add.w	r0, r5, #660	; 0x294
    a11a:	685b      	ldr	r3, [r3, #4]
    a11c:	4798      	blx	r3
    a11e:	4628      	mov	r0, r5
    a120:	f007 f97e 	bl	11420 <Fw::ActiveComponentBase::~ActiveComponentBase()>
  }
    a124:	4628      	mov	r0, r5
    a126:	bd70      	pop	{r4, r5, r6, pc}
    a128:	20003e1c 	.word	0x20003e1c

0000a12c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const>:
  {
    a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a130:	b0ad      	sub	sp, #180	; 0xb4
    if (this->m_Time_OutputPort[0].isConnected()) {
    a132:	f600 2564 	addw	r5, r0, #2660	; 0xa64
  {
    a136:	4604      	mov	r4, r0
    a138:	460e      	mov	r6, r1
    Fw::Time _logTime;
    a13a:	a806      	add	r0, sp, #24
  {
    a13c:	4617      	mov	r7, r2
    a13e:	4698      	mov	r8, r3
    Fw::Time _logTime;
    a140:	f00d fbb6 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a144:	4628      	mov	r0, r5
    a146:	f00d fe81 	bl	17e4c <Fw::PortBase::isConnected() const>
    a14a:	b9b0      	cbnz	r0, a17a <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x4e>
    if (this->m_Log_OutputPort[0].isConnected()) {
    a14c:	f604 198c 	addw	r9, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_OPCODEREGISTERED;
    a150:	4620      	mov	r0, r4
    a152:	f007 fecf 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a156:	4605      	mov	r5, r0
    if (this->m_Log_OutputPort[0].isConnected()) {
    a158:	4648      	mov	r0, r9
    a15a:	f00d fe77 	bl	17e4c <Fw::PortBase::isConnected() const>
    a15e:	2800      	cmp	r0, #0
    a160:	d148      	bne.n	a1f4 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0xc8>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a162:	f604 19f8 	addw	r9, r4, #2552	; 0x9f8
    a166:	4648      	mov	r0, r9
    a168:	f00d fe70 	bl	17e4c <Fw::PortBase::isConnected() const>
    a16c:	b950      	cbnz	r0, a184 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x58>
  }
    a16e:	a806      	add	r0, sp, #24
    a170:	f00d fb46 	bl	17800 <Fw::Time::~Time()>
    a174:	b02d      	add	sp, #180	; 0xb4
    a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a17a:	4628      	mov	r0, r5
    a17c:	a906      	add	r1, sp, #24
    a17e:	f00d fd1d 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a182:	e7e3      	b.n	a14c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x20>
    TextLogString() : StringBase() { *this = ""; }
    a184:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
      {
    a188:	f8df b118 	ldr.w	fp, [pc, #280]	; a2a4 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x178>
    a18c:	4650      	mov	r0, sl
    a18e:	f7f7 f847 	bl	1220 <Fw::StringBase::StringBase()>
    a192:	4b3f      	ldr	r3, [pc, #252]	; (a290 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x164>)
        (void)StringBase::operator=(src);
    a194:	493f      	ldr	r1, [pc, #252]	; (a294 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x168>)
    a196:	4650      	mov	r0, sl
    TextLogString() : StringBase() { *this = ""; }
    a198:	930a      	str	r3, [sp, #40]	; 0x28
        (void)StringBase::operator=(src);
    a19a:	f7f7 f8a9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a19e:	f104 0208 	add.w	r2, r4, #8
    a1a2:	4b3d      	ldr	r3, [pc, #244]	; (a298 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x16c>)
    a1a4:	493d      	ldr	r1, [pc, #244]	; (a29c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x170>)
    a1a6:	4650      	mov	r0, sl
    a1a8:	9600      	str	r6, [sp, #0]
    a1aa:	e9cd 7801 	strd	r7, r8, [sp, #4]
    a1ae:	f7f7 f86d 	bl	128c <Fw::StringBase::format(char const*, ...)>
    a1b2:	a804      	add	r0, sp, #16
    a1b4:	f7f6 f9bc 	bl	530 <Fw::Serializable::Serializable()>
      this->m_LogText_OutputPort[0].invoke(
    a1b8:	aa04      	add	r2, sp, #16
        this->e = e1;
    a1ba:	2307      	movs	r3, #7
    a1bc:	4629      	mov	r1, r5
    a1be:	4648      	mov	r0, r9
    a1c0:	f8cd a000 	str.w	sl, [sp]
    a1c4:	f88d 3014 	strb.w	r3, [sp, #20]
    a1c8:	4613      	mov	r3, r2
    a1ca:	aa06      	add	r2, sp, #24
      {
    a1cc:	f8cd b010 	str.w	fp, [sp, #16]
    a1d0:	f00c fda0 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a1d4:	a804      	add	r0, sp, #16
    a1d6:	f8cd b010 	str.w	fp, [sp, #16]
    a1da:	f7f6 f9af 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a1de:	4b2c      	ldr	r3, [pc, #176]	; (a290 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x164>)
    a1e0:	4650      	mov	r0, sl
    a1e2:	930a      	str	r3, [sp, #40]	; 0x28
    a1e4:	f7f7 f826 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a1e8:	a806      	add	r0, sp, #24
    a1ea:	f00d fb09 	bl	17800 <Fw::Time::~Time()>
    a1ee:	b02d      	add	sp, #180	; 0xb4
    a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Fw::LogBuffer _logBuff;
    a1f4:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    a1f8:	4650      	mov	r0, sl
    a1fa:	f00c f9ed 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    a1fe:	4631      	mov	r1, r6
    a200:	4650      	mov	r0, sl
    a202:	f7f6 fa2b 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    a206:	bb20      	cbnz	r0, a252 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x126>
      _status = _logBuff.serialize(port);
    a208:	4639      	mov	r1, r7
    a20a:	4650      	mov	r0, sl
    a20c:	f7f6 fa8c 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    a210:	bb58      	cbnz	r0, a26a <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x13e>
      _status = _logBuff.serialize(slot);
    a212:	4641      	mov	r1, r8
    a214:	4650      	mov	r0, sl
    a216:	f7f6 fa87 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    a21a:	bb90      	cbnz	r0, a282 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x156>
      {
    a21c:	a804      	add	r0, sp, #16
    a21e:	f8df b084 	ldr.w	fp, [pc, #132]	; a2a4 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x178>
    a222:	f7f6 f985 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a226:	2307      	movs	r3, #7
      this->m_Log_OutputPort[0].invoke(
    a228:	4648      	mov	r0, r9
    a22a:	aa06      	add	r2, sp, #24
    a22c:	4629      	mov	r1, r5
    a22e:	f88d 3014 	strb.w	r3, [sp, #20]
    a232:	f8cd a000 	str.w	sl, [sp]
    a236:	ab04      	add	r3, sp, #16
      {
    a238:	f8cd b010 	str.w	fp, [sp, #16]
    a23c:	f00c fb52 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    a240:	a804      	add	r0, sp, #16
    a242:	f8cd b010 	str.w	fp, [sp, #16]
    a246:	f7f6 f979 	bl	53c <Fw::Serializable::~Serializable()>
    }
    a24a:	4650      	mov	r0, sl
    a24c:	f00c f9ac 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    a250:	e787      	b.n	a162 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x36>
      FW_ASSERT(
    a252:	4601      	mov	r1, r0
    a254:	f240 6284 	movw	r2, #1668	; 0x684
    a258:	4811      	ldr	r0, [pc, #68]	; (a2a0 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x174>)
    a25a:	f7f7 f9e5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(port);
    a25e:	4639      	mov	r1, r7
    a260:	4650      	mov	r0, sl
    a262:	f7f6 fa61 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    a266:	2800      	cmp	r0, #0
    a268:	d0d3      	beq.n	a212 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0xe6>
    a26a:	4601      	mov	r1, r0
    a26c:	f240 6294 	movw	r2, #1684	; 0x694
    a270:	480b      	ldr	r0, [pc, #44]	; (a2a0 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x174>)
    a272:	f7f7 f9d9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(slot);
    a276:	4641      	mov	r1, r8
    a278:	4650      	mov	r0, sl
    a27a:	f7f6 fa55 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    a27e:	2800      	cmp	r0, #0
    a280:	d0cc      	beq.n	a21c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0xf0>
    a282:	4601      	mov	r1, r0
    a284:	f240 62a4 	movw	r2, #1700	; 0x6a4
    a288:	4805      	ldr	r0, [pc, #20]	; (a2a0 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0x174>)
    a28a:	f7f7 f9cd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    a28e:	e7c5      	b.n	a21c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeRegistered(unsigned long, long, long) const+0xf0>
    a290:	20002f60 	.word	0x20002f60
    a294:	20001d2c 	.word	0x20001d2c
    a298:	20002824 	.word	0x20002824
    a29c:	20002838 	.word	0x20002838
    a2a0:	20001b50 	.word	0x20001b50
    a2a4:	20002c08 	.word	0x20002c08

0000a2a8 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const>:
  {
    a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2ac:	4604      	mov	r4, r0
    a2ae:	b0ab      	sub	sp, #172	; 0xac
    a2b0:	460d      	mov	r5, r1
    a2b2:	4616      	mov	r6, r2
    if (this->m_Time_OutputPort[0].isConnected()) {
    a2b4:	f604 2764 	addw	r7, r4, #2660	; 0xa64
    Fw::Time _logTime;
    a2b8:	a804      	add	r0, sp, #16
    a2ba:	f00d faf9 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a2be:	4638      	mov	r0, r7
    a2c0:	f00d fdc4 	bl	17e4c <Fw::PortBase::isConnected() const>
    a2c4:	b9b8      	cbnz	r0, a2f6 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x4e>
    if (this->m_Log_OutputPort[0].isConnected()) {
    a2c6:	f604 178c 	addw	r7, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_OPCODEDISPATCHED;
    a2ca:	4620      	mov	r0, r4
    a2cc:	f007 fe12 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a2d0:	f100 0801 	add.w	r8, r0, #1
    if (this->m_Log_OutputPort[0].isConnected()) {
    a2d4:	4638      	mov	r0, r7
    a2d6:	f00d fdb9 	bl	17e4c <Fw::PortBase::isConnected() const>
    a2da:	2800      	cmp	r0, #0
    a2dc:	d148      	bne.n	a370 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0xc8>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a2de:	f604 17f8 	addw	r7, r4, #2552	; 0x9f8
    a2e2:	4638      	mov	r0, r7
    a2e4:	f00d fdb2 	bl	17e4c <Fw::PortBase::isConnected() const>
    a2e8:	b950      	cbnz	r0, a300 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x58>
  }
    a2ea:	a804      	add	r0, sp, #16
    a2ec:	f00d fa88 	bl	17800 <Fw::Time::~Time()>
    a2f0:	b02b      	add	sp, #172	; 0xac
    a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a2f6:	4638      	mov	r0, r7
    a2f8:	a904      	add	r1, sp, #16
    a2fa:	f00d fc5f 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a2fe:	e7e2      	b.n	a2c6 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x1e>
    TextLogString() : StringBase() { *this = ""; }
    a300:	f10d 0920 	add.w	r9, sp, #32
    a304:	f8df a0f4 	ldr.w	sl, [pc, #244]	; a3fc <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x154>
      {
    a308:	f8df b0f4 	ldr.w	fp, [pc, #244]	; a400 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x158>
    a30c:	4648      	mov	r0, r9
    a30e:	f7f6 ff87 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    a312:	4936      	ldr	r1, [pc, #216]	; (a3ec <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x144>)
    a314:	4648      	mov	r0, r9
    TextLogString() : StringBase() { *this = ""; }
    a316:	f8cd a020 	str.w	sl, [sp, #32]
        (void)StringBase::operator=(src);
    a31a:	f7f6 ffe9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a31e:	f104 0208 	add.w	r2, r4, #8
    a322:	4b33      	ldr	r3, [pc, #204]	; (a3f0 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x148>)
    a324:	4648      	mov	r0, r9
    a326:	4933      	ldr	r1, [pc, #204]	; (a3f4 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x14c>)
    a328:	e9cd 5600 	strd	r5, r6, [sp]
    a32c:	f7f6 ffae 	bl	128c <Fw::StringBase::format(char const*, ...)>
    a330:	a802      	add	r0, sp, #8
    a332:	f7f6 f8fd 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a336:	2304      	movs	r3, #4
      this->m_LogText_OutputPort[0].invoke(
    a338:	4641      	mov	r1, r8
    a33a:	aa04      	add	r2, sp, #16
    a33c:	4638      	mov	r0, r7
    a33e:	f88d 300c 	strb.w	r3, [sp, #12]
    a342:	f8cd 9000 	str.w	r9, [sp]
    a346:	ab02      	add	r3, sp, #8
      {
    a348:	f8cd b008 	str.w	fp, [sp, #8]
    a34c:	f00c fce2 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a350:	a802      	add	r0, sp, #8
    a352:	f8cd b008 	str.w	fp, [sp, #8]
    a356:	f7f6 f8f1 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a35a:	4648      	mov	r0, r9
    a35c:	f8cd a020 	str.w	sl, [sp, #32]
    a360:	f7f6 ff68 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a364:	a804      	add	r0, sp, #16
    a366:	f00d fa4b 	bl	17800 <Fw::Time::~Time()>
    a36a:	b02b      	add	sp, #172	; 0xac
    a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Fw::LogBuffer _logBuff;
    a370:	f10d 0920 	add.w	r9, sp, #32
    a374:	4648      	mov	r0, r9
    a376:	f00c f92f 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    a37a:	4629      	mov	r1, r5
    a37c:	4648      	mov	r0, r9
    a37e:	f7f6 f96d 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    a382:	b9f8      	cbnz	r0, a3c4 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x11c>
      _status = _logBuff.serialize(port);
    a384:	4631      	mov	r1, r6
    a386:	4648      	mov	r0, r9
    a388:	f7f6 f9ce 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    a38c:	bb30      	cbnz	r0, a3dc <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x134>
      {
    a38e:	a802      	add	r0, sp, #8
    a390:	f8df a06c 	ldr.w	sl, [pc, #108]	; a400 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x158>
    a394:	f7f6 f8cc 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a398:	2304      	movs	r3, #4
      this->m_Log_OutputPort[0].invoke(
    a39a:	4638      	mov	r0, r7
    a39c:	aa04      	add	r2, sp, #16
    a39e:	4641      	mov	r1, r8
    a3a0:	f88d 300c 	strb.w	r3, [sp, #12]
    a3a4:	f8cd 9000 	str.w	r9, [sp]
    a3a8:	ab02      	add	r3, sp, #8
      {
    a3aa:	f8cd a008 	str.w	sl, [sp, #8]
    a3ae:	f00c fa99 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    a3b2:	a802      	add	r0, sp, #8
    a3b4:	f8cd a008 	str.w	sl, [sp, #8]
    a3b8:	f7f6 f8c0 	bl	53c <Fw::Serializable::~Serializable()>
    }
    a3bc:	4648      	mov	r0, r9
    a3be:	f00c f8f3 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    a3c2:	e78c      	b.n	a2de <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x36>
      FW_ASSERT(
    a3c4:	4601      	mov	r1, r0
    a3c6:	f240 62fb 	movw	r2, #1787	; 0x6fb
    a3ca:	480b      	ldr	r0, [pc, #44]	; (a3f8 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x150>)
    a3cc:	f7f7 f92c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(port);
    a3d0:	4631      	mov	r1, r6
    a3d2:	4648      	mov	r0, r9
    a3d4:	f7f6 f9a8 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    a3d8:	2800      	cmp	r0, #0
    a3da:	d0d8      	beq.n	a38e <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0xe6>
    a3dc:	4601      	mov	r1, r0
    a3de:	f240 720b 	movw	r2, #1803	; 0x70b
    a3e2:	4805      	ldr	r0, [pc, #20]	; (a3f8 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0x150>)
    a3e4:	f7f7 f920 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    a3e8:	e7d1      	b.n	a38e <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeDispatched(unsigned long, long) const+0xe6>
    a3ea:	bf00      	nop
    a3ec:	20001d2c 	.word	0x20001d2c
    a3f0:	2000275c 	.word	0x2000275c
    a3f4:	20002770 	.word	0x20002770
    a3f8:	20001b50 	.word	0x20001b50
    a3fc:	20002f60 	.word	0x20002f60
    a400:	20002c08 	.word	0x20002c08

0000a404 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const>:
  {
    a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a408:	4604      	mov	r4, r0
    a40a:	b0aa      	sub	sp, #168	; 0xa8
    a40c:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    a40e:	f604 2564 	addw	r5, r4, #2660	; 0xa64
    Fw::Time _logTime;
    a412:	a804      	add	r0, sp, #16
    a414:	f00d fa4c 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a418:	4628      	mov	r0, r5
    a41a:	f00d fd17 	bl	17e4c <Fw::PortBase::isConnected() const>
    a41e:	b9b0      	cbnz	r0, a44e <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    a420:	f604 158c 	addw	r5, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_OPCODECOMPLETED;
    a424:	4620      	mov	r0, r4
    a426:	f007 fd65 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a42a:	1c87      	adds	r7, r0, #2
    if (this->m_Log_OutputPort[0].isConnected()) {
    a42c:	4628      	mov	r0, r5
    a42e:	f00d fd0d 	bl	17e4c <Fw::PortBase::isConnected() const>
    a432:	2800      	cmp	r0, #0
    a434:	d147      	bne.n	a4c6 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a436:	f604 15f8 	addw	r5, r4, #2552	; 0x9f8
    a43a:	4628      	mov	r0, r5
    a43c:	f00d fd06 	bl	17e4c <Fw::PortBase::isConnected() const>
    a440:	b950      	cbnz	r0, a458 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x54>
  }
    a442:	a804      	add	r0, sp, #16
    a444:	f00d f9dc 	bl	17800 <Fw::Time::~Time()>
    a448:	b02a      	add	sp, #168	; 0xa8
    a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a44e:	a904      	add	r1, sp, #16
    a450:	4628      	mov	r0, r5
    a452:	f00d fbb3 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a456:	e7e3      	b.n	a420 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    a458:	f10d 0820 	add.w	r8, sp, #32
    a45c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; a530 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x12c>
      {
    a460:	f8df a0d0 	ldr.w	sl, [pc, #208]	; a534 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x130>
    a464:	4640      	mov	r0, r8
    a466:	f7f6 fedb 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    a46a:	492d      	ldr	r1, [pc, #180]	; (a520 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x11c>)
    a46c:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    a46e:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    a472:	f7f6 ff3d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a476:	f104 0208 	add.w	r2, r4, #8
    a47a:	4b2a      	ldr	r3, [pc, #168]	; (a524 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x120>)
    a47c:	4640      	mov	r0, r8
    a47e:	492a      	ldr	r1, [pc, #168]	; (a528 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x124>)
    a480:	9600      	str	r6, [sp, #0]
    a482:	f7f6 ff03 	bl	128c <Fw::StringBase::format(char const*, ...)>
    a486:	a802      	add	r0, sp, #8
    a488:	f7f6 f852 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a48c:	2304      	movs	r3, #4
      this->m_LogText_OutputPort[0].invoke(
    a48e:	4639      	mov	r1, r7
    a490:	aa04      	add	r2, sp, #16
    a492:	4628      	mov	r0, r5
    a494:	f88d 300c 	strb.w	r3, [sp, #12]
    a498:	f8cd 8000 	str.w	r8, [sp]
    a49c:	ab02      	add	r3, sp, #8
      {
    a49e:	f8cd a008 	str.w	sl, [sp, #8]
    a4a2:	f00c fc37 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a4a6:	a802      	add	r0, sp, #8
    a4a8:	f8cd a008 	str.w	sl, [sp, #8]
    a4ac:	f7f6 f846 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a4b0:	4640      	mov	r0, r8
    a4b2:	f8cd 9020 	str.w	r9, [sp, #32]
    a4b6:	f7f6 febd 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a4ba:	a804      	add	r0, sp, #16
    a4bc:	f00d f9a0 	bl	17800 <Fw::Time::~Time()>
    a4c0:	b02a      	add	sp, #168	; 0xa8
    a4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    a4c6:	f10d 0820 	add.w	r8, sp, #32
    a4ca:	4640      	mov	r0, r8
    a4cc:	f00c f884 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    a4d0:	4631      	mov	r1, r6
    a4d2:	4640      	mov	r0, r8
    a4d4:	f7f6 f8c2 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    a4d8:	b9d0      	cbnz	r0, a510 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x10c>
      {
    a4da:	a802      	add	r0, sp, #8
    a4dc:	f8df 9054 	ldr.w	r9, [pc, #84]	; a534 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x130>
    a4e0:	f7f6 f826 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a4e4:	2304      	movs	r3, #4
      this->m_Log_OutputPort[0].invoke(
    a4e6:	4628      	mov	r0, r5
    a4e8:	aa04      	add	r2, sp, #16
    a4ea:	4639      	mov	r1, r7
    a4ec:	f88d 300c 	strb.w	r3, [sp, #12]
    a4f0:	f8cd 8000 	str.w	r8, [sp]
    a4f4:	ab02      	add	r3, sp, #8
      {
    a4f6:	f8cd 9008 	str.w	r9, [sp, #8]
    a4fa:	f00c f9f3 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    a4fe:	a802      	add	r0, sp, #8
    a500:	f8cd 9008 	str.w	r9, [sp, #8]
    a504:	f7f6 f81a 	bl	53c <Fw::Serializable::~Serializable()>
    }
    a508:	4640      	mov	r0, r8
    a50a:	f00c f84d 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    a50e:	e792      	b.n	a436 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x32>
      FW_ASSERT(
    a510:	4601      	mov	r1, r0
    a512:	f240 725e 	movw	r2, #1886	; 0x75e
    a516:	4805      	ldr	r0, [pc, #20]	; (a52c <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0x128>)
    a518:	f7f7 f886 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    a51c:	e7dd      	b.n	a4da <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeCompleted(unsigned long) const+0xd6>
    a51e:	bf00      	nop
    a520:	20001d2c 	.word	0x20001d2c
    a524:	200026ac 	.word	0x200026ac
    a528:	200026c0 	.word	0x200026c0
    a52c:	20001b50 	.word	0x20001b50
    a530:	20002f60 	.word	0x20002f60
    a534:	20002c08 	.word	0x20002c08

0000a538 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const>:
  {
    a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a53c:	4604      	mov	r4, r0
    a53e:	b0cd      	sub	sp, #308	; 0x134
    a540:	460d      	mov	r5, r1
    a542:	4616      	mov	r6, r2
    if (this->m_Time_OutputPort[0].isConnected()) {
    a544:	f604 2764 	addw	r7, r4, #2660	; 0xa64
    Fw::Time _logTime;
    a548:	a804      	add	r0, sp, #16
    a54a:	f00d f9b1 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a54e:	4638      	mov	r0, r7
    a550:	f00d fc7c 	bl	17e4c <Fw::PortBase::isConnected() const>
    a554:	b9b8      	cbnz	r0, a586 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x4e>
    if (this->m_Log_OutputPort[0].isConnected()) {
    a556:	f604 178c 	addw	r7, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_OPCODEERROR;
    a55a:	4620      	mov	r0, r4
    a55c:	f007 fcca 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a560:	f100 0803 	add.w	r8, r0, #3
    if (this->m_Log_OutputPort[0].isConnected()) {
    a564:	4638      	mov	r0, r7
    a566:	f00d fc71 	bl	17e4c <Fw::PortBase::isConnected() const>
    a56a:	2800      	cmp	r0, #0
    a56c:	d15a      	bne.n	a624 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0xec>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a56e:	f604 17f8 	addw	r7, r4, #2552	; 0x9f8
    a572:	4638      	mov	r0, r7
    a574:	f00d fc6a 	bl	17e4c <Fw::PortBase::isConnected() const>
    a578:	b950      	cbnz	r0, a590 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x58>
  }
    a57a:	a804      	add	r0, sp, #16
    a57c:	f00d f940 	bl	17800 <Fw::Time::~Time()>
    a580:	b04d      	add	sp, #308	; 0x134
    a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a586:	4638      	mov	r0, r7
    a588:	a904      	add	r1, sp, #16
    a58a:	f00d fb17 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a58e:	e7e2      	b.n	a556 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x1e>
    String() : StringBase() { *this = ""; }
    a590:	f8df a120 	ldr.w	sl, [pc, #288]	; a6b4 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x17c>
    a594:	a808      	add	r0, sp, #32
    a596:	f7f6 fe43 	bl	1220 <Fw::StringBase::StringBase()>
    TextLogString() : StringBase() { *this = ""; }
    a59a:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
        (void)StringBase::operator=(src);
    a59e:	4940      	ldr	r1, [pc, #256]	; (a6a0 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x168>)
    a5a0:	a808      	add	r0, sp, #32
    String() : StringBase() { *this = ""; }
    a5a2:	f8cd a020 	str.w	sl, [sp, #32]
        (void)StringBase::operator=(src);
    a5a6:	f7f6 fea3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      error.toString(errorStr);
    a5aa:	a908      	add	r1, sp, #32
    a5ac:	4630      	mov	r0, r6
    a5ae:	f00b fe29 	bl	16204 <Fw::CmdResponse::toString(Fw::StringBase&) const>
    a5b2:	f8df b104 	ldr.w	fp, [pc, #260]	; a6b8 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x180>
    a5b6:	4648      	mov	r0, r9
    a5b8:	f7f6 fe32 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    a5bc:	4938      	ldr	r1, [pc, #224]	; (a6a0 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x168>)
    a5be:	4648      	mov	r0, r9
    TextLogString() : StringBase() { *this = ""; }
    a5c0:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
        (void)StringBase::operator=(src);
    a5c4:	f7f6 fe94 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a5c8:	ab09      	add	r3, sp, #36	; 0x24
    a5ca:	f104 0208 	add.w	r2, r4, #8
    a5ce:	4935      	ldr	r1, [pc, #212]	; (a6a4 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x16c>)
    a5d0:	9301      	str	r3, [sp, #4]
    a5d2:	4648      	mov	r0, r9
    a5d4:	4b34      	ldr	r3, [pc, #208]	; (a6a8 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x170>)
    a5d6:	9500      	str	r5, [sp, #0]
    a5d8:	f7f6 fe58 	bl	128c <Fw::StringBase::format(char const*, ...)>
      {
    a5dc:	a802      	add	r0, sp, #8
    a5de:	f7f5 ffa7 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a5e2:	2304      	movs	r3, #4
      {
    a5e4:	4c31      	ldr	r4, [pc, #196]	; (a6ac <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x174>)
      this->m_LogText_OutputPort[0].invoke(
    a5e6:	4641      	mov	r1, r8
    a5e8:	aa04      	add	r2, sp, #16
    a5ea:	4638      	mov	r0, r7
        this->e = e1;
    a5ec:	f88d 300c 	strb.w	r3, [sp, #12]
    a5f0:	ab02      	add	r3, sp, #8
    a5f2:	f8cd 9000 	str.w	r9, [sp]
      {
    a5f6:	9402      	str	r4, [sp, #8]
    a5f8:	f00c fb8c 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a5fc:	a802      	add	r0, sp, #8
    a5fe:	9402      	str	r4, [sp, #8]
    a600:	f7f5 ff9c 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a604:	4648      	mov	r0, r9
    a606:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
    a60a:	f7f6 fe13 	bl	1234 <Fw::StringBase::~StringBase()>
    ~String() {}
    a60e:	a808      	add	r0, sp, #32
    a610:	f8cd a020 	str.w	sl, [sp, #32]
    a614:	f7f6 fe0e 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a618:	a804      	add	r0, sp, #16
    a61a:	f00d f8f1 	bl	17800 <Fw::Time::~Time()>
    a61e:	b04d      	add	sp, #308	; 0x134
    a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Fw::LogBuffer _logBuff;
    a624:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    a628:	4648      	mov	r0, r9
    a62a:	f00b ffd5 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    a62e:	4629      	mov	r1, r5
    a630:	4648      	mov	r0, r9
    a632:	f7f6 f813 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    a636:	b9f8      	cbnz	r0, a678 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x140>
      _status = _logBuff.serialize(error);
    a638:	4631      	mov	r1, r6
    a63a:	4648      	mov	r0, r9
    a63c:	f7f6 fa60 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    a640:	bb30      	cbnz	r0, a690 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x158>
      {
    a642:	a808      	add	r0, sp, #32
    a644:	f8df a064 	ldr.w	sl, [pc, #100]	; a6ac <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x174>
    a648:	f7f5 ff72 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a64c:	2304      	movs	r3, #4
      this->m_Log_OutputPort[0].invoke(
    a64e:	4638      	mov	r0, r7
    a650:	aa04      	add	r2, sp, #16
    a652:	4641      	mov	r1, r8
    a654:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a658:	f8cd 9000 	str.w	r9, [sp]
    a65c:	ab08      	add	r3, sp, #32
      {
    a65e:	f8cd a020 	str.w	sl, [sp, #32]
    a662:	f00c f93f 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    a666:	a808      	add	r0, sp, #32
    a668:	f8cd a020 	str.w	sl, [sp, #32]
    a66c:	f7f5 ff66 	bl	53c <Fw::Serializable::~Serializable()>
    }
    a670:	4648      	mov	r0, r9
    a672:	f00b ff99 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    a676:	e77a      	b.n	a56e <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x36>
      FW_ASSERT(
    a678:	4601      	mov	r1, r0
    a67a:	f240 72b3 	movw	r2, #1971	; 0x7b3
    a67e:	480c      	ldr	r0, [pc, #48]	; (a6b0 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x178>)
    a680:	f7f6 ffd2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(error);
    a684:	4631      	mov	r1, r6
    a686:	4648      	mov	r0, r9
    a688:	f7f6 fa3a 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    a68c:	2800      	cmp	r0, #0
    a68e:	d0d8      	beq.n	a642 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x10a>
    a690:	4601      	mov	r1, r0
    a692:	f240 72c3 	movw	r2, #1987	; 0x7c3
    a696:	4806      	ldr	r0, [pc, #24]	; (a6b0 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x178>)
    a698:	f7f6 ffc6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    a69c:	e7d1      	b.n	a642 <Svc::CommandDispatcherComponentBase::log_COMMAND_OpCodeError(unsigned long, Fw::CmdResponse) const+0x10a>
    a69e:	bf00      	nop
    a6a0:	20001d2c 	.word	0x20001d2c
    a6a4:	2000267c 	.word	0x2000267c
    a6a8:	2000266c 	.word	0x2000266c
    a6ac:	20002c08 	.word	0x20002c08
    a6b0:	20001b50 	.word	0x20001b50
    a6b4:	200032dc 	.word	0x200032dc
    a6b8:	20002f60 	.word	0x20002f60

0000a6bc <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const>:
  {
    a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6c0:	4604      	mov	r4, r0
    a6c2:	b0aa      	sub	sp, #168	; 0xa8
    a6c4:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    a6c6:	f604 2564 	addw	r5, r4, #2660	; 0xa64
    Fw::Time _logTime;
    a6ca:	a804      	add	r0, sp, #16
    a6cc:	f00d f8f0 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a6d0:	4628      	mov	r0, r5
    a6d2:	f00d fbbb 	bl	17e4c <Fw::PortBase::isConnected() const>
    a6d6:	b9b0      	cbnz	r0, a706 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    a6d8:	f604 158c 	addw	r5, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_INVALIDCOMMAND;
    a6dc:	4620      	mov	r0, r4
    a6de:	f007 fc09 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a6e2:	1d47      	adds	r7, r0, #5
    if (this->m_Log_OutputPort[0].isConnected()) {
    a6e4:	4628      	mov	r0, r5
    a6e6:	f00d fbb1 	bl	17e4c <Fw::PortBase::isConnected() const>
    a6ea:	2800      	cmp	r0, #0
    a6ec:	d147      	bne.n	a77e <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a6ee:	f604 15f8 	addw	r5, r4, #2552	; 0x9f8
    a6f2:	4628      	mov	r0, r5
    a6f4:	f00d fbaa 	bl	17e4c <Fw::PortBase::isConnected() const>
    a6f8:	b950      	cbnz	r0, a710 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x54>
  }
    a6fa:	a804      	add	r0, sp, #16
    a6fc:	f00d f880 	bl	17800 <Fw::Time::~Time()>
    a700:	b02a      	add	sp, #168	; 0xa8
    a702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a706:	a904      	add	r1, sp, #16
    a708:	4628      	mov	r0, r5
    a70a:	f00d fa57 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a70e:	e7e3      	b.n	a6d8 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    a710:	f10d 0820 	add.w	r8, sp, #32
    a714:	f8df 90d0 	ldr.w	r9, [pc, #208]	; a7e8 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x12c>
      {
    a718:	f8df a0d0 	ldr.w	sl, [pc, #208]	; a7ec <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x130>
    a71c:	4640      	mov	r0, r8
    a71e:	f7f6 fd7f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    a722:	492d      	ldr	r1, [pc, #180]	; (a7d8 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x11c>)
    a724:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    a726:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    a72a:	f7f6 fde1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a72e:	f104 0208 	add.w	r2, r4, #8
    a732:	4b2a      	ldr	r3, [pc, #168]	; (a7dc <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x120>)
    a734:	4640      	mov	r0, r8
    a736:	492a      	ldr	r1, [pc, #168]	; (a7e0 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x124>)
    a738:	9600      	str	r6, [sp, #0]
    a73a:	f7f6 fda7 	bl	128c <Fw::StringBase::format(char const*, ...)>
    a73e:	a802      	add	r0, sp, #8
    a740:	f7f5 fef6 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a744:	2302      	movs	r3, #2
      this->m_LogText_OutputPort[0].invoke(
    a746:	4639      	mov	r1, r7
    a748:	aa04      	add	r2, sp, #16
    a74a:	4628      	mov	r0, r5
    a74c:	f88d 300c 	strb.w	r3, [sp, #12]
    a750:	f8cd 8000 	str.w	r8, [sp]
    a754:	ab02      	add	r3, sp, #8
      {
    a756:	f8cd a008 	str.w	sl, [sp, #8]
    a75a:	f00c fadb 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a75e:	a802      	add	r0, sp, #8
    a760:	f8cd a008 	str.w	sl, [sp, #8]
    a764:	f7f5 feea 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a768:	4640      	mov	r0, r8
    a76a:	f8cd 9020 	str.w	r9, [sp, #32]
    a76e:	f7f6 fd61 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a772:	a804      	add	r0, sp, #16
    a774:	f00d f844 	bl	17800 <Fw::Time::~Time()>
    a778:	b02a      	add	sp, #168	; 0xa8
    a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    a77e:	f10d 0820 	add.w	r8, sp, #32
    a782:	4640      	mov	r0, r8
    a784:	f00b ff28 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    a788:	4631      	mov	r1, r6
    a78a:	4640      	mov	r0, r8
    a78c:	f7f5 ff66 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    a790:	b9d0      	cbnz	r0, a7c8 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x10c>
      {
    a792:	a802      	add	r0, sp, #8
    a794:	f8df 9054 	ldr.w	r9, [pc, #84]	; a7ec <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x130>
    a798:	f7f5 feca 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a79c:	2302      	movs	r3, #2
      this->m_Log_OutputPort[0].invoke(
    a79e:	4628      	mov	r0, r5
    a7a0:	aa04      	add	r2, sp, #16
    a7a2:	4639      	mov	r1, r7
    a7a4:	f88d 300c 	strb.w	r3, [sp, #12]
    a7a8:	f8cd 8000 	str.w	r8, [sp]
    a7ac:	ab02      	add	r3, sp, #8
      {
    a7ae:	f8cd 9008 	str.w	r9, [sp, #8]
    a7b2:	f00c f897 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    a7b6:	a802      	add	r0, sp, #8
    a7b8:	f8cd 9008 	str.w	r9, [sp, #8]
    a7bc:	f7f5 febe 	bl	53c <Fw::Serializable::~Serializable()>
    }
    a7c0:	4640      	mov	r0, r8
    a7c2:	f00b fef1 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    a7c6:	e792      	b.n	a6ee <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x32>
      FW_ASSERT(
    a7c8:	4601      	mov	r1, r0
    a7ca:	f640 026e 	movw	r2, #2158	; 0x86e
    a7ce:	4805      	ldr	r0, [pc, #20]	; (a7e4 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0x128>)
    a7d0:	f7f6 ff2a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    a7d4:	e7dd      	b.n	a792 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_InvalidCommand(unsigned long) const+0xd6>
    a7d6:	bf00      	nop
    a7d8:	20001d2c 	.word	0x20001d2c
    a7dc:	200027a0 	.word	0x200027a0
    a7e0:	200027b0 	.word	0x200027b0
    a7e4:	20001b50 	.word	0x20001b50
    a7e8:	20002f60 	.word	0x20002f60
    a7ec:	20002c08 	.word	0x20002c08

0000a7f0 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const>:
  {
    a7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7f4:	4604      	mov	r4, r0
    a7f6:	b0aa      	sub	sp, #168	; 0xa8
    a7f8:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    a7fa:	f604 2564 	addw	r5, r4, #2660	; 0xa64
    Fw::Time _logTime;
    a7fe:	a804      	add	r0, sp, #16
    a800:	f00d f856 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a804:	4628      	mov	r0, r5
    a806:	f00d fb21 	bl	17e4c <Fw::PortBase::isConnected() const>
    a80a:	b9b0      	cbnz	r0, a83a <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    a80c:	f604 158c 	addw	r5, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_TOOMANYCOMMANDS;
    a810:	4620      	mov	r0, r4
    a812:	f007 fb6f 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a816:	1d87      	adds	r7, r0, #6
    if (this->m_Log_OutputPort[0].isConnected()) {
    a818:	4628      	mov	r0, r5
    a81a:	f00d fb17 	bl	17e4c <Fw::PortBase::isConnected() const>
    a81e:	2800      	cmp	r0, #0
    a820:	d147      	bne.n	a8b2 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0xc2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a822:	f604 15f8 	addw	r5, r4, #2552	; 0x9f8
    a826:	4628      	mov	r0, r5
    a828:	f00d fb10 	bl	17e4c <Fw::PortBase::isConnected() const>
    a82c:	b950      	cbnz	r0, a844 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x54>
  }
    a82e:	a804      	add	r0, sp, #16
    a830:	f00c ffe6 	bl	17800 <Fw::Time::~Time()>
    a834:	b02a      	add	sp, #168	; 0xa8
    a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a83a:	a904      	add	r1, sp, #16
    a83c:	4628      	mov	r0, r5
    a83e:	f00d f9bd 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a842:	e7e3      	b.n	a80c <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    a844:	f10d 0820 	add.w	r8, sp, #32
    a848:	f8df 90d0 	ldr.w	r9, [pc, #208]	; a91c <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x12c>
      {
    a84c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; a920 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x130>
    a850:	4640      	mov	r0, r8
    a852:	f7f6 fce5 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    a856:	492d      	ldr	r1, [pc, #180]	; (a90c <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x11c>)
    a858:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    a85a:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    a85e:	f7f6 fd47 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a862:	f104 0208 	add.w	r2, r4, #8
    a866:	4b2a      	ldr	r3, [pc, #168]	; (a910 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x120>)
    a868:	4640      	mov	r0, r8
    a86a:	492a      	ldr	r1, [pc, #168]	; (a914 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x124>)
    a86c:	9600      	str	r6, [sp, #0]
    a86e:	f7f6 fd0d 	bl	128c <Fw::StringBase::format(char const*, ...)>
    a872:	a802      	add	r0, sp, #8
    a874:	f7f5 fe5c 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a878:	2302      	movs	r3, #2
      this->m_LogText_OutputPort[0].invoke(
    a87a:	4639      	mov	r1, r7
    a87c:	aa04      	add	r2, sp, #16
    a87e:	4628      	mov	r0, r5
    a880:	f88d 300c 	strb.w	r3, [sp, #12]
    a884:	f8cd 8000 	str.w	r8, [sp]
    a888:	ab02      	add	r3, sp, #8
      {
    a88a:	f8cd a008 	str.w	sl, [sp, #8]
    a88e:	f00c fa41 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a892:	a802      	add	r0, sp, #8
    a894:	f8cd a008 	str.w	sl, [sp, #8]
    a898:	f7f5 fe50 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a89c:	4640      	mov	r0, r8
    a89e:	f8cd 9020 	str.w	r9, [sp, #32]
    a8a2:	f7f6 fcc7 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a8a6:	a804      	add	r0, sp, #16
    a8a8:	f00c ffaa 	bl	17800 <Fw::Time::~Time()>
    a8ac:	b02a      	add	sp, #168	; 0xa8
    a8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    a8b2:	f10d 0820 	add.w	r8, sp, #32
    a8b6:	4640      	mov	r0, r8
    a8b8:	f00b fe8e 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    a8bc:	4631      	mov	r1, r6
    a8be:	4640      	mov	r0, r8
    a8c0:	f7f5 fecc 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    a8c4:	b9d0      	cbnz	r0, a8fc <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x10c>
      {
    a8c6:	a802      	add	r0, sp, #8
    a8c8:	f8df 9054 	ldr.w	r9, [pc, #84]	; a920 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x130>
    a8cc:	f7f5 fe30 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a8d0:	2302      	movs	r3, #2
      this->m_Log_OutputPort[0].invoke(
    a8d2:	4628      	mov	r0, r5
    a8d4:	aa04      	add	r2, sp, #16
    a8d6:	4639      	mov	r1, r7
    a8d8:	f88d 300c 	strb.w	r3, [sp, #12]
    a8dc:	f8cd 8000 	str.w	r8, [sp]
    a8e0:	ab02      	add	r3, sp, #8
      {
    a8e2:	f8cd 9008 	str.w	r9, [sp, #8]
    a8e6:	f00b fffd 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    a8ea:	a802      	add	r0, sp, #8
    a8ec:	f8cd 9008 	str.w	r9, [sp, #8]
    a8f0:	f7f5 fe24 	bl	53c <Fw::Serializable::~Serializable()>
    }
    a8f4:	4640      	mov	r0, r8
    a8f6:	f00b fe57 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    a8fa:	e792      	b.n	a822 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x32>
      FW_ASSERT(
    a8fc:	4601      	mov	r1, r0
    a8fe:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
    a902:	4805      	ldr	r0, [pc, #20]	; (a918 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0x128>)
    a904:	f7f6 fe90 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    a908:	e7dd      	b.n	a8c6 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_TooManyCommands(unsigned long) const+0xd6>
    a90a:	bf00      	nop
    a90c:	20001d2c 	.word	0x20001d2c
    a910:	200027d8 	.word	0x200027d8
    a914:	200027ec 	.word	0x200027ec
    a918:	20001b50 	.word	0x20001b50
    a91c:	20002f60 	.word	0x20002f60
    a920:	20002c08 	.word	0x20002c08

0000a924 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const>:
  {
    a924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a928:	4604      	mov	r4, r0
    a92a:	b0ab      	sub	sp, #172	; 0xac
    if (this->m_Time_OutputPort[0].isConnected()) {
    a92c:	f604 2564 	addw	r5, r4, #2660	; 0xa64
    Fw::Time _logTime;
    a930:	a804      	add	r0, sp, #16
    a932:	f00c ffbd 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    a936:	4628      	mov	r0, r5
    a938:	f00d fa88 	bl	17e4c <Fw::PortBase::isConnected() const>
    a93c:	b9b8      	cbnz	r0, a96e <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x4a>
    _id = this->getIdBase() + EVENTID_NOOPRECEIVED;
    a93e:	4620      	mov	r0, r4
    if (this->m_Log_OutputPort[0].isConnected()) {
    a940:	f604 158c 	addw	r5, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_NOOPRECEIVED;
    a944:	f007 fad6 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    a948:	4606      	mov	r6, r0
    if (this->m_Log_OutputPort[0].isConnected()) {
    a94a:	4628      	mov	r0, r5
    _id = this->getIdBase() + EVENTID_NOOPRECEIVED;
    a94c:	3607      	adds	r6, #7
    if (this->m_Log_OutputPort[0].isConnected()) {
    a94e:	f00d fa7d 	bl	17e4c <Fw::PortBase::isConnected() const>
    a952:	2800      	cmp	r0, #0
    a954:	d144      	bne.n	a9e0 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0xbc>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    a956:	f604 15f8 	addw	r5, r4, #2552	; 0x9f8
    a95a:	4628      	mov	r0, r5
    a95c:	f00d fa76 	bl	17e4c <Fw::PortBase::isConnected() const>
    a960:	b950      	cbnz	r0, a978 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x54>
  }
    a962:	a804      	add	r0, sp, #16
    a964:	f00c ff4c 	bl	17800 <Fw::Time::~Time()>
    a968:	b02b      	add	sp, #172	; 0xac
    a96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    a96e:	a904      	add	r1, sp, #16
    a970:	4628      	mov	r0, r5
    a972:	f00d f923 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    a976:	e7e2      	b.n	a93e <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x1a>
    TextLogString() : StringBase() { *this = ""; }
    a978:	af08      	add	r7, sp, #32
    a97a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; aa28 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x104>
      {
    a97e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; aa2c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x108>
    a982:	4638      	mov	r0, r7
    a984:	f7f6 fc4c 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    a988:	4924      	ldr	r1, [pc, #144]	; (aa1c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0xf8>)
    a98a:	4638      	mov	r0, r7
    TextLogString() : StringBase() { *this = ""; }
    a98c:	f8cd 8020 	str.w	r8, [sp, #32]
        (void)StringBase::operator=(src);
    a990:	f7f6 fcae 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    a994:	f104 0208 	add.w	r2, r4, #8
    a998:	4b21      	ldr	r3, [pc, #132]	; (aa20 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0xfc>)
    a99a:	4638      	mov	r0, r7
    a99c:	4921      	ldr	r1, [pc, #132]	; (aa24 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x100>)
    a99e:	f7f6 fc75 	bl	128c <Fw::StringBase::format(char const*, ...)>
    a9a2:	a802      	add	r0, sp, #8
    a9a4:	f7f5 fdc4 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a9a8:	2305      	movs	r3, #5
      this->m_LogText_OutputPort[0].invoke(
    a9aa:	4631      	mov	r1, r6
    a9ac:	aa04      	add	r2, sp, #16
    a9ae:	4628      	mov	r0, r5
    a9b0:	f88d 300c 	strb.w	r3, [sp, #12]
    a9b4:	9700      	str	r7, [sp, #0]
    a9b6:	ab02      	add	r3, sp, #8
      {
    a9b8:	f8cd 9008 	str.w	r9, [sp, #8]
    a9bc:	f00c f9aa 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    a9c0:	a802      	add	r0, sp, #8
    a9c2:	f8cd 9008 	str.w	r9, [sp, #8]
    a9c6:	f7f5 fdb9 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    a9ca:	4638      	mov	r0, r7
    a9cc:	f8cd 8020 	str.w	r8, [sp, #32]
    a9d0:	f7f6 fc30 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    a9d4:	a804      	add	r0, sp, #16
    a9d6:	f00c ff13 	bl	17800 <Fw::Time::~Time()>
    a9da:	b02b      	add	sp, #172	; 0xac
    a9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Fw::LogBuffer _logBuff;
    a9e0:	af08      	add	r7, sp, #32
      {
    a9e2:	f8df 8048 	ldr.w	r8, [pc, #72]	; aa2c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x108>
    a9e6:	4638      	mov	r0, r7
    a9e8:	f00b fdf6 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
    a9ec:	a802      	add	r0, sp, #8
    a9ee:	f7f5 fd9f 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    a9f2:	2305      	movs	r3, #5
      this->m_Log_OutputPort[0].invoke(
    a9f4:	4628      	mov	r0, r5
    a9f6:	aa04      	add	r2, sp, #16
    a9f8:	4631      	mov	r1, r6
    a9fa:	f88d 300c 	strb.w	r3, [sp, #12]
    a9fe:	9700      	str	r7, [sp, #0]
    aa00:	ab02      	add	r3, sp, #8
      {
    aa02:	f8cd 8008 	str.w	r8, [sp, #8]
    aa06:	f00b ff6d 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    aa0a:	a802      	add	r0, sp, #8
    aa0c:	f8cd 8008 	str.w	r8, [sp, #8]
    aa10:	f7f5 fd94 	bl	53c <Fw::Serializable::~Serializable()>
    }
    aa14:	4638      	mov	r0, r7
    aa16:	f00b fdc7 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    aa1a:	e79c      	b.n	a956 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpReceived() const+0x32>
    aa1c:	20001d2c 	.word	0x20001d2c
    aa20:	200026e0 	.word	0x200026e0
    aa24:	200026f0 	.word	0x200026f0
    aa28:	20002f60 	.word	0x20002f60
    aa2c:	20002c08 	.word	0x20002c08

0000aa30 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const>:
  {
    aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa34:	4604      	mov	r4, r0
    aa36:	b0aa      	sub	sp, #168	; 0xa8
    aa38:	460d      	mov	r5, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    aa3a:	f604 2664 	addw	r6, r4, #2660	; 0xa64
    Fw::Time _logTime;
    aa3e:	a804      	add	r0, sp, #16
    aa40:	f00c ff36 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    aa44:	4630      	mov	r0, r6
    aa46:	f00d fa01 	bl	17e4c <Fw::PortBase::isConnected() const>
    aa4a:	b9b8      	cbnz	r0, aa7c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x4c>
    if (this->m_Log_OutputPort[0].isConnected()) {
    aa4c:	f604 168c 	addw	r6, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_NOOPSTRINGRECEIVED;
    aa50:	4620      	mov	r0, r4
    aa52:	f007 fa4f 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    aa56:	f100 0708 	add.w	r7, r0, #8
    if (this->m_Log_OutputPort[0].isConnected()) {
    aa5a:	4630      	mov	r0, r6
    aa5c:	f00d f9f6 	bl	17e4c <Fw::PortBase::isConnected() const>
    aa60:	2800      	cmp	r0, #0
    aa62:	d14b      	bne.n	aafc <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0xcc>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    aa64:	f604 16f8 	addw	r6, r4, #2552	; 0x9f8
    aa68:	4630      	mov	r0, r6
    aa6a:	f00d f9ef 	bl	17e4c <Fw::PortBase::isConnected() const>
    aa6e:	b950      	cbnz	r0, aa86 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x56>
  }
    aa70:	a804      	add	r0, sp, #16
    aa72:	f00c fec5 	bl	17800 <Fw::Time::~Time()>
    aa76:	b02a      	add	sp, #168	; 0xa8
    aa78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    aa7c:	a904      	add	r1, sp, #16
    aa7e:	4630      	mov	r0, r6
    aa80:	f00d f89c 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    aa84:	e7e2      	b.n	aa4c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x1c>
    TextLogString() : StringBase() { *this = ""; }
    aa86:	f10d 0820 	add.w	r8, sp, #32
    aa8a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; ab68 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x138>
      {
    aa8e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; ab6c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x13c>
    aa92:	4640      	mov	r0, r8
    aa94:	f7f6 fbc4 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    aa98:	492f      	ldr	r1, [pc, #188]	; (ab58 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x128>)
    aa9a:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    aa9c:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    aaa0:	f7f6 fc26 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        message.toChar()
    aaa4:	682b      	ldr	r3, [r5, #0]
      _logString.format(
    aaa6:	4628      	mov	r0, r5
    aaa8:	695b      	ldr	r3, [r3, #20]
    aaaa:	4798      	blx	r3
    aaac:	f104 0208 	add.w	r2, r4, #8
    aab0:	4b2a      	ldr	r3, [pc, #168]	; (ab5c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x12c>)
    aab2:	492b      	ldr	r1, [pc, #172]	; (ab60 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x130>)
    aab4:	9000      	str	r0, [sp, #0]
    aab6:	4640      	mov	r0, r8
    aab8:	f7f6 fbe8 	bl	128c <Fw::StringBase::format(char const*, ...)>
    aabc:	a802      	add	r0, sp, #8
    aabe:	f7f5 fd37 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    aac2:	2305      	movs	r3, #5
      this->m_LogText_OutputPort[0].invoke(
    aac4:	4639      	mov	r1, r7
    aac6:	aa04      	add	r2, sp, #16
    aac8:	4630      	mov	r0, r6
    aaca:	f88d 300c 	strb.w	r3, [sp, #12]
    aace:	f8cd 8000 	str.w	r8, [sp]
    aad2:	ab02      	add	r3, sp, #8
      {
    aad4:	f8cd a008 	str.w	sl, [sp, #8]
    aad8:	f00c f91c 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    aadc:	a802      	add	r0, sp, #8
    aade:	f8cd a008 	str.w	sl, [sp, #8]
    aae2:	f7f5 fd2b 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    aae6:	4640      	mov	r0, r8
    aae8:	f8cd 9020 	str.w	r9, [sp, #32]
    aaec:	f7f6 fba2 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    aaf0:	a804      	add	r0, sp, #16
    aaf2:	f00c fe85 	bl	17800 <Fw::Time::~Time()>
    aaf6:	b02a      	add	sp, #168	; 0xa8
    aaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    aafc:	f10d 0820 	add.w	r8, sp, #32
    ab00:	4640      	mov	r0, r8
    ab02:	f00b fd69 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = message.serialize(_logBuff, FW_MIN(FW_LOG_STRING_MAX_SIZE, 40));
    ab06:	682b      	ldr	r3, [r5, #0]
    ab08:	2228      	movs	r2, #40	; 0x28
    ab0a:	4641      	mov	r1, r8
    ab0c:	69db      	ldr	r3, [r3, #28]
    ab0e:	4628      	mov	r0, r5
    ab10:	4798      	blx	r3
      FW_ASSERT(
    ab12:	b9d0      	cbnz	r0, ab4a <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x11a>
      {
    ab14:	a802      	add	r0, sp, #8
    ab16:	f8df 9054 	ldr.w	r9, [pc, #84]	; ab6c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x13c>
    ab1a:	f7f5 fd09 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    ab1e:	2305      	movs	r3, #5
      this->m_Log_OutputPort[0].invoke(
    ab20:	4630      	mov	r0, r6
    ab22:	aa04      	add	r2, sp, #16
    ab24:	4639      	mov	r1, r7
    ab26:	f88d 300c 	strb.w	r3, [sp, #12]
    ab2a:	f8cd 8000 	str.w	r8, [sp]
    ab2e:	ab02      	add	r3, sp, #8
      {
    ab30:	f8cd 9008 	str.w	r9, [sp, #8]
    ab34:	f00b fed6 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    ab38:	a802      	add	r0, sp, #8
    ab3a:	f8cd 9008 	str.w	r9, [sp, #8]
    ab3e:	f7f5 fcfd 	bl	53c <Fw::Serializable::~Serializable()>
    }
    ab42:	4640      	mov	r0, r8
    ab44:	f00b fd30 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    ab48:	e78c      	b.n	aa64 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x34>
      FW_ASSERT(
    ab4a:	4601      	mov	r1, r0
    ab4c:	f640 1249 	movw	r2, #2377	; 0x949
    ab50:	4804      	ldr	r0, [pc, #16]	; (ab64 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0x134>)
    ab52:	f7f6 fd69 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ab56:	e7dd      	b.n	ab14 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_NoOpStringReceived(Fw::StringBase const&) const+0xe4>
    ab58:	20001d2c 	.word	0x20001d2c
    ab5c:	20002908 	.word	0x20002908
    ab60:	2000291c 	.word	0x2000291c
    ab64:	20001b50 	.word	0x20001b50
    ab68:	20002f60 	.word	0x20002f60
    ab6c:	20002c08 	.word	0x20002c08

0000ab70 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const>:
  {
    ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab74:	4604      	mov	r4, r0
    ab76:	460e      	mov	r6, r1
    ab78:	4617      	mov	r7, r2
    if (this->m_Time_OutputPort[0].isConnected()) {
    ab7a:	f604 2564 	addw	r5, r4, #2660	; 0xa64
  {
    ab7e:	ed2d 8b02 	vpush	{d8}
    ab82:	b0af      	sub	sp, #188	; 0xbc
    ab84:	eeb0 8a40 	vmov.f32	s16, s0
    Fw::Time _logTime;
    ab88:	a808      	add	r0, sp, #32
    ab8a:	f00c fe91 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    ab8e:	4628      	mov	r0, r5
    ab90:	f00d f95c 	bl	17e4c <Fw::PortBase::isConnected() const>
    ab94:	b9c8      	cbnz	r0, abca <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x5a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    ab96:	f604 188c 	addw	r8, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_TESTCMD1ARGS;
    ab9a:	4620      	mov	r0, r4
    ab9c:	f007 f9aa 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    aba0:	f100 0509 	add.w	r5, r0, #9
    if (this->m_Log_OutputPort[0].isConnected()) {
    aba4:	4640      	mov	r0, r8
    aba6:	f00d f951 	bl	17e4c <Fw::PortBase::isConnected() const>
    abaa:	2800      	cmp	r0, #0
    abac:	d149      	bne.n	ac42 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0xd2>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    abae:	f604 18f8 	addw	r8, r4, #2552	; 0x9f8
    abb2:	4640      	mov	r0, r8
    abb4:	f00d f94a 	bl	17e4c <Fw::PortBase::isConnected() const>
    abb8:	b960      	cbnz	r0, abd4 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x64>
  }
    abba:	a808      	add	r0, sp, #32
    abbc:	f00c fe20 	bl	17800 <Fw::Time::~Time()>
    abc0:	b02f      	add	sp, #188	; 0xbc
    abc2:	ecbd 8b02 	vpop	{d8}
    abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    abca:	4628      	mov	r0, r5
    abcc:	a908      	add	r1, sp, #32
    abce:	f00c fff5 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    abd2:	e7e0      	b.n	ab96 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x26>
    TextLogString() : StringBase() { *this = ""; }
    abd4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    abd8:	f8df a118 	ldr.w	sl, [pc, #280]	; acf4 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x184>
      {
    abdc:	f8df b118 	ldr.w	fp, [pc, #280]	; acf8 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x188>
    abe0:	4648      	mov	r0, r9
    abe2:	f7f6 fb1d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    abe6:	493f      	ldr	r1, [pc, #252]	; (ace4 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x174>)
    abe8:	4648      	mov	r0, r9
    TextLogString() : StringBase() { *this = ""; }
    abea:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
        (void)StringBase::operator=(src);
    abee:	f7f6 fb7f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    abf2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    abf6:	f104 0208 	add.w	r2, r4, #8
    abfa:	4b3b      	ldr	r3, [pc, #236]	; (ace8 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x178>)
    abfc:	493b      	ldr	r1, [pc, #236]	; (acec <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x17c>)
    abfe:	4648      	mov	r0, r9
    ac00:	9704      	str	r7, [sp, #16]
    ac02:	9600      	str	r6, [sp, #0]
    ac04:	ed8d 8b02 	vstr	d8, [sp, #8]
    ac08:	f7f6 fb40 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ac0c:	a806      	add	r0, sp, #24
    ac0e:	f7f5 fc8f 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    ac12:	2305      	movs	r3, #5
      this->m_LogText_OutputPort[0].invoke(
    ac14:	4629      	mov	r1, r5
    ac16:	4640      	mov	r0, r8
    ac18:	aa08      	add	r2, sp, #32
    ac1a:	f88d 301c 	strb.w	r3, [sp, #28]
    ac1e:	f8cd 9000 	str.w	r9, [sp]
    ac22:	ab06      	add	r3, sp, #24
      {
    ac24:	f8cd b018 	str.w	fp, [sp, #24]
    ac28:	f00c f874 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    ac2c:	a806      	add	r0, sp, #24
    ac2e:	f8cd b018 	str.w	fp, [sp, #24]
    ac32:	f7f5 fc83 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    ac36:	4648      	mov	r0, r9
    ac38:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    ac3c:	f7f6 fafa 	bl	1234 <Fw::StringBase::~StringBase()>
    ac40:	e7bb      	b.n	abba <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x4a>
      Fw::LogBuffer _logBuff;
    ac42:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    ac46:	4648      	mov	r0, r9
    ac48:	f00b fcc6 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(arg1);
    ac4c:	4631      	mov	r1, r6
    ac4e:	4648      	mov	r0, r9
    ac50:	f7f5 fd6a 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    ac54:	bb28      	cbnz	r0, aca2 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x132>
      _status = _logBuff.serialize(arg2);
    ac56:	eeb0 0a48 	vmov.f32	s0, s16
    ac5a:	4648      	mov	r0, r9
    ac5c:	f7f5 fe6c 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    ac60:	bb60      	cbnz	r0, acbc <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x14c>
      _status = _logBuff.serialize(arg3);
    ac62:	4639      	mov	r1, r7
    ac64:	4648      	mov	r0, r9
    ac66:	f7f5 fc75 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
      FW_ASSERT(
    ac6a:	bb98      	cbnz	r0, acd4 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x164>
      {
    ac6c:	a806      	add	r0, sp, #24
    ac6e:	f8df a088 	ldr.w	sl, [pc, #136]	; acf8 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x188>
    ac72:	f7f5 fc5d 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    ac76:	2305      	movs	r3, #5
      this->m_Log_OutputPort[0].invoke(
    ac78:	4640      	mov	r0, r8
    ac7a:	aa08      	add	r2, sp, #32
    ac7c:	4629      	mov	r1, r5
    ac7e:	f88d 301c 	strb.w	r3, [sp, #28]
    ac82:	f8cd 9000 	str.w	r9, [sp]
    ac86:	ab06      	add	r3, sp, #24
      {
    ac88:	f8cd a018 	str.w	sl, [sp, #24]
    ac8c:	f00b fe2a 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    ac90:	a806      	add	r0, sp, #24
    ac92:	f8cd a018 	str.w	sl, [sp, #24]
    ac96:	f7f5 fc51 	bl	53c <Fw::Serializable::~Serializable()>
    }
    ac9a:	4648      	mov	r0, r9
    ac9c:	f00b fc84 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    aca0:	e785      	b.n	abae <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x3e>
      FW_ASSERT(
    aca2:	4601      	mov	r1, r0
    aca4:	f640 129f 	movw	r2, #2463	; 0x99f
    aca8:	4811      	ldr	r0, [pc, #68]	; (acf0 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x180>)
    acaa:	f7f6 fcbd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(arg2);
    acae:	eeb0 0a48 	vmov.f32	s0, s16
    acb2:	4648      	mov	r0, r9
    acb4:	f7f5 fe40 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    acb8:	2800      	cmp	r0, #0
    acba:	d0d2      	beq.n	ac62 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0xf2>
    acbc:	4601      	mov	r1, r0
    acbe:	f640 12af 	movw	r2, #2479	; 0x9af
    acc2:	480b      	ldr	r0, [pc, #44]	; (acf0 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x180>)
    acc4:	f7f6 fcb0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(arg3);
    acc8:	4639      	mov	r1, r7
    acca:	4648      	mov	r0, r9
    accc:	f7f5 fc42 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
      FW_ASSERT(
    acd0:	2800      	cmp	r0, #0
    acd2:	d0cb      	beq.n	ac6c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0xfc>
    acd4:	4601      	mov	r1, r0
    acd6:	f640 12bf 	movw	r2, #2495	; 0x9bf
    acda:	4805      	ldr	r0, [pc, #20]	; (acf0 <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0x180>)
    acdc:	f7f6 fca4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ace0:	e7c4      	b.n	ac6c <Svc::CommandDispatcherComponentBase::log_ACTIVITY_HI_TestCmd1Args(long, float, unsigned char) const+0xfc>
    ace2:	bf00      	nop
    ace4:	20001d2c 	.word	0x20001d2c
    ace8:	20002714 	.word	0x20002714
    acec:	20002724 	.word	0x20002724
    acf0:	20001b50 	.word	0x20001b50
    acf4:	20002f60 	.word	0x20002f60
    acf8:	20002c08 	.word	0x20002c08

0000acfc <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const>:
  {
    acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad00:	4604      	mov	r4, r0
    ad02:	b0ab      	sub	sp, #172	; 0xac
    ad04:	460d      	mov	r5, r1
    ad06:	4616      	mov	r6, r2
    if (this->m_Time_OutputPort[0].isConnected()) {
    ad08:	f604 2764 	addw	r7, r4, #2660	; 0xa64
    Fw::Time _logTime;
    ad0c:	a804      	add	r0, sp, #16
    ad0e:	f00c fdcf 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    ad12:	4638      	mov	r0, r7
    ad14:	f00d f89a 	bl	17e4c <Fw::PortBase::isConnected() const>
    ad18:	b9b8      	cbnz	r0, ad4a <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x4e>
    if (this->m_Log_OutputPort[0].isConnected()) {
    ad1a:	f604 178c 	addw	r7, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_OPCODEREREGISTERED;
    ad1e:	4620      	mov	r0, r4
    ad20:	f007 f8e8 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    ad24:	f100 080a 	add.w	r8, r0, #10
    if (this->m_Log_OutputPort[0].isConnected()) {
    ad28:	4638      	mov	r0, r7
    ad2a:	f00d f88f 	bl	17e4c <Fw::PortBase::isConnected() const>
    ad2e:	2800      	cmp	r0, #0
    ad30:	d148      	bne.n	adc4 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0xc8>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    ad32:	f604 17f8 	addw	r7, r4, #2552	; 0x9f8
    ad36:	4638      	mov	r0, r7
    ad38:	f00d f888 	bl	17e4c <Fw::PortBase::isConnected() const>
    ad3c:	b950      	cbnz	r0, ad54 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x58>
  }
    ad3e:	a804      	add	r0, sp, #16
    ad40:	f00c fd5e 	bl	17800 <Fw::Time::~Time()>
    ad44:	b02b      	add	sp, #172	; 0xac
    ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    ad4a:	4638      	mov	r0, r7
    ad4c:	a904      	add	r1, sp, #16
    ad4e:	f00c ff35 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    ad52:	e7e2      	b.n	ad1a <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x1e>
    TextLogString() : StringBase() { *this = ""; }
    ad54:	f10d 0920 	add.w	r9, sp, #32
    ad58:	f8df a0f4 	ldr.w	sl, [pc, #244]	; ae50 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x154>
      {
    ad5c:	f8df b0f4 	ldr.w	fp, [pc, #244]	; ae54 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x158>
    ad60:	4648      	mov	r0, r9
    ad62:	f7f6 fa5d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    ad66:	4936      	ldr	r1, [pc, #216]	; (ae40 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x144>)
    ad68:	4648      	mov	r0, r9
    TextLogString() : StringBase() { *this = ""; }
    ad6a:	f8cd a020 	str.w	sl, [sp, #32]
        (void)StringBase::operator=(src);
    ad6e:	f7f6 fabf 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    ad72:	f104 0208 	add.w	r2, r4, #8
    ad76:	4b33      	ldr	r3, [pc, #204]	; (ae44 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x148>)
    ad78:	4648      	mov	r0, r9
    ad7a:	4933      	ldr	r1, [pc, #204]	; (ae48 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x14c>)
    ad7c:	e9cd 5600 	strd	r5, r6, [sp]
    ad80:	f7f6 fa84 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ad84:	a802      	add	r0, sp, #8
    ad86:	f7f5 fbd3 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    ad8a:	2307      	movs	r3, #7
      this->m_LogText_OutputPort[0].invoke(
    ad8c:	4641      	mov	r1, r8
    ad8e:	aa04      	add	r2, sp, #16
    ad90:	4638      	mov	r0, r7
    ad92:	f88d 300c 	strb.w	r3, [sp, #12]
    ad96:	f8cd 9000 	str.w	r9, [sp]
    ad9a:	ab02      	add	r3, sp, #8
      {
    ad9c:	f8cd b008 	str.w	fp, [sp, #8]
    ada0:	f00b ffb8 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    ada4:	a802      	add	r0, sp, #8
    ada6:	f8cd b008 	str.w	fp, [sp, #8]
    adaa:	f7f5 fbc7 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    adae:	4648      	mov	r0, r9
    adb0:	f8cd a020 	str.w	sl, [sp, #32]
    adb4:	f7f6 fa3e 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    adb8:	a804      	add	r0, sp, #16
    adba:	f00c fd21 	bl	17800 <Fw::Time::~Time()>
    adbe:	b02b      	add	sp, #172	; 0xac
    adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Fw::LogBuffer _logBuff;
    adc4:	f10d 0920 	add.w	r9, sp, #32
    adc8:	4648      	mov	r0, r9
    adca:	f00b fc05 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Opcode);
    adce:	4629      	mov	r1, r5
    add0:	4648      	mov	r0, r9
    add2:	f7f5 fc43 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    add6:	b9f8      	cbnz	r0, ae18 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x11c>
      _status = _logBuff.serialize(port);
    add8:	4631      	mov	r1, r6
    adda:	4648      	mov	r0, r9
    addc:	f7f5 fca4 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    ade0:	bb30      	cbnz	r0, ae30 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x134>
      {
    ade2:	a802      	add	r0, sp, #8
    ade4:	f8df a06c 	ldr.w	sl, [pc, #108]	; ae54 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x158>
    ade8:	f7f5 fba2 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    adec:	2307      	movs	r3, #7
      this->m_Log_OutputPort[0].invoke(
    adee:	4638      	mov	r0, r7
    adf0:	aa04      	add	r2, sp, #16
    adf2:	4641      	mov	r1, r8
    adf4:	f88d 300c 	strb.w	r3, [sp, #12]
    adf8:	f8cd 9000 	str.w	r9, [sp]
    adfc:	ab02      	add	r3, sp, #8
      {
    adfe:	f8cd a008 	str.w	sl, [sp, #8]
    ae02:	f00b fd6f 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    ae06:	a802      	add	r0, sp, #8
    ae08:	f8cd a008 	str.w	sl, [sp, #8]
    ae0c:	f7f5 fb96 	bl	53c <Fw::Serializable::~Serializable()>
    }
    ae10:	4648      	mov	r0, r9
    ae12:	f00b fbc9 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    ae16:	e78c      	b.n	ad32 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x36>
      FW_ASSERT(
    ae18:	4601      	mov	r1, r0
    ae1a:	f640 2216 	movw	r2, #2582	; 0xa16
    ae1e:	480b      	ldr	r0, [pc, #44]	; (ae4c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x150>)
    ae20:	f7f6 fc02 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
      _status = _logBuff.serialize(port);
    ae24:	4631      	mov	r1, r6
    ae26:	4648      	mov	r0, r9
    ae28:	f7f5 fc7e 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
      FW_ASSERT(
    ae2c:	2800      	cmp	r0, #0
    ae2e:	d0d8      	beq.n	ade2 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0xe6>
    ae30:	4601      	mov	r1, r0
    ae32:	f640 2226 	movw	r2, #2598	; 0xa26
    ae36:	4805      	ldr	r0, [pc, #20]	; (ae4c <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0x150>)
    ae38:	f7f6 fbf6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ae3c:	e7d1      	b.n	ade2 <Svc::CommandDispatcherComponentBase::log_DIAGNOSTIC_OpCodeReregistered(unsigned long, long) const+0xe6>
    ae3e:	bf00      	nop
    ae40:	20001d2c 	.word	0x20001d2c
    ae44:	200028bc 	.word	0x200028bc
    ae48:	200028d0 	.word	0x200028d0
    ae4c:	20001b50 	.word	0x20001b50
    ae50:	20002f60 	.word	0x20002f60
    ae54:	20002c08 	.word	0x20002c08

0000ae58 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const>:
  {
    ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae5c:	4604      	mov	r4, r0
    ae5e:	b0cc      	sub	sp, #304	; 0x130
    ae60:	460e      	mov	r6, r1
    if (this->m_Time_OutputPort[0].isConnected()) {
    ae62:	f604 2564 	addw	r5, r4, #2660	; 0xa64
    Fw::Time _logTime;
    ae66:	a804      	add	r0, sp, #16
    ae68:	f00c fd22 	bl	178b0 <Fw::Time::Time()>
    if (this->m_Time_OutputPort[0].isConnected()) {
    ae6c:	4628      	mov	r0, r5
    ae6e:	f00c ffed 	bl	17e4c <Fw::PortBase::isConnected() const>
    ae72:	b9b0      	cbnz	r0, aea2 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x4a>
    if (this->m_Log_OutputPort[0].isConnected()) {
    ae74:	f604 158c 	addw	r5, r4, #2444	; 0x98c
    _id = this->getIdBase() + EVENTID_MALFORMEDCOMMAND;
    ae78:	4620      	mov	r0, r4
    ae7a:	f007 f83b 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    ae7e:	1d07      	adds	r7, r0, #4
    if (this->m_Log_OutputPort[0].isConnected()) {
    ae80:	4628      	mov	r0, r5
    ae82:	f00c ffe3 	bl	17e4c <Fw::PortBase::isConnected() const>
    ae86:	2800      	cmp	r0, #0
    ae88:	d159      	bne.n	af3e <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0xe6>
    if (this->m_LogText_OutputPort[0].isConnected()) {
    ae8a:	f604 15f8 	addw	r5, r4, #2552	; 0x9f8
    ae8e:	4628      	mov	r0, r5
    ae90:	f00c ffdc 	bl	17e4c <Fw::PortBase::isConnected() const>
    ae94:	b950      	cbnz	r0, aeac <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x54>
  }
    ae96:	a804      	add	r0, sp, #16
    ae98:	f00c fcb2 	bl	17800 <Fw::Time::~Time()>
    ae9c:	b04c      	add	sp, #304	; 0x130
    ae9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      this->m_Time_OutputPort[0].invoke(_logTime);
    aea2:	a904      	add	r1, sp, #16
    aea4:	4628      	mov	r0, r5
    aea6:	f00c fe89 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    aeaa:	e7e3      	b.n	ae74 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x1c>
    String() : StringBase() { *this = ""; }
    aeac:	f8df 90fc 	ldr.w	r9, [pc, #252]	; afac <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x154>
    aeb0:	a808      	add	r0, sp, #32
    aeb2:	f7f6 f9b5 	bl	1220 <Fw::StringBase::StringBase()>
    TextLogString() : StringBase() { *this = ""; }
    aeb6:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
        (void)StringBase::operator=(src);
    aeba:	4937      	ldr	r1, [pc, #220]	; (af98 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x140>)
    aebc:	a808      	add	r0, sp, #32
    String() : StringBase() { *this = ""; }
    aebe:	f8cd 9020 	str.w	r9, [sp, #32]
        (void)StringBase::operator=(src);
    aec2:	f7f6 fa15 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      Status.toString(StatusStr);
    aec6:	a908      	add	r1, sp, #32
    aec8:	4630      	mov	r0, r6
    aeca:	f00d f8c5 	bl	18058 <Fw::DeserialStatus::toString(Fw::StringBase&) const>
    aece:	f8df a0e0 	ldr.w	sl, [pc, #224]	; afb0 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x158>
    aed2:	4640      	mov	r0, r8
    aed4:	f7f6 f9a4 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    aed8:	492f      	ldr	r1, [pc, #188]	; (af98 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x140>)
    aeda:	4640      	mov	r0, r8
    TextLogString() : StringBase() { *this = ""; }
    aedc:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
        (void)StringBase::operator=(src);
    aee0:	f7f6 fa06 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      _logString.format(
    aee4:	ab09      	add	r3, sp, #36	; 0x24
    aee6:	f104 0208 	add.w	r2, r4, #8
    aeea:	492c      	ldr	r1, [pc, #176]	; (af9c <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x144>)
    aeec:	9300      	str	r3, [sp, #0]
    aeee:	4640      	mov	r0, r8
    aef0:	4b2b      	ldr	r3, [pc, #172]	; (afa0 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x148>)
    aef2:	f7f6 f9cb 	bl	128c <Fw::StringBase::format(char const*, ...)>
      {
    aef6:	a802      	add	r0, sp, #8
    aef8:	f7f5 fb1a 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    aefc:	2302      	movs	r3, #2
      {
    aefe:	4c29      	ldr	r4, [pc, #164]	; (afa4 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x14c>)
      this->m_LogText_OutputPort[0].invoke(
    af00:	4639      	mov	r1, r7
    af02:	aa04      	add	r2, sp, #16
    af04:	4628      	mov	r0, r5
        this->e = e1;
    af06:	f88d 300c 	strb.w	r3, [sp, #12]
    af0a:	ab02      	add	r3, sp, #8
    af0c:	f8cd 8000 	str.w	r8, [sp]
      {
    af10:	9402      	str	r4, [sp, #8]
    af12:	f00b feff 	bl	16d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>
  class LogSeverity :
    af16:	a802      	add	r0, sp, #8
    af18:	9402      	str	r4, [sp, #8]
    af1a:	f7f5 fb0f 	bl	53c <Fw::Serializable::~Serializable()>
    ~TextLogString() {}
    af1e:	4640      	mov	r0, r8
    af20:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    af24:	f7f6 f986 	bl	1234 <Fw::StringBase::~StringBase()>
    ~String() {}
    af28:	a808      	add	r0, sp, #32
    af2a:	f8cd 9020 	str.w	r9, [sp, #32]
    af2e:	f7f6 f981 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    af32:	a804      	add	r0, sp, #16
    af34:	f00c fc64 	bl	17800 <Fw::Time::~Time()>
    af38:	b04c      	add	sp, #304	; 0x130
    af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Fw::LogBuffer _logBuff;
    af3e:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
    af42:	4640      	mov	r0, r8
    af44:	f00b fb48 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
      _status = _logBuff.serialize(Status);
    af48:	4631      	mov	r1, r6
    af4a:	4640      	mov	r0, r8
    af4c:	f7f5 fdd8 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(
    af50:	b9d0      	cbnz	r0, af88 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x130>
      {
    af52:	a808      	add	r0, sp, #32
    af54:	f8df 904c 	ldr.w	r9, [pc, #76]	; afa4 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x14c>
    af58:	f7f5 faea 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    af5c:	2302      	movs	r3, #2
      this->m_Log_OutputPort[0].invoke(
    af5e:	4628      	mov	r0, r5
    af60:	aa04      	add	r2, sp, #16
    af62:	4639      	mov	r1, r7
    af64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    af68:	f8cd 8000 	str.w	r8, [sp]
    af6c:	ab08      	add	r3, sp, #32
      {
    af6e:	f8cd 9020 	str.w	r9, [sp, #32]
    af72:	f00b fcb7 	bl	168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>
  class LogSeverity :
    af76:	a808      	add	r0, sp, #32
    af78:	f8cd 9020 	str.w	r9, [sp, #32]
    af7c:	f7f5 fade 	bl	53c <Fw::Serializable::~Serializable()>
    }
    af80:	4640      	mov	r0, r8
    af82:	f00b fb11 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
    af86:	e780      	b.n	ae8a <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x32>
      FW_ASSERT(
    af88:	4601      	mov	r1, r0
    af8a:	f640 0219 	movw	r2, #2073	; 0x819
    af8e:	4806      	ldr	r0, [pc, #24]	; (afa8 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0x150>)
    af90:	f7f6 fb4a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    af94:	e7dd      	b.n	af52 <Svc::CommandDispatcherComponentBase::log_WARNING_HI_MalformedCommand(Fw::DeserialStatus) const+0xfa>
    af96:	bf00      	nop
    af98:	20001d2c 	.word	0x20001d2c
    af9c:	20002884 	.word	0x20002884
    afa0:	20002870 	.word	0x20002870
    afa4:	20002c08 	.word	0x20002c08
    afa8:	20001b50 	.word	0x20001b50
    afac:	200032dc 	.word	0x200032dc
    afb0:	20002f60 	.word	0x20002f60

0000afb4 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)>:
    if (not this->m_first_update_CommandsDispatched) {
    afb4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
  {
    afb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (not this->m_first_update_CommandsDispatched) {
    afbc:	f893 604c 	ldrb.w	r6, [r3, #76]	; 0x4c
  {
    afc0:	b088      	sub	sp, #32
    afc2:	4604      	mov	r4, r0
    afc4:	460d      	mov	r5, r1
    afc6:	4617      	mov	r7, r2
    if (not this->m_first_update_CommandsDispatched) {
    afc8:	b966      	cbnz	r6, afe4 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_CommandsDispatched) {
    afca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    afcc:	428a      	cmp	r2, r1
    afce:	d006      	beq.n	afde <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x2a>
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    afd0:	f504 662d 	add.w	r6, r4, #2768	; 0xad0
        this->m_last_CommandsDispatched = arg;
    afd4:	651d      	str	r5, [r3, #80]	; 0x50
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    afd6:	4630      	mov	r0, r6
    afd8:	f00c ff38 	bl	17e4c <Fw::PortBase::isConnected() const>
    afdc:	b968      	cbnz	r0, affa <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x46>
  }
    afde:	b008      	add	sp, #32
    afe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_CommandsDispatched = false;
    afe4:	2200      	movs	r2, #0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    afe6:	f504 662d 	add.w	r6, r4, #2768	; 0xad0
        this->m_last_CommandsDispatched = arg;
    afea:	651d      	str	r5, [r3, #80]	; 0x50
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    afec:	4630      	mov	r0, r6
      this->m_first_update_CommandsDispatched = false;
    afee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    aff2:	f00c ff2b 	bl	17e4c <Fw::PortBase::isConnected() const>
    aff6:	2800      	cmp	r0, #0
    aff8:	d0f1      	beq.n	afde <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x2a>
        this->m_Time_OutputPort[0].isConnected() &&
    affa:	f604 2864 	addw	r8, r4, #2660	; 0xa64
    affe:	4640      	mov	r0, r8
    b000:	f00c ff24 	bl	17e4c <Fw::PortBase::isConnected() const>
    b004:	b9e8      	cbnz	r0, b042 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x8e>
      Fw::TlmBuffer _tlmBuff;
    b006:	4668      	mov	r0, sp
    b008:	f00b ff80 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    b00c:	4629      	mov	r1, r5
    b00e:	4668      	mov	r0, sp
    b010:	f7f5 fb24 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    b014:	b970      	cbnz	r0, b034 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x80>
      _id = this->getIdBase() + CHANNELID_COMMANDSDISPATCHED;
    b016:	4620      	mov	r0, r4
    b018:	f006 ff6c 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    b01c:	466b      	mov	r3, sp
      _id = this->getIdBase() + CHANNELID_COMMANDSDISPATCHED;
    b01e:	4601      	mov	r1, r0
      this->m_Tlm_OutputPort[0].invoke(
    b020:	463a      	mov	r2, r7
    b022:	4630      	mov	r0, r6
    b024:	f00c f9b8 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    b028:	4668      	mov	r0, sp
    b02a:	f00b ff57 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    b02e:	b008      	add	sp, #32
    b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    b034:	4601      	mov	r1, r0
    b036:	f640 2276 	movw	r2, #2678	; 0xa76
    b03a:	4807      	ldr	r0, [pc, #28]	; (b058 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0xa4>)
    b03c:	f7f6 faf4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b040:	e7e9      	b.n	b016 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x62>
        (_tlmTime ==  Fw::ZERO_TIME)
    b042:	4906      	ldr	r1, [pc, #24]	; (b05c <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0xa8>)
    b044:	4638      	mov	r0, r7
    b046:	f00c fc79 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    b04a:	2800      	cmp	r0, #0
    b04c:	d0db      	beq.n	b006 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x52>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    b04e:	4640      	mov	r0, r8
    b050:	4639      	mov	r1, r7
    b052:	f00c fdb3 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    b056:	e7d6      	b.n	b006 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandsDispatched(unsigned long, Fw::Time)+0x52>
    b058:	20001b50 	.word	0x20001b50
    b05c:	2000c9b0 	.word	0x2000c9b0

0000b060 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)>:
    if (not this->m_first_update_CommandErrors) {
    b060:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
  {
    b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (not this->m_first_update_CommandErrors) {
    b068:	f893 604d 	ldrb.w	r6, [r3, #77]	; 0x4d
  {
    b06c:	b088      	sub	sp, #32
    b06e:	4604      	mov	r4, r0
    b070:	460d      	mov	r5, r1
    b072:	4617      	mov	r7, r2
    if (not this->m_first_update_CommandErrors) {
    b074:	b966      	cbnz	r6, b090 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_CommandErrors) {
    b076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    b078:	428a      	cmp	r2, r1
    b07a:	d006      	beq.n	b08a <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x2a>
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    b07c:	f504 662d 	add.w	r6, r4, #2768	; 0xad0
        this->m_last_CommandErrors = arg;
    b080:	655d      	str	r5, [r3, #84]	; 0x54
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    b082:	4630      	mov	r0, r6
    b084:	f00c fee2 	bl	17e4c <Fw::PortBase::isConnected() const>
    b088:	b968      	cbnz	r0, b0a6 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x46>
  }
    b08a:	b008      	add	sp, #32
    b08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_CommandErrors = false;
    b090:	2200      	movs	r2, #0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    b092:	f504 662d 	add.w	r6, r4, #2768	; 0xad0
        this->m_last_CommandErrors = arg;
    b096:	655d      	str	r5, [r3, #84]	; 0x54
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    b098:	4630      	mov	r0, r6
      this->m_first_update_CommandErrors = false;
    b09a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    b09e:	f00c fed5 	bl	17e4c <Fw::PortBase::isConnected() const>
    b0a2:	2800      	cmp	r0, #0
    b0a4:	d0f1      	beq.n	b08a <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x2a>
        this->m_Time_OutputPort[0].isConnected() &&
    b0a6:	f604 2864 	addw	r8, r4, #2660	; 0xa64
    b0aa:	4640      	mov	r0, r8
    b0ac:	f00c fece 	bl	17e4c <Fw::PortBase::isConnected() const>
    b0b0:	b9e8      	cbnz	r0, b0ee <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x8e>
      Fw::TlmBuffer _tlmBuff;
    b0b2:	4668      	mov	r0, sp
    b0b4:	f00b ff2a 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    b0b8:	4629      	mov	r1, r5
    b0ba:	4668      	mov	r0, sp
    b0bc:	f7f5 face 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    b0c0:	b970      	cbnz	r0, b0e0 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x80>
      _id = this->getIdBase() + CHANNELID_COMMANDERRORS;
    b0c2:	4620      	mov	r0, r4
    b0c4:	f006 ff16 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    b0c8:	466b      	mov	r3, sp
    b0ca:	1c41      	adds	r1, r0, #1
    b0cc:	463a      	mov	r2, r7
    b0ce:	4630      	mov	r0, r6
    b0d0:	f00c f962 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    b0d4:	4668      	mov	r0, sp
    b0d6:	f00b ff01 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    b0da:	b008      	add	sp, #32
    b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    b0e0:	4601      	mov	r1, r0
    b0e2:	f640 22a6 	movw	r2, #2726	; 0xaa6
    b0e6:	4807      	ldr	r0, [pc, #28]	; (b104 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0xa4>)
    b0e8:	f7f6 fa9e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b0ec:	e7e9      	b.n	b0c2 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x62>
        (_tlmTime ==  Fw::ZERO_TIME)
    b0ee:	4906      	ldr	r1, [pc, #24]	; (b108 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0xa8>)
    b0f0:	4638      	mov	r0, r7
    b0f2:	f00c fc23 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    b0f6:	2800      	cmp	r0, #0
    b0f8:	d0db      	beq.n	b0b2 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x52>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    b0fa:	4640      	mov	r0, r8
    b0fc:	4639      	mov	r1, r7
    b0fe:	f00c fd5d 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    b102:	e7d6      	b.n	b0b2 <Svc::CommandDispatcherComponentBase::tlmWrite_CommandErrors(unsigned long, Fw::Time)+0x52>
    b104:	20001b50 	.word	0x20001b50
    b108:	2000c9b0 	.word	0x2000c9b0

0000b10c <Svc::CommandDispatcherComponentBase::doDispatch()>:
  {
    b10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b110:	b0e5      	sub	sp, #404	; 0x194
    b112:	4604      	mov	r4, r0
    class ComponentIpcSerializableBuffer :
    b114:	4eab      	ldr	r6, [pc, #684]	; (b3c4 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2b8>)
    b116:	a83d      	add	r0, sp, #244	; 0xf4
    b118:	f7f5 fa12 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    FwQueuePriorityType priority = 0;
    b11c:	2200      	movs	r2, #0
    Os::Queue::Status msgStatus = this->m_queue.receive(
    b11e:	ab06      	add	r3, sp, #24
    b120:	a93d      	add	r1, sp, #244	; 0xf4
    b122:	f104 0068 	add.w	r0, r4, #104	; 0x68
    class ComponentIpcSerializableBuffer :
    b126:	963d      	str	r6, [sp, #244]	; 0xf4
    FwQueuePriorityType priority = 0;
    b128:	9206      	str	r2, [sp, #24]
    Os::Queue::Status msgStatus = this->m_queue.receive(
    b12a:	f006 fe29 	bl	11d80 <Os::Queue::receive(Fw::SerializeBufferBase&, Os::QueueInterface::BlockingType, long&)>
    FW_ASSERT(
    b12e:	2800      	cmp	r0, #0
    b130:	d137      	bne.n	b1a2 <Svc::CommandDispatcherComponentBase::doDispatch()+0x96>
    msg.resetDeser();
    b132:	a83d      	add	r0, sp, #244	; 0xf4
    b134:	f7f5 ff62 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
    FwEnumStoreType desMsg = 0;
    b138:	2300      	movs	r3, #0
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    b13a:	a907      	add	r1, sp, #28
    b13c:	a83d      	add	r0, sp, #244	; 0xf4
    FwEnumStoreType desMsg = 0;
    b13e:	9307      	str	r3, [sp, #28]
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    b140:	f7f5 fdcc 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    FW_ASSERT(
    b144:	bb30      	cbnz	r0, b194 <Svc::CommandDispatcherComponentBase::doDispatch()+0x88>
    if (msgType == COMMANDDISPATCHER_COMPONENT_EXIT) {
    b146:	f89d 501c 	ldrb.w	r5, [sp, #28]
    b14a:	b1d5      	cbz	r5, b182 <Svc::CommandDispatcherComponentBase::doDispatch()+0x76>
    FwIndexType portNum = 0;
    b14c:	2300      	movs	r3, #0
    deserStatus = msg.deserialize(portNum);
    b14e:	a908      	add	r1, sp, #32
    b150:	a83d      	add	r0, sp, #244	; 0xf4
    FwIndexType portNum = 0;
    b152:	9308      	str	r3, [sp, #32]
    deserStatus = msg.deserialize(portNum);
    b154:	f7f5 fdc2 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    FW_ASSERT(
    b158:	b960      	cbnz	r0, b174 <Svc::CommandDispatcherComponentBase::doDispatch()+0x68>
    switch (msgType) {
    b15a:	3d01      	subs	r5, #1
    b15c:	2d06      	cmp	r5, #6
    b15e:	f200 825a 	bhi.w	b616 <Svc::CommandDispatcherComponentBase::doDispatch()+0x50a>
    b162:	e8df f015 	tbh	[pc, r5, lsl #1]
    b166:	0055      	.short	0x0055
    b168:	00970087 	.word	0x00970087
    b16c:	00e600b6 	.word	0x00e600b6
    b170:	00250139 	.word	0x00250139
    FW_ASSERT(
    b174:	4601      	mov	r1, r0
    b176:	f640 3201 	movw	r2, #2817	; 0xb01
    b17a:	4893      	ldr	r0, [pc, #588]	; (b3c8 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2bc>)
    b17c:	f7f6 fa54 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b180:	e7eb      	b.n	b15a <Svc::CommandDispatcherComponentBase::doDispatch()+0x4e>
      return MSG_DISPATCH_EXIT;
    b182:	2403      	movs	r4, #3
    class ComponentIpcSerializableBuffer :
    b184:	a83d      	add	r0, sp, #244	; 0xf4
    b186:	963d      	str	r6, [sp, #244]	; 0xf4
    b188:	f7f5 f9e2 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    b18c:	4620      	mov	r0, r4
    b18e:	b065      	add	sp, #404	; 0x194
    b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FW_ASSERT(
    b194:	4601      	mov	r1, r0
    b196:	f640 22f4 	movw	r2, #2804	; 0xaf4
    b19a:	488b      	ldr	r0, [pc, #556]	; (b3c8 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2bc>)
    b19c:	f7f6 fa44 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b1a0:	e7d1      	b.n	b146 <Svc::CommandDispatcherComponentBase::doDispatch()+0x3a>
    FW_ASSERT(
    b1a2:	4601      	mov	r1, r0
    b1a4:	f640 22ea 	movw	r2, #2794	; 0xaea
    b1a8:	4887      	ldr	r0, [pc, #540]	; (b3c8 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2bc>)
    b1aa:	f7f6 fa3d 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b1ae:	e7c0      	b.n	b132 <Svc::CommandDispatcherComponentBase::doDispatch()+0x26>
        FwOpcodeType opCode = 0;
    b1b0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    b1b4:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(opCode);
    b1b6:	a83d      	add	r0, sp, #244	; 0xf4
    b1b8:	4641      	mov	r1, r8
        FwOpcodeType opCode = 0;
    b1ba:	f8c8 3000 	str.w	r3, [r8]
        deserStatus = msg.deserialize(opCode);
    b1be:	f7f5 fd7f 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b1c2:	2800      	cmp	r0, #0
    b1c4:	f040 81be 	bne.w	b544 <Svc::CommandDispatcherComponentBase::doDispatch()+0x438>
        U32 cmdSeq = 0;
    b1c8:	af0e      	add	r7, sp, #56	; 0x38
    b1ca:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(cmdSeq);
    b1cc:	a83d      	add	r0, sp, #244	; 0xf4
    b1ce:	4639      	mov	r1, r7
        U32 cmdSeq = 0;
    b1d0:	603b      	str	r3, [r7, #0]
        deserStatus = msg.deserialize(cmdSeq);
    b1d2:	f7f5 fd75 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b1d6:	2800      	cmp	r0, #0
    b1d8:	f040 81ad 	bne.w	b536 <Svc::CommandDispatcherComponentBase::doDispatch()+0x42a>
        Fw::CmdArgBuffer args;
    b1dc:	ad1a      	add	r5, sp, #104	; 0x68
    b1de:	4628      	mov	r0, r5
    b1e0:	f00a fd14 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
        deserStatus = msg.deserialize(args);
    b1e4:	4629      	mov	r1, r5
    b1e6:	a83d      	add	r0, sp, #244	; 0xf4
    b1e8:	f7f5 fe7a 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT (
    b1ec:	2800      	cmp	r0, #0
    b1ee:	f040 81c5 	bne.w	b57c <Svc::CommandDispatcherComponentBase::doDispatch()+0x470>
        args.resetDeser();
    b1f2:	4628      	mov	r0, r5
    b1f4:	f7f5 ff02 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
        this->CMD_CLEAR_TRACKING_cmdHandler(opCode, cmdSeq);
    b1f8:	6823      	ldr	r3, [r4, #0]
    b1fa:	683a      	ldr	r2, [r7, #0]
    b1fc:	4620      	mov	r0, r4
    b1fe:	f8d8 1000 	ldr.w	r1, [r8]
    b202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b204:	4798      	blx	r3
      }
    b206:	4628      	mov	r0, r5
    return MSG_DISPATCH_OK;
    b208:	2400      	movs	r4, #0
      }
    b20a:	f00a fce7 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
    b20e:	e7b9      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
        deserStatus = msg.deserialize(opCode);
    b210:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    b214:	a83d      	add	r0, sp, #244	; 0xf4
    b216:	4641      	mov	r1, r8
    b218:	f7f5 fd52 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
    b21c:	2800      	cmp	r0, #0
    b21e:	f040 81a6 	bne.w	b56e <Svc::CommandDispatcherComponentBase::doDispatch()+0x462>
        deserStatus = msg.deserialize(cmdSeq);
    b222:	af0e      	add	r7, sp, #56	; 0x38
    b224:	a83d      	add	r0, sp, #244	; 0xf4
    b226:	4639      	mov	r1, r7
    b228:	f7f5 fd4a 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
    b22c:	2800      	cmp	r0, #0
    b22e:	f040 8197 	bne.w	b560 <Svc::CommandDispatcherComponentBase::doDispatch()+0x454>
      {
    b232:	ad1a      	add	r5, sp, #104	; 0x68
    b234:	f8df 9198 	ldr.w	r9, [pc, #408]	; b3d0 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2c4>
    b238:	4628      	mov	r0, r5
    b23a:	f7f5 f979 	bl	530 <Fw::Serializable::Serializable()>
        this->e = OK;
    b23e:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(response);
    b240:	4629      	mov	r1, r5
    b242:	a83d      	add	r0, sp, #244	; 0xf4
      {
    b244:	f8c5 9000 	str.w	r9, [r5]
        this->e = OK;
    b248:	712b      	strb	r3, [r5, #4]
    b24a:	f7f5 fe43 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
        FW_ASSERT(
    b24e:	2800      	cmp	r0, #0
    b250:	f040 817f 	bne.w	b552 <Svc::CommandDispatcherComponentBase::doDispatch()+0x446>
        this->compCmdStat_handler(
    b254:	683b      	ldr	r3, [r7, #0]
    b256:	4620      	mov	r0, r4
    b258:	f8d8 2000 	ldr.w	r2, [r8]
    b25c:	9500      	str	r5, [sp, #0]
    b25e:	6827      	ldr	r7, [r4, #0]
    b260:	9908      	ldr	r1, [sp, #32]
    b262:	6a3c      	ldr	r4, [r7, #32]
    b264:	47a0      	blx	r4
  class CmdResponse :
    b266:	4628      	mov	r0, r5
    b268:	f8c5 9000 	str.w	r9, [r5]
    return MSG_DISPATCH_OK;
    b26c:	2400      	movs	r4, #0
    b26e:	f7f5 f965 	bl	53c <Fw::Serializable::~Serializable()>
    b272:	e787      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
        deserStatus = msg.deserialize(key);
    b274:	ad1a      	add	r5, sp, #104	; 0x68
    b276:	a83d      	add	r0, sp, #244	; 0xf4
    b278:	4629      	mov	r1, r5
    b27a:	f7f5 fd21 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
    b27e:	2800      	cmp	r0, #0
    b280:	f040 81b4 	bne.w	b5ec <Svc::CommandDispatcherComponentBase::doDispatch()+0x4e0>
        this->pingIn_handler(
    b284:	6823      	ldr	r3, [r4, #0]
    b286:	4620      	mov	r0, r4
    b288:	682a      	ldr	r2, [r5, #0]
    return MSG_DISPATCH_OK;
    b28a:	2400      	movs	r4, #0
        this->pingIn_handler(
    b28c:	9908      	ldr	r1, [sp, #32]
    b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b290:	4798      	blx	r3
        break;
    b292:	e777      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
        Fw::ComBuffer data;
    b294:	ad1a      	add	r5, sp, #104	; 0x68
    b296:	4628      	mov	r0, r5
    b298:	f00c f96c 	bl	17574 <Fw::ComBuffer::ComBuffer()>
        deserStatus = msg.deserialize(data);
    b29c:	4629      	mov	r1, r5
    b29e:	a83d      	add	r0, sp, #244	; 0xf4
    b2a0:	f7f5 fe1e 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT(
    b2a4:	2800      	cmp	r0, #0
    b2a6:	f040 819a 	bne.w	b5de <Svc::CommandDispatcherComponentBase::doDispatch()+0x4d2>
        deserStatus = msg.deserialize(context);
    b2aa:	af0e      	add	r7, sp, #56	; 0x38
    b2ac:	a83d      	add	r0, sp, #244	; 0xf4
    b2ae:	4639      	mov	r1, r7
    b2b0:	f7f5 fd06 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
    b2b4:	2800      	cmp	r0, #0
    b2b6:	f040 818b 	bne.w	b5d0 <Svc::CommandDispatcherComponentBase::doDispatch()+0x4c4>
        this->seqCmdBuff_handler(
    b2ba:	6822      	ldr	r2, [r4, #0]
    b2bc:	4620      	mov	r0, r4
    b2be:	683b      	ldr	r3, [r7, #0]
    b2c0:	6a94      	ldr	r4, [r2, #40]	; 0x28
    b2c2:	462a      	mov	r2, r5
    b2c4:	9908      	ldr	r1, [sp, #32]
    b2c6:	47a0      	blx	r4
      }
    b2c8:	4628      	mov	r0, r5
    return MSG_DISPATCH_OK;
    b2ca:	2400      	movs	r4, #0
      }
    b2cc:	f00c f93a 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
    b2d0:	e758      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
        FwOpcodeType opCode = 0;
    b2d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    b2d6:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(opCode);
    b2d8:	a83d      	add	r0, sp, #244	; 0xf4
    b2da:	4641      	mov	r1, r8
        FwOpcodeType opCode = 0;
    b2dc:	f8c8 3000 	str.w	r3, [r8]
        deserStatus = msg.deserialize(opCode);
    b2e0:	f7f5 fcee 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b2e4:	2800      	cmp	r0, #0
    b2e6:	f040 816c 	bne.w	b5c2 <Svc::CommandDispatcherComponentBase::doDispatch()+0x4b6>
        U32 cmdSeq = 0;
    b2ea:	af0e      	add	r7, sp, #56	; 0x38
    b2ec:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(cmdSeq);
    b2ee:	a83d      	add	r0, sp, #244	; 0xf4
    b2f0:	4639      	mov	r1, r7
        U32 cmdSeq = 0;
    b2f2:	603b      	str	r3, [r7, #0]
        deserStatus = msg.deserialize(cmdSeq);
    b2f4:	f7f5 fce4 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b2f8:	2800      	cmp	r0, #0
    b2fa:	f040 815b 	bne.w	b5b4 <Svc::CommandDispatcherComponentBase::doDispatch()+0x4a8>
        Fw::CmdArgBuffer args;
    b2fe:	ad1a      	add	r5, sp, #104	; 0x68
    b300:	4628      	mov	r0, r5
    b302:	f00a fc83 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
        deserStatus = msg.deserialize(args);
    b306:	4629      	mov	r1, r5
    b308:	a83d      	add	r0, sp, #244	; 0xf4
    b30a:	f7f5 fde9 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT (
    b30e:	2800      	cmp	r0, #0
    b310:	f040 8149 	bne.w	b5a6 <Svc::CommandDispatcherComponentBase::doDispatch()+0x49a>
        args.resetDeser();
    b314:	4628      	mov	r0, r5
    b316:	f7f5 fe71 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
        this->CMD_NO_OP_cmdHandler(opCode, cmdSeq);
    b31a:	6823      	ldr	r3, [r4, #0]
    b31c:	4620      	mov	r0, r4
    b31e:	683a      	ldr	r2, [r7, #0]
    b320:	f8d8 1000 	ldr.w	r1, [r8]
    return MSG_DISPATCH_OK;
    b324:	2400      	movs	r4, #0
        this->CMD_NO_OP_cmdHandler(opCode, cmdSeq);
    b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b328:	4798      	blx	r3
      }
    b32a:	4628      	mov	r0, r5
    b32c:	f00a fc56 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
    b330:	e728      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
        FwOpcodeType opCode = 0;
    b332:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    b336:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(opCode);
    b338:	a83d      	add	r0, sp, #244	; 0xf4
    b33a:	4641      	mov	r1, r8
        FwOpcodeType opCode = 0;
    b33c:	f8c8 3000 	str.w	r3, [r8]
        deserStatus = msg.deserialize(opCode);
    b340:	f7f5 fcbe 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b344:	2800      	cmp	r0, #0
    b346:	f040 8127 	bne.w	b598 <Svc::CommandDispatcherComponentBase::doDispatch()+0x48c>
        U32 cmdSeq = 0;
    b34a:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(cmdSeq);
    b34c:	a90b      	add	r1, sp, #44	; 0x2c
    b34e:	a83d      	add	r0, sp, #244	; 0xf4
        U32 cmdSeq = 0;
    b350:	930b      	str	r3, [sp, #44]	; 0x2c
        deserStatus = msg.deserialize(cmdSeq);
    b352:	f7f5 fcb5 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b356:	2800      	cmp	r0, #0
    b358:	f040 8117 	bne.w	b58a <Svc::CommandDispatcherComponentBase::doDispatch()+0x47e>
        Fw::CmdArgBuffer args;
    b35c:	ad1a      	add	r5, sp, #104	; 0x68
    b35e:	4628      	mov	r0, r5
    b360:	f00a fc54 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
        deserStatus = msg.deserialize(args);
    b364:	4629      	mov	r1, r5
    b366:	a83d      	add	r0, sp, #244	; 0xf4
    b368:	f7f5 fdba 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT (
    b36c:	2800      	cmp	r0, #0
    b36e:	f040 80cd 	bne.w	b50c <Svc::CommandDispatcherComponentBase::doDispatch()+0x400>
    CmdStringArg() : StringBase() { *this = ""; }
    b372:	af0e      	add	r7, sp, #56	; 0x38
        args.resetDeser();
    b374:	4628      	mov	r0, r5
    b376:	f8df a05c 	ldr.w	sl, [pc, #92]	; b3d4 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2c8>
    b37a:	f7f5 fe3f 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
    b37e:	4638      	mov	r0, r7
    b380:	f7f5 ff4e 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    b384:	4911      	ldr	r1, [pc, #68]	; (b3cc <Svc::CommandDispatcherComponentBase::doDispatch()+0x2c0>)
    b386:	4638      	mov	r0, r7
    CmdStringArg() : StringBase() { *this = ""; }
    b388:	f8c7 a000 	str.w	sl, [r7]
        (void)StringBase::operator=(src);
    b38c:	f7f5 ffb0 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        deserStatus = args.deserialize(arg1);
    b390:	4639      	mov	r1, r7
    b392:	4628      	mov	r0, r5
    b394:	f7f5 fd9e 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    b398:	2800      	cmp	r0, #0
    b39a:	f040 808d 	bne.w	b4b8 <Svc::CommandDispatcherComponentBase::doDispatch()+0x3ac>
        this->CMD_NO_OP_STRING_cmdHandler(
    b39e:	6823      	ldr	r3, [r4, #0]
    b3a0:	4620      	mov	r0, r4
    b3a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b3a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    b3a6:	463b      	mov	r3, r7
    b3a8:	f8d8 1000 	ldr.w	r1, [r8]
    b3ac:	47a0      	blx	r4
    ~CmdStringArg() {}
    b3ae:	4638      	mov	r0, r7
    b3b0:	f8c7 a000 	str.w	sl, [r7]
    b3b4:	f7f5 ff3e 	bl	1234 <Fw::StringBase::~StringBase()>
      }
    b3b8:	4628      	mov	r0, r5
    return MSG_DISPATCH_OK;
    b3ba:	2400      	movs	r4, #0
      }
    b3bc:	f00a fc0e 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
    b3c0:	e6e0      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
    b3c2:	bf00      	nop
    b3c4:	20003988 	.word	0x20003988
    b3c8:	20001b50 	.word	0x20001b50
    b3cc:	20001d2c 	.word	0x20001d2c
    b3d0:	20002bec 	.word	0x20002bec
    b3d4:	20002c5c 	.word	0x20002c5c
        FwOpcodeType opCode = 0;
    b3d8:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(opCode);
    b3da:	a909      	add	r1, sp, #36	; 0x24
    b3dc:	a83d      	add	r0, sp, #244	; 0xf4
        FwOpcodeType opCode = 0;
    b3de:	9309      	str	r3, [sp, #36]	; 0x24
        deserStatus = msg.deserialize(opCode);
    b3e0:	f7f5 fc6e 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b3e4:	2800      	cmp	r0, #0
    b3e6:	f040 8098 	bne.w	b51a <Svc::CommandDispatcherComponentBase::doDispatch()+0x40e>
        U32 cmdSeq = 0;
    b3ea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    b3ee:	2300      	movs	r3, #0
        deserStatus = msg.deserialize(cmdSeq);
    b3f0:	a83d      	add	r0, sp, #244	; 0xf4
    b3f2:	4641      	mov	r1, r8
        U32 cmdSeq = 0;
    b3f4:	f8c8 3000 	str.w	r3, [r8]
        deserStatus = msg.deserialize(cmdSeq);
    b3f8:	f7f5 fc62 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT (
    b3fc:	2800      	cmp	r0, #0
    b3fe:	d154      	bne.n	b4aa <Svc::CommandDispatcherComponentBase::doDispatch()+0x39e>
        Fw::CmdArgBuffer args;
    b400:	ad1a      	add	r5, sp, #104	; 0x68
    b402:	4628      	mov	r0, r5
    b404:	f00a fc02 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
        deserStatus = msg.deserialize(args);
    b408:	4629      	mov	r1, r5
    b40a:	a83d      	add	r0, sp, #244	; 0xf4
    b40c:	f7f5 fd68 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
        FW_ASSERT (
    b410:	2800      	cmp	r0, #0
    b412:	f040 8089 	bne.w	b528 <Svc::CommandDispatcherComponentBase::doDispatch()+0x41c>
        args.resetDeser();
    b416:	4628      	mov	r0, r5
    b418:	f7f5 fdf0 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
        deserStatus = args.deserialize(arg1);
    b41c:	4628      	mov	r0, r5
    b41e:	a90b      	add	r1, sp, #44	; 0x2c
    b420:	f7f5 fc5c 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    b424:	b9c0      	cbnz	r0, b458 <Svc::CommandDispatcherComponentBase::doDispatch()+0x34c>
        deserStatus = args.deserialize(arg2);
    b426:	4628      	mov	r0, r5
    b428:	a90c      	add	r1, sp, #48	; 0x30
    b42a:	f7f5 fcbb 	bl	da4 <Fw::SerializeBufferBase::deserialize(float&)>
        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    b42e:	b998      	cbnz	r0, b458 <Svc::CommandDispatcherComponentBase::doDispatch()+0x34c>
        deserStatus = args.deserialize(arg3);
    b430:	4628      	mov	r0, r5
    b432:	f10d 0117 	add.w	r1, sp, #23
    b436:	f7f5 fbcd 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    b43a:	b968      	cbnz	r0, b458 <Svc::CommandDispatcherComponentBase::doDispatch()+0x34c>
        this->CMD_TEST_CMD_1_cmdHandler(
    b43c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b440:	4620      	mov	r0, r4
    b442:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
    b446:	9300      	str	r3, [sp, #0]
    b448:	6827      	ldr	r7, [r4, #0]
    b44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b44c:	f8d8 2000 	ldr.w	r2, [r8]
    b450:	9909      	ldr	r1, [sp, #36]	; 0x24
    b452:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    b454:	47a0      	blx	r4
        break;
    b456:	e6d6      	b.n	b206 <Svc::CommandDispatcherComponentBase::doDispatch()+0xfa>
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    b458:	f504 6412 	add.w	r4, r4, #2336	; 0x920
    b45c:	4620      	mov	r0, r4
    b45e:	f00c fcf5 	bl	17e4c <Fw::PortBase::isConnected() const>
    b462:	2800      	cmp	r0, #0
    b464:	f43f aecf 	beq.w	b206 <Svc::CommandDispatcherComponentBase::doDispatch()+0xfa>
      {
    b468:	af0e      	add	r7, sp, #56	; 0x38
            this->cmdResponse_out(
    b46a:	f8d8 2000 	ldr.w	r2, [r8]
    b46e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    b472:	4638      	mov	r0, r7
    b474:	9203      	str	r2, [sp, #12]
    b476:	f8df 91a8 	ldr.w	r9, [pc, #424]	; b620 <Svc::CommandDispatcherComponentBase::doDispatch()+0x514>
    b47a:	f7f5 f859 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    b47e:	2303      	movs	r3, #3
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    b480:	4620      	mov	r0, r4
      {
    b482:	f8c7 9000 	str.w	r9, [r7]
        this->e = e1;
    b486:	713b      	strb	r3, [r7, #4]
    b488:	f00c fce0 	bl	17e4c <Fw::PortBase::isConnected() const>
    b48c:	9a03      	ldr	r2, [sp, #12]
    b48e:	2800      	cmp	r0, #0
    b490:	f000 80b3 	beq.w	b5fa <Svc::CommandDispatcherComponentBase::doDispatch()+0x4ee>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    b494:	4620      	mov	r0, r4
    b496:	4651      	mov	r1, sl
    b498:	463b      	mov	r3, r7
    b49a:	f00b f81f 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    b49e:	4638      	mov	r0, r7
    b4a0:	f8c7 9000 	str.w	r9, [r7]
    b4a4:	f7f5 f84a 	bl	53c <Fw::Serializable::~Serializable()>
    b4a8:	e6ad      	b.n	b206 <Svc::CommandDispatcherComponentBase::doDispatch()+0xfa>
        FW_ASSERT (
    b4aa:	4601      	mov	r1, r0
    b4ac:	f640 32d5 	movw	r2, #3029	; 0xbd5
    b4b0:	485a      	ldr	r0, [pc, #360]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b4b2:	f7f6 f8b9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b4b6:	e7a3      	b.n	b400 <Svc::CommandDispatcherComponentBase::doDispatch()+0x2f4>
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    b4b8:	f504 6412 	add.w	r4, r4, #2336	; 0x920
    b4bc:	4620      	mov	r0, r4
    b4be:	f00c fcc5 	bl	17e4c <Fw::PortBase::isConnected() const>
    b4c2:	2800      	cmp	r0, #0
    b4c4:	f43f af73 	beq.w	b3ae <Svc::CommandDispatcherComponentBase::doDispatch()+0x2a2>
            this->cmdResponse_out(
    b4c8:	f8d8 b000 	ldr.w	fp, [r8]
      {
    b4cc:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    b4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b4d2:	4640      	mov	r0, r8
    b4d4:	f8df 9148 	ldr.w	r9, [pc, #328]	; b620 <Svc::CommandDispatcherComponentBase::doDispatch()+0x514>
    b4d8:	9203      	str	r2, [sp, #12]
    b4da:	f7f5 f829 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    b4de:	2303      	movs	r3, #3
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    b4e0:	4620      	mov	r0, r4
      {
    b4e2:	f8c8 9000 	str.w	r9, [r8]
        this->e = e1;
    b4e6:	f888 3004 	strb.w	r3, [r8, #4]
    b4ea:	f00c fcaf 	bl	17e4c <Fw::PortBase::isConnected() const>
    b4ee:	9a03      	ldr	r2, [sp, #12]
    b4f0:	2800      	cmp	r0, #0
    b4f2:	f000 8089 	beq.w	b608 <Svc::CommandDispatcherComponentBase::doDispatch()+0x4fc>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    b4f6:	4620      	mov	r0, r4
    b4f8:	4659      	mov	r1, fp
    b4fa:	4643      	mov	r3, r8
    b4fc:	f00a ffee 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    b500:	4640      	mov	r0, r8
    b502:	f8c8 9000 	str.w	r9, [r8]
    b506:	f7f5 f819 	bl	53c <Fw::Serializable::~Serializable()>
    b50a:	e750      	b.n	b3ae <Svc::CommandDispatcherComponentBase::doDispatch()+0x2a2>
        FW_ASSERT (
    b50c:	4601      	mov	r1, r0
    b50e:	f640 329c 	movw	r2, #2972	; 0xb9c
    b512:	4842      	ldr	r0, [pc, #264]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b514:	f7f6 f888 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b518:	e72b      	b.n	b372 <Svc::CommandDispatcherComponentBase::doDispatch()+0x266>
        FW_ASSERT (
    b51a:	4601      	mov	r1, r0
    b51c:	f640 32cd 	movw	r2, #3021	; 0xbcd
    b520:	483e      	ldr	r0, [pc, #248]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b522:	f7f6 f881 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b526:	e760      	b.n	b3ea <Svc::CommandDispatcherComponentBase::doDispatch()+0x2de>
        FW_ASSERT (
    b528:	4601      	mov	r1, r0
    b52a:	f640 32dd 	movw	r2, #3037	; 0xbdd
    b52e:	483b      	ldr	r0, [pc, #236]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b530:	f7f6 f87a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b534:	e76f      	b.n	b416 <Svc::CommandDispatcherComponentBase::doDispatch()+0x30a>
        FW_ASSERT (
    b536:	4601      	mov	r1, r0
    b538:	f640 4236 	movw	r2, #3126	; 0xc36
    b53c:	4837      	ldr	r0, [pc, #220]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b53e:	f7f6 f873 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b542:	e64b      	b.n	b1dc <Svc::CommandDispatcherComponentBase::doDispatch()+0xd0>
        FW_ASSERT (
    b544:	4601      	mov	r1, r0
    b546:	f640 422e 	movw	r2, #3118	; 0xc2e
    b54a:	4834      	ldr	r0, [pc, #208]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b54c:	f7f6 f86c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b550:	e63a      	b.n	b1c8 <Svc::CommandDispatcherComponentBase::doDispatch()+0xbc>
        FW_ASSERT(
    b552:	4601      	mov	r1, r0
    b554:	f640 321c 	movw	r2, #2844	; 0xb1c
    b558:	4830      	ldr	r0, [pc, #192]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b55a:	f7f6 f865 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b55e:	e679      	b.n	b254 <Svc::CommandDispatcherComponentBase::doDispatch()+0x148>
        FW_ASSERT(
    b560:	4601      	mov	r1, r0
    b562:	f640 3214 	movw	r2, #2836	; 0xb14
    b566:	482d      	ldr	r0, [pc, #180]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b568:	f7f6 f85e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b56c:	e661      	b.n	b232 <Svc::CommandDispatcherComponentBase::doDispatch()+0x126>
        FW_ASSERT(
    b56e:	4601      	mov	r1, r0
    b570:	f640 320c 	movw	r2, #2828	; 0xb0c
    b574:	4829      	ldr	r0, [pc, #164]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b576:	f7f6 f857 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b57a:	e652      	b.n	b222 <Svc::CommandDispatcherComponentBase::doDispatch()+0x116>
        FW_ASSERT (
    b57c:	4601      	mov	r1, r0
    b57e:	f640 423e 	movw	r2, #3134	; 0xc3e
    b582:	4826      	ldr	r0, [pc, #152]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b584:	f7f6 f850 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b588:	e633      	b.n	b1f2 <Svc::CommandDispatcherComponentBase::doDispatch()+0xe6>
        FW_ASSERT (
    b58a:	4601      	mov	r1, r0
    b58c:	f640 3294 	movw	r2, #2964	; 0xb94
    b590:	4822      	ldr	r0, [pc, #136]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b592:	f7f6 f849 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b596:	e6e1      	b.n	b35c <Svc::CommandDispatcherComponentBase::doDispatch()+0x250>
        FW_ASSERT (
    b598:	4601      	mov	r1, r0
    b59a:	f640 328c 	movw	r2, #2956	; 0xb8c
    b59e:	481f      	ldr	r0, [pc, #124]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5a0:	f7f6 f842 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5a4:	e6d1      	b.n	b34a <Svc::CommandDispatcherComponentBase::doDispatch()+0x23e>
        FW_ASSERT (
    b5a6:	4601      	mov	r1, r0
    b5a8:	f640 326d 	movw	r2, #2925	; 0xb6d
    b5ac:	481b      	ldr	r0, [pc, #108]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5ae:	f7f6 f83b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5b2:	e6af      	b.n	b314 <Svc::CommandDispatcherComponentBase::doDispatch()+0x208>
        FW_ASSERT (
    b5b4:	4601      	mov	r1, r0
    b5b6:	f640 3265 	movw	r2, #2917	; 0xb65
    b5ba:	4818      	ldr	r0, [pc, #96]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5bc:	f7f6 f834 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5c0:	e69d      	b.n	b2fe <Svc::CommandDispatcherComponentBase::doDispatch()+0x1f2>
        FW_ASSERT (
    b5c2:	4601      	mov	r1, r0
    b5c4:	f640 325d 	movw	r2, #2909	; 0xb5d
    b5c8:	4814      	ldr	r0, [pc, #80]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5ca:	f7f6 f82d 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5ce:	e68c      	b.n	b2ea <Svc::CommandDispatcherComponentBase::doDispatch()+0x1de>
        FW_ASSERT(
    b5d0:	4601      	mov	r1, r0
    b5d2:	f640 324a 	movw	r2, #2890	; 0xb4a
    b5d6:	4811      	ldr	r0, [pc, #68]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5d8:	f7f6 f826 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5dc:	e66d      	b.n	b2ba <Svc::CommandDispatcherComponentBase::doDispatch()+0x1ae>
        FW_ASSERT(
    b5de:	4601      	mov	r1, r0
    b5e0:	f640 3242 	movw	r2, #2882	; 0xb42
    b5e4:	480d      	ldr	r0, [pc, #52]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5e6:	f7f6 f81f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5ea:	e65e      	b.n	b2aa <Svc::CommandDispatcherComponentBase::doDispatch()+0x19e>
        FW_ASSERT(
    b5ec:	4601      	mov	r1, r0
    b5ee:	f44f 6233 	mov.w	r2, #2864	; 0xb30
    b5f2:	480a      	ldr	r0, [pc, #40]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b5f4:	f7f6 f818 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    b5f8:	e644      	b.n	b284 <Svc::CommandDispatcherComponentBase::doDispatch()+0x178>
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    b5fa:	f240 512c 	movw	r1, #1324	; 0x52c
    b5fe:	4807      	ldr	r0, [pc, #28]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b600:	f7f6 f804 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    b604:	9a03      	ldr	r2, [sp, #12]
    b606:	e745      	b.n	b494 <Svc::CommandDispatcherComponentBase::doDispatch()+0x388>
    b608:	f240 512c 	movw	r1, #1324	; 0x52c
    b60c:	4803      	ldr	r0, [pc, #12]	; (b61c <Svc::CommandDispatcherComponentBase::doDispatch()+0x510>)
    b60e:	f7f5 fffd 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    b612:	9a03      	ldr	r2, [sp, #12]
    b614:	e76f      	b.n	b4f6 <Svc::CommandDispatcherComponentBase::doDispatch()+0x3ea>
    switch (msgType) {
    b616:	2402      	movs	r4, #2
    b618:	e5b4      	b.n	b184 <Svc::CommandDispatcherComponentBase::doDispatch()+0x78>
    b61a:	bf00      	nop
    b61c:	20001b50 	.word	0x20001b50
    b620:	20002bec 	.word	0x20002bec

0000b624 <Svc::Deframer::cmdResponseIn_handler(long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
    FwOpcodeType opcode,
    U32 cmdSeq,
    const Fw::CmdResponse& response
) {
    // Nothing to do
}
    b624:	4770      	bx	lr
    b626:	bf00      	nop

0000b628 <Svc::Deframer::~Deframer()>:
Deframer ::~Deframer() {}
    b628:	4b03      	ldr	r3, [pc, #12]	; (b638 <Svc::Deframer::~Deframer()+0x10>)
    b62a:	b510      	push	{r4, lr}
    b62c:	4604      	mov	r4, r0
    b62e:	6003      	str	r3, [r0, #0]
    b630:	f000 fd66 	bl	c100 <Svc::DeframerComponentBase::~DeframerComponentBase()>
    b634:	4620      	mov	r0, r4
    b636:	bd10      	pop	{r4, pc}
    b638:	20003f34 	.word	0x20003f34

0000b63c <Svc::Deframer::~Deframer()>:
    b63c:	4b06      	ldr	r3, [pc, #24]	; (b658 <Svc::Deframer::~Deframer()+0x1c>)
    b63e:	b510      	push	{r4, lr}
    b640:	4604      	mov	r4, r0
    b642:	6003      	str	r3, [r0, #0]
    b644:	f000 fd5c 	bl	c100 <Svc::DeframerComponentBase::~DeframerComponentBase()>
    b648:	f44f 61a9 	mov.w	r1, #1352	; 0x548
    b64c:	4620      	mov	r0, r4
    b64e:	f00d fb3f 	bl	18cd0 <operator delete(void*, unsigned int)>
    b652:	4620      	mov	r0, r4
    b654:	bd10      	pop	{r4, pc}
    b656:	bf00      	nop
    b658:	20003f34 	.word	0x20003f34

0000b65c <Svc::Deframer::allocate(unsigned long)>:

// ----------------------------------------------------------------------
// Implementation of DeframingProtocolInterface
// ----------------------------------------------------------------------

Fw::Buffer Deframer ::allocate(const U32 size)  {
    b65c:	b510      	push	{r4, lr}
    b65e:	4604      	mov	r4, r0
    b660:	4613      	mov	r3, r2
    return bufferAllocate_out(0, size);
    b662:	2200      	movs	r2, #0
    b664:	f000 fcbe 	bl	bfe4 <Svc::DeframerComponentBase::bufferAllocate_out(long, unsigned long)>
}
    b668:	4620      	mov	r0, r4
    b66a:	bd10      	pop	{r4, pc}

0000b66c <non-virtual thunk to Svc::Deframer::~Deframer()>:
    b66c:	b510      	push	{r4, lr}
    b66e:	4b04      	ldr	r3, [pc, #16]	; (b680 <non-virtual thunk to Svc::Deframer::~Deframer()+0x14>)
    b670:	f5a0 6493 	sub.w	r4, r0, #1176	; 0x498
    b674:	4620      	mov	r0, r4
    b676:	6023      	str	r3, [r4, #0]
    b678:	f000 fd42 	bl	c100 <Svc::DeframerComponentBase::~DeframerComponentBase()>
    b67c:	4620      	mov	r0, r4
    b67e:	bd10      	pop	{r4, pc}
    b680:	20003f34 	.word	0x20003f34

0000b684 <non-virtual thunk to Svc::Deframer::~Deframer()>:
    b684:	b510      	push	{r4, lr}
    b686:	4b07      	ldr	r3, [pc, #28]	; (b6a4 <non-virtual thunk to Svc::Deframer::~Deframer()+0x20>)
    b688:	f5a0 6493 	sub.w	r4, r0, #1176	; 0x498
    b68c:	6023      	str	r3, [r4, #0]
    b68e:	4620      	mov	r0, r4
    b690:	f000 fd36 	bl	c100 <Svc::DeframerComponentBase::~DeframerComponentBase()>
    b694:	4620      	mov	r0, r4
    b696:	f44f 61a9 	mov.w	r1, #1352	; 0x548
    b69a:	f00d fb19 	bl	18cd0 <operator delete(void*, unsigned int)>
    b69e:	4620      	mov	r0, r4
    b6a0:	bd10      	pop	{r4, pc}
    b6a2:	bf00      	nop
    b6a4:	20003f34 	.word	0x20003f34

0000b6a8 <non-virtual thunk to Svc::Deframer::allocate(unsigned long)>:
    b6a8:	b510      	push	{r4, lr}
    b6aa:	4604      	mov	r4, r0
    b6ac:	4613      	mov	r3, r2
    b6ae:	f5a1 6193 	sub.w	r1, r1, #1176	; 0x498
    b6b2:	2200      	movs	r2, #0
    b6b4:	f000 fc96 	bl	bfe4 <Svc::DeframerComponentBase::bufferAllocate_out(long, unsigned long)>
    b6b8:	4620      	mov	r0, r4
    b6ba:	bd10      	pop	{r4, pc}

0000b6bc <Svc::Deframer::Deframer(char const*)>:
Deframer ::Deframer(const char* const compName) :
    b6bc:	b538      	push	{r3, r4, r5, lr}
    b6be:	4604      	mov	r4, r0
    m_inRing(m_ringBuffer, sizeof m_ringBuffer)
    b6c0:	f000 fba4 	bl	be0c <Svc::DeframerComponentBase::DeframerComponentBase(char const*)>
    b6c4:	4b0a      	ldr	r3, [pc, #40]	; (b6f0 <Svc::Deframer::Deframer(char const*)+0x34>)
    m_protocol(nullptr),
    b6c6:	2500      	movs	r5, #0
    m_inRing(m_ringBuffer, sizeof m_ringBuffer)
    b6c8:	228c      	movs	r2, #140	; 0x8c
    b6ca:	f204 41b4 	addw	r1, r4, #1204	; 0x4b4
    b6ce:	f103 0008 	add.w	r0, r3, #8
    b6d2:	333c      	adds	r3, #60	; 0x3c
    m_protocol(nullptr),
    b6d4:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
    m_inRing(m_ringBuffer, sizeof m_ringBuffer)
    b6d8:	6020      	str	r0, [r4, #0]
    b6da:	f504 6094 	add.w	r0, r4, #1184	; 0x4a0
    b6de:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
    b6e2:	f001 ff9d 	bl	d620 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)>
}
    b6e6:	4620      	mov	r0, r4
    (void) memset(m_pollBuffer, 0, sizeof m_pollBuffer);
    b6e8:	f884 5540 	strb.w	r5, [r4, #1344]	; 0x540
}
    b6ec:	bd38      	pop	{r3, r4, r5, pc}
    b6ee:	bf00      	nop
    b6f0:	20003f2c 	.word	0x20003f2c

0000b6f4 <Svc::Deframer::setup(Svc::DeframingProtocol&)>:
void Deframer ::setup(DeframingProtocol& protocol) {
    b6f4:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(m_protocol == nullptr);
    b6f6:	f8d0 349c 	ldr.w	r3, [r0, #1180]	; 0x49c
void Deframer ::setup(DeframingProtocol& protocol) {
    b6fa:	4604      	mov	r4, r0
    b6fc:	460d      	mov	r5, r1
    FW_ASSERT(m_protocol == nullptr);
    b6fe:	b11b      	cbz	r3, b708 <Svc::Deframer::setup(Svc::DeframingProtocol&)+0x14>
    b700:	2134      	movs	r1, #52	; 0x34
    b702:	4806      	ldr	r0, [pc, #24]	; (b71c <Svc::Deframer::setup(Svc::DeframingProtocol&)+0x28>)
    b704:	f7f5 ff82 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    protocol.setup(*this);
    b708:	f504 6193 	add.w	r1, r4, #1176	; 0x498
    b70c:	4628      	mov	r0, r5
    m_protocol = &protocol;
    b70e:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
}
    b712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    protocol.setup(*this);
    b716:	f001 bda7 	b.w	d268 <Svc::DeframingProtocol::setup(Svc::DeframingProtocolInterface&)>
    b71a:	bf00      	nop
    b71c:	20001d30 	.word	0x20001d30

0000b720 <Svc::Deframer::processRing()>:

}

void Deframer ::processRing() {

    FW_ASSERT(m_protocol != nullptr);
    b720:	f8d0 349c 	ldr.w	r3, [r0, #1180]	; 0x49c
void Deframer ::processRing() {
    b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b728:	4680      	mov	r8, r0
    b72a:	b085      	sub	sp, #20
    FW_ASSERT(m_protocol != nullptr);
    b72c:	2b00      	cmp	r3, #0
    b72e:	f000 808b 	beq.w	b848 <Svc::Deframer::processRing()+0x128>
    U32 remaining = 0;
    // The protocol status
    DeframingProtocol::DeframingStatus status =
        DeframingProtocol::DEFRAMING_STATUS_SUCCESS;
    // The ring buffer capacity
    const NATIVE_UINT_TYPE ringCapacity = m_inRing.get_capacity();
    b732:	f508 6594 	add.w	r5, r8, #1184	; 0x4a0
    b736:	4628      	mov	r0, r5
    b738:	f002 f962 	bl	da00 <Types::CircularBuffer::get_capacity() const>

    // Process the ring buffer looking for at least the header
    for (U32 i = 0; i < ringCapacity; i++) {
    b73c:	4682      	mov	sl, r0
    b73e:	2800      	cmp	r0, #0
    b740:	d07f      	beq.n	b842 <Svc::Deframer::processRing()+0x122>
    b742:	2700      	movs	r7, #0
        U32 needed = 0;
        // Call the deframe method of the protocol, getting
        // needed and status
        status = m_protocol->deframe(m_inRing, needed);
        // Deframing protocol must not consume data in the ring buffer
        FW_ASSERT(
    b744:	f8df 910c 	ldr.w	r9, [pc, #268]	; b854 <Svc::Deframer::processRing()+0x134>
        U32 needed = 0;
    b748:	46bb      	mov	fp, r7
        remaining = m_inRing.get_allocated_size();
    b74a:	4628      	mov	r0, r5
    b74c:	f001 ff92 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
        if (remaining == 0) {
    b750:	4604      	mov	r4, r0
    b752:	2800      	cmp	r0, #0
    b754:	d075      	beq.n	b842 <Svc::Deframer::processRing()+0x122>
        status = m_protocol->deframe(m_inRing, needed);
    b756:	f8d8 049c 	ldr.w	r0, [r8, #1180]	; 0x49c
    b75a:	aa03      	add	r2, sp, #12
    b75c:	4629      	mov	r1, r5
        U32 needed = 0;
    b75e:	f8cd b00c 	str.w	fp, [sp, #12]
        status = m_protocol->deframe(m_inRing, needed);
    b762:	6803      	ldr	r3, [r0, #0]
    b764:	689b      	ldr	r3, [r3, #8]
    b766:	4798      	blx	r3
    b768:	4606      	mov	r6, r0
        FW_ASSERT(
    b76a:	4628      	mov	r0, r5
    b76c:	f001 ff82 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    b770:	42a0      	cmp	r0, r4
    b772:	d008      	beq.n	b786 <Svc::Deframer::processRing()+0x66>
    b774:	4628      	mov	r0, r5
    b776:	f001 ff7d 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    b77a:	23fe      	movs	r3, #254	; 0xfe
    b77c:	4601      	mov	r1, r0
    b77e:	4622      	mov	r2, r4
    b780:	4648      	mov	r0, r9
    b782:	f7f5 ff61 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
            m_inRing.get_allocated_size() == remaining,
            static_cast<FwAssertArgType>(m_inRing.get_allocated_size()),
            static_cast<FwAssertArgType>(remaining)
        );
        // On successful deframing, consume data from the ring buffer now
        if (status == DeframingProtocol::DEFRAMING_STATUS_SUCCESS) {
    b786:	bb46      	cbnz	r6, b7da <Svc::Deframer::processRing()+0xba>
            // If deframing succeeded, protocol should set needed
            // to a non-zero value
            FW_ASSERT(needed != 0);
    b788:	9903      	ldr	r1, [sp, #12]
    b78a:	2900      	cmp	r1, #0
    b78c:	d049      	beq.n	b822 <Svc::Deframer::processRing()+0x102>
            FW_ASSERT(
    b78e:	42a1      	cmp	r1, r4
    b790:	d83f      	bhi.n	b812 <Svc::Deframer::processRing()+0xf2>
                needed <= remaining,
                static_cast<FwAssertArgType>(needed),
                static_cast<FwAssertArgType>(remaining));
            m_inRing.rotate(needed);
    b792:	4628      	mov	r0, r5
    b794:	f002 f908 	bl	d9a8 <Types::CircularBuffer::rotate(unsigned long)>
            FW_ASSERT(
    b798:	4628      	mov	r0, r5
    b79a:	f001 ff6b 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    b79e:	9b03      	ldr	r3, [sp, #12]
    b7a0:	1ae3      	subs	r3, r4, r3
    b7a2:	4298      	cmp	r0, r3
    b7a4:	d00b      	beq.n	b7be <Svc::Deframer::processRing()+0x9e>
    b7a6:	4628      	mov	r0, r5
    b7a8:	f001 ff64 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    b7ac:	f240 130d 	movw	r3, #269	; 0x10d
    b7b0:	4601      	mov	r1, r0
    b7b2:	4622      	mov	r2, r4
    b7b4:	9300      	str	r3, [sp, #0]
    b7b6:	4648      	mov	r0, r9
    b7b8:	9b03      	ldr	r3, [sp, #12]
    b7ba:	f7f5 ff57 	bl	166c <Fw::SwAssert(char const*, long, long, long, unsigned long)>
    for (U32 i = 0; i < ringCapacity; i++) {
    b7be:	3701      	adds	r7, #1
    b7c0:	45ba      	cmp	sl, r7
    b7c2:	d1c2      	bne.n	b74a <Svc::Deframer::processRing()+0x2a>
        }
    }

    // If more not needed, circular buffer should be empty
    if (status != DeframingProtocol::DEFRAMING_MORE_NEEDED) {
        FW_ASSERT(remaining == 0, static_cast<FwAssertArgType>(remaining));
    b7c4:	2e03      	cmp	r6, #3
    b7c6:	d03c      	beq.n	b842 <Svc::Deframer::processRing()+0x122>
    b7c8:	f240 1233 	movw	r2, #307	; 0x133
    b7cc:	4621      	mov	r1, r4
    b7ce:	4821      	ldr	r0, [pc, #132]	; (b854 <Svc::Deframer::processRing()+0x134>)
    }

}
    b7d0:	b005      	add	sp, #20
    b7d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        FW_ASSERT(remaining == 0, static_cast<FwAssertArgType>(remaining));
    b7d6:	f7f5 bf27 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
        else if (status == DeframingProtocol::DEFRAMING_MORE_NEEDED) {
    b7da:	2e03      	cmp	r6, #3
    b7dc:	d028      	beq.n	b830 <Svc::Deframer::processRing()+0x110>
            m_inRing.rotate(1);
    b7de:	2101      	movs	r1, #1
    b7e0:	4628      	mov	r0, r5
    b7e2:	f002 f8e1 	bl	d9a8 <Types::CircularBuffer::rotate(unsigned long)>
            FW_ASSERT(
    b7e6:	4628      	mov	r0, r5
    b7e8:	f001 ff44 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    b7ec:	1e63      	subs	r3, r4, #1
    b7ee:	4298      	cmp	r0, r3
    b7f0:	d009      	beq.n	b806 <Svc::Deframer::processRing()+0xe6>
    b7f2:	4628      	mov	r0, r5
    b7f4:	f001 ff3e 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    b7f8:	f44f 7392 	mov.w	r3, #292	; 0x124
    b7fc:	4601      	mov	r1, r0
    b7fe:	4622      	mov	r2, r4
    b800:	4648      	mov	r0, r9
    b802:	f7f5 ff21 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
            if (status == DeframingProtocol::DEFRAMING_INVALID_CHECKSUM) {
    b806:	2e02      	cmp	r6, #2
    b808:	d1d9      	bne.n	b7be <Svc::Deframer::processRing()+0x9e>
                Fw::Logger::log("[ERROR] Deframing checksum validation failed\n");
    b80a:	4813      	ldr	r0, [pc, #76]	; (b858 <Svc::Deframer::processRing()+0x138>)
    b80c:	f7f5 ff5c 	bl	16c8 <Fw::Logger::log(char const*, ...)>
    b810:	e7d5      	b.n	b7be <Svc::Deframer::processRing()+0x9e>
            FW_ASSERT(
    b812:	f44f 7384 	mov.w	r3, #264	; 0x108
    b816:	4622      	mov	r2, r4
    b818:	4648      	mov	r0, r9
    b81a:	f7f5 ff15 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
            m_inRing.rotate(needed);
    b81e:	9903      	ldr	r1, [sp, #12]
    b820:	e7b7      	b.n	b792 <Svc::Deframer::processRing()+0x72>
            FW_ASSERT(needed != 0);
    b822:	f240 1107 	movw	r1, #263	; 0x107
    b826:	4648      	mov	r0, r9
    b828:	f7f5 fef0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
            FW_ASSERT(
    b82c:	9903      	ldr	r1, [sp, #12]
    b82e:	e7ae      	b.n	b78e <Svc::Deframer::processRing()+0x6e>
            FW_ASSERT(
    b830:	9903      	ldr	r1, [sp, #12]
    b832:	42a1      	cmp	r1, r4
    b834:	d805      	bhi.n	b842 <Svc::Deframer::processRing()+0x122>
    b836:	f44f 738c 	mov.w	r3, #280	; 0x118
    b83a:	4622      	mov	r2, r4
    b83c:	4805      	ldr	r0, [pc, #20]	; (b854 <Svc::Deframer::processRing()+0x134>)
    b83e:	f7f5 ff03 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
}
    b842:	b005      	add	sp, #20
    b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FW_ASSERT(m_protocol != nullptr);
    b848:	21e5      	movs	r1, #229	; 0xe5
    b84a:	4802      	ldr	r0, [pc, #8]	; (b854 <Svc::Deframer::processRing()+0x134>)
    b84c:	f7f5 fede 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    b850:	e76f      	b.n	b732 <Svc::Deframer::processRing()+0x12>
    b852:	bf00      	nop
    b854:	20001d30 	.word	0x20001d30
    b858:	20001c8c 	.word	0x20001c8c

0000b85c <Svc::Deframer::processBuffer(Fw::Buffer&)>:
void Deframer ::processBuffer(Fw::Buffer& buffer) {
    b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b860:	460c      	mov	r4, r1
    b862:	b083      	sub	sp, #12
    b864:	4681      	mov	r9, r0
    const U32 bufferSize = buffer.getSize();
    b866:	4608      	mov	r0, r1
    b868:	f009 fe28 	bl	154bc <Fw::Buffer::getSize() const>
    b86c:	4680      	mov	r8, r0
    U8 *const bufferData = buffer.getData();
    b86e:	4620      	mov	r0, r4
    b870:	f009 fe22 	bl	154b8 <Fw::Buffer::getData() const>
    for (U32 i = 0; i < bufferSize; ++i) {
    b874:	f1b8 0f00 	cmp.w	r8, #0
    b878:	d035      	beq.n	b8e6 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x8a>
    b87a:	2600      	movs	r6, #0
    b87c:	4682      	mov	sl, r0
        const NATIVE_UINT_TYPE ringFreeSize = m_inRing.get_free_size();
    b87e:	f509 6794 	add.w	r7, r9, #1184	; 0x4a0
    b882:	4644      	mov	r4, r8
    U32 offset = 0;
    b884:	4635      	mov	r5, r6
    b886:	e006      	b.n	b896 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x3a>
        processRing();
    b888:	4648      	mov	r0, r9
        offset += serSize;
    b88a:	445d      	add	r5, fp
        processRing();
    b88c:	f7ff ff48 	bl	b720 <Svc::Deframer::processRing()>
    for (U32 i = 0; i < bufferSize; ++i) {
    b890:	45b0      	cmp	r8, r6
    b892:	d01f      	beq.n	b8d4 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x78>
        if (remaining == 0) {
    b894:	b33c      	cbz	r4, b8e6 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x8a>
        const NATIVE_UINT_TYPE ringFreeSize = m_inRing.get_free_size();
    b896:	4638      	mov	r0, r7
    for (U32 i = 0; i < bufferSize; ++i) {
    b898:	3601      	adds	r6, #1
        const NATIVE_UINT_TYPE ringFreeSize = m_inRing.get_free_size();
    b89a:	f001 feed 	bl	d678 <Types::CircularBuffer::get_free_size() const>
    b89e:	4683      	mov	fp, r0
            m_inRing.serialize(&bufferData[offset], serSize);
    b8a0:	eb0a 0105 	add.w	r1, sl, r5
    b8a4:	4638      	mov	r0, r7
    b8a6:	45a3      	cmp	fp, r4
    b8a8:	bf28      	it	cs
    b8aa:	46a3      	movcs	fp, r4
    b8ac:	465a      	mov	r2, fp
        remaining -= serSize;
    b8ae:	1aa4      	subs	r4, r4, r2
            m_inRing.serialize(&bufferData[offset], serSize);
    b8b0:	f001 ff00 	bl	d6b4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)>
        FW_ASSERT(
    b8b4:	2800      	cmp	r0, #0
    b8b6:	d0e7      	beq.n	b888 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x2c>
    b8b8:	4601      	mov	r1, r0
    b8ba:	20d0      	movs	r0, #208	; 0xd0
    b8bc:	462a      	mov	r2, r5
    b8be:	465b      	mov	r3, fp
    b8c0:	9000      	str	r0, [sp, #0]
        offset += serSize;
    b8c2:	445d      	add	r5, fp
        FW_ASSERT(
    b8c4:	4809      	ldr	r0, [pc, #36]	; (b8ec <Svc::Deframer::processBuffer(Fw::Buffer&)+0x90>)
    b8c6:	f7f5 fed1 	bl	166c <Fw::SwAssert(char const*, long, long, long, unsigned long)>
        processRing();
    b8ca:	4648      	mov	r0, r9
    b8cc:	f7ff ff28 	bl	b720 <Svc::Deframer::processRing()>
    for (U32 i = 0; i < bufferSize; ++i) {
    b8d0:	45b0      	cmp	r8, r6
    b8d2:	d1df      	bne.n	b894 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x38>
    FW_ASSERT(remaining == 0, static_cast<FwAssertArgType>(remaining));
    b8d4:	b13c      	cbz	r4, b8e6 <Svc::Deframer::processBuffer(Fw::Buffer&)+0x8a>
    b8d6:	22df      	movs	r2, #223	; 0xdf
    b8d8:	4621      	mov	r1, r4
    b8da:	4804      	ldr	r0, [pc, #16]	; (b8ec <Svc::Deframer::processBuffer(Fw::Buffer&)+0x90>)
}
    b8dc:	b003      	add	sp, #12
    b8de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FW_ASSERT(remaining == 0, static_cast<FwAssertArgType>(remaining));
    b8e2:	f7f5 bea1 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
}
    b8e6:	b003      	add	sp, #12
    b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8ec:	20001d30 	.word	0x20001d30

0000b8f0 <Svc::Deframer::framedIn_handler(long, Fw::Buffer&, Drv::RecvStatus const&)>:
    if (recvStatus.e == Drv::RecvStatus::RECV_OK) {
    b8f0:	791b      	ldrb	r3, [r3, #4]
) {
    b8f2:	b510      	push	{r4, lr}
    b8f4:	4604      	mov	r4, r0
    b8f6:	b082      	sub	sp, #8
    if (recvStatus.e == Drv::RecvStatus::RECV_OK) {
    b8f8:	b133      	cbz	r3, b908 <Svc::Deframer::framedIn_handler(long, Fw::Buffer&, Drv::RecvStatus const&)+0x18>
    framedDeallocate_out(0, recvBuffer);
    b8fa:	2100      	movs	r1, #0
    b8fc:	4620      	mov	r0, r4
}
    b8fe:	b002      	add	sp, #8
    b900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    framedDeallocate_out(0, recvBuffer);
    b904:	f000 bbcc 	b.w	c0a0 <Svc::DeframerComponentBase::framedDeallocate_out(long, Fw::Buffer&)>
        processBuffer(recvBuffer);
    b908:	4611      	mov	r1, r2
    b90a:	9201      	str	r2, [sp, #4]
    b90c:	f7ff ffa6 	bl	b85c <Svc::Deframer::processBuffer(Fw::Buffer&)>
    b910:	9a01      	ldr	r2, [sp, #4]
    b912:	e7f2      	b.n	b8fa <Svc::Deframer::framedIn_handler(long, Fw::Buffer&, Drv::RecvStatus const&)+0xa>

0000b914 <Svc::Deframer::schedIn_handler(long, unsigned long)>:
) {
    b914:	b510      	push	{r4, lr}
    b916:	b08c      	sub	sp, #48	; 0x30
    b918:	4604      	mov	r4, r0
    Fw::Buffer buffer(m_pollBuffer, sizeof(m_pollBuffer));
    b91a:	f500 61a8 	add.w	r1, r0, #1344	; 0x540
    b91e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b922:	2201      	movs	r2, #1
    b924:	a803      	add	r0, sp, #12
    b926:	f009 fd97 	bl	15458 <Fw::Buffer::Buffer(unsigned char*, unsigned long, unsigned long)>
    const Drv::PollStatus status = framedPoll_out(0, buffer);
    b92a:	ab03      	add	r3, sp, #12
    b92c:	2200      	movs	r2, #0
    b92e:	4621      	mov	r1, r4
    b930:	a801      	add	r0, sp, #4
    b932:	f000 fbcb 	bl	c0cc <Svc::DeframerComponentBase::framedPoll_out(long, Fw::Buffer&)>
    if (status.e == Drv::PollStatus::POLL_OK) {
    b936:	f89d 3008 	ldrb.w	r3, [sp, #8]
    b93a:	b183      	cbz	r3, b95e <Svc::Deframer::schedIn_handler(long, unsigned long)+0x4a>
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Drv {

  class PollStatus :
    b93c:	4b0a      	ldr	r3, [pc, #40]	; (b968 <Svc::Deframer::schedIn_handler(long, unsigned long)+0x54>)
    b93e:	a801      	add	r0, sp, #4
    b940:	9301      	str	r3, [sp, #4]
    b942:	f7f4 fdfb 	bl	53c <Fw::Serializable::~Serializable()>
    b946:	4a09      	ldr	r2, [pc, #36]	; (b96c <Svc::Deframer::schedIn_handler(long, unsigned long)+0x58>)
    b948:	a804      	add	r0, sp, #16
    b94a:	4b09      	ldr	r3, [pc, #36]	; (b970 <Svc::Deframer::schedIn_handler(long, unsigned long)+0x5c>)
    b94c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    b950:	f7f4 fdfe 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    b954:	a803      	add	r0, sp, #12
    b956:	f7f4 fdf1 	bl	53c <Fw::Serializable::~Serializable()>
}
    b95a:	b00c      	add	sp, #48	; 0x30
    b95c:	bd10      	pop	{r4, pc}
        processBuffer(buffer);
    b95e:	a903      	add	r1, sp, #12
    b960:	4620      	mov	r0, r4
    b962:	f7ff ff7b 	bl	b85c <Svc::Deframer::processBuffer(Fw::Buffer&)>
    b966:	e7e9      	b.n	b93c <Svc::Deframer::schedIn_handler(long, unsigned long)+0x28>
    b968:	20003764 	.word	0x20003764
    b96c:	200032c0 	.word	0x200032c0
    b970:	20003214 	.word	0x20003214

0000b974 <Svc::Deframer::route(Fw::Buffer&)>:
void Deframer ::route(Fw::Buffer& packetBuffer) {
    b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FwPacketDescriptorType packetType = Fw::ComPacket::FW_PACKET_UNKNOWN;
    b978:	23ff      	movs	r3, #255	; 0xff
void Deframer ::route(Fw::Buffer& packetBuffer) {
    b97a:	b0a4      	sub	sp, #144	; 0x90
    b97c:	460c      	mov	r4, r1
    b97e:	4606      	mov	r6, r0
        Fw::SerializeBufferBase& serial = packetBuffer.getSerializeRepr();
    b980:	4608      	mov	r0, r1
    FwPacketDescriptorType packetType = Fw::ComPacket::FW_PACKET_UNKNOWN;
    b982:	9300      	str	r3, [sp, #0]
        Fw::SerializeBufferBase& serial = packetBuffer.getSerializeRepr();
    b984:	f009 fdae 	bl	154e4 <Fw::Buffer::getSerializeRepr()>
    b988:	4605      	mov	r5, r0
        status = serial.setBuffLen(packetBuffer.getSize());
    b98a:	4620      	mov	r0, r4
    b98c:	f009 fd96 	bl	154bc <Fw::Buffer::getSize() const>
    b990:	4601      	mov	r1, r0
    b992:	4628      	mov	r0, r5
    b994:	f7f5 fb76 	bl	1084 <Fw::SerializeBufferBase::setBuffLen(unsigned long)>
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
    b998:	bb18      	cbnz	r0, b9e2 <Svc::Deframer::route(Fw::Buffer&)+0x6e>
        status = serial.deserialize(packetType);
    b99a:	4628      	mov	r0, r5
    b99c:	4669      	mov	r1, sp
    b99e:	f7f5 f98f 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    b9a2:	4605      	mov	r5, r0
    b9a4:	b9c0      	cbnz	r0, b9d8 <Svc::Deframer::route(Fw::Buffer&)+0x64>
        U8 *const packetData = packetBuffer.getData();
    b9a6:	4620      	mov	r0, r4
    b9a8:	f009 fd86 	bl	154b8 <Fw::Buffer::getData() const>
    b9ac:	4680      	mov	r8, r0
        const U32 packetSize = packetBuffer.getSize();
    b9ae:	4620      	mov	r0, r4
    b9b0:	f009 fd84 	bl	154bc <Fw::Buffer::getSize() const>
        switch (packetType) {
    b9b4:	9b00      	ldr	r3, [sp, #0]
        const U32 packetSize = packetBuffer.getSize();
    b9b6:	4607      	mov	r7, r0
        switch (packetType) {
    b9b8:	b1c3      	cbz	r3, b9ec <Svc::Deframer::route(Fw::Buffer&)+0x78>
    b9ba:	2b03      	cmp	r3, #3
    b9bc:	d104      	bne.n	b9c8 <Svc::Deframer::route(Fw::Buffer&)+0x54>
                if (isConnected_bufferOut_OutputPort(0)) {
    b9be:	4629      	mov	r1, r5
    b9c0:	4630      	mov	r0, r6
    b9c2:	f000 fa55 	bl	be70 <Svc::DeframerComponentBase::isConnected_bufferOut_OutputPort(long)>
    b9c6:	bb20      	cbnz	r0, ba12 <Svc::Deframer::route(Fw::Buffer&)+0x9e>
        bufferDeallocate_out(0, packetBuffer);
    b9c8:	4622      	mov	r2, r4
    b9ca:	2100      	movs	r1, #0
    b9cc:	4630      	mov	r0, r6
    b9ce:	f000 fb23 	bl	c018 <Svc::DeframerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)>
}
    b9d2:	b024      	add	sp, #144	; 0x90
    b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Fw::Logger::log(
    b9d8:	4601      	mov	r1, r0
    b9da:	4818      	ldr	r0, [pc, #96]	; (ba3c <Svc::Deframer::route(Fw::Buffer&)+0xc8>)
    b9dc:	f7f5 fe74 	bl	16c8 <Fw::Logger::log(char const*, ...)>
    if (deallocate) {
    b9e0:	e7f2      	b.n	b9c8 <Svc::Deframer::route(Fw::Buffer&)+0x54>
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK);
    b9e2:	2174      	movs	r1, #116	; 0x74
    b9e4:	4816      	ldr	r0, [pc, #88]	; (ba40 <Svc::Deframer::route(Fw::Buffer&)+0xcc>)
    b9e6:	f7f5 fe11 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    b9ea:	e7d6      	b.n	b99a <Svc::Deframer::route(Fw::Buffer&)+0x26>
                Fw::ComBuffer com;
    b9ec:	a801      	add	r0, sp, #4
    b9ee:	f00b fdc1 	bl	17574 <Fw::ComBuffer::ComBuffer()>
                status = com.setBuff(packetData, packetSize);
    b9f2:	463a      	mov	r2, r7
    b9f4:	4641      	mov	r1, r8
    b9f6:	a801      	add	r0, sp, #4
    b9f8:	f7f5 fb06 	bl	1008 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)>
                if (status == Fw::FW_SERIALIZE_OK) {
    b9fc:	b9c0      	cbnz	r0, ba30 <Svc::Deframer::route(Fw::Buffer&)+0xbc>
                    comOut_out(0, com, 0);
    b9fe:	4603      	mov	r3, r0
    ba00:	4601      	mov	r1, r0
    ba02:	aa01      	add	r2, sp, #4
    ba04:	4630      	mov	r0, r6
    ba06:	f000 fb33 	bl	c070 <Svc::DeframerComponentBase::comOut_out(long, Fw::ComBuffer&, unsigned long)>
            }
    ba0a:	a801      	add	r0, sp, #4
    ba0c:	f00b fd9a 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
    if (deallocate) {
    ba10:	e7da      	b.n	b9c8 <Svc::Deframer::route(Fw::Buffer&)+0x54>
                    packetBuffer.setData(packetData + sizeof(packetType));
    ba12:	f108 0104 	add.w	r1, r8, #4
    ba16:	4620      	mov	r0, r4
    ba18:	f009 fd54 	bl	154c4 <Fw::Buffer::setData(unsigned char*)>
                    packetBuffer.setSize(static_cast<U32>(packetSize - sizeof(packetType)));
    ba1c:	1f39      	subs	r1, r7, #4
    ba1e:	4620      	mov	r0, r4
    ba20:	f009 fd58 	bl	154d4 <Fw::Buffer::setSize(unsigned long)>
                    bufferOut_out(0, packetBuffer);
    ba24:	4622      	mov	r2, r4
    ba26:	4629      	mov	r1, r5
    ba28:	4630      	mov	r0, r6
    ba2a:	f000 fb0b 	bl	c044 <Svc::DeframerComponentBase::bufferOut_out(long, Fw::Buffer&)>
    if (deallocate) {
    ba2e:	e7d0      	b.n	b9d2 <Svc::Deframer::route(Fw::Buffer&)+0x5e>
                    Fw::Logger::log(
    ba30:	4601      	mov	r1, r0
    ba32:	4804      	ldr	r0, [pc, #16]	; (ba44 <Svc::Deframer::route(Fw::Buffer&)+0xd0>)
    ba34:	f7f5 fe48 	bl	16c8 <Fw::Logger::log(char const*, ...)>
    ba38:	e7e7      	b.n	ba0a <Svc::Deframer::route(Fw::Buffer&)+0x96>
    ba3a:	bf00      	nop
    ba3c:	20001cf4 	.word	0x20001cf4
    ba40:	20001d30 	.word	0x20001d30
    ba44:	20001cbc 	.word	0x20001cbc

0000ba48 <non-virtual thunk to Svc::Deframer::route(Fw::Buffer&)>:
    // Implementation of DeframingProtocolInterface
    // ----------------------------------------------------------------------

    //! The implementation of DeframingProtocolInterface::route
    //! Send a data packet
    void route(
    ba48:	f5a0 6093 	sub.w	r0, r0, #1176	; 0x498
    ba4c:	f7ff bf92 	b.w	b974 <Svc::Deframer::route(Fw::Buffer&)>

0000ba50 <Svc::DeframerComponentBase::lock()>:
  // ----------------------------------------------------------------------

  void DeframerComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
    ba50:	f500 6088 	add.w	r0, r0, #1088	; 0x440
    ba54:	f007 bf10 	b.w	13878 <Os::Mutex::lock()>

0000ba58 <Svc::DeframerComponentBase::unLock()>:
  }

  void DeframerComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
    ba58:	f500 6088 	add.w	r0, r0, #1088	; 0x440
    ba5c:	f007 bf60 	b.w	13920 <Os::Mutex::unLock()>

0000ba60 <Svc::DeframerComponentBase::m_p_cmdResponseIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)>:
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba62:	b083      	sub	sp, #12
    ba64:	460d      	mov	r5, r1
    ba66:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    ba68:	4604      	mov	r4, r0
  {
    ba6a:	9f08      	ldr	r7, [sp, #32]
    FW_ASSERT(callComp);
    ba6c:	b1a0      	cbz	r0, ba98 <Svc::DeframerComponentBase::m_p_cmdResponseIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x38>
    FW_ASSERT(
    ba6e:	2d00      	cmp	r5, #0
    ba70:	dd07      	ble.n	ba82 <Svc::DeframerComponentBase::m_p_cmdResponseIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x22>
    ba72:	f240 2236 	movw	r2, #566	; 0x236
    ba76:	4629      	mov	r1, r5
    ba78:	480b      	ldr	r0, [pc, #44]	; (baa8 <Svc::DeframerComponentBase::m_p_cmdResponseIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x48>)
    ba7a:	9301      	str	r3, [sp, #4]
    ba7c:	f7f5 fdd4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ba80:	9b01      	ldr	r3, [sp, #4]
    this->cmdResponseIn_handler(
    ba82:	9708      	str	r7, [sp, #32]
    ba84:	4629      	mov	r1, r5
    ba86:	6825      	ldr	r5, [r4, #0]
    ba88:	4620      	mov	r0, r4
    ba8a:	4632      	mov	r2, r6
    ba8c:	692c      	ldr	r4, [r5, #16]
    ba8e:	46a4      	mov	ip, r4
      portNum,
      opCode,
      cmdSeq,
      response
    );
  }
    ba90:	b003      	add	sp, #12
    ba92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->cmdResponseIn_handler(
    ba96:	4760      	bx	ip
    FW_ASSERT(callComp);
    ba98:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    ba9c:	4802      	ldr	r0, [pc, #8]	; (baa8 <Svc::DeframerComponentBase::m_p_cmdResponseIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0x48>)
    ba9e:	9301      	str	r3, [sp, #4]
    baa0:	f7f5 fdb4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    baa4:	9b01      	ldr	r3, [sp, #4]
    baa6:	e7e2      	b.n	ba6e <Svc::DeframerComponentBase::m_p_cmdResponseIn_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&)+0xe>
    baa8:	200014c4 	.word	0x200014c4

0000baac <Svc::DeframerComponentBase::init(long)>:
  {
    baac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bab0:	4605      	mov	r5, r0
    bab2:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    bab4:	f006 fa14 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    bab8:	4f8a      	ldr	r7, [pc, #552]	; (bce4 <Svc::DeframerComponentBase::init(long)+0x238>)
      this->m_cmdResponseIn_InputPort[port].init();
    baba:	f105 0864 	add.w	r8, r5, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    babe:	4c8a      	ldr	r4, [pc, #552]	; (bce8 <Svc::DeframerComponentBase::init(long)+0x23c>)
    const char* toChar() const { return this->m_buf; }
    bac0:	f105 0608 	add.w	r6, r5, #8
      this->m_framedIn_InputPort[port].init();
    bac4:	f105 09d4 	add.w	r9, r5, #212	; 0xd4
      this->m_cmdResponseIn_InputPort[port].init();
    bac8:	4640      	mov	r0, r8
    baca:	f00a fd65 	bl	16598 <Fw::InputCmdResponsePort::init()>
      this->m_cmdResponseIn_InputPort[port].addCallComp(
    bace:	4a87      	ldr	r2, [pc, #540]	; (bcec <Svc::DeframerComponentBase::init(long)+0x240>)
    bad0:	4629      	mov	r1, r5
    bad2:	4640      	mov	r0, r8
    bad4:	f00a fca6 	bl	16424 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))>
      this->m_cmdResponseIn_InputPort[port].setPortNum(port);
    bad8:	2100      	movs	r1, #0
    bada:	4640      	mov	r0, r8
    badc:	f00c f8fa 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    bae0:	4668      	mov	r0, sp
    bae2:	f7f5 fb9d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bae6:	4639      	mov	r1, r7
    bae8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    baea:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    baec:	f7f5 fc00 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    baf0:	2300      	movs	r3, #0
    baf2:	4632      	mov	r2, r6
    baf4:	497e      	ldr	r1, [pc, #504]	; (bcf0 <Svc::DeframerComponentBase::init(long)+0x244>)
    baf6:	4668      	mov	r0, sp
    baf8:	f7f5 fbc8 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_cmdResponseIn_InputPort[port].setObjName(portName.toChar());
    bafc:	a901      	add	r1, sp, #4
    bafe:	4640      	mov	r0, r8
      this->m_schedIn_InputPort[port].init();
    bb00:	f505 78a2 	add.w	r8, r5, #324	; 0x144
      this->m_cmdResponseIn_InputPort[port].setObjName(portName.toChar());
    bb04:	f00c fa4c 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bb08:	4668      	mov	r0, sp
    bb0a:	9400      	str	r4, [sp, #0]
    bb0c:	f7f5 fb92 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_framedIn_InputPort[port].init();
    bb10:	4648      	mov	r0, r9
    bb12:	f001 f97d 	bl	ce10 <Drv::InputByteStreamRecvPort::init()>
      this->m_framedIn_InputPort[port].addCallComp(
    bb16:	4a77      	ldr	r2, [pc, #476]	; (bcf4 <Svc::DeframerComponentBase::init(long)+0x248>)
    bb18:	4629      	mov	r1, r5
    bb1a:	4648      	mov	r0, r9
    bb1c:	f001 f8d0 	bl	ccc0 <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))>
      this->m_framedIn_InputPort[port].setPortNum(port);
    bb20:	2100      	movs	r1, #0
    bb22:	4648      	mov	r0, r9
    bb24:	f00c f8d6 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    bb28:	4668      	mov	r0, sp
    bb2a:	f7f5 fb79 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bb2e:	4639      	mov	r1, r7
    bb30:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bb32:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bb34:	f7f5 fbdc 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bb38:	2300      	movs	r3, #0
    bb3a:	4632      	mov	r2, r6
    bb3c:	496e      	ldr	r1, [pc, #440]	; (bcf8 <Svc::DeframerComponentBase::init(long)+0x24c>)
    bb3e:	4668      	mov	r0, sp
    bb40:	f7f5 fba4 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_framedIn_InputPort[port].setObjName(portName.toChar());
    bb44:	a901      	add	r1, sp, #4
    bb46:	4648      	mov	r0, r9
      this->m_bufferAllocate_OutputPort[port].init();
    bb48:	f505 79da 	add.w	r9, r5, #436	; 0x1b4
      this->m_framedIn_InputPort[port].setObjName(portName.toChar());
    bb4c:	f00c fa28 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bb50:	4668      	mov	r0, sp
    bb52:	9400      	str	r4, [sp, #0]
    bb54:	f7f5 fb6e 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_schedIn_InputPort[port].init();
    bb58:	4640      	mov	r0, r8
    bb5a:	f005 faaf 	bl	110bc <Svc::InputSchedPort::init()>
      this->m_schedIn_InputPort[port].addCallComp(
    bb5e:	4a67      	ldr	r2, [pc, #412]	; (bcfc <Svc::DeframerComponentBase::init(long)+0x250>)
    bb60:	4629      	mov	r1, r5
    bb62:	4640      	mov	r0, r8
    bb64:	f005 fa0e 	bl	10f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_schedIn_InputPort[port].setPortNum(port);
    bb68:	2100      	movs	r1, #0
    bb6a:	4640      	mov	r0, r8
    bb6c:	f00c f8b2 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    bb70:	4668      	mov	r0, sp
    bb72:	f7f5 fb55 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bb76:	4639      	mov	r1, r7
    bb78:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bb7a:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bb7c:	f7f5 fbb8 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bb80:	4632      	mov	r2, r6
    bb82:	2300      	movs	r3, #0
    bb84:	495e      	ldr	r1, [pc, #376]	; (bd00 <Svc::DeframerComponentBase::init(long)+0x254>)
    bb86:	4668      	mov	r0, sp
    bb88:	f7f5 fb80 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
    bb8c:	a901      	add	r1, sp, #4
    bb8e:	4640      	mov	r0, r8
      this->m_bufferDeallocate_OutputPort[port].init();
    bb90:	f505 7808 	add.w	r8, r5, #544	; 0x220
      this->m_schedIn_InputPort[port].setObjName(portName.toChar());
    bb94:	f00c fa04 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bb98:	4668      	mov	r0, sp
    bb9a:	9400      	str	r4, [sp, #0]
    bb9c:	f7f5 fb4a 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_bufferAllocate_OutputPort[port].init();
    bba0:	4648      	mov	r0, r9
    bba2:	f009 fd65 	bl	15670 <Fw::OutputBufferGetPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    bba6:	4668      	mov	r0, sp
    bba8:	f7f5 fb3a 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bbac:	4639      	mov	r1, r7
    bbae:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bbb0:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bbb2:	f7f5 fb9d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bbb6:	4632      	mov	r2, r6
    bbb8:	2300      	movs	r3, #0
    bbba:	4952      	ldr	r1, [pc, #328]	; (bd04 <Svc::DeframerComponentBase::init(long)+0x258>)
    bbbc:	4668      	mov	r0, sp
    bbbe:	f7f5 fb65 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferAllocate_OutputPort[port].setObjName(portName.toChar());
    bbc2:	a901      	add	r1, sp, #4
    bbc4:	4648      	mov	r0, r9
      this->m_bufferOut_OutputPort[port].init();
    bbc6:	f505 7923 	add.w	r9, r5, #652	; 0x28c
      this->m_bufferAllocate_OutputPort[port].setObjName(portName.toChar());
    bbca:	f00c f9e9 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bbce:	4668      	mov	r0, sp
    bbd0:	9400      	str	r4, [sp, #0]
    bbd2:	f7f5 fb2f 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_bufferDeallocate_OutputPort[port].init();
    bbd6:	4640      	mov	r0, r8
    bbd8:	f009 fe7a 	bl	158d0 <Fw::OutputBufferSendPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    bbdc:	4668      	mov	r0, sp
    bbde:	f7f5 fb1f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bbe2:	4639      	mov	r1, r7
    bbe4:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bbe6:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bbe8:	f7f5 fb82 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bbec:	4632      	mov	r2, r6
    bbee:	2300      	movs	r3, #0
    bbf0:	4945      	ldr	r1, [pc, #276]	; (bd08 <Svc::DeframerComponentBase::init(long)+0x25c>)
    bbf2:	4668      	mov	r0, sp
    bbf4:	f7f5 fb4a 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferDeallocate_OutputPort[port].setObjName(portName.toChar());
    bbf8:	a901      	add	r1, sp, #4
    bbfa:	4640      	mov	r0, r8
      this->m_comOut_OutputPort[port].init();
    bbfc:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
      this->m_bufferDeallocate_OutputPort[port].setObjName(portName.toChar());
    bc00:	f00c f9ce 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bc04:	4668      	mov	r0, sp
    bc06:	9400      	str	r4, [sp, #0]
    bc08:	f7f5 fb14 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_bufferOut_OutputPort[port].init();
    bc0c:	4648      	mov	r0, r9
    bc0e:	f009 fe5f 	bl	158d0 <Fw::OutputBufferSendPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    bc12:	4668      	mov	r0, sp
    bc14:	f7f5 fb04 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bc18:	4639      	mov	r1, r7
    bc1a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bc1c:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bc1e:	f7f5 fb67 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bc22:	4632      	mov	r2, r6
    bc24:	2300      	movs	r3, #0
    bc26:	4939      	ldr	r1, [pc, #228]	; (bd0c <Svc::DeframerComponentBase::init(long)+0x260>)
    bc28:	4668      	mov	r0, sp
    bc2a:	f7f5 fb2f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferOut_OutputPort[port].setObjName(portName.toChar());
    bc2e:	a901      	add	r1, sp, #4
    bc30:	4648      	mov	r0, r9
    bc32:	f00c f9b5 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bc36:	4668      	mov	r0, sp
    bc38:	9400      	str	r4, [sp, #0]
    bc3a:	f7f5 fafb 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_comOut_OutputPort[port].init();
    bc3e:	4640      	mov	r0, r8
    bc40:	f00b fddc 	bl	177fc <Fw::OutputComPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    bc44:	4668      	mov	r0, sp
    bc46:	f7f5 faeb 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bc4a:	4639      	mov	r1, r7
    bc4c:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bc4e:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bc50:	f7f5 fb4e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bc54:	4632      	mov	r2, r6
    bc56:	2300      	movs	r3, #0
    bc58:	492d      	ldr	r1, [pc, #180]	; (bd10 <Svc::DeframerComponentBase::init(long)+0x264>)
    bc5a:	4668      	mov	r0, sp
    bc5c:	f7f5 fb16 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_comOut_OutputPort[port].setObjName(portName.toChar());
    bc60:	a901      	add	r1, sp, #4
    bc62:	4640      	mov	r0, r8
      this->m_framedDeallocate_OutputPort[port].init();
    bc64:	f505 7859 	add.w	r8, r5, #868	; 0x364
      this->m_comOut_OutputPort[port].setObjName(portName.toChar());
    bc68:	f00c f99a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bc6c:	4668      	mov	r0, sp
    bc6e:	9400      	str	r4, [sp, #0]
    bc70:	f7f5 fae0 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_framedDeallocate_OutputPort[port].init();
    bc74:	4640      	mov	r0, r8
      this->m_framedPoll_OutputPort[port].init();
    bc76:	f505 7574 	add.w	r5, r5, #976	; 0x3d0
      this->m_framedDeallocate_OutputPort[port].init();
    bc7a:	f009 fe29 	bl	158d0 <Fw::OutputBufferSendPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    bc7e:	4668      	mov	r0, sp
    bc80:	f7f5 face 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bc84:	4639      	mov	r1, r7
    bc86:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bc88:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bc8a:	f7f5 fb31 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bc8e:	4632      	mov	r2, r6
    bc90:	2300      	movs	r3, #0
    bc92:	4920      	ldr	r1, [pc, #128]	; (bd14 <Svc::DeframerComponentBase::init(long)+0x268>)
    bc94:	4668      	mov	r0, sp
    bc96:	f7f5 faf9 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_framedDeallocate_OutputPort[port].setObjName(portName.toChar());
    bc9a:	a901      	add	r1, sp, #4
    bc9c:	4640      	mov	r0, r8
    bc9e:	f00c f97f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bca2:	4668      	mov	r0, sp
    bca4:	9400      	str	r4, [sp, #0]
    bca6:	f7f5 fac5 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_framedPoll_OutputPort[port].init();
    bcaa:	4628      	mov	r0, r5
    bcac:	f000 fece 	bl	ca4c <Drv::OutputByteStreamPollPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    bcb0:	4668      	mov	r0, sp
    bcb2:	f7f5 fab5 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    bcb6:	4639      	mov	r1, r7
    bcb8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    bcba:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    bcbc:	f7f5 fb18 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    bcc0:	4632      	mov	r2, r6
    bcc2:	2300      	movs	r3, #0
    bcc4:	4914      	ldr	r1, [pc, #80]	; (bd18 <Svc::DeframerComponentBase::init(long)+0x26c>)
    bcc6:	4668      	mov	r0, sp
    bcc8:	f7f5 fae0 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_framedPoll_OutputPort[port].setObjName(portName.toChar());
    bccc:	a901      	add	r1, sp, #4
    bcce:	4628      	mov	r0, r5
    bcd0:	f00c f966 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    bcd4:	4668      	mov	r0, sp
    bcd6:	9400      	str	r4, [sp, #0]
    bcd8:	f7f5 faac 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    bcdc:	b017      	add	sp, #92	; 0x5c
    bcde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bce2:	bf00      	nop
    bce4:	20001d2c 	.word	0x20001d2c
    bce8:	20002b80 	.word	0x20002b80
    bcec:	0000ba61 	.word	0x0000ba61
    bcf0:	20001514 	.word	0x20001514
    bcf4:	0000bf0d 	.word	0x0000bf0d
    bcf8:	20001534 	.word	0x20001534
    bcfc:	0000bfad 	.word	0x0000bfad
    bd00:	20002028 	.word	0x20002028
    bd04:	20001550 	.word	0x20001550
    bd08:	20001574 	.word	0x20001574
    bd0c:	20001598 	.word	0x20001598
    bd10:	200015b8 	.word	0x200015b8
    bd14:	200015d4 	.word	0x200015d4
    bd18:	200015f8 	.word	0x200015f8

0000bd1c <Svc::DeframerComponentBase::get_cmdResponseIn_InputPort(long)>:
  {
    bd1c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    bd1e:	1e0c      	subs	r4, r1, #0
  {
    bd20:	4605      	mov	r5, r0
    FW_ASSERT(
    bd22:	dd03      	ble.n	bd2c <Svc::DeframerComponentBase::get_cmdResponseIn_InputPort(long)+0x10>
    bd24:	22dc      	movs	r2, #220	; 0xdc
    bd26:	4804      	ldr	r0, [pc, #16]	; (bd38 <Svc::DeframerComponentBase::get_cmdResponseIn_InputPort(long)+0x1c>)
    bd28:	f7f5 fc7e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_cmdResponseIn_InputPort[portNum];
    bd2c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    bd30:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    bd34:	3064      	adds	r0, #100	; 0x64
    bd36:	bd38      	pop	{r3, r4, r5, pc}
    bd38:	200014c4 	.word	0x200014c4

0000bd3c <Svc::DeframerComponentBase::get_framedIn_InputPort(long)>:
  {
    bd3c:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    bd3e:	1e0c      	subs	r4, r1, #0
  {
    bd40:	4605      	mov	r5, r0
    FW_ASSERT(
    bd42:	dd03      	ble.n	bd4c <Svc::DeframerComponentBase::get_framedIn_InputPort(long)+0x10>
    bd44:	22e7      	movs	r2, #231	; 0xe7
    bd46:	4804      	ldr	r0, [pc, #16]	; (bd58 <Svc::DeframerComponentBase::get_framedIn_InputPort(long)+0x1c>)
    bd48:	f7f5 fc6e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_framedIn_InputPort[portNum];
    bd4c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    bd50:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    bd54:	30d4      	adds	r0, #212	; 0xd4
    bd56:	bd38      	pop	{r3, r4, r5, pc}
    bd58:	200014c4 	.word	0x200014c4

0000bd5c <Svc::DeframerComponentBase::set_bufferAllocate_OutputPort(long, Fw::InputBufferGetPort*)>:
  {
    bd5c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    bd5e:	1e0d      	subs	r5, r1, #0
  {
    bd60:	4604      	mov	r4, r0
    bd62:	4616      	mov	r6, r2
    FW_ASSERT(
    bd64:	dd04      	ble.n	bd70 <Svc::DeframerComponentBase::set_bufferAllocate_OutputPort(long, Fw::InputBufferGetPort*)+0x14>
    bd66:	f44f 7282 	mov.w	r2, #260	; 0x104
    bd6a:	4806      	ldr	r0, [pc, #24]	; (bd84 <Svc::DeframerComponentBase::set_bufferAllocate_OutputPort(long, Fw::InputBufferGetPort*)+0x28>)
    bd6c:	f7f5 fc5c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_bufferAllocate_OutputPort[portNum].addCallPort(port);
    bd70:	236c      	movs	r3, #108	; 0x6c
    bd72:	4631      	mov	r1, r6
    bd74:	fb03 4005 	mla	r0, r3, r5, r4
  }
    bd78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_bufferAllocate_OutputPort[portNum].addCallPort(port);
    bd7c:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
    bd80:	f009 bc44 	b.w	1560c <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)>
    bd84:	200014c4 	.word	0x200014c4

0000bd88 <Svc::DeframerComponentBase::set_bufferDeallocate_OutputPort(long, Fw::InputBufferSendPort*)>:
  {
    bd88:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    bd8a:	1e0d      	subs	r5, r1, #0
  {
    bd8c:	4604      	mov	r4, r0
    bd8e:	4616      	mov	r6, r2
    FW_ASSERT(
    bd90:	dd04      	ble.n	bd9c <Svc::DeframerComponentBase::set_bufferDeallocate_OutputPort(long, Fw::InputBufferSendPort*)+0x14>
    bd92:	f44f 7289 	mov.w	r2, #274	; 0x112
    bd96:	4806      	ldr	r0, [pc, #24]	; (bdb0 <Svc::DeframerComponentBase::set_bufferDeallocate_OutputPort(long, Fw::InputBufferSendPort*)+0x28>)
    bd98:	f7f5 fc46 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_bufferDeallocate_OutputPort[portNum].addCallPort(port);
    bd9c:	236c      	movs	r3, #108	; 0x6c
    bd9e:	4631      	mov	r1, r6
    bda0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    bda4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_bufferDeallocate_OutputPort[portNum].addCallPort(port);
    bda8:	f500 7008 	add.w	r0, r0, #544	; 0x220
    bdac:	f009 bd40 	b.w	15830 <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)>
    bdb0:	200014c4 	.word	0x200014c4

0000bdb4 <Svc::DeframerComponentBase::set_comOut_OutputPort(long, Fw::InputComPort*)>:
  {
    bdb4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    bdb6:	1e0d      	subs	r5, r1, #0
  {
    bdb8:	4604      	mov	r4, r0
    bdba:	4616      	mov	r6, r2
    FW_ASSERT(
    bdbc:	dd04      	ble.n	bdc8 <Svc::DeframerComponentBase::set_comOut_OutputPort(long, Fw::InputComPort*)+0x14>
    bdbe:	f44f 7297 	mov.w	r2, #302	; 0x12e
    bdc2:	4806      	ldr	r0, [pc, #24]	; (bddc <Svc::DeframerComponentBase::set_comOut_OutputPort(long, Fw::InputComPort*)+0x28>)
    bdc4:	f7f5 fc30 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_comOut_OutputPort[portNum].addCallPort(port);
    bdc8:	236c      	movs	r3, #108	; 0x6c
    bdca:	4631      	mov	r1, r6
    bdcc:	fb03 4005 	mla	r0, r3, r5, r4
  }
    bdd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_comOut_OutputPort[portNum].addCallPort(port);
    bdd4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    bdd8:	f00b bc7a 	b.w	176d0 <Fw::OutputComPort::addCallPort(Fw::InputComPort*)>
    bddc:	200014c4 	.word	0x200014c4

0000bde0 <Svc::DeframerComponentBase::set_framedDeallocate_OutputPort(long, Fw::InputBufferSendPort*)>:
  {
    bde0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    bde2:	1e0d      	subs	r5, r1, #0
  {
    bde4:	4604      	mov	r4, r0
    bde6:	4616      	mov	r6, r2
    FW_ASSERT(
    bde8:	dd04      	ble.n	bdf4 <Svc::DeframerComponentBase::set_framedDeallocate_OutputPort(long, Fw::InputBufferSendPort*)+0x14>
    bdea:	f44f 729e 	mov.w	r2, #316	; 0x13c
    bdee:	4806      	ldr	r0, [pc, #24]	; (be08 <Svc::DeframerComponentBase::set_framedDeallocate_OutputPort(long, Fw::InputBufferSendPort*)+0x28>)
    bdf0:	f7f5 fc1a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_framedDeallocate_OutputPort[portNum].addCallPort(port);
    bdf4:	236c      	movs	r3, #108	; 0x6c
    bdf6:	4631      	mov	r1, r6
    bdf8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    bdfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_framedDeallocate_OutputPort[portNum].addCallPort(port);
    be00:	f500 7059 	add.w	r0, r0, #868	; 0x364
    be04:	f009 bd14 	b.w	15830 <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)>
    be08:	200014c4 	.word	0x200014c4

0000be0c <Svc::DeframerComponentBase::DeframerComponentBase(char const*)>:
  DeframerComponentBase ::
    be0c:	b510      	push	{r4, lr}
    be0e:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    be10:	f006 f858 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    be14:	4b15      	ldr	r3, [pc, #84]	; (be6c <Svc::DeframerComponentBase::DeframerComponentBase(char const*)+0x60>)
    be16:	4620      	mov	r0, r4
    be18:	f840 3b64 	str.w	r3, [r0], #100
    be1c:	f00a faf6 	bl	1640c <Fw::InputCmdResponsePort::InputCmdResponsePort()>
    be20:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    be24:	f000 ff40 	bl	cca8 <Drv::InputByteStreamRecvPort::InputByteStreamRecvPort()>
    be28:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    be2c:	f005 f89e 	bl	10f6c <Svc::InputSchedPort::InputSchedPort()>
    be30:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    be34:	f009 fbde 	bl	155f4 <Fw::OutputBufferGetPort::OutputBufferGetPort()>
    be38:	f504 7008 	add.w	r0, r4, #544	; 0x220
    be3c:	f009 fcec 	bl	15818 <Fw::OutputBufferSendPort::OutputBufferSendPort()>
    be40:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    be44:	f009 fce8 	bl	15818 <Fw::OutputBufferSendPort::OutputBufferSendPort()>
    be48:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    be4c:	f00b fc34 	bl	176b8 <Fw::OutputComPort::OutputComPort()>
    be50:	f504 7059 	add.w	r0, r4, #868	; 0x364
    be54:	f009 fce0 	bl	15818 <Fw::OutputBufferSendPort::OutputBufferSendPort()>
    be58:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
    be5c:	f000 fdca 	bl	c9f4 <Drv::OutputByteStreamPollPort::OutputByteStreamPollPort()>
    be60:	f504 6088 	add.w	r0, r4, #1088	; 0x440
    be64:	f007 fcec 	bl	13840 <Os::Mutex::Mutex()>
  }
    be68:	4620      	mov	r0, r4
    be6a:	bd10      	pop	{r4, pc}
    be6c:	20003cb8 	.word	0x20003cb8

0000be70 <Svc::DeframerComponentBase::isConnected_bufferOut_OutputPort(long)>:
  {
    be70:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    be72:	1e0d      	subs	r5, r1, #0
  {
    be74:	4604      	mov	r4, r0
    FW_ASSERT(
    be76:	dd04      	ble.n	be82 <Svc::DeframerComponentBase::isConnected_bufferOut_OutputPort(long)+0x12>
    be78:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
    be7c:	4805      	ldr	r0, [pc, #20]	; (be94 <Svc::DeframerComponentBase::isConnected_bufferOut_OutputPort(long)+0x24>)
    be7e:	f7f5 fbd3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_bufferOut_OutputPort[portNum].isConnected();
    be82:	236c      	movs	r3, #108	; 0x6c
    be84:	fb03 4005 	mla	r0, r3, r5, r4
  }
    be88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_bufferOut_OutputPort[portNum].isConnected();
    be8c:	f500 7023 	add.w	r0, r0, #652	; 0x28c
    be90:	f00b bfdc 	b.w	17e4c <Fw::PortBase::isConnected() const>
    be94:	200014c4 	.word	0x200014c4

0000be98 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)>:
  {
    be98:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    be9a:	1e0d      	subs	r5, r1, #0
  {
    be9c:	b082      	sub	sp, #8
    be9e:	4604      	mov	r4, r0
    bea0:	4616      	mov	r6, r2
    FW_ASSERT(
    bea2:	dd06      	ble.n	beb2 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x1a>
    bea4:	f44f 7213 	mov.w	r2, #588	; 0x24c
    bea8:	4815      	ldr	r0, [pc, #84]	; (bf00 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x68>)
    beaa:	9301      	str	r3, [sp, #4]
    beac:	f7f5 fbbc 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    beb0:	9b01      	ldr	r3, [sp, #4]
    this->lock();
    beb2:	6822      	ldr	r2, [r4, #0]
    beb4:	4913      	ldr	r1, [pc, #76]	; (bf04 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x6c>)
    beb6:	69d2      	ldr	r2, [r2, #28]
    beb8:	9301      	str	r3, [sp, #4]
    beba:	428a      	cmp	r2, r1
    bebc:	d116      	bne.n	beec <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x54>
    this->m_guardedPortMutex.lock();
    bebe:	f504 6088 	add.w	r0, r4, #1088	; 0x440
    bec2:	f007 fcd9 	bl	13878 <Os::Mutex::lock()>
  }
    bec6:	9b01      	ldr	r3, [sp, #4]
    this->framedIn_handler(
    bec8:	6820      	ldr	r0, [r4, #0]
    beca:	4632      	mov	r2, r6
    becc:	4629      	mov	r1, r5
    bece:	6945      	ldr	r5, [r0, #20]
    bed0:	4620      	mov	r0, r4
    bed2:	47a8      	blx	r5
    this->unLock();
    bed4:	6823      	ldr	r3, [r4, #0]
    bed6:	4a0c      	ldr	r2, [pc, #48]	; (bf08 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x70>)
    bed8:	6a1b      	ldr	r3, [r3, #32]
    beda:	4293      	cmp	r3, r2
    bedc:	d10a      	bne.n	bef4 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x5c>
    this->m_guardedPortMutex.unLock();
    bede:	f504 6088 	add.w	r0, r4, #1088	; 0x440
  }
    bee2:	b002      	add	sp, #8
    bee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    bee8:	f007 bd1a 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
    beec:	4620      	mov	r0, r4
    beee:	4790      	blx	r2
    bef0:	9b01      	ldr	r3, [sp, #4]
    bef2:	e7e9      	b.n	bec8 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)+0x30>
    this->unLock();
    bef4:	4620      	mov	r0, r4
  }
    bef6:	b002      	add	sp, #8
    bef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    befc:	4718      	bx	r3
    befe:	bf00      	nop
    bf00:	200014c4 	.word	0x200014c4
    bf04:	0000ba51 	.word	0x0000ba51
    bf08:	0000ba59 	.word	0x0000ba59

0000bf0c <Svc::DeframerComponentBase::m_p_framedIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&)>:
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& recvBuffer,
        const Drv::RecvStatus& recvStatus
    )
  {
    bf0c:	b530      	push	{r4, r5, lr}
    bf0e:	460d      	mov	r5, r1
    bf10:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    bf12:	4604      	mov	r4, r0
    bf14:	b130      	cbz	r0, bf24 <Svc::DeframerComponentBase::m_p_framedIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&)+0x18>
    DeframerComponentBase* compPtr = static_cast<DeframerComponentBase*>(callComp);
    compPtr->framedIn_handlerBase(
    bf16:	4629      	mov	r1, r5
    bf18:	4620      	mov	r0, r4
      portNum,
      recvBuffer,
      recvStatus
    );
  }
    bf1a:	b003      	add	sp, #12
    bf1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->framedIn_handlerBase(
    bf20:	f7ff bfba 	b.w	be98 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)>
    FW_ASSERT(callComp);
    bf24:	f240 310a 	movw	r1, #778	; 0x30a
    bf28:	4806      	ldr	r0, [pc, #24]	; (bf44 <Svc::DeframerComponentBase::m_p_framedIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&)+0x38>)
    bf2a:	e9cd 2300 	strd	r2, r3, [sp]
    bf2e:	f7f5 fb6d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    compPtr->framedIn_handlerBase(
    bf32:	4629      	mov	r1, r5
    bf34:	4620      	mov	r0, r4
    FW_ASSERT(callComp);
    bf36:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    bf3a:	b003      	add	sp, #12
    bf3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->framedIn_handlerBase(
    bf40:	f7ff bfaa 	b.w	be98 <Svc::DeframerComponentBase::framedIn_handlerBase(long, Fw::Buffer&, Drv::RecvStatus const&)>
    bf44:	200014c4 	.word	0x200014c4

0000bf48 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)>:
  {
    bf48:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    bf4a:	1e0d      	subs	r5, r1, #0
  {
    bf4c:	4604      	mov	r4, r0
    bf4e:	4616      	mov	r6, r2
    FW_ASSERT(
    bf50:	dd04      	ble.n	bf5c <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x14>
    bf52:	f240 2266 	movw	r2, #614	; 0x266
    bf56:	4812      	ldr	r0, [pc, #72]	; (bfa0 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x58>)
    bf58:	f7f5 fb66 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->lock();
    bf5c:	6823      	ldr	r3, [r4, #0]
    bf5e:	4a11      	ldr	r2, [pc, #68]	; (bfa4 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x5c>)
    bf60:	69db      	ldr	r3, [r3, #28]
    bf62:	4293      	cmp	r3, r2
    bf64:	d114      	bne.n	bf90 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x48>
    this->m_guardedPortMutex.lock();
    bf66:	f504 6088 	add.w	r0, r4, #1088	; 0x440
    bf6a:	f007 fc85 	bl	13878 <Os::Mutex::lock()>
    this->schedIn_handler(
    bf6e:	6823      	ldr	r3, [r4, #0]
    bf70:	4632      	mov	r2, r6
    bf72:	4629      	mov	r1, r5
    bf74:	4620      	mov	r0, r4
    bf76:	699b      	ldr	r3, [r3, #24]
    bf78:	4798      	blx	r3
    this->unLock();
    bf7a:	6823      	ldr	r3, [r4, #0]
    bf7c:	4a0a      	ldr	r2, [pc, #40]	; (bfa8 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x60>)
    bf7e:	6a1b      	ldr	r3, [r3, #32]
    bf80:	4293      	cmp	r3, r2
    bf82:	d108      	bne.n	bf96 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x4e>
    this->m_guardedPortMutex.unLock();
    bf84:	f504 6088 	add.w	r0, r4, #1088	; 0x440
  }
    bf88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    bf8c:	f007 bcc8 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
    bf90:	4620      	mov	r0, r4
    bf92:	4798      	blx	r3
    bf94:	e7eb      	b.n	bf6e <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)+0x26>
    this->unLock();
    bf96:	4620      	mov	r0, r4
  }
    bf98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    bf9c:	4718      	bx	r3
    bf9e:	bf00      	nop
    bfa0:	200014c4 	.word	0x200014c4
    bfa4:	0000ba51 	.word	0x0000ba51
    bfa8:	0000ba59 	.word	0x0000ba59

0000bfac <Svc::DeframerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_schedIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    bfac:	b530      	push	{r4, r5, lr}
    bfae:	460d      	mov	r5, r1
    bfb0:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    bfb2:	4604      	mov	r4, r0
    bfb4:	b130      	cbz	r0, bfc4 <Svc::DeframerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    DeframerComponentBase* compPtr = static_cast<DeframerComponentBase*>(callComp);
    compPtr->schedIn_handlerBase(
    bfb6:	4629      	mov	r1, r5
    bfb8:	4620      	mov	r0, r4
      portNum,
      context
    );
  }
    bfba:	b003      	add	sp, #12
    bfbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->schedIn_handlerBase(
    bfc0:	f7ff bfc2 	b.w	bf48 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
    bfc4:	f240 311a 	movw	r1, #794	; 0x31a
    bfc8:	4805      	ldr	r0, [pc, #20]	; (bfe0 <Svc::DeframerComponentBase::m_p_schedIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    bfca:	9201      	str	r2, [sp, #4]
    bfcc:	f7f5 fb1e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    bfd0:	9a01      	ldr	r2, [sp, #4]
    compPtr->schedIn_handlerBase(
    bfd2:	4629      	mov	r1, r5
    bfd4:	4620      	mov	r0, r4
  }
    bfd6:	b003      	add	sp, #12
    bfd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->schedIn_handlerBase(
    bfdc:	f7ff bfb4 	b.w	bf48 <Svc::DeframerComponentBase::schedIn_handlerBase(long, unsigned long)>
    bfe0:	200014c4 	.word	0x200014c4

0000bfe4 <Svc::DeframerComponentBase::bufferAllocate_out(long, unsigned long)>:
  {
    bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    bfe6:	1e15      	subs	r5, r2, #0
  {
    bfe8:	4606      	mov	r6, r0
    bfea:	460c      	mov	r4, r1
    bfec:	461f      	mov	r7, r3
    FW_ASSERT(
    bfee:	dd05      	ble.n	bffc <Svc::DeframerComponentBase::bufferAllocate_out(long, unsigned long)+0x18>
    bff0:	f240 2282 	movw	r2, #642	; 0x282
    bff4:	4629      	mov	r1, r5
    bff6:	4807      	ldr	r0, [pc, #28]	; (c014 <Svc::DeframerComponentBase::bufferAllocate_out(long, unsigned long)+0x30>)
    bff8:	f7f5 fb16 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    );
    bffc:	236c      	movs	r3, #108	; 0x6c
    bffe:	4630      	mov	r0, r6
    c000:	463a      	mov	r2, r7
    c002:	fb03 4105 	mla	r1, r3, r5, r4
    c006:	f501 71da 	add.w	r1, r1, #436	; 0x1b4
    c00a:	f009 fb0f 	bl	1562c <Fw::OutputBufferGetPort::invoke(unsigned long) const>
  }
    c00e:	4630      	mov	r0, r6
    c010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c012:	bf00      	nop
    c014:	200014c4 	.word	0x200014c4

0000c018 <Svc::DeframerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)>:
  {
    c018:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c01a:	1e0d      	subs	r5, r1, #0
  {
    c01c:	4604      	mov	r4, r0
    c01e:	4616      	mov	r6, r2
    FW_ASSERT(
    c020:	dd04      	ble.n	c02c <Svc::DeframerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)+0x14>
    c022:	f240 2291 	movw	r2, #657	; 0x291
    c026:	4806      	ldr	r0, [pc, #24]	; (c040 <Svc::DeframerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)+0x28>)
    c028:	f7f5 fafe 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_bufferDeallocate_OutputPort[portNum].invoke(
    c02c:	236c      	movs	r3, #108	; 0x6c
    c02e:	4631      	mov	r1, r6
    c030:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_bufferDeallocate_OutputPort[portNum].invoke(
    c038:	f500 7008 	add.w	r0, r0, #544	; 0x220
    c03c:	f009 bc08 	b.w	15850 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const>
    c040:	200014c4 	.word	0x200014c4

0000c044 <Svc::DeframerComponentBase::bufferOut_out(long, Fw::Buffer&)>:
  {
    c044:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c046:	1e0d      	subs	r5, r1, #0
  {
    c048:	4604      	mov	r4, r0
    c04a:	4616      	mov	r6, r2
    FW_ASSERT(
    c04c:	dd04      	ble.n	c058 <Svc::DeframerComponentBase::bufferOut_out(long, Fw::Buffer&)+0x14>
    c04e:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    c052:	4806      	ldr	r0, [pc, #24]	; (c06c <Svc::DeframerComponentBase::bufferOut_out(long, Fw::Buffer&)+0x28>)
    c054:	f7f5 fae8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_bufferOut_OutputPort[portNum].invoke(
    c058:	236c      	movs	r3, #108	; 0x6c
    c05a:	4631      	mov	r1, r6
    c05c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_bufferOut_OutputPort[portNum].invoke(
    c064:	f500 7023 	add.w	r0, r0, #652	; 0x28c
    c068:	f009 bbf2 	b.w	15850 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const>
    c06c:	200014c4 	.word	0x200014c4

0000c070 <Svc::DeframerComponentBase::comOut_out(long, Fw::ComBuffer&, unsigned long)>:
  {
    c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    c072:	1e0d      	subs	r5, r1, #0
  {
    c074:	4604      	mov	r4, r0
    c076:	4616      	mov	r6, r2
    c078:	461f      	mov	r7, r3
    FW_ASSERT(
    c07a:	dd04      	ble.n	c086 <Svc::DeframerComponentBase::comOut_out(long, Fw::ComBuffer&, unsigned long)+0x16>
    c07c:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    c080:	4806      	ldr	r0, [pc, #24]	; (c09c <Svc::DeframerComponentBase::comOut_out(long, Fw::ComBuffer&, unsigned long)+0x2c>)
    c082:	f7f5 fad1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_comOut_OutputPort[portNum].invoke(
    c086:	236c      	movs	r3, #108	; 0x6c
    c088:	463a      	mov	r2, r7
    c08a:	4631      	mov	r1, r6
    c08c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    this->m_comOut_OutputPort[portNum].invoke(
    c094:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    c098:	f00b bb2a 	b.w	176f0 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const>
    c09c:	200014c4 	.word	0x200014c4

0000c0a0 <Svc::DeframerComponentBase::framedDeallocate_out(long, Fw::Buffer&)>:
  {
    c0a0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c0a2:	1e0d      	subs	r5, r1, #0
  {
    c0a4:	4604      	mov	r4, r0
    c0a6:	4616      	mov	r6, r2
    FW_ASSERT(
    c0a8:	dd04      	ble.n	c0b4 <Svc::DeframerComponentBase::framedDeallocate_out(long, Fw::Buffer&)+0x14>
    c0aa:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    c0ae:	4806      	ldr	r0, [pc, #24]	; (c0c8 <Svc::DeframerComponentBase::framedDeallocate_out(long, Fw::Buffer&)+0x28>)
    c0b0:	f7f5 faba 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_framedDeallocate_OutputPort[portNum].invoke(
    c0b4:	236c      	movs	r3, #108	; 0x6c
    c0b6:	4631      	mov	r1, r6
    c0b8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_framedDeallocate_OutputPort[portNum].invoke(
    c0c0:	f500 7059 	add.w	r0, r0, #868	; 0x364
    c0c4:	f009 bbc4 	b.w	15850 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const>
    c0c8:	200014c4 	.word	0x200014c4

0000c0cc <Svc::DeframerComponentBase::framedPoll_out(long, Fw::Buffer&)>:
  {
    c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    c0ce:	1e15      	subs	r5, r2, #0
  {
    c0d0:	4606      	mov	r6, r0
    c0d2:	460c      	mov	r4, r1
    c0d4:	461f      	mov	r7, r3
    FW_ASSERT(
    c0d6:	dd05      	ble.n	c0e4 <Svc::DeframerComponentBase::framedPoll_out(long, Fw::Buffer&)+0x18>
    c0d8:	f240 22cf 	movw	r2, #719	; 0x2cf
    c0dc:	4629      	mov	r1, r5
    c0de:	4807      	ldr	r0, [pc, #28]	; (c0fc <Svc::DeframerComponentBase::framedPoll_out(long, Fw::Buffer&)+0x30>)
    c0e0:	f7f5 faa2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    );
    c0e4:	236c      	movs	r3, #108	; 0x6c
    c0e6:	4630      	mov	r0, r6
    c0e8:	463a      	mov	r2, r7
    c0ea:	fb03 4105 	mla	r1, r3, r5, r4
    c0ee:	f501 7174 	add.w	r1, r1, #976	; 0x3d0
    c0f2:	f000 fc8b 	bl	ca0c <Drv::OutputByteStreamPollPort::invoke(Fw::Buffer&) const>
  }
    c0f6:	4630      	mov	r0, r6
    c0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0fa:	bf00      	nop
    c0fc:	200014c4 	.word	0x200014c4

0000c100 <Svc::DeframerComponentBase::~DeframerComponentBase()>:
  DeframerComponentBase ::
    c100:	b510      	push	{r4, lr}
    ~DeframerComponentBase()
    c102:	4b20      	ldr	r3, [pc, #128]	; (c184 <Svc::DeframerComponentBase::~DeframerComponentBase()+0x84>)
  DeframerComponentBase ::
    c104:	4604      	mov	r4, r0
    ~DeframerComponentBase()
    c106:	f500 6088 	add.w	r0, r0, #1088	; 0x440
    c10a:	6023      	str	r3, [r4, #0]
    c10c:	f007 f94e 	bl	133ac <Os::Mutex::~Mutex()>
    c110:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
    c114:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
    c118:	685b      	ldr	r3, [r3, #4]
    c11a:	4798      	blx	r3
    c11c:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
    c120:	f504 7059 	add.w	r0, r4, #868	; 0x364
    c124:	685b      	ldr	r3, [r3, #4]
    c126:	4798      	blx	r3
    c128:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    c12c:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    c130:	685b      	ldr	r3, [r3, #4]
    c132:	4798      	blx	r3
    c134:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
    c138:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    c13c:	685b      	ldr	r3, [r3, #4]
    c13e:	4798      	blx	r3
    c140:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    c144:	f504 7008 	add.w	r0, r4, #544	; 0x220
    c148:	685b      	ldr	r3, [r3, #4]
    c14a:	4798      	blx	r3
    c14c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    c150:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    c154:	685b      	ldr	r3, [r3, #4]
    c156:	4798      	blx	r3
    c158:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c15c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    c160:	685b      	ldr	r3, [r3, #4]
    c162:	4798      	blx	r3
    c164:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    c168:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    c16c:	685b      	ldr	r3, [r3, #4]
    c16e:	4798      	blx	r3
    c170:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c172:	f104 0064 	add.w	r0, r4, #100	; 0x64
    c176:	685b      	ldr	r3, [r3, #4]
    c178:	4798      	blx	r3
    c17a:	4620      	mov	r0, r4
    c17c:	f005 fe4a 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    c180:	4620      	mov	r0, r4
    c182:	bd10      	pop	{r4, pc}
    c184:	20003cb8 	.word	0x20003cb8

0000c188 <Svc::Framer::~Framer()>:
// ----------------------------------------------------------------------

Framer ::Framer(const char* const compName)
    : FramerComponentBase(compName), FramingProtocolInterface(), m_protocol(nullptr), m_frame_sent(false) {}

Framer ::~Framer() {}
    c188:	4b03      	ldr	r3, [pc, #12]	; (c198 <Svc::Framer::~Framer()+0x10>)
    c18a:	b510      	push	{r4, lr}
    c18c:	4604      	mov	r4, r0
    c18e:	6003      	str	r3, [r0, #0]
    c190:	f000 fbba 	bl	c908 <Svc::FramerComponentBase::~FramerComponentBase()>
    c194:	4620      	mov	r0, r4
    c196:	bd10      	pop	{r4, pc}
    c198:	20003ea0 	.word	0x20003ea0

0000c19c <Svc::Framer::~Framer()>:
    c19c:	4b06      	ldr	r3, [pc, #24]	; (c1b8 <Svc::Framer::~Framer()+0x1c>)
    c19e:	b510      	push	{r4, lr}
    c1a0:	4604      	mov	r4, r0
    c1a2:	6003      	str	r3, [r0, #0]
    c1a4:	f000 fbb0 	bl	c908 <Svc::FramerComponentBase::~FramerComponentBase()>
    c1a8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    c1ac:	4620      	mov	r0, r4
    c1ae:	f00c fd8f 	bl	18cd0 <operator delete(void*, unsigned int)>
    c1b2:	4620      	mov	r0, r4
    c1b4:	bd10      	pop	{r4, pc}
    c1b6:	bf00      	nop
    c1b8:	20003ea0 	.word	0x20003ea0

0000c1bc <Svc::Framer::comStatusIn_handler(long, Fw::Success&)>:
    this->handle_framing(fwBuffer.getData(), fwBuffer.getSize(), Fw::ComPacket::FW_PACKET_FILE);
    // Deallocate the buffer after it was processed by the framing protocol
    this->bufferDeallocate_out(0, fwBuffer);
}

void Framer ::comStatusIn_handler(const NATIVE_INT_TYPE portNum, Fw::Success& condition) {
    c1bc:	b570      	push	{r4, r5, r6, lr}
    c1be:	4604      	mov	r4, r0
    c1c0:	460d      	mov	r5, r1
    c1c2:	4616      	mov	r6, r2
    if (this->isConnected_comStatusOut_OutputPort(portNum)) {
    c1c4:	f000 fa86 	bl	c6d4 <Svc::FramerComponentBase::isConnected_comStatusOut_OutputPort(long)>
    c1c8:	b900      	cbnz	r0, c1cc <Svc::Framer::comStatusIn_handler(long, Fw::Success&)+0x10>
        this->comStatusOut_out(portNum, condition);
    }
}
    c1ca:	bd70      	pop	{r4, r5, r6, pc}
        this->comStatusOut_out(portNum, condition);
    c1cc:	4632      	mov	r2, r6
    c1ce:	4629      	mov	r1, r5
    c1d0:	4620      	mov	r0, r4
}
    c1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        this->comStatusOut_out(portNum, condition);
    c1d6:	f000 bb4d 	b.w	c874 <Svc::FramerComponentBase::comStatusOut_out(long, Fw::Success&)>
    c1da:	bf00      	nop

0000c1dc <Svc::Framer::send(Fw::Buffer&)>:
// ----------------------------------------------------------------------
// Framing protocol implementations
// ----------------------------------------------------------------------

void Framer ::send(Fw::Buffer& outgoing) {
    FW_ASSERT(!this->m_frame_sent); // Prevent multiple sends per-packet
    c1dc:	f890 23c8 	ldrb.w	r2, [r0, #968]	; 0x3c8
void Framer ::send(Fw::Buffer& outgoing) {
    c1e0:	460b      	mov	r3, r1
    c1e2:	b510      	push	{r4, lr}
    c1e4:	4604      	mov	r4, r0
    c1e6:	b084      	sub	sp, #16
    FW_ASSERT(!this->m_frame_sent); // Prevent multiple sends per-packet
    c1e8:	b98a      	cbnz	r2, c20e <Svc::Framer::send(Fw::Buffer&)+0x32>
    const Drv::SendStatus sendStatus = this->framedOut_out(0, outgoing);
    c1ea:	4621      	mov	r1, r4
    c1ec:	2200      	movs	r2, #0
    c1ee:	a802      	add	r0, sp, #8
    c1f0:	f000 fb70 	bl	c8d4 <Svc::FramerComponentBase::framedOut_out(long, Fw::Buffer&)>
    if (sendStatus.e != Drv::SendStatus::SEND_OK) {
    c1f4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c1f8:	b981      	cbnz	r1, c21c <Svc::Framer::send(Fw::Buffer&)+0x40>
        // Note: if there is a data sending problem, an EVR likely wouldn't
        // make it down. Log the issue in hopes that
        // someone will see it.
        Fw::Logger::log("[ERROR] Failed to send framed data: %d\n", sendStatus.e);
    }
    this->m_frame_sent = true;  // A frame was sent
    c1fa:	2201      	movs	r2, #1
    c1fc:	4b09      	ldr	r3, [pc, #36]	; (c224 <Svc::Framer::send(Fw::Buffer&)+0x48>)
    c1fe:	a802      	add	r0, sp, #8
    c200:	f884 23c8 	strb.w	r2, [r4, #968]	; 0x3c8
    c204:	9302      	str	r3, [sp, #8]
    c206:	f7f4 f999 	bl	53c <Fw::Serializable::~Serializable()>
}
    c20a:	b004      	add	sp, #16
    c20c:	bd10      	pop	{r4, pc}
    c20e:	9101      	str	r1, [sp, #4]
    FW_ASSERT(!this->m_frame_sent); // Prevent multiple sends per-packet
    c210:	2147      	movs	r1, #71	; 0x47
    c212:	4805      	ldr	r0, [pc, #20]	; (c228 <Svc::Framer::send(Fw::Buffer&)+0x4c>)
    c214:	f7f5 f9fa 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    c218:	9b01      	ldr	r3, [sp, #4]
    c21a:	e7e6      	b.n	c1ea <Svc::Framer::send(Fw::Buffer&)+0xe>
        Fw::Logger::log("[ERROR] Failed to send framed data: %d\n", sendStatus.e);
    c21c:	4803      	ldr	r0, [pc, #12]	; (c22c <Svc::Framer::send(Fw::Buffer&)+0x50>)
    c21e:	f7f5 fa53 	bl	16c8 <Fw::Logger::log(char const*, ...)>
    c222:	e7ea      	b.n	c1fa <Svc::Framer::send(Fw::Buffer&)+0x1e>
    c224:	2000379c 	.word	0x2000379c
    c228:	20001c34 	.word	0x20001c34
    c22c:	20001c4c 	.word	0x20001c4c

0000c230 <non-virtual thunk to Svc::Framer::send(Fw::Buffer&)>:
    //! \return Fw::Buffer containing allocation to write into
    Fw::Buffer allocate(const U32 size);

    //! Send implementation
    //!
    void send(Fw::Buffer& outgoing  //!< The buffer to send
    c230:	f5a0 7070 	sub.w	r0, r0, #960	; 0x3c0
    c234:	f7ff bfd2 	b.w	c1dc <Svc::Framer::send(Fw::Buffer&)>

0000c238 <Svc::Framer::allocate(unsigned long)>:

Fw::Buffer Framer ::allocate(const U32 size) {
    c238:	b510      	push	{r4, lr}
    c23a:	4604      	mov	r4, r0
    c23c:	4613      	mov	r3, r2
    return this->framedAllocate_out(0, size);
    c23e:	2200      	movs	r2, #0
    c240:	f000 fb2e 	bl	c8a0 <Svc::FramerComponentBase::framedAllocate_out(long, unsigned long)>
}
    c244:	4620      	mov	r0, r4
    c246:	bd10      	pop	{r4, pc}

0000c248 <non-virtual thunk to Svc::Framer::~Framer()>:
    c248:	b510      	push	{r4, lr}
    c24a:	4b04      	ldr	r3, [pc, #16]	; (c25c <non-virtual thunk to Svc::Framer::~Framer()+0x14>)
    c24c:	f5a0 7470 	sub.w	r4, r0, #960	; 0x3c0
    c250:	4620      	mov	r0, r4
    c252:	6023      	str	r3, [r4, #0]
    c254:	f000 fb58 	bl	c908 <Svc::FramerComponentBase::~FramerComponentBase()>
    c258:	4620      	mov	r0, r4
    c25a:	bd10      	pop	{r4, pc}
    c25c:	20003ea0 	.word	0x20003ea0

0000c260 <non-virtual thunk to Svc::Framer::~Framer()>:
    c260:	b510      	push	{r4, lr}
    c262:	4b07      	ldr	r3, [pc, #28]	; (c280 <non-virtual thunk to Svc::Framer::~Framer()+0x20>)
    c264:	f5a0 7470 	sub.w	r4, r0, #960	; 0x3c0
    c268:	6023      	str	r3, [r4, #0]
    c26a:	4620      	mov	r0, r4
    c26c:	f000 fb4c 	bl	c908 <Svc::FramerComponentBase::~FramerComponentBase()>
    c270:	4620      	mov	r0, r4
    c272:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    c276:	f00c fd2b 	bl	18cd0 <operator delete(void*, unsigned int)>
    c27a:	4620      	mov	r0, r4
    c27c:	bd10      	pop	{r4, pc}
    c27e:	bf00      	nop
    c280:	20003ea0 	.word	0x20003ea0

0000c284 <non-virtual thunk to Svc::Framer::allocate(unsigned long)>:
    c284:	b510      	push	{r4, lr}
    c286:	4604      	mov	r4, r0
    c288:	4613      	mov	r3, r2
    c28a:	f5a1 7170 	sub.w	r1, r1, #960	; 0x3c0
    c28e:	2200      	movs	r2, #0
    c290:	f000 fb06 	bl	c8a0 <Svc::FramerComponentBase::framedAllocate_out(long, unsigned long)>
    c294:	4620      	mov	r0, r4
    c296:	bd10      	pop	{r4, pc}

0000c298 <Svc::Framer::Framer(char const*)>:
Framer ::Framer(const char* const compName)
    c298:	b510      	push	{r4, lr}
    c29a:	4604      	mov	r4, r0
    : FramerComponentBase(compName), FramingProtocolInterface(), m_protocol(nullptr), m_frame_sent(false) {}
    c29c:	f000 f9f0 	bl	c680 <Svc::FramerComponentBase::FramerComponentBase(char const*)>
    c2a0:	4b06      	ldr	r3, [pc, #24]	; (c2bc <Svc::Framer::Framer(char const*)+0x24>)
    c2a2:	2200      	movs	r2, #0
    c2a4:	4620      	mov	r0, r4
    c2a6:	f103 0108 	add.w	r1, r3, #8
    c2aa:	333c      	adds	r3, #60	; 0x3c
    c2ac:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
    c2b0:	f884 23c8 	strb.w	r2, [r4, #968]	; 0x3c8
    c2b4:	6021      	str	r1, [r4, #0]
    c2b6:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
    c2ba:	bd10      	pop	{r4, pc}
    c2bc:	20003e98 	.word	0x20003e98

0000c2c0 <Svc::Framer::setup(Svc::FramingProtocol&)>:
void Framer ::setup(FramingProtocol& protocol) {
    c2c0:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_protocol == nullptr);
    c2c2:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
void Framer ::setup(FramingProtocol& protocol) {
    c2c6:	4604      	mov	r4, r0
    c2c8:	460d      	mov	r5, r1
    FW_ASSERT(this->m_protocol == nullptr);
    c2ca:	b11b      	cbz	r3, c2d4 <Svc::Framer::setup(Svc::FramingProtocol&)+0x14>
    c2cc:	211e      	movs	r1, #30
    c2ce:	4806      	ldr	r0, [pc, #24]	; (c2e8 <Svc::Framer::setup(Svc::FramingProtocol&)+0x28>)
    c2d0:	f7f5 f99c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    protocol.setup(*this);
    c2d4:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
    c2d8:	4628      	mov	r0, r5
    this->m_protocol = &protocol;
    c2da:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
}
    c2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    protocol.setup(*this);
    c2e2:	f000 bfd7 	b.w	d294 <Svc::FramingProtocol::setup(Svc::FramingProtocolInterface&)>
    c2e6:	bf00      	nop
    c2e8:	20001c34 	.word	0x20001c34

0000c2ec <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)>:
void Framer ::handle_framing(const U8* const data, const U32 size, Fw::ComPacket::ComPacketType packet_type) {
    c2ec:	b570      	push	{r4, r5, r6, lr}
    c2ee:	4604      	mov	r4, r0
    FW_ASSERT(this->m_protocol != nullptr);
    c2f0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
void Framer ::handle_framing(const U8* const data, const U32 size, Fw::ComPacket::ComPacketType packet_type) {
    c2f4:	b084      	sub	sp, #16
    c2f6:	460d      	mov	r5, r1
    FW_ASSERT(this->m_protocol != nullptr);
    c2f8:	b318      	cbz	r0, c342 <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x56>
    this->m_protocol->frame(data, size, packet_type);
    c2fa:	4629      	mov	r1, r5
    c2fc:	6806      	ldr	r6, [r0, #0]
    this->m_frame_sent = false;  // Clear the flag to detect if frame was sent
    c2fe:	2500      	movs	r5, #0
    this->m_protocol->frame(data, size, packet_type);
    c300:	68b6      	ldr	r6, [r6, #8]
    this->m_frame_sent = false;  // Clear the flag to detect if frame was sent
    c302:	f884 53c8 	strb.w	r5, [r4, #968]	; 0x3c8
    this->m_protocol->frame(data, size, packet_type);
    c306:	47b0      	blx	r6
    if (this->isConnected_comStatusOut_OutputPort(0) && (!this->m_frame_sent)) {
    c308:	4629      	mov	r1, r5
    c30a:	4620      	mov	r0, r4
    c30c:	f000 f9e2 	bl	c6d4 <Svc::FramerComponentBase::isConnected_comStatusOut_OutputPort(long)>
    c310:	b110      	cbz	r0, c318 <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x2c>
    c312:	f894 53c8 	ldrb.w	r5, [r4, #968]	; 0x3c8
    c316:	b10d      	cbz	r5, c31c <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x30>
}
    c318:	b004      	add	sp, #16
    c31a:	bd70      	pop	{r4, r5, r6, pc}

      //! Constructor (user-provided value)
      Success(
          const T e1 //!< The raw enum value
      )
      {
    c31c:	a802      	add	r0, sp, #8
    c31e:	4e0e      	ldr	r6, [pc, #56]	; (c358 <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x6c>)
    c320:	f7f4 f906 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    c324:	2301      	movs	r3, #1
        this->comStatusOut_out(0, status);
    c326:	4620      	mov	r0, r4
    c328:	4629      	mov	r1, r5
    c32a:	aa02      	add	r2, sp, #8
    c32c:	f88d 300c 	strb.w	r3, [sp, #12]
      {
    c330:	9602      	str	r6, [sp, #8]
    c332:	f000 fa9f 	bl	c874 <Svc::FramerComponentBase::comStatusOut_out(long, Fw::Success&)>
  class Success :
    c336:	a802      	add	r0, sp, #8
    c338:	9602      	str	r6, [sp, #8]
    c33a:	f7f4 f8ff 	bl	53c <Fw::Serializable::~Serializable()>
}
    c33e:	b004      	add	sp, #16
    c340:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_protocol != nullptr);
    c342:	2124      	movs	r1, #36	; 0x24
    c344:	4805      	ldr	r0, [pc, #20]	; (c35c <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x70>)
    c346:	e9cd 2300 	strd	r2, r3, [sp]
    c34a:	f7f5 f95f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_protocol->frame(data, size, packet_type);
    c34e:	f8d4 03c4 	ldr.w	r0, [r4, #964]	; 0x3c4
    c352:	e9dd 2300 	ldrd	r2, r3, [sp]
    c356:	e7d0      	b.n	c2fa <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0xe>
    c358:	20003318 	.word	0x20003318
    c35c:	20001c34 	.word	0x20001c34

0000c360 <Svc::Framer::comIn_handler(long, Fw::ComBuffer&, unsigned long)>:
    this->handle_framing(data.getBuffAddr(), data.getBuffLength(), Fw::ComPacket::FW_PACKET_UNKNOWN);
    c360:	6813      	ldr	r3, [r2, #0]
void Framer ::comIn_handler(const NATIVE_INT_TYPE portNum, Fw::ComBuffer& data, U32 context) {
    c362:	b530      	push	{r4, r5, lr}
    this->handle_framing(data.getBuffAddr(), data.getBuffLength(), Fw::ComPacket::FW_PACKET_UNKNOWN);
    c364:	68db      	ldr	r3, [r3, #12]
void Framer ::comIn_handler(const NATIVE_INT_TYPE portNum, Fw::ComBuffer& data, U32 context) {
    c366:	b083      	sub	sp, #12
    c368:	4614      	mov	r4, r2
    c36a:	4605      	mov	r5, r0
    this->handle_framing(data.getBuffAddr(), data.getBuffLength(), Fw::ComPacket::FW_PACKET_UNKNOWN);
    c36c:	4610      	mov	r0, r2
    c36e:	4798      	blx	r3
    c370:	4601      	mov	r1, r0
    c372:	4620      	mov	r0, r4
    c374:	9101      	str	r1, [sp, #4]
    c376:	f7f4 fe45 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
    c37a:	23ff      	movs	r3, #255	; 0xff
    c37c:	4602      	mov	r2, r0
    c37e:	9901      	ldr	r1, [sp, #4]
    c380:	4628      	mov	r0, r5
}
    c382:	b003      	add	sp, #12
    c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->handle_framing(data.getBuffAddr(), data.getBuffLength(), Fw::ComPacket::FW_PACKET_UNKNOWN);
    c388:	f7ff bfb0 	b.w	c2ec <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)>

0000c38c <Svc::Framer::bufferIn_handler(long, Fw::Buffer&)>:
void Framer ::bufferIn_handler(const NATIVE_INT_TYPE portNum, Fw::Buffer& fwBuffer) {
    c38c:	b530      	push	{r4, r5, lr}
    c38e:	4614      	mov	r4, r2
    c390:	b083      	sub	sp, #12
    c392:	4605      	mov	r5, r0
    this->handle_framing(fwBuffer.getData(), fwBuffer.getSize(), Fw::ComPacket::FW_PACKET_FILE);
    c394:	4610      	mov	r0, r2
    c396:	f009 f88f 	bl	154b8 <Fw::Buffer::getData() const>
    c39a:	4601      	mov	r1, r0
    c39c:	4620      	mov	r0, r4
    c39e:	9101      	str	r1, [sp, #4]
    c3a0:	f009 f88c 	bl	154bc <Fw::Buffer::getSize() const>
    c3a4:	9901      	ldr	r1, [sp, #4]
    c3a6:	4602      	mov	r2, r0
    c3a8:	2303      	movs	r3, #3
    c3aa:	4628      	mov	r0, r5
    c3ac:	f7ff ff9e 	bl	c2ec <Svc::Framer::handle_framing(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)>
    this->bufferDeallocate_out(0, fwBuffer);
    c3b0:	4622      	mov	r2, r4
    c3b2:	2100      	movs	r1, #0
    c3b4:	4628      	mov	r0, r5
}
    c3b6:	b003      	add	sp, #12
    c3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->bufferDeallocate_out(0, fwBuffer);
    c3bc:	f000 ba44 	b.w	c848 <Svc::FramerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)>

0000c3c0 <Svc::FramerComponentBase::lock()>:
  // ----------------------------------------------------------------------

  void FramerComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
    c3c0:	f500 705a 	add.w	r0, r0, #872	; 0x368
    c3c4:	f007 ba58 	b.w	13878 <Os::Mutex::lock()>

0000c3c8 <Svc::FramerComponentBase::unLock()>:
  }

  void FramerComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
    c3c8:	f500 705a 	add.w	r0, r0, #872	; 0x368
    c3cc:	f007 baa8 	b.w	13920 <Os::Mutex::unLock()>

0000c3d0 <Svc::FramerComponentBase::m_p_comStatusIn_in(Fw::PassiveComponentBase*, long, Fw::Success&)>:
    m_p_comStatusIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Success& condition
    )
  {
    c3d0:	b570      	push	{r4, r5, r6, lr}
    c3d2:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    c3d4:	4604      	mov	r4, r0
  {
    c3d6:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    c3d8:	b178      	cbz	r0, c3fa <Svc::FramerComponentBase::m_p_comStatusIn_in(Fw::PassiveComponentBase*, long, Fw::Success&)+0x2a>
    FW_ASSERT(
    c3da:	2d00      	cmp	r5, #0
    c3dc:	dd05      	ble.n	c3ea <Svc::FramerComponentBase::m_p_comStatusIn_in(Fw::PassiveComponentBase*, long, Fw::Success&)+0x1a>
    c3de:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    c3e2:	4629      	mov	r1, r5
    c3e4:	4808      	ldr	r0, [pc, #32]	; (c408 <Svc::FramerComponentBase::m_p_comStatusIn_in(Fw::PassiveComponentBase*, long, Fw::Success&)+0x38>)
    c3e6:	f7f5 f91f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->comStatusIn_handler(
    c3ea:	6823      	ldr	r3, [r4, #0]
    c3ec:	4632      	mov	r2, r6
    c3ee:	4629      	mov	r1, r5
    c3f0:	4620      	mov	r0, r4
    c3f2:	699b      	ldr	r3, [r3, #24]
    FramerComponentBase* compPtr = static_cast<FramerComponentBase*>(callComp);
    compPtr->comStatusIn_handlerBase(
      portNum,
      condition
    );
  }
    c3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->comStatusIn_handler(
    c3f8:	4718      	bx	r3
    FW_ASSERT(callComp);
    c3fa:	f240 2172 	movw	r1, #626	; 0x272
    c3fe:	4802      	ldr	r0, [pc, #8]	; (c408 <Svc::FramerComponentBase::m_p_comStatusIn_in(Fw::PassiveComponentBase*, long, Fw::Success&)+0x38>)
    c400:	f7f5 f904 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    c404:	e7e9      	b.n	c3da <Svc::FramerComponentBase::m_p_comStatusIn_in(Fw::PassiveComponentBase*, long, Fw::Success&)+0xa>
    c406:	bf00      	nop
    c408:	2000126c 	.word	0x2000126c

0000c40c <Svc::FramerComponentBase::init(long)>:
  {
    c40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c410:	4604      	mov	r4, r0
    c412:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    c414:	f005 fd64 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    c418:	4f6f      	ldr	r7, [pc, #444]	; (c5d8 <Svc::FramerComponentBase::init(long)+0x1cc>)
      this->m_bufferIn_InputPort[port].init();
    c41a:	f104 0864 	add.w	r8, r4, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    c41e:	4d6f      	ldr	r5, [pc, #444]	; (c5dc <Svc::FramerComponentBase::init(long)+0x1d0>)
    const char* toChar() const { return this->m_buf; }
    c420:	f104 0608 	add.w	r6, r4, #8
      this->m_comIn_InputPort[port].init();
    c424:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
      this->m_bufferIn_InputPort[port].init();
    c428:	4640      	mov	r0, r8
    c42a:	f009 fa4f 	bl	158cc <Fw::InputBufferSendPort::init()>
      this->m_bufferIn_InputPort[port].addCallComp(
    c42e:	4a6c      	ldr	r2, [pc, #432]	; (c5e0 <Svc::FramerComponentBase::init(long)+0x1d4>)
    c430:	4621      	mov	r1, r4
    c432:	4640      	mov	r0, r8
    c434:	f009 f9ae 	bl	15794 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))>
      this->m_bufferIn_InputPort[port].setPortNum(port);
    c438:	2100      	movs	r1, #0
    c43a:	4640      	mov	r0, r8
    c43c:	f00b fc4a 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    c440:	4668      	mov	r0, sp
    c442:	f7f4 feed 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c446:	4639      	mov	r1, r7
    c448:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c44a:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c44c:	f7f4 ff50 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c450:	2300      	movs	r3, #0
    c452:	4632      	mov	r2, r6
    c454:	4963      	ldr	r1, [pc, #396]	; (c5e4 <Svc::FramerComponentBase::init(long)+0x1d8>)
    c456:	4668      	mov	r0, sp
    c458:	f7f4 ff18 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferIn_InputPort[port].setObjName(portName.toChar());
    c45c:	a901      	add	r1, sp, #4
    c45e:	4640      	mov	r0, r8
      this->m_comStatusIn_InputPort[port].init();
    c460:	f504 78a2 	add.w	r8, r4, #324	; 0x144
      this->m_bufferIn_InputPort[port].setObjName(portName.toChar());
    c464:	f00b fd9c 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c468:	4668      	mov	r0, sp
    c46a:	9500      	str	r5, [sp, #0]
    c46c:	f7f4 fee2 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_comIn_InputPort[port].init();
    c470:	4648      	mov	r0, r9
    c472:	f00b f989 	bl	17788 <Fw::InputComPort::init()>
      this->m_comIn_InputPort[port].addCallComp(
    c476:	4a5c      	ldr	r2, [pc, #368]	; (c5e8 <Svc::FramerComponentBase::init(long)+0x1dc>)
    c478:	4621      	mov	r1, r4
    c47a:	4648      	mov	r0, r9
    c47c:	f00b f8dc 	bl	17638 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))>
      this->m_comIn_InputPort[port].setPortNum(port);
    c480:	2100      	movs	r1, #0
    c482:	4648      	mov	r0, r9
    c484:	f00b fc26 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    c488:	4668      	mov	r0, sp
    c48a:	f7f4 fec9 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c48e:	4639      	mov	r1, r7
    c490:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c492:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c494:	f7f4 ff2c 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c498:	2300      	movs	r3, #0
    c49a:	4632      	mov	r2, r6
    c49c:	4953      	ldr	r1, [pc, #332]	; (c5ec <Svc::FramerComponentBase::init(long)+0x1e0>)
    c49e:	4668      	mov	r0, sp
    c4a0:	f7f4 fef4 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_comIn_InputPort[port].setObjName(portName.toChar());
    c4a4:	a901      	add	r1, sp, #4
    c4a6:	4648      	mov	r0, r9
      this->m_bufferDeallocate_OutputPort[port].init();
    c4a8:	f504 79da 	add.w	r9, r4, #436	; 0x1b4
      this->m_comIn_InputPort[port].setObjName(portName.toChar());
    c4ac:	f00b fd78 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c4b0:	4668      	mov	r0, sp
    c4b2:	9500      	str	r5, [sp, #0]
    c4b4:	f7f4 febe 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_comStatusIn_InputPort[port].init();
    c4b8:	4640      	mov	r0, r8
    c4ba:	f001 fbc9 	bl	dc50 <Fw::InputSuccessConditionPort::init()>
      this->m_comStatusIn_InputPort[port].addCallComp(
    c4be:	4a4c      	ldr	r2, [pc, #304]	; (c5f0 <Svc::FramerComponentBase::init(long)+0x1e4>)
    c4c0:	4621      	mov	r1, r4
    c4c2:	4640      	mov	r0, r8
    c4c4:	f001 fb38 	bl	db38 <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))>
      this->m_comStatusIn_InputPort[port].setPortNum(port);
    c4c8:	2100      	movs	r1, #0
    c4ca:	4640      	mov	r0, r8
    c4cc:	f00b fc02 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    c4d0:	4668      	mov	r0, sp
    c4d2:	f7f4 fea5 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c4d6:	4639      	mov	r1, r7
    c4d8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c4da:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c4dc:	f7f4 ff08 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c4e0:	4632      	mov	r2, r6
    c4e2:	2300      	movs	r3, #0
    c4e4:	4943      	ldr	r1, [pc, #268]	; (c5f4 <Svc::FramerComponentBase::init(long)+0x1e8>)
    c4e6:	4668      	mov	r0, sp
    c4e8:	f7f4 fed0 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_comStatusIn_InputPort[port].setObjName(portName.toChar());
    c4ec:	a901      	add	r1, sp, #4
    c4ee:	4640      	mov	r0, r8
      this->m_comStatusOut_OutputPort[port].init();
    c4f0:	f504 7808 	add.w	r8, r4, #544	; 0x220
      this->m_comStatusIn_InputPort[port].setObjName(portName.toChar());
    c4f4:	f00b fd54 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c4f8:	4668      	mov	r0, sp
    c4fa:	9500      	str	r5, [sp, #0]
    c4fc:	f7f4 fe9a 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_bufferDeallocate_OutputPort[port].init();
    c500:	4648      	mov	r0, r9
    c502:	f009 f9e5 	bl	158d0 <Fw::OutputBufferSendPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    c506:	4668      	mov	r0, sp
    c508:	f7f4 fe8a 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c50c:	4639      	mov	r1, r7
    c50e:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c510:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c512:	f7f4 feed 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c516:	4632      	mov	r2, r6
    c518:	2300      	movs	r3, #0
    c51a:	4937      	ldr	r1, [pc, #220]	; (c5f8 <Svc::FramerComponentBase::init(long)+0x1ec>)
    c51c:	4668      	mov	r0, sp
    c51e:	f7f4 feb5 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_bufferDeallocate_OutputPort[port].setObjName(portName.toChar());
    c522:	a901      	add	r1, sp, #4
    c524:	4648      	mov	r0, r9
    c526:	f00b fd3b 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c52a:	4668      	mov	r0, sp
    c52c:	9500      	str	r5, [sp, #0]
    c52e:	f7f4 fe81 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_comStatusOut_OutputPort[port].init();
    c532:	4640      	mov	r0, r8
    c534:	f001 fb8e 	bl	dc54 <Fw::OutputSuccessConditionPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    c538:	4668      	mov	r0, sp
    c53a:	f7f4 fe71 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c53e:	4639      	mov	r1, r7
    c540:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c542:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c544:	f7f4 fed4 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c548:	4632      	mov	r2, r6
    c54a:	2300      	movs	r3, #0
    c54c:	492b      	ldr	r1, [pc, #172]	; (c5fc <Svc::FramerComponentBase::init(long)+0x1f0>)
    c54e:	4668      	mov	r0, sp
    c550:	f7f4 fe9c 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_comStatusOut_OutputPort[port].setObjName(portName.toChar());
    c554:	a901      	add	r1, sp, #4
    c556:	4640      	mov	r0, r8
      this->m_framedAllocate_OutputPort[port].init();
    c558:	f504 7823 	add.w	r8, r4, #652	; 0x28c
      this->m_comStatusOut_OutputPort[port].setObjName(portName.toChar());
    c55c:	f00b fd20 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c560:	4668      	mov	r0, sp
    c562:	9500      	str	r5, [sp, #0]
    c564:	f7f4 fe66 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_framedAllocate_OutputPort[port].init();
    c568:	4640      	mov	r0, r8
      this->m_framedOut_OutputPort[port].init();
    c56a:	f504 743e 	add.w	r4, r4, #760	; 0x2f8
      this->m_framedAllocate_OutputPort[port].init();
    c56e:	f009 f87f 	bl	15670 <Fw::OutputBufferGetPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    c572:	4668      	mov	r0, sp
    c574:	f7f4 fe54 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c578:	4639      	mov	r1, r7
    c57a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c57c:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c57e:	f7f4 feb7 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c582:	4632      	mov	r2, r6
    c584:	2300      	movs	r3, #0
    c586:	491e      	ldr	r1, [pc, #120]	; (c600 <Svc::FramerComponentBase::init(long)+0x1f4>)
    c588:	4668      	mov	r0, sp
    c58a:	f7f4 fe7f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_framedAllocate_OutputPort[port].setObjName(portName.toChar());
    c58e:	a901      	add	r1, sp, #4
    c590:	4640      	mov	r0, r8
    c592:	f00b fd05 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c596:	4668      	mov	r0, sp
    c598:	9500      	str	r5, [sp, #0]
    c59a:	f7f4 fe4b 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_framedOut_OutputPort[port].init();
    c59e:	4620      	mov	r0, r4
    c5a0:	f000 fcfe 	bl	cfa0 <Drv::OutputByteStreamSendPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    c5a4:	4668      	mov	r0, sp
    c5a6:	f7f4 fe3b 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    c5aa:	4639      	mov	r1, r7
    c5ac:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    c5ae:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
    c5b0:	f7f4 fe9e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    c5b4:	4632      	mov	r2, r6
    c5b6:	2300      	movs	r3, #0
    c5b8:	4912      	ldr	r1, [pc, #72]	; (c604 <Svc::FramerComponentBase::init(long)+0x1f8>)
    c5ba:	4668      	mov	r0, sp
    c5bc:	f7f4 fe66 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_framedOut_OutputPort[port].setObjName(portName.toChar());
    c5c0:	a901      	add	r1, sp, #4
    c5c2:	4620      	mov	r0, r4
    c5c4:	f00b fcec 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    c5c8:	4668      	mov	r0, sp
    c5ca:	9500      	str	r5, [sp, #0]
    c5cc:	f7f4 fe32 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    c5d0:	b017      	add	sp, #92	; 0x5c
    c5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c5d6:	bf00      	nop
    c5d8:	20001d2c 	.word	0x20001d2c
    c5dc:	20002b80 	.word	0x20002b80
    c5e0:	0000c761 	.word	0x0000c761
    c5e4:	200012b8 	.word	0x200012b8
    c5e8:	0000c80d 	.word	0x0000c80d
    c5ec:	200012d4 	.word	0x200012d4
    c5f0:	0000c3d1 	.word	0x0000c3d1
    c5f4:	200012ec 	.word	0x200012ec
    c5f8:	20001574 	.word	0x20001574
    c5fc:	2000130c 	.word	0x2000130c
    c600:	2000132c 	.word	0x2000132c
    c604:	20001350 	.word	0x20001350

0000c608 <Svc::FramerComponentBase::get_comIn_InputPort(long)>:
  {
    c608:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    c60a:	1e0c      	subs	r4, r1, #0
  {
    c60c:	4605      	mov	r5, r0
    FW_ASSERT(
    c60e:	dd03      	ble.n	c618 <Svc::FramerComponentBase::get_comIn_InputPort(long)+0x10>
    c610:	22c1      	movs	r2, #193	; 0xc1
    c612:	4804      	ldr	r0, [pc, #16]	; (c624 <Svc::FramerComponentBase::get_comIn_InputPort(long)+0x1c>)
    c614:	f7f5 f808 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_comIn_InputPort[portNum];
    c618:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    c61c:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    c620:	30d4      	adds	r0, #212	; 0xd4
    c622:	bd38      	pop	{r3, r4, r5, pc}
    c624:	2000126c 	.word	0x2000126c

0000c628 <Svc::FramerComponentBase::set_framedAllocate_OutputPort(long, Fw::InputBufferGetPort*)>:
  {
    c628:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c62a:	1e0d      	subs	r5, r1, #0
  {
    c62c:	4604      	mov	r4, r0
    c62e:	4616      	mov	r6, r2
    FW_ASSERT(
    c630:	dd03      	ble.n	c63a <Svc::FramerComponentBase::set_framedAllocate_OutputPort(long, Fw::InputBufferGetPort*)+0x12>
    c632:	22fa      	movs	r2, #250	; 0xfa
    c634:	4806      	ldr	r0, [pc, #24]	; (c650 <Svc::FramerComponentBase::set_framedAllocate_OutputPort(long, Fw::InputBufferGetPort*)+0x28>)
    c636:	f7f4 fff7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_framedAllocate_OutputPort[portNum].addCallPort(port);
    c63a:	236c      	movs	r3, #108	; 0x6c
    c63c:	4631      	mov	r1, r6
    c63e:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_framedAllocate_OutputPort[portNum].addCallPort(port);
    c646:	f500 7023 	add.w	r0, r0, #652	; 0x28c
    c64a:	f008 bfdf 	b.w	1560c <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)>
    c64e:	bf00      	nop
    c650:	2000126c 	.word	0x2000126c

0000c654 <Svc::FramerComponentBase::set_framedOut_OutputPort(long, Drv::InputByteStreamSendPort*)>:
  {
    c654:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c656:	1e0d      	subs	r5, r1, #0
  {
    c658:	4604      	mov	r4, r0
    c65a:	4616      	mov	r6, r2
    FW_ASSERT(
    c65c:	dd04      	ble.n	c668 <Svc::FramerComponentBase::set_framedOut_OutputPort(long, Drv::InputByteStreamSendPort*)+0x14>
    c65e:	f44f 7284 	mov.w	r2, #264	; 0x108
    c662:	4806      	ldr	r0, [pc, #24]	; (c67c <Svc::FramerComponentBase::set_framedOut_OutputPort(long, Drv::InputByteStreamSendPort*)+0x28>)
    c664:	f7f4 ffe0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_framedOut_OutputPort[portNum].addCallPort(port);
    c668:	236c      	movs	r3, #108	; 0x6c
    c66a:	4631      	mov	r1, r6
    c66c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_framedOut_OutputPort[portNum].addCallPort(port);
    c674:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    c678:	f000 bc60 	b.w	cf3c <Drv::OutputByteStreamSendPort::addCallPort(Drv::InputByteStreamSendPort*)>
    c67c:	2000126c 	.word	0x2000126c

0000c680 <Svc::FramerComponentBase::FramerComponentBase(char const*)>:
  FramerComponentBase ::
    c680:	b510      	push	{r4, lr}
    c682:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    c684:	f005 fc1e 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    c688:	4b11      	ldr	r3, [pc, #68]	; (c6d0 <Svc::FramerComponentBase::FramerComponentBase(char const*)+0x50>)
    c68a:	4620      	mov	r0, r4
    c68c:	f840 3b64 	str.w	r3, [r0], #100
    c690:	f009 f874 	bl	1577c <Fw::InputBufferSendPort::InputBufferSendPort()>
    c694:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    c698:	f00a ffc2 	bl	17620 <Fw::InputComPort::InputComPort()>
    c69c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    c6a0:	f001 fa3e 	bl	db20 <Fw::InputSuccessConditionPort::InputSuccessConditionPort()>
    c6a4:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    c6a8:	f009 f8b6 	bl	15818 <Fw::OutputBufferSendPort::OutputBufferSendPort()>
    c6ac:	f504 7008 	add.w	r0, r4, #544	; 0x220
    c6b0:	f001 fa84 	bl	dbbc <Fw::OutputSuccessConditionPort::OutputSuccessConditionPort()>
    c6b4:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    c6b8:	f008 ff9c 	bl	155f4 <Fw::OutputBufferGetPort::OutputBufferGetPort()>
    c6bc:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    c6c0:	f000 fc30 	bl	cf24 <Drv::OutputByteStreamSendPort::OutputByteStreamSendPort()>
    c6c4:	f504 705a 	add.w	r0, r4, #872	; 0x368
    c6c8:	f007 f8ba 	bl	13840 <Os::Mutex::Mutex()>
  }
    c6cc:	4620      	mov	r0, r4
    c6ce:	bd10      	pop	{r4, pc}
    c6d0:	20003b6c 	.word	0x20003b6c

0000c6d4 <Svc::FramerComponentBase::isConnected_comStatusOut_OutputPort(long)>:
  {
    c6d4:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    c6d6:	1e0d      	subs	r5, r1, #0
  {
    c6d8:	4604      	mov	r4, r0
    FW_ASSERT(
    c6da:	dd04      	ble.n	c6e6 <Svc::FramerComponentBase::isConnected_comStatusOut_OutputPort(long)+0x12>
    c6dc:	f240 1289 	movw	r2, #393	; 0x189
    c6e0:	4805      	ldr	r0, [pc, #20]	; (c6f8 <Svc::FramerComponentBase::isConnected_comStatusOut_OutputPort(long)+0x24>)
    c6e2:	f7f4 ffa1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_comStatusOut_OutputPort[portNum].isConnected();
    c6e6:	236c      	movs	r3, #108	; 0x6c
    c6e8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c6ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_comStatusOut_OutputPort[portNum].isConnected();
    c6f0:	f500 7008 	add.w	r0, r0, #544	; 0x220
    c6f4:	f00b bbaa 	b.w	17e4c <Fw::PortBase::isConnected() const>
    c6f8:	2000126c 	.word	0x2000126c

0000c6fc <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)>:
  {
    c6fc:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c6fe:	1e0d      	subs	r5, r1, #0
  {
    c700:	4604      	mov	r4, r0
    c702:	4616      	mov	r6, r2
    FW_ASSERT(
    c704:	dd04      	ble.n	c710 <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x14>
    c706:	f44f 72da 	mov.w	r2, #436	; 0x1b4
    c70a:	4812      	ldr	r0, [pc, #72]	; (c754 <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x58>)
    c70c:	f7f4 ff8c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->lock();
    c710:	6823      	ldr	r3, [r4, #0]
    c712:	4a11      	ldr	r2, [pc, #68]	; (c758 <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x5c>)
    c714:	69db      	ldr	r3, [r3, #28]
    c716:	4293      	cmp	r3, r2
    c718:	d114      	bne.n	c744 <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x48>
    this->m_guardedPortMutex.lock();
    c71a:	f504 705a 	add.w	r0, r4, #872	; 0x368
    c71e:	f007 f8ab 	bl	13878 <Os::Mutex::lock()>
    this->bufferIn_handler(
    c722:	6823      	ldr	r3, [r4, #0]
    c724:	4632      	mov	r2, r6
    c726:	4629      	mov	r1, r5
    c728:	4620      	mov	r0, r4
    c72a:	691b      	ldr	r3, [r3, #16]
    c72c:	4798      	blx	r3
    this->unLock();
    c72e:	6823      	ldr	r3, [r4, #0]
    c730:	4a0a      	ldr	r2, [pc, #40]	; (c75c <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x60>)
    c732:	6a1b      	ldr	r3, [r3, #32]
    c734:	4293      	cmp	r3, r2
    c736:	d108      	bne.n	c74a <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x4e>
    this->m_guardedPortMutex.unLock();
    c738:	f504 705a 	add.w	r0, r4, #872	; 0x368
  }
    c73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    c740:	f007 b8ee 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
    c744:	4620      	mov	r0, r4
    c746:	4798      	blx	r3
    c748:	e7eb      	b.n	c722 <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)+0x26>
    this->unLock();
    c74a:	4620      	mov	r0, r4
  }
    c74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    c750:	4718      	bx	r3
    c752:	bf00      	nop
    c754:	2000126c 	.word	0x2000126c
    c758:	0000c3c1 	.word	0x0000c3c1
    c75c:	0000c3c9 	.word	0x0000c3c9

0000c760 <Svc::FramerComponentBase::m_p_bufferIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)>:
  {
    c760:	b530      	push	{r4, r5, lr}
    c762:	460d      	mov	r5, r1
    c764:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    c766:	4604      	mov	r4, r0
    c768:	b130      	cbz	r0, c778 <Svc::FramerComponentBase::m_p_bufferIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)+0x18>
    compPtr->bufferIn_handlerBase(
    c76a:	4629      	mov	r1, r5
    c76c:	4620      	mov	r0, r4
  }
    c76e:	b003      	add	sp, #12
    c770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->bufferIn_handlerBase(
    c774:	f7ff bfc2 	b.w	c6fc <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)>
    FW_ASSERT(callComp);
    c778:	f240 2152 	movw	r1, #594	; 0x252
    c77c:	4805      	ldr	r0, [pc, #20]	; (c794 <Svc::FramerComponentBase::m_p_bufferIn_in(Fw::PassiveComponentBase*, long, Fw::Buffer&)+0x34>)
    c77e:	9201      	str	r2, [sp, #4]
    c780:	f7f4 ff44 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    c784:	9a01      	ldr	r2, [sp, #4]
    compPtr->bufferIn_handlerBase(
    c786:	4629      	mov	r1, r5
    c788:	4620      	mov	r0, r4
  }
    c78a:	b003      	add	sp, #12
    c78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->bufferIn_handlerBase(
    c790:	f7ff bfb4 	b.w	c6fc <Svc::FramerComponentBase::bufferIn_handlerBase(long, Fw::Buffer&)>
    c794:	2000126c 	.word	0x2000126c

0000c798 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)>:
  {
    c798:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c79a:	1e0d      	subs	r5, r1, #0
  {
    c79c:	b082      	sub	sp, #8
    c79e:	4604      	mov	r4, r0
    c7a0:	4616      	mov	r6, r2
    FW_ASSERT(
    c7a2:	dd06      	ble.n	c7b2 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x1a>
    c7a4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
    c7a8:	4815      	ldr	r0, [pc, #84]	; (c800 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x68>)
    c7aa:	9301      	str	r3, [sp, #4]
    c7ac:	f7f4 ff3c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    c7b0:	9b01      	ldr	r3, [sp, #4]
    this->lock();
    c7b2:	6822      	ldr	r2, [r4, #0]
    c7b4:	4913      	ldr	r1, [pc, #76]	; (c804 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x6c>)
    c7b6:	69d2      	ldr	r2, [r2, #28]
    c7b8:	9301      	str	r3, [sp, #4]
    c7ba:	428a      	cmp	r2, r1
    c7bc:	d116      	bne.n	c7ec <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x54>
    this->m_guardedPortMutex.lock();
    c7be:	f504 705a 	add.w	r0, r4, #872	; 0x368
    c7c2:	f007 f859 	bl	13878 <Os::Mutex::lock()>
  }
    c7c6:	9b01      	ldr	r3, [sp, #4]
    this->comIn_handler(
    c7c8:	6820      	ldr	r0, [r4, #0]
    c7ca:	4632      	mov	r2, r6
    c7cc:	4629      	mov	r1, r5
    c7ce:	6945      	ldr	r5, [r0, #20]
    c7d0:	4620      	mov	r0, r4
    c7d2:	47a8      	blx	r5
    this->unLock();
    c7d4:	6823      	ldr	r3, [r4, #0]
    c7d6:	4a0c      	ldr	r2, [pc, #48]	; (c808 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x70>)
    c7d8:	6a1b      	ldr	r3, [r3, #32]
    c7da:	4293      	cmp	r3, r2
    c7dc:	d10a      	bne.n	c7f4 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x5c>
    this->m_guardedPortMutex.unLock();
    c7de:	f504 705a 	add.w	r0, r4, #872	; 0x368
  }
    c7e2:	b002      	add	sp, #8
    c7e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    c7e8:	f007 b89a 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
    c7ec:	4620      	mov	r0, r4
    c7ee:	4790      	blx	r2
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	e7e9      	b.n	c7c8 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)+0x30>
    this->unLock();
    c7f4:	4620      	mov	r0, r4
  }
    c7f6:	b002      	add	sp, #8
    c7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    c7fc:	4718      	bx	r3
    c7fe:	bf00      	nop
    c800:	2000126c 	.word	0x2000126c
    c804:	0000c3c1 	.word	0x0000c3c1
    c808:	0000c3c9 	.word	0x0000c3c9

0000c80c <Svc::FramerComponentBase::m_p_comIn_in(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long)>:
  {
    c80c:	b530      	push	{r4, r5, lr}
    c80e:	460d      	mov	r5, r1
    c810:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    c812:	4604      	mov	r4, r0
    c814:	b130      	cbz	r0, c824 <Svc::FramerComponentBase::m_p_comIn_in(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long)+0x18>
    compPtr->comIn_handlerBase(
    c816:	4629      	mov	r1, r5
    c818:	4620      	mov	r0, r4
  }
    c81a:	b003      	add	sp, #12
    c81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->comIn_handlerBase(
    c820:	f7ff bfba 	b.w	c798 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)>
    FW_ASSERT(callComp);
    c824:	f240 2162 	movw	r1, #610	; 0x262
    c828:	4806      	ldr	r0, [pc, #24]	; (c844 <Svc::FramerComponentBase::m_p_comIn_in(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long)+0x38>)
    c82a:	e9cd 2300 	strd	r2, r3, [sp]
    c82e:	f7f4 feed 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    compPtr->comIn_handlerBase(
    c832:	4629      	mov	r1, r5
    c834:	4620      	mov	r0, r4
    FW_ASSERT(callComp);
    c836:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    c83a:	b003      	add	sp, #12
    c83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->comIn_handlerBase(
    c840:	f7ff bfaa 	b.w	c798 <Svc::FramerComponentBase::comIn_handlerBase(long, Fw::ComBuffer&, unsigned long)>
    c844:	2000126c 	.word	0x2000126c

0000c848 <Svc::FramerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)>:
  {
    c848:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c84a:	1e0d      	subs	r5, r1, #0
  {
    c84c:	4604      	mov	r4, r0
    c84e:	4616      	mov	r6, r2
    FW_ASSERT(
    c850:	dd04      	ble.n	c85c <Svc::FramerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)+0x14>
    c852:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
    c856:	4806      	ldr	r0, [pc, #24]	; (c870 <Svc::FramerComponentBase::bufferDeallocate_out(long, Fw::Buffer&)+0x28>)
    c858:	f7f4 fee6 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_bufferDeallocate_OutputPort[portNum].invoke(
    c85c:	236c      	movs	r3, #108	; 0x6c
    c85e:	4631      	mov	r1, r6
    c860:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_bufferDeallocate_OutputPort[portNum].invoke(
    c868:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
    c86c:	f008 bff0 	b.w	15850 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const>
    c870:	2000126c 	.word	0x2000126c

0000c874 <Svc::FramerComponentBase::comStatusOut_out(long, Fw::Success&)>:
  {
    c874:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    c876:	1e0d      	subs	r5, r1, #0
  {
    c878:	4604      	mov	r4, r0
    c87a:	4616      	mov	r6, r2
    FW_ASSERT(
    c87c:	dd04      	ble.n	c888 <Svc::FramerComponentBase::comStatusOut_out(long, Fw::Success&)+0x14>
    c87e:	f240 220d 	movw	r2, #525	; 0x20d
    c882:	4806      	ldr	r0, [pc, #24]	; (c89c <Svc::FramerComponentBase::comStatusOut_out(long, Fw::Success&)+0x28>)
    c884:	f7f4 fed0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_comStatusOut_OutputPort[portNum].invoke(
    c888:	236c      	movs	r3, #108	; 0x6c
    c88a:	4631      	mov	r1, r6
    c88c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    c890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_comStatusOut_OutputPort[portNum].invoke(
    c894:	f500 7008 	add.w	r0, r0, #544	; 0x220
    c898:	f001 b99c 	b.w	dbd4 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const>
    c89c:	2000126c 	.word	0x2000126c

0000c8a0 <Svc::FramerComponentBase::framedAllocate_out(long, unsigned long)>:
  {
    c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    c8a2:	1e15      	subs	r5, r2, #0
  {
    c8a4:	4606      	mov	r6, r0
    c8a6:	460c      	mov	r4, r1
    c8a8:	461f      	mov	r7, r3
    FW_ASSERT(
    c8aa:	dd05      	ble.n	c8b8 <Svc::FramerComponentBase::framedAllocate_out(long, unsigned long)+0x18>
    c8ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
    c8b0:	4629      	mov	r1, r5
    c8b2:	4807      	ldr	r0, [pc, #28]	; (c8d0 <Svc::FramerComponentBase::framedAllocate_out(long, unsigned long)+0x30>)
    c8b4:	f7f4 feb8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    );
    c8b8:	236c      	movs	r3, #108	; 0x6c
    c8ba:	4630      	mov	r0, r6
    c8bc:	463a      	mov	r2, r7
    c8be:	fb03 4105 	mla	r1, r3, r5, r4
    c8c2:	f501 7123 	add.w	r1, r1, #652	; 0x28c
    c8c6:	f008 feb1 	bl	1562c <Fw::OutputBufferGetPort::invoke(unsigned long) const>
  }
    c8ca:	4630      	mov	r0, r6
    c8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8ce:	bf00      	nop
    c8d0:	2000126c 	.word	0x2000126c

0000c8d4 <Svc::FramerComponentBase::framedOut_out(long, Fw::Buffer&)>:
  {
    c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
    c8d6:	1e15      	subs	r5, r2, #0
  {
    c8d8:	4606      	mov	r6, r0
    c8da:	460c      	mov	r4, r1
    c8dc:	461f      	mov	r7, r3
    FW_ASSERT(
    c8de:	dd05      	ble.n	c8ec <Svc::FramerComponentBase::framedOut_out(long, Fw::Buffer&)+0x18>
    c8e0:	f240 222b 	movw	r2, #555	; 0x22b
    c8e4:	4629      	mov	r1, r5
    c8e6:	4807      	ldr	r0, [pc, #28]	; (c904 <Svc::FramerComponentBase::framedOut_out(long, Fw::Buffer&)+0x30>)
    c8e8:	f7f4 fe9e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    );
    c8ec:	236c      	movs	r3, #108	; 0x6c
    c8ee:	4630      	mov	r0, r6
    c8f0:	463a      	mov	r2, r7
    c8f2:	fb03 4105 	mla	r1, r3, r5, r4
    c8f6:	f501 713e 	add.w	r1, r1, #760	; 0x2f8
    c8fa:	f000 fb2f 	bl	cf5c <Drv::OutputByteStreamSendPort::invoke(Fw::Buffer&) const>
  }
    c8fe:	4630      	mov	r0, r6
    c900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c902:	bf00      	nop
    c904:	2000126c 	.word	0x2000126c

0000c908 <Svc::FramerComponentBase::~FramerComponentBase()>:
  FramerComponentBase ::
    c908:	b510      	push	{r4, lr}
    ~FramerComponentBase()
    c90a:	4b1a      	ldr	r3, [pc, #104]	; (c974 <Svc::FramerComponentBase::~FramerComponentBase()+0x6c>)
  FramerComponentBase ::
    c90c:	4604      	mov	r4, r0
    ~FramerComponentBase()
    c90e:	f500 705a 	add.w	r0, r0, #872	; 0x368
    c912:	6023      	str	r3, [r4, #0]
    c914:	f006 fd4a 	bl	133ac <Os::Mutex::~Mutex()>
    c918:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
    c91c:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
    c920:	685b      	ldr	r3, [r3, #4]
    c922:	4798      	blx	r3
    c924:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
    c928:	f504 7023 	add.w	r0, r4, #652	; 0x28c
    c92c:	685b      	ldr	r3, [r3, #4]
    c92e:	4798      	blx	r3
    c930:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
    c934:	f504 7008 	add.w	r0, r4, #544	; 0x220
    c938:	685b      	ldr	r3, [r3, #4]
    c93a:	4798      	blx	r3
    c93c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    c940:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    c944:	685b      	ldr	r3, [r3, #4]
    c946:	4798      	blx	r3
    c948:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c94c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    c950:	685b      	ldr	r3, [r3, #4]
    c952:	4798      	blx	r3
    c954:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    c958:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    c95c:	685b      	ldr	r3, [r3, #4]
    c95e:	4798      	blx	r3
    c960:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c962:	f104 0064 	add.w	r0, r4, #100	; 0x64
    c966:	685b      	ldr	r3, [r3, #4]
    c968:	4798      	blx	r3
    c96a:	4620      	mov	r0, r4
    c96c:	f005 fa52 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    c970:	4620      	mov	r0, r4
    c972:	bd10      	pop	{r4, pc}
    c974:	20003b6c 	.word	0x20003b6c

0000c978 <Drv::OutputByteStreamPollPort::~OutputByteStreamPollPort()>:
      CompFuncPtr m_func;

  };

  //! Output ByteStreamPoll port
  class OutputByteStreamPollPort :
    c978:	4b03      	ldr	r3, [pc, #12]	; (c988 <Drv::OutputByteStreamPollPort::~OutputByteStreamPollPort()+0x10>)
    c97a:	b510      	push	{r4, lr}
    c97c:	4604      	mov	r4, r0
    c97e:	6003      	str	r3, [r0, #0]
    c980:	f00b f9bc 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    c984:	4620      	mov	r0, r4
    c986:	bd10      	pop	{r4, pc}
    c988:	2000388c 	.word	0x2000388c

0000c98c <Drv::OutputByteStreamPollPort::~OutputByteStreamPollPort()>:
    c98c:	4b05      	ldr	r3, [pc, #20]	; (c9a4 <Drv::OutputByteStreamPollPort::~OutputByteStreamPollPort()+0x18>)
    c98e:	b510      	push	{r4, lr}
    c990:	4604      	mov	r4, r0
    c992:	6003      	str	r3, [r0, #0]
    c994:	f00b f9b2 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    c998:	216c      	movs	r1, #108	; 0x6c
    c99a:	4620      	mov	r0, r4
    c99c:	f00c f998 	bl	18cd0 <operator delete(void*, unsigned int)>
    c9a0:	4620      	mov	r0, r4
    c9a2:	bd10      	pop	{r4, pc}
    c9a4:	2000388c 	.word	0x2000388c

0000c9a8 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)>:

  Drv::PollStatus InputByteStreamPollPort ::
    invoke(Fw::Buffer& pollBuffer)
  {
    c9a8:	b570      	push	{r4, r5, r6, lr}
    c9aa:	460c      	mov	r4, r1
    c9ac:	b082      	sub	sp, #8
    c9ae:	4605      	mov	r5, r0
#if FW_PORT_TRACING == 1
    this->trace();
    c9b0:	4608      	mov	r0, r1
  {
    c9b2:	9201      	str	r2, [sp, #4]
    this->trace();
    c9b4:	f00b fa50 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
    c9b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c9ba:	9b01      	ldr	r3, [sp, #4]
    c9bc:	b142      	cbz	r2, c9d0 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
    c9be:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    c9c0:	b176      	cbz	r6, c9e0 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)+0x38>

    return this->m_func(this->m_comp, this->m_portNum, pollBuffer);
    c9c2:	4628      	mov	r0, r5
    c9c4:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    c9c8:	47b0      	blx	r6
  }
    c9ca:	4628      	mov	r0, r5
    c9cc:	b002      	add	sp, #8
    c9ce:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
    c9d0:	2134      	movs	r1, #52	; 0x34
    c9d2:	4807      	ldr	r0, [pc, #28]	; (c9f0 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)+0x48>)
    c9d4:	f7f4 fe1a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    c9d8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    c9da:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    c9dc:	2e00      	cmp	r6, #0
    c9de:	d1f0      	bne.n	c9c2 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)+0x1a>
    c9e0:	2135      	movs	r1, #53	; 0x35
    c9e2:	4803      	ldr	r0, [pc, #12]	; (c9f0 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)+0x48>)
    c9e4:	9301      	str	r3, [sp, #4]
    c9e6:	f7f4 fe11 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, pollBuffer);
    c9ea:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	e7e8      	b.n	c9c2 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)+0x1a>
    c9f0:	20000f10 	.word	0x20000f10

0000c9f4 <Drv::OutputByteStreamPollPort::OutputByteStreamPollPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputByteStreamPollPort ::
    c9f4:	b510      	push	{r4, lr}
    c9f6:	4604      	mov	r4, r0
    OutputByteStreamPollPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    c9f8:	f00b f998 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    c9fc:	4a02      	ldr	r2, [pc, #8]	; (ca08 <Drv::OutputByteStreamPollPort::OutputByteStreamPollPort()+0x14>)
    c9fe:	2300      	movs	r3, #0
  {

  }
    ca00:	4620      	mov	r0, r4
      m_port(nullptr)
    ca02:	6022      	str	r2, [r4, #0]
    ca04:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    ca06:	bd10      	pop	{r4, pc}
    ca08:	2000388c 	.word	0x2000388c

0000ca0c <Drv::OutputByteStreamPollPort::invoke(Fw::Buffer&) const>:
#endif
  }

  Drv::PollStatus OutputByteStreamPollPort ::
    invoke(Fw::Buffer& pollBuffer) const
  {
    ca0c:	b530      	push	{r4, r5, lr}
    ca0e:	460c      	mov	r4, r1
    ca10:	b083      	sub	sp, #12
    ca12:	4605      	mov	r5, r0
#if FW_PORT_TRACING == 1
    this->trace();
    ca14:	4608      	mov	r0, r1
  {
    ca16:	9201      	str	r2, [sp, #4]
    this->trace();
    ca18:	f00b fa1e 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_port != nullptr);
    ca1c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    ca1e:	9a01      	ldr	r2, [sp, #4]
    ca20:	b129      	cbz	r1, ca2e <Drv::OutputByteStreamPollPort::invoke(Fw::Buffer&) const+0x22>
    return this->m_port->invoke(pollBuffer);
    ca22:	4628      	mov	r0, r5
    ca24:	f7ff ffc0 	bl	c9a8 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)>
  }
    ca28:	4628      	mov	r0, r5
    ca2a:	b003      	add	sp, #12
    ca2c:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_port != nullptr);
    ca2e:	216e      	movs	r1, #110	; 0x6e
    ca30:	4805      	ldr	r0, [pc, #20]	; (ca48 <Drv::OutputByteStreamPollPort::invoke(Fw::Buffer&) const+0x3c>)
    ca32:	f7f4 fdeb 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_port->invoke(pollBuffer);
    ca36:	4628      	mov	r0, r5
    ca38:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    ca3a:	9a01      	ldr	r2, [sp, #4]
    ca3c:	f7ff ffb4 	bl	c9a8 <Drv::InputByteStreamPollPort::invoke(Fw::Buffer&)>
  }
    ca40:	4628      	mov	r0, r5
    ca42:	b003      	add	sp, #12
    ca44:	bd30      	pop	{r4, r5, pc}
    ca46:	bf00      	nop
    ca48:	20000f10 	.word	0x20000f10

0000ca4c <Drv::OutputByteStreamPollPort::init()>:
    Fw::OutputPortBase::init();
    ca4c:	f00b b97a 	b.w	17d44 <Fw::OutputPortBase::init()>

0000ca50 <Drv::(anonymous namespace)::ByteStreamReadyPortBuffer::getBuffCapacity() const>:
        }
    ca50:	2000      	movs	r0, #0
    ca52:	4770      	bx	lr

0000ca54 <Drv::(anonymous namespace)::ByteStreamReadyPortBuffer::getBuffAddr()>:
        }
    ca54:	2000      	movs	r0, #0
    ca56:	4770      	bx	lr

0000ca58 <Drv::(anonymous namespace)::ByteStreamReadyPortBuffer::~ByteStreamReadyPortBuffer()>:
    class ByteStreamReadyPortBuffer : public Fw::SerializeBufferBase {
    ca58:	4b03      	ldr	r3, [pc, #12]	; (ca68 <Drv::(anonymous namespace)::ByteStreamReadyPortBuffer::~ByteStreamReadyPortBuffer()+0x10>)
    ca5a:	b510      	push	{r4, lr}
    ca5c:	4604      	mov	r4, r0
    ca5e:	6003      	str	r3, [r0, #0]
    ca60:	f7f3 fd76 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    ca64:	4620      	mov	r0, r4
    ca66:	bd10      	pop	{r4, pc}
    ca68:	200037d4 	.word	0x200037d4

0000ca6c <Drv::(anonymous namespace)::ByteStreamReadyPortBuffer::~ByteStreamReadyPortBuffer()>:
    ca6c:	4b05      	ldr	r3, [pc, #20]	; (ca84 <Drv::(anonymous namespace)::ByteStreamReadyPortBuffer::~ByteStreamReadyPortBuffer()+0x18>)
    ca6e:	b510      	push	{r4, lr}
    ca70:	4604      	mov	r4, r0
    ca72:	6003      	str	r3, [r0, #0]
    ca74:	f7f3 fd6c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    ca78:	210c      	movs	r1, #12
    ca7a:	4620      	mov	r0, r4
    ca7c:	f00c f928 	bl	18cd0 <operator delete(void*, unsigned int)>
    ca80:	4620      	mov	r0, r4
    ca82:	bd10      	pop	{r4, pc}
    ca84:	200037d4 	.word	0x200037d4

0000ca88 <Drv::OutputByteStreamReadyPort::~OutputByteStreamReadyPort()>:

  };

  //! Output ByteStreamReady port
  //! Signal indicating the driver is ready to send and received data
  class OutputByteStreamReadyPort :
    ca88:	4b03      	ldr	r3, [pc, #12]	; (ca98 <Drv::OutputByteStreamReadyPort::~OutputByteStreamReadyPort()+0x10>)
    ca8a:	b510      	push	{r4, lr}
    ca8c:	4604      	mov	r4, r0
    ca8e:	6003      	str	r3, [r0, #0]
    ca90:	f00b f934 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    ca94:	4620      	mov	r0, r4
    ca96:	bd10      	pop	{r4, pc}
    ca98:	200038e0 	.word	0x200038e0

0000ca9c <Drv::OutputByteStreamReadyPort::~OutputByteStreamReadyPort()>:
    ca9c:	4b05      	ldr	r3, [pc, #20]	; (cab4 <Drv::OutputByteStreamReadyPort::~OutputByteStreamReadyPort()+0x18>)
    ca9e:	b510      	push	{r4, lr}
    caa0:	4604      	mov	r4, r0
    caa2:	6003      	str	r3, [r0, #0]
    caa4:	f00b f92a 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    caa8:	216c      	movs	r1, #108	; 0x6c
    caaa:	4620      	mov	r0, r4
    caac:	f00c f910 	bl	18cd0 <operator delete(void*, unsigned int)>
    cab0:	4620      	mov	r0, r4
    cab2:	bd10      	pop	{r4, pc}
    cab4:	200038e0 	.word	0x200038e0

0000cab8 <Drv::InputByteStreamReadyPort::invoke()>:
  {
    cab8:	b510      	push	{r4, lr}
    caba:	4604      	mov	r4, r0
    this->trace();
    cabc:	f00b f9cc 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    cac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    cac2:	b133      	cbz	r3, cad2 <Drv::InputByteStreamReadyPort::invoke()+0x1a>
    FW_ASSERT(this->m_func != nullptr);
    cac4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cac6:	b15b      	cbz	r3, cae0 <Drv::InputByteStreamReadyPort::invoke()+0x28>
    return this->m_func(this->m_comp, this->m_portNum);
    cac8:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    cacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum);
    cad0:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
    cad2:	214e      	movs	r1, #78	; 0x4e
    cad4:	4807      	ldr	r0, [pc, #28]	; (caf4 <Drv::InputByteStreamReadyPort::invoke()+0x3c>)
    cad6:	f7f4 fd99 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    cada:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cadc:	2b00      	cmp	r3, #0
    cade:	d1f3      	bne.n	cac8 <Drv::InputByteStreamReadyPort::invoke()+0x10>
    cae0:	214f      	movs	r1, #79	; 0x4f
    cae2:	4804      	ldr	r0, [pc, #16]	; (caf4 <Drv::InputByteStreamReadyPort::invoke()+0x3c>)
    cae4:	f7f4 fd92 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum);
    cae8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    caea:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    caee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum);
    caf2:	4718      	bx	r3
    caf4:	20001024 	.word	0x20001024

0000caf8 <Drv::OutputByteStreamReadyPort::OutputByteStreamReadyPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputByteStreamReadyPort ::
    caf8:	b510      	push	{r4, lr}
    cafa:	4604      	mov	r4, r0
    OutputByteStreamReadyPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    cafc:	f00b f916 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    cb00:	4a02      	ldr	r2, [pc, #8]	; (cb0c <Drv::OutputByteStreamReadyPort::OutputByteStreamReadyPort()+0x14>)
    cb02:	2300      	movs	r3, #0
  {

  }
    cb04:	4620      	mov	r0, r4
      m_port(nullptr)
    cb06:	6022      	str	r2, [r4, #0]
    cb08:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    cb0a:	bd10      	pop	{r4, pc}
    cb0c:	200038e0 	.word	0x200038e0

0000cb10 <Drv::OutputByteStreamReadyPort::invoke() const>:
#endif
  }

  void OutputByteStreamReadyPort ::
    invoke() const
  {
    cb10:	b530      	push	{r4, r5, lr}
    cb12:	4604      	mov	r4, r0
    cb14:	b085      	sub	sp, #20
#if FW_PORT_TRACING == 1
    this->trace();
    cb16:	f00b f99f 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    cb1a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    cb1c:	b120      	cbz	r0, cb28 <Drv::OutputByteStreamReadyPort::invoke() const+0x18>
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke();
#endif
  }
    cb1e:	b005      	add	sp, #20
    cb20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      this->m_port->invoke();
    cb24:	f7ff bfc8 	b.w	cab8 <Drv::InputByteStreamReadyPort::invoke()>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    cb28:	6e63      	ldr	r3, [r4, #100]	; 0x64
    cb2a:	b1b3      	cbz	r3, cb5a <Drv::OutputByteStreamReadyPort::invoke() const+0x4a>
    class ByteStreamReadyPortBuffer : public Fw::SerializeBufferBase {
    cb2c:	a801      	add	r0, sp, #4
    cb2e:	4d0f      	ldr	r5, [pc, #60]	; (cb6c <Drv::OutputByteStreamReadyPort::invoke() const+0x5c>)
    cb30:	f7f3 fd06 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = this->m_serPort->invokeSerial(_buffer);
    cb34:	6e60      	ldr	r0, [r4, #100]	; 0x64
    class ByteStreamReadyPortBuffer : public Fw::SerializeBufferBase {
    cb36:	9501      	str	r5, [sp, #4]
      _status = this->m_serPort->invokeSerial(_buffer);
    cb38:	a901      	add	r1, sp, #4
    cb3a:	6803      	ldr	r3, [r0, #0]
    cb3c:	695b      	ldr	r3, [r3, #20]
    cb3e:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cb40:	b928      	cbnz	r0, cb4e <Drv::OutputByteStreamReadyPort::invoke() const+0x3e>
    class ByteStreamReadyPortBuffer : public Fw::SerializeBufferBase {
    cb42:	a801      	add	r0, sp, #4
    cb44:	9501      	str	r5, [sp, #4]
    cb46:	f7f3 fd03 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    cb4a:	b005      	add	sp, #20
    cb4c:	bd30      	pop	{r4, r5, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cb4e:	4601      	mov	r1, r0
    cb50:	229a      	movs	r2, #154	; 0x9a
    cb52:	4807      	ldr	r0, [pc, #28]	; (cb70 <Drv::OutputByteStreamReadyPort::invoke() const+0x60>)
    cb54:	f7f4 fd68 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    cb58:	e7f3      	b.n	cb42 <Drv::OutputByteStreamReadyPort::invoke() const+0x32>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    cb5a:	2190      	movs	r1, #144	; 0x90
    cb5c:	4804      	ldr	r0, [pc, #16]	; (cb70 <Drv::OutputByteStreamReadyPort::invoke() const+0x60>)
    cb5e:	f7f4 fd55 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
    cb62:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    cb64:	2800      	cmp	r0, #0
    cb66:	d0e1      	beq.n	cb2c <Drv::OutputByteStreamReadyPort::invoke() const+0x1c>
    cb68:	e7d9      	b.n	cb1e <Drv::OutputByteStreamReadyPort::invoke() const+0xe>
    cb6a:	bf00      	nop
    cb6c:	200037d4 	.word	0x200037d4
    cb70:	20001024 	.word	0x20001024

0000cb74 <Drv::OutputByteStreamReadyPort::init()>:
    Fw::OutputPortBase::init();
    cb74:	f00b b8e6 	b.w	17d44 <Fw::OutputPortBase::init()>

0000cb78 <Drv::(anonymous namespace)::ByteStreamRecvPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputByteStreamRecvPort::SERIALIZED_SIZE;
        }
    cb78:	2010      	movs	r0, #16
    cb7a:	4770      	bx	lr

0000cb7c <Drv::(anonymous namespace)::ByteStreamRecvPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
    cb7c:	300c      	adds	r0, #12
    cb7e:	4770      	bx	lr

0000cb80 <Drv::(anonymous namespace)::ByteStreamRecvPortBuffer::~ByteStreamRecvPortBuffer()>:
    class ByteStreamRecvPortBuffer : public Fw::SerializeBufferBase {
    cb80:	4b03      	ldr	r3, [pc, #12]	; (cb90 <Drv::(anonymous namespace)::ByteStreamRecvPortBuffer::~ByteStreamRecvPortBuffer()+0x10>)
    cb82:	b510      	push	{r4, lr}
    cb84:	4604      	mov	r4, r0
    cb86:	6003      	str	r3, [r0, #0]
    cb88:	f7f3 fce2 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    cb8c:	4620      	mov	r0, r4
    cb8e:	bd10      	pop	{r4, pc}
    cb90:	200037b8 	.word	0x200037b8

0000cb94 <Drv::(anonymous namespace)::ByteStreamRecvPortBuffer::~ByteStreamRecvPortBuffer()>:
    cb94:	4b05      	ldr	r3, [pc, #20]	; (cbac <Drv::(anonymous namespace)::ByteStreamRecvPortBuffer::~ByteStreamRecvPortBuffer()+0x18>)
    cb96:	b510      	push	{r4, lr}
    cb98:	4604      	mov	r4, r0
    cb9a:	6003      	str	r3, [r0, #0]
    cb9c:	f7f3 fcd8 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    cba0:	211c      	movs	r1, #28
    cba2:	4620      	mov	r0, r4
    cba4:	f00c f894 	bl	18cd0 <operator delete(void*, unsigned int)>
    cba8:	4620      	mov	r0, r4
    cbaa:	bd10      	pop	{r4, pc}
    cbac:	200037b8 	.word	0x200037b8

0000cbb0 <Drv::OutputByteStreamRecvPort::~OutputByteStreamRecvPort()>:

  };

  //! Output ByteStreamRecv port
  //! Carries the received bytes stream driver
  class OutputByteStreamRecvPort :
    cbb0:	4b03      	ldr	r3, [pc, #12]	; (cbc0 <Drv::OutputByteStreamRecvPort::~OutputByteStreamRecvPort()+0x10>)
    cbb2:	b510      	push	{r4, lr}
    cbb4:	4604      	mov	r4, r0
    cbb6:	6003      	str	r3, [r0, #0]
    cbb8:	f00b f8a0 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    cbbc:	4620      	mov	r0, r4
    cbbe:	bd10      	pop	{r4, pc}
    cbc0:	200038a8 	.word	0x200038a8

0000cbc4 <Drv::OutputByteStreamRecvPort::~OutputByteStreamRecvPort()>:
    cbc4:	4b05      	ldr	r3, [pc, #20]	; (cbdc <Drv::OutputByteStreamRecvPort::~OutputByteStreamRecvPort()+0x18>)
    cbc6:	b510      	push	{r4, lr}
    cbc8:	4604      	mov	r4, r0
    cbca:	6003      	str	r3, [r0, #0]
    cbcc:	f00b f896 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    cbd0:	216c      	movs	r1, #108	; 0x6c
    cbd2:	4620      	mov	r0, r4
    cbd4:	f00c f87c 	bl	18cd0 <operator delete(void*, unsigned int)>
    cbd8:	4620      	mov	r0, r4
    cbda:	bd10      	pop	{r4, pc}
    cbdc:	200038a8 	.word	0x200038a8

0000cbe0 <Drv::InputByteStreamRecvPort::~InputByteStreamRecvPort()>:
  class InputByteStreamRecvPort :
    cbe0:	4b03      	ldr	r3, [pc, #12]	; (cbf0 <Drv::InputByteStreamRecvPort::~InputByteStreamRecvPort()+0x10>)
    cbe2:	b510      	push	{r4, lr}
    cbe4:	4604      	mov	r4, r0
    cbe6:	6003      	str	r3, [r0, #0]
    cbe8:	f00b f86a 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    cbec:	4620      	mov	r0, r4
    cbee:	bd10      	pop	{r4, pc}
    cbf0:	2000384c 	.word	0x2000384c

0000cbf4 <Drv::InputByteStreamRecvPort::~InputByteStreamRecvPort()>:
    cbf4:	4b05      	ldr	r3, [pc, #20]	; (cc0c <Drv::InputByteStreamRecvPort::~InputByteStreamRecvPort()+0x18>)
    cbf6:	b510      	push	{r4, lr}
    cbf8:	4604      	mov	r4, r0
    cbfa:	6003      	str	r3, [r0, #0]
    cbfc:	f00b f860 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    cc00:	2170      	movs	r1, #112	; 0x70
    cc02:	4620      	mov	r0, r4
    cc04:	f00c f864 	bl	18cd0 <operator delete(void*, unsigned int)>
    cc08:	4620      	mov	r0, r4
    cc0a:	bd10      	pop	{r4, pc}
    cc0c:	2000384c 	.word	0x2000384c

0000cc10 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputByteStreamRecvPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    cc10:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc12:	4605      	mov	r5, r0
    cc14:	b08d      	sub	sp, #52	; 0x34
    cc16:	460e      	mov	r6, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
    cc18:	f00b f91e 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
    cc1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d034      	beq.n	cc8c <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x7c>
    FW_ASSERT(this->m_func != nullptr);
    cc22:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    cc24:	b36b      	cbz	r3, cc82 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x72>

    Fw::Buffer recvBuffer;
    cc26:	a803      	add	r0, sp, #12
    cc28:	f008 fbe8 	bl	153fc <Fw::Buffer::Buffer()>
    _status = _buffer.deserialize(recvBuffer);
    cc2c:	a903      	add	r1, sp, #12
    cc2e:	4630      	mov	r0, r6
    cc30:	f7f4 f950 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    cc34:	4604      	mov	r4, r0
    cc36:	b160      	cbz	r0, cc52 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x42>
    cc38:	4a17      	ldr	r2, [pc, #92]	; (cc98 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x88>)
    cc3a:	a804      	add	r0, sp, #16
    cc3c:	4b17      	ldr	r3, [pc, #92]	; (cc9c <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x8c>)
    cc3e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    cc42:	f7f3 fc85 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    cc46:	a803      	add	r0, sp, #12
    cc48:	f7f3 fc78 	bl	53c <Fw::Serializable::~Serializable()>
    }

    this->m_func(this->m_comp, this->m_portNum, recvBuffer, recvStatus);

    return Fw::FW_SERIALIZE_OK;
  }
    cc4c:	4620      	mov	r0, r4
    cc4e:	b00d      	add	sp, #52	; 0x34
    cc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
    cc52:	4f13      	ldr	r7, [pc, #76]	; (cca0 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x90>)
    cc54:	a801      	add	r0, sp, #4
    cc56:	f7f3 fc6b 	bl	530 <Fw::Serializable::Serializable()>
    _status = _buffer.deserialize(recvStatus);
    cc5a:	4630      	mov	r0, r6
    cc5c:	a901      	add	r1, sp, #4
        this->e = RECV_OK;
    cc5e:	f88d 4008 	strb.w	r4, [sp, #8]
      {
    cc62:	9701      	str	r7, [sp, #4]
    cc64:	f7f4 f936 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    cc68:	4604      	mov	r4, r0
    cc6a:	b928      	cbnz	r0, cc78 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x68>
    this->m_func(this->m_comp, this->m_portNum, recvBuffer, recvStatus);
    cc6c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
    cc6e:	ab01      	add	r3, sp, #4
    cc70:	aa03      	add	r2, sp, #12
    cc72:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
    cc76:	47b0      	blx	r6
  class RecvStatus :
    cc78:	a801      	add	r0, sp, #4
    cc7a:	9701      	str	r7, [sp, #4]
    cc7c:	f7f3 fc5e 	bl	53c <Fw::Serializable::~Serializable()>
    cc80:	e7da      	b.n	cc38 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
    cc82:	2167      	movs	r1, #103	; 0x67
    cc84:	4807      	ldr	r0, [pc, #28]	; (cca4 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x94>)
    cc86:	f7f4 fcc1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    cc8a:	e7cc      	b.n	cc26 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x16>
    FW_ASSERT(this->m_comp != nullptr);
    cc8c:	2166      	movs	r1, #102	; 0x66
    cc8e:	4805      	ldr	r0, [pc, #20]	; (cca4 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x94>)
    cc90:	f7f4 fcbc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    cc94:	e7c5      	b.n	cc22 <Drv::InputByteStreamRecvPort::invokeSerial(Fw::SerializeBufferBase&)+0x12>
    cc96:	bf00      	nop
    cc98:	200032c0 	.word	0x200032c0
    cc9c:	20003214 	.word	0x20003214
    cca0:	20003780 	.word	0x20003780
    cca4:	20000f6c 	.word	0x20000f6c

0000cca8 <Drv::InputByteStreamRecvPort::InputByteStreamRecvPort()>:
  InputByteStreamRecvPort ::
    cca8:	b510      	push	{r4, lr}
    ccaa:	4604      	mov	r4, r0
      m_func(nullptr)
    ccac:	f00a fff8 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    ccb0:	4a02      	ldr	r2, [pc, #8]	; (ccbc <Drv::InputByteStreamRecvPort::InputByteStreamRecvPort()+0x14>)
    ccb2:	2300      	movs	r3, #0
  }
    ccb4:	4620      	mov	r0, r4
      m_func(nullptr)
    ccb6:	6022      	str	r2, [r4, #0]
    ccb8:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    ccba:	bd10      	pop	{r4, pc}
    ccbc:	2000384c 	.word	0x2000384c

0000ccc0 <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))>:
  {
    ccc0:	b570      	push	{r4, r5, r6, lr}
    ccc2:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    ccc4:	460d      	mov	r5, r1
  {
    ccc6:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    ccc8:	b121      	cbz	r1, ccd4 <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    ccca:	b14e      	cbz	r6, cce0 <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))+0x20>
    this->m_comp = callComp;
    cccc:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    ccce:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    ccd0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    ccd2:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    ccd4:	2143      	movs	r1, #67	; 0x43
    ccd6:	4806      	ldr	r0, [pc, #24]	; (ccf0 <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))+0x30>)
    ccd8:	f7f4 fc98 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    ccdc:	2e00      	cmp	r6, #0
    ccde:	d1f5      	bne.n	cccc <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))+0xc>
    cce0:	2144      	movs	r1, #68	; 0x44
    cce2:	4803      	ldr	r0, [pc, #12]	; (ccf0 <Drv::InputByteStreamRecvPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&, Drv::RecvStatus const&))+0x30>)
    cce4:	f7f4 fc92 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    cce8:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    ccea:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    ccec:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    ccee:	bd70      	pop	{r4, r5, r6, pc}
    ccf0:	20000f6c 	.word	0x20000f6c

0000ccf4 <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)>:
  {
    ccf4:	b570      	push	{r4, r5, r6, lr}
    ccf6:	4604      	mov	r4, r0
    ccf8:	b082      	sub	sp, #8
    ccfa:	460d      	mov	r5, r1
    ccfc:	9201      	str	r2, [sp, #4]
    this->trace();
    ccfe:	f00b f8ab 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    cd02:	6e62      	ldr	r2, [r4, #100]	; 0x64
    cd04:	9b01      	ldr	r3, [sp, #4]
    cd06:	b14a      	cbz	r2, cd1c <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
    cd08:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    cd0a:	b17e      	cbz	r6, cd2c <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)+0x38>
    return this->m_func(this->m_comp, this->m_portNum, recvBuffer, recvStatus);
    cd0c:	462a      	mov	r2, r5
    cd0e:	46b4      	mov	ip, r6
    cd10:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    cd14:	b002      	add	sp, #8
    cd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_func(this->m_comp, this->m_portNum, recvBuffer, recvStatus);
    cd1a:	4760      	bx	ip
    FW_ASSERT(this->m_comp != nullptr);
    cd1c:	2155      	movs	r1, #85	; 0x55
    cd1e:	4807      	ldr	r0, [pc, #28]	; (cd3c <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)+0x48>)
    cd20:	f7f4 fc74 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    cd24:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    cd26:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    cd28:	2e00      	cmp	r6, #0
    cd2a:	d1ef      	bne.n	cd0c <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)+0x18>
    cd2c:	2156      	movs	r1, #86	; 0x56
    cd2e:	4803      	ldr	r0, [pc, #12]	; (cd3c <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)+0x48>)
    cd30:	9301      	str	r3, [sp, #4]
    cd32:	f7f4 fc6b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, recvBuffer, recvStatus);
    cd36:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    cd38:	9b01      	ldr	r3, [sp, #4]
    cd3a:	e7e7      	b.n	cd0c <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)+0x18>
    cd3c:	20000f6c 	.word	0x20000f6c

0000cd40 <Drv::OutputByteStreamRecvPort::OutputByteStreamRecvPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputByteStreamRecvPort ::
    cd40:	b510      	push	{r4, lr}
    cd42:	4604      	mov	r4, r0
    OutputByteStreamRecvPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    cd44:	f00a fff2 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    cd48:	4a02      	ldr	r2, [pc, #8]	; (cd54 <Drv::OutputByteStreamRecvPort::OutputByteStreamRecvPort()+0x14>)
    cd4a:	2300      	movs	r3, #0
  {

  }
    cd4c:	4620      	mov	r0, r4
      m_port(nullptr)
    cd4e:	6022      	str	r2, [r4, #0]
    cd50:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    cd52:	bd10      	pop	{r4, pc}
    cd54:	200038a8 	.word	0x200038a8

0000cd58 <Drv::OutputByteStreamRecvPort::addCallPort(Drv::InputByteStreamRecvPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputByteStreamRecvPort ::
    addCallPort(InputByteStreamRecvPort* callPort)
  {
    cd58:	b538      	push	{r3, r4, r5, lr}
    cd5a:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
    cd5c:	460d      	mov	r5, r1
    cd5e:	b121      	cbz	r1, cd6a <Drv::OutputByteStreamRecvPort::addCallPort(Drv::InputByteStreamRecvPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
    cd60:	2300      	movs	r3, #0
    this->m_port = callPort;
    cd62:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
    cd64:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
    cd66:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
    cd68:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
    cd6a:	2191      	movs	r1, #145	; 0x91
    cd6c:	4801      	ldr	r0, [pc, #4]	; (cd74 <Drv::OutputByteStreamRecvPort::addCallPort(Drv::InputByteStreamRecvPort*)+0x1c>)
    cd6e:	f7f4 fc4d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    cd72:	e7f5      	b.n	cd60 <Drv::OutputByteStreamRecvPort::addCallPort(Drv::InputByteStreamRecvPort*)+0x8>
    cd74:	20000f6c 	.word	0x20000f6c

0000cd78 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const>:
  void OutputByteStreamRecvPort ::
    invoke(
        Fw::Buffer& recvBuffer,
        const Drv::RecvStatus& recvStatus
    ) const
  {
    cd78:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd7a:	4604      	mov	r4, r0
    cd7c:	b089      	sub	sp, #36	; 0x24
    cd7e:	460e      	mov	r6, r1
    cd80:	4615      	mov	r5, r2
#if FW_PORT_TRACING == 1
    this->trace();
    cd82:	f00b f869 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    cd86:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    cd88:	b130      	cbz	r0, cd98 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x20>

    if (this->m_port != nullptr) {
      this->m_port->invoke(recvBuffer, recvStatus);
    cd8a:	462a      	mov	r2, r5
    cd8c:	4631      	mov	r1, r6
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(recvBuffer, recvStatus);
#endif
  }
    cd8e:	b009      	add	sp, #36	; 0x24
    cd90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      this->m_port->invoke(recvBuffer, recvStatus);
    cd94:	f7ff bfae 	b.w	ccf4 <Drv::InputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    cd98:	6e63      	ldr	r3, [r4, #100]	; 0x64
    cd9a:	b363      	cbz	r3, cdf6 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x7e>
    class ByteStreamRecvPortBuffer : public Fw::SerializeBufferBase {
    cd9c:	a801      	add	r0, sp, #4
    cd9e:	4f1a      	ldr	r7, [pc, #104]	; (ce08 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x90>)
    cda0:	f7f3 fbce 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(recvBuffer);
    cda4:	4631      	mov	r1, r6
    cda6:	a801      	add	r0, sp, #4
    class ByteStreamRecvPortBuffer : public Fw::SerializeBufferBase {
    cda8:	9701      	str	r7, [sp, #4]
      _status = _buffer.serialize(recvBuffer);
    cdaa:	f7f3 fea9 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cdae:	b980      	cbnz	r0, cdd2 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x5a>
      _status = _buffer.serialize(recvStatus);
    cdb0:	4629      	mov	r1, r5
    cdb2:	a801      	add	r0, sp, #4
    cdb4:	f7f3 fea4 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cdb8:	b9b8      	cbnz	r0, cdea <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x72>
      _status = this->m_serPort->invokeSerial(_buffer);
    cdba:	6e60      	ldr	r0, [r4, #100]	; 0x64
    cdbc:	a901      	add	r1, sp, #4
    cdbe:	6803      	ldr	r3, [r0, #0]
    cdc0:	695b      	ldr	r3, [r3, #20]
    cdc2:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cdc4:	b958      	cbnz	r0, cdde <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x66>
    class ByteStreamRecvPortBuffer : public Fw::SerializeBufferBase {
    cdc6:	a801      	add	r0, sp, #4
    cdc8:	9701      	str	r7, [sp, #4]
    cdca:	f7f3 fbc1 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    cdce:	b009      	add	sp, #36	; 0x24
    cdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cdd2:	4601      	mov	r1, r0
    cdd4:	22b0      	movs	r2, #176	; 0xb0
    cdd6:	480d      	ldr	r0, [pc, #52]	; (ce0c <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x94>)
    cdd8:	f7f4 fc26 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    cddc:	e7e8      	b.n	cdb0 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x38>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cdde:	4601      	mov	r1, r0
    cde0:	22b6      	movs	r2, #182	; 0xb6
    cde2:	480a      	ldr	r0, [pc, #40]	; (ce0c <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x94>)
    cde4:	f7f4 fc20 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    cde8:	e7ed      	b.n	cdc6 <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x4e>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    cdea:	4601      	mov	r1, r0
    cdec:	22b3      	movs	r2, #179	; 0xb3
    cdee:	4807      	ldr	r0, [pc, #28]	; (ce0c <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x94>)
    cdf0:	f7f4 fc1a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    cdf4:	e7e1      	b.n	cdba <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x42>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    cdf6:	21a6      	movs	r1, #166	; 0xa6
    cdf8:	4804      	ldr	r0, [pc, #16]	; (ce0c <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x94>)
    cdfa:	f7f4 fc07 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
    cdfe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    ce00:	2800      	cmp	r0, #0
    ce02:	d0cb      	beq.n	cd9c <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x24>
    ce04:	e7c1      	b.n	cd8a <Drv::OutputByteStreamRecvPort::invoke(Fw::Buffer&, Drv::RecvStatus const&) const+0x12>
    ce06:	bf00      	nop
    ce08:	200037b8 	.word	0x200037b8
    ce0c:	20000f6c 	.word	0x20000f6c

0000ce10 <Drv::InputByteStreamRecvPort::init()>:
    Fw::InputPortBase::init();
    ce10:	f00a bf6e 	b.w	17cf0 <Fw::InputPortBase::init()>

0000ce14 <Drv::OutputByteStreamRecvPort::init()>:
    Fw::OutputPortBase::init();
    ce14:	f00a bf96 	b.w	17d44 <Fw::OutputPortBase::init()>

0000ce18 <Drv::InputByteStreamSendPort::invokeSerial(Fw::SerializeBufferBase&)>:
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    // For ports with a return type, invokeSerial is not used
    (void) _buffer;

    FW_ASSERT(0);
    ce18:	2142      	movs	r1, #66	; 0x42
    ce1a:	4803      	ldr	r0, [pc, #12]	; (ce28 <Drv::InputByteStreamSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x10>)
  {
    ce1c:	b508      	push	{r3, lr}
    FW_ASSERT(0);
    ce1e:	f7f4 fbf5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return Fw::FW_SERIALIZE_OK;
  }
    ce22:	2000      	movs	r0, #0
    ce24:	bd08      	pop	{r3, pc}
    ce26:	bf00      	nop
    ce28:	20000fc8 	.word	0x20000fc8

0000ce2c <Drv::OutputByteStreamSendPort::~OutputByteStreamSendPort()>:

  };

  //! Output ByteStreamSend port
  //! Send data out through the byte stream
  class OutputByteStreamSendPort :
    ce2c:	4b03      	ldr	r3, [pc, #12]	; (ce3c <Drv::OutputByteStreamSendPort::~OutputByteStreamSendPort()+0x10>)
    ce2e:	b510      	push	{r4, lr}
    ce30:	4604      	mov	r4, r0
    ce32:	6003      	str	r3, [r0, #0]
    ce34:	f00a ff62 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    ce38:	4620      	mov	r0, r4
    ce3a:	bd10      	pop	{r4, pc}
    ce3c:	200038c4 	.word	0x200038c4

0000ce40 <Drv::OutputByteStreamSendPort::~OutputByteStreamSendPort()>:
    ce40:	4b05      	ldr	r3, [pc, #20]	; (ce58 <Drv::OutputByteStreamSendPort::~OutputByteStreamSendPort()+0x18>)
    ce42:	b510      	push	{r4, lr}
    ce44:	4604      	mov	r4, r0
    ce46:	6003      	str	r3, [r0, #0]
    ce48:	f00a ff58 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    ce4c:	216c      	movs	r1, #108	; 0x6c
    ce4e:	4620      	mov	r0, r4
    ce50:	f00b ff3e 	bl	18cd0 <operator delete(void*, unsigned int)>
    ce54:	4620      	mov	r0, r4
    ce56:	bd10      	pop	{r4, pc}
    ce58:	200038c4 	.word	0x200038c4

0000ce5c <Drv::InputByteStreamSendPort::~InputByteStreamSendPort()>:
  class InputByteStreamSendPort :
    ce5c:	4b03      	ldr	r3, [pc, #12]	; (ce6c <Drv::InputByteStreamSendPort::~InputByteStreamSendPort()+0x10>)
    ce5e:	b510      	push	{r4, lr}
    ce60:	4604      	mov	r4, r0
    ce62:	6003      	str	r3, [r0, #0]
    ce64:	f00a ff2c 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    ce68:	4620      	mov	r0, r4
    ce6a:	bd10      	pop	{r4, pc}
    ce6c:	2000386c 	.word	0x2000386c

0000ce70 <Drv::InputByteStreamSendPort::~InputByteStreamSendPort()>:
    ce70:	4b05      	ldr	r3, [pc, #20]	; (ce88 <Drv::InputByteStreamSendPort::~InputByteStreamSendPort()+0x18>)
    ce72:	b510      	push	{r4, lr}
    ce74:	4604      	mov	r4, r0
    ce76:	6003      	str	r3, [r0, #0]
    ce78:	f00a ff22 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    ce7c:	2170      	movs	r1, #112	; 0x70
    ce7e:	4620      	mov	r0, r4
    ce80:	f00b ff26 	bl	18cd0 <operator delete(void*, unsigned int)>
    ce84:	4620      	mov	r0, r4
    ce86:	bd10      	pop	{r4, pc}
    ce88:	2000386c 	.word	0x2000386c

0000ce8c <Drv::InputByteStreamSendPort::InputByteStreamSendPort()>:
  InputByteStreamSendPort ::
    ce8c:	b510      	push	{r4, lr}
    ce8e:	4604      	mov	r4, r0
      m_func(nullptr)
    ce90:	f00a ff06 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    ce94:	4a02      	ldr	r2, [pc, #8]	; (cea0 <Drv::InputByteStreamSendPort::InputByteStreamSendPort()+0x14>)
    ce96:	2300      	movs	r3, #0
  }
    ce98:	4620      	mov	r0, r4
      m_func(nullptr)
    ce9a:	6022      	str	r2, [r4, #0]
    ce9c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    ce9e:	bd10      	pop	{r4, pc}
    cea0:	2000386c 	.word	0x2000386c

0000cea4 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))>:
  {
    cea4:	b570      	push	{r4, r5, r6, lr}
    cea6:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    cea8:	460d      	mov	r5, r1
  {
    ceaa:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    ceac:	b121      	cbz	r1, ceb8 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    ceae:	b14e      	cbz	r6, cec4 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x20>
    this->m_comp = callComp;
    ceb0:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    ceb2:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    ceb4:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    ceb6:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    ceb8:	2125      	movs	r1, #37	; 0x25
    ceba:	4806      	ldr	r0, [pc, #24]	; (ced4 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x30>)
    cebc:	f7f4 fba6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    cec0:	2e00      	cmp	r6, #0
    cec2:	d1f5      	bne.n	ceb0 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0xc>
    cec4:	2126      	movs	r1, #38	; 0x26
    cec6:	4803      	ldr	r0, [pc, #12]	; (ced4 <Drv::InputByteStreamSendPort::addCallComp(Fw::PassiveComponentBase*, Drv::SendStatus (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x30>)
    cec8:	f7f4 fba0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    cecc:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    cece:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    ced0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    ced2:	bd70      	pop	{r4, r5, r6, pc}
    ced4:	20000fc8 	.word	0x20000fc8

0000ced8 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)>:
  {
    ced8:	b570      	push	{r4, r5, r6, lr}
    ceda:	460c      	mov	r4, r1
    cedc:	b082      	sub	sp, #8
    cede:	4605      	mov	r5, r0
    this->trace();
    cee0:	4608      	mov	r0, r1
  {
    cee2:	9201      	str	r2, [sp, #4]
    this->trace();
    cee4:	f00a ffb8 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    cee8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ceea:	9b01      	ldr	r3, [sp, #4]
    ceec:	b142      	cbz	r2, cf00 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
    ceee:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    cef0:	b176      	cbz	r6, cf10 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)+0x38>
    return this->m_func(this->m_comp, this->m_portNum, sendBuffer);
    cef2:	4628      	mov	r0, r5
    cef4:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    cef8:	47b0      	blx	r6
  }
    cefa:	4628      	mov	r0, r5
    cefc:	b002      	add	sp, #8
    cefe:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
    cf00:	2134      	movs	r1, #52	; 0x34
    cf02:	4807      	ldr	r0, [pc, #28]	; (cf20 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)+0x48>)
    cf04:	f7f4 fb82 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    cf08:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    cf0a:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    cf0c:	2e00      	cmp	r6, #0
    cf0e:	d1f0      	bne.n	cef2 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)+0x1a>
    cf10:	2135      	movs	r1, #53	; 0x35
    cf12:	4803      	ldr	r0, [pc, #12]	; (cf20 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)+0x48>)
    cf14:	9301      	str	r3, [sp, #4]
    cf16:	f7f4 fb79 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, sendBuffer);
    cf1a:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	e7e8      	b.n	cef2 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)+0x1a>
    cf20:	20000fc8 	.word	0x20000fc8

0000cf24 <Drv::OutputByteStreamSendPort::OutputByteStreamSendPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputByteStreamSendPort ::
    cf24:	b510      	push	{r4, lr}
    cf26:	4604      	mov	r4, r0
    OutputByteStreamSendPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    cf28:	f00a ff00 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    cf2c:	4a02      	ldr	r2, [pc, #8]	; (cf38 <Drv::OutputByteStreamSendPort::OutputByteStreamSendPort()+0x14>)
    cf2e:	2300      	movs	r3, #0
  {

  }
    cf30:	4620      	mov	r0, r4
      m_port(nullptr)
    cf32:	6022      	str	r2, [r4, #0]
    cf34:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    cf36:	bd10      	pop	{r4, pc}
    cf38:	200038c4 	.word	0x200038c4

0000cf3c <Drv::OutputByteStreamSendPort::addCallPort(Drv::InputByteStreamSendPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputByteStreamSendPort ::
    addCallPort(InputByteStreamSendPort* callPort)
  {
    cf3c:	b538      	push	{r3, r4, r5, lr}
    cf3e:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
    cf40:	460d      	mov	r5, r1
    cf42:	b121      	cbz	r1, cf4e <Drv::OutputByteStreamSendPort::addCallPort(Drv::InputByteStreamSendPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
    cf44:	2300      	movs	r3, #0
    this->m_port = callPort;
    cf46:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
    cf48:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
    cf4a:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
    cf4c:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
    cf4e:	215d      	movs	r1, #93	; 0x5d
    cf50:	4801      	ldr	r0, [pc, #4]	; (cf58 <Drv::OutputByteStreamSendPort::addCallPort(Drv::InputByteStreamSendPort*)+0x1c>)
    cf52:	f7f4 fb5b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    cf56:	e7f5      	b.n	cf44 <Drv::OutputByteStreamSendPort::addCallPort(Drv::InputByteStreamSendPort*)+0x8>
    cf58:	20000fc8 	.word	0x20000fc8

0000cf5c <Drv::OutputByteStreamSendPort::invoke(Fw::Buffer&) const>:

  Drv::SendStatus OutputByteStreamSendPort ::
    invoke(Fw::Buffer& sendBuffer) const
  {
    cf5c:	b530      	push	{r4, r5, lr}
    cf5e:	460c      	mov	r4, r1
    cf60:	b083      	sub	sp, #12
    cf62:	4605      	mov	r5, r0
#if FW_PORT_TRACING == 1
    this->trace();
    cf64:	4608      	mov	r0, r1
  {
    cf66:	9201      	str	r2, [sp, #4]
    this->trace();
    cf68:	f00a ff76 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_port != nullptr);
    cf6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    cf6e:	9a01      	ldr	r2, [sp, #4]
    cf70:	b129      	cbz	r1, cf7e <Drv::OutputByteStreamSendPort::invoke(Fw::Buffer&) const+0x22>
    return this->m_port->invoke(sendBuffer);
    cf72:	4628      	mov	r0, r5
    cf74:	f7ff ffb0 	bl	ced8 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)>
  }
    cf78:	4628      	mov	r0, r5
    cf7a:	b003      	add	sp, #12
    cf7c:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_port != nullptr);
    cf7e:	216e      	movs	r1, #110	; 0x6e
    cf80:	4805      	ldr	r0, [pc, #20]	; (cf98 <Drv::OutputByteStreamSendPort::invoke(Fw::Buffer&) const+0x3c>)
    cf82:	f7f4 fb43 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_port->invoke(sendBuffer);
    cf86:	4628      	mov	r0, r5
    cf88:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    cf8a:	9a01      	ldr	r2, [sp, #4]
    cf8c:	f7ff ffa4 	bl	ced8 <Drv::InputByteStreamSendPort::invoke(Fw::Buffer&)>
  }
    cf90:	4628      	mov	r0, r5
    cf92:	b003      	add	sp, #12
    cf94:	bd30      	pop	{r4, r5, pc}
    cf96:	bf00      	nop
    cf98:	20000fc8 	.word	0x20000fc8

0000cf9c <Drv::InputByteStreamSendPort::init()>:
    Fw::InputPortBase::init();
    cf9c:	f00a bea8 	b.w	17cf0 <Fw::InputPortBase::init()>

0000cfa0 <Drv::OutputByteStreamSendPort::init()>:
    Fw::OutputPortBase::init();
    cfa0:	f00a bed0 	b.w	17d44 <Fw::OutputPortBase::init()>

0000cfa4 <Drv::PollStatus::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= POLL_OK) && (e <= POLL_ERROR));
  }

  Fw::SerializeStatus PollStatus ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    cfa4:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
    cfa6:	7901      	ldrb	r1, [r0, #4]
    cfa8:	4618      	mov	r0, r3
    cfaa:	f7f3 bbbd 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
    cfae:	bf00      	nop

0000cfb0 <Drv::PollStatus::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus PollStatus ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    cfb0:	b510      	push	{r4, lr}
    cfb2:	460a      	mov	r2, r1
    cfb4:	b082      	sub	sp, #8
    cfb6:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    cfb8:	a901      	add	r1, sp, #4
    cfba:	4610      	mov	r0, r2
    cfbc:	f7f3 fe8e 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    cfc0:	b938      	cbnz	r0, cfd2 <Drv::PollStatus::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
    cfc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
    cfc6:	2a02      	cmp	r2, #2
      this->e = static_cast<T>(es);
    cfc8:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
    cfca:	bf94      	ite	ls
    cfcc:	2300      	movls	r3, #0
    cfce:	2301      	movhi	r3, #1
    cfd0:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
    cfd2:	b002      	add	sp, #8
    cfd4:	bd10      	pop	{r4, pc}
    cfd6:	bf00      	nop

0000cfd8 <Drv::PollStatus::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void PollStatus ::
    toString(Fw::StringBase& sb) const
  {
    cfd8:	b570      	push	{r4, r5, r6, lr}
    cfda:	b0a2      	sub	sp, #136	; 0x88
    cfdc:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
    cfde:	4e17      	ldr	r6, [pc, #92]	; (d03c <Drv::PollStatus::toString(Fw::StringBase&) const+0x64>)
    cfe0:	460d      	mov	r5, r1
    cfe2:	4668      	mov	r0, sp
    cfe4:	f7f4 f91c 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    cfe8:	4915      	ldr	r1, [pc, #84]	; (d040 <Drv::PollStatus::toString(Fw::StringBase&) const+0x68>)
    cfea:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
    cfec:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    cfee:	f7f4 f97f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
    cff2:	7923      	ldrb	r3, [r4, #4]
    cff4:	2b01      	cmp	r3, #1
    cff6:	d012      	beq.n	d01e <Drv::PollStatus::toString(Fw::StringBase&) const+0x46>
    cff8:	2b02      	cmp	r3, #2
    cffa:	d01a      	beq.n	d032 <Drv::PollStatus::toString(Fw::StringBase&) const+0x5a>
    cffc:	b1a3      	cbz	r3, d028 <Drv::PollStatus::toString(Fw::StringBase&) const+0x50>
    cffe:	4911      	ldr	r1, [pc, #68]	; (d044 <Drv::PollStatus::toString(Fw::StringBase&) const+0x6c>)
    d000:	4668      	mov	r0, sp
    d002:	f7f4 f975 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
    d006:	7923      	ldrb	r3, [r4, #4]
    d008:	aa01      	add	r2, sp, #4
    d00a:	490f      	ldr	r1, [pc, #60]	; (d048 <Drv::PollStatus::toString(Fw::StringBase&) const+0x70>)
    d00c:	4628      	mov	r0, r5
    d00e:	f7f4 f93d 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
    d012:	4668      	mov	r0, sp
    d014:	9600      	str	r6, [sp, #0]
    d016:	f7f4 f90d 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    d01a:	b022      	add	sp, #136	; 0x88
    d01c:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
    d01e:	490b      	ldr	r1, [pc, #44]	; (d04c <Drv::PollStatus::toString(Fw::StringBase&) const+0x74>)
    d020:	4668      	mov	r0, sp
    d022:	f7f4 f965 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d026:	e7ee      	b.n	d006 <Drv::PollStatus::toString(Fw::StringBase&) const+0x2e>
        (void)StringBase::operator=(src);
    d028:	4909      	ldr	r1, [pc, #36]	; (d050 <Drv::PollStatus::toString(Fw::StringBase&) const+0x78>)
    d02a:	4668      	mov	r0, sp
    d02c:	f7f4 f960 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d030:	e7e9      	b.n	d006 <Drv::PollStatus::toString(Fw::StringBase&) const+0x2e>
        (void)StringBase::operator=(src);
    d032:	4908      	ldr	r1, [pc, #32]	; (d054 <Drv::PollStatus::toString(Fw::StringBase&) const+0x7c>)
    d034:	4668      	mov	r0, sp
    d036:	f7f4 f95b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d03a:	e7e4      	b.n	d006 <Drv::PollStatus::toString(Fw::StringBase&) const+0x2e>
    d03c:	200032dc 	.word	0x200032dc
    d040:	20001d2c 	.word	0x20001d2c
    d044:	20002464 	.word	0x20002464
    d048:	20002470 	.word	0x20002470
    d04c:	20002484 	.word	0x20002484
    d050:	2000247c 	.word	0x2000247c
    d054:	20002490 	.word	0x20002490

0000d058 <Drv::PollStatus::~PollStatus()>:
    d058:	4b03      	ldr	r3, [pc, #12]	; (d068 <Drv::PollStatus::~PollStatus()+0x10>)
    d05a:	b510      	push	{r4, lr}
    d05c:	4604      	mov	r4, r0
    d05e:	6003      	str	r3, [r0, #0]
    d060:	f7f3 fa6c 	bl	53c <Fw::Serializable::~Serializable()>
    d064:	4620      	mov	r0, r4
    d066:	bd10      	pop	{r4, pc}
    d068:	20003764 	.word	0x20003764

0000d06c <Drv::PollStatus::~PollStatus()>:
    d06c:	4b05      	ldr	r3, [pc, #20]	; (d084 <Drv::PollStatus::~PollStatus()+0x18>)
    d06e:	b510      	push	{r4, lr}
    d070:	4604      	mov	r4, r0
    d072:	6003      	str	r3, [r0, #0]
    d074:	f7f3 fa62 	bl	53c <Fw::Serializable::~Serializable()>
    d078:	2108      	movs	r1, #8
    d07a:	4620      	mov	r0, r4
    d07c:	f00b fe28 	bl	18cd0 <operator delete(void*, unsigned int)>
    d080:	4620      	mov	r0, r4
    d082:	bd10      	pop	{r4, pc}
    d084:	20003764 	.word	0x20003764

0000d088 <Drv::RecvStatus::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= RECV_OK) && (e <= RECV_ERROR));
  }

  Fw::SerializeStatus RecvStatus ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    d088:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
    d08a:	7901      	ldrb	r1, [r0, #4]
    d08c:	4618      	mov	r0, r3
    d08e:	f7f3 bb4b 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
    d092:	bf00      	nop

0000d094 <Drv::RecvStatus::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus RecvStatus ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    d094:	b510      	push	{r4, lr}
    d096:	460a      	mov	r2, r1
    d098:	b082      	sub	sp, #8
    d09a:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    d09c:	a901      	add	r1, sp, #4
    d09e:	4610      	mov	r0, r2
    d0a0:	f7f3 fe1c 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    d0a4:	b938      	cbnz	r0, d0b6 <Drv::RecvStatus::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
    d0a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
    d0aa:	2a02      	cmp	r2, #2
      this->e = static_cast<T>(es);
    d0ac:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
    d0ae:	bf94      	ite	ls
    d0b0:	2300      	movls	r3, #0
    d0b2:	2301      	movhi	r3, #1
    d0b4:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
    d0b6:	b002      	add	sp, #8
    d0b8:	bd10      	pop	{r4, pc}
    d0ba:	bf00      	nop

0000d0bc <Drv::RecvStatus::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void RecvStatus ::
    toString(Fw::StringBase& sb) const
  {
    d0bc:	b570      	push	{r4, r5, r6, lr}
    d0be:	b0a2      	sub	sp, #136	; 0x88
    d0c0:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
    d0c2:	4e17      	ldr	r6, [pc, #92]	; (d120 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x64>)
    d0c4:	460d      	mov	r5, r1
    d0c6:	4668      	mov	r0, sp
    d0c8:	f7f4 f8aa 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    d0cc:	4915      	ldr	r1, [pc, #84]	; (d124 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x68>)
    d0ce:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
    d0d0:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    d0d2:	f7f4 f90d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
    d0d6:	7923      	ldrb	r3, [r4, #4]
    d0d8:	2b01      	cmp	r3, #1
    d0da:	d012      	beq.n	d102 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x46>
    d0dc:	2b02      	cmp	r3, #2
    d0de:	d01a      	beq.n	d116 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x5a>
    d0e0:	b1a3      	cbz	r3, d10c <Drv::RecvStatus::toString(Fw::StringBase&) const+0x50>
    d0e2:	4911      	ldr	r1, [pc, #68]	; (d128 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x6c>)
    d0e4:	4668      	mov	r0, sp
    d0e6:	f7f4 f903 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
    d0ea:	7923      	ldrb	r3, [r4, #4]
    d0ec:	aa01      	add	r2, sp, #4
    d0ee:	490f      	ldr	r1, [pc, #60]	; (d12c <Drv::RecvStatus::toString(Fw::StringBase&) const+0x70>)
    d0f0:	4628      	mov	r0, r5
    d0f2:	f7f4 f8cb 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
    d0f6:	4668      	mov	r0, sp
    d0f8:	9600      	str	r6, [sp, #0]
    d0fa:	f7f4 f89b 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    d0fe:	b022      	add	sp, #136	; 0x88
    d100:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
    d102:	490b      	ldr	r1, [pc, #44]	; (d130 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x74>)
    d104:	4668      	mov	r0, sp
    d106:	f7f4 f8f3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d10a:	e7ee      	b.n	d0ea <Drv::RecvStatus::toString(Fw::StringBase&) const+0x2e>
        (void)StringBase::operator=(src);
    d10c:	4909      	ldr	r1, [pc, #36]	; (d134 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x78>)
    d10e:	4668      	mov	r0, sp
    d110:	f7f4 f8ee 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d114:	e7e9      	b.n	d0ea <Drv::RecvStatus::toString(Fw::StringBase&) const+0x2e>
        (void)StringBase::operator=(src);
    d116:	4908      	ldr	r1, [pc, #32]	; (d138 <Drv::RecvStatus::toString(Fw::StringBase&) const+0x7c>)
    d118:	4668      	mov	r0, sp
    d11a:	f7f4 f8e9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d11e:	e7e4      	b.n	d0ea <Drv::RecvStatus::toString(Fw::StringBase&) const+0x2e>
    d120:	200032dc 	.word	0x200032dc
    d124:	20001d2c 	.word	0x20001d2c
    d128:	20002464 	.word	0x20002464
    d12c:	20002470 	.word	0x20002470
    d130:	200024a4 	.word	0x200024a4
    d134:	2000249c 	.word	0x2000249c
    d138:	200024b4 	.word	0x200024b4

0000d13c <Drv::RecvStatus::~RecvStatus()>:
    d13c:	4b03      	ldr	r3, [pc, #12]	; (d14c <Drv::RecvStatus::~RecvStatus()+0x10>)
    d13e:	b510      	push	{r4, lr}
    d140:	4604      	mov	r4, r0
    d142:	6003      	str	r3, [r0, #0]
    d144:	f7f3 f9fa 	bl	53c <Fw::Serializable::~Serializable()>
    d148:	4620      	mov	r0, r4
    d14a:	bd10      	pop	{r4, pc}
    d14c:	20003780 	.word	0x20003780

0000d150 <Drv::RecvStatus::~RecvStatus()>:
    d150:	4b05      	ldr	r3, [pc, #20]	; (d168 <Drv::RecvStatus::~RecvStatus()+0x18>)
    d152:	b510      	push	{r4, lr}
    d154:	4604      	mov	r4, r0
    d156:	6003      	str	r3, [r0, #0]
    d158:	f7f3 f9f0 	bl	53c <Fw::Serializable::~Serializable()>
    d15c:	2108      	movs	r1, #8
    d15e:	4620      	mov	r0, r4
    d160:	f00b fdb6 	bl	18cd0 <operator delete(void*, unsigned int)>
    d164:	4620      	mov	r0, r4
    d166:	bd10      	pop	{r4, pc}
    d168:	20003780 	.word	0x20003780

0000d16c <Drv::SendStatus::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= SEND_OK) && (e <= SEND_ERROR));
  }

  Fw::SerializeStatus SendStatus ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    d16c:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
    d16e:	7901      	ldrb	r1, [r0, #4]
    d170:	4618      	mov	r0, r3
    d172:	f7f3 bad9 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
    d176:	bf00      	nop

0000d178 <Drv::SendStatus::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus SendStatus ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    d178:	b510      	push	{r4, lr}
    d17a:	460a      	mov	r2, r1
    d17c:	b082      	sub	sp, #8
    d17e:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    d180:	a901      	add	r1, sp, #4
    d182:	4610      	mov	r0, r2
    d184:	f7f3 fdaa 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
    d188:	b938      	cbnz	r0, d19a <Drv::SendStatus::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
    d18a:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
    d18e:	2a02      	cmp	r2, #2
      this->e = static_cast<T>(es);
    d190:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
    d192:	bf94      	ite	ls
    d194:	2300      	movls	r3, #0
    d196:	2301      	movhi	r3, #1
    d198:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
    d19a:	b002      	add	sp, #8
    d19c:	bd10      	pop	{r4, pc}
    d19e:	bf00      	nop

0000d1a0 <Drv::SendStatus::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void SendStatus ::
    toString(Fw::StringBase& sb) const
  {
    d1a0:	b570      	push	{r4, r5, r6, lr}
    d1a2:	b0a2      	sub	sp, #136	; 0x88
    d1a4:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
    d1a6:	4e17      	ldr	r6, [pc, #92]	; (d204 <Drv::SendStatus::toString(Fw::StringBase&) const+0x64>)
    d1a8:	460d      	mov	r5, r1
    d1aa:	4668      	mov	r0, sp
    d1ac:	f7f4 f838 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    d1b0:	4915      	ldr	r1, [pc, #84]	; (d208 <Drv::SendStatus::toString(Fw::StringBase&) const+0x68>)
    d1b2:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
    d1b4:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    d1b6:	f7f4 f89b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
    d1ba:	7923      	ldrb	r3, [r4, #4]
    d1bc:	2b01      	cmp	r3, #1
    d1be:	d012      	beq.n	d1e6 <Drv::SendStatus::toString(Fw::StringBase&) const+0x46>
    d1c0:	2b02      	cmp	r3, #2
    d1c2:	d01a      	beq.n	d1fa <Drv::SendStatus::toString(Fw::StringBase&) const+0x5a>
    d1c4:	b1a3      	cbz	r3, d1f0 <Drv::SendStatus::toString(Fw::StringBase&) const+0x50>
    d1c6:	4911      	ldr	r1, [pc, #68]	; (d20c <Drv::SendStatus::toString(Fw::StringBase&) const+0x6c>)
    d1c8:	4668      	mov	r0, sp
    d1ca:	f7f4 f891 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
    d1ce:	7923      	ldrb	r3, [r4, #4]
    d1d0:	aa01      	add	r2, sp, #4
    d1d2:	490f      	ldr	r1, [pc, #60]	; (d210 <Drv::SendStatus::toString(Fw::StringBase&) const+0x70>)
    d1d4:	4628      	mov	r0, r5
    d1d6:	f7f4 f859 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
    d1da:	4668      	mov	r0, sp
    d1dc:	9600      	str	r6, [sp, #0]
    d1de:	f7f4 f829 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    d1e2:	b022      	add	sp, #136	; 0x88
    d1e4:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
    d1e6:	490b      	ldr	r1, [pc, #44]	; (d214 <Drv::SendStatus::toString(Fw::StringBase&) const+0x74>)
    d1e8:	4668      	mov	r0, sp
    d1ea:	f7f4 f881 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d1ee:	e7ee      	b.n	d1ce <Drv::SendStatus::toString(Fw::StringBase&) const+0x2e>
        (void)StringBase::operator=(src);
    d1f0:	4909      	ldr	r1, [pc, #36]	; (d218 <Drv::SendStatus::toString(Fw::StringBase&) const+0x78>)
    d1f2:	4668      	mov	r0, sp
    d1f4:	f7f4 f87c 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d1f8:	e7e9      	b.n	d1ce <Drv::SendStatus::toString(Fw::StringBase&) const+0x2e>
        (void)StringBase::operator=(src);
    d1fa:	4908      	ldr	r1, [pc, #32]	; (d21c <Drv::SendStatus::toString(Fw::StringBase&) const+0x7c>)
    d1fc:	4668      	mov	r0, sp
    d1fe:	f7f4 f877 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
    d202:	e7e4      	b.n	d1ce <Drv::SendStatus::toString(Fw::StringBase&) const+0x2e>
    d204:	200032dc 	.word	0x200032dc
    d208:	20001d2c 	.word	0x20001d2c
    d20c:	20002464 	.word	0x20002464
    d210:	20002470 	.word	0x20002470
    d214:	200024c8 	.word	0x200024c8
    d218:	200024c0 	.word	0x200024c0
    d21c:	200024d4 	.word	0x200024d4

0000d220 <Drv::SendStatus::~SendStatus()>:
    d220:	4b03      	ldr	r3, [pc, #12]	; (d230 <Drv::SendStatus::~SendStatus()+0x10>)
    d222:	b510      	push	{r4, lr}
    d224:	4604      	mov	r4, r0
    d226:	6003      	str	r3, [r0, #0]
    d228:	f7f3 f988 	bl	53c <Fw::Serializable::~Serializable()>
    d22c:	4620      	mov	r0, r4
    d22e:	bd10      	pop	{r4, pc}
    d230:	2000379c 	.word	0x2000379c

0000d234 <Drv::SendStatus::~SendStatus()>:
    d234:	4b05      	ldr	r3, [pc, #20]	; (d24c <Drv::SendStatus::~SendStatus()+0x18>)
    d236:	b510      	push	{r4, lr}
    d238:	4604      	mov	r4, r0
    d23a:	6003      	str	r3, [r0, #0]
    d23c:	f7f3 f97e 	bl	53c <Fw::Serializable::~Serializable()>
    d240:	2108      	movs	r1, #8
    d242:	4620      	mov	r0, r4
    d244:	f00b fd44 	bl	18cd0 <operator delete(void*, unsigned int)>
    d248:	4620      	mov	r0, r4
    d24a:	bd10      	pop	{r4, pc}
    d24c:	2000379c 	.word	0x2000379c

0000d250 <Drv::SendStatus::operator=(Drv::SendStatus const&)>:
    this->e = obj.e;
    d250:	790b      	ldrb	r3, [r1, #4]
    d252:	7103      	strb	r3, [r0, #4]
  }
    d254:	4770      	bx	lr
    d256:	bf00      	nop

0000d258 <Svc::DeframingProtocol::DeframingProtocol()>:
#include "DeframingProtocol.hpp"
#include "DeframingProtocolInterface.hpp"

namespace Svc {

DeframingProtocol::DeframingProtocol() : m_interface(nullptr) {}
    d258:	4902      	ldr	r1, [pc, #8]	; (d264 <Svc::DeframingProtocol::DeframingProtocol()+0xc>)
    d25a:	2200      	movs	r2, #0
    d25c:	e9c0 1200 	strd	r1, r2, [r0]
    d260:	4770      	bx	lr
    d262:	bf00      	nop
    d264:	20003b58 	.word	0x20003b58

0000d268 <Svc::DeframingProtocol::setup(Svc::DeframingProtocolInterface&)>:

void DeframingProtocol::setup(DeframingProtocolInterface& interface) {
    d268:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(m_interface == nullptr);
    d26a:	6843      	ldr	r3, [r0, #4]
void DeframingProtocol::setup(DeframingProtocolInterface& interface) {
    d26c:	4604      	mov	r4, r0
    d26e:	460d      	mov	r5, r1
    FW_ASSERT(m_interface == nullptr);
    d270:	b11b      	cbz	r3, d27a <Svc::DeframingProtocol::setup(Svc::DeframingProtocolInterface&)+0x12>
    d272:	2116      	movs	r1, #22
    d274:	4802      	ldr	r0, [pc, #8]	; (d280 <Svc::DeframingProtocol::setup(Svc::DeframingProtocolInterface&)+0x18>)
    d276:	f7f4 f9c9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_interface = &interface;
    d27a:	6065      	str	r5, [r4, #4]
}
    d27c:	bd38      	pop	{r3, r4, r5, pc}
    d27e:	bf00      	nop
    d280:	20001240 	.word	0x20001240

0000d284 <Svc::FramingProtocol::FramingProtocol()>:
#include "FramingProtocol.hpp"
#include "FramingProtocolInterface.hpp"

namespace Svc {

FramingProtocol::FramingProtocol() : m_interface(nullptr) {}
    d284:	4902      	ldr	r1, [pc, #8]	; (d290 <Svc::FramingProtocol::FramingProtocol()+0xc>)
    d286:	2200      	movs	r2, #0
    d288:	e9c0 1200 	strd	r1, r2, [r0]
    d28c:	4770      	bx	lr
    d28e:	bf00      	nop
    d290:	20003a64 	.word	0x20003a64

0000d294 <Svc::FramingProtocol::setup(Svc::FramingProtocolInterface&)>:

void FramingProtocol::setup(FramingProtocolInterface& interface) {
    d294:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(m_interface == nullptr);
    d296:	6843      	ldr	r3, [r0, #4]
void FramingProtocol::setup(FramingProtocolInterface& interface) {
    d298:	4604      	mov	r4, r0
    d29a:	460d      	mov	r5, r1
    FW_ASSERT(m_interface == nullptr);
    d29c:	b11b      	cbz	r3, d2a6 <Svc::FramingProtocol::setup(Svc::FramingProtocolInterface&)+0x12>
    d29e:	2116      	movs	r1, #22
    d2a0:	4802      	ldr	r0, [pc, #8]	; (d2ac <Svc::FramingProtocol::setup(Svc::FramingProtocolInterface&)+0x18>)
    d2a2:	f7f4 f9b3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_interface = &interface;
    d2a6:	6065      	str	r5, [r4, #4]
}
    d2a8:	bd38      	pop	{r3, r4, r5, pc}
    d2aa:	bf00      	nop
    d2ac:	20001170 	.word	0x20001170

0000d2b0 <Svc::FprimeFraming::FprimeFraming()>:
#include "FpConfig.hpp"
#include "Utils/Hash/Hash.hpp"

namespace Svc {

FprimeFraming::FprimeFraming(): FramingProtocol() {}
    d2b0:	b510      	push	{r4, lr}
    d2b2:	4604      	mov	r4, r0
    d2b4:	f7ff ffe6 	bl	d284 <Svc::FramingProtocol::FramingProtocol()>
    d2b8:	4b01      	ldr	r3, [pc, #4]	; (d2c0 <Svc::FprimeFraming::FprimeFraming()+0x10>)
    d2ba:	4620      	mov	r0, r4
    d2bc:	6023      	str	r3, [r4, #0]
    d2be:	bd10      	pop	{r4, pc}
    d2c0:	200039c0 	.word	0x200039c0

0000d2c4 <Svc::FprimeDeframing::FprimeDeframing()>:

FprimeDeframing::FprimeDeframing(): DeframingProtocol() {}
    d2c4:	b510      	push	{r4, lr}
    d2c6:	4604      	mov	r4, r0
    d2c8:	f7ff ffc6 	bl	d258 <Svc::DeframingProtocol::DeframingProtocol()>
    d2cc:	4b01      	ldr	r3, [pc, #4]	; (d2d4 <Svc::FprimeDeframing::FprimeDeframing()+0x10>)
    d2ce:	4620      	mov	r0, r4
    d2d0:	6023      	str	r3, [r4, #0]
    d2d2:	bd10      	pop	{r4, pc}
    d2d4:	20003a50 	.word	0x20003a50

0000d2d8 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)>:

void FprimeFraming::frame(const U8* const data, const U32 size, Fw::ComPacket::ComPacketType packet_type) {
    d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2dc:	4607      	mov	r7, r0
    d2de:	b08e      	sub	sp, #56	; 0x38
    FW_ASSERT(data != nullptr);
    d2e0:	4688      	mov	r8, r1
void FprimeFraming::frame(const U8* const data, const U32 size, Fw::ComPacket::ComPacketType packet_type) {
    d2e2:	4691      	mov	r9, r2
    d2e4:	461e      	mov	r6, r3
    FW_ASSERT(data != nullptr);
    d2e6:	2900      	cmp	r1, #0
    d2e8:	f000 8085 	beq.w	d3f6 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x11e>
    FW_ASSERT(m_interface != nullptr);
    d2ec:	6879      	ldr	r1, [r7, #4]
    d2ee:	2900      	cmp	r1, #0
    d2f0:	f000 8089 	beq.w	d406 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x12e>
    // Use of I32 size is explicit as ComPacketType will be specifically serialized as an I32
    FpFrameHeader::TokenType real_data_size =
        size + ((packet_type != Fw::ComPacket::FW_PACKET_UNKNOWN) ?
    d2f4:	f1b6 05ff 	subs.w	r5, r6, #255	; 0xff
        static_cast<Svc::FpFrameHeader::TokenType>(sizeof(I32)) :
        0);
    FpFrameHeader::TokenType total = real_data_size + FpFrameHeader::SIZE + HASH_DIGEST_LENGTH;
    Fw::Buffer buffer = m_interface->allocate(total);
    d2f8:	680b      	ldr	r3, [r1, #0]
    d2fa:	a805      	add	r0, sp, #20
        size + ((packet_type != Fw::ComPacket::FW_PACKET_UNKNOWN) ?
    d2fc:	bf18      	it	ne
    d2fe:	2501      	movne	r5, #1
    Fw::Buffer buffer = m_interface->allocate(total);
    d300:	689b      	ldr	r3, [r3, #8]
    FpFrameHeader::TokenType real_data_size =
    d302:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    FpFrameHeader::TokenType total = real_data_size + FpFrameHeader::SIZE + HASH_DIGEST_LENGTH;
    d306:	f105 0a0c 	add.w	sl, r5, #12
    Fw::Buffer buffer = m_interface->allocate(total);
    d30a:	4652      	mov	r2, sl
    d30c:	4798      	blx	r3
    Fw::SerializeBufferBase& serializer = buffer.getSerializeRepr();
    d30e:	a805      	add	r0, sp, #20
    d310:	f008 f8e8 	bl	154e4 <Fw::Buffer::getSerializeRepr()>
    d314:	4604      	mov	r4, r0
    Utils::HashBuffer hash;
    d316:	a801      	add	r0, sp, #4
    d318:	f005 f96a 	bl	125f0 <Utils::HashBuffer::HashBuffer()>

    // Serialize data
    Fw::SerializeStatus status;
    status = serializer.serialize(FpFrameHeader::START_WORD);
    d31c:	493d      	ldr	r1, [pc, #244]	; (d414 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x13c>)
    d31e:	4620      	mov	r0, r4
    d320:	f7f3 f99c 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d324:	2800      	cmp	r0, #0
    d326:	d15a      	bne.n	d3de <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x106>

    status = serializer.serialize(real_data_size);
    d328:	4629      	mov	r1, r5
    d32a:	4620      	mov	r0, r4
    d32c:	f7f3 f996 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d330:	2800      	cmp	r0, #0
    d332:	d14e      	bne.n	d3d2 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0xfa>

    // Serialize packet type if supplied, otherwise it *must* be present in the data
    if (packet_type != Fw::ComPacket::FW_PACKET_UNKNOWN) {
    d334:	2eff      	cmp	r6, #255	; 0xff
    d336:	d133      	bne.n	d3a0 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0xc8>
        status = serializer.serialize(static_cast<I32>(packet_type)); // I32 used for enum storage
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    }

    status = serializer.serialize(data, size, true);  // Serialize without length
    d338:	464a      	mov	r2, r9
    d33a:	4641      	mov	r1, r8
    d33c:	2301      	movs	r3, #1
    d33e:	4620      	mov	r0, r4
    d340:	f7f3 fb78 	bl	a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d344:	2800      	cmp	r0, #0
    d346:	d13e      	bne.n	d3c6 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0xee>

    // Calculate and add transmission hash
    Utils::Hash::hash(buffer.getData(), static_cast<NATIVE_INT_TYPE>(total - HASH_DIGEST_LENGTH), hash);
    d348:	a805      	add	r0, sp, #20
    d34a:	f008 f8b5 	bl	154b8 <Fw::Buffer::getData() const>
    d34e:	aa01      	add	r2, sp, #4
    d350:	f105 0108 	add.w	r1, r5, #8
    d354:	f005 f8ac 	bl	124b0 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)>
    status = serializer.serialize(hash.getBuffAddr(), HASH_DIGEST_LENGTH, true);
    d358:	a801      	add	r0, sp, #4
    d35a:	f005 f92d 	bl	125b8 <Utils::HashBuffer::getBuffAddr()>
    d35e:	2301      	movs	r3, #1
    d360:	4601      	mov	r1, r0
    d362:	2204      	movs	r2, #4
    d364:	4620      	mov	r0, r4
    d366:	f7f3 fb65 	bl	a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d36a:	2800      	cmp	r0, #0
    d36c:	d13d      	bne.n	d3ea <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x112>

    buffer.setSize(total);
    d36e:	4651      	mov	r1, sl
    d370:	a805      	add	r0, sp, #20
    d372:	f008 f8af 	bl	154d4 <Fw::Buffer::setSize(unsigned long)>

    m_interface->send(buffer);
    d376:	6878      	ldr	r0, [r7, #4]
    d378:	a905      	add	r1, sp, #20
    d37a:	6803      	ldr	r3, [r0, #0]
    d37c:	68db      	ldr	r3, [r3, #12]
    d37e:	4798      	blx	r3
}
    d380:	a801      	add	r0, sp, #4
    d382:	f005 f91d 	bl	125c0 <Utils::HashBuffer::~HashBuffer()>
    d386:	4a24      	ldr	r2, [pc, #144]	; (d418 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x140>)
    d388:	4b24      	ldr	r3, [pc, #144]	; (d41c <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x144>)
    d38a:	a806      	add	r0, sp, #24
    d38c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    d390:	f7f3 f8de 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    d394:	a805      	add	r0, sp, #20
    d396:	f7f3 f8d1 	bl	53c <Fw::Serializable::~Serializable()>
    d39a:	b00e      	add	sp, #56	; 0x38
    d39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        status = serializer.serialize(static_cast<I32>(packet_type)); // I32 used for enum storage
    d3a0:	4631      	mov	r1, r6
    d3a2:	4620      	mov	r0, r4
    d3a4:	f7f3 f9c0 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d3a8:	2800      	cmp	r0, #0
    d3aa:	d0c5      	beq.n	d338 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x60>
    d3ac:	4601      	mov	r1, r0
    d3ae:	222e      	movs	r2, #46	; 0x2e
    d3b0:	481b      	ldr	r0, [pc, #108]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d3b2:	f7f4 f939 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    status = serializer.serialize(data, size, true);  // Serialize without length
    d3b6:	464a      	mov	r2, r9
    d3b8:	4641      	mov	r1, r8
    d3ba:	2301      	movs	r3, #1
    d3bc:	4620      	mov	r0, r4
    d3be:	f7f3 fb39 	bl	a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d3c2:	2800      	cmp	r0, #0
    d3c4:	d0c0      	beq.n	d348 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x70>
    d3c6:	4601      	mov	r1, r0
    d3c8:	2232      	movs	r2, #50	; 0x32
    d3ca:	4815      	ldr	r0, [pc, #84]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d3cc:	f7f4 f92c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d3d0:	e7ba      	b.n	d348 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x70>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d3d2:	4601      	mov	r1, r0
    d3d4:	2229      	movs	r2, #41	; 0x29
    d3d6:	4812      	ldr	r0, [pc, #72]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d3d8:	f7f4 f926 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d3dc:	e7aa      	b.n	d334 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x5c>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d3de:	4601      	mov	r1, r0
    d3e0:	2226      	movs	r2, #38	; 0x26
    d3e2:	480f      	ldr	r0, [pc, #60]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d3e4:	f7f4 f920 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d3e8:	e79e      	b.n	d328 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x50>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d3ea:	4601      	mov	r1, r0
    d3ec:	2237      	movs	r2, #55	; 0x37
    d3ee:	480c      	ldr	r0, [pc, #48]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d3f0:	f7f4 f91a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d3f4:	e7bb      	b.n	d36e <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x96>
    FW_ASSERT(data != nullptr);
    d3f6:	2117      	movs	r1, #23
    d3f8:	4809      	ldr	r0, [pc, #36]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d3fa:	f7f4 f907 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(m_interface != nullptr);
    d3fe:	6879      	ldr	r1, [r7, #4]
    d400:	2900      	cmp	r1, #0
    d402:	f47f af77 	bne.w	d2f4 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x1c>
    d406:	2118      	movs	r1, #24
    d408:	4805      	ldr	r0, [pc, #20]	; (d420 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x148>)
    d40a:	f7f4 f8ff 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    Fw::Buffer buffer = m_interface->allocate(total);
    d40e:	6879      	ldr	r1, [r7, #4]
    d410:	e770      	b.n	d2f4 <Svc::FprimeFraming::frame(unsigned char const*, unsigned long, Fw::ComPacket::ComPacketType)+0x1c>
    d412:	bf00      	nop
    d414:	deadbeef 	.word	0xdeadbeef
    d418:	200032c0 	.word	0x200032c0
    d41c:	20003214 	.word	0x20003214
    d420:	20001080 	.word	0x20001080

0000d424 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)>:

bool FprimeDeframing::validate(Types::CircularBuffer& ring, U32 size) {
    d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d428:	b086      	sub	sp, #24
    d42a:	4616      	mov	r6, r2
    d42c:	460f      	mov	r7, r1
    Utils::Hash hash;
    d42e:	a801      	add	r0, sp, #4
    d430:	f005 f81a 	bl	12468 <Utils::Hash::Hash()>
    Utils::HashBuffer hashBuffer;
    d434:	a802      	add	r0, sp, #8
    d436:	f005 f8db 	bl	125f0 <Utils::HashBuffer::HashBuffer()>
    // Initialize the checksum and loop through all bytes calculating it
    hash.init();
    d43a:	a801      	add	r0, sp, #4
    d43c:	f005 f81a 	bl	12474 <Utils::Hash::init()>
    for (U32 i = 0; i < size; i++) {
    d440:	b1d6      	cbz	r6, d478 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x54>
    d442:	2400      	movs	r4, #0
    d444:	f10d 0503 	add.w	r5, sp, #3
        U8 byte;
        const Fw::SerializeStatus status = ring.peek(byte, i);
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d448:	f8df 8098 	ldr.w	r8, [pc, #152]	; d4e4 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0xc0>
    d44c:	e006      	b.n	d45c <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x38>
        hash.update(&byte, 1);
    d44e:	2201      	movs	r2, #1
    d450:	4629      	mov	r1, r5
    d452:	a801      	add	r0, sp, #4
    d454:	f005 f812 	bl	1247c <Utils::Hash::update(void const*, long)>
    for (U32 i = 0; i < size; i++) {
    d458:	42a6      	cmp	r6, r4
    d45a:	d00f      	beq.n	d47c <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x58>
        const Fw::SerializeStatus status = ring.peek(byte, i);
    d45c:	4622      	mov	r2, r4
    d45e:	4629      	mov	r1, r5
    d460:	4638      	mov	r0, r7
    for (U32 i = 0; i < size; i++) {
    d462:	3401      	adds	r4, #1
        const Fw::SerializeStatus status = ring.peek(byte, i);
    d464:	f000 f9b8 	bl	d7d8 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const>
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d468:	4601      	mov	r1, r0
    d46a:	2800      	cmp	r0, #0
    d46c:	d0ef      	beq.n	d44e <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x2a>
    d46e:	2246      	movs	r2, #70	; 0x46
    d470:	4640      	mov	r0, r8
    d472:	f7f4 f8d9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d476:	e7ea      	b.n	d44e <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x2a>
    d478:	f10d 0503 	add.w	r5, sp, #3
    }
    hash.final(hashBuffer);
    // Now loop through the hash digest bytes and check for equality
    for (U32 i = 0; i < HASH_DIGEST_LENGTH; i++) {
    d47c:	2400      	movs	r4, #0
        U8 calc = static_cast<U8>(hashBuffer.getBuffAddr()[i]);
        U8 sent = 0;
        const Fw::SerializeStatus status = ring.peek(sent, size + i);
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d47e:	f8df a064 	ldr.w	sl, [pc, #100]	; d4e4 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0xc0>
    hash.final(hashBuffer);
    d482:	a902      	add	r1, sp, #8
    d484:	a801      	add	r0, sp, #4
        U8 sent = 0;
    d486:	46a1      	mov	r9, r4
    hash.final(hashBuffer);
    d488:	f005 f848 	bl	1251c <Utils::Hash::final(Utils::HashBuffer&)>
        U8 calc = static_cast<U8>(hashBuffer.getBuffAddr()[i]);
    d48c:	a802      	add	r0, sp, #8
    d48e:	f005 f893 	bl	125b8 <Utils::HashBuffer::getBuffAddr()>
    d492:	4603      	mov	r3, r0
        const Fw::SerializeStatus status = ring.peek(sent, size + i);
    d494:	1932      	adds	r2, r6, r4
    d496:	4629      	mov	r1, r5
    d498:	4638      	mov	r0, r7
        U8 calc = static_cast<U8>(hashBuffer.getBuffAddr()[i]);
    d49a:	f813 8004 	ldrb.w	r8, [r3, r4]
    for (U32 i = 0; i < HASH_DIGEST_LENGTH; i++) {
    d49e:	3401      	adds	r4, #1
        U8 sent = 0;
    d4a0:	f88d 9003 	strb.w	r9, [sp, #3]
        const Fw::SerializeStatus status = ring.peek(sent, size + i);
    d4a4:	f000 f998 	bl	d7d8 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const>
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d4a8:	b980      	cbnz	r0, d4cc <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0xa8>
        if (calc != sent) {
    d4aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d4ae:	4543      	cmp	r3, r8
    d4b0:	d115      	bne.n	d4de <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0xba>
    for (U32 i = 0; i < HASH_DIGEST_LENGTH; i++) {
    d4b2:	2c04      	cmp	r4, #4
    d4b4:	d1ea      	bne.n	d48c <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x68>
            return false;
        }
    }
    return true;
    d4b6:	2401      	movs	r4, #1
}
    d4b8:	a802      	add	r0, sp, #8
    d4ba:	f005 f881 	bl	125c0 <Utils::HashBuffer::~HashBuffer()>
    d4be:	a801      	add	r0, sp, #4
    d4c0:	f004 ffd6 	bl	12470 <Utils::Hash::~Hash()>
    d4c4:	4620      	mov	r0, r4
    d4c6:	b006      	add	sp, #24
    d4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d4cc:	4601      	mov	r1, r0
    d4ce:	224f      	movs	r2, #79	; 0x4f
    d4d0:	4650      	mov	r0, sl
    d4d2:	f7f4 f8a9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
        if (calc != sent) {
    d4d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d4da:	4543      	cmp	r3, r8
    d4dc:	d0e9      	beq.n	d4b2 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x8e>
            return false;
    d4de:	2400      	movs	r4, #0
    d4e0:	e7ea      	b.n	d4b8 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)+0x94>
    d4e2:	bf00      	nop
    d4e4:	20001080 	.word	0x20001080

0000d4e8 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)>:

DeframingProtocol::DeframingStatus FprimeDeframing::deframe(Types::CircularBuffer& ring, U32& needed) {
    d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    FpFrameHeader::TokenType start = 0;
    d4ea:	2300      	movs	r3, #0
DeframingProtocol::DeframingStatus FprimeDeframing::deframe(Types::CircularBuffer& ring, U32& needed) {
    d4ec:	b08d      	sub	sp, #52	; 0x34
    d4ee:	460c      	mov	r4, r1
    FpFrameHeader::TokenType size = 0;
    FW_ASSERT(m_interface != nullptr);
    d4f0:	6841      	ldr	r1, [r0, #4]
DeframingProtocol::DeframingStatus FprimeDeframing::deframe(Types::CircularBuffer& ring, U32& needed) {
    d4f2:	4605      	mov	r5, r0
    d4f4:	4616      	mov	r6, r2
    FpFrameHeader::TokenType start = 0;
    d4f6:	9301      	str	r3, [sp, #4]
    FpFrameHeader::TokenType size = 0;
    d4f8:	9302      	str	r3, [sp, #8]
    FW_ASSERT(m_interface != nullptr);
    d4fa:	2900      	cmp	r1, #0
    d4fc:	d06c      	beq.n	d5d8 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0xf0>
    // Check for header or ask for more data
    if (ring.get_allocated_size() < FpFrameHeader::SIZE) {
    d4fe:	4620      	mov	r0, r4
    d500:	f000 f8b8 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    d504:	2807      	cmp	r0, #7
    d506:	d924      	bls.n	d552 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x6a>
        needed = FpFrameHeader::SIZE;
        return DeframingProtocol::DEFRAMING_MORE_NEEDED;
    }
    // Read start value from header
    Fw::SerializeStatus status = ring.peek(start, 0);
    d508:	2200      	movs	r2, #0
    d50a:	a901      	add	r1, sp, #4
    d50c:	4620      	mov	r0, r4
    d50e:	f000 f991 	bl	d834 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d512:	b9a0      	cbnz	r0, d53e <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x56>
    if (start != FpFrameHeader::START_WORD) {
    d514:	4b3e      	ldr	r3, [pc, #248]	; (d610 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x128>)
    d516:	9a01      	ldr	r2, [sp, #4]
    d518:	429a      	cmp	r2, r3
    d51a:	d002      	beq.n	d522 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x3a>
        // Start word must be valid
        return DeframingProtocol::DEFRAMING_INVALID_FORMAT;
    d51c:	2004      	movs	r0, #4
    buffer.setSize(size);
    status = ring.peek(buffer.getData(), size, FpFrameHeader::SIZE);
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    m_interface->route(buffer);
    return DeframingProtocol::DEFRAMING_STATUS_SUCCESS;
}
    d51e:	b00d      	add	sp, #52	; 0x34
    d520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = ring.peek(size, sizeof(FpFrameHeader::TokenType));
    d522:	2204      	movs	r2, #4
    d524:	a902      	add	r1, sp, #8
    d526:	4620      	mov	r0, r4
    d528:	f000 f984 	bl	d834 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d52c:	2800      	cmp	r0, #0
    d52e:	d158      	bne.n	d5e2 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0xfa>
    if (size > maxU32 - (FpFrameHeader::SIZE + HASH_DIGEST_LENGTH)) {
    d530:	9f02      	ldr	r7, [sp, #8]
    d532:	f117 0f0d 	cmn.w	r7, #13
    d536:	d911      	bls.n	d55c <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x74>
        return DeframingProtocol::DEFRAMING_INVALID_SIZE;
    d538:	2001      	movs	r0, #1
}
    d53a:	b00d      	add	sp, #52	; 0x34
    d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d53e:	2262      	movs	r2, #98	; 0x62
    d540:	4601      	mov	r1, r0
    d542:	4834      	ldr	r0, [pc, #208]	; (d614 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x12c>)
    d544:	f7f4 f870 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    if (start != FpFrameHeader::START_WORD) {
    d548:	4b31      	ldr	r3, [pc, #196]	; (d610 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x128>)
    d54a:	9a01      	ldr	r2, [sp, #4]
    d54c:	429a      	cmp	r2, r3
    d54e:	d1e5      	bne.n	d51c <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x34>
    d550:	e7e7      	b.n	d522 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x3a>
        needed = FpFrameHeader::SIZE;
    d552:	2308      	movs	r3, #8
        return DeframingProtocol::DEFRAMING_MORE_NEEDED;
    d554:	2003      	movs	r0, #3
        needed = FpFrameHeader::SIZE;
    d556:	6033      	str	r3, [r6, #0]
}
    d558:	b00d      	add	sp, #52	; 0x34
    d55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    needed = (FpFrameHeader::SIZE + size + HASH_DIGEST_LENGTH);
    d55c:	370c      	adds	r7, #12
    if (frameSize > ring.get_capacity()) {
    d55e:	4620      	mov	r0, r4
    needed = (FpFrameHeader::SIZE + size + HASH_DIGEST_LENGTH);
    d560:	6037      	str	r7, [r6, #0]
    if (frameSize > ring.get_capacity()) {
    d562:	f000 fa4d 	bl	da00 <Types::CircularBuffer::get_capacity() const>
    d566:	4287      	cmp	r7, r0
    d568:	d8e6      	bhi.n	d538 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x50>
    else if (ring.get_allocated_size() < needed) {
    d56a:	4620      	mov	r0, r4
    d56c:	f000 f882 	bl	d674 <Types::CircularBuffer::get_allocated_size() const>
    d570:	6832      	ldr	r2, [r6, #0]
    d572:	4290      	cmp	r0, r2
    d574:	d33b      	bcc.n	d5ee <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x106>
    if (not this->validate(ring, needed - HASH_DIGEST_LENGTH)) {
    d576:	3a04      	subs	r2, #4
    d578:	4621      	mov	r1, r4
    d57a:	4628      	mov	r0, r5
    d57c:	f7ff ff52 	bl	d424 <Svc::FprimeDeframing::validate(Types::CircularBuffer&, unsigned long)>
    d580:	2800      	cmp	r0, #0
    d582:	d042      	beq.n	d60a <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x122>
    Fw::Buffer buffer = m_interface->allocate(size);
    d584:	6869      	ldr	r1, [r5, #4]
    d586:	a803      	add	r0, sp, #12
    d588:	9a02      	ldr	r2, [sp, #8]
    d58a:	680b      	ldr	r3, [r1, #0]
    d58c:	689b      	ldr	r3, [r3, #8]
    d58e:	4798      	blx	r3
    FW_ASSERT(buffer.getSize() >= size);
    d590:	a803      	add	r0, sp, #12
    d592:	f007 ff93 	bl	154bc <Fw::Buffer::getSize() const>
    d596:	9902      	ldr	r1, [sp, #8]
    d598:	4288      	cmp	r0, r1
    d59a:	d330      	bcc.n	d5fe <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x116>
    buffer.setSize(size);
    d59c:	a803      	add	r0, sp, #12
    d59e:	f007 ff99 	bl	154d4 <Fw::Buffer::setSize(unsigned long)>
    status = ring.peek(buffer.getData(), size, FpFrameHeader::SIZE);
    d5a2:	a803      	add	r0, sp, #12
    d5a4:	f007 ff88 	bl	154b8 <Fw::Buffer::getData() const>
    d5a8:	2308      	movs	r3, #8
    d5aa:	4601      	mov	r1, r0
    d5ac:	9a02      	ldr	r2, [sp, #8]
    d5ae:	4620      	mov	r0, r4
    d5b0:	f000 f992 	bl	d8d8 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d5b4:	b9e8      	cbnz	r0, d5f2 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x10a>
    m_interface->route(buffer);
    d5b6:	6868      	ldr	r0, [r5, #4]
    d5b8:	a903      	add	r1, sp, #12
    d5ba:	6803      	ldr	r3, [r0, #0]
    d5bc:	68db      	ldr	r3, [r3, #12]
    d5be:	4798      	blx	r3
    d5c0:	4a15      	ldr	r2, [pc, #84]	; (d618 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x130>)
    d5c2:	4b16      	ldr	r3, [pc, #88]	; (d61c <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x134>)
    d5c4:	a804      	add	r0, sp, #16
    d5c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    d5ca:	f7f2 ffc1 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    d5ce:	a803      	add	r0, sp, #12
    d5d0:	f7f2 ffb4 	bl	53c <Fw::Serializable::~Serializable()>
    return DeframingProtocol::DEFRAMING_STATUS_SUCCESS;
    d5d4:	2000      	movs	r0, #0
    d5d6:	e7a2      	b.n	d51e <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x36>
    FW_ASSERT(m_interface != nullptr);
    d5d8:	215a      	movs	r1, #90	; 0x5a
    d5da:	480e      	ldr	r0, [pc, #56]	; (d614 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x12c>)
    d5dc:	f7f4 f816 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    d5e0:	e78d      	b.n	d4fe <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x16>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d5e2:	4601      	mov	r1, r0
    d5e4:	2269      	movs	r2, #105	; 0x69
    d5e6:	480b      	ldr	r0, [pc, #44]	; (d614 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x12c>)
    d5e8:	f7f4 f81e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d5ec:	e7a0      	b.n	d530 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x48>
        return DeframingProtocol::DEFRAMING_MORE_NEEDED;
    d5ee:	2003      	movs	r0, #3
    d5f0:	e795      	b.n	d51e <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x36>
    FW_ASSERT(status == Fw::FW_SERIALIZE_OK, status);
    d5f2:	4601      	mov	r1, r0
    d5f4:	2285      	movs	r2, #133	; 0x85
    d5f6:	4807      	ldr	r0, [pc, #28]	; (d614 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x12c>)
    d5f8:	f7f4 f816 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d5fc:	e7db      	b.n	d5b6 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0xce>
    FW_ASSERT(buffer.getSize() >= size);
    d5fe:	2182      	movs	r1, #130	; 0x82
    d600:	4804      	ldr	r0, [pc, #16]	; (d614 <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x12c>)
    d602:	f7f4 f803 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    buffer.setSize(size);
    d606:	9902      	ldr	r1, [sp, #8]
    d608:	e7c8      	b.n	d59c <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0xb4>
        return DeframingProtocol::DEFRAMING_INVALID_CHECKSUM;
    d60a:	2002      	movs	r0, #2
    d60c:	e787      	b.n	d51e <Svc::FprimeDeframing::deframe(Types::CircularBuffer&, unsigned long&)+0x36>
    d60e:	bf00      	nop
    d610:	deadbeef 	.word	0xdeadbeef
    d614:	20001080 	.word	0x20001080
    d618:	200032c0 	.word	0x200032c0
    d61c:	20003214 	.word	0x20003214

0000d620 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)>:
{

}

CircularBuffer :: CircularBuffer(U8* const buffer, const NATIVE_UINT_TYPE size) :
    m_store(nullptr),
    d620:	2300      	movs	r3, #0
CircularBuffer :: CircularBuffer(U8* const buffer, const NATIVE_UINT_TYPE size) :
    d622:	b570      	push	{r4, r5, r6, lr}
    d624:	4604      	mov	r4, r0
    d626:	460d      	mov	r5, r1
{
    setup(buffer, size);
}

void CircularBuffer :: setup(U8* const buffer, const NATIVE_UINT_TYPE size) {
    FW_ASSERT(size > 0);
    d628:	4616      	mov	r6, r2
    m_high_water_mark(0)
    d62a:	6103      	str	r3, [r0, #16]
    m_store_size(0),
    d62c:	e9c0 3300 	strd	r3, r3, [r0]
    m_allocated_size(0),
    d630:	e9c0 3302 	strd	r3, r3, [r0, #8]
    FW_ASSERT(size > 0);
    d634:	b142      	cbz	r2, d648 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x28>
    FW_ASSERT(buffer != nullptr);
    d636:	b161      	cbz	r1, d652 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x32>
    FW_ASSERT(m_store == nullptr && m_store_size == 0); // Not already setup

    // Initialize buffer data
    m_store = buffer;
    m_store_size = size;
    m_head_idx = 0;
    d638:	2300      	movs	r3, #0
}
    d63a:	4620      	mov	r0, r4
    m_store_size = size;
    d63c:	e9c4 5600 	strd	r5, r6, [r4]
    m_allocated_size = 0;
    d640:	e9c4 3302 	strd	r3, r3, [r4, #8]
    m_high_water_mark = 0;
    d644:	6123      	str	r3, [r4, #16]
}
    d646:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(size > 0);
    d648:	212a      	movs	r1, #42	; 0x2a
    d64a:	4809      	ldr	r0, [pc, #36]	; (d670 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x50>)
    d64c:	f7f3 ffde 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(buffer != nullptr);
    d650:	b91d      	cbnz	r5, d65a <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x3a>
    d652:	212b      	movs	r1, #43	; 0x2b
    d654:	4806      	ldr	r0, [pc, #24]	; (d670 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x50>)
    d656:	f7f3 ffd9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(m_store == nullptr && m_store_size == 0); // Not already setup
    d65a:	6823      	ldr	r3, [r4, #0]
    d65c:	b123      	cbz	r3, d668 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x48>
    d65e:	212c      	movs	r1, #44	; 0x2c
    d660:	4803      	ldr	r0, [pc, #12]	; (d670 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x50>)
    d662:	f7f3 ffd3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    d666:	e7e7      	b.n	d638 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x18>
    d668:	6863      	ldr	r3, [r4, #4]
    d66a:	2b00      	cmp	r3, #0
    d66c:	d1f7      	bne.n	d65e <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x3e>
    d66e:	e7e3      	b.n	d638 <Types::CircularBuffer::CircularBuffer(unsigned char*, unsigned long)+0x18>
    d670:	20001d4c 	.word	0x20001d4c

0000d674 <Types::CircularBuffer::get_allocated_size() const>:
}

NATIVE_UINT_TYPE CircularBuffer :: get_allocated_size() const {
    return m_allocated_size;
}
    d674:	68c0      	ldr	r0, [r0, #12]
    d676:	4770      	bx	lr

0000d678 <Types::CircularBuffer::get_free_size() const>:

NATIVE_UINT_TYPE CircularBuffer :: get_free_size() const {
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d678:	6803      	ldr	r3, [r0, #0]
NATIVE_UINT_TYPE CircularBuffer :: get_free_size() const {
    d67a:	b510      	push	{r4, lr}
    d67c:	4604      	mov	r4, r0
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d67e:	b133      	cbz	r3, d68e <Types::CircularBuffer::get_free_size() const+0x16>
    d680:	6840      	ldr	r0, [r0, #4]
    d682:	b120      	cbz	r0, d68e <Types::CircularBuffer::get_free_size() const+0x16>
    FW_ASSERT(m_allocated_size <= m_store_size, static_cast<FwAssertArgType>(m_allocated_size));
    d684:	68e1      	ldr	r1, [r4, #12]
    d686:	4281      	cmp	r1, r0
    d688:	d809      	bhi.n	d69e <Types::CircularBuffer::get_free_size() const+0x26>
    return m_store_size - m_allocated_size;
}
    d68a:	1a40      	subs	r0, r0, r1
    d68c:	bd10      	pop	{r4, pc}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d68e:	213b      	movs	r1, #59	; 0x3b
    d690:	4807      	ldr	r0, [pc, #28]	; (d6b0 <Types::CircularBuffer::get_free_size() const+0x38>)
    d692:	f7f3 ffbb 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(m_allocated_size <= m_store_size, static_cast<FwAssertArgType>(m_allocated_size));
    d696:	6860      	ldr	r0, [r4, #4]
    d698:	68e1      	ldr	r1, [r4, #12]
    d69a:	4281      	cmp	r1, r0
    d69c:	d9f5      	bls.n	d68a <Types::CircularBuffer::get_free_size() const+0x12>
    d69e:	223c      	movs	r2, #60	; 0x3c
    d6a0:	4803      	ldr	r0, [pc, #12]	; (d6b0 <Types::CircularBuffer::get_free_size() const+0x38>)
    d6a2:	f7f3 ffc1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return m_store_size - m_allocated_size;
    d6a6:	6860      	ldr	r0, [r4, #4]
    d6a8:	68e1      	ldr	r1, [r4, #12]
}
    d6aa:	1a40      	subs	r0, r0, r1
    d6ac:	bd10      	pop	{r4, pc}
    d6ae:	bf00      	nop
    d6b0:	20001d4c 	.word	0x20001d4c

0000d6b4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)>:
NATIVE_UINT_TYPE CircularBuffer :: advance_idx(NATIVE_UINT_TYPE idx, NATIVE_UINT_TYPE amount) const {
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    return (idx + amount) % m_store_size;
}

Fw::SerializeStatus CircularBuffer :: serialize(const U8* const buffer, const NATIVE_UINT_TYPE size) {
    d6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d6b8:	6803      	ldr	r3, [r0, #0]
Fw::SerializeStatus CircularBuffer :: serialize(const U8* const buffer, const NATIVE_UINT_TYPE size) {
    d6ba:	4605      	mov	r5, r0
    d6bc:	460e      	mov	r6, r1
    d6be:	4690      	mov	r8, r2
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d03e      	beq.n	d742 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x8e>
    d6c4:	6842      	ldr	r2, [r0, #4]
    d6c6:	2a00      	cmp	r2, #0
    d6c8:	d03b      	beq.n	d742 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x8e>
    FW_ASSERT(buffer != nullptr);
    d6ca:	b961      	cbnz	r1, d6e6 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x32>
    d6cc:	2147      	movs	r1, #71	; 0x47
    d6ce:	4841      	ldr	r0, [pc, #260]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d6d0:	f7f3 ff9c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d6d4:	682b      	ldr	r3, [r5, #0]
    d6d6:	b10b      	cbz	r3, d6dc <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x28>
    d6d8:	686a      	ldr	r2, [r5, #4]
    d6da:	b922      	cbnz	r2, d6e6 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x32>
    d6dc:	213b      	movs	r1, #59	; 0x3b
    d6de:	483d      	ldr	r0, [pc, #244]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d6e0:	f7f3 ff94 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(m_allocated_size <= m_store_size, static_cast<FwAssertArgType>(m_allocated_size));
    d6e4:	686a      	ldr	r2, [r5, #4]
    d6e6:	68ef      	ldr	r7, [r5, #12]
    d6e8:	4297      	cmp	r7, r2
    d6ea:	d86a      	bhi.n	d7c2 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x10e>
    return m_store_size - m_allocated_size;
    d6ec:	1bd3      	subs	r3, r2, r7
    // Check there is sufficient space
    if (size > get_free_size()) {
    d6ee:	4598      	cmp	r8, r3
    d6f0:	d864      	bhi.n	d7bc <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x108>
        return Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    // Copy in all the supplied data
    NATIVE_UINT_TYPE idx = advance_idx(m_head_idx, m_allocated_size);
    d6f2:	68ac      	ldr	r4, [r5, #8]
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d6f4:	4294      	cmp	r4, r2
    d6f6:	d25a      	bcs.n	d7ae <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xfa>
    return (idx + amount) % m_store_size;
    d6f8:	443c      	add	r4, r7
    d6fa:	fbb4 f3f2 	udiv	r3, r4, r2
    d6fe:	fb02 4413 	mls	r4, r2, r3, r4
    for (U32 i = 0; i < size; i++) {
    d702:	f1b8 0f00 	cmp.w	r8, #0
    d706:	d033      	beq.n	d770 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xbc>
    d708:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d70c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>
    d710:	4437      	add	r7, r6
    d712:	3e01      	subs	r6, #1
    d714:	e00d      	b.n	d732 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x7e>
        m_store[idx] = buffer[i];
    d716:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d71a:	682b      	ldr	r3, [r5, #0]
    d71c:	551a      	strb	r2, [r3, r4]
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d71e:	686a      	ldr	r2, [r5, #4]
    d720:	42a2      	cmp	r2, r4
    d722:	d918      	bls.n	d756 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xa2>
    return (idx + amount) % m_store_size;
    d724:	3401      	adds	r4, #1
    for (U32 i = 0; i < size; i++) {
    d726:	42be      	cmp	r6, r7
    return (idx + amount) % m_store_size;
    d728:	fbb4 f3f2 	udiv	r3, r4, r2
    d72c:	fb02 4413 	mls	r4, r2, r3, r4
    for (U32 i = 0; i < size; i++) {
    d730:	d01e      	beq.n	d770 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xbc>
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d732:	4294      	cmp	r4, r2
    d734:	d3ef      	bcc.n	d716 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x62>
    d736:	4621      	mov	r1, r4
    d738:	224f      	movs	r2, #79	; 0x4f
    d73a:	4648      	mov	r0, r9
    d73c:	f7f3 ff74 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d740:	e7e9      	b.n	d716 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x62>
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d742:	2146      	movs	r1, #70	; 0x46
    d744:	4823      	ldr	r0, [pc, #140]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d746:	f7f3 ff61 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(buffer != nullptr);
    d74a:	2e00      	cmp	r6, #0
    d74c:	d0be      	beq.n	d6cc <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x18>
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d74e:	682b      	ldr	r3, [r5, #0]
    d750:	2b00      	cmp	r3, #0
    d752:	d1c1      	bne.n	d6d8 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x24>
    d754:	e7c2      	b.n	d6dc <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x28>
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d756:	4621      	mov	r1, r4
    d758:	2241      	movs	r2, #65	; 0x41
    d75a:	4648      	mov	r0, r9
    return (idx + amount) % m_store_size;
    d75c:	3401      	adds	r4, #1
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d75e:	f7f3 ff63 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d762:	686a      	ldr	r2, [r5, #4]
    for (U32 i = 0; i < size; i++) {
    d764:	42be      	cmp	r6, r7
    return (idx + amount) % m_store_size;
    d766:	fbb4 f3f2 	udiv	r3, r4, r2
    d76a:	fb02 4413 	mls	r4, r2, r3, r4
    for (U32 i = 0; i < size; i++) {
    d76e:	d1e0      	bne.n	d732 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x7e>
        idx = advance_idx(idx);
    }
    m_allocated_size += size;
    d770:	68ec      	ldr	r4, [r5, #12]
    m_allocated_size -= amount;
    return Fw::FW_SERIALIZE_OK;
}

NATIVE_UINT_TYPE CircularBuffer ::get_capacity() const {
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d772:	682b      	ldr	r3, [r5, #0]
    m_allocated_size += size;
    d774:	4444      	add	r4, r8
    d776:	60ec      	str	r4, [r5, #12]
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d778:	b103      	cbz	r3, d77c <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xc8>
    d77a:	b97a      	cbnz	r2, d79c <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xe8>
    d77c:	2199      	movs	r1, #153	; 0x99
    d77e:	4815      	ldr	r0, [pc, #84]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d780:	f7f3 ff44 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return m_store_size;
    d784:	686a      	ldr	r2, [r5, #4]
    FW_ASSERT(m_allocated_size <= this->get_capacity(), static_cast<FwAssertArgType>(m_allocated_size));
    d786:	68e9      	ldr	r1, [r5, #12]
    d788:	4294      	cmp	r4, r2
    d78a:	d80a      	bhi.n	d7a2 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xee>
    m_high_water_mark = (m_high_water_mark > m_allocated_size) ? m_high_water_mark : m_allocated_size;
    d78c:	692b      	ldr	r3, [r5, #16]
    return Fw::FW_SERIALIZE_OK;
    d78e:	2000      	movs	r0, #0
    m_high_water_mark = (m_high_water_mark > m_allocated_size) ? m_high_water_mark : m_allocated_size;
    d790:	428b      	cmp	r3, r1
    d792:	bf38      	it	cc
    d794:	460b      	movcc	r3, r1
    d796:	612b      	str	r3, [r5, #16]
}
    d798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(m_allocated_size <= this->get_capacity(), static_cast<FwAssertArgType>(m_allocated_size));
    d79c:	4294      	cmp	r4, r2
    d79e:	4621      	mov	r1, r4
    d7a0:	d9f4      	bls.n	d78c <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xd8>
    d7a2:	2254      	movs	r2, #84	; 0x54
    d7a4:	480b      	ldr	r0, [pc, #44]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d7a6:	f7f3 ff3f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    m_high_water_mark = (m_high_water_mark > m_allocated_size) ? m_high_water_mark : m_allocated_size;
    d7aa:	68e9      	ldr	r1, [r5, #12]
    d7ac:	e7ee      	b.n	d78c <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0xd8>
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d7ae:	2241      	movs	r2, #65	; 0x41
    d7b0:	4621      	mov	r1, r4
    d7b2:	4808      	ldr	r0, [pc, #32]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d7b4:	f7f3 ff38 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d7b8:	686a      	ldr	r2, [r5, #4]
    d7ba:	e79d      	b.n	d6f8 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x44>
        return Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    d7bc:	2002      	movs	r0, #2
}
    d7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(m_allocated_size <= m_store_size, static_cast<FwAssertArgType>(m_allocated_size));
    d7c2:	4639      	mov	r1, r7
    d7c4:	223c      	movs	r2, #60	; 0x3c
    d7c6:	4803      	ldr	r0, [pc, #12]	; (d7d4 <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x120>)
    d7c8:	f7f3 ff2e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return m_store_size - m_allocated_size;
    d7cc:	686a      	ldr	r2, [r5, #4]
    d7ce:	68ef      	ldr	r7, [r5, #12]
    d7d0:	e78c      	b.n	d6ec <Types::CircularBuffer::serialize(unsigned char const*, unsigned long)+0x38>
    d7d2:	bf00      	nop
    d7d4:	20001d4c 	.word	0x20001d4c

0000d7d8 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const>:
Fw::SerializeStatus CircularBuffer :: peek(U8& value, NATIVE_UINT_TYPE offset) const {
    d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d7da:	6803      	ldr	r3, [r0, #0]
Fw::SerializeStatus CircularBuffer :: peek(U8& value, NATIVE_UINT_TYPE offset) const {
    d7dc:	4604      	mov	r4, r0
    d7de:	460e      	mov	r6, r1
    d7e0:	4615      	mov	r5, r2
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d7e2:	b19b      	cbz	r3, d80c <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x34>
    d7e4:	6843      	ldr	r3, [r0, #4]
    d7e6:	b18b      	cbz	r3, d80c <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x34>
    if ((sizeof(U8) + offset) > m_allocated_size) {
    d7e8:	1c6b      	adds	r3, r5, #1
    d7ea:	68e2      	ldr	r2, [r4, #12]
    d7ec:	4293      	cmp	r3, r2
    d7ee:	d815      	bhi.n	d81c <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x44>
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d7f0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    d7f4:	429f      	cmp	r7, r3
    d7f6:	d213      	bcs.n	d820 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x48>
    return (idx + amount) % m_store_size;
    d7f8:	443d      	add	r5, r7
    value = m_store[idx];
    d7fa:	6822      	ldr	r2, [r4, #0]
    d7fc:	2000      	movs	r0, #0
    return (idx + amount) % m_store_size;
    d7fe:	fbb5 f1f3 	udiv	r1, r5, r3
    d802:	fb03 5511 	mls	r5, r3, r1, r5
    value = m_store[idx];
    d806:	5d53      	ldrb	r3, [r2, r5]
    d808:	7033      	strb	r3, [r6, #0]
}
    d80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d80c:	215f      	movs	r1, #95	; 0x5f
    d80e:	4808      	ldr	r0, [pc, #32]	; (d830 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x58>)
    d810:	f7f3 fefc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if ((sizeof(U8) + offset) > m_allocated_size) {
    d814:	1c6b      	adds	r3, r5, #1
    d816:	68e2      	ldr	r2, [r4, #12]
    d818:	4293      	cmp	r3, r2
    d81a:	d9e9      	bls.n	d7f0 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x18>
        return Fw::FW_DESERIALIZE_BUFFER_EMPTY;
    d81c:	2003      	movs	r0, #3
}
    d81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d820:	2241      	movs	r2, #65	; 0x41
    d822:	4639      	mov	r1, r7
    d824:	4802      	ldr	r0, [pc, #8]	; (d830 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x58>)
    d826:	f7f3 feff 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d82a:	6863      	ldr	r3, [r4, #4]
    d82c:	e7e4      	b.n	d7f8 <Types::CircularBuffer::peek(unsigned char&, unsigned long) const+0x20>
    d82e:	bf00      	nop
    d830:	20001d4c 	.word	0x20001d4c

0000d834 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const>:
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d834:	6803      	ldr	r3, [r0, #0]
Fw::SerializeStatus CircularBuffer :: peek(U32& value, NATIVE_UINT_TYPE offset) const {
    d836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d83a:	4605      	mov	r5, r0
    d83c:	460f      	mov	r7, r1
    d83e:	4616      	mov	r6, r2
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d840:	b343      	cbz	r3, d894 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x60>
    d842:	6843      	ldr	r3, [r0, #4]
    d844:	b333      	cbz	r3, d894 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x60>
    if ((sizeof(U32) + offset) > m_allocated_size) {
    d846:	1d33      	adds	r3, r6, #4
    d848:	68ea      	ldr	r2, [r5, #12]
    d84a:	4293      	cmp	r3, r2
    d84c:	d82a      	bhi.n	d8a4 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x70>
    value = 0;
    d84e:	2300      	movs	r3, #0
    d850:	603b      	str	r3, [r7, #0]
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d852:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
    d856:	429c      	cmp	r4, r3
    d858:	d234      	bcs.n	d8c4 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x90>
    return (idx + amount) % m_store_size;
    d85a:	19a2      	adds	r2, r4, r6
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d85c:	f8df 8074 	ldr.w	r8, [pc, #116]	; d8d4 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0xa0>
    return (idx + amount) % m_store_size;
    d860:	2604      	movs	r6, #4
    d862:	fbb2 f1f3 	udiv	r1, r2, r3
    d866:	fb03 2411 	mls	r4, r3, r1, r2
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d86a:	429c      	cmp	r4, r3
    d86c:	d224      	bcs.n	d8b8 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x84>
        value = (value << 8) | static_cast<U32>(m_store[idx]);
    d86e:	682b      	ldr	r3, [r5, #0]
    d870:	683a      	ldr	r2, [r7, #0]
    d872:	5d1b      	ldrb	r3, [r3, r4]
    d874:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d878:	603b      	str	r3, [r7, #0]
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d87a:	686b      	ldr	r3, [r5, #4]
    d87c:	42a3      	cmp	r3, r4
    d87e:	d914      	bls.n	d8aa <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x76>
    return (idx + amount) % m_store_size;
    d880:	3401      	adds	r4, #1
    for (NATIVE_UINT_TYPE i = 0; i < sizeof(U32); i++) {
    d882:	3e01      	subs	r6, #1
    return (idx + amount) % m_store_size;
    d884:	fbb4 f2f3 	udiv	r2, r4, r3
    d888:	fb03 4412 	mls	r4, r3, r2, r4
    for (NATIVE_UINT_TYPE i = 0; i < sizeof(U32); i++) {
    d88c:	d1ed      	bne.n	d86a <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x36>
    return Fw::FW_SERIALIZE_OK;
    d88e:	4630      	mov	r0, r6
}
    d890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d894:	216b      	movs	r1, #107	; 0x6b
    d896:	480f      	ldr	r0, [pc, #60]	; (d8d4 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0xa0>)
    d898:	f7f3 feb8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if ((sizeof(U32) + offset) > m_allocated_size) {
    d89c:	1d33      	adds	r3, r6, #4
    d89e:	68ea      	ldr	r2, [r5, #12]
    d8a0:	4293      	cmp	r3, r2
    d8a2:	d9d4      	bls.n	d84e <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x1a>
        return Fw::FW_DESERIALIZE_BUFFER_EMPTY;
    d8a4:	2003      	movs	r0, #3
}
    d8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d8aa:	4621      	mov	r1, r4
    d8ac:	2241      	movs	r2, #65	; 0x41
    d8ae:	4640      	mov	r0, r8
    d8b0:	f7f3 feba 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d8b4:	686b      	ldr	r3, [r5, #4]
    d8b6:	e7e3      	b.n	d880 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x4c>
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d8b8:	4621      	mov	r1, r4
    d8ba:	2275      	movs	r2, #117	; 0x75
    d8bc:	4640      	mov	r0, r8
    d8be:	f7f3 feb3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d8c2:	e7d4      	b.n	d86e <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x3a>
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d8c4:	2241      	movs	r2, #65	; 0x41
    d8c6:	4621      	mov	r1, r4
    d8c8:	4802      	ldr	r0, [pc, #8]	; (d8d4 <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0xa0>)
    d8ca:	f7f3 fead 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d8ce:	686b      	ldr	r3, [r5, #4]
    d8d0:	e7c3      	b.n	d85a <Types::CircularBuffer::peek(unsigned long&, unsigned long) const+0x26>
    d8d2:	bf00      	nop
    d8d4:	20001d4c 	.word	0x20001d4c

0000d8d8 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const>:
Fw::SerializeStatus CircularBuffer :: peek(U8* buffer, NATIVE_UINT_TYPE size, NATIVE_UINT_TYPE offset) const {
    d8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d8dc:	4698      	mov	r8, r3
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d8de:	6803      	ldr	r3, [r0, #0]
Fw::SerializeStatus CircularBuffer :: peek(U8* buffer, NATIVE_UINT_TYPE size, NATIVE_UINT_TYPE offset) const {
    d8e0:	4607      	mov	r7, r0
    d8e2:	4689      	mov	r9, r1
    d8e4:	4616      	mov	r6, r2
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d8e6:	b393      	cbz	r3, d94e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x76>
    d8e8:	6843      	ldr	r3, [r0, #4]
    d8ea:	b383      	cbz	r3, d94e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x76>
    FW_ASSERT(buffer != nullptr);
    d8ec:	f1b9 0f00 	cmp.w	r9, #0
    d8f0:	d034      	beq.n	d95c <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x84>
    if ((size + offset) > m_allocated_size) {
    d8f2:	eb06 0308 	add.w	r3, r6, r8
    d8f6:	68fa      	ldr	r2, [r7, #12]
    d8f8:	4293      	cmp	r3, r2
    d8fa:	d838      	bhi.n	d96e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x96>
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d8fc:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
    d900:	42ac      	cmp	r4, r5
    d902:	d247      	bcs.n	d994 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xbc>
    return (idx + amount) % m_store_size;
    d904:	4444      	add	r4, r8
    d906:	fbb4 f3f5 	udiv	r3, r4, r5
    d90a:	fb05 4413 	mls	r4, r5, r3, r4
    for (NATIVE_UINT_TYPE i = 0; i < size; i++) {
    d90e:	2e00      	cmp	r6, #0
    d910:	d03d      	beq.n	d98e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xb6>
    d912:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
    d916:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
    d91a:	44c8      	add	r8, r9
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d91c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d9a4 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xcc>
    d920:	e00d      	b.n	d93e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x66>
        buffer[i] = m_store[idx];
    d922:	683b      	ldr	r3, [r7, #0]
    d924:	5d1b      	ldrb	r3, [r3, r4]
    d926:	f806 3f01 	strb.w	r3, [r6, #1]!
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d92a:	687d      	ldr	r5, [r7, #4]
    d92c:	42ac      	cmp	r4, r5
    d92e:	d221      	bcs.n	d974 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x9c>
    return (idx + amount) % m_store_size;
    d930:	3401      	adds	r4, #1
    for (NATIVE_UINT_TYPE i = 0; i < size; i++) {
    d932:	4546      	cmp	r6, r8
    return (idx + amount) % m_store_size;
    d934:	fbb4 f3f5 	udiv	r3, r4, r5
    d938:	fb05 4413 	mls	r4, r5, r3, r4
    for (NATIVE_UINT_TYPE i = 0; i < size; i++) {
    d93c:	d027      	beq.n	d98e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xb6>
        FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d93e:	42ac      	cmp	r4, r5
    d940:	d3ef      	bcc.n	d922 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x4a>
    d942:	4621      	mov	r1, r4
    d944:	2286      	movs	r2, #134	; 0x86
    d946:	4648      	mov	r0, r9
    d948:	f7f3 fe6e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    d94c:	e7e9      	b.n	d922 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x4a>
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d94e:	217d      	movs	r1, #125	; 0x7d
    d950:	4814      	ldr	r0, [pc, #80]	; (d9a4 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xcc>)
    d952:	f7f3 fe5b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(buffer != nullptr);
    d956:	f1b9 0f00 	cmp.w	r9, #0
    d95a:	d1ca      	bne.n	d8f2 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x1a>
    d95c:	217e      	movs	r1, #126	; 0x7e
    d95e:	4811      	ldr	r0, [pc, #68]	; (d9a4 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xcc>)
    d960:	f7f3 fe54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if ((size + offset) > m_allocated_size) {
    d964:	eb06 0308 	add.w	r3, r6, r8
    d968:	68fa      	ldr	r2, [r7, #12]
    d96a:	4293      	cmp	r3, r2
    d96c:	d9c6      	bls.n	d8fc <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x24>
        return Fw::FW_DESERIALIZE_BUFFER_EMPTY;
    d96e:	2003      	movs	r0, #3
}
    d970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d974:	4621      	mov	r1, r4
    d976:	2241      	movs	r2, #65	; 0x41
    d978:	4648      	mov	r0, r9
    return (idx + amount) % m_store_size;
    d97a:	3401      	adds	r4, #1
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d97c:	f7f3 fe54 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d980:	687d      	ldr	r5, [r7, #4]
    for (NATIVE_UINT_TYPE i = 0; i < size; i++) {
    d982:	4546      	cmp	r6, r8
    return (idx + amount) % m_store_size;
    d984:	fbb4 f3f5 	udiv	r3, r4, r5
    d988:	fb05 4413 	mls	r4, r5, r3, r4
    for (NATIVE_UINT_TYPE i = 0; i < size; i++) {
    d98c:	d1d7      	bne.n	d93e <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x66>
    return Fw::FW_SERIALIZE_OK;
    d98e:	2000      	movs	r0, #0
}
    d990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d994:	2241      	movs	r2, #65	; 0x41
    d996:	4621      	mov	r1, r4
    d998:	4802      	ldr	r0, [pc, #8]	; (d9a4 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0xcc>)
    d99a:	f7f3 fe45 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return (idx + amount) % m_store_size;
    d99e:	687d      	ldr	r5, [r7, #4]
    d9a0:	e7b0      	b.n	d904 <Types::CircularBuffer::peek(unsigned char*, unsigned long, unsigned long) const+0x2c>
    d9a2:	bf00      	nop
    d9a4:	20001d4c 	.word	0x20001d4c

0000d9a8 <Types::CircularBuffer::rotate(unsigned long)>:
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d9a8:	6803      	ldr	r3, [r0, #0]
Fw::SerializeStatus CircularBuffer :: rotate(NATIVE_UINT_TYPE amount) {
    d9aa:	b570      	push	{r4, r5, r6, lr}
    d9ac:	4604      	mov	r4, r0
    d9ae:	460e      	mov	r6, r1
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d9b0:	b193      	cbz	r3, d9d8 <Types::CircularBuffer::rotate(unsigned long)+0x30>
    d9b2:	6843      	ldr	r3, [r0, #4]
    d9b4:	b183      	cbz	r3, d9d8 <Types::CircularBuffer::rotate(unsigned long)+0x30>
    if (amount > m_allocated_size) {
    d9b6:	68e3      	ldr	r3, [r4, #12]
    d9b8:	42b3      	cmp	r3, r6
    d9ba:	d314      	bcc.n	d9e6 <Types::CircularBuffer::rotate(unsigned long)+0x3e>
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d9bc:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
    d9c0:	4295      	cmp	r5, r2
    d9c2:	d212      	bcs.n	d9ea <Types::CircularBuffer::rotate(unsigned long)+0x42>
    return (idx + amount) % m_store_size;
    d9c4:	4435      	add	r5, r6
    m_allocated_size -= amount;
    d9c6:	1b9b      	subs	r3, r3, r6
    return Fw::FW_SERIALIZE_OK;
    d9c8:	2000      	movs	r0, #0
    m_allocated_size -= amount;
    d9ca:	60e3      	str	r3, [r4, #12]
    return (idx + amount) % m_store_size;
    d9cc:	fbb5 f3f2 	udiv	r3, r5, r2
    d9d0:	fb02 5513 	mls	r5, r2, r3, r5
    m_head_idx = advance_idx(m_head_idx, amount);
    d9d4:	60a5      	str	r5, [r4, #8]
}
    d9d6:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    d9d8:	218e      	movs	r1, #142	; 0x8e
    d9da:	4808      	ldr	r0, [pc, #32]	; (d9fc <Types::CircularBuffer::rotate(unsigned long)+0x54>)
    d9dc:	f7f3 fe16 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (amount > m_allocated_size) {
    d9e0:	68e3      	ldr	r3, [r4, #12]
    d9e2:	42b3      	cmp	r3, r6
    d9e4:	d2ea      	bcs.n	d9bc <Types::CircularBuffer::rotate(unsigned long)+0x14>
        return Fw::FW_DESERIALIZE_BUFFER_EMPTY;
    d9e6:	2003      	movs	r0, #3
}
    d9e8:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(idx < m_store_size, static_cast<FwAssertArgType>(idx));
    d9ea:	2241      	movs	r2, #65	; 0x41
    d9ec:	4629      	mov	r1, r5
    d9ee:	4803      	ldr	r0, [pc, #12]	; (d9fc <Types::CircularBuffer::rotate(unsigned long)+0x54>)
    d9f0:	f7f3 fe1a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    m_allocated_size -= amount;
    d9f4:	68e3      	ldr	r3, [r4, #12]
    return (idx + amount) % m_store_size;
    d9f6:	6862      	ldr	r2, [r4, #4]
    d9f8:	e7e4      	b.n	d9c4 <Types::CircularBuffer::rotate(unsigned long)+0x1c>
    d9fa:	bf00      	nop
    d9fc:	20001d4c 	.word	0x20001d4c

0000da00 <Types::CircularBuffer::get_capacity() const>:
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    da00:	6803      	ldr	r3, [r0, #0]
NATIVE_UINT_TYPE CircularBuffer ::get_capacity() const {
    da02:	b510      	push	{r4, lr}
    da04:	4604      	mov	r4, r0
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    da06:	b113      	cbz	r3, da0e <Types::CircularBuffer::get_capacity() const+0xe>
    da08:	6840      	ldr	r0, [r0, #4]
    da0a:	b100      	cbz	r0, da0e <Types::CircularBuffer::get_capacity() const+0xe>
}
    da0c:	bd10      	pop	{r4, pc}
    FW_ASSERT(m_store != nullptr && m_store_size != 0); // setup method was called
    da0e:	2199      	movs	r1, #153	; 0x99
    da10:	4802      	ldr	r0, [pc, #8]	; (da1c <Types::CircularBuffer::get_capacity() const+0x1c>)
    da12:	f7f3 fdfb 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return m_store_size;
    da16:	6860      	ldr	r0, [r4, #4]
}
    da18:	bd10      	pop	{r4, pc}
    da1a:	bf00      	nop
    da1c:	20001d4c 	.word	0x20001d4c

0000da20 <Fw::(anonymous namespace)::SuccessConditionPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputSuccessConditionPort::SERIALIZED_SIZE;
        }
    da20:	2004      	movs	r0, #4
    da22:	4770      	bx	lr

0000da24 <Fw::(anonymous namespace)::SuccessConditionPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
    da24:	300c      	adds	r0, #12
    da26:	4770      	bx	lr

0000da28 <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputSuccessConditionPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    da28:	b570      	push	{r4, r5, r6, lr}
    da2a:	4604      	mov	r4, r0
    da2c:	b082      	sub	sp, #8
    da2e:	460d      	mov	r5, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
    da30:	f00a fa12 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
    da34:	6e63      	ldr	r3, [r4, #100]	; 0x64
    da36:	b1db      	cbz	r3, da70 <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>
    FW_ASSERT(this->m_func != nullptr);
    da38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    da3a:	b303      	cbz	r3, da7e <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x56>
      {
    da3c:	4668      	mov	r0, sp
    da3e:	4e12      	ldr	r6, [pc, #72]	; (da88 <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x60>)
    da40:	f7f2 fd76 	bl	530 <Fw::Serializable::Serializable()>
        this->e = FAILURE;
    da44:	2300      	movs	r3, #0

    Fw::Success condition;
    _status = _buffer.deserialize(condition);
    da46:	4628      	mov	r0, r5
    da48:	4669      	mov	r1, sp
      {
    da4a:	9600      	str	r6, [sp, #0]
        this->e = FAILURE;
    da4c:	f88d 3004 	strb.w	r3, [sp, #4]
    da50:	f7f3 fa40 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    da54:	4605      	mov	r5, r0
    da56:	b920      	cbnz	r0, da62 <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x3a>
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, condition);
    da58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    da5a:	466a      	mov	r2, sp
    da5c:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
    da60:	4798      	blx	r3
  class Success :
    da62:	4668      	mov	r0, sp
    da64:	9600      	str	r6, [sp, #0]
    da66:	f7f2 fd69 	bl	53c <Fw::Serializable::~Serializable()>

    return Fw::FW_SERIALIZE_OK;
  }
    da6a:	4628      	mov	r0, r5
    da6c:	b002      	add	sp, #8
    da6e:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
    da70:	2163      	movs	r1, #99	; 0x63
    da72:	4806      	ldr	r0, [pc, #24]	; (da8c <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>)
    da74:	f7f3 fdca 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    da78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    da7a:	2b00      	cmp	r3, #0
    da7c:	d1de      	bne.n	da3c <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    da7e:	2164      	movs	r1, #100	; 0x64
    da80:	4802      	ldr	r0, [pc, #8]	; (da8c <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>)
    da82:	f7f3 fdc3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    da86:	e7d9      	b.n	da3c <Fw::InputSuccessConditionPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    da88:	20003318 	.word	0x20003318
    da8c:	20000c68 	.word	0x20000c68

0000da90 <Fw::(anonymous namespace)::SuccessConditionPortBuffer::~SuccessConditionPortBuffer()>:
    class SuccessConditionPortBuffer : public Fw::SerializeBufferBase {
    da90:	4b03      	ldr	r3, [pc, #12]	; (daa0 <Fw::(anonymous namespace)::SuccessConditionPortBuffer::~SuccessConditionPortBuffer()+0x10>)
    da92:	b510      	push	{r4, lr}
    da94:	4604      	mov	r4, r0
    da96:	6003      	str	r3, [r0, #0]
    da98:	f7f2 fd5a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    da9c:	4620      	mov	r0, r4
    da9e:	bd10      	pop	{r4, pc}
    daa0:	20002e94 	.word	0x20002e94

0000daa4 <Fw::(anonymous namespace)::SuccessConditionPortBuffer::~SuccessConditionPortBuffer()>:
    daa4:	4b05      	ldr	r3, [pc, #20]	; (dabc <Fw::(anonymous namespace)::SuccessConditionPortBuffer::~SuccessConditionPortBuffer()+0x18>)
    daa6:	b510      	push	{r4, lr}
    daa8:	4604      	mov	r4, r0
    daaa:	6003      	str	r3, [r0, #0]
    daac:	f7f2 fd50 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    dab0:	2110      	movs	r1, #16
    dab2:	4620      	mov	r0, r4
    dab4:	f00b f90c 	bl	18cd0 <operator delete(void*, unsigned int)>
    dab8:	4620      	mov	r0, r4
    daba:	bd10      	pop	{r4, pc}
    dabc:	20002e94 	.word	0x20002e94

0000dac0 <Fw::OutputSuccessConditionPort::~OutputSuccessConditionPort()>:

  };

  //! Output SuccessCondition port
  //! Port communicating success or failure condition
  class OutputSuccessConditionPort :
    dac0:	4b03      	ldr	r3, [pc, #12]	; (dad0 <Fw::OutputSuccessConditionPort::~OutputSuccessConditionPort()+0x10>)
    dac2:	b510      	push	{r4, lr}
    dac4:	4604      	mov	r4, r0
    dac6:	6003      	str	r3, [r0, #0]
    dac8:	f00a f918 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    dacc:	4620      	mov	r0, r4
    dace:	bd10      	pop	{r4, pc}
    dad0:	20003250 	.word	0x20003250

0000dad4 <Fw::OutputSuccessConditionPort::~OutputSuccessConditionPort()>:
    dad4:	4b05      	ldr	r3, [pc, #20]	; (daec <Fw::OutputSuccessConditionPort::~OutputSuccessConditionPort()+0x18>)
    dad6:	b510      	push	{r4, lr}
    dad8:	4604      	mov	r4, r0
    dada:	6003      	str	r3, [r0, #0]
    dadc:	f00a f90e 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    dae0:	216c      	movs	r1, #108	; 0x6c
    dae2:	4620      	mov	r0, r4
    dae4:	f00b f8f4 	bl	18cd0 <operator delete(void*, unsigned int)>
    dae8:	4620      	mov	r0, r4
    daea:	bd10      	pop	{r4, pc}
    daec:	20003250 	.word	0x20003250

0000daf0 <Fw::InputSuccessConditionPort::~InputSuccessConditionPort()>:
  class InputSuccessConditionPort :
    daf0:	4b03      	ldr	r3, [pc, #12]	; (db00 <Fw::InputSuccessConditionPort::~InputSuccessConditionPort()+0x10>)
    daf2:	b510      	push	{r4, lr}
    daf4:	4604      	mov	r4, r0
    daf6:	6003      	str	r3, [r0, #0]
    daf8:	f00a f8e2 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    dafc:	4620      	mov	r0, r4
    dafe:	bd10      	pop	{r4, pc}
    db00:	20003230 	.word	0x20003230

0000db04 <Fw::InputSuccessConditionPort::~InputSuccessConditionPort()>:
    db04:	4b05      	ldr	r3, [pc, #20]	; (db1c <Fw::InputSuccessConditionPort::~InputSuccessConditionPort()+0x18>)
    db06:	b510      	push	{r4, lr}
    db08:	4604      	mov	r4, r0
    db0a:	6003      	str	r3, [r0, #0]
    db0c:	f00a f8d8 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    db10:	2170      	movs	r1, #112	; 0x70
    db12:	4620      	mov	r0, r4
    db14:	f00b f8dc 	bl	18cd0 <operator delete(void*, unsigned int)>
    db18:	4620      	mov	r0, r4
    db1a:	bd10      	pop	{r4, pc}
    db1c:	20003230 	.word	0x20003230

0000db20 <Fw::InputSuccessConditionPort::InputSuccessConditionPort()>:
  InputSuccessConditionPort ::
    db20:	b510      	push	{r4, lr}
    db22:	4604      	mov	r4, r0
      m_func(nullptr)
    db24:	f00a f8bc 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    db28:	4a02      	ldr	r2, [pc, #8]	; (db34 <Fw::InputSuccessConditionPort::InputSuccessConditionPort()+0x14>)
    db2a:	2300      	movs	r3, #0
  }
    db2c:	4620      	mov	r0, r4
      m_func(nullptr)
    db2e:	6022      	str	r2, [r4, #0]
    db30:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    db32:	bd10      	pop	{r4, pc}
    db34:	20003230 	.word	0x20003230

0000db38 <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))>:
  {
    db38:	b570      	push	{r4, r5, r6, lr}
    db3a:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    db3c:	460d      	mov	r5, r1
  {
    db3e:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    db40:	b121      	cbz	r1, db4c <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    db42:	b14e      	cbz	r6, db58 <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))+0x20>
    this->m_comp = callComp;
    db44:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    db46:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    db48:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    db4a:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    db4c:	2143      	movs	r1, #67	; 0x43
    db4e:	4806      	ldr	r0, [pc, #24]	; (db68 <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))+0x30>)
    db50:	f7f3 fd5c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    db54:	2e00      	cmp	r6, #0
    db56:	d1f5      	bne.n	db44 <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))+0xc>
    db58:	2144      	movs	r1, #68	; 0x44
    db5a:	4803      	ldr	r0, [pc, #12]	; (db68 <Fw::InputSuccessConditionPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Success&))+0x30>)
    db5c:	f7f3 fd56 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    db60:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    db62:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    db64:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    db66:	bd70      	pop	{r4, r5, r6, pc}
    db68:	20000c68 	.word	0x20000c68

0000db6c <Fw::InputSuccessConditionPort::invoke(Fw::Success&)>:
  {
    db6c:	b510      	push	{r4, lr}
    db6e:	4604      	mov	r4, r0
    db70:	b082      	sub	sp, #8
    db72:	9101      	str	r1, [sp, #4]
    this->trace();
    db74:	f00a f970 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    db78:	6e63      	ldr	r3, [r4, #100]	; 0x64
    db7a:	9a01      	ldr	r2, [sp, #4]
    db7c:	b13b      	cbz	r3, db8e <Fw::InputSuccessConditionPort::invoke(Fw::Success&)+0x22>
    FW_ASSERT(this->m_func != nullptr);
    db7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    db80:	b16b      	cbz	r3, db9e <Fw::InputSuccessConditionPort::invoke(Fw::Success&)+0x32>
    return this->m_func(this->m_comp, this->m_portNum, condition);
    db82:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    db86:	b002      	add	sp, #8
    db88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, condition);
    db8c:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
    db8e:	2152      	movs	r1, #82	; 0x52
    db90:	4809      	ldr	r0, [pc, #36]	; (dbb8 <Fw::InputSuccessConditionPort::invoke(Fw::Success&)+0x4c>)
    db92:	f7f3 fd3b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    db96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    db98:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    db9a:	2b00      	cmp	r3, #0
    db9c:	d1f1      	bne.n	db82 <Fw::InputSuccessConditionPort::invoke(Fw::Success&)+0x16>
    db9e:	2153      	movs	r1, #83	; 0x53
    dba0:	4805      	ldr	r0, [pc, #20]	; (dbb8 <Fw::InputSuccessConditionPort::invoke(Fw::Success&)+0x4c>)
    dba2:	9201      	str	r2, [sp, #4]
    dba4:	f7f3 fd32 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, condition);
    dba8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    dbaa:	9a01      	ldr	r2, [sp, #4]
    dbac:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    dbb0:	b002      	add	sp, #8
    dbb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, condition);
    dbb6:	4718      	bx	r3
    dbb8:	20000c68 	.word	0x20000c68

0000dbbc <Fw::OutputSuccessConditionPort::OutputSuccessConditionPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputSuccessConditionPort ::
    dbbc:	b510      	push	{r4, lr}
    dbbe:	4604      	mov	r4, r0
    OutputSuccessConditionPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    dbc0:	f00a f8b4 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    dbc4:	4a02      	ldr	r2, [pc, #8]	; (dbd0 <Fw::OutputSuccessConditionPort::OutputSuccessConditionPort()+0x14>)
    dbc6:	2300      	movs	r3, #0
  {

  }
    dbc8:	4620      	mov	r0, r4
      m_port(nullptr)
    dbca:	6022      	str	r2, [r4, #0]
    dbcc:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    dbce:	bd10      	pop	{r4, pc}
    dbd0:	20003250 	.word	0x20003250

0000dbd4 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const>:
#endif
  }

  void OutputSuccessConditionPort ::
    invoke(Fw::Success& condition) const
  {
    dbd4:	b570      	push	{r4, r5, r6, lr}
    dbd6:	4604      	mov	r4, r0
    dbd8:	b084      	sub	sp, #16
    dbda:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
    dbdc:	f00a f93c 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    dbe0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    dbe2:	b128      	cbz	r0, dbf0 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(condition);
    dbe4:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(condition);
#endif
  }
    dbe6:	b004      	add	sp, #16
    dbe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(condition);
    dbec:	f7ff bfbe 	b.w	db6c <Fw::InputSuccessConditionPort::invoke(Fw::Success&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    dbf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dbf2:	b30b      	cbz	r3, dc38 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x64>
    class SuccessConditionPortBuffer : public Fw::SerializeBufferBase {
    dbf4:	4e14      	ldr	r6, [pc, #80]	; (dc48 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x74>)
    dbf6:	4668      	mov	r0, sp
    dbf8:	f7f2 fca2 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(condition);
    dbfc:	4629      	mov	r1, r5
    dbfe:	4668      	mov	r0, sp
    class SuccessConditionPortBuffer : public Fw::SerializeBufferBase {
    dc00:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(condition);
    dc02:	f7f2 ff7d 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    dc06:	b958      	cbnz	r0, dc20 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
    dc08:	6e60      	ldr	r0, [r4, #100]	; 0x64
    dc0a:	4669      	mov	r1, sp
    dc0c:	6803      	ldr	r3, [r0, #0]
    dc0e:	695b      	ldr	r3, [r3, #20]
    dc10:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    dc12:	b958      	cbnz	r0, dc2c <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x58>
    class SuccessConditionPortBuffer : public Fw::SerializeBufferBase {
    dc14:	4668      	mov	r0, sp
    dc16:	9600      	str	r6, [sp, #0]
    dc18:	f7f2 fc9a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    dc1c:	b004      	add	sp, #16
    dc1e:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    dc20:	4601      	mov	r1, r0
    dc22:	22a4      	movs	r2, #164	; 0xa4
    dc24:	4809      	ldr	r0, [pc, #36]	; (dc4c <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x78>)
    dc26:	f7f3 fcff 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    dc2a:	e7ed      	b.n	dc08 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    dc2c:	4601      	mov	r1, r0
    dc2e:	22a7      	movs	r2, #167	; 0xa7
    dc30:	4806      	ldr	r0, [pc, #24]	; (dc4c <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x78>)
    dc32:	f7f3 fcf9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    dc36:	e7ed      	b.n	dc14 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    dc38:	219a      	movs	r1, #154	; 0x9a
    dc3a:	4804      	ldr	r0, [pc, #16]	; (dc4c <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x78>)
    dc3c:	f7f3 fce6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
    dc40:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    dc42:	2800      	cmp	r0, #0
    dc44:	d0d6      	beq.n	dbf4 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x20>
    dc46:	e7cd      	b.n	dbe4 <Fw::OutputSuccessConditionPort::invoke(Fw::Success&) const+0x10>
    dc48:	20002e94 	.word	0x20002e94
    dc4c:	20000c68 	.word	0x20000c68

0000dc50 <Fw::InputSuccessConditionPort::init()>:
    Fw::InputPortBase::init();
    dc50:	f00a b84e 	b.w	17cf0 <Fw::InputPortBase::init()>

0000dc54 <Fw::OutputSuccessConditionPort::init()>:
    Fw::OutputPortBase::init();
    dc54:	f00a b876 	b.w	17d44 <Fw::OutputPortBase::init()>

0000dc58 <Svc::ConsoleTextLoggerImpl::~ConsoleTextLoggerImpl()>:

    ConsoleTextLoggerImpl::ConsoleTextLoggerImpl(const char* compName) :
        PassiveTextLoggerComponentBase(compName) {
    }

    ConsoleTextLoggerImpl::~ConsoleTextLoggerImpl() {}
    dc58:	4b03      	ldr	r3, [pc, #12]	; (dc68 <Svc::ConsoleTextLoggerImpl::~ConsoleTextLoggerImpl()+0x10>)
    dc5a:	b510      	push	{r4, lr}
    dc5c:	4604      	mov	r4, r0
    dc5e:	6003      	str	r3, [r0, #0]
    dc60:	f000 f8cc 	bl	ddfc <Svc::PassiveTextLoggerComponentBase::~PassiveTextLoggerComponentBase()>
    dc64:	4620      	mov	r0, r4
    dc66:	bd10      	pop	{r4, pc}
    dc68:	20003c9c 	.word	0x20003c9c

0000dc6c <Svc::ConsoleTextLoggerImpl::~ConsoleTextLoggerImpl()>:
    dc6c:	4b05      	ldr	r3, [pc, #20]	; (dc84 <Svc::ConsoleTextLoggerImpl::~ConsoleTextLoggerImpl()+0x18>)
    dc6e:	b510      	push	{r4, lr}
    dc70:	4604      	mov	r4, r0
    dc72:	6003      	str	r3, [r0, #0]
    dc74:	f000 f8c2 	bl	ddfc <Svc::PassiveTextLoggerComponentBase::~PassiveTextLoggerComponentBase()>
    dc78:	21d4      	movs	r1, #212	; 0xd4
    dc7a:	4620      	mov	r0, r4
    dc7c:	f00b f828 	bl	18cd0 <operator delete(void*, unsigned int)>
    dc80:	4620      	mov	r0, r4
    dc82:	bd10      	pop	{r4, pc}
    dc84:	20003c9c 	.word	0x20003c9c

0000dc88 <Svc::ConsoleTextLoggerImpl::TextLogger_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)>:

    void ConsoleTextLoggerImpl::TextLogger_handler(NATIVE_INT_TYPE portNum, FwEventIdType id, Fw::Time &timeTag, const Fw::LogSeverity& severity, Fw::TextLogString &text) {
    dc88:	b530      	push	{r4, r5, lr}
    dc8a:	b089      	sub	sp, #36	; 0x24
    dc8c:	461c      	mov	r4, r3
    dc8e:	990c      	ldr	r1, [sp, #48]	; 0x30
    dc90:	f891 c004 	ldrb.w	ip, [r1, #4]
    dc94:	4611      	mov	r1, r2
    dc96:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    dc9a:	fa5f fc8c 	uxtb.w	ip, ip
    dc9e:	f1bc 0f06 	cmp.w	ip, #6
    dca2:	d81d      	bhi.n	dce0 <Svc::ConsoleTextLoggerImpl::TextLogger_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x58>
    dca4:	4b0f      	ldr	r3, [pc, #60]	; (dce4 <Svc::ConsoleTextLoggerImpl::TextLogger_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x5c>)
    dca6:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
            default:
                severityString = "SEVERITY ERROR";
                break;
        }
        Fw::Logger::log("EVENT: (%" PRI_FwEventIdType ") (%" PRI_FwTimeBaseStoreType ":%" PRIu32 ",%" PRIu32 ") %s: %s\n",
                id, static_cast<FwTimeBaseStoreType>(timeTag.getTimeBase()), timeTag.getSeconds(), timeTag.getUSeconds(),
    dcaa:	4620      	mov	r0, r4
    dcac:	9107      	str	r1, [sp, #28]
    dcae:	f009 fe61 	bl	17974 <Fw::Time::getTimeBase() const>
    dcb2:	9006      	str	r0, [sp, #24]
        Fw::Logger::log("EVENT: (%" PRI_FwEventIdType ") (%" PRI_FwTimeBaseStoreType ":%" PRIu32 ",%" PRIu32 ") %s: %s\n",
    dcb4:	4620      	mov	r0, r4
    dcb6:	f009 fe59 	bl	1796c <Fw::Time::getSeconds() const>
    dcba:	4603      	mov	r3, r0
    dcbc:	4620      	mov	r0, r4
    dcbe:	9305      	str	r3, [sp, #20]
    dcc0:	f009 fe56 	bl	17970 <Fw::Time::getUSeconds() const>
    const char* toChar() const { return this->m_buf; }
    dcc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dcc6:	4604      	mov	r4, r0
    dcc8:	9907      	ldr	r1, [sp, #28]
    dcca:	1d18      	adds	r0, r3, #4
    dccc:	9501      	str	r5, [sp, #4]
    dcce:	9400      	str	r4, [sp, #0]
    dcd0:	9002      	str	r0, [sp, #8]
    dcd2:	4805      	ldr	r0, [pc, #20]	; (dce8 <Svc::ConsoleTextLoggerImpl::TextLogger_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x60>)
    dcd4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    dcd8:	f7f3 fcf6 	bl	16c8 <Fw::Logger::log(char const*, ...)>
                reinterpret_cast<PlatformPointerCastType>(severityString), reinterpret_cast<PlatformPointerCastType>(text.toChar()));
    }
    dcdc:	b009      	add	sp, #36	; 0x24
    dcde:	bd30      	pop	{r4, r5, pc}
        switch (severity.e) {
    dce0:	4d02      	ldr	r5, [pc, #8]	; (dcec <Svc::ConsoleTextLoggerImpl::TextLogger_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x64>)
    dce2:	e7e2      	b.n	dcaa <Svc::ConsoleTextLoggerImpl::TextLogger_handler(long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x22>
    dce4:	200003b0 	.word	0x200003b0
    dce8:	200014a0 	.word	0x200014a0
    dcec:	20001490 	.word	0x20001490

0000dcf0 <Svc::ConsoleTextLoggerImpl::ConsoleTextLoggerImpl(char const*)>:
    ConsoleTextLoggerImpl::ConsoleTextLoggerImpl(const char* compName) :
    dcf0:	b510      	push	{r4, lr}
    dcf2:	4604      	mov	r4, r0
        PassiveTextLoggerComponentBase(compName) {
    dcf4:	f000 f874 	bl	dde0 <Svc::PassiveTextLoggerComponentBase::PassiveTextLoggerComponentBase(char const*)>
    dcf8:	4b01      	ldr	r3, [pc, #4]	; (dd00 <Svc::ConsoleTextLoggerImpl::ConsoleTextLoggerImpl(char const*)+0x10>)
    }
    dcfa:	4620      	mov	r0, r4
        PassiveTextLoggerComponentBase(compName) {
    dcfc:	6023      	str	r3, [r4, #0]
    }
    dcfe:	bd10      	pop	{r4, pc}
    dd00:	20003c9c 	.word	0x20003c9c

0000dd04 <Svc::PassiveTextLoggerComponentBase::m_p_TextLogger_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)>:
        FwEventIdType id,
        Fw::Time& timeTag,
        const Fw::LogSeverity& severity,
        Fw::TextLogString& text
    )
  {
    dd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd08:	b082      	sub	sp, #8
    dd0a:	460d      	mov	r5, r1
    dd0c:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    dd0e:	4604      	mov	r4, r0
  {
    dd10:	9f08      	ldr	r7, [sp, #32]
    dd12:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    FW_ASSERT(callComp);
    dd16:	b1a0      	cbz	r0, dd42 <Svc::PassiveTextLoggerComponentBase::m_p_TextLogger_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x3e>
    FW_ASSERT(
    dd18:	2d00      	cmp	r5, #0
    dd1a:	dd06      	ble.n	dd2a <Svc::PassiveTextLoggerComponentBase::m_p_TextLogger_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x26>
    dd1c:	226d      	movs	r2, #109	; 0x6d
    dd1e:	4629      	mov	r1, r5
    dd20:	480b      	ldr	r0, [pc, #44]	; (dd50 <Svc::PassiveTextLoggerComponentBase::m_p_TextLogger_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x4c>)
    dd22:	9301      	str	r3, [sp, #4]
    dd24:	f7f3 fc80 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    dd28:	9b01      	ldr	r3, [sp, #4]
    this->TextLogger_handler(
    dd2a:	4629      	mov	r1, r5
    dd2c:	4620      	mov	r0, r4
    dd2e:	4632      	mov	r2, r6
    dd30:	e9cd 7808 	strd	r7, r8, [sp, #32]
    dd34:	6825      	ldr	r5, [r4, #0]
    dd36:	692c      	ldr	r4, [r5, #16]
    dd38:	46a4      	mov	ip, r4
      id,
      timeTag,
      severity,
      text
    );
  }
    dd3a:	b002      	add	sp, #8
    dd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    this->TextLogger_handler(
    dd40:	4760      	bx	ip
    FW_ASSERT(callComp);
    dd42:	218a      	movs	r1, #138	; 0x8a
    dd44:	4802      	ldr	r0, [pc, #8]	; (dd50 <Svc::PassiveTextLoggerComponentBase::m_p_TextLogger_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x4c>)
    dd46:	9301      	str	r3, [sp, #4]
    dd48:	f7f3 fc60 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    dd4c:	9b01      	ldr	r3, [sp, #4]
    dd4e:	e7e3      	b.n	dd18 <Svc::PassiveTextLoggerComponentBase::m_p_TextLogger_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x14>
    dd50:	20001bac 	.word	0x20001bac

0000dd54 <Svc::PassiveTextLoggerComponentBase::init(long)>:
  {
    dd54:	b570      	push	{r4, r5, r6, lr}
    dd56:	4604      	mov	r4, r0
    dd58:	b096      	sub	sp, #88	; 0x58
    Fw::PassiveComponentBase::init(instance);
    dd5a:	f004 f8c1 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
    ObjectName() : StringBase() { *this = ""; }
    dd5e:	4e14      	ldr	r6, [pc, #80]	; (ddb0 <Svc::PassiveTextLoggerComponentBase::init(long)+0x5c>)
      this->m_TextLogger_InputPort[port].init();
    dd60:	f104 0564 	add.w	r5, r4, #100	; 0x64
    dd64:	4628      	mov	r0, r5
    dd66:	f009 f843 	bl	16df0 <Fw::InputLogTextPort::init()>
      this->m_TextLogger_InputPort[port].addCallComp(
    dd6a:	4a12      	ldr	r2, [pc, #72]	; (ddb4 <Svc::PassiveTextLoggerComponentBase::init(long)+0x60>)
    dd6c:	4621      	mov	r1, r4
    dd6e:	4628      	mov	r0, r5
    dd70:	f008 ff72 	bl	16c58 <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))>
      this->m_TextLogger_InputPort[port].setPortNum(port);
    dd74:	2100      	movs	r1, #0
    dd76:	4628      	mov	r0, r5
    dd78:	f009 ffac 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    dd7c:	4668      	mov	r0, sp
    dd7e:	f7f3 fa4f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    dd82:	490d      	ldr	r1, [pc, #52]	; (ddb8 <Svc::PassiveTextLoggerComponentBase::init(long)+0x64>)
    dd84:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    dd86:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    dd88:	f7f3 fab2 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    dd8c:	2300      	movs	r3, #0
    dd8e:	f104 0208 	add.w	r2, r4, #8
    dd92:	490a      	ldr	r1, [pc, #40]	; (ddbc <Svc::PassiveTextLoggerComponentBase::init(long)+0x68>)
    dd94:	4668      	mov	r0, sp
    dd96:	f7f3 fa79 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_TextLogger_InputPort[port].setObjName(portName.toChar());
    dd9a:	4628      	mov	r0, r5
    dd9c:	a901      	add	r1, sp, #4
    dd9e:	f00a f8ff 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    dda2:	4668      	mov	r0, sp
    dda4:	9600      	str	r6, [sp, #0]
    dda6:	f7f3 fa45 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    ddaa:	b016      	add	sp, #88	; 0x58
    ddac:	bd70      	pop	{r4, r5, r6, pc}
    ddae:	bf00      	nop
    ddb0:	20002b80 	.word	0x20002b80
    ddb4:	0000dd05 	.word	0x0000dd05
    ddb8:	20001d2c 	.word	0x20001d2c
    ddbc:	20001c14 	.word	0x20001c14

0000ddc0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)>:
  {
    ddc0:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    ddc2:	1e0c      	subs	r4, r1, #0
  {
    ddc4:	4605      	mov	r5, r0
    FW_ASSERT(
    ddc6:	dd03      	ble.n	ddd0 <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)+0x10>
    ddc8:	223a      	movs	r2, #58	; 0x3a
    ddca:	4804      	ldr	r0, [pc, #16]	; (dddc <Svc::PassiveTextLoggerComponentBase::get_TextLogger_InputPort(long)+0x1c>)
    ddcc:	f7f3 fc2c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_TextLogger_InputPort[portNum];
    ddd0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ddd4:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    ddd8:	3064      	adds	r0, #100	; 0x64
    ddda:	bd38      	pop	{r3, r4, r5, pc}
    dddc:	20001bac 	.word	0x20001bac

0000dde0 <Svc::PassiveTextLoggerComponentBase::PassiveTextLoggerComponentBase(char const*)>:
  PassiveTextLoggerComponentBase ::
    dde0:	b510      	push	{r4, lr}
    dde2:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    dde4:	f004 f86e 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    dde8:	4b03      	ldr	r3, [pc, #12]	; (ddf8 <Svc::PassiveTextLoggerComponentBase::PassiveTextLoggerComponentBase(char const*)+0x18>)
    ddea:	4620      	mov	r0, r4
    ddec:	f840 3b64 	str.w	r3, [r0], #100
    ddf0:	f008 ff26 	bl	16c40 <Fw::InputLogTextPort::InputLogTextPort()>
  }
    ddf4:	4620      	mov	r0, r4
    ddf6:	bd10      	pop	{r4, pc}
    ddf8:	20003e84 	.word	0x20003e84

0000ddfc <Svc::PassiveTextLoggerComponentBase::~PassiveTextLoggerComponentBase()>:
  PassiveTextLoggerComponentBase ::
    ddfc:	b510      	push	{r4, lr}
    ~PassiveTextLoggerComponentBase()
    ddfe:	4b06      	ldr	r3, [pc, #24]	; (de18 <Svc::PassiveTextLoggerComponentBase::~PassiveTextLoggerComponentBase()+0x1c>)
  PassiveTextLoggerComponentBase ::
    de00:	4604      	mov	r4, r0
    ~PassiveTextLoggerComponentBase()
    de02:	f840 3b64 	str.w	r3, [r0], #100
    de06:	6e63      	ldr	r3, [r4, #100]	; 0x64
    de08:	685b      	ldr	r3, [r3, #4]
    de0a:	4798      	blx	r3
    de0c:	4620      	mov	r0, r4
    de0e:	f004 f801 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    de12:	4620      	mov	r0, r4
    de14:	bd10      	pop	{r4, pc}
    de16:	bf00      	nop
    de18:	20003e84 	.word	0x20003e84

0000de1c <Svc::PassiveRateGroup::~PassiveRateGroup()>:
namespace Svc {
PassiveRateGroup::PassiveRateGroup(const char* compName)
    : PassiveRateGroupComponentBase(compName), m_cycles(0), m_maxTime(0), m_numContexts(0) {
}

PassiveRateGroup::~PassiveRateGroup() {}
    de1c:	4b03      	ldr	r3, [pc, #12]	; (de2c <Svc::PassiveRateGroup::~PassiveRateGroup()+0x10>)
    de1e:	b510      	push	{r4, lr}
    de20:	4604      	mov	r4, r0
    de22:	6003      	str	r3, [r0, #0]
    de24:	f000 f9f8 	bl	e218 <Svc::PassiveRateGroupComponentBase::~PassiveRateGroupComponentBase()>
    de28:	4620      	mov	r0, r4
    de2a:	bd10      	pop	{r4, pc}
    de2c:	20003b3c 	.word	0x20003b3c

0000de30 <Svc::PassiveRateGroup::~PassiveRateGroup()>:
    de30:	4b06      	ldr	r3, [pc, #24]	; (de4c <Svc::PassiveRateGroup::~PassiveRateGroup()+0x1c>)
    de32:	b510      	push	{r4, lr}
    de34:	4604      	mov	r4, r0
    de36:	6003      	str	r3, [r0, #0]
    de38:	f000 f9ee 	bl	e218 <Svc::PassiveRateGroupComponentBase::~PassiveRateGroupComponentBase()>
    de3c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
    de40:	4620      	mov	r0, r4
    de42:	f00a ff45 	bl	18cd0 <operator delete(void*, unsigned int)>
    de46:	4620      	mov	r0, r4
    de48:	bd10      	pop	{r4, pc}
    de4a:	bf00      	nop
    de4c:	20003b3c 	.word	0x20003b3c

0000de50 <Svc::PassiveRateGroup::PassiveRateGroup(char const*)>:
PassiveRateGroup::PassiveRateGroup(const char* compName)
    de50:	b510      	push	{r4, lr}
    de52:	4604      	mov	r4, r0
    : PassiveRateGroupComponentBase(compName), m_cycles(0), m_maxTime(0), m_numContexts(0) {
    de54:	f000 f9ba 	bl	e1cc <Svc::PassiveRateGroupComponentBase::PassiveRateGroupComponentBase(char const*)>
    de58:	2300      	movs	r3, #0
    de5a:	4a05      	ldr	r2, [pc, #20]	; (de70 <Svc::PassiveRateGroup::PassiveRateGroup(char const*)+0x20>)
}
    de5c:	4620      	mov	r0, r4
    : PassiveRateGroupComponentBase(compName), m_cycles(0), m_maxTime(0), m_numContexts(0) {
    de5e:	6022      	str	r2, [r4, #0]
    de60:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
    de64:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
    de68:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
}
    de6c:	bd10      	pop	{r4, pc}
    de6e:	bf00      	nop
    de70:	20003b3c 	.word	0x20003b3c

0000de74 <Svc::PassiveRateGroup::configure(long*, long)>:

void PassiveRateGroup::configure(NATIVE_INT_TYPE contexts[], NATIVE_INT_TYPE numContexts) {
    de74:	b570      	push	{r4, r5, r6, lr}
    de76:	4605      	mov	r5, r0
    FW_ASSERT(contexts);
    de78:	460c      	mov	r4, r1
void PassiveRateGroup::configure(NATIVE_INT_TYPE contexts[], NATIVE_INT_TYPE numContexts) {
    de7a:	4616      	mov	r6, r2
    FW_ASSERT(contexts);
    de7c:	b361      	cbz	r1, ded8 <Svc::PassiveRateGroup::configure(long*, long)+0x64>
    FW_ASSERT(numContexts == this->getNum_RateGroupMemberOut_OutputPorts(),numContexts,this->getNum_RateGroupMemberOut_OutputPorts());
    de7e:	4628      	mov	r0, r5
    de80:	f000 f9f2 	bl	e268 <Svc::PassiveRateGroupComponentBase::getNum_RateGroupMemberOut_OutputPorts() const>
    de84:	42b0      	cmp	r0, r6
    de86:	d008      	beq.n	de9a <Svc::PassiveRateGroup::configure(long*, long)+0x26>
    de88:	4628      	mov	r0, r5
    de8a:	f000 f9ed 	bl	e268 <Svc::PassiveRateGroupComponentBase::getNum_RateGroupMemberOut_OutputPorts() const>
    de8e:	231c      	movs	r3, #28
    de90:	4602      	mov	r2, r0
    de92:	4631      	mov	r1, r6
    de94:	4813      	ldr	r0, [pc, #76]	; (dee4 <Svc::PassiveRateGroup::configure(long*, long)+0x70>)
    de96:	f7f3 fbd7 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(FW_NUM_ARRAY_ELEMENTS(this->m_contexts) == this->getNum_RateGroupMemberOut_OutputPorts(),
    de9a:	4628      	mov	r0, r5
    de9c:	f000 f9e4 	bl	e268 <Svc::PassiveRateGroupComponentBase::getNum_RateGroupMemberOut_OutputPorts() const>
    dea0:	280a      	cmp	r0, #10
    dea2:	d008      	beq.n	deb6 <Svc::PassiveRateGroup::configure(long*, long)+0x42>
    dea4:	4628      	mov	r0, r5
    dea6:	f000 f9df 	bl	e268 <Svc::PassiveRateGroupComponentBase::getNum_RateGroupMemberOut_OutputPorts() const>
    deaa:	231d      	movs	r3, #29
    deac:	4602      	mov	r2, r0
    deae:	210a      	movs	r1, #10
    deb0:	480c      	ldr	r0, [pc, #48]	; (dee4 <Svc::PassiveRateGroup::configure(long*, long)+0x70>)
    deb2:	f7f3 fbc9 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
              FW_NUM_ARRAY_ELEMENTS(this->m_contexts),
              this->getNum_RateGroupMemberOut_OutputPorts());

    this->m_numContexts = numContexts;
    // copy context values
    for (NATIVE_INT_TYPE entry = 0; entry < this->m_numContexts; entry++) {
    deb6:	2e00      	cmp	r6, #0
    this->m_numContexts = numContexts;
    deb8:	f8c5 65f4 	str.w	r6, [r5, #1524]	; 0x5f4
    for (NATIVE_INT_TYPE entry = 0; entry < this->m_numContexts; entry++) {
    debc:	dd0b      	ble.n	ded6 <Svc::PassiveRateGroup::configure(long*, long)+0x62>
    debe:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    dec2:	1f21      	subs	r1, r4, #4
    dec4:	f205 50f4 	addw	r0, r5, #1524	; 0x5f4
    dec8:	3b04      	subs	r3, #4
        this->m_contexts[entry] = static_cast<U32>(contexts[entry]);
    deca:	f851 2f04 	ldr.w	r2, [r1, #4]!
    for (NATIVE_INT_TYPE entry = 0; entry < this->m_numContexts; entry++) {
    dece:	4299      	cmp	r1, r3
        this->m_contexts[entry] = static_cast<U32>(contexts[entry]);
    ded0:	f840 2f04 	str.w	r2, [r0, #4]!
    for (NATIVE_INT_TYPE entry = 0; entry < this->m_numContexts; entry++) {
    ded4:	d1f9      	bne.n	deca <Svc::PassiveRateGroup::configure(long*, long)+0x56>
    }
}
    ded6:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(contexts);
    ded8:	211b      	movs	r1, #27
    deda:	4802      	ldr	r0, [pc, #8]	; (dee4 <Svc::PassiveRateGroup::configure(long*, long)+0x70>)
    dedc:	f7f3 fb96 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    dee0:	e7cd      	b.n	de7e <Svc::PassiveRateGroup::configure(long*, long)+0xa>
    dee2:	bf00      	nop
    dee4:	20001214 	.word	0x20001214

0000dee8 <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)>:


void PassiveRateGroup::CycleIn_handler(NATIVE_INT_TYPE portNum, Os::RawTime& cycleStart) {
    dee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deea:	b093      	sub	sp, #76	; 0x4c
    deec:	4605      	mov	r5, r0
    deee:	4616      	mov	r6, r2
    Os::RawTime endTime;
    def0:	a808      	add	r0, sp, #32
    def2:	f007 f9a3 	bl	1523c <Os::RawTime::RawTime()>
    FW_ASSERT(this->m_numContexts);
    def6:	f8d5 35f4 	ldr.w	r3, [r5, #1524]	; 0x5f4
    defa:	2b00      	cmp	r3, #0
    defc:	d054      	beq.n	dfa8 <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0xc0>

    // invoke any members of the rate group
    for (NATIVE_INT_TYPE port = 0; port < this->getNum_RateGroupMemberOut_OutputPorts(); port++) {
    defe:	2400      	movs	r4, #0
        if (this->isConnected_RateGroupMemberOut_OutputPort(port)) {
            this->RateGroupMemberOut_out(port, this->m_contexts[port]);
    df00:	f505 67bf 	add.w	r7, r5, #1528	; 0x5f8
    df04:	e000      	b.n	df08 <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0x20>
    for (NATIVE_INT_TYPE port = 0; port < this->getNum_RateGroupMemberOut_OutputPorts(); port++) {
    df06:	3401      	adds	r4, #1
    df08:	4628      	mov	r0, r5
    df0a:	f000 f9ad 	bl	e268 <Svc::PassiveRateGroupComponentBase::getNum_RateGroupMemberOut_OutputPorts() const>
    df0e:	4603      	mov	r3, r0
        if (this->isConnected_RateGroupMemberOut_OutputPort(port)) {
    df10:	4621      	mov	r1, r4
    df12:	4628      	mov	r0, r5
    for (NATIVE_INT_TYPE port = 0; port < this->getNum_RateGroupMemberOut_OutputPorts(); port++) {
    df14:	42a3      	cmp	r3, r4
    df16:	dd0a      	ble.n	df2e <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0x46>
        if (this->isConnected_RateGroupMemberOut_OutputPort(port)) {
    df18:	f000 f9a8 	bl	e26c <Svc::PassiveRateGroupComponentBase::isConnected_RateGroupMemberOut_OutputPort(long)>
    df1c:	2800      	cmp	r0, #0
    df1e:	d0f2      	beq.n	df06 <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0x1e>
            this->RateGroupMemberOut_out(port, this->m_contexts[port]);
    df20:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    df24:	4621      	mov	r1, r4
    df26:	4628      	mov	r0, r5
    df28:	f000 f9b6 	bl	e298 <Svc::PassiveRateGroupComponentBase::RateGroupMemberOut_out(long, unsigned long)>
    df2c:	e7eb      	b.n	df06 <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0x1e>
        }
    }

    // grab timer for endTime of cycle
    endTime.now();
    df2e:	a808      	add	r0, sp, #32
    df30:	f006 ffce 	bl	14ed0 <Os::RawTime::now()>

    // get rate group execution time
    U32 cycleTime;
    // Cast to void as the only possible error is overflow, which we can't handle other
    // than capping cycleTime to max value of U32 (which is done in getDiffUsec anyways)
    (void) endTime.getDiffUsec(cycleStart, cycleTime);
    df34:	aa03      	add	r2, sp, #12
    df36:	4631      	mov	r1, r6
    df38:	a808      	add	r0, sp, #32
    df3a:	f007 f9a9 	bl	15290 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const>
    // check to see if the time has exceeded the previous maximum
    if (cycleTime > this->m_maxTime) {
    df3e:	f8d5 45f0 	ldr.w	r4, [r5, #1520]	; 0x5f0
    df42:	9b03      	ldr	r3, [sp, #12]
    df44:	429c      	cmp	r4, r3
    df46:	d202      	bcs.n	df4e <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0x66>
        this->m_maxTime = cycleTime;
    df48:	461c      	mov	r4, r3
    df4a:	f8c5 35f0 	str.w	r3, [r5, #1520]	; 0x5f0
    }
    this->tlmWrite_MaxCycleTime(this->m_maxTime);
    df4e:	a804      	add	r0, sp, #16
    df50:	f009 fcae 	bl	178b0 <Fw::Time::Time()>
    df54:	aa04      	add	r2, sp, #16
    df56:	4621      	mov	r1, r4
    df58:	4628      	mov	r0, r5
    df5a:	f000 f9b5 	bl	e2c8 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)>
    df5e:	a804      	add	r0, sp, #16
    df60:	f009 fc4e 	bl	17800 <Fw::Time::~Time()>
    this->tlmWrite_CycleTime(cycleTime);
    df64:	9903      	ldr	r1, [sp, #12]
    df66:	a804      	add	r0, sp, #16
    df68:	9101      	str	r1, [sp, #4]
    df6a:	f009 fca1 	bl	178b0 <Fw::Time::Time()>
    df6e:	aa04      	add	r2, sp, #16
    df70:	9901      	ldr	r1, [sp, #4]
    df72:	4628      	mov	r0, r5
    df74:	f000 fa00 	bl	e378 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const>
    df78:	a804      	add	r0, sp, #16
    df7a:	f009 fc41 	bl	17800 <Fw::Time::~Time()>
    this->tlmWrite_CycleCount(++this->m_cycles);
    df7e:	f8d5 45ec 	ldr.w	r4, [r5, #1516]	; 0x5ec
    df82:	a804      	add	r0, sp, #16
    df84:	3401      	adds	r4, #1
    df86:	f8c5 45ec 	str.w	r4, [r5, #1516]	; 0x5ec
    df8a:	f009 fc91 	bl	178b0 <Fw::Time::Time()>
    df8e:	aa04      	add	r2, sp, #16
    df90:	4621      	mov	r1, r4
    df92:	4628      	mov	r0, r5
    df94:	f000 fa32 	bl	e3fc <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const>
    df98:	a804      	add	r0, sp, #16
    df9a:	f009 fc31 	bl	17800 <Fw::Time::~Time()>
}
    df9e:	a808      	add	r0, sp, #32
    dfa0:	f006 fec8 	bl	14d34 <Os::RawTime::~RawTime()>
    dfa4:	b013      	add	sp, #76	; 0x4c
    dfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_numContexts);
    dfa8:	212b      	movs	r1, #43	; 0x2b
    dfaa:	4802      	ldr	r0, [pc, #8]	; (dfb4 <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0xcc>)
    dfac:	f7f3 fb2e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    dfb0:	e7a5      	b.n	defe <Svc::PassiveRateGroup::CycleIn_handler(long, Os::RawTime&)+0x16>
    dfb2:	bf00      	nop
    dfb4:	20001214 	.word	0x20001214

0000dfb8 <Svc::PassiveRateGroupComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)>:
    m_p_CycleIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Os::RawTime& cycleStart
    )
  {
    dfb8:	b570      	push	{r4, r5, r6, lr}
    dfba:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    dfbc:	4604      	mov	r4, r0
  {
    dfbe:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    dfc0:	b178      	cbz	r0, dfe2 <Svc::PassiveRateGroupComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x2a>
    FW_ASSERT(
    dfc2:	2d00      	cmp	r5, #0
    dfc4:	dd05      	ble.n	dfd2 <Svc::PassiveRateGroupComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x1a>
    dfc6:	f44f 72aa 	mov.w	r2, #340	; 0x154
    dfca:	4629      	mov	r1, r5
    dfcc:	4808      	ldr	r0, [pc, #32]	; (dff0 <Svc::PassiveRateGroupComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x38>)
    dfce:	f7f3 fb2b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->CycleIn_handler(
    dfd2:	6823      	ldr	r3, [r4, #0]
    dfd4:	4632      	mov	r2, r6
    dfd6:	4629      	mov	r1, r5
    dfd8:	4620      	mov	r0, r4
    dfda:	691b      	ldr	r3, [r3, #16]
    PassiveRateGroupComponentBase* compPtr = static_cast<PassiveRateGroupComponentBase*>(callComp);
    compPtr->CycleIn_handlerBase(
      portNum,
      cycleStart
    );
  }
    dfdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->CycleIn_handler(
    dfe0:	4718      	bx	r3
    FW_ASSERT(callComp);
    dfe2:	f240 2105 	movw	r1, #517	; 0x205
    dfe6:	4802      	ldr	r0, [pc, #8]	; (dff0 <Svc::PassiveRateGroupComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x38>)
    dfe8:	f7f3 fb10 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    dfec:	e7e9      	b.n	dfc2 <Svc::PassiveRateGroupComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0xa>
    dfee:	bf00      	nop
    dff0:	200019f4 	.word	0x200019f4

0000dff4 <Svc::PassiveRateGroupComponentBase::init(long)>:
  {
    dff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dff8:	4604      	mov	r4, r0
    dffa:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    dffc:	f003 ff70 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
    ObjectName() : StringBase() { *this = ""; }
    e000:	4e42      	ldr	r6, [pc, #264]	; (e10c <Svc::PassiveRateGroupComponentBase::init(long)+0x118>)
      this->m_CycleIn_InputPort[port].init();
    e002:	f104 0564 	add.w	r5, r4, #100	; 0x64
    const char* toChar() const { return this->m_buf; }
    e006:	f104 0708 	add.w	r7, r4, #8
      this->m_Time_OutputPort[port].init();
    e00a:	f104 08d4 	add.w	r8, r4, #212	; 0xd4
        (void)StringBase::operator=(src);
    e00e:	f8df 9104 	ldr.w	r9, [pc, #260]	; e114 <Svc::PassiveRateGroupComponentBase::init(long)+0x120>
      this->m_CycleIn_InputPort[port].init();
    e012:	4628      	mov	r0, r5
    e014:	f000 fcd2 	bl	e9bc <Svc::InputCyclePort::init()>
      this->m_CycleIn_InputPort[port].addCallComp(
    e018:	4a3d      	ldr	r2, [pc, #244]	; (e110 <Svc::PassiveRateGroupComponentBase::init(long)+0x11c>)
    e01a:	4621      	mov	r1, r4
    e01c:	4628      	mov	r0, r5
    e01e:	f000 fc31 	bl	e884 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))>
      this->m_CycleIn_InputPort[port].setPortNum(port);
    e022:	2100      	movs	r1, #0
    e024:	4628      	mov	r0, r5
    e026:	f009 fe55 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    e02a:	4668      	mov	r0, sp
    e02c:	f7f3 f8f8 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    e030:	4938      	ldr	r1, [pc, #224]	; (e114 <Svc::PassiveRateGroupComponentBase::init(long)+0x120>)
    e032:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    e034:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    e036:	f7f3 f95b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    e03a:	2300      	movs	r3, #0
    e03c:	463a      	mov	r2, r7
    e03e:	4936      	ldr	r1, [pc, #216]	; (e118 <Svc::PassiveRateGroupComponentBase::init(long)+0x124>)
    e040:	4668      	mov	r0, sp
    e042:	f7f3 f923 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CycleIn_InputPort[port].setObjName(portName.toChar());
    e046:	a901      	add	r1, sp, #4
    e048:	4628      	mov	r0, r5
      this->m_Tlm_OutputPort[port].init();
    e04a:	f504 75a0 	add.w	r5, r4, #320	; 0x140
      this->m_CycleIn_InputPort[port].setObjName(portName.toChar());
    e04e:	f009 ffa7 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    e052:	4668      	mov	r0, sp
    e054:	9600      	str	r6, [sp, #0]
    e056:	f7f3 f8ed 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Time_OutputPort[port].init();
    e05a:	4640      	mov	r0, r8
    e05c:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
    e060:	f009 fe18 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    e064:	4668      	mov	r0, sp
    e066:	f7f3 f8db 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    e06a:	492a      	ldr	r1, [pc, #168]	; (e114 <Svc::PassiveRateGroupComponentBase::init(long)+0x120>)
    e06c:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    e06e:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    e070:	f7f3 f93e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    e074:	2300      	movs	r3, #0
    e076:	463a      	mov	r2, r7
    e078:	4928      	ldr	r1, [pc, #160]	; (e11c <Svc::PassiveRateGroupComponentBase::init(long)+0x128>)
    e07a:	4668      	mov	r0, sp
    e07c:	f7f3 f906 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
    e080:	a901      	add	r1, sp, #4
    e082:	4640      	mov	r0, r8
      portName.format(
    e084:	f8df 809c 	ldr.w	r8, [pc, #156]	; e124 <Svc::PassiveRateGroupComponentBase::init(long)+0x130>
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
    e088:	f009 ff8a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    e08c:	4668      	mov	r0, sp
    e08e:	9600      	str	r6, [sp, #0]
    e090:	f7f3 f8d0 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Tlm_OutputPort[port].init();
    e094:	4628      	mov	r0, r5
    e096:	f009 fa25 	bl	174e4 <Fw::OutputTlmPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    e09a:	4668      	mov	r0, sp
    e09c:	f7f3 f8c0 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    e0a0:	491c      	ldr	r1, [pc, #112]	; (e114 <Svc::PassiveRateGroupComponentBase::init(long)+0x120>)
    e0a2:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    e0a4:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    e0a6:	f7f3 f923 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    e0aa:	2300      	movs	r3, #0
    e0ac:	463a      	mov	r2, r7
    e0ae:	491c      	ldr	r1, [pc, #112]	; (e120 <Svc::PassiveRateGroupComponentBase::init(long)+0x12c>)
    e0b0:	4668      	mov	r0, sp
    e0b2:	f7f3 f8eb 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
    e0b6:	4628      	mov	r0, r5
    e0b8:	a901      	add	r1, sp, #4
      FwIndexType port = 0;
    e0ba:	2500      	movs	r5, #0
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
    e0bc:	f009 ff70 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    e0c0:	4668      	mov	r0, sp
    e0c2:	9600      	str	r6, [sp, #0]
    e0c4:	f7f3 f8b6 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_RateGroupMemberOut_OutputPort[port].init();
    e0c8:	6823      	ldr	r3, [r4, #0]
    e0ca:	4620      	mov	r0, r4
    e0cc:	68db      	ldr	r3, [r3, #12]
    e0ce:	4798      	blx	r3
    ObjectName() : StringBase() { *this = ""; }
    e0d0:	4668      	mov	r0, sp
    e0d2:	f7f3 f8a5 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    e0d6:	4649      	mov	r1, r9
    e0d8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    e0da:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    e0dc:	f7f3 f908 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    e0e0:	462b      	mov	r3, r5
    e0e2:	463a      	mov	r2, r7
    e0e4:	4641      	mov	r1, r8
    e0e6:	4668      	mov	r0, sp
    for (
    e0e8:	3501      	adds	r5, #1
      portName.format(
    e0ea:	f7f3 f8cf 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_RateGroupMemberOut_OutputPort[port].setObjName(portName.toChar());
    e0ee:	4620      	mov	r0, r4
    e0f0:	a901      	add	r1, sp, #4
      port < static_cast<FwIndexType>(this->getNum_RateGroupMemberOut_OutputPorts());
    e0f2:	346c      	adds	r4, #108	; 0x6c
      this->m_RateGroupMemberOut_OutputPort[port].setObjName(portName.toChar());
    e0f4:	f009 ff54 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    e0f8:	4668      	mov	r0, sp
    e0fa:	9600      	str	r6, [sp, #0]
    e0fc:	f7f3 f89a 	bl	1234 <Fw::StringBase::~StringBase()>
      port < static_cast<FwIndexType>(this->getNum_RateGroupMemberOut_OutputPorts());
    e100:	2d0a      	cmp	r5, #10
    e102:	d1e1      	bne.n	e0c8 <Svc::PassiveRateGroupComponentBase::init(long)+0xd4>
  }
    e104:	b017      	add	sp, #92	; 0x5c
    e106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e10a:	bf00      	nop
    e10c:	20002b80 	.word	0x20002b80
    e110:	0000dfb9 	.word	0x0000dfb9
    e114:	20001d2c 	.word	0x20001d2c
    e118:	20001a54 	.word	0x20001a54
    e11c:	20001734 	.word	0x20001734
    e120:	20001af8 	.word	0x20001af8
    e124:	20001a70 	.word	0x20001a70

0000e128 <Svc::PassiveRateGroupComponentBase::get_CycleIn_InputPort(long)>:
  {
    e128:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    e12a:	1e0c      	subs	r4, r1, #0
  {
    e12c:	4605      	mov	r5, r0
    FW_ASSERT(
    e12e:	dd03      	ble.n	e138 <Svc::PassiveRateGroupComponentBase::get_CycleIn_InputPort(long)+0x10>
    e130:	2273      	movs	r2, #115	; 0x73
    e132:	4804      	ldr	r0, [pc, #16]	; (e144 <Svc::PassiveRateGroupComponentBase::get_CycleIn_InputPort(long)+0x1c>)
    e134:	f7f3 fa78 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_CycleIn_InputPort[portNum];
    e138:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e13c:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    e140:	3064      	adds	r0, #100	; 0x64
    e142:	bd38      	pop	{r3, r4, r5, pc}
    e144:	200019f4 	.word	0x200019f4

0000e148 <Svc::PassiveRateGroupComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>:
  {
    e148:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    e14a:	1e0d      	subs	r5, r1, #0
  {
    e14c:	4604      	mov	r4, r0
    e14e:	4616      	mov	r6, r2
    FW_ASSERT(
    e150:	dd03      	ble.n	e15a <Svc::PassiveRateGroupComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x12>
    e152:	2285      	movs	r2, #133	; 0x85
    e154:	4805      	ldr	r0, [pc, #20]	; (e16c <Svc::PassiveRateGroupComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x24>)
    e156:	f7f3 fa67 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Time_OutputPort[portNum].addCallPort(port);
    e15a:	236c      	movs	r3, #108	; 0x6c
    e15c:	4631      	mov	r1, r6
    e15e:	fb03 4005 	mla	r0, r3, r5, r4
  }
    e162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Time_OutputPort[portNum].addCallPort(port);
    e166:	30d4      	adds	r0, #212	; 0xd4
    e168:	f009 bd18 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    e16c:	200019f4 	.word	0x200019f4

0000e170 <Svc::PassiveRateGroupComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)>:
  {
    e170:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    e172:	1e0d      	subs	r5, r1, #0
  {
    e174:	4604      	mov	r4, r0
    e176:	4616      	mov	r6, r2
    FW_ASSERT(
    e178:	dd03      	ble.n	e182 <Svc::PassiveRateGroupComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)+0x12>
    e17a:	2293      	movs	r2, #147	; 0x93
    e17c:	4806      	ldr	r0, [pc, #24]	; (e198 <Svc::PassiveRateGroupComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)+0x28>)
    e17e:	f7f3 fa53 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Tlm_OutputPort[portNum].addCallPort(port);
    e182:	236c      	movs	r3, #108	; 0x6c
    e184:	4631      	mov	r1, r6
    e186:	fb03 4005 	mla	r0, r3, r5, r4
  }
    e18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Tlm_OutputPort[portNum].addCallPort(port);
    e18e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    e192:	f009 b8f1 	b.w	17378 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)>
    e196:	bf00      	nop
    e198:	200019f4 	.word	0x200019f4

0000e19c <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)>:
    FW_ASSERT(
    e19c:	2909      	cmp	r1, #9
  {
    e19e:	b570      	push	{r4, r5, r6, lr}
    e1a0:	460d      	mov	r5, r1
    e1a2:	4604      	mov	r4, r0
    e1a4:	4616      	mov	r6, r2
    FW_ASSERT(
    e1a6:	dc09      	bgt.n	e1bc <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)+0x20>
    this->m_RateGroupMemberOut_OutputPort[portNum].addCallPort(port);
    e1a8:	236c      	movs	r3, #108	; 0x6c
    e1aa:	4631      	mov	r1, r6
    e1ac:	fb03 4005 	mla	r0, r3, r5, r4
  }
    e1b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_RateGroupMemberOut_OutputPort[portNum].addCallPort(port);
    e1b4:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    e1b8:	f002 bf32 	b.w	11020 <Svc::OutputSchedPort::addCallPort(Svc::InputSchedPort*)>
    FW_ASSERT(
    e1bc:	22a5      	movs	r2, #165	; 0xa5
    e1be:	4802      	ldr	r0, [pc, #8]	; (e1c8 <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)+0x2c>)
    e1c0:	f7f3 fa32 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e1c4:	e7f0      	b.n	e1a8 <Svc::PassiveRateGroupComponentBase::set_RateGroupMemberOut_OutputPort(long, Svc::InputSchedPort*)+0xc>
    e1c6:	bf00      	nop
    e1c8:	200019f4 	.word	0x200019f4

0000e1cc <Svc::PassiveRateGroupComponentBase::PassiveRateGroupComponentBase(char const*)>:
  PassiveRateGroupComponentBase ::
    e1cc:	b570      	push	{r4, r5, r6, lr}
    e1ce:	4606      	mov	r6, r0
      Fw::PassiveComponentBase(compName)
    e1d0:	f003 fe78 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    e1d4:	4b0f      	ldr	r3, [pc, #60]	; (e214 <Svc::PassiveRateGroupComponentBase::PassiveRateGroupComponentBase(char const*)+0x48>)
    e1d6:	4630      	mov	r0, r6
    e1d8:	f506 74d6 	add.w	r4, r6, #428	; 0x1ac
    e1dc:	f206 55e4 	addw	r5, r6, #1508	; 0x5e4
    e1e0:	f840 3b64 	str.w	r3, [r0], #100
    e1e4:	f000 fb42 	bl	e86c <Svc::InputCyclePort::InputCyclePort()>
    e1e8:	f106 00d4 	add.w	r0, r6, #212	; 0xd4
    e1ec:	f009 fcca 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
    e1f0:	f506 70a0 	add.w	r0, r6, #320	; 0x140
    e1f4:	f009 f8b4 	bl	17360 <Fw::OutputTlmPort::OutputTlmPort()>
    e1f8:	4620      	mov	r0, r4
    e1fa:	346c      	adds	r4, #108	; 0x6c
    e1fc:	f002 ff04 	bl	11008 <Svc::OutputSchedPort::OutputSchedPort()>
    e200:	42ac      	cmp	r4, r5
    e202:	d1f9      	bne.n	e1f8 <Svc::PassiveRateGroupComponentBase::PassiveRateGroupComponentBase(char const*)+0x2c>
    this->m_first_update_MaxCycleTime = true;
    e204:	2201      	movs	r2, #1
    this->m_last_MaxCycleTime = 0;
    e206:	2300      	movs	r3, #0
  }
    e208:	4630      	mov	r0, r6
    this->m_first_update_MaxCycleTime = true;
    e20a:	f886 25e4 	strb.w	r2, [r6, #1508]	; 0x5e4
    this->m_last_MaxCycleTime = 0;
    e20e:	f8c6 35e8 	str.w	r3, [r6, #1512]	; 0x5e8
  }
    e212:	bd70      	pop	{r4, r5, r6, pc}
    e214:	20003e00 	.word	0x20003e00

0000e218 <Svc::PassiveRateGroupComponentBase::~PassiveRateGroupComponentBase()>:
  PassiveRateGroupComponentBase ::
    e218:	b570      	push	{r4, r5, r6, lr}
    ~PassiveRateGroupComponentBase()
    e21a:	4b12      	ldr	r3, [pc, #72]	; (e264 <Svc::PassiveRateGroupComponentBase::~PassiveRateGroupComponentBase()+0x4c>)
  PassiveRateGroupComponentBase ::
    e21c:	4605      	mov	r5, r0
    ~PassiveRateGroupComponentBase()
    e21e:	f200 54e4 	addw	r4, r0, #1508	; 0x5e4
    e222:	f500 76d6 	add.w	r6, r0, #428	; 0x1ac
    e226:	6003      	str	r3, [r0, #0]
    e228:	f854 3d6c 	ldr.w	r3, [r4, #-108]!
    e22c:	685b      	ldr	r3, [r3, #4]
    e22e:	4620      	mov	r0, r4
    e230:	4798      	blx	r3
  }
    e232:	42a6      	cmp	r6, r4
    e234:	d1f8      	bne.n	e228 <Svc::PassiveRateGroupComponentBase::~PassiveRateGroupComponentBase()+0x10>
    ~PassiveRateGroupComponentBase()
    e236:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    e23a:	f505 70a0 	add.w	r0, r5, #320	; 0x140
    e23e:	685b      	ldr	r3, [r3, #4]
    e240:	4798      	blx	r3
    e242:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    e246:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    e24a:	685b      	ldr	r3, [r3, #4]
    e24c:	4798      	blx	r3
    e24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e250:	f105 0064 	add.w	r0, r5, #100	; 0x64
    e254:	685b      	ldr	r3, [r3, #4]
    e256:	4798      	blx	r3
    e258:	4628      	mov	r0, r5
    e25a:	f003 fddb 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    e25e:	4628      	mov	r0, r5
    e260:	bd70      	pop	{r4, r5, r6, pc}
    e262:	bf00      	nop
    e264:	20003e00 	.word	0x20003e00

0000e268 <Svc::PassiveRateGroupComponentBase::getNum_RateGroupMemberOut_OutputPorts() const>:
  }
    e268:	200a      	movs	r0, #10
    e26a:	4770      	bx	lr

0000e26c <Svc::PassiveRateGroupComponentBase::isConnected_RateGroupMemberOut_OutputPort(long)>:
    FW_ASSERT(
    e26c:	2909      	cmp	r1, #9
  {
    e26e:	b538      	push	{r3, r4, r5, lr}
    e270:	460d      	mov	r5, r1
    e272:	4604      	mov	r4, r0
    FW_ASSERT(
    e274:	dc08      	bgt.n	e288 <Svc::PassiveRateGroupComponentBase::isConnected_RateGroupMemberOut_OutputPort(long)+0x1c>
    return this->m_RateGroupMemberOut_OutputPort[portNum].isConnected();
    e276:	236c      	movs	r3, #108	; 0x6c
    e278:	fb03 4305 	mla	r3, r3, r5, r4
    e27c:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
  }
    e280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_RateGroupMemberOut_OutputPort[portNum].isConnected();
    e284:	f009 bde2 	b.w	17e4c <Fw::PortBase::isConnected() const>
    FW_ASSERT(
    e288:	f240 123f 	movw	r2, #319	; 0x13f
    e28c:	4801      	ldr	r0, [pc, #4]	; (e294 <Svc::PassiveRateGroupComponentBase::isConnected_RateGroupMemberOut_OutputPort(long)+0x28>)
    e28e:	f7f3 f9cb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e292:	e7f0      	b.n	e276 <Svc::PassiveRateGroupComponentBase::isConnected_RateGroupMemberOut_OutputPort(long)+0xa>
    e294:	200019f4 	.word	0x200019f4

0000e298 <Svc::PassiveRateGroupComponentBase::RateGroupMemberOut_out(long, unsigned long)>:
    FW_ASSERT(
    e298:	2909      	cmp	r1, #9
  {
    e29a:	b570      	push	{r4, r5, r6, lr}
    e29c:	460d      	mov	r5, r1
    e29e:	4604      	mov	r4, r0
    e2a0:	4616      	mov	r6, r2
    FW_ASSERT(
    e2a2:	dc09      	bgt.n	e2b8 <Svc::PassiveRateGroupComponentBase::RateGroupMemberOut_out(long, unsigned long)+0x20>
    this->m_RateGroupMemberOut_OutputPort[portNum].invoke(
    e2a4:	236c      	movs	r3, #108	; 0x6c
    e2a6:	4631      	mov	r1, r6
    e2a8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    e2ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_RateGroupMemberOut_OutputPort[portNum].invoke(
    e2b0:	f500 70d6 	add.w	r0, r0, #428	; 0x1ac
    e2b4:	f002 bec4 	b.w	11040 <Svc::OutputSchedPort::invoke(unsigned long) const>
    FW_ASSERT(
    e2b8:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    e2bc:	4801      	ldr	r0, [pc, #4]	; (e2c4 <Svc::PassiveRateGroupComponentBase::RateGroupMemberOut_out(long, unsigned long)+0x2c>)
    e2be:	f7f3 f9b3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e2c2:	e7ef      	b.n	e2a4 <Svc::PassiveRateGroupComponentBase::RateGroupMemberOut_out(long, unsigned long)+0xc>
    e2c4:	200019f4 	.word	0x200019f4

0000e2c8 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)>:
    if (not this->m_first_update_MaxCycleTime) {
    e2c8:	f890 35e4 	ldrb.w	r3, [r0, #1508]	; 0x5e4
  {
    e2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2d0:	4604      	mov	r4, r0
    e2d2:	b088      	sub	sp, #32
    e2d4:	460d      	mov	r5, r1
    e2d6:	4617      	mov	r7, r2
    if (not this->m_first_update_MaxCycleTime) {
    e2d8:	b973      	cbnz	r3, e2f8 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x30>
      if (arg == this->m_last_MaxCycleTime) {
    e2da:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
    e2de:	428b      	cmp	r3, r1
    e2e0:	d007      	beq.n	e2f2 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x2a>
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e2e2:	f504 76a0 	add.w	r6, r4, #320	; 0x140
        this->m_last_MaxCycleTime = arg;
    e2e6:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e2ea:	4630      	mov	r0, r6
    e2ec:	f009 fdae 	bl	17e4c <Fw::PortBase::isConnected() const>
    e2f0:	b970      	cbnz	r0, e310 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x48>
  }
    e2f2:	b008      	add	sp, #32
    e2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      this->m_first_update_MaxCycleTime = false;
    e2f8:	2300      	movs	r3, #0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e2fa:	f504 76a0 	add.w	r6, r4, #320	; 0x140
      this->m_first_update_MaxCycleTime = false;
    e2fe:	f880 35e4 	strb.w	r3, [r0, #1508]	; 0x5e4
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e302:	4630      	mov	r0, r6
        this->m_last_MaxCycleTime = arg;
    e304:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e308:	f009 fda0 	bl	17e4c <Fw::PortBase::isConnected() const>
    e30c:	2800      	cmp	r0, #0
    e30e:	d0f0      	beq.n	e2f2 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x2a>
        this->m_Time_OutputPort[0].isConnected() &&
    e310:	f104 08d4 	add.w	r8, r4, #212	; 0xd4
    e314:	4640      	mov	r0, r8
    e316:	f009 fd99 	bl	17e4c <Fw::PortBase::isConnected() const>
    e31a:	b9e8      	cbnz	r0, e358 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x90>
      Fw::TlmBuffer _tlmBuff;
    e31c:	4668      	mov	r0, sp
    e31e:	f008 fdf5 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    e322:	4629      	mov	r1, r5
    e324:	4668      	mov	r0, sp
    e326:	f7f2 f999 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    e32a:	b970      	cbnz	r0, e34a <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x82>
      _id = this->getIdBase() + CHANNELID_MAXCYCLETIME;
    e32c:	4620      	mov	r0, r4
    e32e:	f003 fde1 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    e332:	466b      	mov	r3, sp
      _id = this->getIdBase() + CHANNELID_MAXCYCLETIME;
    e334:	4601      	mov	r1, r0
      this->m_Tlm_OutputPort[0].invoke(
    e336:	463a      	mov	r2, r7
    e338:	4630      	mov	r0, r6
    e33a:	f009 f82d 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    e33e:	4668      	mov	r0, sp
    e340:	f008 fdcc 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    e344:	b008      	add	sp, #32
    e346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(
    e34a:	4601      	mov	r1, r0
    e34c:	f44f 72cb 	mov.w	r2, #406	; 0x196
    e350:	4807      	ldr	r0, [pc, #28]	; (e370 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0xa8>)
    e352:	f7f3 f969 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e356:	e7e9      	b.n	e32c <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x64>
        (_tlmTime ==  Fw::ZERO_TIME)
    e358:	4906      	ldr	r1, [pc, #24]	; (e374 <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0xac>)
    e35a:	4638      	mov	r0, r7
    e35c:	f009 faee 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    e360:	2800      	cmp	r0, #0
    e362:	d0db      	beq.n	e31c <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x54>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    e364:	4640      	mov	r0, r8
    e366:	4639      	mov	r1, r7
    e368:	f009 fc28 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    e36c:	e7d6      	b.n	e31c <Svc::PassiveRateGroupComponentBase::tlmWrite_MaxCycleTime(unsigned long, Fw::Time)+0x54>
    e36e:	bf00      	nop
    e370:	200019f4 	.word	0x200019f4
    e374:	2000c9b0 	.word	0x2000c9b0

0000e378 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const>:
  {
    e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e37c:	f500 77a0 	add.w	r7, r0, #320	; 0x140
  {
    e380:	b088      	sub	sp, #32
    e382:	4604      	mov	r4, r0
    e384:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e386:	4638      	mov	r0, r7
  {
    e388:	4615      	mov	r5, r2
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e38a:	f009 fd5f 	bl	17e4c <Fw::PortBase::isConnected() const>
    e38e:	b910      	cbnz	r0, e396 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x1e>
  }
    e390:	b008      	add	sp, #32
    e392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    e396:	f104 08d4 	add.w	r8, r4, #212	; 0xd4
    e39a:	4640      	mov	r0, r8
    e39c:	f009 fd56 	bl	17e4c <Fw::PortBase::isConnected() const>
    e3a0:	b9b0      	cbnz	r0, e3d0 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x58>
      Fw::TlmBuffer _tlmBuff;
    e3a2:	4668      	mov	r0, sp
    e3a4:	f008 fdb2 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    e3a8:	4631      	mov	r1, r6
    e3aa:	4668      	mov	r0, sp
    e3ac:	f7f2 f956 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    e3b0:	b9c8      	cbnz	r0, e3e6 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x6e>
      _id = this->getIdBase() + CHANNELID_CYCLETIME;
    e3b2:	4620      	mov	r0, r4
    e3b4:	f003 fd9e 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    e3b8:	466b      	mov	r3, sp
    e3ba:	1c41      	adds	r1, r0, #1
    e3bc:	462a      	mov	r2, r5
    e3be:	4638      	mov	r0, r7
    e3c0:	f008 ffea 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    e3c4:	4668      	mov	r0, sp
    e3c6:	f008 fd89 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    e3ca:	b008      	add	sp, #32
    e3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    e3d0:	4908      	ldr	r1, [pc, #32]	; (e3f4 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x7c>)
    e3d2:	4628      	mov	r0, r5
    e3d4:	f009 fab2 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    e3d8:	2800      	cmp	r0, #0
    e3da:	d0e2      	beq.n	e3a2 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x2a>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    e3dc:	4640      	mov	r0, r8
    e3de:	4629      	mov	r1, r5
    e3e0:	f009 fbec 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    e3e4:	e7dd      	b.n	e3a2 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x2a>
      FW_ASSERT(
    e3e6:	4601      	mov	r1, r0
    e3e8:	f240 12b7 	movw	r2, #439	; 0x1b7
    e3ec:	4802      	ldr	r0, [pc, #8]	; (e3f8 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x80>)
    e3ee:	f7f3 f91b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e3f2:	e7de      	b.n	e3b2 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleTime(unsigned long, Fw::Time) const+0x3a>
    e3f4:	2000c9b0 	.word	0x2000c9b0
    e3f8:	200019f4 	.word	0x200019f4

0000e3fc <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const>:
  {
    e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e400:	f500 77a0 	add.w	r7, r0, #320	; 0x140
  {
    e404:	b088      	sub	sp, #32
    e406:	4604      	mov	r4, r0
    e408:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e40a:	4638      	mov	r0, r7
  {
    e40c:	4615      	mov	r5, r2
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    e40e:	f009 fd1d 	bl	17e4c <Fw::PortBase::isConnected() const>
    e412:	b910      	cbnz	r0, e41a <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x1e>
  }
    e414:	b008      	add	sp, #32
    e416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    e41a:	f104 08d4 	add.w	r8, r4, #212	; 0xd4
    e41e:	4640      	mov	r0, r8
    e420:	f009 fd14 	bl	17e4c <Fw::PortBase::isConnected() const>
    e424:	b9b0      	cbnz	r0, e454 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x58>
      Fw::TlmBuffer _tlmBuff;
    e426:	4668      	mov	r0, sp
    e428:	f008 fd70 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    e42c:	4631      	mov	r1, r6
    e42e:	4668      	mov	r0, sp
    e430:	f7f2 f914 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(
    e434:	b9c8      	cbnz	r0, e46a <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x6e>
      _id = this->getIdBase() + CHANNELID_CYCLECOUNT;
    e436:	4620      	mov	r0, r4
    e438:	f003 fd5c 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    e43c:	466b      	mov	r3, sp
    e43e:	1c81      	adds	r1, r0, #2
    e440:	462a      	mov	r2, r5
    e442:	4638      	mov	r0, r7
    e444:	f008 ffa8 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    e448:	4668      	mov	r0, sp
    e44a:	f008 fd47 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    e44e:	b008      	add	sp, #32
    e450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    e454:	4908      	ldr	r1, [pc, #32]	; (e478 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x7c>)
    e456:	4628      	mov	r0, r5
    e458:	f009 fa70 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    e45c:	2800      	cmp	r0, #0
    e45e:	d0e2      	beq.n	e426 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x2a>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    e460:	4640      	mov	r0, r8
    e462:	4629      	mov	r1, r5
    e464:	f009 fbaa 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    e468:	e7dd      	b.n	e426 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x2a>
      FW_ASSERT(
    e46a:	4601      	mov	r1, r0
    e46c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
    e470:	4802      	ldr	r0, [pc, #8]	; (e47c <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x80>)
    e472:	f7f3 f8d9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e476:	e7de      	b.n	e436 <Svc::PassiveRateGroupComponentBase::tlmWrite_CycleCount(unsigned long, Fw::Time) const+0x3a>
    e478:	2000c9b0 	.word	0x2000c9b0
    e47c:	200019f4 	.word	0x200019f4

0000e480 <Svc::RateGroupDriver::~RateGroupDriver()>:
            }
        }
        this->m_configured = true;
    }

    RateGroupDriver::~RateGroupDriver() {
    e480:	4b03      	ldr	r3, [pc, #12]	; (e490 <Svc::RateGroupDriver::~RateGroupDriver()+0x10>)
    e482:	b510      	push	{r4, lr}
    e484:	4604      	mov	r4, r0
    e486:	6003      	str	r3, [r0, #0]
    e488:	f000 f95a 	bl	e740 <Svc::RateGroupDriverComponentBase::~RateGroupDriverComponentBase()>

    }
    e48c:	4620      	mov	r0, r4
    e48e:	bd10      	pop	{r4, pc}
    e490:	20003ab0 	.word	0x20003ab0

0000e494 <Svc::RateGroupDriver::~RateGroupDriver()>:
    RateGroupDriver::~RateGroupDriver() {
    e494:	4b06      	ldr	r3, [pc, #24]	; (e4b0 <Svc::RateGroupDriver::~RateGroupDriver()+0x1c>)
    e496:	b510      	push	{r4, lr}
    e498:	4604      	mov	r4, r0
    e49a:	6003      	str	r3, [r0, #0]
    e49c:	f000 f950 	bl	e740 <Svc::RateGroupDriverComponentBase::~RateGroupDriverComponentBase()>
    }
    e4a0:	f44f 710f 	mov.w	r1, #572	; 0x23c
    e4a4:	4620      	mov	r0, r4
    e4a6:	f00a fc13 	bl	18cd0 <operator delete(void*, unsigned int)>
    e4aa:	4620      	mov	r0, r4
    e4ac:	bd10      	pop	{r4, pc}
    e4ae:	bf00      	nop
    e4b0:	20003ab0 	.word	0x20003ab0

0000e4b4 <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)>:

    void RateGroupDriver::CycleIn_handler(NATIVE_INT_TYPE portNum, Os::RawTime& cycleStart) {
    e4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

        // Make sure that the dividers have been configured:
        // If this asserts, add the configure() call to initialization.
        FW_ASSERT(this->m_configured);
    e4b6:	f890 3238 	ldrb.w	r3, [r0, #568]	; 0x238
    void RateGroupDriver::CycleIn_handler(NATIVE_INT_TYPE portNum, Os::RawTime& cycleStart) {
    e4ba:	4606      	mov	r6, r0
    e4bc:	4617      	mov	r7, r2
        FW_ASSERT(this->m_configured);
    e4be:	b353      	cbz	r3, e516 <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x62>
    e4c0:	4635      	mov	r5, r6
    void RateGroupDriver::CycleIn_handler(NATIVE_INT_TYPE portNum, Os::RawTime& cycleStart) {
    e4c2:	2400      	movs	r4, #0

        // Loop through each divider. For a given port, the port will be called when the divider value
        // divides evenly into the number of ticks. For example, if the divider value for a port is 4,
        // it would be called every fourth invocation of the CycleIn port.
        for (NATIVE_UINT_TYPE entry = 0; entry < RateGroupDriver::DIVIDER_SIZE; entry++) {
            if (this->m_dividers[entry].divisor != 0) {
    e4c4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
    e4c8:	b96b      	cbnz	r3, e4e6 <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x32>
        for (NATIVE_UINT_TYPE entry = 0; entry < RateGroupDriver::DIVIDER_SIZE; entry++) {
    e4ca:	3401      	adds	r4, #1
    e4cc:	3508      	adds	r5, #8
    e4ce:	2c03      	cmp	r4, #3
    e4d0:	d1f8      	bne.n	e4c4 <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x10>
            }
        }

        // rollover the tick value when the tick count reaches the rollover value
        // the rollover value is the product of all the dividers. See comment in constructor.
        this->m_ticks = (this->m_ticks + 1) % this->m_rollover;
    e4d2:	e9d6 328c 	ldrd	r3, r2, [r6, #560]	; 0x230
    e4d6:	3301      	adds	r3, #1
    e4d8:	fb93 f1f2 	sdiv	r1, r3, r2
    e4dc:	fb02 3311 	mls	r3, r2, r1, r3
    e4e0:	f8c6 3230 	str.w	r3, [r6, #560]	; 0x230

    }
    e4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (this->isConnected_CycleOut_OutputPort(static_cast<FwIndexType>(entry))) {
    e4e6:	4621      	mov	r1, r4
    e4e8:	4630      	mov	r0, r6
    e4ea:	f000 f947 	bl	e77c <Svc::RateGroupDriverComponentBase::isConnected_CycleOut_OutputPort(long)>
    e4ee:	2800      	cmp	r0, #0
    e4f0:	d0eb      	beq.n	e4ca <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x16>
                    if ((this->m_ticks % this->m_dividers[entry].divisor) == this->m_dividers[entry].offset) {
    e4f2:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
    e4f6:	f8d6 3230 	ldr.w	r3, [r6, #560]	; 0x230
    e4fa:	f8d5 121c 	ldr.w	r1, [r5, #540]	; 0x21c
    e4fe:	fb93 f0f2 	sdiv	r0, r3, r2
    e502:	fb02 3310 	mls	r3, r2, r0, r3
    e506:	428b      	cmp	r3, r1
    e508:	d1df      	bne.n	e4ca <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x16>
                        this->CycleOut_out(static_cast<FwIndexType>(entry),cycleStart);
    e50a:	4621      	mov	r1, r4
    e50c:	463a      	mov	r2, r7
    e50e:	4630      	mov	r0, r6
    e510:	f000 f94a 	bl	e7a8 <Svc::RateGroupDriverComponentBase::CycleOut_out(long, Os::RawTime&)>
    e514:	e7d9      	b.n	e4ca <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x16>
        FW_ASSERT(this->m_configured);
    e516:	2130      	movs	r1, #48	; 0x30
    e518:	4801      	ldr	r0, [pc, #4]	; (e520 <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0x6c>)
    e51a:	f7f3 f877 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    e51e:	e7cf      	b.n	e4c0 <Svc::RateGroupDriver::CycleIn_handler(long, Os::RawTime&)+0xc>
    e520:	20001198 	.word	0x20001198

0000e524 <Svc::RateGroupDriver::RateGroupDriver(char const*)>:
    RateGroupDriver::RateGroupDriver(const char* compName) :
    e524:	b510      	push	{r4, lr}
    e526:	4604      	mov	r4, r0
    m_ticks(0),m_rollover(1),m_configured(false) {
    e528:	f000 f8f0 	bl	e70c <Svc::RateGroupDriverComponentBase::RateGroupDriverComponentBase(char const*)>
                Divider() : divisor(0), offset(0)
    e52c:	2300      	movs	r3, #0
    e52e:	4907      	ldr	r1, [pc, #28]	; (e54c <Svc::RateGroupDriver::RateGroupDriver(char const*)+0x28>)
    e530:	2201      	movs	r2, #1
    }
    e532:	4620      	mov	r0, r4
    m_ticks(0),m_rollover(1),m_configured(false) {
    e534:	6021      	str	r1, [r4, #0]
    e536:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    e53a:	e9c4 3386 	strd	r3, r3, [r4, #536]	; 0x218
    e53e:	e9c4 3388 	strd	r3, r3, [r4, #544]	; 0x220
    e542:	e9c4 338a 	strd	r3, r3, [r4, #552]	; 0x228
    e546:	e9c4 328c 	strd	r3, r2, [r4, #560]	; 0x230
    }
    e54a:	bd10      	pop	{r4, pc}
    e54c:	20003ab0 	.word	0x20003ab0

0000e550 <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)>:
    {
    e550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e554:	4606      	mov	r6, r0
    e556:	460c      	mov	r4, r1
        FW_ASSERT(FW_NUM_ARRAY_ELEMENTS(this->m_dividers) == this->getNum_CycleOut_OutputPorts(),
    e558:	f000 f90e 	bl	e778 <Svc::RateGroupDriverComponentBase::getNum_CycleOut_OutputPorts() const>
    e55c:	2803      	cmp	r0, #3
    e55e:	d008      	beq.n	e572 <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x22>
    e560:	4630      	mov	r0, r6
    e562:	f000 f909 	bl	e778 <Svc::RateGroupDriverComponentBase::getNum_CycleOut_OutputPorts() const>
    e566:	2315      	movs	r3, #21
    e568:	4602      	mov	r2, r0
    e56a:	2103      	movs	r1, #3
    e56c:	4816      	ldr	r0, [pc, #88]	; (e5c8 <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x78>)
    e56e:	f7f3 f86b 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    e572:	4635      	mov	r5, r6
    e574:	3404      	adds	r4, #4
    e576:	f106 0718 	add.w	r7, r6, #24
            FW_ASSERT((dividerSet.dividers[entry].offset==0)||(dividerSet.dividers[entry].offset < dividerSet.dividers[entry].divisor),
    e57a:	f8df 804c 	ldr.w	r8, [pc, #76]	; e5c8 <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x78>
    e57e:	6821      	ldr	r1, [r4, #0]
    e580:	b119      	cbz	r1, e58a <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x3a>
    e582:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e586:	4291      	cmp	r1, r2
    e588:	da18      	bge.n	e5bc <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x6c>
            this->m_dividers[entry] = dividerSet.dividers[entry];
    e58a:	1f22      	subs	r2, r4, #4
    e58c:	f505 7306 	add.w	r3, r5, #536	; 0x218
        for (NATIVE_UINT_TYPE entry = 0; entry < RateGroupDriver::DIVIDER_SIZE; entry++) {
    e590:	3408      	adds	r4, #8
            this->m_dividers[entry] = dividerSet.dividers[entry];
    e592:	3508      	adds	r5, #8
    e594:	e892 0003 	ldmia.w	r2, {r0, r1}
    e598:	e883 0003 	stmia.w	r3, {r0, r1}
            if (dividerSet.dividers[entry].divisor != 0) {
    e59c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    e5a0:	b12b      	cbz	r3, e5ae <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x5e>
                this->m_rollover *= dividerSet.dividers[entry].divisor;
    e5a2:	f8d6 2234 	ldr.w	r2, [r6, #564]	; 0x234
    e5a6:	fb03 f202 	mul.w	r2, r3, r2
    e5aa:	f8c6 2234 	str.w	r2, [r6, #564]	; 0x234
        for (NATIVE_UINT_TYPE entry = 0; entry < RateGroupDriver::DIVIDER_SIZE; entry++) {
    e5ae:	42bd      	cmp	r5, r7
    e5b0:	d1e5      	bne.n	e57e <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x2e>
        this->m_configured = true;
    e5b2:	2301      	movs	r3, #1
    e5b4:	f886 3238 	strb.w	r3, [r6, #568]	; 0x238
    }
    e5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            FW_ASSERT((dividerSet.dividers[entry].offset==0)||(dividerSet.dividers[entry].offset < dividerSet.dividers[entry].divisor),
    e5bc:	231b      	movs	r3, #27
    e5be:	4640      	mov	r0, r8
    e5c0:	f7f3 f842 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    e5c4:	e7e1      	b.n	e58a <Svc::RateGroupDriver::configure(Svc::RateGroupDriver::DividerSet const&)+0x3a>
    e5c6:	bf00      	nop
    e5c8:	20001198 	.word	0x20001198

0000e5cc <Svc::RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)>:
    m_p_CycleIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Os::RawTime& cycleStart
    )
  {
    e5cc:	b570      	push	{r4, r5, r6, lr}
    e5ce:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
    e5d0:	4604      	mov	r4, r0
  {
    e5d2:	4616      	mov	r6, r2
    FW_ASSERT(callComp);
    e5d4:	b170      	cbz	r0, e5f4 <Svc::RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x28>
    FW_ASSERT(
    e5d6:	2d00      	cmp	r5, #0
    e5d8:	dd04      	ble.n	e5e4 <Svc::RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x18>
    e5da:	22be      	movs	r2, #190	; 0xbe
    e5dc:	4629      	mov	r1, r5
    e5de:	4808      	ldr	r0, [pc, #32]	; (e600 <Svc::RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x34>)
    e5e0:	f7f3 f822 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->CycleIn_handler(
    e5e4:	6823      	ldr	r3, [r4, #0]
    e5e6:	4632      	mov	r2, r6
    e5e8:	4629      	mov	r1, r5
    e5ea:	4620      	mov	r0, r4
    e5ec:	691b      	ldr	r3, [r3, #16]
    RateGroupDriverComponentBase* compPtr = static_cast<RateGroupDriverComponentBase*>(callComp);
    compPtr->CycleIn_handlerBase(
      portNum,
      cycleStart
    );
  }
    e5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->CycleIn_handler(
    e5f2:	4718      	bx	r3
    FW_ASSERT(callComp);
    e5f4:	21e8      	movs	r1, #232	; 0xe8
    e5f6:	4802      	ldr	r0, [pc, #8]	; (e600 <Svc::RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0x34>)
    e5f8:	f7f3 f808 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    e5fc:	e7eb      	b.n	e5d6 <Svc::RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase*, long, Os::RawTime&)+0xa>
    e5fe:	bf00      	nop
    e600:	2000193c 	.word	0x2000193c

0000e604 <Svc::RateGroupDriverComponentBase::init(long)>:
  {
    e604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e608:	4604      	mov	r4, r0
    e60a:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    e60c:	f003 fc68 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
    ObjectName() : StringBase() { *this = ""; }
    e610:	4e26      	ldr	r6, [pc, #152]	; (e6ac <Svc::RateGroupDriverComponentBase::init(long)+0xa8>)
      this->m_CycleIn_InputPort[port].init();
    e612:	f104 0564 	add.w	r5, r4, #100	; 0x64
    const char* toChar() const { return this->m_buf; }
    e616:	f104 0708 	add.w	r7, r4, #8
        (void)StringBase::operator=(src);
    e61a:	f8df 9098 	ldr.w	r9, [pc, #152]	; e6b4 <Svc::RateGroupDriverComponentBase::init(long)+0xb0>
    e61e:	4628      	mov	r0, r5
      portName.format(
    e620:	f8df 8098 	ldr.w	r8, [pc, #152]	; e6bc <Svc::RateGroupDriverComponentBase::init(long)+0xb8>
      this->m_CycleIn_InputPort[port].init();
    e624:	f000 f9ca 	bl	e9bc <Svc::InputCyclePort::init()>
      this->m_CycleIn_InputPort[port].addCallComp(
    e628:	4a21      	ldr	r2, [pc, #132]	; (e6b0 <Svc::RateGroupDriverComponentBase::init(long)+0xac>)
    e62a:	4621      	mov	r1, r4
    e62c:	4628      	mov	r0, r5
    e62e:	f000 f929 	bl	e884 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))>
      this->m_CycleIn_InputPort[port].setPortNum(port);
    e632:	2100      	movs	r1, #0
    e634:	4628      	mov	r0, r5
    e636:	34d4      	adds	r4, #212	; 0xd4
    e638:	f009 fb4c 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    e63c:	4668      	mov	r0, sp
    e63e:	f7f2 fdef 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    e642:	491c      	ldr	r1, [pc, #112]	; (e6b4 <Svc::RateGroupDriverComponentBase::init(long)+0xb0>)
    e644:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    e646:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    e648:	f7f2 fe52 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    e64c:	2300      	movs	r3, #0
    e64e:	463a      	mov	r2, r7
    e650:	4919      	ldr	r1, [pc, #100]	; (e6b8 <Svc::RateGroupDriverComponentBase::init(long)+0xb4>)
    e652:	4668      	mov	r0, sp
    e654:	f7f2 fe1a 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CycleIn_InputPort[port].setObjName(portName.toChar());
    e658:	4628      	mov	r0, r5
    e65a:	a901      	add	r1, sp, #4
      FwIndexType port = 0;
    e65c:	2500      	movs	r5, #0
      this->m_CycleIn_InputPort[port].setObjName(portName.toChar());
    e65e:	f009 fc9f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    e662:	4668      	mov	r0, sp
    e664:	9600      	str	r6, [sp, #0]
    e666:	f7f2 fde5 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CycleOut_OutputPort[port].init();
    e66a:	6823      	ldr	r3, [r4, #0]
    e66c:	4620      	mov	r0, r4
    e66e:	68db      	ldr	r3, [r3, #12]
    e670:	4798      	blx	r3
    ObjectName() : StringBase() { *this = ""; }
    e672:	4668      	mov	r0, sp
    e674:	f7f2 fdd4 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    e678:	4649      	mov	r1, r9
    e67a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    e67c:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
    e67e:	f7f2 fe37 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    e682:	462b      	mov	r3, r5
    e684:	463a      	mov	r2, r7
    e686:	4641      	mov	r1, r8
    e688:	4668      	mov	r0, sp
    for (
    e68a:	3501      	adds	r5, #1
      portName.format(
    e68c:	f7f2 fdfe 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CycleOut_OutputPort[port].setObjName(portName.toChar());
    e690:	4620      	mov	r0, r4
    e692:	a901      	add	r1, sp, #4
      port < static_cast<FwIndexType>(this->getNum_CycleOut_OutputPorts());
    e694:	346c      	adds	r4, #108	; 0x6c
      this->m_CycleOut_OutputPort[port].setObjName(portName.toChar());
    e696:	f009 fc83 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    e69a:	4668      	mov	r0, sp
    e69c:	9600      	str	r6, [sp, #0]
    e69e:	f7f2 fdc9 	bl	1234 <Fw::StringBase::~StringBase()>
      port < static_cast<FwIndexType>(this->getNum_CycleOut_OutputPorts());
    e6a2:	2d03      	cmp	r5, #3
    e6a4:	d1e1      	bne.n	e66a <Svc::RateGroupDriverComponentBase::init(long)+0x66>
  }
    e6a6:	b017      	add	sp, #92	; 0x5c
    e6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e6ac:	20002b80 	.word	0x20002b80
    e6b0:	0000e5cd 	.word	0x0000e5cd
    e6b4:	20001d2c 	.word	0x20001d2c
    e6b8:	20001a54 	.word	0x20001a54
    e6bc:	20002130 	.word	0x20002130

0000e6c0 <Svc::RateGroupDriverComponentBase::get_CycleIn_InputPort(long)>:
  {
    e6c0:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    e6c2:	1e0c      	subs	r4, r1, #0
  {
    e6c4:	4605      	mov	r5, r0
    FW_ASSERT(
    e6c6:	dd03      	ble.n	e6d0 <Svc::RateGroupDriverComponentBase::get_CycleIn_InputPort(long)+0x10>
    e6c8:	224d      	movs	r2, #77	; 0x4d
    e6ca:	4804      	ldr	r0, [pc, #16]	; (e6dc <Svc::RateGroupDriverComponentBase::get_CycleIn_InputPort(long)+0x1c>)
    e6cc:	f7f2 ffac 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_CycleIn_InputPort[portNum];
    e6d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e6d4:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    e6d8:	3064      	adds	r0, #100	; 0x64
    e6da:	bd38      	pop	{r3, r4, r5, pc}
    e6dc:	2000193c 	.word	0x2000193c

0000e6e0 <Svc::RateGroupDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)>:
    FW_ASSERT(
    e6e0:	2902      	cmp	r1, #2
  {
    e6e2:	b570      	push	{r4, r5, r6, lr}
    e6e4:	460d      	mov	r5, r1
    e6e6:	4604      	mov	r4, r0
    e6e8:	4616      	mov	r6, r2
    FW_ASSERT(
    e6ea:	dc08      	bgt.n	e6fe <Svc::RateGroupDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)+0x1e>
    this->m_CycleOut_OutputPort[portNum].addCallPort(port);
    e6ec:	236c      	movs	r3, #108	; 0x6c
    e6ee:	4631      	mov	r1, r6
    e6f0:	fb03 4005 	mla	r0, r3, r5, r4
  }
    e6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CycleOut_OutputPort[portNum].addCallPort(port);
    e6f8:	30d4      	adds	r0, #212	; 0xd4
    e6fa:	f000 b911 	b.w	e920 <Svc::OutputCyclePort::addCallPort(Svc::InputCyclePort*)>
    FW_ASSERT(
    e6fe:	225f      	movs	r2, #95	; 0x5f
    e700:	4801      	ldr	r0, [pc, #4]	; (e708 <Svc::RateGroupDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)+0x28>)
    e702:	f7f2 ff91 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e706:	e7f1      	b.n	e6ec <Svc::RateGroupDriverComponentBase::set_CycleOut_OutputPort(long, Svc::InputCyclePort*)+0xc>
    e708:	2000193c 	.word	0x2000193c

0000e70c <Svc::RateGroupDriverComponentBase::RateGroupDriverComponentBase(char const*)>:
  RateGroupDriverComponentBase ::
    e70c:	b510      	push	{r4, lr}
    e70e:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    e710:	f003 fbd8 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    e714:	4b09      	ldr	r3, [pc, #36]	; (e73c <Svc::RateGroupDriverComponentBase::RateGroupDriverComponentBase(char const*)+0x30>)
    e716:	4620      	mov	r0, r4
    e718:	f840 3b64 	str.w	r3, [r0], #100
    e71c:	f000 f8a6 	bl	e86c <Svc::InputCyclePort::InputCyclePort()>
    e720:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    e724:	f000 f8f0 	bl	e908 <Svc::OutputCyclePort::OutputCyclePort()>
    e728:	f504 70a0 	add.w	r0, r4, #320	; 0x140
    e72c:	f000 f8ec 	bl	e908 <Svc::OutputCyclePort::OutputCyclePort()>
    e730:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    e734:	f000 f8e8 	bl	e908 <Svc::OutputCyclePort::OutputCyclePort()>
  }
    e738:	4620      	mov	r0, r4
    e73a:	bd10      	pop	{r4, pc}
    e73c:	20003dbc 	.word	0x20003dbc

0000e740 <Svc::RateGroupDriverComponentBase::~RateGroupDriverComponentBase()>:
  RateGroupDriverComponentBase ::
    e740:	b570      	push	{r4, r5, r6, lr}
    ~RateGroupDriverComponentBase()
    e742:	4b0c      	ldr	r3, [pc, #48]	; (e774 <Svc::RateGroupDriverComponentBase::~RateGroupDriverComponentBase()+0x34>)
  RateGroupDriverComponentBase ::
    e744:	4605      	mov	r5, r0
    ~RateGroupDriverComponentBase()
    e746:	f500 7406 	add.w	r4, r0, #536	; 0x218
    e74a:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
    e74e:	6003      	str	r3, [r0, #0]
    e750:	f854 3d6c 	ldr.w	r3, [r4, #-108]!
    e754:	685b      	ldr	r3, [r3, #4]
    e756:	4620      	mov	r0, r4
    e758:	4798      	blx	r3
  }
    e75a:	42a6      	cmp	r6, r4
    e75c:	d1f8      	bne.n	e750 <Svc::RateGroupDriverComponentBase::~RateGroupDriverComponentBase()+0x10>
    ~RateGroupDriverComponentBase()
    e75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e760:	f105 0064 	add.w	r0, r5, #100	; 0x64
    e764:	685b      	ldr	r3, [r3, #4]
    e766:	4798      	blx	r3
    e768:	4628      	mov	r0, r5
    e76a:	f003 fb53 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    e76e:	4628      	mov	r0, r5
    e770:	bd70      	pop	{r4, r5, r6, pc}
    e772:	bf00      	nop
    e774:	20003dbc 	.word	0x20003dbc

0000e778 <Svc::RateGroupDriverComponentBase::getNum_CycleOut_OutputPorts() const>:
  }
    e778:	2003      	movs	r0, #3
    e77a:	4770      	bx	lr

0000e77c <Svc::RateGroupDriverComponentBase::isConnected_CycleOut_OutputPort(long)>:
    FW_ASSERT(
    e77c:	2902      	cmp	r1, #2
  {
    e77e:	b538      	push	{r3, r4, r5, lr}
    e780:	460d      	mov	r5, r1
    e782:	4604      	mov	r4, r0
    FW_ASSERT(
    e784:	dc08      	bgt.n	e798 <Svc::RateGroupDriverComponentBase::isConnected_CycleOut_OutputPort(long)+0x1c>
    return this->m_CycleOut_OutputPort[portNum].isConnected();
    e786:	236c      	movs	r3, #108	; 0x6c
    e788:	fb03 4305 	mla	r3, r3, r5, r4
    e78c:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
  }
    e790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_CycleOut_OutputPort[portNum].isConnected();
    e794:	f009 bb5a 	b.w	17e4c <Fw::PortBase::isConnected() const>
    FW_ASSERT(
    e798:	22a9      	movs	r2, #169	; 0xa9
    e79a:	4802      	ldr	r0, [pc, #8]	; (e7a4 <Svc::RateGroupDriverComponentBase::isConnected_CycleOut_OutputPort(long)+0x28>)
    e79c:	f7f2 ff44 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e7a0:	e7f1      	b.n	e786 <Svc::RateGroupDriverComponentBase::isConnected_CycleOut_OutputPort(long)+0xa>
    e7a2:	bf00      	nop
    e7a4:	2000193c 	.word	0x2000193c

0000e7a8 <Svc::RateGroupDriverComponentBase::CycleOut_out(long, Os::RawTime&)>:
    FW_ASSERT(
    e7a8:	2902      	cmp	r1, #2
  {
    e7aa:	b570      	push	{r4, r5, r6, lr}
    e7ac:	460d      	mov	r5, r1
    e7ae:	4604      	mov	r4, r0
    e7b0:	4616      	mov	r6, r2
    FW_ASSERT(
    e7b2:	dc08      	bgt.n	e7c6 <Svc::RateGroupDriverComponentBase::CycleOut_out(long, Os::RawTime&)+0x1e>
    this->m_CycleOut_OutputPort[portNum].invoke(
    e7b4:	236c      	movs	r3, #108	; 0x6c
    e7b6:	4631      	mov	r1, r6
    e7b8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    e7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CycleOut_OutputPort[portNum].invoke(
    e7c0:	30d4      	adds	r0, #212	; 0xd4
    e7c2:	f000 b8bd 	b.w	e940 <Svc::OutputCyclePort::invoke(Os::RawTime&) const>
    FW_ASSERT(
    e7c6:	22d4      	movs	r2, #212	; 0xd4
    e7c8:	4801      	ldr	r0, [pc, #4]	; (e7d0 <Svc::RateGroupDriverComponentBase::CycleOut_out(long, Os::RawTime&)+0x28>)
    e7ca:	f7f2 ff2d 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e7ce:	e7f1      	b.n	e7b4 <Svc::RateGroupDriverComponentBase::CycleOut_out(long, Os::RawTime&)+0xc>
    e7d0:	2000193c 	.word	0x2000193c

0000e7d4 <Svc::(anonymous namespace)::CyclePortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputCyclePort::SERIALIZED_SIZE;
        }
    e7d4:	2008      	movs	r0, #8
    e7d6:	4770      	bx	lr

0000e7d8 <Svc::(anonymous namespace)::CyclePortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
    e7d8:	300c      	adds	r0, #12
    e7da:	4770      	bx	lr

0000e7dc <Svc::(anonymous namespace)::CyclePortBuffer::~CyclePortBuffer()>:
    class CyclePortBuffer : public Fw::SerializeBufferBase {
    e7dc:	4b03      	ldr	r3, [pc, #12]	; (e7ec <Svc::(anonymous namespace)::CyclePortBuffer::~CyclePortBuffer()+0x10>)
    e7de:	b510      	push	{r4, lr}
    e7e0:	4604      	mov	r4, r0
    e7e2:	6003      	str	r3, [r0, #0]
    e7e4:	f7f1 feb4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    e7e8:	4620      	mov	r0, r4
    e7ea:	bd10      	pop	{r4, pc}
    e7ec:	20003918 	.word	0x20003918

0000e7f0 <Svc::(anonymous namespace)::CyclePortBuffer::~CyclePortBuffer()>:
    e7f0:	4b05      	ldr	r3, [pc, #20]	; (e808 <Svc::(anonymous namespace)::CyclePortBuffer::~CyclePortBuffer()+0x18>)
    e7f2:	b510      	push	{r4, lr}
    e7f4:	4604      	mov	r4, r0
    e7f6:	6003      	str	r3, [r0, #0]
    e7f8:	f7f1 feaa 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    e7fc:	2114      	movs	r1, #20
    e7fe:	4620      	mov	r0, r4
    e800:	f00a fa66 	bl	18cd0 <operator delete(void*, unsigned int)>
    e804:	4620      	mov	r0, r4
    e806:	bd10      	pop	{r4, pc}
    e808:	20003918 	.word	0x20003918

0000e80c <Svc::OutputCyclePort::~OutputCyclePort()>:

  };

  //! Output Cycle port
  //! Time cycle Port with timestamp argument
  class OutputCyclePort :
    e80c:	4b03      	ldr	r3, [pc, #12]	; (e81c <Svc::OutputCyclePort::~OutputCyclePort()+0x10>)
    e80e:	b510      	push	{r4, lr}
    e810:	4604      	mov	r4, r0
    e812:	6003      	str	r3, [r0, #0]
    e814:	f009 fa72 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    e818:	4620      	mov	r0, r4
    e81a:	bd10      	pop	{r4, pc}
    e81c:	20003a78 	.word	0x20003a78

0000e820 <Svc::OutputCyclePort::~OutputCyclePort()>:
    e820:	4b05      	ldr	r3, [pc, #20]	; (e838 <Svc::OutputCyclePort::~OutputCyclePort()+0x18>)
    e822:	b510      	push	{r4, lr}
    e824:	4604      	mov	r4, r0
    e826:	6003      	str	r3, [r0, #0]
    e828:	f009 fa68 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
    e82c:	216c      	movs	r1, #108	; 0x6c
    e82e:	4620      	mov	r0, r4
    e830:	f00a fa4e 	bl	18cd0 <operator delete(void*, unsigned int)>
    e834:	4620      	mov	r0, r4
    e836:	bd10      	pop	{r4, pc}
    e838:	20003a78 	.word	0x20003a78

0000e83c <Svc::InputCyclePort::~InputCyclePort()>:
  class InputCyclePort :
    e83c:	4b03      	ldr	r3, [pc, #12]	; (e84c <Svc::InputCyclePort::~InputCyclePort()+0x10>)
    e83e:	b510      	push	{r4, lr}
    e840:	4604      	mov	r4, r0
    e842:	6003      	str	r3, [r0, #0]
    e844:	f009 fa3c 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    e848:	4620      	mov	r0, r4
    e84a:	bd10      	pop	{r4, pc}
    e84c:	200039f4 	.word	0x200039f4

0000e850 <Svc::InputCyclePort::~InputCyclePort()>:
    e850:	4b05      	ldr	r3, [pc, #20]	; (e868 <Svc::InputCyclePort::~InputCyclePort()+0x18>)
    e852:	b510      	push	{r4, lr}
    e854:	4604      	mov	r4, r0
    e856:	6003      	str	r3, [r0, #0]
    e858:	f009 fa32 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
    e85c:	2170      	movs	r1, #112	; 0x70
    e85e:	4620      	mov	r0, r4
    e860:	f00a fa36 	bl	18cd0 <operator delete(void*, unsigned int)>
    e864:	4620      	mov	r0, r4
    e866:	bd10      	pop	{r4, pc}
    e868:	200039f4 	.word	0x200039f4

0000e86c <Svc::InputCyclePort::InputCyclePort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputCyclePort ::
    e86c:	b510      	push	{r4, lr}
    e86e:	4604      	mov	r4, r0
    InputCyclePort() :
      Fw::InputPortBase(),
      m_func(nullptr)
    e870:	f009 fa16 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
    e874:	4a02      	ldr	r2, [pc, #8]	; (e880 <Svc::InputCyclePort::InputCyclePort()+0x14>)
    e876:	2300      	movs	r3, #0
  {

  }
    e878:	4620      	mov	r0, r4
      m_func(nullptr)
    e87a:	6022      	str	r2, [r4, #0]
    e87c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
    e87e:	bd10      	pop	{r4, pc}
    e880:	200039f4 	.word	0x200039f4

0000e884 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))>:
  void InputCyclePort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
    e884:	b570      	push	{r4, r5, r6, lr}
    e886:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
    e888:	460d      	mov	r5, r1
  {
    e88a:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
    e88c:	b121      	cbz	r1, e898 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
    e88e:	b14e      	cbz	r6, e8a4 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))+0x20>

    this->m_comp = callComp;
    e890:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    e892:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    e894:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    e896:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
    e898:	2143      	movs	r1, #67	; 0x43
    e89a:	4806      	ldr	r0, [pc, #24]	; (e8b4 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))+0x30>)
    e89c:	f7f2 feb6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
    e8a0:	2e00      	cmp	r6, #0
    e8a2:	d1f5      	bne.n	e890 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))+0xc>
    e8a4:	2144      	movs	r1, #68	; 0x44
    e8a6:	4803      	ldr	r0, [pc, #12]	; (e8b4 <Svc::InputCyclePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Os::RawTime&))+0x30>)
    e8a8:	f7f2 feb0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
    e8ac:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
    e8ae:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
    e8b0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
    e8b2:	bd70      	pop	{r4, r5, r6, pc}
    e8b4:	200010e8 	.word	0x200010e8

0000e8b8 <Svc::InputCyclePort::invoke(Os::RawTime&)>:

  void InputCyclePort ::
    invoke(Os::RawTime& cycleStart)
  {
    e8b8:	b510      	push	{r4, lr}
    e8ba:	4604      	mov	r4, r0
    e8bc:	b082      	sub	sp, #8
    e8be:	9101      	str	r1, [sp, #4]
#if FW_PORT_TRACING == 1
    this->trace();
    e8c0:	f009 faca 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
    e8c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e8c6:	9a01      	ldr	r2, [sp, #4]
    e8c8:	b13b      	cbz	r3, e8da <Svc::InputCyclePort::invoke(Os::RawTime&)+0x22>
    FW_ASSERT(this->m_func != nullptr);
    e8ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e8cc:	b16b      	cbz	r3, e8ea <Svc::InputCyclePort::invoke(Os::RawTime&)+0x32>

    return this->m_func(this->m_comp, this->m_portNum, cycleStart);
    e8ce:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    e8d2:	b002      	add	sp, #8
    e8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, cycleStart);
    e8d8:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
    e8da:	2152      	movs	r1, #82	; 0x52
    e8dc:	4809      	ldr	r0, [pc, #36]	; (e904 <Svc::InputCyclePort::invoke(Os::RawTime&)+0x4c>)
    e8de:	f7f2 fe95 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    e8e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
    e8e4:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	d1f1      	bne.n	e8ce <Svc::InputCyclePort::invoke(Os::RawTime&)+0x16>
    e8ea:	2153      	movs	r1, #83	; 0x53
    e8ec:	4805      	ldr	r0, [pc, #20]	; (e904 <Svc::InputCyclePort::invoke(Os::RawTime&)+0x4c>)
    e8ee:	9201      	str	r2, [sp, #4]
    e8f0:	f7f2 fe8c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, cycleStart);
    e8f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e8f6:	9a01      	ldr	r2, [sp, #4]
    e8f8:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
    e8fc:	b002      	add	sp, #8
    e8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, cycleStart);
    e902:	4718      	bx	r3
    e904:	200010e8 	.word	0x200010e8

0000e908 <Svc::OutputCyclePort::OutputCyclePort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputCyclePort ::
    e908:	b510      	push	{r4, lr}
    e90a:	4604      	mov	r4, r0
    OutputCyclePort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
    e90c:	f009 fa0e 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
    e910:	4a02      	ldr	r2, [pc, #8]	; (e91c <Svc::OutputCyclePort::OutputCyclePort()+0x14>)
    e912:	2300      	movs	r3, #0
  {

  }
    e914:	4620      	mov	r0, r4
      m_port(nullptr)
    e916:	6022      	str	r2, [r4, #0]
    e918:	66a3      	str	r3, [r4, #104]	; 0x68
  }
    e91a:	bd10      	pop	{r4, pc}
    e91c:	20003a78 	.word	0x20003a78

0000e920 <Svc::OutputCyclePort::addCallPort(Svc::InputCyclePort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputCyclePort ::
    addCallPort(InputCyclePort* callPort)
  {
    e920:	b538      	push	{r3, r4, r5, lr}
    e922:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
    e924:	460d      	mov	r5, r1
    e926:	b121      	cbz	r1, e932 <Svc::OutputCyclePort::addCallPort(Svc::InputCyclePort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
    e928:	2300      	movs	r3, #0
    this->m_port = callPort;
    e92a:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
    e92c:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
    e92e:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
    e930:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
    e932:	2188      	movs	r1, #136	; 0x88
    e934:	4801      	ldr	r0, [pc, #4]	; (e93c <Svc::OutputCyclePort::addCallPort(Svc::InputCyclePort*)+0x1c>)
    e936:	f7f2 fe69 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    e93a:	e7f5      	b.n	e928 <Svc::OutputCyclePort::addCallPort(Svc::InputCyclePort*)+0x8>
    e93c:	200010e8 	.word	0x200010e8

0000e940 <Svc::OutputCyclePort::invoke(Os::RawTime&) const>:

  void OutputCyclePort ::
    invoke(Os::RawTime& cycleStart) const
  {
    e940:	b570      	push	{r4, r5, r6, lr}
    e942:	4604      	mov	r4, r0
    e944:	b086      	sub	sp, #24
    e946:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
    e948:	f009 fa86 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    e94c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    e94e:	b128      	cbz	r0, e95c <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(cycleStart);
    e950:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(cycleStart);
#endif
  }
    e952:	b006      	add	sp, #24
    e954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(cycleStart);
    e958:	f7ff bfae 	b.w	e8b8 <Svc::InputCyclePort::invoke(Os::RawTime&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    e95c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e95e:	b30b      	cbz	r3, e9a4 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x64>
    class CyclePortBuffer : public Fw::SerializeBufferBase {
    e960:	4e14      	ldr	r6, [pc, #80]	; (e9b4 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x74>)
    e962:	a801      	add	r0, sp, #4
    e964:	f7f1 fdec 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(cycleStart);
    e968:	4629      	mov	r1, r5
    e96a:	a801      	add	r0, sp, #4
    class CyclePortBuffer : public Fw::SerializeBufferBase {
    e96c:	9601      	str	r6, [sp, #4]
      _status = _buffer.serialize(cycleStart);
    e96e:	f7f2 f8c7 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    e972:	b958      	cbnz	r0, e98c <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
    e974:	6e60      	ldr	r0, [r4, #100]	; 0x64
    e976:	a901      	add	r1, sp, #4
    e978:	6803      	ldr	r3, [r0, #0]
    e97a:	695b      	ldr	r3, [r3, #20]
    e97c:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    e97e:	b958      	cbnz	r0, e998 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x58>
    class CyclePortBuffer : public Fw::SerializeBufferBase {
    e980:	a801      	add	r0, sp, #4
    e982:	9601      	str	r6, [sp, #4]
    e984:	f7f1 fde4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
    e988:	b006      	add	sp, #24
    e98a:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    e98c:	4601      	mov	r1, r0
    e98e:	22a4      	movs	r2, #164	; 0xa4
    e990:	4809      	ldr	r0, [pc, #36]	; (e9b8 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x78>)
    e992:	f7f2 fe49 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e996:	e7ed      	b.n	e974 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    e998:	4601      	mov	r1, r0
    e99a:	22a7      	movs	r2, #167	; 0xa7
    e99c:	4806      	ldr	r0, [pc, #24]	; (e9b8 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x78>)
    e99e:	f7f2 fe43 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    e9a2:	e7ed      	b.n	e980 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
    e9a4:	219a      	movs	r1, #154	; 0x9a
    e9a6:	4804      	ldr	r0, [pc, #16]	; (e9b8 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x78>)
    e9a8:	f7f2 fe30 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
    e9ac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    e9ae:	2800      	cmp	r0, #0
    e9b0:	d0d6      	beq.n	e960 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x20>
    e9b2:	e7cd      	b.n	e950 <Svc::OutputCyclePort::invoke(Os::RawTime&) const+0x10>
    e9b4:	20003918 	.word	0x20003918
    e9b8:	200010e8 	.word	0x200010e8

0000e9bc <Svc::InputCyclePort::init()>:
    Fw::InputPortBase::init();
    e9bc:	f009 b998 	b.w	17cf0 <Fw::InputPortBase::init()>

0000e9c0 <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
    e9c0:	b530      	push	{r4, r5, lr}
    e9c2:	4604      	mov	r4, r0
    e9c4:	b08b      	sub	sp, #44	; 0x2c
    e9c6:	460d      	mov	r5, r1
    this->trace();
    e9c8:	f009 fa46 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
    e9cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e9ce:	b1ab      	cbz	r3, e9fc <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x3c>
    FW_ASSERT(this->m_func != nullptr);
    e9d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e9d2:	b1d3      	cbz	r3, ea0a <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x4a>
    Os::RawTime cycleStart;
    e9d4:	4668      	mov	r0, sp
    e9d6:	f006 fc31 	bl	1523c <Os::RawTime::RawTime()>
    _status = _buffer.deserialize(cycleStart);
    e9da:	4628      	mov	r0, r5
    e9dc:	4669      	mov	r1, sp
    e9de:	f7f2 fa79 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    e9e2:	4605      	mov	r5, r0
    e9e4:	b920      	cbnz	r0, e9f0 <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
    this->m_func(this->m_comp, this->m_portNum, cycleStart);
    e9e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e9e8:	466a      	mov	r2, sp
    e9ea:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
    e9ee:	4798      	blx	r3
  }
    e9f0:	4668      	mov	r0, sp
    e9f2:	f006 f99f 	bl	14d34 <Os::RawTime::~RawTime()>
    e9f6:	4628      	mov	r0, r5
    e9f8:	b00b      	add	sp, #44	; 0x2c
    e9fa:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
    e9fc:	2163      	movs	r1, #99	; 0x63
    e9fe:	4805      	ldr	r0, [pc, #20]	; (ea14 <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x54>)
    ea00:	f7f2 fe04 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
    ea04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    ea06:	2b00      	cmp	r3, #0
    ea08:	d1e4      	bne.n	e9d4 <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    ea0a:	2164      	movs	r1, #100	; 0x64
    ea0c:	4801      	ldr	r0, [pc, #4]	; (ea14 <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x54>)
    ea0e:	f7f2 fdfd 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    ea12:	e7df      	b.n	e9d4 <Svc::InputCyclePort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    ea14:	200010e8 	.word	0x200010e8

0000ea18 <Svc::OutputCyclePort::init()>:
    Fw::OutputPortBase::init();
    ea18:	f009 b994 	b.w	17d44 <Fw::OutputPortBase::init()>

0000ea1c <Svc::SystemResources::~SystemResources()>:
    m_cpu_tlm_functions[13] = &Svc::SystemResources::tlmWrite_CPU_13;
    m_cpu_tlm_functions[14] = &Svc::SystemResources::tlmWrite_CPU_14;
    m_cpu_tlm_functions[15] = &Svc::SystemResources::tlmWrite_CPU_15;
}

SystemResources ::~SystemResources() {}
    ea1c:	4b03      	ldr	r3, [pc, #12]	; (ea2c <Svc::SystemResources::~SystemResources()+0x10>)
    ea1e:	b510      	push	{r4, lr}
    ea20:	4604      	mov	r4, r0
    ea22:	6003      	str	r3, [r0, #0]
    ea24:	f000 fd04 	bl	f430 <Svc::SystemResourcesComponentBase::~SystemResourcesComponentBase()>
    ea28:	4620      	mov	r0, r4
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	20003acc 	.word	0x20003acc

0000ea30 <Svc::SystemResources::~SystemResources()>:
    ea30:	4b06      	ldr	r3, [pc, #24]	; (ea4c <Svc::SystemResources::~SystemResources()+0x1c>)
    ea32:	b510      	push	{r4, lr}
    ea34:	4604      	mov	r4, r0
    ea36:	6003      	str	r3, [r0, #0]
    ea38:	f000 fcfa 	bl	f430 <Svc::SystemResourcesComponentBase::~SystemResourcesComponentBase()>
    ea3c:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    ea40:	4620      	mov	r0, r4
    ea42:	f00a f945 	bl	18cd0 <operator delete(void*, unsigned int)>
    ea46:	4620      	mov	r0, r4
    ea48:	bd10      	pop	{r4, pc}
    ea4a:	bf00      	nop
    ea4c:	20003acc 	.word	0x20003acc

0000ea50 <Svc::SystemResources::ENABLE_cmdHandler(unsigned long, unsigned long, Svc::SystemResourceEnabled)>:
      }

      //! Equality operator
      bool operator==(T e1) const
      {
        return this->e == e1;
    ea50:	791b      	ldrb	r3, [r3, #4]
    ea52:	f1a3 0301 	sub.w	r3, r3, #1
    ea56:	fab3 f383 	clz	r3, r3
// Command handler implementations
// ----------------------------------------------------------------------

void SystemResources ::ENABLE_cmdHandler(const FwOpcodeType opCode,
                                         const U32 cmdSeq,
                                         SystemResourceEnabled enable) {
    ea5a:	b530      	push	{r4, r5, lr}
    ea5c:	095b      	lsrs	r3, r3, #5
    ea5e:	b085      	sub	sp, #20
    ea60:	4604      	mov	r4, r0
      {
    ea62:	4d0c      	ldr	r5, [pc, #48]	; (ea94 <Svc::SystemResources::ENABLE_cmdHandler(unsigned long, unsigned long, Svc::SystemResourceEnabled)+0x44>)
    ea64:	f880 35b4 	strb.w	r3, [r0, #1460]	; 0x5b4
    ea68:	a802      	add	r0, sp, #8
    ea6a:	9101      	str	r1, [sp, #4]
    ea6c:	9200      	str	r2, [sp, #0]
    ea6e:	f7f1 fd5f 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    ea72:	2300      	movs	r3, #0
    m_enable = (enable == SystemResourceEnabled::ENABLED);
    this->cmdResponse_out(opCode, cmdSeq, Fw::CmdResponse::OK);
    ea74:	4620      	mov	r0, r4
      {
    ea76:	9502      	str	r5, [sp, #8]
        this->e = e1;
    ea78:	f88d 300c 	strb.w	r3, [sp, #12]
    ea7c:	ab02      	add	r3, sp, #8
    ea7e:	e9dd 2100 	ldrd	r2, r1, [sp]
    ea82:	f000 fc1b 	bl	f2bc <Svc::SystemResourcesComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>
  class CmdResponse :
    ea86:	a802      	add	r0, sp, #8
    ea88:	9502      	str	r5, [sp, #8]
    ea8a:	f7f1 fd57 	bl	53c <Fw::Serializable::~Serializable()>
}
    ea8e:	b005      	add	sp, #20
    ea90:	bd30      	pop	{r4, r5, pc}
    ea92:	bf00      	nop
    ea94:	20002bec 	.word	0x20002bec

0000ea98 <Svc::SystemResources::SystemResources(char const*)>:
SystemResources ::SystemResources(const char* const compName)
    ea98:	b510      	push	{r4, lr}
    ea9a:	4604      	mov	r4, r0
    : SystemResourcesComponentBase(compName), m_cpu_count(0), m_enable(true) {
    ea9c:	f000 fb92 	bl	f1c4 <Svc::SystemResourcesComponentBase::SystemResourcesComponentBase(char const*)>
    eaa0:	2101      	movs	r1, #1
    eaa2:	2200      	movs	r2, #0
    eaa4:	483c      	ldr	r0, [pc, #240]	; (eb98 <Svc::SystemResources::SystemResources(char const*)+0x100>)
    eaa6:	4623      	mov	r3, r4
    eaa8:	f884 15b4 	strb.w	r1, [r4, #1460]	; 0x5b4
    m_mem.used = 0;
    eaac:	f104 0180 	add.w	r1, r4, #128	; 0x80
    : SystemResourcesComponentBase(compName), m_cpu_count(0), m_enable(true) {
    eab0:	6020      	str	r0, [r4, #0]
    eab2:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
    m_mem.used = 0;
    eab6:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
    m_mem.total = 0;
    eaba:	f8c4 24b0 	str.w	r2, [r4, #1200]	; 0x4b0
        m_cpu[i].used = 0;
    eabe:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
    for (U32 i = 0; i < CPU_COUNT; i++) {
    eac2:	3308      	adds	r3, #8
        m_cpu[i].total = 0;
    eac4:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
        m_cpu_prev[i].used = 0;
    eac8:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
        m_cpu_prev[i].total = 0;
    eacc:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    for (U32 i = 0; i < CPU_COUNT; i++) {
    ead0:	428b      	cmp	r3, r1
    ead2:	d1f4      	bne.n	eabe <Svc::SystemResources::SystemResources(char const*)+0x26>
    if (Os::Cpu::getCount(m_cpu_count) == Os::Generic::ERROR) {
    ead4:	f504 6095 	add.w	r0, r4, #1192	; 0x4a8
    ead8:	f004 f936 	bl	12d48 <Os::Cpu::getCount(unsigned long&)>
    eadc:	2801      	cmp	r0, #1
    eade:	d059      	beq.n	eb94 <Svc::SystemResources::SystemResources(char const*)+0xfc>
    m_cpu_count = (m_cpu_count >= CPU_COUNT) ? CPU_COUNT : m_cpu_count;
    eae0:	f8d4 24a8 	ldr.w	r2, [r4, #1192]	; 0x4a8
    eae4:	2a10      	cmp	r2, #16
    eae6:	bf28      	it	cs
    eae8:	2210      	movcs	r2, #16
    eaea:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
    m_cpu_tlm_functions[0] = &Svc::SystemResources::tlmWrite_CPU_00;
    eaee:	2300      	movs	r3, #0
    m_cpu_tlm_functions[2] = &Svc::SystemResources::tlmWrite_CPU_02;
    eaf0:	4a2a      	ldr	r2, [pc, #168]	; (eb9c <Svc::SystemResources::SystemResources(char const*)+0x104>)
    m_cpu_tlm_functions[0] = &Svc::SystemResources::tlmWrite_CPU_00;
    eaf2:	492b      	ldr	r1, [pc, #172]	; (eba0 <Svc::SystemResources::SystemResources(char const*)+0x108>)
    m_cpu_tlm_functions[2] = &Svc::SystemResources::tlmWrite_CPU_02;
    eaf4:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
    m_cpu_tlm_functions[4] = &Svc::SystemResources::tlmWrite_CPU_04;
    eaf8:	4a2a      	ldr	r2, [pc, #168]	; (eba4 <Svc::SystemResources::SystemResources(char const*)+0x10c>)
    m_cpu_tlm_functions[0] = &Svc::SystemResources::tlmWrite_CPU_00;
    eafa:	f8c4 1428 	str.w	r1, [r4, #1064]	; 0x428
    m_cpu_tlm_functions[4] = &Svc::SystemResources::tlmWrite_CPU_04;
    eafe:	f8c4 2448 	str.w	r2, [r4, #1096]	; 0x448
    m_cpu_tlm_functions[6] = &Svc::SystemResources::tlmWrite_CPU_06;
    eb02:	4a29      	ldr	r2, [pc, #164]	; (eba8 <Svc::SystemResources::SystemResources(char const*)+0x110>)
    m_cpu_tlm_functions[1] = &Svc::SystemResources::tlmWrite_CPU_01;
    eb04:	4829      	ldr	r0, [pc, #164]	; (ebac <Svc::SystemResources::SystemResources(char const*)+0x114>)
    m_cpu_tlm_functions[6] = &Svc::SystemResources::tlmWrite_CPU_06;
    eb06:	f8c4 2458 	str.w	r2, [r4, #1112]	; 0x458
    m_cpu_tlm_functions[3] = &Svc::SystemResources::tlmWrite_CPU_03;
    eb0a:	4929      	ldr	r1, [pc, #164]	; (ebb0 <Svc::SystemResources::SystemResources(char const*)+0x118>)
    m_cpu_tlm_functions[8] = &Svc::SystemResources::tlmWrite_CPU_08;
    eb0c:	4a29      	ldr	r2, [pc, #164]	; (ebb4 <Svc::SystemResources::SystemResources(char const*)+0x11c>)
    m_cpu_tlm_functions[1] = &Svc::SystemResources::tlmWrite_CPU_01;
    eb0e:	f8c4 0430 	str.w	r0, [r4, #1072]	; 0x430
    m_cpu_tlm_functions[3] = &Svc::SystemResources::tlmWrite_CPU_03;
    eb12:	f8c4 1440 	str.w	r1, [r4, #1088]	; 0x440
    m_cpu_tlm_functions[8] = &Svc::SystemResources::tlmWrite_CPU_08;
    eb16:	f8c4 2468 	str.w	r2, [r4, #1128]	; 0x468
    m_cpu_tlm_functions[5] = &Svc::SystemResources::tlmWrite_CPU_05;
    eb1a:	4827      	ldr	r0, [pc, #156]	; (ebb8 <Svc::SystemResources::SystemResources(char const*)+0x120>)
    m_cpu_tlm_functions[7] = &Svc::SystemResources::tlmWrite_CPU_07;
    eb1c:	4927      	ldr	r1, [pc, #156]	; (ebbc <Svc::SystemResources::SystemResources(char const*)+0x124>)
    m_cpu_tlm_functions[10] = &Svc::SystemResources::tlmWrite_CPU_10;
    eb1e:	4a28      	ldr	r2, [pc, #160]	; (ebc0 <Svc::SystemResources::SystemResources(char const*)+0x128>)
    m_cpu_tlm_functions[5] = &Svc::SystemResources::tlmWrite_CPU_05;
    eb20:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
    m_cpu_tlm_functions[7] = &Svc::SystemResources::tlmWrite_CPU_07;
    eb24:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
    m_cpu_tlm_functions[10] = &Svc::SystemResources::tlmWrite_CPU_10;
    eb28:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
    m_cpu_tlm_functions[9] = &Svc::SystemResources::tlmWrite_CPU_09;
    eb2c:	4825      	ldr	r0, [pc, #148]	; (ebc4 <Svc::SystemResources::SystemResources(char const*)+0x12c>)
    m_cpu_tlm_functions[11] = &Svc::SystemResources::tlmWrite_CPU_11;
    eb2e:	4926      	ldr	r1, [pc, #152]	; (ebc8 <Svc::SystemResources::SystemResources(char const*)+0x130>)
    m_cpu_tlm_functions[12] = &Svc::SystemResources::tlmWrite_CPU_12;
    eb30:	4a26      	ldr	r2, [pc, #152]	; (ebcc <Svc::SystemResources::SystemResources(char const*)+0x134>)
    m_cpu_tlm_functions[9] = &Svc::SystemResources::tlmWrite_CPU_09;
    eb32:	f8c4 0470 	str.w	r0, [r4, #1136]	; 0x470
    m_cpu_tlm_functions[11] = &Svc::SystemResources::tlmWrite_CPU_11;
    eb36:	f8c4 1480 	str.w	r1, [r4, #1152]	; 0x480
    m_cpu_tlm_functions[12] = &Svc::SystemResources::tlmWrite_CPU_12;
    eb3a:	f8c4 2488 	str.w	r2, [r4, #1160]	; 0x488
    m_cpu_tlm_functions[13] = &Svc::SystemResources::tlmWrite_CPU_13;
    eb3e:	4824      	ldr	r0, [pc, #144]	; (ebd0 <Svc::SystemResources::SystemResources(char const*)+0x138>)
    m_cpu_tlm_functions[14] = &Svc::SystemResources::tlmWrite_CPU_14;
    eb40:	4924      	ldr	r1, [pc, #144]	; (ebd4 <Svc::SystemResources::SystemResources(char const*)+0x13c>)
    m_cpu_tlm_functions[15] = &Svc::SystemResources::tlmWrite_CPU_15;
    eb42:	4a25      	ldr	r2, [pc, #148]	; (ebd8 <Svc::SystemResources::SystemResources(char const*)+0x140>)
    m_cpu_tlm_functions[13] = &Svc::SystemResources::tlmWrite_CPU_13;
    eb44:	f8c4 0490 	str.w	r0, [r4, #1168]	; 0x490
}
    eb48:	4620      	mov	r0, r4
    m_cpu_tlm_functions[0] = &Svc::SystemResources::tlmWrite_CPU_00;
    eb4a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    m_cpu_tlm_functions[1] = &Svc::SystemResources::tlmWrite_CPU_01;
    eb4e:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    m_cpu_tlm_functions[2] = &Svc::SystemResources::tlmWrite_CPU_02;
    eb52:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    m_cpu_tlm_functions[3] = &Svc::SystemResources::tlmWrite_CPU_03;
    eb56:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
    m_cpu_tlm_functions[4] = &Svc::SystemResources::tlmWrite_CPU_04;
    eb5a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    m_cpu_tlm_functions[5] = &Svc::SystemResources::tlmWrite_CPU_05;
    eb5e:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
    m_cpu_tlm_functions[6] = &Svc::SystemResources::tlmWrite_CPU_06;
    eb62:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    m_cpu_tlm_functions[7] = &Svc::SystemResources::tlmWrite_CPU_07;
    eb66:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
    m_cpu_tlm_functions[8] = &Svc::SystemResources::tlmWrite_CPU_08;
    eb6a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
    m_cpu_tlm_functions[9] = &Svc::SystemResources::tlmWrite_CPU_09;
    eb6e:	f8c4 3474 	str.w	r3, [r4, #1140]	; 0x474
    m_cpu_tlm_functions[10] = &Svc::SystemResources::tlmWrite_CPU_10;
    eb72:	f8c4 347c 	str.w	r3, [r4, #1148]	; 0x47c
    m_cpu_tlm_functions[11] = &Svc::SystemResources::tlmWrite_CPU_11;
    eb76:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
    m_cpu_tlm_functions[12] = &Svc::SystemResources::tlmWrite_CPU_12;
    eb7a:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
    m_cpu_tlm_functions[13] = &Svc::SystemResources::tlmWrite_CPU_13;
    eb7e:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
    m_cpu_tlm_functions[14] = &Svc::SystemResources::tlmWrite_CPU_14;
    eb82:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
    eb86:	f8c4 349c 	str.w	r3, [r4, #1180]	; 0x49c
    m_cpu_tlm_functions[15] = &Svc::SystemResources::tlmWrite_CPU_15;
    eb8a:	f8c4 24a0 	str.w	r2, [r4, #1184]	; 0x4a0
    eb8e:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
}
    eb92:	bd10      	pop	{r4, pc}
    m_cpu_count = (m_cpu_count >= CPU_COUNT) ? CPU_COUNT : m_cpu_count;
    eb94:	2200      	movs	r2, #0
    eb96:	e7a8      	b.n	eaea <Svc::SystemResources::SystemResources(char const*)+0x52>
    eb98:	20003acc 	.word	0x20003acc
    eb9c:	0000f87d 	.word	0x0000f87d
    eba0:	0000f75d 	.word	0x0000f75d
    eba4:	0000f99d 	.word	0x0000f99d
    eba8:	0000fabd 	.word	0x0000fabd
    ebac:	0000f7ed 	.word	0x0000f7ed
    ebb0:	0000f90d 	.word	0x0000f90d
    ebb4:	0000fbdd 	.word	0x0000fbdd
    ebb8:	0000fa2d 	.word	0x0000fa2d
    ebbc:	0000fb4d 	.word	0x0000fb4d
    ebc0:	0000fcfd 	.word	0x0000fcfd
    ebc4:	0000fc6d 	.word	0x0000fc6d
    ebc8:	0000fd8d 	.word	0x0000fd8d
    ebcc:	0000fe1d 	.word	0x0000fe1d
    ebd0:	0000fead 	.word	0x0000fead
    ebd4:	0000ff3d 	.word	0x0000ff3d
    ebd8:	0000ffcd 	.word	0x0000ffcd

0000ebdc <Svc::SystemResources::Cpu()>:

void SystemResources::Cpu() {
    U32 count = 0;
    F32 cpuAvg = 0;

    for (U32 i = 0; i < m_cpu_count && i < CPU_COUNT; i++) {
    ebdc:	f8d0 34a8 	ldr.w	r3, [r0, #1192]	; 0x4a8
void SystemResources::Cpu() {
    ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebe4:	4607      	mov	r7, r0
    ebe6:	ed2d 8b04 	vpush	{d8-d9}
    ebea:	b087      	sub	sp, #28
    for (U32 i = 0; i < m_cpu_count && i < CPU_COUNT; i++) {
    ebec:	2b00      	cmp	r3, #0
    ebee:	f000 8093 	beq.w	ed18 <Svc::SystemResources::Cpu()+0x13c>
    ebf2:	2400      	movs	r4, #0
    ebf4:	4605      	mov	r5, r0
    F32 cpuAvg = 0;
    ebf6:	eddf 8a4b 	vldr	s17, [pc, #300]	; ed24 <Svc::SystemResources::Cpu()+0x148>
    ebfa:	f10d 0808 	add.w	r8, sp, #8
    U32 count = 0;
    ebfe:	46a1      	mov	r9, r4
        util = std::isnan(util) ? 100.0f : util;
    ec00:	ed9f 9a49 	vldr	s18, [pc, #292]	; ed28 <Svc::SystemResources::Cpu()+0x14c>
    ec04:	e03d      	b.n	ec82 <Svc::SystemResources::Cpu()+0xa6>
        util = (static_cast<F32>(current.used - previous.used) / static_cast<F32>(current.total - previous.total)) *
    ec06:	1a12      	subs	r2, r2, r0
    ec08:	1a5b      	subs	r3, r3, r1
    ec0a:	eb07 0bc4 	add.w	fp, r7, r4, lsl #3
    ec0e:	ee07 2a90 	vmov	s15, r2
        if (status == Os::Generic::OP_OK) {
            F32 cpuUtil = compCpuUtil(m_cpu[i], m_cpu_prev[i]);
            cpuAvg += cpuUtil;

            // Send telemetry using telemetry output table
            FW_ASSERT(this->m_cpu_tlm_functions[i]);
    ec12:	f8db a428 	ldr.w	sl, [fp, #1064]	; 0x428
        util = (static_cast<F32>(current.used - previous.used) / static_cast<F32>(current.total - previous.total)) *
    ec16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    ec1a:	ee07 3a90 	vmov	s15, r3
    ec1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ec22:	ee87 8a27 	vdiv.f32	s16, s14, s15
    ec26:	ee28 8a09 	vmul.f32	s16, s16, s18
        util = std::isnan(util) ? 100.0f : util;
    ec2a:	eeb4 8a48 	vcmp.f32	s16, s16
    ec2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ec32:	fe19 8a08 	vselvs.f32	s16, s18, s16
            cpuAvg += cpuUtil;
    ec36:	ee78 8a88 	vadd.f32	s17, s17, s16
            FW_ASSERT(this->m_cpu_tlm_functions[i]);
    ec3a:	f1ba 0f00 	cmp.w	sl, #0
    ec3e:	d03d      	beq.n	ecbc <Svc::SystemResources::Cpu()+0xe0>
            (this->*m_cpu_tlm_functions[i])(cpuUtil, Fw::Time());
    ec40:	f8db 042c 	ldr.w	r0, [fp, #1068]	; 0x42c
    ec44:	07c3      	lsls	r3, r0, #31
    ec46:	d43d      	bmi.n	ecc4 <Svc::SystemResources::Cpu()+0xe8>
    ec48:	eb07 0b60 	add.w	fp, r7, r0, asr #1
    ec4c:	4640      	mov	r0, r8

            // Store cpu used and total
            m_cpu_prev[i] = m_cpu[i];
            count++;
    ec4e:	f109 0901 	add.w	r9, r9, #1
            (this->*m_cpu_tlm_functions[i])(cpuUtil, Fw::Time());
    ec52:	f008 fe2d 	bl	178b0 <Fw::Time::Time()>
    ec56:	4641      	mov	r1, r8
    ec58:	eeb0 0a48 	vmov.f32	s0, s16
    ec5c:	4658      	mov	r0, fp
    ec5e:	47d0      	blx	sl
    ec60:	4640      	mov	r0, r8
    ec62:	f008 fdcd 	bl	17800 <Fw::Time::~Time()>
            m_cpu_prev[i] = m_cpu[i];
    ec66:	f205 5334 	addw	r3, r5, #1332	; 0x534
    ec6a:	e896 0003 	ldmia.w	r6, {r0, r1}
    ec6e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (U32 i = 0; i < m_cpu_count && i < CPU_COUNT; i++) {
    ec72:	3401      	adds	r4, #1
    ec74:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
    ec78:	3508      	adds	r5, #8
    ec7a:	42a3      	cmp	r3, r4
    ec7c:	d929      	bls.n	ecd2 <Svc::SystemResources::Cpu()+0xf6>
    ec7e:	2c10      	cmp	r4, #16
    ec80:	d027      	beq.n	ecd2 <Svc::SystemResources::Cpu()+0xf6>
        Os::Cpu::Status status = Os::Cpu::getTicks(m_cpu[i], i);
    ec82:	f205 46b4 	addw	r6, r5, #1204	; 0x4b4
    ec86:	4621      	mov	r1, r4
    ec88:	4630      	mov	r0, r6
    ec8a:	f004 f8c9 	bl	12e20 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)>
        if (status == Os::Generic::OP_OK) {
    ec8e:	2800      	cmp	r0, #0
    ec90:	d1ef      	bne.n	ec72 <Svc::SystemResources::Cpu()+0x96>
            F32 cpuUtil = compCpuUtil(m_cpu[i], m_cpu_prev[i]);
    ec92:	f8d5 34b8 	ldr.w	r3, [r5, #1208]	; 0x4b8
    ec96:	f8d5 1538 	ldr.w	r1, [r5, #1336]	; 0x538
    ec9a:	f8d5 24b4 	ldr.w	r2, [r5, #1204]	; 0x4b4
    if ((current.total - previous.total) != 0) {
    ec9e:	428b      	cmp	r3, r1
    eca0:	f8d5 0534 	ldr.w	r0, [r5, #1332]	; 0x534
    eca4:	d1af      	bne.n	ec06 <Svc::SystemResources::Cpu()+0x2a>
    eca6:	eb07 0bc4 	add.w	fp, r7, r4, lsl #3
        util = std::isnan(util) ? 100.0f : util;
    ecaa:	eeb0 8a49 	vmov.f32	s16, s18
            FW_ASSERT(this->m_cpu_tlm_functions[i]);
    ecae:	f8db a428 	ldr.w	sl, [fp, #1064]	; 0x428
            cpuAvg += cpuUtil;
    ecb2:	ee78 8a88 	vadd.f32	s17, s17, s16
            FW_ASSERT(this->m_cpu_tlm_functions[i]);
    ecb6:	f1ba 0f00 	cmp.w	sl, #0
    ecba:	d1c1      	bne.n	ec40 <Svc::SystemResources::Cpu()+0x64>
    ecbc:	f8db 042c 	ldr.w	r0, [fp, #1068]	; 0x42c
    ecc0:	07c2      	lsls	r2, r0, #31
    ecc2:	d522      	bpl.n	ed0a <Svc::SystemResources::Cpu()+0x12e>
            (this->*m_cpu_tlm_functions[i])(cpuUtil, Fw::Time());
    ecc4:	1042      	asrs	r2, r0, #1
    ecc6:	eb07 0b60 	add.w	fp, r7, r0, asr #1
    ecca:	58ba      	ldr	r2, [r7, r2]
    eccc:	f852 a00a 	ldr.w	sl, [r2, sl]
    ecd0:	e7bc      	b.n	ec4c <Svc::SystemResources::Cpu()+0x70>
        }
    }

    cpuAvg = (count == 0) ? 0.0f : (cpuAvg / static_cast<F32>(count));
    ecd2:	f1b9 0f00 	cmp.w	r9, #0
    ecd6:	d021      	beq.n	ed1c <Svc::SystemResources::Cpu()+0x140>
    ecd8:	ee07 9a90 	vmov	s15, r9
    ecdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ece0:	ee88 0aa7 	vdiv.f32	s0, s17, s15
    this->tlmWrite_CPU(cpuAvg);
    ece4:	4640      	mov	r0, r8
    ece6:	ed8d 0a01 	vstr	s0, [sp, #4]
    ecea:	f008 fde1 	bl	178b0 <Fw::Time::Time()>
    ecee:	4641      	mov	r1, r8
    ecf0:	ed9d 0a01 	vldr	s0, [sp, #4]
    ecf4:	4638      	mov	r0, r7
    ecf6:	f000 fce9 	bl	f6cc <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const>
    ecfa:	4640      	mov	r0, r8
    ecfc:	f008 fd80 	bl	17800 <Fw::Time::~Time()>
}
    ed00:	b007      	add	sp, #28
    ed02:	ecbd 8b04 	vpop	{d8-d9}
    ed06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            FW_ASSERT(this->m_cpu_tlm_functions[i]);
    ed0a:	216d      	movs	r1, #109	; 0x6d
    ed0c:	4807      	ldr	r0, [pc, #28]	; (ed2c <Svc::SystemResources::Cpu()+0x150>)
    ed0e:	f7f2 fc7d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
            (this->*m_cpu_tlm_functions[i])(cpuUtil, Fw::Time());
    ed12:	f8db a428 	ldr.w	sl, [fp, #1064]	; 0x428
    ed16:	e793      	b.n	ec40 <Svc::SystemResources::Cpu()+0x64>
    ed18:	f10d 0808 	add.w	r8, sp, #8
    cpuAvg = (count == 0) ? 0.0f : (cpuAvg / static_cast<F32>(count));
    ed1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; ed24 <Svc::SystemResources::Cpu()+0x148>
    ed20:	e7e0      	b.n	ece4 <Svc::SystemResources::Cpu()+0x108>
    ed22:	bf00      	nop
    ed24:	00000000 	.word	0x00000000
    ed28:	42c80000 	.word	0x42c80000
    ed2c:	200011c0 	.word	0x200011c0

0000ed30 <Svc::SystemResources::Mem()>:

void SystemResources::Mem() {
    ed30:	b530      	push	{r4, r5, lr}
    ed32:	4604      	mov	r4, r0
    ed34:	b089      	sub	sp, #36	; 0x24
    if (Os::Memory::getUsage(m_mem) == Os::Generic::OP_OK) {
    ed36:	f200 40ac 	addw	r0, r0, #1196	; 0x4ac
    ed3a:	f004 fa6b 	bl	13214 <Os::Memory::getUsage(Os::Generic::UsedTotal&)>
    ed3e:	b108      	cbz	r0, ed44 <Svc::SystemResources::Mem()+0x14>
        this->tlmWrite_MEMORY_TOTAL(m_mem.total / 1024);
        this->tlmWrite_MEMORY_USED(m_mem.used / 1024);
    }
}
    ed40:	b009      	add	sp, #36	; 0x24
    ed42:	bd30      	pop	{r4, r5, pc}
        this->tlmWrite_MEMORY_TOTAL(m_mem.total / 1024);
    ed44:	f8d4 24b0 	ldr.w	r2, [r4, #1200]	; 0x4b0
    ed48:	4605      	mov	r5, r0
    ed4a:	a804      	add	r0, sp, #16
    ed4c:	0a92      	lsrs	r2, r2, #10
    ed4e:	9203      	str	r2, [sp, #12]
    ed50:	f008 fdae 	bl	178b0 <Fw::Time::Time()>
    ed54:	a904      	add	r1, sp, #16
    ed56:	462b      	mov	r3, r5
    ed58:	9a03      	ldr	r2, [sp, #12]
    ed5a:	4620      	mov	r0, r4
    ed5c:	9100      	str	r1, [sp, #0]
    ed5e:	f000 fba5 	bl	f4ac <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const>
    ed62:	a804      	add	r0, sp, #16
    ed64:	f008 fd4c 	bl	17800 <Fw::Time::~Time()>
        this->tlmWrite_MEMORY_USED(m_mem.used / 1024);
    ed68:	f8d4 24ac 	ldr.w	r2, [r4, #1196]	; 0x4ac
    ed6c:	a804      	add	r0, sp, #16
    ed6e:	0a92      	lsrs	r2, r2, #10
    ed70:	9203      	str	r2, [sp, #12]
    ed72:	f008 fd9d 	bl	178b0 <Fw::Time::Time()>
    ed76:	a904      	add	r1, sp, #16
    ed78:	462b      	mov	r3, r5
    ed7a:	4620      	mov	r0, r4
    ed7c:	9a03      	ldr	r2, [sp, #12]
    ed7e:	9100      	str	r1, [sp, #0]
    ed80:	f000 fbd8 	bl	f534 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const>
    ed84:	a804      	add	r0, sp, #16
    ed86:	f008 fd3b 	bl	17800 <Fw::Time::~Time()>
}
    ed8a:	b009      	add	sp, #36	; 0x24
    ed8c:	bd30      	pop	{r4, r5, pc}
    ed8e:	bf00      	nop

0000ed90 <Svc::SystemResources::PhysMem()>:

void SystemResources::PhysMem() {
    ed90:	b530      	push	{r4, r5, lr}
    ed92:	b08b      	sub	sp, #44	; 0x2c
    FwSizeType total = 0;
    ed94:	2400      	movs	r4, #0
void SystemResources::PhysMem() {
    ed96:	4605      	mov	r5, r0
    FwSizeType free = 0;

    if (Os::FileSystem::getFreeSpace("/", total, free) == Os::FileSystem::OP_OK) {
    ed98:	4816      	ldr	r0, [pc, #88]	; (edf4 <Svc::SystemResources::PhysMem()+0x64>)
    ed9a:	aa05      	add	r2, sp, #20
    ed9c:	a904      	add	r1, sp, #16
    FwSizeType free = 0;
    ed9e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    if (Os::FileSystem::getFreeSpace("/", total, free) == Os::FileSystem::OP_OK) {
    eda2:	f003 fb2f 	bl	12404 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)>
    eda6:	b108      	cbz	r0, edac <Svc::SystemResources::PhysMem()+0x1c>
        this->tlmWrite_NON_VOLATILE_FREE(free / 1024);
        this->tlmWrite_NON_VOLATILE_TOTAL(total / 1024);
    }
}
    eda8:	b00b      	add	sp, #44	; 0x2c
    edaa:	bd30      	pop	{r4, r5, pc}
        this->tlmWrite_NON_VOLATILE_FREE(free / 1024);
    edac:	9a05      	ldr	r2, [sp, #20]
    edae:	4604      	mov	r4, r0
    edb0:	a806      	add	r0, sp, #24
    edb2:	0a92      	lsrs	r2, r2, #10
    edb4:	9203      	str	r2, [sp, #12]
    edb6:	f008 fd7b 	bl	178b0 <Fw::Time::Time()>
    edba:	a906      	add	r1, sp, #24
    edbc:	4623      	mov	r3, r4
    edbe:	9a03      	ldr	r2, [sp, #12]
    edc0:	4628      	mov	r0, r5
    edc2:	9100      	str	r1, [sp, #0]
    edc4:	f000 fc3e 	bl	f644 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const>
    edc8:	a806      	add	r0, sp, #24
    edca:	f008 fd19 	bl	17800 <Fw::Time::~Time()>
        this->tlmWrite_NON_VOLATILE_TOTAL(total / 1024);
    edce:	9a04      	ldr	r2, [sp, #16]
    edd0:	a806      	add	r0, sp, #24
    edd2:	0a92      	lsrs	r2, r2, #10
    edd4:	9203      	str	r2, [sp, #12]
    edd6:	f008 fd6b 	bl	178b0 <Fw::Time::Time()>
    edda:	a906      	add	r1, sp, #24
    eddc:	4623      	mov	r3, r4
    edde:	4628      	mov	r0, r5
    ede0:	9a03      	ldr	r2, [sp, #12]
    ede2:	9100      	str	r1, [sp, #0]
    ede4:	f000 fbea 	bl	f5bc <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const>
    ede8:	a806      	add	r0, sp, #24
    edea:	f008 fd09 	bl	17800 <Fw::Time::~Time()>
}
    edee:	b00b      	add	sp, #44	; 0x2c
    edf0:	bd30      	pop	{r4, r5, pc}
    edf2:	bf00      	nop
    edf4:	200011e8 	.word	0x200011e8

0000edf8 <Svc::SystemResources::run_handler(long, unsigned long)>:
    if (m_enable) {
    edf8:	f890 35b4 	ldrb.w	r3, [r0, #1460]	; 0x5b4
    edfc:	b903      	cbnz	r3, ee00 <Svc::SystemResources::run_handler(long, unsigned long)+0x8>
    edfe:	4770      	bx	lr
void SystemResources ::run_handler(const NATIVE_INT_TYPE portNum, U32 tick_time_hz) {
    ee00:	b510      	push	{r4, lr}
    ee02:	4604      	mov	r4, r0
        Cpu();
    ee04:	f7ff feea 	bl	ebdc <Svc::SystemResources::Cpu()>
        Mem();
    ee08:	4620      	mov	r0, r4
    ee0a:	f7ff ff91 	bl	ed30 <Svc::SystemResources::Mem()>
        PhysMem();
    ee0e:	4620      	mov	r0, r4
}
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PhysMem();
    ee14:	f7ff bfbc 	b.w	ed90 <Svc::SystemResources::PhysMem()>

0000ee18 <Svc::SystemResourcesComponentBase::lock()>:
  // ----------------------------------------------------------------------

  void SystemResourcesComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
    ee18:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
    ee1c:	f004 bd2c 	b.w	13878 <Os::Mutex::lock()>

0000ee20 <Svc::SystemResourcesComponentBase::unLock()>:
  }

  void SystemResourcesComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
    ee20:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
    ee24:	f004 bd7c 	b.w	13920 <Os::Mutex::unLock()>

0000ee28 <Svc::SystemResourcesComponentBase::init(long)>:
  {
    ee28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee2c:	4605      	mov	r5, r0
    ee2e:	b097      	sub	sp, #92	; 0x5c
    Fw::PassiveComponentBase::init(instance);
    ee30:	f003 f856 	bl	11ee0 <Fw::PassiveComponentBase::init(long)>
        (void)StringBase::operator=(src);
    ee34:	4f78      	ldr	r7, [pc, #480]	; (f018 <Svc::SystemResourcesComponentBase::init(long)+0x1f0>)
      this->m_CmdDisp_InputPort[port].init();
    ee36:	f105 0864 	add.w	r8, r5, #100	; 0x64
    ObjectName() : StringBase() { *this = ""; }
    ee3a:	4c78      	ldr	r4, [pc, #480]	; (f01c <Svc::SystemResourcesComponentBase::init(long)+0x1f4>)
    const char* toChar() const { return this->m_buf; }
    ee3c:	f105 0608 	add.w	r6, r5, #8
      this->m_CmdReg_OutputPort[port].init();
    ee40:	f505 79a2 	add.w	r9, r5, #324	; 0x144
      this->m_CmdDisp_InputPort[port].init();
    ee44:	4640      	mov	r0, r8
    ee46:	f007 f861 	bl	15f0c <Fw::InputCmdPort::init()>
      this->m_CmdDisp_InputPort[port].addCallComp(
    ee4a:	4a75      	ldr	r2, [pc, #468]	; (f020 <Svc::SystemResourcesComponentBase::init(long)+0x1f8>)
    ee4c:	4629      	mov	r1, r5
    ee4e:	4640      	mov	r0, r8
    ee50:	f006 ffa2 	bl	15d98 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))>
      this->m_CmdDisp_InputPort[port].setPortNum(port);
    ee54:	2100      	movs	r1, #0
    ee56:	4640      	mov	r0, r8
    ee58:	f008 ff3c 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    ee5c:	4668      	mov	r0, sp
    ee5e:	f7f2 f9df 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    ee62:	4639      	mov	r1, r7
    ee64:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    ee66:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    ee68:	f7f2 fa42 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    ee6c:	2300      	movs	r3, #0
    ee6e:	4632      	mov	r2, r6
    ee70:	496c      	ldr	r1, [pc, #432]	; (f024 <Svc::SystemResourcesComponentBase::init(long)+0x1fc>)
    ee72:	4668      	mov	r0, sp
    ee74:	f7f2 fa0a 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
    ee78:	a901      	add	r1, sp, #4
    ee7a:	4640      	mov	r0, r8
      this->m_run_InputPort[port].init();
    ee7c:	f105 08d4 	add.w	r8, r5, #212	; 0xd4
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
    ee80:	f009 f88e 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    ee84:	4668      	mov	r0, sp
    ee86:	9400      	str	r4, [sp, #0]
    ee88:	f7f2 f9d4 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_run_InputPort[port].init();
    ee8c:	4640      	mov	r0, r8
    ee8e:	f002 f915 	bl	110bc <Svc::InputSchedPort::init()>
      this->m_run_InputPort[port].addCallComp(
    ee92:	4a65      	ldr	r2, [pc, #404]	; (f028 <Svc::SystemResourcesComponentBase::init(long)+0x200>)
    ee94:	4629      	mov	r1, r5
    ee96:	4640      	mov	r0, r8
    ee98:	f002 f874 	bl	10f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_run_InputPort[port].setPortNum(port);
    ee9c:	2100      	movs	r1, #0
    ee9e:	4640      	mov	r0, r8
    eea0:	f008 ff18 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
    eea4:	4668      	mov	r0, sp
    eea6:	f7f2 f9bb 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    eeaa:	4639      	mov	r1, r7
    eeac:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    eeae:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    eeb0:	f7f2 fa1e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    eeb4:	4632      	mov	r2, r6
    eeb6:	2300      	movs	r3, #0
    eeb8:	495c      	ldr	r1, [pc, #368]	; (f02c <Svc::SystemResourcesComponentBase::init(long)+0x204>)
    eeba:	4668      	mov	r0, sp
    eebc:	f7f2 f9e6 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_run_InputPort[port].setObjName(portName.toChar());
    eec0:	a901      	add	r1, sp, #4
    eec2:	4640      	mov	r0, r8
      this->m_Log_OutputPort[port].init();
    eec4:	f505 7807 	add.w	r8, r5, #540	; 0x21c
      this->m_run_InputPort[port].setObjName(portName.toChar());
    eec8:	f009 f86a 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    eecc:	4668      	mov	r0, sp
    eece:	9400      	str	r4, [sp, #0]
    eed0:	f7f2 f9b0 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CmdReg_OutputPort[port].init();
    eed4:	4648      	mov	r0, r9
    eed6:	f007 f979 	bl	161cc <Fw::OutputCmdRegPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    eeda:	4668      	mov	r0, sp
    eedc:	f7f2 f9a0 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    eee0:	4639      	mov	r1, r7
    eee2:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    eee4:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    eee6:	f7f2 fa03 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    eeea:	4632      	mov	r2, r6
    eeec:	2300      	movs	r3, #0
    eeee:	4950      	ldr	r1, [pc, #320]	; (f030 <Svc::SystemResourcesComponentBase::init(long)+0x208>)
    eef0:	4668      	mov	r0, sp
    eef2:	f7f2 f9cb 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
    eef6:	a901      	add	r1, sp, #4
    eef8:	4648      	mov	r0, r9
      this->m_CmdStatus_OutputPort[port].init();
    eefa:	f505 79d8 	add.w	r9, r5, #432	; 0x1b0
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
    eefe:	f009 f84f 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    ef02:	4668      	mov	r0, sp
    ef04:	9400      	str	r4, [sp, #0]
    ef06:	f7f2 f995 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_CmdStatus_OutputPort[port].init();
    ef0a:	4648      	mov	r0, r9
    ef0c:	f007 fb46 	bl	1659c <Fw::OutputCmdResponsePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    ef10:	4668      	mov	r0, sp
    ef12:	f7f2 f985 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    ef16:	4639      	mov	r1, r7
    ef18:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    ef1a:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    ef1c:	f7f2 f9e8 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    ef20:	4632      	mov	r2, r6
    ef22:	2300      	movs	r3, #0
    ef24:	4943      	ldr	r1, [pc, #268]	; (f034 <Svc::SystemResourcesComponentBase::init(long)+0x20c>)
    ef26:	4668      	mov	r0, sp
    ef28:	f7f2 f9b0 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
    ef2c:	a901      	add	r1, sp, #4
    ef2e:	4648      	mov	r0, r9
      this->m_LogText_OutputPort[port].init();
    ef30:	f505 7922 	add.w	r9, r5, #648	; 0x288
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
    ef34:	f009 f834 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    ef38:	4668      	mov	r0, sp
    ef3a:	9400      	str	r4, [sp, #0]
    ef3c:	f7f2 f97a 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Log_OutputPort[port].init();
    ef40:	4640      	mov	r0, r8
    ef42:	f007 fd9d 	bl	16a80 <Fw::OutputLogPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    ef46:	4668      	mov	r0, sp
    ef48:	f7f2 f96a 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    ef4c:	4639      	mov	r1, r7
    ef4e:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    ef50:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    ef52:	f7f2 f9cd 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    ef56:	4632      	mov	r2, r6
    ef58:	2300      	movs	r3, #0
    ef5a:	4937      	ldr	r1, [pc, #220]	; (f038 <Svc::SystemResourcesComponentBase::init(long)+0x210>)
    ef5c:	4668      	mov	r0, sp
    ef5e:	f7f2 f995 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
    ef62:	a901      	add	r1, sp, #4
    ef64:	4640      	mov	r0, r8
      this->m_Time_OutputPort[port].init();
    ef66:	f505 783d 	add.w	r8, r5, #756	; 0x2f4
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
    ef6a:	f009 f819 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    ef6e:	4668      	mov	r0, sp
    ef70:	9400      	str	r4, [sp, #0]
    ef72:	f7f2 f95f 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_LogText_OutputPort[port].init();
    ef76:	4648      	mov	r0, r9
      this->m_Tlm_OutputPort[port].init();
    ef78:	f505 7558 	add.w	r5, r5, #864	; 0x360
      this->m_LogText_OutputPort[port].init();
    ef7c:	f007 ffa8 	bl	16ed0 <Fw::OutputLogTextPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    ef80:	4668      	mov	r0, sp
    ef82:	f7f2 f94d 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    ef86:	4639      	mov	r1, r7
    ef88:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    ef8a:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    ef8c:	f7f2 f9b0 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    ef90:	4632      	mov	r2, r6
    ef92:	2300      	movs	r3, #0
    ef94:	4929      	ldr	r1, [pc, #164]	; (f03c <Svc::SystemResourcesComponentBase::init(long)+0x214>)
    ef96:	4668      	mov	r0, sp
    ef98:	f7f2 f978 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
    ef9c:	a901      	add	r1, sp, #4
    ef9e:	4648      	mov	r0, r9
    efa0:	f008 fffe 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    efa4:	4668      	mov	r0, sp
    efa6:	9400      	str	r4, [sp, #0]
    efa8:	f7f2 f944 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Time_OutputPort[port].init();
    efac:	4640      	mov	r0, r8
    efae:	f008 fe71 	bl	17c94 <Fw::OutputTimePort::init()>
    ObjectName() : StringBase() { *this = ""; }
    efb2:	4668      	mov	r0, sp
    efb4:	f7f2 f934 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    efb8:	4639      	mov	r1, r7
    efba:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    efbc:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    efbe:	f7f2 f997 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    efc2:	4632      	mov	r2, r6
    efc4:	2300      	movs	r3, #0
    efc6:	491e      	ldr	r1, [pc, #120]	; (f040 <Svc::SystemResourcesComponentBase::init(long)+0x218>)
    efc8:	4668      	mov	r0, sp
    efca:	f7f2 f95f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
    efce:	a901      	add	r1, sp, #4
    efd0:	4640      	mov	r0, r8
    efd2:	f008 ffe5 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    efd6:	4668      	mov	r0, sp
    efd8:	9400      	str	r4, [sp, #0]
    efda:	f7f2 f92b 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_Tlm_OutputPort[port].init();
    efde:	4628      	mov	r0, r5
    efe0:	f008 fa80 	bl	174e4 <Fw::OutputTlmPort::init()>
    ObjectName() : StringBase() { *this = ""; }
    efe4:	4668      	mov	r0, sp
    efe6:	f7f2 f91b 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
    efea:	4639      	mov	r1, r7
    efec:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
    efee:	9400      	str	r4, [sp, #0]
        (void)StringBase::operator=(src);
    eff0:	f7f2 f97e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
    eff4:	4632      	mov	r2, r6
    eff6:	2300      	movs	r3, #0
    eff8:	4912      	ldr	r1, [pc, #72]	; (f044 <Svc::SystemResourcesComponentBase::init(long)+0x21c>)
    effa:	4668      	mov	r0, sp
    effc:	f7f2 f946 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
    f000:	a901      	add	r1, sp, #4
    f002:	4628      	mov	r0, r5
    f004:	f008 ffcc 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
    f008:	4668      	mov	r0, sp
    f00a:	9400      	str	r4, [sp, #0]
    f00c:	f7f2 f912 	bl	1234 <Fw::StringBase::~StringBase()>
  }
    f010:	b017      	add	sp, #92	; 0x5c
    f012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f016:	bf00      	nop
    f018:	20001d2c 	.word	0x20001d2c
    f01c:	20002b80 	.word	0x20002b80
    f020:	0000f3e1 	.word	0x0000f3e1
    f024:	20001670 	.word	0x20001670
    f028:	0000f285 	.word	0x0000f285
    f02c:	200004f0 	.word	0x200004f0
    f030:	200016c4 	.word	0x200016c4
    f034:	200016e0 	.word	0x200016e0
    f038:	20001700 	.word	0x20001700
    f03c:	20001718 	.word	0x20001718
    f040:	20001734 	.word	0x20001734
    f044:	20001af8 	.word	0x20001af8

0000f048 <Svc::SystemResourcesComponentBase::get_CmdDisp_InputPort(long)>:
  {
    f048:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    f04a:	1e0c      	subs	r4, r1, #0
  {
    f04c:	4605      	mov	r5, r0
    FW_ASSERT(
    f04e:	dd03      	ble.n	f058 <Svc::SystemResourcesComponentBase::get_CmdDisp_InputPort(long)+0x10>
    f050:	22c6      	movs	r2, #198	; 0xc6
    f052:	4804      	ldr	r0, [pc, #16]	; (f064 <Svc::SystemResourcesComponentBase::get_CmdDisp_InputPort(long)+0x1c>)
    f054:	f7f2 fae8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_CmdDisp_InputPort[portNum];
    f058:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f05c:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    f060:	3064      	adds	r0, #100	; 0x64
    f062:	bd38      	pop	{r3, r4, r5, pc}
    f064:	20001998 	.word	0x20001998

0000f068 <Svc::SystemResourcesComponentBase::get_run_InputPort(long)>:
  {
    f068:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
    f06a:	1e0c      	subs	r4, r1, #0
  {
    f06c:	4605      	mov	r5, r0
    FW_ASSERT(
    f06e:	dd03      	ble.n	f078 <Svc::SystemResourcesComponentBase::get_run_InputPort(long)+0x10>
    f070:	22d5      	movs	r2, #213	; 0xd5
    f072:	4804      	ldr	r0, [pc, #16]	; (f084 <Svc::SystemResourcesComponentBase::get_run_InputPort(long)+0x1c>)
    f074:	f7f2 fad8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_run_InputPort[portNum];
    f078:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    f07c:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
    f080:	30d4      	adds	r0, #212	; 0xd4
    f082:	bd38      	pop	{r3, r4, r5, pc}
    f084:	20001998 	.word	0x20001998

0000f088 <Svc::SystemResourcesComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)>:
  {
    f088:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f08a:	1e0d      	subs	r5, r1, #0
  {
    f08c:	4604      	mov	r4, r0
    f08e:	4616      	mov	r6, r2
    FW_ASSERT(
    f090:	dd03      	ble.n	f09a <Svc::SystemResourcesComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)+0x12>
    f092:	22e7      	movs	r2, #231	; 0xe7
    f094:	4806      	ldr	r0, [pc, #24]	; (f0b0 <Svc::SystemResourcesComponentBase::set_CmdReg_OutputPort(long, Fw::InputCmdRegPort*)+0x28>)
    f096:	f7f2 fac7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    f09a:	236c      	movs	r3, #108	; 0x6c
    f09c:	4631      	mov	r1, r6
    f09e:	fb03 4005 	mla	r0, r3, r5, r4
  }
    f0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    f0a6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    f0aa:	f007 b83f 	b.w	1612c <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)>
    f0ae:	bf00      	nop
    f0b0:	20001998 	.word	0x20001998

0000f0b4 <Svc::SystemResourcesComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)>:
  {
    f0b4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f0b6:	1e0d      	subs	r5, r1, #0
  {
    f0b8:	4604      	mov	r4, r0
    f0ba:	4616      	mov	r6, r2
    FW_ASSERT(
    f0bc:	dd03      	ble.n	f0c6 <Svc::SystemResourcesComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x12>
    f0be:	22f5      	movs	r2, #245	; 0xf5
    f0c0:	4806      	ldr	r0, [pc, #24]	; (f0dc <Svc::SystemResourcesComponentBase::set_CmdStatus_OutputPort(long, Fw::InputCmdResponsePort*)+0x28>)
    f0c2:	f7f2 fab1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
    f0c6:	236c      	movs	r3, #108	; 0x6c
    f0c8:	4631      	mov	r1, r6
    f0ca:	fb03 4005 	mla	r0, r3, r5, r4
  }
    f0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
    f0d2:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    f0d6:	f007 b9f1 	b.w	164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>
    f0da:	bf00      	nop
    f0dc:	20001998 	.word	0x20001998

0000f0e0 <Svc::SystemResourcesComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)>:
  {
    f0e0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f0e2:	1e0d      	subs	r5, r1, #0
  {
    f0e4:	4604      	mov	r4, r0
    f0e6:	4616      	mov	r6, r2
    FW_ASSERT(
    f0e8:	dd04      	ble.n	f0f4 <Svc::SystemResourcesComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)+0x14>
    f0ea:	f240 1203 	movw	r2, #259	; 0x103
    f0ee:	4806      	ldr	r0, [pc, #24]	; (f108 <Svc::SystemResourcesComponentBase::set_Log_OutputPort(long, Fw::InputLogPort*)+0x28>)
    f0f0:	f7f2 fa9a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Log_OutputPort[portNum].addCallPort(port);
    f0f4:	236c      	movs	r3, #108	; 0x6c
    f0f6:	4631      	mov	r1, r6
    f0f8:	fb03 4005 	mla	r0, r3, r5, r4
  }
    f0fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Log_OutputPort[portNum].addCallPort(port);
    f100:	f500 7007 	add.w	r0, r0, #540	; 0x21c
    f104:	f007 bbde 	b.w	168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>
    f108:	20001998 	.word	0x20001998

0000f10c <Svc::SystemResourcesComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)>:
  {
    f10c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f10e:	1e0d      	subs	r5, r1, #0
  {
    f110:	4604      	mov	r4, r0
    f112:	4616      	mov	r6, r2
    FW_ASSERT(
    f114:	dd04      	ble.n	f120 <Svc::SystemResourcesComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)+0x14>
    f116:	f240 1213 	movw	r2, #275	; 0x113
    f11a:	4806      	ldr	r0, [pc, #24]	; (f134 <Svc::SystemResourcesComponentBase::set_LogText_OutputPort(long, Fw::InputLogTextPort*)+0x28>)
    f11c:	f7f2 fa84 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_LogText_OutputPort[portNum].addCallPort(port);
    f120:	236c      	movs	r3, #108	; 0x6c
    f122:	4631      	mov	r1, r6
    f124:	fb03 4005 	mla	r0, r3, r5, r4
  }
    f128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_LogText_OutputPort[portNum].addCallPort(port);
    f12c:	f500 7022 	add.w	r0, r0, #648	; 0x288
    f130:	f007 bde0 	b.w	16cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>
    f134:	20001998 	.word	0x20001998

0000f138 <Svc::SystemResourcesComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)>:
  {
    f138:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f13a:	1e0d      	subs	r5, r1, #0
  {
    f13c:	4604      	mov	r4, r0
    f13e:	4616      	mov	r6, r2
    FW_ASSERT(
    f140:	dd04      	ble.n	f14c <Svc::SystemResourcesComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x14>
    f142:	f240 1223 	movw	r2, #291	; 0x123
    f146:	4806      	ldr	r0, [pc, #24]	; (f160 <Svc::SystemResourcesComponentBase::set_Time_OutputPort(long, Fw::InputTimePort*)+0x28>)
    f148:	f7f2 fa6e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Time_OutputPort[portNum].addCallPort(port);
    f14c:	236c      	movs	r3, #108	; 0x6c
    f14e:	4631      	mov	r1, r6
    f150:	fb03 4005 	mla	r0, r3, r5, r4
  }
    f154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Time_OutputPort[portNum].addCallPort(port);
    f158:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
    f15c:	f008 bd1e 	b.w	17b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>
    f160:	20001998 	.word	0x20001998

0000f164 <Svc::SystemResourcesComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)>:
  {
    f164:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f166:	1e0d      	subs	r5, r1, #0
  {
    f168:	4604      	mov	r4, r0
    f16a:	4616      	mov	r6, r2
    FW_ASSERT(
    f16c:	dd04      	ble.n	f178 <Svc::SystemResourcesComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)+0x14>
    f16e:	f240 1231 	movw	r2, #305	; 0x131
    f172:	4806      	ldr	r0, [pc, #24]	; (f18c <Svc::SystemResourcesComponentBase::set_Tlm_OutputPort(long, Fw::InputTlmPort*)+0x28>)
    f174:	f7f2 fa58 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_Tlm_OutputPort[portNum].addCallPort(port);
    f178:	236c      	movs	r3, #108	; 0x6c
    f17a:	4631      	mov	r1, r6
    f17c:	fb03 4005 	mla	r0, r3, r5, r4
  }
    f180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_Tlm_OutputPort[portNum].addCallPort(port);
    f184:	f500 7058 	add.w	r0, r0, #864	; 0x360
    f188:	f008 b8f6 	b.w	17378 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)>
    f18c:	20001998 	.word	0x20001998

0000f190 <Svc::SystemResourcesComponentBase::regCommands()>:
  {
    f190:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    f192:	f500 75a2 	add.w	r5, r0, #324	; 0x144
  {
    f196:	4604      	mov	r4, r0
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    f198:	4628      	mov	r0, r5
    f19a:	f008 fe57 	bl	17e4c <Fw::PortBase::isConnected() const>
    f19e:	b140      	cbz	r0, f1b2 <Svc::SystemResourcesComponentBase::regCommands()+0x22>
    this->m_CmdReg_OutputPort[0].invoke(
    f1a0:	4620      	mov	r0, r4
    f1a2:	f002 fea7 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    f1a6:	4601      	mov	r1, r0
    f1a8:	4628      	mov	r0, r5
  }
    f1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    this->m_CmdReg_OutputPort[0].invoke(
    f1ae:	f006 bfcd 	b.w	1614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    f1b2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    f1b6:	4802      	ldr	r0, [pc, #8]	; (f1c0 <Svc::SystemResourcesComponentBase::regCommands()+0x30>)
    f1b8:	f7f2 fa28 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    f1bc:	e7f0      	b.n	f1a0 <Svc::SystemResourcesComponentBase::regCommands()+0x10>
    f1be:	bf00      	nop
    f1c0:	20001998 	.word	0x20001998

0000f1c4 <Svc::SystemResourcesComponentBase::SystemResourcesComponentBase(char const*)>:
  SystemResourcesComponentBase ::
    f1c4:	b510      	push	{r4, lr}
    f1c6:	4604      	mov	r4, r0
      Fw::PassiveComponentBase(compName)
    f1c8:	f002 fe7c 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
    f1cc:	4b13      	ldr	r3, [pc, #76]	; (f21c <Svc::SystemResourcesComponentBase::SystemResourcesComponentBase(char const*)+0x58>)
    f1ce:	4620      	mov	r0, r4
    f1d0:	f840 3b64 	str.w	r3, [r0], #100
    f1d4:	f006 fdd4 	bl	15d80 <Fw::InputCmdPort::InputCmdPort()>
    f1d8:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    f1dc:	f001 fec6 	bl	10f6c <Svc::InputSchedPort::InputSchedPort()>
    f1e0:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    f1e4:	f006 ff96 	bl	16114 <Fw::OutputCmdRegPort::OutputCmdRegPort()>
    f1e8:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    f1ec:	f007 f95a 	bl	164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>
    f1f0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    f1f4:	f007 fb5a 	bl	168ac <Fw::OutputLogPort::OutputLogPort()>
    f1f8:	f504 7022 	add.w	r0, r4, #648	; 0x288
    f1fc:	f007 fd6e 	bl	16cdc <Fw::OutputLogTextPort::OutputLogTextPort()>
    f200:	f504 703d 	add.w	r0, r4, #756	; 0x2f4
    f204:	f008 fcbe 	bl	17b84 <Fw::OutputTimePort::OutputTimePort()>
    f208:	f504 7058 	add.w	r0, r4, #864	; 0x360
    f20c:	f008 f8a8 	bl	17360 <Fw::OutputTlmPort::OutputTlmPort()>
    f210:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
    f214:	f004 fb14 	bl	13840 <Os::Mutex::Mutex()>
  }
    f218:	4620      	mov	r0, r4
    f21a:	bd10      	pop	{r4, pc}
    f21c:	20003dd8 	.word	0x20003dd8

0000f220 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)>:
  {
    f220:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
    f222:	1e0d      	subs	r5, r1, #0
  {
    f224:	4604      	mov	r4, r0
    f226:	4616      	mov	r6, r2
    FW_ASSERT(
    f228:	dd04      	ble.n	f234 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x14>
    f22a:	f240 224f 	movw	r2, #591	; 0x24f
    f22e:	4812      	ldr	r0, [pc, #72]	; (f278 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x58>)
    f230:	f7f2 f9fa 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->lock();
    f234:	6823      	ldr	r3, [r4, #0]
    f236:	4a11      	ldr	r2, [pc, #68]	; (f27c <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x5c>)
    f238:	699b      	ldr	r3, [r3, #24]
    f23a:	4293      	cmp	r3, r2
    f23c:	d114      	bne.n	f268 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x48>
    this->m_guardedPortMutex.lock();
    f23e:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
    f242:	f004 fb19 	bl	13878 <Os::Mutex::lock()>
    this->run_handler(
    f246:	6823      	ldr	r3, [r4, #0]
    f248:	4632      	mov	r2, r6
    f24a:	4629      	mov	r1, r5
    f24c:	4620      	mov	r0, r4
    f24e:	691b      	ldr	r3, [r3, #16]
    f250:	4798      	blx	r3
    this->unLock();
    f252:	6823      	ldr	r3, [r4, #0]
    f254:	4a0a      	ldr	r2, [pc, #40]	; (f280 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x60>)
    f256:	69db      	ldr	r3, [r3, #28]
    f258:	4293      	cmp	r3, r2
    f25a:	d108      	bne.n	f26e <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x4e>
    this->m_guardedPortMutex.unLock();
    f25c:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
  }
    f260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_guardedPortMutex.unLock();
    f264:	f004 bb5c 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
    f268:	4620      	mov	r0, r4
    f26a:	4798      	blx	r3
    f26c:	e7eb      	b.n	f246 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)+0x26>
    this->unLock();
    f26e:	4620      	mov	r0, r4
  }
    f270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->unLock();
    f274:	4718      	bx	r3
    f276:	bf00      	nop
    f278:	20001998 	.word	0x20001998
    f27c:	0000ee19 	.word	0x0000ee19
    f280:	0000ee21 	.word	0x0000ee21

0000f284 <Svc::SystemResourcesComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    f284:	b530      	push	{r4, r5, lr}
    f286:	460d      	mov	r5, r1
    f288:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
    f28a:	4604      	mov	r4, r0
    f28c:	b130      	cbz	r0, f29c <Svc::SystemResourcesComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    SystemResourcesComponentBase* compPtr = static_cast<SystemResourcesComponentBase*>(callComp);
    compPtr->run_handlerBase(
    f28e:	4629      	mov	r1, r5
    f290:	4620      	mov	r0, r4
      portNum,
      context
    );
  }
    f292:	b003      	add	sp, #12
    f294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->run_handlerBase(
    f298:	f7ff bfc2 	b.w	f220 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
    f29c:	f240 51b1 	movw	r1, #1457	; 0x5b1
    f2a0:	4805      	ldr	r0, [pc, #20]	; (f2b8 <Svc::SystemResourcesComponentBase::m_p_run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
    f2a2:	9201      	str	r2, [sp, #4]
    f2a4:	f7f2 f9b2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    f2a8:	9a01      	ldr	r2, [sp, #4]
    compPtr->run_handlerBase(
    f2aa:	4629      	mov	r1, r5
    f2ac:	4620      	mov	r0, r4
  }
    f2ae:	b003      	add	sp, #12
    f2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->run_handlerBase(
    f2b4:	f7ff bfb4 	b.w	f220 <Svc::SystemResourcesComponentBase::run_handlerBase(long, unsigned long)>
    f2b8:	20001998 	.word	0x20001998

0000f2bc <Svc::SystemResourcesComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)>:
  {
    f2bc:	b530      	push	{r4, r5, lr}
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    f2be:	f500 74d8 	add.w	r4, r0, #432	; 0x1b0
  {
    f2c2:	b083      	sub	sp, #12
    f2c4:	460d      	mov	r5, r1
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    f2c6:	4620      	mov	r0, r4
  {
    f2c8:	e9cd 3200 	strd	r3, r2, [sp]
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    f2cc:	f008 fdbe 	bl	17e4c <Fw::PortBase::isConnected() const>
    f2d0:	e9dd 3200 	ldrd	r3, r2, [sp]
    f2d4:	b130      	cbz	r0, f2e4 <Svc::SystemResourcesComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x28>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    f2d6:	4629      	mov	r1, r5
    f2d8:	4620      	mov	r0, r4
  }
    f2da:	b003      	add	sp, #12
    f2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    f2e0:	f007 b8fc 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    f2e4:	f44f 711b 	mov.w	r1, #620	; 0x26c
    f2e8:	4806      	ldr	r0, [pc, #24]	; (f304 <Svc::SystemResourcesComponentBase::cmdResponse_out(unsigned long, unsigned long, Fw::CmdResponse)+0x48>)
    f2ea:	e9cd 2300 	strd	r2, r3, [sp]
    f2ee:	f7f2 f98d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    f2f2:	4629      	mov	r1, r5
    f2f4:	4620      	mov	r0, r4
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    f2f6:	e9dd 2300 	ldrd	r2, r3, [sp]
  }
    f2fa:	b003      	add	sp, #12
    f2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
    f300:	f007 b8ec 	b.w	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
    f304:	20001998 	.word	0x20001998

0000f308 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    f308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f30c:	b084      	sub	sp, #16
    f30e:	4604      	mov	r4, r0
    args.resetDeser();
    f310:	4618      	mov	r0, r3
  {
    f312:	461d      	mov	r5, r3
    f314:	460f      	mov	r7, r1
    f316:	4690      	mov	r8, r2
    args.resetDeser();
    f318:	f7f1 fe70 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>
      {
    f31c:	4668      	mov	r0, sp
    f31e:	f7f1 f907 	bl	530 <Fw::Serializable::Serializable()>
    f322:	4e2b      	ldr	r6, [pc, #172]	; (f3d0 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc8>)
        this->e = DISABLED;
    f324:	2300      	movs	r3, #0
    _status = args.deserialize(enable);
    f326:	4628      	mov	r0, r5
    f328:	4669      	mov	r1, sp
      {
    f32a:	9600      	str	r6, [sp, #0]
        this->e = DISABLED;
    f32c:	f88d 3004 	strb.w	r3, [sp, #4]
    f330:	f7f1 fdd0 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
    f334:	bb58      	cbnz	r0, f38e <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x86>
    this->lock();
    f336:	6823      	ldr	r3, [r4, #0]
    f338:	4a26      	ldr	r2, [pc, #152]	; (f3d4 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xcc>)
    f33a:	699b      	ldr	r3, [r3, #24]
    f33c:	4293      	cmp	r3, r2
    f33e:	d140      	bne.n	f3c2 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xba>
    this->m_guardedPortMutex.lock();
    f340:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
    f344:	f004 fa98 	bl	13878 <Os::Mutex::lock()>
    this->ENABLE_cmdHandler(
    f348:	6823      	ldr	r3, [r4, #0]
      {
    f34a:	a802      	add	r0, sp, #8
    f34c:	695d      	ldr	r5, [r3, #20]
    f34e:	f7f1 f8ef 	bl	530 <Fw::Serializable::Serializable()>
        this->e = obj.e;
    f352:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f356:	4642      	mov	r2, r8
    f358:	4639      	mov	r1, r7
    f35a:	4620      	mov	r0, r4
    f35c:	f88d 300c 	strb.w	r3, [sp, #12]
    f360:	ab02      	add	r3, sp, #8
      {
    f362:	9602      	str	r6, [sp, #8]
    f364:	47a8      	blx	r5
  class SystemResourceEnabled :
    f366:	a802      	add	r0, sp, #8
    f368:	9602      	str	r6, [sp, #8]
    f36a:	f7f1 f8e7 	bl	53c <Fw::Serializable::~Serializable()>
    this->unLock();
    f36e:	6823      	ldr	r3, [r4, #0]
    f370:	4a19      	ldr	r2, [pc, #100]	; (f3d8 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd0>)
    f372:	69db      	ldr	r3, [r3, #28]
    f374:	4293      	cmp	r3, r2
    f376:	d127      	bne.n	f3c8 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xc0>
    this->m_guardedPortMutex.unLock();
    f378:	f504 7074 	add.w	r0, r4, #976	; 0x3d0
    f37c:	f004 fad0 	bl	13920 <Os::Mutex::unLock()>
    f380:	4668      	mov	r0, sp
    f382:	9600      	str	r6, [sp, #0]
    f384:	f7f1 f8da 	bl	53c <Fw::Serializable::~Serializable()>
  }
    f388:	b004      	add	sp, #16
    f38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    f38e:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
    f392:	4620      	mov	r0, r4
    f394:	f008 fd5a 	bl	17e4c <Fw::PortBase::isConnected() const>
    f398:	2800      	cmp	r0, #0
    f39a:	d0f1      	beq.n	f380 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x78>
      {
    f39c:	a802      	add	r0, sp, #8
    f39e:	4d0f      	ldr	r5, [pc, #60]	; (f3dc <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xd4>)
    f3a0:	f7f1 f8c6 	bl	530 <Fw::Serializable::Serializable()>
        this->e = e1;
    f3a4:	2303      	movs	r3, #3
        this->m_CmdStatus_OutputPort[0].invoke(
    f3a6:	4620      	mov	r0, r4
    f3a8:	4642      	mov	r2, r8
    f3aa:	f88d 300c 	strb.w	r3, [sp, #12]
    f3ae:	4639      	mov	r1, r7
    f3b0:	ab02      	add	r3, sp, #8
      {
    f3b2:	9502      	str	r5, [sp, #8]
    f3b4:	f007 f892 	bl	164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>
  class CmdResponse :
    f3b8:	a802      	add	r0, sp, #8
    f3ba:	9502      	str	r5, [sp, #8]
    f3bc:	f7f1 f8be 	bl	53c <Fw::Serializable::~Serializable()>
    f3c0:	e7de      	b.n	f380 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x78>
    this->lock();
    f3c2:	4620      	mov	r0, r4
    f3c4:	4798      	blx	r3
    f3c6:	e7bf      	b.n	f348 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x40>
    this->unLock();
    f3c8:	4620      	mov	r0, r4
    f3ca:	4798      	blx	r3
    f3cc:	e7d8      	b.n	f380 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x78>
    f3ce:	bf00      	nop
    f3d0:	20003ce4 	.word	0x20003ce4
    f3d4:	0000ee19 	.word	0x0000ee19
    f3d8:	0000ee21 	.word	0x0000ee21
    f3dc:	20002bec 	.word	0x20002bec

0000f3e0 <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
  {
    f3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3e4:	9e06      	ldr	r6, [sp, #24]
    f3e6:	4615      	mov	r5, r2
    FW_ASSERT(callComp);
    f3e8:	4604      	mov	r4, r0
  {
    f3ea:	461f      	mov	r7, r3
    FW_ASSERT(callComp);
    f3ec:	b1c0      	cbz	r0, f420 <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x40>
    const U32 idBase = callComp->getIdBase();
    f3ee:	4620      	mov	r0, r4
    f3f0:	f002 fd80 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    f3f4:	42a8      	cmp	r0, r5
    f3f6:	d80a      	bhi.n	f40e <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x2e>
    switch (opCode - idBase) {
    f3f8:	d001      	beq.n	f3fe <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x1e>
  }
    f3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        compPtr->ENABLE_cmdHandlerBase(
    f3fe:	4633      	mov	r3, r6
    f400:	463a      	mov	r2, r7
    f402:	4629      	mov	r1, r5
    f404:	4620      	mov	r0, r4
  }
    f406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        compPtr->ENABLE_cmdHandlerBase(
    f40a:	f7ff bf7d 	b.w	f308 <Svc::SystemResourcesComponentBase::ENABLE_cmdHandlerBase(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    f40e:	4602      	mov	r2, r0
    f410:	4629      	mov	r1, r5
    f412:	f240 5397 	movw	r3, #1431	; 0x597
    f416:	4805      	ldr	r0, [pc, #20]	; (f42c <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x4c>)
  }
    f418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
    f41c:	f7f2 b914 	b.w	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(callComp);
    f420:	f240 5193 	movw	r1, #1427	; 0x593
    f424:	4801      	ldr	r0, [pc, #4]	; (f42c <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x4c>)
    f426:	f7f2 f8f1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    f42a:	e7e0      	b.n	f3ee <Svc::SystemResourcesComponentBase::m_p_CmdDisp_in(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&)+0xe>
    f42c:	20001998 	.word	0x20001998

0000f430 <Svc::SystemResourcesComponentBase::~SystemResourcesComponentBase()>:
  SystemResourcesComponentBase ::
    f430:	b510      	push	{r4, lr}
    ~SystemResourcesComponentBase()
    f432:	4b1d      	ldr	r3, [pc, #116]	; (f4a8 <Svc::SystemResourcesComponentBase::~SystemResourcesComponentBase()+0x78>)
  SystemResourcesComponentBase ::
    f434:	4604      	mov	r4, r0
    ~SystemResourcesComponentBase()
    f436:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
    f43a:	6023      	str	r3, [r4, #0]
    f43c:	f003 ffb6 	bl	133ac <Os::Mutex::~Mutex()>
    f440:	f8d4 3360 	ldr.w	r3, [r4, #864]	; 0x360
    f444:	f504 7058 	add.w	r0, r4, #864	; 0x360
    f448:	685b      	ldr	r3, [r3, #4]
    f44a:	4798      	blx	r3
    f44c:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    f450:	f504 703d 	add.w	r0, r4, #756	; 0x2f4
    f454:	685b      	ldr	r3, [r3, #4]
    f456:	4798      	blx	r3
    f458:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
    f45c:	f504 7022 	add.w	r0, r4, #648	; 0x288
    f460:	685b      	ldr	r3, [r3, #4]
    f462:	4798      	blx	r3
    f464:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    f468:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    f46c:	685b      	ldr	r3, [r3, #4]
    f46e:	4798      	blx	r3
    f470:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f474:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
    f478:	685b      	ldr	r3, [r3, #4]
    f47a:	4798      	blx	r3
    f47c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    f480:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    f484:	685b      	ldr	r3, [r3, #4]
    f486:	4798      	blx	r3
    f488:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    f48c:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    f490:	685b      	ldr	r3, [r3, #4]
    f492:	4798      	blx	r3
    f494:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f496:	f104 0064 	add.w	r0, r4, #100	; 0x64
    f49a:	685b      	ldr	r3, [r3, #4]
    f49c:	4798      	blx	r3
    f49e:	4620      	mov	r0, r4
    f4a0:	f002 fcb8 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
  }
    f4a4:	4620      	mov	r0, r4
    f4a6:	bd10      	pop	{r4, pc}
    f4a8:	20003dd8 	.word	0x20003dd8

0000f4ac <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const>:
  {
    f4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f4b0:	f500 7758 	add.w	r7, r0, #864	; 0x360
  {
    f4b4:	b088      	sub	sp, #32
    f4b6:	4604      	mov	r4, r0
    f4b8:	4616      	mov	r6, r2
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f4ba:	4638      	mov	r0, r7
  {
    f4bc:	461d      	mov	r5, r3
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f4be:	f008 fcc5 	bl	17e4c <Fw::PortBase::isConnected() const>
    f4c2:	b910      	cbnz	r0, f4ca <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x1e>
  }
    f4c4:	b008      	add	sp, #32
    f4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f4ca:	f504 783d 	add.w	r8, r4, #756	; 0x2f4
    f4ce:	4640      	mov	r0, r8
    f4d0:	f008 fcbc 	bl	17e4c <Fw::PortBase::isConnected() const>
    f4d4:	b9b8      	cbnz	r0, f506 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x5a>
      Fw::TlmBuffer _tlmBuff;
    f4d6:	4668      	mov	r0, sp
    f4d8:	f007 fd18 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f4dc:	4632      	mov	r2, r6
    f4de:	462b      	mov	r3, r5
    f4e0:	4668      	mov	r0, sp
    f4e2:	f7f1 f987 	bl	7f4 <Fw::SerializeBufferBase::serialize(unsigned long long)>
      FW_ASSERT(
    f4e6:	b9c8      	cbnz	r0, f51c <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x70>
      _id = this->getIdBase() + CHANNELID_MEMORY_TOTAL;
    f4e8:	4620      	mov	r0, r4
    f4ea:	f002 fd03 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f4ee:	466b      	mov	r3, sp
      _id = this->getIdBase() + CHANNELID_MEMORY_TOTAL;
    f4f0:	4601      	mov	r1, r0
      this->m_Tlm_OutputPort[0].invoke(
    f4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f4f4:	4638      	mov	r0, r7
    f4f6:	f007 ff4f 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f4fa:	4668      	mov	r0, sp
    f4fc:	f007 fcee 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f500:	b008      	add	sp, #32
    f502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f506:	4909      	ldr	r1, [pc, #36]	; (f52c <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x80>)
    f508:	980e      	ldr	r0, [sp, #56]	; 0x38
    f50a:	f008 fa17 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f50e:	2800      	cmp	r0, #0
    f510:	d0e1      	beq.n	f4d6 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x2a>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f512:	4640      	mov	r0, r8
    f514:	990e      	ldr	r1, [sp, #56]	; 0x38
    f516:	f008 fb51 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f51a:	e7dc      	b.n	f4d6 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x2a>
      FW_ASSERT(
    f51c:	4601      	mov	r1, r0
    f51e:	f240 22bd 	movw	r2, #701	; 0x2bd
    f522:	4803      	ldr	r0, [pc, #12]	; (f530 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x84>)
    f524:	f7f2 f880 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f528:	e7de      	b.n	f4e8 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_TOTAL(unsigned long long, Fw::Time) const+0x3c>
    f52a:	bf00      	nop
    f52c:	2000c9b0 	.word	0x2000c9b0
    f530:	20001998 	.word	0x20001998

0000f534 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const>:
  {
    f534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f538:	f500 7758 	add.w	r7, r0, #864	; 0x360
  {
    f53c:	b088      	sub	sp, #32
    f53e:	4604      	mov	r4, r0
    f540:	4616      	mov	r6, r2
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f542:	4638      	mov	r0, r7
  {
    f544:	461d      	mov	r5, r3
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f546:	f008 fc81 	bl	17e4c <Fw::PortBase::isConnected() const>
    f54a:	b910      	cbnz	r0, f552 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x1e>
  }
    f54c:	b008      	add	sp, #32
    f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f552:	f504 783d 	add.w	r8, r4, #756	; 0x2f4
    f556:	4640      	mov	r0, r8
    f558:	f008 fc78 	bl	17e4c <Fw::PortBase::isConnected() const>
    f55c:	b9b8      	cbnz	r0, f58e <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x5a>
      Fw::TlmBuffer _tlmBuff;
    f55e:	4668      	mov	r0, sp
    f560:	f007 fcd4 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f564:	4632      	mov	r2, r6
    f566:	462b      	mov	r3, r5
    f568:	4668      	mov	r0, sp
    f56a:	f7f1 f943 	bl	7f4 <Fw::SerializeBufferBase::serialize(unsigned long long)>
      FW_ASSERT(
    f56e:	b9c8      	cbnz	r0, f5a4 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x70>
      _id = this->getIdBase() + CHANNELID_MEMORY_USED;
    f570:	4620      	mov	r0, r4
    f572:	f002 fcbf 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f576:	466b      	mov	r3, sp
    f578:	1c41      	adds	r1, r0, #1
    f57a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f57c:	4638      	mov	r0, r7
    f57e:	f007 ff0b 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f582:	4668      	mov	r0, sp
    f584:	f007 fcaa 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f588:	b008      	add	sp, #32
    f58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f58e:	4909      	ldr	r1, [pc, #36]	; (f5b4 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x80>)
    f590:	980e      	ldr	r0, [sp, #56]	; 0x38
    f592:	f008 f9d3 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f596:	2800      	cmp	r0, #0
    f598:	d0e1      	beq.n	f55e <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x2a>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f59a:	4640      	mov	r0, r8
    f59c:	990e      	ldr	r1, [sp, #56]	; 0x38
    f59e:	f008 fb0d 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f5a2:	e7dc      	b.n	f55e <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x2a>
      FW_ASSERT(
    f5a4:	4601      	mov	r1, r0
    f5a6:	f240 22de 	movw	r2, #734	; 0x2de
    f5aa:	4803      	ldr	r0, [pc, #12]	; (f5b8 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x84>)
    f5ac:	f7f2 f83c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f5b0:	e7de      	b.n	f570 <Svc::SystemResourcesComponentBase::tlmWrite_MEMORY_USED(unsigned long long, Fw::Time) const+0x3c>
    f5b2:	bf00      	nop
    f5b4:	2000c9b0 	.word	0x2000c9b0
    f5b8:	20001998 	.word	0x20001998

0000f5bc <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const>:
  {
    f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f5c0:	f500 7758 	add.w	r7, r0, #864	; 0x360
  {
    f5c4:	b088      	sub	sp, #32
    f5c6:	4604      	mov	r4, r0
    f5c8:	4616      	mov	r6, r2
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f5ca:	4638      	mov	r0, r7
  {
    f5cc:	461d      	mov	r5, r3
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f5ce:	f008 fc3d 	bl	17e4c <Fw::PortBase::isConnected() const>
    f5d2:	b910      	cbnz	r0, f5da <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x1e>
  }
    f5d4:	b008      	add	sp, #32
    f5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f5da:	f504 783d 	add.w	r8, r4, #756	; 0x2f4
    f5de:	4640      	mov	r0, r8
    f5e0:	f008 fc34 	bl	17e4c <Fw::PortBase::isConnected() const>
    f5e4:	b9b8      	cbnz	r0, f616 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x5a>
      Fw::TlmBuffer _tlmBuff;
    f5e6:	4668      	mov	r0, sp
    f5e8:	f007 fc90 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f5ec:	4632      	mov	r2, r6
    f5ee:	462b      	mov	r3, r5
    f5f0:	4668      	mov	r0, sp
    f5f2:	f7f1 f8ff 	bl	7f4 <Fw::SerializeBufferBase::serialize(unsigned long long)>
      FW_ASSERT(
    f5f6:	b9c8      	cbnz	r0, f62c <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x70>
      _id = this->getIdBase() + CHANNELID_NON_VOLATILE_TOTAL;
    f5f8:	4620      	mov	r0, r4
    f5fa:	f002 fc7b 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f5fe:	466b      	mov	r3, sp
    f600:	1c81      	adds	r1, r0, #2
    f602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f604:	4638      	mov	r0, r7
    f606:	f007 fec7 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f60a:	4668      	mov	r0, sp
    f60c:	f007 fc66 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f610:	b008      	add	sp, #32
    f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f616:	4909      	ldr	r1, [pc, #36]	; (f63c <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x80>)
    f618:	980e      	ldr	r0, [sp, #56]	; 0x38
    f61a:	f008 f98f 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f61e:	2800      	cmp	r0, #0
    f620:	d0e1      	beq.n	f5e6 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x2a>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f622:	4640      	mov	r0, r8
    f624:	990e      	ldr	r1, [sp, #56]	; 0x38
    f626:	f008 fac9 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f62a:	e7dc      	b.n	f5e6 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x2a>
      FW_ASSERT(
    f62c:	4601      	mov	r1, r0
    f62e:	f240 22ff 	movw	r2, #767	; 0x2ff
    f632:	4803      	ldr	r0, [pc, #12]	; (f640 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x84>)
    f634:	f7f1 fff8 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f638:	e7de      	b.n	f5f8 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_TOTAL(unsigned long long, Fw::Time) const+0x3c>
    f63a:	bf00      	nop
    f63c:	2000c9b0 	.word	0x2000c9b0
    f640:	20001998 	.word	0x20001998

0000f644 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const>:
  {
    f644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f648:	f500 7758 	add.w	r7, r0, #864	; 0x360
  {
    f64c:	b088      	sub	sp, #32
    f64e:	4604      	mov	r4, r0
    f650:	4616      	mov	r6, r2
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f652:	4638      	mov	r0, r7
  {
    f654:	461d      	mov	r5, r3
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f656:	f008 fbf9 	bl	17e4c <Fw::PortBase::isConnected() const>
    f65a:	b910      	cbnz	r0, f662 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x1e>
  }
    f65c:	b008      	add	sp, #32
    f65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f662:	f504 783d 	add.w	r8, r4, #756	; 0x2f4
    f666:	4640      	mov	r0, r8
    f668:	f008 fbf0 	bl	17e4c <Fw::PortBase::isConnected() const>
    f66c:	b9b8      	cbnz	r0, f69e <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x5a>
      Fw::TlmBuffer _tlmBuff;
    f66e:	4668      	mov	r0, sp
    f670:	f007 fc4c 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f674:	4632      	mov	r2, r6
    f676:	462b      	mov	r3, r5
    f678:	4668      	mov	r0, sp
    f67a:	f7f1 f8bb 	bl	7f4 <Fw::SerializeBufferBase::serialize(unsigned long long)>
      FW_ASSERT(
    f67e:	b9c8      	cbnz	r0, f6b4 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x70>
      _id = this->getIdBase() + CHANNELID_NON_VOLATILE_FREE;
    f680:	4620      	mov	r0, r4
    f682:	f002 fc37 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f686:	466b      	mov	r3, sp
    f688:	1cc1      	adds	r1, r0, #3
    f68a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f68c:	4638      	mov	r0, r7
    f68e:	f007 fe83 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f692:	4668      	mov	r0, sp
    f694:	f007 fc22 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f698:	b008      	add	sp, #32
    f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f69e:	4909      	ldr	r1, [pc, #36]	; (f6c4 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x80>)
    f6a0:	980e      	ldr	r0, [sp, #56]	; 0x38
    f6a2:	f008 f94b 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f6a6:	2800      	cmp	r0, #0
    f6a8:	d0e1      	beq.n	f66e <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x2a>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f6aa:	4640      	mov	r0, r8
    f6ac:	990e      	ldr	r1, [sp, #56]	; 0x38
    f6ae:	f008 fa85 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f6b2:	e7dc      	b.n	f66e <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x2a>
      FW_ASSERT(
    f6b4:	4601      	mov	r1, r0
    f6b6:	f44f 7248 	mov.w	r2, #800	; 0x320
    f6ba:	4803      	ldr	r0, [pc, #12]	; (f6c8 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x84>)
    f6bc:	f7f1 ffb4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f6c0:	e7de      	b.n	f680 <Svc::SystemResourcesComponentBase::tlmWrite_NON_VOLATILE_FREE(unsigned long long, Fw::Time) const+0x3c>
    f6c2:	bf00      	nop
    f6c4:	2000c9b0 	.word	0x2000c9b0
    f6c8:	20001998 	.word	0x20001998

0000f6cc <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const>:
  {
    f6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f6ce:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    f6d2:	4604      	mov	r4, r0
    f6d4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f6d6:	4628      	mov	r0, r5
  {
    f6d8:	ed2d 8b02 	vpush	{d8}
    f6dc:	b089      	sub	sp, #36	; 0x24
    f6de:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f6e2:	f008 fbb3 	bl	17e4c <Fw::PortBase::isConnected() const>
    f6e6:	b918      	cbnz	r0, f6f0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x24>
  }
    f6e8:	b009      	add	sp, #36	; 0x24
    f6ea:	ecbd 8b02 	vpop	{d8}
    f6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f6f0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    f6f4:	4638      	mov	r0, r7
    f6f6:	f008 fba9 	bl	17e4c <Fw::PortBase::isConnected() const>
    f6fa:	b9c0      	cbnz	r0, f72e <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x62>
      Fw::TlmBuffer _tlmBuff;
    f6fc:	4668      	mov	r0, sp
    f6fe:	f007 fc05 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f702:	eeb0 0a48 	vmov.f32	s0, s16
    f706:	4668      	mov	r0, sp
    f708:	f7f1 f916 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    f70c:	b9d0      	cbnz	r0, f744 <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x78>
      _id = this->getIdBase() + CHANNELID_CPU;
    f70e:	4620      	mov	r0, r4
    f710:	f002 fbf0 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f714:	466b      	mov	r3, sp
    f716:	1d01      	adds	r1, r0, #4
    f718:	4632      	mov	r2, r6
    f71a:	4628      	mov	r0, r5
    f71c:	f007 fe3c 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f720:	4668      	mov	r0, sp
    f722:	f007 fbdb 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f726:	b009      	add	sp, #36	; 0x24
    f728:	ecbd 8b02 	vpop	{d8}
    f72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f72e:	4909      	ldr	r1, [pc, #36]	; (f754 <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x88>)
    f730:	4630      	mov	r0, r6
    f732:	f008 f903 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f736:	2800      	cmp	r0, #0
    f738:	d0e0      	beq.n	f6fc <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f73a:	4631      	mov	r1, r6
    f73c:	4638      	mov	r0, r7
    f73e:	f008 fa3d 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f742:	e7db      	b.n	f6fc <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x30>
      FW_ASSERT(
    f744:	4601      	mov	r1, r0
    f746:	f240 3241 	movw	r2, #833	; 0x341
    f74a:	4803      	ldr	r0, [pc, #12]	; (f758 <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x8c>)
    f74c:	f7f1 ff6c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f750:	e7dd      	b.n	f70e <Svc::SystemResourcesComponentBase::tlmWrite_CPU(float, Fw::Time) const+0x42>
    f752:	bf00      	nop
    f754:	2000c9b0 	.word	0x2000c9b0
    f758:	20001998 	.word	0x20001998

0000f75c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const>:
  {
    f75c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f75e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    f762:	4604      	mov	r4, r0
    f764:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f766:	4628      	mov	r0, r5
  {
    f768:	ed2d 8b02 	vpush	{d8}
    f76c:	b089      	sub	sp, #36	; 0x24
    f76e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f772:	f008 fb6b 	bl	17e4c <Fw::PortBase::isConnected() const>
    f776:	b918      	cbnz	r0, f780 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x24>
  }
    f778:	b009      	add	sp, #36	; 0x24
    f77a:	ecbd 8b02 	vpop	{d8}
    f77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f780:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    f784:	4638      	mov	r0, r7
    f786:	f008 fb61 	bl	17e4c <Fw::PortBase::isConnected() const>
    f78a:	b9c0      	cbnz	r0, f7be <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x62>
      Fw::TlmBuffer _tlmBuff;
    f78c:	4668      	mov	r0, sp
    f78e:	f007 fbbd 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f792:	eeb0 0a48 	vmov.f32	s0, s16
    f796:	4668      	mov	r0, sp
    f798:	f7f1 f8ce 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    f79c:	b9d0      	cbnz	r0, f7d4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x78>
      _id = this->getIdBase() + CHANNELID_CPU_00;
    f79e:	4620      	mov	r0, r4
    f7a0:	f002 fba8 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f7a4:	466b      	mov	r3, sp
    f7a6:	1d41      	adds	r1, r0, #5
    f7a8:	4632      	mov	r2, r6
    f7aa:	4628      	mov	r0, r5
    f7ac:	f007 fdf4 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f7b0:	4668      	mov	r0, sp
    f7b2:	f007 fb93 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f7b6:	b009      	add	sp, #36	; 0x24
    f7b8:	ecbd 8b02 	vpop	{d8}
    f7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f7be:	4909      	ldr	r1, [pc, #36]	; (f7e4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x88>)
    f7c0:	4630      	mov	r0, r6
    f7c2:	f008 f8bb 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f7c6:	2800      	cmp	r0, #0
    f7c8:	d0e0      	beq.n	f78c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f7ca:	4631      	mov	r1, r6
    f7cc:	4638      	mov	r0, r7
    f7ce:	f008 f9f5 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f7d2:	e7db      	b.n	f78c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x30>
      FW_ASSERT(
    f7d4:	4601      	mov	r1, r0
    f7d6:	f240 3262 	movw	r2, #866	; 0x362
    f7da:	4803      	ldr	r0, [pc, #12]	; (f7e8 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x8c>)
    f7dc:	f7f1 ff24 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f7e0:	e7dd      	b.n	f79e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_00(float, Fw::Time) const+0x42>
    f7e2:	bf00      	nop
    f7e4:	2000c9b0 	.word	0x2000c9b0
    f7e8:	20001998 	.word	0x20001998

0000f7ec <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const>:
  {
    f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f7ee:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    f7f2:	4604      	mov	r4, r0
    f7f4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f7f6:	4628      	mov	r0, r5
  {
    f7f8:	ed2d 8b02 	vpush	{d8}
    f7fc:	b089      	sub	sp, #36	; 0x24
    f7fe:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f802:	f008 fb23 	bl	17e4c <Fw::PortBase::isConnected() const>
    f806:	b918      	cbnz	r0, f810 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x24>
  }
    f808:	b009      	add	sp, #36	; 0x24
    f80a:	ecbd 8b02 	vpop	{d8}
    f80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f810:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    f814:	4638      	mov	r0, r7
    f816:	f008 fb19 	bl	17e4c <Fw::PortBase::isConnected() const>
    f81a:	b9c0      	cbnz	r0, f84e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x62>
      Fw::TlmBuffer _tlmBuff;
    f81c:	4668      	mov	r0, sp
    f81e:	f007 fb75 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f822:	eeb0 0a48 	vmov.f32	s0, s16
    f826:	4668      	mov	r0, sp
    f828:	f7f1 f886 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    f82c:	b9d0      	cbnz	r0, f864 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x78>
      _id = this->getIdBase() + CHANNELID_CPU_01;
    f82e:	4620      	mov	r0, r4
    f830:	f002 fb60 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f834:	466b      	mov	r3, sp
    f836:	1d81      	adds	r1, r0, #6
    f838:	4632      	mov	r2, r6
    f83a:	4628      	mov	r0, r5
    f83c:	f007 fdac 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f840:	4668      	mov	r0, sp
    f842:	f007 fb4b 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f846:	b009      	add	sp, #36	; 0x24
    f848:	ecbd 8b02 	vpop	{d8}
    f84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f84e:	4909      	ldr	r1, [pc, #36]	; (f874 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x88>)
    f850:	4630      	mov	r0, r6
    f852:	f008 f873 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f856:	2800      	cmp	r0, #0
    f858:	d0e0      	beq.n	f81c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f85a:	4631      	mov	r1, r6
    f85c:	4638      	mov	r0, r7
    f85e:	f008 f9ad 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f862:	e7db      	b.n	f81c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x30>
      FW_ASSERT(
    f864:	4601      	mov	r1, r0
    f866:	f240 3283 	movw	r2, #899	; 0x383
    f86a:	4803      	ldr	r0, [pc, #12]	; (f878 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x8c>)
    f86c:	f7f1 fedc 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f870:	e7dd      	b.n	f82e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_01(float, Fw::Time) const+0x42>
    f872:	bf00      	nop
    f874:	2000c9b0 	.word	0x2000c9b0
    f878:	20001998 	.word	0x20001998

0000f87c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const>:
  {
    f87c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f87e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    f882:	4604      	mov	r4, r0
    f884:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f886:	4628      	mov	r0, r5
  {
    f888:	ed2d 8b02 	vpush	{d8}
    f88c:	b089      	sub	sp, #36	; 0x24
    f88e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f892:	f008 fadb 	bl	17e4c <Fw::PortBase::isConnected() const>
    f896:	b918      	cbnz	r0, f8a0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x24>
  }
    f898:	b009      	add	sp, #36	; 0x24
    f89a:	ecbd 8b02 	vpop	{d8}
    f89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f8a0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    f8a4:	4638      	mov	r0, r7
    f8a6:	f008 fad1 	bl	17e4c <Fw::PortBase::isConnected() const>
    f8aa:	b9c0      	cbnz	r0, f8de <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x62>
      Fw::TlmBuffer _tlmBuff;
    f8ac:	4668      	mov	r0, sp
    f8ae:	f007 fb2d 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f8b2:	eeb0 0a48 	vmov.f32	s0, s16
    f8b6:	4668      	mov	r0, sp
    f8b8:	f7f1 f83e 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    f8bc:	b9d0      	cbnz	r0, f8f4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x78>
      _id = this->getIdBase() + CHANNELID_CPU_02;
    f8be:	4620      	mov	r0, r4
    f8c0:	f002 fb18 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f8c4:	466b      	mov	r3, sp
    f8c6:	1dc1      	adds	r1, r0, #7
    f8c8:	4632      	mov	r2, r6
    f8ca:	4628      	mov	r0, r5
    f8cc:	f007 fd64 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f8d0:	4668      	mov	r0, sp
    f8d2:	f007 fb03 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f8d6:	b009      	add	sp, #36	; 0x24
    f8d8:	ecbd 8b02 	vpop	{d8}
    f8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f8de:	4909      	ldr	r1, [pc, #36]	; (f904 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x88>)
    f8e0:	4630      	mov	r0, r6
    f8e2:	f008 f82b 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f8e6:	2800      	cmp	r0, #0
    f8e8:	d0e0      	beq.n	f8ac <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f8ea:	4631      	mov	r1, r6
    f8ec:	4638      	mov	r0, r7
    f8ee:	f008 f965 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f8f2:	e7db      	b.n	f8ac <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x30>
      FW_ASSERT(
    f8f4:	4601      	mov	r1, r0
    f8f6:	f44f 7269 	mov.w	r2, #932	; 0x3a4
    f8fa:	4803      	ldr	r0, [pc, #12]	; (f908 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x8c>)
    f8fc:	f7f1 fe94 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f900:	e7dd      	b.n	f8be <Svc::SystemResourcesComponentBase::tlmWrite_CPU_02(float, Fw::Time) const+0x42>
    f902:	bf00      	nop
    f904:	2000c9b0 	.word	0x2000c9b0
    f908:	20001998 	.word	0x20001998

0000f90c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const>:
  {
    f90c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f90e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    f912:	4604      	mov	r4, r0
    f914:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f916:	4628      	mov	r0, r5
  {
    f918:	ed2d 8b02 	vpush	{d8}
    f91c:	b089      	sub	sp, #36	; 0x24
    f91e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f922:	f008 fa93 	bl	17e4c <Fw::PortBase::isConnected() const>
    f926:	b918      	cbnz	r0, f930 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x24>
  }
    f928:	b009      	add	sp, #36	; 0x24
    f92a:	ecbd 8b02 	vpop	{d8}
    f92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f930:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    f934:	4638      	mov	r0, r7
    f936:	f008 fa89 	bl	17e4c <Fw::PortBase::isConnected() const>
    f93a:	b9c8      	cbnz	r0, f970 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    f93c:	4668      	mov	r0, sp
    f93e:	f007 fae5 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f942:	eeb0 0a48 	vmov.f32	s0, s16
    f946:	4668      	mov	r0, sp
    f948:	f7f0 fff6 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    f94c:	b9d8      	cbnz	r0, f986 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_03;
    f94e:	4620      	mov	r0, r4
    f950:	f002 fad0 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f954:	466b      	mov	r3, sp
    f956:	f100 0108 	add.w	r1, r0, #8
    f95a:	4632      	mov	r2, r6
    f95c:	4628      	mov	r0, r5
    f95e:	f007 fd1b 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f962:	4668      	mov	r0, sp
    f964:	f007 faba 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f968:	b009      	add	sp, #36	; 0x24
    f96a:	ecbd 8b02 	vpop	{d8}
    f96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    f970:	4908      	ldr	r1, [pc, #32]	; (f994 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x88>)
    f972:	4630      	mov	r0, r6
    f974:	f007 ffe2 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    f978:	2800      	cmp	r0, #0
    f97a:	d0df      	beq.n	f93c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    f97c:	4631      	mov	r1, r6
    f97e:	4638      	mov	r0, r7
    f980:	f008 f91c 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    f984:	e7da      	b.n	f93c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x30>
      FW_ASSERT(
    f986:	4601      	mov	r1, r0
    f988:	f240 32c5 	movw	r2, #965	; 0x3c5
    f98c:	4802      	ldr	r0, [pc, #8]	; (f998 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x8c>)
    f98e:	f7f1 fe4b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    f992:	e7dc      	b.n	f94e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_03(float, Fw::Time) const+0x42>
    f994:	2000c9b0 	.word	0x2000c9b0
    f998:	20001998 	.word	0x20001998

0000f99c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const>:
  {
    f99c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f99e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    f9a2:	4604      	mov	r4, r0
    f9a4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f9a6:	4628      	mov	r0, r5
  {
    f9a8:	ed2d 8b02 	vpush	{d8}
    f9ac:	b089      	sub	sp, #36	; 0x24
    f9ae:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    f9b2:	f008 fa4b 	bl	17e4c <Fw::PortBase::isConnected() const>
    f9b6:	b918      	cbnz	r0, f9c0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x24>
  }
    f9b8:	b009      	add	sp, #36	; 0x24
    f9ba:	ecbd 8b02 	vpop	{d8}
    f9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    f9c0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    f9c4:	4638      	mov	r0, r7
    f9c6:	f008 fa41 	bl	17e4c <Fw::PortBase::isConnected() const>
    f9ca:	b9c8      	cbnz	r0, fa00 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    f9cc:	4668      	mov	r0, sp
    f9ce:	f007 fa9d 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    f9d2:	eeb0 0a48 	vmov.f32	s0, s16
    f9d6:	4668      	mov	r0, sp
    f9d8:	f7f0 ffae 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    f9dc:	b9d8      	cbnz	r0, fa16 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_04;
    f9de:	4620      	mov	r0, r4
    f9e0:	f002 fa88 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    f9e4:	466b      	mov	r3, sp
    f9e6:	f100 0109 	add.w	r1, r0, #9
    f9ea:	4632      	mov	r2, r6
    f9ec:	4628      	mov	r0, r5
    f9ee:	f007 fcd3 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    f9f2:	4668      	mov	r0, sp
    f9f4:	f007 fa72 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    f9f8:	b009      	add	sp, #36	; 0x24
    f9fa:	ecbd 8b02 	vpop	{d8}
    f9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fa00:	4908      	ldr	r1, [pc, #32]	; (fa24 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x88>)
    fa02:	4630      	mov	r0, r6
    fa04:	f007 ff9a 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fa08:	2800      	cmp	r0, #0
    fa0a:	d0df      	beq.n	f9cc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fa0c:	4631      	mov	r1, r6
    fa0e:	4638      	mov	r0, r7
    fa10:	f008 f8d4 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fa14:	e7da      	b.n	f9cc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fa16:	4601      	mov	r1, r0
    fa18:	f240 32e6 	movw	r2, #998	; 0x3e6
    fa1c:	4802      	ldr	r0, [pc, #8]	; (fa28 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x8c>)
    fa1e:	f7f1 fe03 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fa22:	e7dc      	b.n	f9de <Svc::SystemResourcesComponentBase::tlmWrite_CPU_04(float, Fw::Time) const+0x42>
    fa24:	2000c9b0 	.word	0x2000c9b0
    fa28:	20001998 	.word	0x20001998

0000fa2c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const>:
  {
    fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fa2e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fa32:	4604      	mov	r4, r0
    fa34:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fa36:	4628      	mov	r0, r5
  {
    fa38:	ed2d 8b02 	vpush	{d8}
    fa3c:	b089      	sub	sp, #36	; 0x24
    fa3e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fa42:	f008 fa03 	bl	17e4c <Fw::PortBase::isConnected() const>
    fa46:	b918      	cbnz	r0, fa50 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x24>
  }
    fa48:	b009      	add	sp, #36	; 0x24
    fa4a:	ecbd 8b02 	vpop	{d8}
    fa4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fa50:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fa54:	4638      	mov	r0, r7
    fa56:	f008 f9f9 	bl	17e4c <Fw::PortBase::isConnected() const>
    fa5a:	b9c8      	cbnz	r0, fa90 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fa5c:	4668      	mov	r0, sp
    fa5e:	f007 fa55 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fa62:	eeb0 0a48 	vmov.f32	s0, s16
    fa66:	4668      	mov	r0, sp
    fa68:	f7f0 ff66 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fa6c:	b9d8      	cbnz	r0, faa6 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_05;
    fa6e:	4620      	mov	r0, r4
    fa70:	f002 fa40 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fa74:	466b      	mov	r3, sp
    fa76:	f100 010a 	add.w	r1, r0, #10
    fa7a:	4632      	mov	r2, r6
    fa7c:	4628      	mov	r0, r5
    fa7e:	f007 fc8b 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fa82:	4668      	mov	r0, sp
    fa84:	f007 fa2a 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fa88:	b009      	add	sp, #36	; 0x24
    fa8a:	ecbd 8b02 	vpop	{d8}
    fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fa90:	4908      	ldr	r1, [pc, #32]	; (fab4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x88>)
    fa92:	4630      	mov	r0, r6
    fa94:	f007 ff52 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fa98:	2800      	cmp	r0, #0
    fa9a:	d0df      	beq.n	fa5c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fa9c:	4631      	mov	r1, r6
    fa9e:	4638      	mov	r0, r7
    faa0:	f008 f88c 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    faa4:	e7da      	b.n	fa5c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x30>
      FW_ASSERT(
    faa6:	4601      	mov	r1, r0
    faa8:	f240 4207 	movw	r2, #1031	; 0x407
    faac:	4802      	ldr	r0, [pc, #8]	; (fab8 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x8c>)
    faae:	f7f1 fdbb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fab2:	e7dc      	b.n	fa6e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_05(float, Fw::Time) const+0x42>
    fab4:	2000c9b0 	.word	0x2000c9b0
    fab8:	20001998 	.word	0x20001998

0000fabc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const>:
  {
    fabc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fabe:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fac2:	4604      	mov	r4, r0
    fac4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fac6:	4628      	mov	r0, r5
  {
    fac8:	ed2d 8b02 	vpush	{d8}
    facc:	b089      	sub	sp, #36	; 0x24
    face:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fad2:	f008 f9bb 	bl	17e4c <Fw::PortBase::isConnected() const>
    fad6:	b918      	cbnz	r0, fae0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x24>
  }
    fad8:	b009      	add	sp, #36	; 0x24
    fada:	ecbd 8b02 	vpop	{d8}
    fade:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fae0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fae4:	4638      	mov	r0, r7
    fae6:	f008 f9b1 	bl	17e4c <Fw::PortBase::isConnected() const>
    faea:	b9c8      	cbnz	r0, fb20 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    faec:	4668      	mov	r0, sp
    faee:	f007 fa0d 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    faf2:	eeb0 0a48 	vmov.f32	s0, s16
    faf6:	4668      	mov	r0, sp
    faf8:	f7f0 ff1e 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fafc:	b9d8      	cbnz	r0, fb36 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_06;
    fafe:	4620      	mov	r0, r4
    fb00:	f002 f9f8 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fb04:	466b      	mov	r3, sp
    fb06:	f100 010b 	add.w	r1, r0, #11
    fb0a:	4632      	mov	r2, r6
    fb0c:	4628      	mov	r0, r5
    fb0e:	f007 fc43 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fb12:	4668      	mov	r0, sp
    fb14:	f007 f9e2 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fb18:	b009      	add	sp, #36	; 0x24
    fb1a:	ecbd 8b02 	vpop	{d8}
    fb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fb20:	4908      	ldr	r1, [pc, #32]	; (fb44 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x88>)
    fb22:	4630      	mov	r0, r6
    fb24:	f007 ff0a 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fb28:	2800      	cmp	r0, #0
    fb2a:	d0df      	beq.n	faec <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fb2c:	4631      	mov	r1, r6
    fb2e:	4638      	mov	r0, r7
    fb30:	f008 f844 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fb34:	e7da      	b.n	faec <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fb36:	4601      	mov	r1, r0
    fb38:	f44f 6285 	mov.w	r2, #1064	; 0x428
    fb3c:	4802      	ldr	r0, [pc, #8]	; (fb48 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x8c>)
    fb3e:	f7f1 fd73 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fb42:	e7dc      	b.n	fafe <Svc::SystemResourcesComponentBase::tlmWrite_CPU_06(float, Fw::Time) const+0x42>
    fb44:	2000c9b0 	.word	0x2000c9b0
    fb48:	20001998 	.word	0x20001998

0000fb4c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const>:
  {
    fb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fb4e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fb52:	4604      	mov	r4, r0
    fb54:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fb56:	4628      	mov	r0, r5
  {
    fb58:	ed2d 8b02 	vpush	{d8}
    fb5c:	b089      	sub	sp, #36	; 0x24
    fb5e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fb62:	f008 f973 	bl	17e4c <Fw::PortBase::isConnected() const>
    fb66:	b918      	cbnz	r0, fb70 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x24>
  }
    fb68:	b009      	add	sp, #36	; 0x24
    fb6a:	ecbd 8b02 	vpop	{d8}
    fb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fb70:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fb74:	4638      	mov	r0, r7
    fb76:	f008 f969 	bl	17e4c <Fw::PortBase::isConnected() const>
    fb7a:	b9c8      	cbnz	r0, fbb0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fb7c:	4668      	mov	r0, sp
    fb7e:	f007 f9c5 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fb82:	eeb0 0a48 	vmov.f32	s0, s16
    fb86:	4668      	mov	r0, sp
    fb88:	f7f0 fed6 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fb8c:	b9d8      	cbnz	r0, fbc6 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_07;
    fb8e:	4620      	mov	r0, r4
    fb90:	f002 f9b0 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fb94:	466b      	mov	r3, sp
    fb96:	f100 010c 	add.w	r1, r0, #12
    fb9a:	4632      	mov	r2, r6
    fb9c:	4628      	mov	r0, r5
    fb9e:	f007 fbfb 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fba2:	4668      	mov	r0, sp
    fba4:	f007 f99a 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fba8:	b009      	add	sp, #36	; 0x24
    fbaa:	ecbd 8b02 	vpop	{d8}
    fbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fbb0:	4908      	ldr	r1, [pc, #32]	; (fbd4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x88>)
    fbb2:	4630      	mov	r0, r6
    fbb4:	f007 fec2 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fbb8:	2800      	cmp	r0, #0
    fbba:	d0df      	beq.n	fb7c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fbbc:	4631      	mov	r1, r6
    fbbe:	4638      	mov	r0, r7
    fbc0:	f007 fffc 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fbc4:	e7da      	b.n	fb7c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fbc6:	4601      	mov	r1, r0
    fbc8:	f240 4249 	movw	r2, #1097	; 0x449
    fbcc:	4802      	ldr	r0, [pc, #8]	; (fbd8 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x8c>)
    fbce:	f7f1 fd2b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fbd2:	e7dc      	b.n	fb8e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_07(float, Fw::Time) const+0x42>
    fbd4:	2000c9b0 	.word	0x2000c9b0
    fbd8:	20001998 	.word	0x20001998

0000fbdc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const>:
  {
    fbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fbde:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fbe2:	4604      	mov	r4, r0
    fbe4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fbe6:	4628      	mov	r0, r5
  {
    fbe8:	ed2d 8b02 	vpush	{d8}
    fbec:	b089      	sub	sp, #36	; 0x24
    fbee:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fbf2:	f008 f92b 	bl	17e4c <Fw::PortBase::isConnected() const>
    fbf6:	b918      	cbnz	r0, fc00 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x24>
  }
    fbf8:	b009      	add	sp, #36	; 0x24
    fbfa:	ecbd 8b02 	vpop	{d8}
    fbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fc00:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fc04:	4638      	mov	r0, r7
    fc06:	f008 f921 	bl	17e4c <Fw::PortBase::isConnected() const>
    fc0a:	b9c8      	cbnz	r0, fc40 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fc0c:	4668      	mov	r0, sp
    fc0e:	f007 f97d 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fc12:	eeb0 0a48 	vmov.f32	s0, s16
    fc16:	4668      	mov	r0, sp
    fc18:	f7f0 fe8e 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fc1c:	b9d8      	cbnz	r0, fc56 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_08;
    fc1e:	4620      	mov	r0, r4
    fc20:	f002 f968 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fc24:	466b      	mov	r3, sp
    fc26:	f100 010d 	add.w	r1, r0, #13
    fc2a:	4632      	mov	r2, r6
    fc2c:	4628      	mov	r0, r5
    fc2e:	f007 fbb3 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fc32:	4668      	mov	r0, sp
    fc34:	f007 f952 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fc38:	b009      	add	sp, #36	; 0x24
    fc3a:	ecbd 8b02 	vpop	{d8}
    fc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fc40:	4908      	ldr	r1, [pc, #32]	; (fc64 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x88>)
    fc42:	4630      	mov	r0, r6
    fc44:	f007 fe7a 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fc48:	2800      	cmp	r0, #0
    fc4a:	d0df      	beq.n	fc0c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fc4c:	4631      	mov	r1, r6
    fc4e:	4638      	mov	r0, r7
    fc50:	f007 ffb4 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fc54:	e7da      	b.n	fc0c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fc56:	4601      	mov	r1, r0
    fc58:	f240 426a 	movw	r2, #1130	; 0x46a
    fc5c:	4802      	ldr	r0, [pc, #8]	; (fc68 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x8c>)
    fc5e:	f7f1 fce3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fc62:	e7dc      	b.n	fc1e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_08(float, Fw::Time) const+0x42>
    fc64:	2000c9b0 	.word	0x2000c9b0
    fc68:	20001998 	.word	0x20001998

0000fc6c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const>:
  {
    fc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fc6e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fc72:	4604      	mov	r4, r0
    fc74:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fc76:	4628      	mov	r0, r5
  {
    fc78:	ed2d 8b02 	vpush	{d8}
    fc7c:	b089      	sub	sp, #36	; 0x24
    fc7e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fc82:	f008 f8e3 	bl	17e4c <Fw::PortBase::isConnected() const>
    fc86:	b918      	cbnz	r0, fc90 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x24>
  }
    fc88:	b009      	add	sp, #36	; 0x24
    fc8a:	ecbd 8b02 	vpop	{d8}
    fc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fc90:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fc94:	4638      	mov	r0, r7
    fc96:	f008 f8d9 	bl	17e4c <Fw::PortBase::isConnected() const>
    fc9a:	b9c8      	cbnz	r0, fcd0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fc9c:	4668      	mov	r0, sp
    fc9e:	f007 f935 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fca2:	eeb0 0a48 	vmov.f32	s0, s16
    fca6:	4668      	mov	r0, sp
    fca8:	f7f0 fe46 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fcac:	b9d8      	cbnz	r0, fce6 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_09;
    fcae:	4620      	mov	r0, r4
    fcb0:	f002 f920 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fcb4:	466b      	mov	r3, sp
    fcb6:	f100 010e 	add.w	r1, r0, #14
    fcba:	4632      	mov	r2, r6
    fcbc:	4628      	mov	r0, r5
    fcbe:	f007 fb6b 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fcc2:	4668      	mov	r0, sp
    fcc4:	f007 f90a 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fcc8:	b009      	add	sp, #36	; 0x24
    fcca:	ecbd 8b02 	vpop	{d8}
    fcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fcd0:	4908      	ldr	r1, [pc, #32]	; (fcf4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x88>)
    fcd2:	4630      	mov	r0, r6
    fcd4:	f007 fe32 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fcd8:	2800      	cmp	r0, #0
    fcda:	d0df      	beq.n	fc9c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fcdc:	4631      	mov	r1, r6
    fcde:	4638      	mov	r0, r7
    fce0:	f007 ff6c 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fce4:	e7da      	b.n	fc9c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fce6:	4601      	mov	r1, r0
    fce8:	f240 428b 	movw	r2, #1163	; 0x48b
    fcec:	4802      	ldr	r0, [pc, #8]	; (fcf8 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x8c>)
    fcee:	f7f1 fc9b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fcf2:	e7dc      	b.n	fcae <Svc::SystemResourcesComponentBase::tlmWrite_CPU_09(float, Fw::Time) const+0x42>
    fcf4:	2000c9b0 	.word	0x2000c9b0
    fcf8:	20001998 	.word	0x20001998

0000fcfc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const>:
  {
    fcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fcfe:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fd02:	4604      	mov	r4, r0
    fd04:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fd06:	4628      	mov	r0, r5
  {
    fd08:	ed2d 8b02 	vpush	{d8}
    fd0c:	b089      	sub	sp, #36	; 0x24
    fd0e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fd12:	f008 f89b 	bl	17e4c <Fw::PortBase::isConnected() const>
    fd16:	b918      	cbnz	r0, fd20 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x24>
  }
    fd18:	b009      	add	sp, #36	; 0x24
    fd1a:	ecbd 8b02 	vpop	{d8}
    fd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fd20:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fd24:	4638      	mov	r0, r7
    fd26:	f008 f891 	bl	17e4c <Fw::PortBase::isConnected() const>
    fd2a:	b9c8      	cbnz	r0, fd60 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fd2c:	4668      	mov	r0, sp
    fd2e:	f007 f8ed 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fd32:	eeb0 0a48 	vmov.f32	s0, s16
    fd36:	4668      	mov	r0, sp
    fd38:	f7f0 fdfe 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fd3c:	b9d8      	cbnz	r0, fd76 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_10;
    fd3e:	4620      	mov	r0, r4
    fd40:	f002 f8d8 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fd44:	466b      	mov	r3, sp
    fd46:	f100 010f 	add.w	r1, r0, #15
    fd4a:	4632      	mov	r2, r6
    fd4c:	4628      	mov	r0, r5
    fd4e:	f007 fb23 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fd52:	4668      	mov	r0, sp
    fd54:	f007 f8c2 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fd58:	b009      	add	sp, #36	; 0x24
    fd5a:	ecbd 8b02 	vpop	{d8}
    fd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fd60:	4908      	ldr	r1, [pc, #32]	; (fd84 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x88>)
    fd62:	4630      	mov	r0, r6
    fd64:	f007 fdea 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fd68:	2800      	cmp	r0, #0
    fd6a:	d0df      	beq.n	fd2c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fd6c:	4631      	mov	r1, r6
    fd6e:	4638      	mov	r0, r7
    fd70:	f007 ff24 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fd74:	e7da      	b.n	fd2c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fd76:	4601      	mov	r1, r0
    fd78:	f240 42ac 	movw	r2, #1196	; 0x4ac
    fd7c:	4802      	ldr	r0, [pc, #8]	; (fd88 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x8c>)
    fd7e:	f7f1 fc53 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fd82:	e7dc      	b.n	fd3e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_10(float, Fw::Time) const+0x42>
    fd84:	2000c9b0 	.word	0x2000c9b0
    fd88:	20001998 	.word	0x20001998

0000fd8c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const>:
  {
    fd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fd8e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fd92:	4604      	mov	r4, r0
    fd94:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fd96:	4628      	mov	r0, r5
  {
    fd98:	ed2d 8b02 	vpush	{d8}
    fd9c:	b089      	sub	sp, #36	; 0x24
    fd9e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fda2:	f008 f853 	bl	17e4c <Fw::PortBase::isConnected() const>
    fda6:	b918      	cbnz	r0, fdb0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x24>
  }
    fda8:	b009      	add	sp, #36	; 0x24
    fdaa:	ecbd 8b02 	vpop	{d8}
    fdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fdb0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fdb4:	4638      	mov	r0, r7
    fdb6:	f008 f849 	bl	17e4c <Fw::PortBase::isConnected() const>
    fdba:	b9c8      	cbnz	r0, fdf0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fdbc:	4668      	mov	r0, sp
    fdbe:	f007 f8a5 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fdc2:	eeb0 0a48 	vmov.f32	s0, s16
    fdc6:	4668      	mov	r0, sp
    fdc8:	f7f0 fdb6 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fdcc:	b9d8      	cbnz	r0, fe06 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_11;
    fdce:	4620      	mov	r0, r4
    fdd0:	f002 f890 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fdd4:	466b      	mov	r3, sp
    fdd6:	f100 0110 	add.w	r1, r0, #16
    fdda:	4632      	mov	r2, r6
    fddc:	4628      	mov	r0, r5
    fdde:	f007 fadb 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fde2:	4668      	mov	r0, sp
    fde4:	f007 f87a 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fde8:	b009      	add	sp, #36	; 0x24
    fdea:	ecbd 8b02 	vpop	{d8}
    fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fdf0:	4908      	ldr	r1, [pc, #32]	; (fe14 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x88>)
    fdf2:	4630      	mov	r0, r6
    fdf4:	f007 fda2 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fdf8:	2800      	cmp	r0, #0
    fdfa:	d0df      	beq.n	fdbc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fdfc:	4631      	mov	r1, r6
    fdfe:	4638      	mov	r0, r7
    fe00:	f007 fedc 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fe04:	e7da      	b.n	fdbc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fe06:	4601      	mov	r1, r0
    fe08:	f240 42cd 	movw	r2, #1229	; 0x4cd
    fe0c:	4802      	ldr	r0, [pc, #8]	; (fe18 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x8c>)
    fe0e:	f7f1 fc0b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fe12:	e7dc      	b.n	fdce <Svc::SystemResourcesComponentBase::tlmWrite_CPU_11(float, Fw::Time) const+0x42>
    fe14:	2000c9b0 	.word	0x2000c9b0
    fe18:	20001998 	.word	0x20001998

0000fe1c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const>:
  {
    fe1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fe1e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    fe22:	4604      	mov	r4, r0
    fe24:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fe26:	4628      	mov	r0, r5
  {
    fe28:	ed2d 8b02 	vpush	{d8}
    fe2c:	b089      	sub	sp, #36	; 0x24
    fe2e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fe32:	f008 f80b 	bl	17e4c <Fw::PortBase::isConnected() const>
    fe36:	b918      	cbnz	r0, fe40 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x24>
  }
    fe38:	b009      	add	sp, #36	; 0x24
    fe3a:	ecbd 8b02 	vpop	{d8}
    fe3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fe40:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fe44:	4638      	mov	r0, r7
    fe46:	f008 f801 	bl	17e4c <Fw::PortBase::isConnected() const>
    fe4a:	b9c8      	cbnz	r0, fe80 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fe4c:	4668      	mov	r0, sp
    fe4e:	f007 f85d 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fe52:	eeb0 0a48 	vmov.f32	s0, s16
    fe56:	4668      	mov	r0, sp
    fe58:	f7f0 fd6e 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    fe5c:	b9d8      	cbnz	r0, fe96 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_12;
    fe5e:	4620      	mov	r0, r4
    fe60:	f002 f848 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fe64:	466b      	mov	r3, sp
    fe66:	f100 0111 	add.w	r1, r0, #17
    fe6a:	4632      	mov	r2, r6
    fe6c:	4628      	mov	r0, r5
    fe6e:	f007 fa93 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    fe72:	4668      	mov	r0, sp
    fe74:	f007 f832 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    fe78:	b009      	add	sp, #36	; 0x24
    fe7a:	ecbd 8b02 	vpop	{d8}
    fe7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    fe80:	4908      	ldr	r1, [pc, #32]	; (fea4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x88>)
    fe82:	4630      	mov	r0, r6
    fe84:	f007 fd5a 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    fe88:	2800      	cmp	r0, #0
    fe8a:	d0df      	beq.n	fe4c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    fe8c:	4631      	mov	r1, r6
    fe8e:	4638      	mov	r0, r7
    fe90:	f007 fe94 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    fe94:	e7da      	b.n	fe4c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x30>
      FW_ASSERT(
    fe96:	4601      	mov	r1, r0
    fe98:	f240 42ee 	movw	r2, #1262	; 0x4ee
    fe9c:	4802      	ldr	r0, [pc, #8]	; (fea8 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x8c>)
    fe9e:	f7f1 fbc3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    fea2:	e7dc      	b.n	fe5e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_12(float, Fw::Time) const+0x42>
    fea4:	2000c9b0 	.word	0x2000c9b0
    fea8:	20001998 	.word	0x20001998

0000feac <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const>:
  {
    feac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    feae:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    feb2:	4604      	mov	r4, r0
    feb4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    feb6:	4628      	mov	r0, r5
  {
    feb8:	ed2d 8b02 	vpush	{d8}
    febc:	b089      	sub	sp, #36	; 0x24
    febe:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    fec2:	f007 ffc3 	bl	17e4c <Fw::PortBase::isConnected() const>
    fec6:	b918      	cbnz	r0, fed0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x24>
  }
    fec8:	b009      	add	sp, #36	; 0x24
    feca:	ecbd 8b02 	vpop	{d8}
    fece:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fed0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fed4:	4638      	mov	r0, r7
    fed6:	f007 ffb9 	bl	17e4c <Fw::PortBase::isConnected() const>
    feda:	b9c8      	cbnz	r0, ff10 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fedc:	4668      	mov	r0, sp
    fede:	f007 f815 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    fee2:	eeb0 0a48 	vmov.f32	s0, s16
    fee6:	4668      	mov	r0, sp
    fee8:	f7f0 fd26 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    feec:	b9d8      	cbnz	r0, ff26 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_13;
    feee:	4620      	mov	r0, r4
    fef0:	f002 f800 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    fef4:	466b      	mov	r3, sp
    fef6:	f100 0112 	add.w	r1, r0, #18
    fefa:	4632      	mov	r2, r6
    fefc:	4628      	mov	r0, r5
    fefe:	f007 fa4b 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    ff02:	4668      	mov	r0, sp
    ff04:	f006 ffea 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    ff08:	b009      	add	sp, #36	; 0x24
    ff0a:	ecbd 8b02 	vpop	{d8}
    ff0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    ff10:	4908      	ldr	r1, [pc, #32]	; (ff34 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x88>)
    ff12:	4630      	mov	r0, r6
    ff14:	f007 fd12 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    ff18:	2800      	cmp	r0, #0
    ff1a:	d0df      	beq.n	fedc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    ff1c:	4631      	mov	r1, r6
    ff1e:	4638      	mov	r0, r7
    ff20:	f007 fe4c 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    ff24:	e7da      	b.n	fedc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x30>
      FW_ASSERT(
    ff26:	4601      	mov	r1, r0
    ff28:	f240 520f 	movw	r2, #1295	; 0x50f
    ff2c:	4802      	ldr	r0, [pc, #8]	; (ff38 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x8c>)
    ff2e:	f7f1 fb7b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ff32:	e7dc      	b.n	feee <Svc::SystemResourcesComponentBase::tlmWrite_CPU_13(float, Fw::Time) const+0x42>
    ff34:	2000c9b0 	.word	0x2000c9b0
    ff38:	20001998 	.word	0x20001998

0000ff3c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const>:
  {
    ff3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    ff3e:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    ff42:	4604      	mov	r4, r0
    ff44:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    ff46:	4628      	mov	r0, r5
  {
    ff48:	ed2d 8b02 	vpush	{d8}
    ff4c:	b089      	sub	sp, #36	; 0x24
    ff4e:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    ff52:	f007 ff7b 	bl	17e4c <Fw::PortBase::isConnected() const>
    ff56:	b918      	cbnz	r0, ff60 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x24>
  }
    ff58:	b009      	add	sp, #36	; 0x24
    ff5a:	ecbd 8b02 	vpop	{d8}
    ff5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    ff60:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    ff64:	4638      	mov	r0, r7
    ff66:	f007 ff71 	bl	17e4c <Fw::PortBase::isConnected() const>
    ff6a:	b9c8      	cbnz	r0, ffa0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    ff6c:	4668      	mov	r0, sp
    ff6e:	f006 ffcd 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
    ff72:	eeb0 0a48 	vmov.f32	s0, s16
    ff76:	4668      	mov	r0, sp
    ff78:	f7f0 fcde 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
    ff7c:	b9d8      	cbnz	r0, ffb6 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_14;
    ff7e:	4620      	mov	r0, r4
    ff80:	f001 ffb8 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
    ff84:	466b      	mov	r3, sp
    ff86:	f100 0113 	add.w	r1, r0, #19
    ff8a:	4632      	mov	r2, r6
    ff8c:	4628      	mov	r0, r5
    ff8e:	f007 fa03 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
    ff92:	4668      	mov	r0, sp
    ff94:	f006 ffa2 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
    ff98:	b009      	add	sp, #36	; 0x24
    ff9a:	ecbd 8b02 	vpop	{d8}
    ff9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
    ffa0:	4908      	ldr	r1, [pc, #32]	; (ffc4 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x88>)
    ffa2:	4630      	mov	r0, r6
    ffa4:	f007 fcca 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
    ffa8:	2800      	cmp	r0, #0
    ffaa:	d0df      	beq.n	ff6c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
    ffac:	4631      	mov	r1, r6
    ffae:	4638      	mov	r0, r7
    ffb0:	f007 fe04 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
    ffb4:	e7da      	b.n	ff6c <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x30>
      FW_ASSERT(
    ffb6:	4601      	mov	r1, r0
    ffb8:	f44f 62a6 	mov.w	r2, #1328	; 0x530
    ffbc:	4802      	ldr	r0, [pc, #8]	; (ffc8 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x8c>)
    ffbe:	f7f1 fb33 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ffc2:	e7dc      	b.n	ff7e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_14(float, Fw::Time) const+0x42>
    ffc4:	2000c9b0 	.word	0x2000c9b0
    ffc8:	20001998 	.word	0x20001998

0000ffcc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const>:
  {
    ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    ffce:	f500 7558 	add.w	r5, r0, #864	; 0x360
  {
    ffd2:	4604      	mov	r4, r0
    ffd4:	460e      	mov	r6, r1
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    ffd6:	4628      	mov	r0, r5
  {
    ffd8:	ed2d 8b02 	vpush	{d8}
    ffdc:	b089      	sub	sp, #36	; 0x24
    ffde:	eeb0 8a40 	vmov.f32	s16, s0
    if (this->m_Tlm_OutputPort[0].isConnected()) {
    ffe2:	f007 ff33 	bl	17e4c <Fw::PortBase::isConnected() const>
    ffe6:	b918      	cbnz	r0, fff0 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x24>
  }
    ffe8:	b009      	add	sp, #36	; 0x24
    ffea:	ecbd 8b02 	vpop	{d8}
    ffee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        this->m_Time_OutputPort[0].isConnected() &&
    fff0:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
    fff4:	4638      	mov	r0, r7
    fff6:	f007 ff29 	bl	17e4c <Fw::PortBase::isConnected() const>
    fffa:	b9c8      	cbnz	r0, 10030 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x64>
      Fw::TlmBuffer _tlmBuff;
    fffc:	4668      	mov	r0, sp
    fffe:	f006 ff85 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
   10002:	eeb0 0a48 	vmov.f32	s0, s16
   10006:	4668      	mov	r0, sp
   10008:	f7f0 fc96 	bl	938 <Fw::SerializeBufferBase::serialize(float)>
      FW_ASSERT(
   1000c:	b9d8      	cbnz	r0, 10046 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x7a>
      _id = this->getIdBase() + CHANNELID_CPU_15;
   1000e:	4620      	mov	r0, r4
   10010:	f001 ff70 	bl	11ef4 <Fw::PassiveComponentBase::getIdBase() const>
      this->m_Tlm_OutputPort[0].invoke(
   10014:	466b      	mov	r3, sp
   10016:	f100 0114 	add.w	r1, r0, #20
   1001a:	4632      	mov	r2, r6
   1001c:	4628      	mov	r0, r5
   1001e:	f007 f9bb 	bl	17398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>
    }
   10022:	4668      	mov	r0, sp
   10024:	f006 ff5a 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
  }
   10028:	b009      	add	sp, #36	; 0x24
   1002a:	ecbd 8b02 	vpop	{d8}
   1002e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        (_tlmTime ==  Fw::ZERO_TIME)
   10030:	4908      	ldr	r1, [pc, #32]	; (10054 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x88>)
   10032:	4630      	mov	r0, r6
   10034:	f007 fc82 	bl	1793c <Fw::Time::operator==(Fw::Time const&) const>
        this->m_Time_OutputPort[0].isConnected() &&
   10038:	2800      	cmp	r0, #0
   1003a:	d0df      	beq.n	fffc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x30>
        this->m_Time_OutputPort[0].invoke(_tlmTime);
   1003c:	4631      	mov	r1, r6
   1003e:	4638      	mov	r0, r7
   10040:	f007 fdbc 	bl	17bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>
   10044:	e7da      	b.n	fffc <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x30>
      FW_ASSERT(
   10046:	4601      	mov	r1, r0
   10048:	f240 5251 	movw	r2, #1361	; 0x551
   1004c:	4802      	ldr	r0, [pc, #8]	; (10058 <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x8c>)
   1004e:	f7f1 faeb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10052:	e7dc      	b.n	1000e <Svc::SystemResourcesComponentBase::tlmWrite_CPU_15(float, Fw::Time) const+0x42>
   10054:	2000c9b0 	.word	0x2000c9b0
   10058:	20001998 	.word	0x20001998

0001005c <Svc::SystemResourceEnabled::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= DISABLED) && (e <= ENABLED));
  }

  Fw::SerializeStatus SystemResourceEnabled ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   1005c:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   1005e:	7901      	ldrb	r1, [r0, #4]
   10060:	4618      	mov	r0, r3
   10062:	f7f0 bb61 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   10066:	bf00      	nop

00010068 <Svc::SystemResourceEnabled::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus SystemResourceEnabled ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   10068:	b510      	push	{r4, lr}
   1006a:	460a      	mov	r2, r1
   1006c:	b082      	sub	sp, #8
   1006e:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   10070:	a901      	add	r1, sp, #4
   10072:	4610      	mov	r0, r2
   10074:	f7f0 fe32 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   10078:	b938      	cbnz	r0, 1008a <Svc::SystemResourceEnabled::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
   1007a:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   1007e:	2a01      	cmp	r2, #1
      this->e = static_cast<T>(es);
   10080:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   10082:	bf94      	ite	ls
   10084:	2300      	movls	r3, #0
   10086:	2301      	movhi	r3, #1
   10088:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   1008a:	b002      	add	sp, #8
   1008c:	bd10      	pop	{r4, pc}
   1008e:	bf00      	nop

00010090 <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void SystemResourceEnabled ::
    toString(Fw::StringBase& sb) const
  {
   10090:	b570      	push	{r4, r5, r6, lr}
   10092:	b0a2      	sub	sp, #136	; 0x88
   10094:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   10096:	4e14      	ldr	r6, [pc, #80]	; (100e8 <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x58>)
   10098:	460d      	mov	r5, r1
   1009a:	4668      	mov	r0, sp
   1009c:	f7f1 f8c0 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   100a0:	4912      	ldr	r1, [pc, #72]	; (100ec <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x5c>)
   100a2:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   100a4:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   100a6:	f7f1 f923 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   100aa:	7923      	ldrb	r3, [r4, #4]
   100ac:	b18b      	cbz	r3, 100d2 <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x42>
   100ae:	2b01      	cmp	r3, #1
   100b0:	d014      	beq.n	100dc <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x4c>
   100b2:	490f      	ldr	r1, [pc, #60]	; (100f0 <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x60>)
   100b4:	4668      	mov	r0, sp
   100b6:	f7f1 f91b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   100ba:	7923      	ldrb	r3, [r4, #4]
   100bc:	aa01      	add	r2, sp, #4
   100be:	490d      	ldr	r1, [pc, #52]	; (100f4 <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x64>)
   100c0:	4628      	mov	r0, r5
   100c2:	f7f1 f8e3 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   100c6:	4668      	mov	r0, sp
   100c8:	9600      	str	r6, [sp, #0]
   100ca:	f7f1 f8b3 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   100ce:	b022      	add	sp, #136	; 0x88
   100d0:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   100d2:	4909      	ldr	r1, [pc, #36]	; (100f8 <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x68>)
   100d4:	4668      	mov	r0, sp
   100d6:	f7f1 f90b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   100da:	e7ee      	b.n	100ba <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x2a>
        (void)StringBase::operator=(src);
   100dc:	4907      	ldr	r1, [pc, #28]	; (100fc <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x6c>)
   100de:	4668      	mov	r0, sp
   100e0:	f7f1 f906 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   100e4:	e7e9      	b.n	100ba <Svc::SystemResourceEnabled::toString(Fw::StringBase&) const+0x2a>
   100e6:	bf00      	nop
   100e8:	200032dc 	.word	0x200032dc
   100ec:	20001d2c 	.word	0x20001d2c
   100f0:	20002464 	.word	0x20002464
   100f4:	20002470 	.word	0x20002470
   100f8:	200024e8 	.word	0x200024e8
   100fc:	200024e0 	.word	0x200024e0

00010100 <Svc::SystemResourceEnabled::~SystemResourceEnabled()>:
   10100:	4b03      	ldr	r3, [pc, #12]	; (10110 <Svc::SystemResourceEnabled::~SystemResourceEnabled()+0x10>)
   10102:	b510      	push	{r4, lr}
   10104:	4604      	mov	r4, r0
   10106:	6003      	str	r3, [r0, #0]
   10108:	f7f0 fa18 	bl	53c <Fw::Serializable::~Serializable()>
   1010c:	4620      	mov	r0, r4
   1010e:	bd10      	pop	{r4, pc}
   10110:	20003ce4 	.word	0x20003ce4

00010114 <Svc::SystemResourceEnabled::~SystemResourceEnabled()>:
   10114:	4b05      	ldr	r3, [pc, #20]	; (1012c <Svc::SystemResourceEnabled::~SystemResourceEnabled()+0x18>)
   10116:	b510      	push	{r4, lr}
   10118:	4604      	mov	r4, r0
   1011a:	6003      	str	r3, [r0, #0]
   1011c:	f7f0 fa0e 	bl	53c <Fw::Serializable::~Serializable()>
   10120:	2108      	movs	r1, #8
   10122:	4620      	mov	r0, r4
   10124:	f008 fdd4 	bl	18cd0 <operator delete(void*, unsigned int)>
   10128:	4620      	mov	r0, r4
   1012a:	bd10      	pop	{r4, pc}
   1012c:	20003ce4 	.word	0x20003ce4

00010130 <Svc::TlmChan::doHash(unsigned long)>:
}

TlmChan::~TlmChan() {}

NATIVE_UINT_TYPE TlmChan::doHash(FwChanIdType id) {
    return (id % TLMCHAN_HASH_MOD_VALUE) % TLMCHAN_NUM_TLM_HASH_SLOTS;
   10130:	4b08      	ldr	r3, [pc, #32]	; (10154 <Svc::TlmChan::doHash(unsigned long)+0x24>)
   10132:	4a09      	ldr	r2, [pc, #36]	; (10158 <Svc::TlmChan::doHash(unsigned long)+0x28>)
   10134:	fba3 0301 	umull	r0, r3, r3, r1
   10138:	099b      	lsrs	r3, r3, #6
   1013a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1013e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   10142:	1ac9      	subs	r1, r1, r3
   10144:	fba2 2301 	umull	r2, r3, r2, r1
   10148:	08db      	lsrs	r3, r3, #3
   1014a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
}
   1014e:	eba1 0043 	sub.w	r0, r1, r3, lsl #1
   10152:	4770      	bx	lr
   10154:	a57eb503 	.word	0xa57eb503
   10158:	cccccccd 	.word	0xcccccccd

0001015c <Svc::TlmChan::pingIn_handler(long, unsigned long)>:

void TlmChan::pingIn_handler(const NATIVE_INT_TYPE portNum, U32 key) {
    // return key
    this->pingOut_out(0, key);
   1015c:	2100      	movs	r1, #0
   1015e:	f000 be49 	b.w	10df4 <Svc::TlmChanComponentBase::pingOut_out(long, unsigned long)>
   10162:	bf00      	nop

00010164 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
    } else {  // requested entry may not be written yet; empty buffer
        val.resetSer();
    }
}

void TlmChan::TlmRecv_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time& timeTag, Fw::TlmBuffer& val) {
   10164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10168:	4698      	mov	r8, r3
    // Compute index for entry

    NATIVE_UINT_TYPE index = this->doHash(id);
   1016a:	6803      	ldr	r3, [r0, #0]
void TlmChan::TlmRecv_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time& timeTag, Fw::TlmBuffer& val) {
   1016c:	4616      	mov	r6, r2
   1016e:	4a56      	ldr	r2, [pc, #344]	; (102c8 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x164>)
    NATIVE_UINT_TYPE index = this->doHash(id);
   10170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
void TlmChan::TlmRecv_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time& timeTag, Fw::TlmBuffer& val) {
   10172:	4607      	mov	r7, r0
   10174:	f8dd 9020 	ldr.w	r9, [sp, #32]
   10178:	4293      	cmp	r3, r2
   1017a:	f040 8083 	bne.w	10284 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x120>
    return (id % TLMCHAN_HASH_MOD_VALUE) % TLMCHAN_NUM_TLM_HASH_SLOTS;
   1017e:	4a53      	ldr	r2, [pc, #332]	; (102cc <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x168>)
   10180:	4d53      	ldr	r5, [pc, #332]	; (102d0 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x16c>)
   10182:	fba2 3206 	umull	r3, r2, r2, r6
   10186:	0992      	lsrs	r2, r2, #6
   10188:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1018c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
   10190:	1ab2      	subs	r2, r6, r2
   10192:	fba5 3502 	umull	r3, r5, r5, r2
   10196:	08ed      	lsrs	r5, r5, #3
   10198:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1019c:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
    TlmEntry* entryToUse = nullptr;
    TlmEntry* prevEntry = nullptr;

    // Search to see if channel has already been stored or a bucket needs to be added
    if (this->m_tlmEntries[this->m_activeBuffer].slots[index]) {
   101a0:	f507 5a80 	add.w	sl, r7, #4096	; 0x1000
   101a4:	f240 232b 	movw	r3, #555	; 0x22b
   101a8:	f8da 26e0 	ldr.w	r2, [sl, #1760]	; 0x6e0
   101ac:	fb03 5302 	mla	r3, r3, r2, r5
   101b0:	f503 73b1 	add.w	r3, r3, #354	; 0x162
   101b4:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
   101b8:	2c00      	cmp	r4, #0
   101ba:	d03a      	beq.n	10232 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xce>
   101bc:	2520      	movs	r5, #32
   101be:	e000      	b.n	101c2 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x5e>
   101c0:	460c      	mov	r4, r1
        entryToUse = this->m_tlmEntries[this->m_activeBuffer].slots[index];
        for (NATIVE_UINT_TYPE bucket = 0; bucket < TLMCHAN_HASH_BUCKETS; bucket++) {
            if (entryToUse) {
                if (entryToUse->id == id) {  // found the matching entry
   101c2:	6823      	ldr	r3, [r4, #0]
   101c4:	42b3      	cmp	r3, r6
   101c6:	d023      	beq.n	10210 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xac>
        for (NATIVE_UINT_TYPE bucket = 0; bucket < TLMCHAN_HASH_BUCKETS; bucket++) {
   101c8:	3d01      	subs	r5, #1
                    break;
                } else {  // try next entry
                    prevEntry = entryToUse;
                    entryToUse = entryToUse->next;
   101ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        for (NATIVE_UINT_TYPE bucket = 0; bucket < TLMCHAN_HASH_BUCKETS; bucket++) {
   101cc:	d057      	beq.n	1027e <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x11a>
            if (entryToUse) {
   101ce:	2900      	cmp	r1, #0
   101d0:	d1f6      	bne.n	101c0 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x5c>
                }
            } else {
                // Make sure that we haven't run out of buckets
                FW_ASSERT(this->m_tlmEntries[this->m_activeBuffer].free < TLMCHAN_HASH_BUCKETS);
   101d2:	f640 05ac 	movw	r5, #2220	; 0x8ac
   101d6:	fb05 7302 	mla	r3, r5, r2, r7
   101da:	f8d3 1e30 	ldr.w	r1, [r3, #3632]	; 0xe30
   101de:	291f      	cmp	r1, #31
   101e0:	dc54      	bgt.n	1028c <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x128>
                // add new bucket from free list
                entryToUse =
                    &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   101e2:	f640 03ac 	movw	r3, #2220	; 0x8ac
                entryToUse =
   101e6:	eb01 1001 	add.w	r0, r1, r1, lsl #4
                    &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   101ea:	3101      	adds	r1, #1
                FW_ASSERT(prevEntry);
                prevEntry->next = entryToUse;
                // clear next pointer
                entryToUse->next = nullptr;
   101ec:	2500      	movs	r5, #0
                    &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   101ee:	fb02 f303 	mul.w	r3, r2, r3
                entryToUse =
   101f2:	f503 62b6 	add.w	r2, r3, #1456	; 0x5b0
   101f6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
                entryToUse->next = nullptr;
   101fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
                    &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   101fe:	443b      	add	r3, r7
                entryToUse =
   10200:	443a      	add	r2, r7
                    &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   10202:	f8c3 1e30 	str.w	r1, [r3, #3632]	; 0xe30
                entryToUse->next = nullptr;
   10206:	4438      	add	r0, r7
                prevEntry->next = entryToUse;
   10208:	63a2      	str	r2, [r4, #56]	; 0x38
                entryToUse =
   1020a:	4614      	mov	r4, r2
                entryToUse->next = nullptr;
   1020c:	f8c0 55e8 	str.w	r5, [r0, #1512]	; 0x5e8
        entryToUse->next = nullptr;
    }

    // copy into entry
    FW_ASSERT(entryToUse);
    entryToUse->used = true;
   10210:	2301      	movs	r3, #1
    entryToUse->id = id;
    entryToUse->updated = true;
    entryToUse->lastUpdate = timeTag;
   10212:	4641      	mov	r1, r8
   10214:	f104 0008 	add.w	r0, r4, #8
    entryToUse->id = id;
   10218:	6026      	str	r6, [r4, #0]
    entryToUse->used = true;
   1021a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    entryToUse->updated = true;
   1021e:	7123      	strb	r3, [r4, #4]
    entryToUse->lastUpdate = timeTag;
   10220:	f007 fb80 	bl	17924 <Fw::Time::operator=(Fw::Time const&)>
    entryToUse->buffer = val;
   10224:	4649      	mov	r1, r9
   10226:	f104 0018 	add.w	r0, r4, #24
}
   1022a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    entryToUse->buffer = val;
   1022e:	f006 be77 	b.w	16f20 <Fw::TlmBuffer::operator=(Fw::TlmBuffer const&)>
        FW_ASSERT(this->m_tlmEntries[this->m_activeBuffer].free < TLMCHAN_HASH_BUCKETS);
   10232:	f640 04ac 	movw	r4, #2220	; 0x8ac
   10236:	fb04 7302 	mla	r3, r4, r2, r7
   1023a:	f8d3 1e30 	ldr.w	r1, [r3, #3632]	; 0xe30
   1023e:	291f      	cmp	r1, #31
   10240:	dc2f      	bgt.n	102a2 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x13e>
            &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   10242:	f640 03ac 	movw	r3, #2220	; 0x8ac
        this->m_tlmEntries[this->m_activeBuffer].slots[index] =
   10246:	f240 242b 	movw	r4, #555	; 0x22b
            &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   1024a:	eb01 1001 	add.w	r0, r1, r1, lsl #4
   1024e:	3101      	adds	r1, #1
   10250:	fb02 f303 	mul.w	r3, r2, r3
        this->m_tlmEntries[this->m_activeBuffer].slots[index] =
   10254:	fb04 5502 	mla	r5, r4, r2, r5
            &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   10258:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
        this->m_tlmEntries[this->m_activeBuffer].slots[index] =
   1025c:	f505 75b1 	add.w	r5, r5, #354	; 0x162
            &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   10260:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        entryToUse->next = nullptr;
   10264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
            &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   10268:	443b      	add	r3, r7
   1026a:	443c      	add	r4, r7
   1026c:	f8c3 1e30 	str.w	r1, [r3, #3632]	; 0xe30
        entryToUse->next = nullptr;
   10270:	2300      	movs	r3, #0
        this->m_tlmEntries[this->m_activeBuffer].slots[index] =
   10272:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
        entryToUse->next = nullptr;
   10276:	4407      	add	r7, r0
   10278:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
   1027c:	e7c8      	b.n	10210 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xac>
    FW_ASSERT(entryToUse);
   1027e:	b1d9      	cbz	r1, 102b8 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x154>
   10280:	460c      	mov	r4, r1
   10282:	e7c5      	b.n	10210 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xac>
    NATIVE_UINT_TYPE index = this->doHash(id);
   10284:	4631      	mov	r1, r6
   10286:	4798      	blx	r3
   10288:	4605      	mov	r5, r0
   1028a:	e789      	b.n	101a0 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x3c>
                FW_ASSERT(this->m_tlmEntries[this->m_activeBuffer].free < TLMCHAN_HASH_BUCKETS);
   1028c:	2165      	movs	r1, #101	; 0x65
   1028e:	4811      	ldr	r0, [pc, #68]	; (102d4 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x170>)
   10290:	f7f1 f9bc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
                    &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   10294:	f8da 26e0 	ldr.w	r2, [sl, #1760]	; 0x6e0
   10298:	fb05 7502 	mla	r5, r5, r2, r7
   1029c:	f8d5 1e30 	ldr.w	r1, [r5, #3632]	; 0xe30
   102a0:	e79f      	b.n	101e2 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x7e>
        FW_ASSERT(this->m_tlmEntries[this->m_activeBuffer].free < TLMCHAN_HASH_BUCKETS);
   102a2:	2172      	movs	r1, #114	; 0x72
   102a4:	480b      	ldr	r0, [pc, #44]	; (102d4 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x170>)
   102a6:	f7f1 f9b1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
            &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
   102aa:	f8da 26e0 	ldr.w	r2, [sl, #1760]	; 0x6e0
   102ae:	fb04 7402 	mla	r4, r4, r2, r7
   102b2:	f8d4 1e30 	ldr.w	r1, [r4, #3632]	; 0xe30
   102b6:	e7c4      	b.n	10242 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xde>
    FW_ASSERT(entryToUse);
   102b8:	217b      	movs	r1, #123	; 0x7b
   102ba:	4806      	ldr	r0, [pc, #24]	; (102d4 <Svc::TlmChan::TlmRecv_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x170>)
   102bc:	f7f1 f9a6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    entryToUse->used = true;
   102c0:	f885 503c 	strb.w	r5, [r5, #60]	; 0x3c
   102c4:	deff      	udf	#255	; 0xff
   102c6:	bf00      	nop
   102c8:	00010131 	.word	0x00010131
   102cc:	a57eb503 	.word	0xa57eb503
   102d0:	cccccccd 	.word	0xcccccccd
   102d4:	20001c74 	.word	0x20001c74

000102d8 <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
void TlmChan::TlmGet_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time& timeTag, Fw::TlmBuffer& val) {
   102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102da:	461e      	mov	r6, r3
    NATIVE_UINT_TYPE index = this->doHash(id);
   102dc:	6803      	ldr	r3, [r0, #0]
void TlmChan::TlmGet_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time& timeTag, Fw::TlmBuffer& val) {
   102de:	4615      	mov	r5, r2
   102e0:	4a21      	ldr	r2, [pc, #132]	; (10368 <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x90>)
    NATIVE_UINT_TYPE index = this->doHash(id);
   102e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
void TlmChan::TlmGet_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time& timeTag, Fw::TlmBuffer& val) {
   102e4:	4604      	mov	r4, r0
   102e6:	9f06      	ldr	r7, [sp, #24]
   102e8:	4293      	cmp	r3, r2
   102ea:	d138      	bne.n	1035e <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x86>
    return (id % TLMCHAN_HASH_MOD_VALUE) % TLMCHAN_NUM_TLM_HASH_SLOTS;
   102ec:	4b1f      	ldr	r3, [pc, #124]	; (1036c <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x94>)
   102ee:	fba3 2305 	umull	r2, r3, r3, r5
   102f2:	4a1f      	ldr	r2, [pc, #124]	; (10370 <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x98>)
   102f4:	099b      	lsrs	r3, r3, #6
   102f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   102fa:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   102fe:	1aeb      	subs	r3, r5, r3
   10300:	fba2 1203 	umull	r1, r2, r2, r3
   10304:	08d2      	lsrs	r2, r2, #3
   10306:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1030a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    TlmEntry* entryToUse = this->m_tlmEntries[this->m_activeBuffer].slots[index];
   1030e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   10312:	f240 212b 	movw	r1, #555	; 0x22b
   10316:	f04f 0c20 	mov.w	ip, #32
   1031a:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
   1031e:	fb01 2203 	mla	r2, r1, r3, r2
   10322:	f502 72b1 	add.w	r2, r2, #354	; 0x162
   10326:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
        if (entryToUse) {  // If bucket exists, check id
   1032a:	b19c      	cbz	r4, 10354 <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x7c>
            if (entryToUse->id == id) {
   1032c:	6823      	ldr	r3, [r4, #0]
   1032e:	42ab      	cmp	r3, r5
   10330:	d004      	beq.n	1033c <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x64>
    for (NATIVE_UINT_TYPE bucket = 0; bucket < TLMCHAN_HASH_BUCKETS; bucket++) {
   10332:	f1bc 0c01 	subs.w	ip, ip, #1
                entryToUse = entryToUse->next;
   10336:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    for (NATIVE_UINT_TYPE bucket = 0; bucket < TLMCHAN_HASH_BUCKETS; bucket++) {
   10338:	d1f7      	bne.n	1032a <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x52>
    if (entryToUse) {
   1033a:	b15c      	cbz	r4, 10354 <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x7c>
        val = entryToUse->buffer;
   1033c:	f104 0118 	add.w	r1, r4, #24
   10340:	4638      	mov	r0, r7
   10342:	f006 fded 	bl	16f20 <Fw::TlmBuffer::operator=(Fw::TlmBuffer const&)>
        timeTag = entryToUse->lastUpdate;
   10346:	f104 0108 	add.w	r1, r4, #8
   1034a:	4630      	mov	r0, r6
}
   1034c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        timeTag = entryToUse->lastUpdate;
   10350:	f007 bae8 	b.w	17924 <Fw::Time::operator=(Fw::Time const&)>
        val.resetSer();
   10354:	4638      	mov	r0, r7
}
   10356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        val.resetSer();
   1035a:	f7f0 be4b 	b.w	ff4 <Fw::SerializeBufferBase::resetSer()>
    NATIVE_UINT_TYPE index = this->doHash(id);
   1035e:	4629      	mov	r1, r5
   10360:	4798      	blx	r3
   10362:	4602      	mov	r2, r0
   10364:	e7d3      	b.n	1030e <Svc::TlmChan::TlmGet_handler(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x36>
   10366:	bf00      	nop
   10368:	00010131 	.word	0x00010131
   1036c:	a57eb503 	.word	0xa57eb503
   10370:	cccccccd 	.word	0xcccccccd

00010374 <Svc::TlmChan::TlmChan(char const*)>:
TlmChan::TlmChan(const char* name) : TlmChanComponentBase(name), m_activeBuffer(0) {
   10374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10376:	4607      	mov	r7, r0
   10378:	f000 fb36 	bl	109e8 <Svc::TlmChanComponentBase::TlmChanComponentBase(char const*)>
   1037c:	4b27      	ldr	r3, [pc, #156]	; (1041c <Svc::TlmChan::TlmChan(char const*)+0xa8>)
   1037e:	f507 65b7 	add.w	r5, r7, #1464	; 0x5b8
   10382:	463c      	mov	r4, r7
   10384:	f607 6638 	addw	r6, r7, #3640	; 0xe38
   10388:	603b      	str	r3, [r7, #0]
    //!
    void pingIn_handler(const NATIVE_INT_TYPE portNum, /*!< The port number*/
                        U32 key                        /*!< Value to return to pinger*/
    );

    typedef struct tlmEntry {
   1038a:	4628      	mov	r0, r5
   1038c:	f007 fa90 	bl	178b0 <Fw::Time::Time()>
   10390:	f105 0010 	add.w	r0, r5, #16
        tlmEntry* next;             //!< pointer to next bucket in table
        bool used;                  //!< if entry has been used
        NATIVE_UINT_TYPE bucketNo;  //!< for testing
    } TlmEntry;

    struct TlmSet {
   10394:	3544      	adds	r5, #68	; 0x44
    typedef struct tlmEntry {
   10396:	f006 fdb9 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
    struct TlmSet {
   1039a:	42b5      	cmp	r5, r6
   1039c:	d1f5      	bne.n	1038a <Svc::TlmChan::TlmChan(char const*)+0x16>
   1039e:	f241 66e4 	movw	r6, #5860	; 0x16e4
   103a2:	f607 6564 	addw	r5, r7, #3684	; 0xe64
   103a6:	443e      	add	r6, r7
    typedef struct tlmEntry {
   103a8:	4628      	mov	r0, r5
   103aa:	f007 fa81 	bl	178b0 <Fw::Time::Time()>
   103ae:	f105 0010 	add.w	r0, r5, #16
    struct TlmSet {
   103b2:	3544      	adds	r5, #68	; 0x44
    typedef struct tlmEntry {
   103b4:	f006 fdaa 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
    struct TlmSet {
   103b8:	42ae      	cmp	r6, r5
   103ba:	d1f5      	bne.n	103a8 <Svc::TlmChan::TlmChan(char const*)+0x34>
   103bc:	2500      	movs	r5, #0
   103be:	f507 5680 	add.w	r6, r7, #4096	; 0x1000
        this->m_tlmEntries[0].slots[entry] = nullptr;
   103c2:	2228      	movs	r2, #40	; 0x28
   103c4:	f507 60b1 	add.w	r0, r7, #1416	; 0x588
   103c8:	4629      	mov	r1, r5
TlmChan::TlmChan(const char* name) : TlmChanComponentBase(name), m_activeBuffer(0) {
   103ca:	f8c6 56e0 	str.w	r5, [r6, #1760]	; 0x6e0
        this->m_tlmEntries[0].slots[entry] = nullptr;
   103ce:	f014 fc0d 	bl	24bec <memset>
        this->m_tlmEntries[1].slots[entry] = nullptr;
   103d2:	2228      	movs	r2, #40	; 0x28
   103d4:	4629      	mov	r1, r5
   103d6:	f607 6034 	addw	r0, r7, #3636	; 0xe34
   103da:	f014 fc07 	bl	24bec <memset>
        this->m_tlmEntries[0].buckets[entry].used = false;
   103de:	462b      	mov	r3, r5
        this->m_tlmEntries[0].buckets[entry].bucketNo = entry;
   103e0:	f8c4 55f0 	str.w	r5, [r4, #1520]	; 0x5f0
    for (NATIVE_UINT_TYPE entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   103e4:	3444      	adds	r4, #68	; 0x44
        this->m_tlmEntries[1].buckets[entry].bucketNo = entry;
   103e6:	f8c4 5e58 	str.w	r5, [r4, #3672]	; 0xe58
    for (NATIVE_UINT_TYPE entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   103ea:	3501      	adds	r5, #1
        this->m_tlmEntries[0].buckets[entry].used = false;
   103ec:	f884 35a8 	strb.w	r3, [r4, #1448]	; 0x5a8
    for (NATIVE_UINT_TYPE entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   103f0:	2d20      	cmp	r5, #32
        this->m_tlmEntries[0].buckets[entry].updated = false;
   103f2:	f884 3570 	strb.w	r3, [r4, #1392]	; 0x570
        this->m_tlmEntries[0].buckets[entry].next = nullptr;
   103f6:	f8c4 35a4 	str.w	r3, [r4, #1444]	; 0x5a4
        this->m_tlmEntries[0].buckets[entry].id = 0;
   103fa:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
        this->m_tlmEntries[1].buckets[entry].used = false;
   103fe:	f884 3e54 	strb.w	r3, [r4, #3668]	; 0xe54
        this->m_tlmEntries[1].buckets[entry].updated = false;
   10402:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
        this->m_tlmEntries[1].buckets[entry].next = nullptr;
   10406:	f8c4 3e50 	str.w	r3, [r4, #3664]	; 0xe50
        this->m_tlmEntries[1].buckets[entry].id = 0;
   1040a:	f8c4 3e18 	str.w	r3, [r4, #3608]	; 0xe18
    for (NATIVE_UINT_TYPE entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   1040e:	d1e7      	bne.n	103e0 <Svc::TlmChan::TlmChan(char const*)+0x6c>
    this->m_tlmEntries[0].free = 0;
   10410:	f8c7 3e30 	str.w	r3, [r7, #3632]	; 0xe30
}
   10414:	4638      	mov	r0, r7
    this->m_tlmEntries[1].free = 0;
   10416:	f8c6 36dc 	str.w	r3, [r6, #1756]	; 0x6dc
}
   1041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1041c:	20003eec 	.word	0x20003eec

00010420 <Svc::TlmChan::~TlmChan()>:
TlmChan::~TlmChan() {}
   10420:	b570      	push	{r4, r5, r6, lr}
   10422:	f241 6498 	movw	r4, #5784	; 0x1698
   10426:	4b12      	ldr	r3, [pc, #72]	; (10470 <Svc::TlmChan::~TlmChan()+0x50>)
   10428:	4606      	mov	r6, r0
   1042a:	f600 6518 	addw	r5, r0, #3608	; 0xe18
   1042e:	4404      	add	r4, r0
   10430:	6003      	str	r3, [r0, #0]
    typedef struct tlmEntry {
   10432:	f104 0018 	add.w	r0, r4, #24
   10436:	f006 fd51 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
   1043a:	f104 0008 	add.w	r0, r4, #8
    struct TlmSet {
   1043e:	3c44      	subs	r4, #68	; 0x44
    typedef struct tlmEntry {
   10440:	f007 f9de 	bl	17800 <Fw::Time::~Time()>
    struct TlmSet {
   10444:	42a5      	cmp	r5, r4
   10446:	d1f4      	bne.n	10432 <Svc::TlmChan::~TlmChan()+0x12>
   10448:	f506 6463 	add.w	r4, r6, #3632	; 0xe30
   1044c:	f506 65b6 	add.w	r5, r6, #1456	; 0x5b0
   10450:	3c44      	subs	r4, #68	; 0x44
    typedef struct tlmEntry {
   10452:	f104 0018 	add.w	r0, r4, #24
   10456:	f006 fd41 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
   1045a:	f104 0008 	add.w	r0, r4, #8
   1045e:	f007 f9cf 	bl	17800 <Fw::Time::~Time()>
    struct TlmSet {
   10462:	42a5      	cmp	r5, r4
   10464:	d1f4      	bne.n	10450 <Svc::TlmChan::~TlmChan()+0x30>
   10466:	4630      	mov	r0, r6
   10468:	f000 fcda 	bl	10e20 <Svc::TlmChanComponentBase::~TlmChanComponentBase()>
   1046c:	4630      	mov	r0, r6
   1046e:	bd70      	pop	{r4, r5, r6, pc}
   10470:	20003eec 	.word	0x20003eec

00010474 <Svc::TlmChan::~TlmChan()>:
   10474:	b570      	push	{r4, r5, r6, lr}
   10476:	f241 6498 	movw	r4, #5784	; 0x1698
   1047a:	4b15      	ldr	r3, [pc, #84]	; (104d0 <Svc::TlmChan::~TlmChan()+0x5c>)
   1047c:	4606      	mov	r6, r0
   1047e:	f600 6518 	addw	r5, r0, #3608	; 0xe18
   10482:	4404      	add	r4, r0
   10484:	6003      	str	r3, [r0, #0]
    typedef struct tlmEntry {
   10486:	f104 0018 	add.w	r0, r4, #24
   1048a:	f006 fd27 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
   1048e:	f104 0008 	add.w	r0, r4, #8
    struct TlmSet {
   10492:	3c44      	subs	r4, #68	; 0x44
    typedef struct tlmEntry {
   10494:	f007 f9b4 	bl	17800 <Fw::Time::~Time()>
    struct TlmSet {
   10498:	42a5      	cmp	r5, r4
   1049a:	d1f4      	bne.n	10486 <Svc::TlmChan::~TlmChan()+0x12>
   1049c:	f506 6463 	add.w	r4, r6, #3632	; 0xe30
   104a0:	f506 65b6 	add.w	r5, r6, #1456	; 0x5b0
   104a4:	3c44      	subs	r4, #68	; 0x44
    typedef struct tlmEntry {
   104a6:	f104 0018 	add.w	r0, r4, #24
   104aa:	f006 fd17 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
   104ae:	f104 0008 	add.w	r0, r4, #8
   104b2:	f007 f9a5 	bl	17800 <Fw::Time::~Time()>
    struct TlmSet {
   104b6:	42a5      	cmp	r5, r4
   104b8:	d1f4      	bne.n	104a4 <Svc::TlmChan::~TlmChan()+0x30>
   104ba:	4630      	mov	r0, r6
   104bc:	f000 fcb0 	bl	10e20 <Svc::TlmChanComponentBase::~TlmChanComponentBase()>
   104c0:	4630      	mov	r0, r6
   104c2:	f241 61e8 	movw	r1, #5864	; 0x16e8
   104c6:	f008 fc03 	bl	18cd0 <operator delete(void*, unsigned int)>
   104ca:	4630      	mov	r0, r6
   104cc:	bd70      	pop	{r4, r5, r6, pc}
   104ce:	bf00      	nop
   104d0:	20003eec 	.word	0x20003eec

000104d4 <Svc::TlmChan::Run_handler(long, unsigned long)>:

void TlmChan::Run_handler(NATIVE_INT_TYPE portNum, U32 context) {
   104d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Only write packets if connected
    if (not this->isConnected_PktSend_OutputPort(0)) {
   104d8:	2100      	movs	r1, #0
void TlmChan::Run_handler(NATIVE_INT_TYPE portNum, U32 context) {
   104da:	4683      	mov	fp, r0
   104dc:	ed2d 8b02 	vpush	{d8}
   104e0:	b0a7      	sub	sp, #156	; 0x9c
    if (not this->isConnected_PktSend_OutputPort(0)) {
   104e2:	f000 faa7 	bl	10a34 <Svc::TlmChanComponentBase::isConnected_PktSend_OutputPort(long)>
   104e6:	2800      	cmp	r0, #0
   104e8:	d071      	beq.n	105ce <Svc::TlmChan::Run_handler(long, unsigned long)+0xfa>
        return;
    }

    // lock mutex long enough to modify active telemetry buffer
    // so the data can be read without worrying about updates
    this->lock();
   104ea:	f8db 3000 	ldr.w	r3, [fp]
    this->m_activeBuffer = 1 - this->m_activeBuffer;
   104ee:	f50b 5a80 	add.w	sl, fp, #4096	; 0x1000
    this->lock();
   104f2:	4658      	mov	r0, fp
   104f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   104f6:	4798      	blx	r3
    this->m_activeBuffer = 1 - this->m_activeBuffer;
   104f8:	f8da 36e0 	ldr.w	r3, [sl, #1760]	; 0x6e0
   104fc:	f640 01ac 	movw	r1, #2220	; 0x8ac
   10500:	f50b 6208 	add.w	r2, fp, #2176	; 0x880
   10504:	f1c3 0301 	rsb	r3, r3, #1
   10508:	fb03 f101 	mul.w	r1, r3, r1
   1050c:	f8ca 36e0 	str.w	r3, [sl, #1760]	; 0x6e0
    // set activeBuffer to not updated
    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   10510:	440a      	add	r2, r1
   10512:	eb0b 0301 	add.w	r3, fp, r1
        this->m_tlmEntries[this->m_activeBuffer].buckets[entry].updated = false;
   10516:	2100      	movs	r1, #0
   10518:	f883 15b4 	strb.w	r1, [r3, #1460]	; 0x5b4
    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   1051c:	3344      	adds	r3, #68	; 0x44
   1051e:	4293      	cmp	r3, r2
   10520:	d1fa      	bne.n	10518 <Svc::TlmChan::Run_handler(long, unsigned long)+0x44>
    }
    this->unLock();
   10522:	f8db 3000 	ldr.w	r3, [fp]
   10526:	4658      	mov	r0, fp

    // go through each entry and send a packet if it has been updated
    Fw::TlmPacket pkt;
    pkt.resetPktSer();
   10528:	f04f 0800 	mov.w	r8, #0
    this->unLock();
   1052c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1052e:	4798      	blx	r3
    Fw::TlmPacket pkt;
   10530:	4668      	mov	r0, sp
   10532:	f006 fd0f 	bl	16f54 <Fw::TlmPacket::TlmPacket()>
    pkt.resetPktSer();
   10536:	4668      	mov	r0, sp

    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   10538:	4645      	mov	r5, r8
    pkt.resetPktSer();
   1053a:	f006 fd23 	bl	16f84 <Fw::TlmPacket::resetPktSer()>
    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   1053e:	e004      	b.n	1054a <Svc::TlmChan::Run_handler(long, unsigned long)+0x76>
   10540:	3501      	adds	r5, #1
   10542:	f108 0844 	add.w	r8, r8, #68	; 0x44
   10546:	2d20      	cmp	r5, #32
   10548:	d03a      	beq.n	105c0 <Svc::TlmChan::Run_handler(long, unsigned long)+0xec>
        TlmEntry* p_entry = &this->m_tlmEntries[1 - this->m_activeBuffer].buckets[entry];
   1054a:	f8da 66e0 	ldr.w	r6, [sl, #1760]	; 0x6e0
        if ((p_entry->updated) && (p_entry->used)) {
   1054e:	f640 03ac 	movw	r3, #2220	; 0x8ac
   10552:	eb05 1405 	add.w	r4, r5, r5, lsl #4
        TlmEntry* p_entry = &this->m_tlmEntries[1 - this->m_activeBuffer].buckets[entry];
   10556:	f1c6 0601 	rsb	r6, r6, #1
        if ((p_entry->updated) && (p_entry->used)) {
   1055a:	ea4f 1905 	mov.w	r9, r5, lsl #4
   1055e:	fb03 f706 	mul.w	r7, r3, r6
   10562:	eb07 0484 	add.w	r4, r7, r4, lsl #2
   10566:	445c      	add	r4, fp
   10568:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
   1056c:	2b00      	cmp	r3, #0
   1056e:	d0e7      	beq.n	10540 <Svc::TlmChan::Run_handler(long, unsigned long)+0x6c>
   10570:	f894 35ec 	ldrb.w	r3, [r4, #1516]	; 0x5ec
   10574:	2b00      	cmp	r3, #0
   10576:	d0e3      	beq.n	10540 <Svc::TlmChan::Run_handler(long, unsigned long)+0x6c>
            Fw::SerializeStatus stat = pkt.addValue(p_entry->id, p_entry->lastUpdate, p_entry->buffer);
   10578:	4447      	add	r7, r8
   1057a:	f8d4 15b0 	ldr.w	r1, [r4, #1456]	; 0x5b0
   1057e:	4668      	mov	r0, sp
   10580:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
   10584:	f507 67b9 	add.w	r7, r7, #1480	; 0x5c8
   10588:	445f      	add	r7, fp
   1058a:	eb0b 0203 	add.w	r2, fp, r3
   1058e:	463b      	mov	r3, r7
   10590:	ee08 2a10 	vmov	s16, r2
   10594:	f006 fd36 	bl	17004 <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)>

            // check to see if this packet is full, if so, send it
            if (Fw::FW_SERIALIZE_NO_ROOM_LEFT == stat) {
   10598:	2802      	cmp	r0, #2
   1059a:	d023      	beq.n	105e4 <Svc::TlmChan::Run_handler(long, unsigned long)+0x110>
                // add entry to new packet
                stat = pkt.addValue(p_entry->id, p_entry->lastUpdate, p_entry->buffer);
                // if this doesn't work, that means packet isn't big enough for
                // even one channel, so assert
                FW_ASSERT(Fw::FW_SERIALIZE_OK == stat, static_cast<NATIVE_INT_TYPE>(stat));
            } else if (Fw::FW_SERIALIZE_OK == stat) {
   1059c:	b9e0      	cbnz	r0, 105d8 <Svc::TlmChan::Run_handler(long, unsigned long)+0x104>
            } else  // any other status is an assert, since it shouldn't happen
            {
                FW_ASSERT(0, static_cast<NATIVE_INT_TYPE>(stat));
            }
            // flag as updated
            p_entry->updated = false;
   1059e:	f640 03ac 	movw	r3, #2220	; 0x8ac
   105a2:	44a9      	add	r9, r5
    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   105a4:	3501      	adds	r5, #1
   105a6:	f108 0844 	add.w	r8, r8, #68	; 0x44
            p_entry->updated = false;
   105aa:	fb03 f606 	mul.w	r6, r3, r6
   105ae:	f04f 0300 	mov.w	r3, #0
    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   105b2:	2d20      	cmp	r5, #32
            p_entry->updated = false;
   105b4:	eb06 0689 	add.w	r6, r6, r9, lsl #2
   105b8:	445e      	add	r6, fp
   105ba:	f886 35b4 	strb.w	r3, [r6, #1460]	; 0x5b4
    for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
   105be:	d1c4      	bne.n	1054a <Svc::TlmChan::Run_handler(long, unsigned long)+0x76>
        }  // end if entry was updated
    }      // end for each entry

    // send remnant entries
    if (pkt.getNumEntries() > 0) {
   105c0:	4668      	mov	r0, sp
   105c2:	f006 fcf9 	bl	16fb8 <Fw::TlmPacket::getNumEntries()>
   105c6:	bb48      	cbnz	r0, 1061c <Svc::TlmChan::Run_handler(long, unsigned long)+0x148>
        this->PktSend_out(0, pkt.getBuffer(), 0);
    }
}  // end run handler
   105c8:	4668      	mov	r0, sp
   105ca:	f006 fcfb 	bl	16fc4 <Fw::TlmPacket::~TlmPacket()>
   105ce:	b027      	add	sp, #156	; 0x9c
   105d0:	ecbd 8b02 	vpop	{d8}
   105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                FW_ASSERT(0, static_cast<NATIVE_INT_TYPE>(stat));
   105d8:	4601      	mov	r1, r0
   105da:	22aa      	movs	r2, #170	; 0xaa
   105dc:	4816      	ldr	r0, [pc, #88]	; (10638 <Svc::TlmChan::Run_handler(long, unsigned long)+0x164>)
   105de:	f7f1 f823 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   105e2:	e7dc      	b.n	1059e <Svc::TlmChan::Run_handler(long, unsigned long)+0xca>
                this->PktSend_out(0, pkt.getBuffer(), 0);
   105e4:	4668      	mov	r0, sp
   105e6:	f006 fceb 	bl	16fc0 <Fw::TlmPacket::getBuffer()>
   105ea:	2300      	movs	r3, #0
   105ec:	4602      	mov	r2, r0
   105ee:	4658      	mov	r0, fp
   105f0:	4619      	mov	r1, r3
   105f2:	f000 fbe7 	bl	10dc4 <Svc::TlmChanComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)>
                pkt.resetPktSer();
   105f6:	4668      	mov	r0, sp
   105f8:	f006 fcc4 	bl	16f84 <Fw::TlmPacket::resetPktSer()>
                stat = pkt.addValue(p_entry->id, p_entry->lastUpdate, p_entry->buffer);
   105fc:	463b      	mov	r3, r7
   105fe:	ee18 2a10 	vmov	r2, s16
   10602:	f8d4 15b0 	ldr.w	r1, [r4, #1456]	; 0x5b0
   10606:	4668      	mov	r0, sp
   10608:	f006 fcfc 	bl	17004 <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)>
                FW_ASSERT(Fw::FW_SERIALIZE_OK == stat, static_cast<NATIVE_INT_TYPE>(stat));
   1060c:	2800      	cmp	r0, #0
   1060e:	d0c6      	beq.n	1059e <Svc::TlmChan::Run_handler(long, unsigned long)+0xca>
   10610:	4601      	mov	r1, r0
   10612:	22a5      	movs	r2, #165	; 0xa5
   10614:	4808      	ldr	r0, [pc, #32]	; (10638 <Svc::TlmChan::Run_handler(long, unsigned long)+0x164>)
   10616:	f7f1 f807 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1061a:	e7c0      	b.n	1059e <Svc::TlmChan::Run_handler(long, unsigned long)+0xca>
        this->PktSend_out(0, pkt.getBuffer(), 0);
   1061c:	4668      	mov	r0, sp
   1061e:	f006 fccf 	bl	16fc0 <Fw::TlmPacket::getBuffer()>
   10622:	2300      	movs	r3, #0
   10624:	4602      	mov	r2, r0
   10626:	4658      	mov	r0, fp
   10628:	4619      	mov	r1, r3
   1062a:	f000 fbcb 	bl	10dc4 <Svc::TlmChanComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)>
}  // end run handler
   1062e:	4668      	mov	r0, sp
   10630:	f006 fcc8 	bl	16fc4 <Fw::TlmPacket::~TlmPacket()>
   10634:	e7cb      	b.n	105ce <Svc::TlmChan::Run_handler(long, unsigned long)+0xfa>
   10636:	bf00      	nop
   10638:	20001c74 	.word	0x20001c74

0001063c <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::getBuffCapacity() const>:
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }
   1063c:	200c      	movs	r0, #12
   1063e:	4770      	bx	lr

00010640 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   10640:	300c      	adds	r0, #12
   10642:	4770      	bx	lr

00010644 <Svc::TlmChanComponentBase::Run_preMsgHook(long, unsigned long)>:
        FwIndexType portNum,
        U32 context
    )
  {
    // Default: no-op
  }
   10644:	4770      	bx	lr
   10646:	bf00      	nop

00010648 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()>:
    class ComponentIpcSerializableBuffer :
   10648:	4b03      	ldr	r3, [pc, #12]	; (10658 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()+0x10>)
   1064a:	b510      	push	{r4, lr}
   1064c:	4604      	mov	r4, r0
   1064e:	6003      	str	r3, [r0, #0]
   10650:	f7ef ff7e 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   10654:	4620      	mov	r0, r4
   10656:	bd10      	pop	{r4, pc}
   10658:	200039a4 	.word	0x200039a4

0001065c <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()>:
   1065c:	4b05      	ldr	r3, [pc, #20]	; (10674 <Svc::(anonymous namespace)::ComponentIpcSerializableBuffer::~ComponentIpcSerializableBuffer()+0x18>)
   1065e:	b510      	push	{r4, lr}
   10660:	4604      	mov	r4, r0
   10662:	6003      	str	r3, [r0, #0]
   10664:	f7ef ff74 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   10668:	2118      	movs	r1, #24
   1066a:	4620      	mov	r0, r4
   1066c:	f008 fb30 	bl	18cd0 <operator delete(void*, unsigned int)>
   10670:	4620      	mov	r0, r4
   10672:	bd10      	pop	{r4, pc}
   10674:	200039a4 	.word	0x200039a4

00010678 <Svc::TlmChanComponentBase::lock()>:
  // ----------------------------------------------------------------------

  void TlmChanComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
   10678:	f500 60a6 	add.w	r0, r0, #1328	; 0x530
   1067c:	f003 b8fc 	b.w	13878 <Os::Mutex::lock()>

00010680 <Svc::TlmChanComponentBase::unLock()>:
  }

  void TlmChanComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
   10680:	f500 60a6 	add.w	r0, r0, #1328	; 0x530
   10684:	f003 b94c 	b.w	13920 <Os::Mutex::unLock()>

00010688 <Svc::TlmChanComponentBase::doDispatch()>:
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus TlmChanComponentBase ::
    doDispatch()
  {
   10688:	b570      	push	{r4, r5, r6, lr}
   1068a:	b08a      	sub	sp, #40	; 0x28
   1068c:	4604      	mov	r4, r0
    class ComponentIpcSerializableBuffer :
   1068e:	4e39      	ldr	r6, [pc, #228]	; (10774 <Svc::TlmChanComponentBase::doDispatch()+0xec>)
   10690:	a804      	add	r0, sp, #16
   10692:	f7ef ff55 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    ComponentIpcSerializableBuffer msg;
    FwQueuePriorityType priority = 0;
   10696:	2200      	movs	r2, #0

    Os::Queue::Status msgStatus = this->m_queue.receive(
   10698:	466b      	mov	r3, sp
   1069a:	a904      	add	r1, sp, #16
   1069c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    class ComponentIpcSerializableBuffer :
   106a0:	9604      	str	r6, [sp, #16]
    FwQueuePriorityType priority = 0;
   106a2:	9200      	str	r2, [sp, #0]
    Os::Queue::Status msgStatus = this->m_queue.receive(
   106a4:	f001 fb6c 	bl	11d80 <Os::Queue::receive(Fw::SerializeBufferBase&, Os::QueueInterface::BlockingType, long&)>
      msg,
      Os::Queue::BLOCKING,
      priority
    );
    FW_ASSERT(
   106a8:	2800      	cmp	r0, #0
   106aa:	d147      	bne.n	1073c <Svc::TlmChanComponentBase::doDispatch()+0xb4>
      msgStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(msgStatus)
    );

    // Reset to beginning of buffer
    msg.resetDeser();
   106ac:	a804      	add	r0, sp, #16
   106ae:	f7f0 fca5 	bl	ffc <Fw::SerializeBufferBase::resetDeser()>

    FwEnumStoreType desMsg = 0;
   106b2:	2300      	movs	r3, #0
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
   106b4:	a901      	add	r1, sp, #4
   106b6:	a804      	add	r0, sp, #16
    FwEnumStoreType desMsg = 0;
   106b8:	9301      	str	r3, [sp, #4]
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
   106ba:	f7f0 fb0f 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    FW_ASSERT(
   106be:	2800      	cmp	r0, #0
   106c0:	d143      	bne.n	1074a <Svc::TlmChanComponentBase::doDispatch()+0xc2>
      static_cast<FwAssertArgType>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == TLMCHAN_COMPONENT_EXIT) {
   106c2:	f89d 5004 	ldrb.w	r5, [sp, #4]
   106c6:	2d00      	cmp	r5, #0
   106c8:	d036      	beq.n	10738 <Svc::TlmChanComponentBase::doDispatch()+0xb0>
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
   106ca:	2300      	movs	r3, #0
    deserStatus = msg.deserialize(portNum);
   106cc:	a902      	add	r1, sp, #8
   106ce:	a804      	add	r0, sp, #16
    FwIndexType portNum = 0;
   106d0:	9302      	str	r3, [sp, #8]
    deserStatus = msg.deserialize(portNum);
   106d2:	f7f0 fb03 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    FW_ASSERT(
   106d6:	bb30      	cbnz	r0, 10726 <Svc::TlmChanComponentBase::doDispatch()+0x9e>
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    switch (msgType) {
   106d8:	2d01      	cmp	r5, #1
   106da:	d017      	beq.n	1070c <Svc::TlmChanComponentBase::doDispatch()+0x84>
   106dc:	2d02      	cmp	r5, #2
   106de:	d007      	beq.n	106f0 <Svc::TlmChanComponentBase::doDispatch()+0x68>
   106e0:	2402      	movs	r4, #2
    class ComponentIpcSerializableBuffer :
   106e2:	a804      	add	r0, sp, #16
   106e4:	9604      	str	r6, [sp, #16]
   106e6:	f7ef ff33 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }
   106ea:	4620      	mov	r0, r4
   106ec:	b00a      	add	sp, #40	; 0x28
   106ee:	bd70      	pop	{r4, r5, r6, pc}
        deserStatus = msg.deserialize(key);
   106f0:	a903      	add	r1, sp, #12
   106f2:	a804      	add	r0, sp, #16
   106f4:	f7f0 fae4 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
   106f8:	2800      	cmp	r0, #0
   106fa:	d134      	bne.n	10766 <Svc::TlmChanComponentBase::doDispatch()+0xde>
        this->pingIn_handler(
   106fc:	6823      	ldr	r3, [r4, #0]
   106fe:	4620      	mov	r0, r4
   10700:	9a03      	ldr	r2, [sp, #12]
    return MSG_DISPATCH_OK;
   10702:	2400      	movs	r4, #0
        this->pingIn_handler(
   10704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10706:	9902      	ldr	r1, [sp, #8]
   10708:	4798      	blx	r3
        break;
   1070a:	e7ea      	b.n	106e2 <Svc::TlmChanComponentBase::doDispatch()+0x5a>
        deserStatus = msg.deserialize(context);
   1070c:	a903      	add	r1, sp, #12
   1070e:	a804      	add	r0, sp, #16
   10710:	f7f0 fad6 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        FW_ASSERT(
   10714:	bb00      	cbnz	r0, 10758 <Svc::TlmChanComponentBase::doDispatch()+0xd0>
        this->Run_handler(
   10716:	6823      	ldr	r3, [r4, #0]
   10718:	4620      	mov	r0, r4
   1071a:	9a03      	ldr	r2, [sp, #12]
    return MSG_DISPATCH_OK;
   1071c:	2400      	movs	r4, #0
        this->Run_handler(
   1071e:	69db      	ldr	r3, [r3, #28]
   10720:	9902      	ldr	r1, [sp, #8]
   10722:	4798      	blx	r3
        break;
   10724:	e7dd      	b.n	106e2 <Svc::TlmChanComponentBase::doDispatch()+0x5a>
    FW_ASSERT(
   10726:	4601      	mov	r1, r0
   10728:	f44f 7233 	mov.w	r2, #716	; 0x2cc
   1072c:	4812      	ldr	r0, [pc, #72]	; (10778 <Svc::TlmChanComponentBase::doDispatch()+0xf0>)
   1072e:	f7f0 ff7b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    switch (msgType) {
   10732:	2d01      	cmp	r5, #1
   10734:	d1d2      	bne.n	106dc <Svc::TlmChanComponentBase::doDispatch()+0x54>
   10736:	e7e9      	b.n	1070c <Svc::TlmChanComponentBase::doDispatch()+0x84>
      return MSG_DISPATCH_EXIT;
   10738:	2403      	movs	r4, #3
   1073a:	e7d2      	b.n	106e2 <Svc::TlmChanComponentBase::doDispatch()+0x5a>
    FW_ASSERT(
   1073c:	4601      	mov	r1, r0
   1073e:	f240 22b5 	movw	r2, #693	; 0x2b5
   10742:	480d      	ldr	r0, [pc, #52]	; (10778 <Svc::TlmChanComponentBase::doDispatch()+0xf0>)
   10744:	f7f0 ff70 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10748:	e7b0      	b.n	106ac <Svc::TlmChanComponentBase::doDispatch()+0x24>
    FW_ASSERT(
   1074a:	4601      	mov	r1, r0
   1074c:	f240 22bf 	movw	r2, #703	; 0x2bf
   10750:	4809      	ldr	r0, [pc, #36]	; (10778 <Svc::TlmChanComponentBase::doDispatch()+0xf0>)
   10752:	f7f0 ff69 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10756:	e7b4      	b.n	106c2 <Svc::TlmChanComponentBase::doDispatch()+0x3a>
        FW_ASSERT(
   10758:	4601      	mov	r1, r0
   1075a:	f240 22d7 	movw	r2, #727	; 0x2d7
   1075e:	4806      	ldr	r0, [pc, #24]	; (10778 <Svc::TlmChanComponentBase::doDispatch()+0xf0>)
   10760:	f7f0 ff62 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10764:	e7d7      	b.n	10716 <Svc::TlmChanComponentBase::doDispatch()+0x8e>
        FW_ASSERT(
   10766:	4601      	mov	r1, r0
   10768:	f240 22e9 	movw	r2, #745	; 0x2e9
   1076c:	4802      	ldr	r0, [pc, #8]	; (10778 <Svc::TlmChanComponentBase::doDispatch()+0xf0>)
   1076e:	f7f0 ff5b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10772:	e7c3      	b.n	106fc <Svc::TlmChanComponentBase::doDispatch()+0x74>
   10774:	200039a4 	.word	0x200039a4
   10778:	200013b8 	.word	0x200013b8

0001077c <Svc::TlmChanComponentBase::init(unsigned long, long)>:
  {
   1077c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10780:	4604      	mov	r4, r0
   10782:	b097      	sub	sp, #92	; 0x5c
   10784:	4689      	mov	r9, r1
    Fw::ActiveComponentBase::init(instance);
   10786:	4611      	mov	r1, r2
      this->m_Run_InputPort[port].init();
   10788:	f504 7725 	add.w	r7, r4, #660	; 0x294
    Fw::ActiveComponentBase::init(instance);
   1078c:	f000 fe46 	bl	1141c <Fw::ActiveComponentBase::init(long)>
    ObjectName() : StringBase() { *this = ""; }
   10790:	4d6b      	ldr	r5, [pc, #428]	; (10940 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1c4>)
    const char* toChar() const { return this->m_buf; }
   10792:	f104 0608 	add.w	r6, r4, #8
      this->m_Run_InputPort[port].init();
   10796:	4638      	mov	r0, r7
      this->m_TlmGet_InputPort[port].init();
   10798:	f504 7841 	add.w	r8, r4, #772	; 0x304
      this->m_Run_InputPort[port].init();
   1079c:	f000 fc8e 	bl	110bc <Svc::InputSchedPort::init()>
      this->m_Run_InputPort[port].addCallComp(
   107a0:	4a68      	ldr	r2, [pc, #416]	; (10944 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1c8>)
   107a2:	4638      	mov	r0, r7
   107a4:	4621      	mov	r1, r4
   107a6:	f000 fbed 	bl	10f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_Run_InputPort[port].setPortNum(port);
   107aa:	2100      	movs	r1, #0
   107ac:	4638      	mov	r0, r7
   107ae:	f007 fa91 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
   107b2:	4668      	mov	r0, sp
   107b4:	f7f0 fd34 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   107b8:	4963      	ldr	r1, [pc, #396]	; (10948 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1cc>)
   107ba:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
   107bc:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
   107be:	f7f0 fd97 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
   107c2:	2300      	movs	r3, #0
   107c4:	4632      	mov	r2, r6
   107c6:	4961      	ldr	r1, [pc, #388]	; (1094c <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1d0>)
   107c8:	4668      	mov	r0, sp
   107ca:	f7f0 fd5f 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_Run_InputPort[port].setObjName(portName.toChar());
   107ce:	a901      	add	r1, sp, #4
   107d0:	4638      	mov	r0, r7
      this->m_TlmRecv_InputPort[port].init();
   107d2:	f504 775d 	add.w	r7, r4, #884	; 0x374
      this->m_Run_InputPort[port].setObjName(portName.toChar());
   107d6:	f007 fbe3 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
   107da:	4668      	mov	r0, sp
   107dc:	9500      	str	r5, [sp, #0]
   107de:	f7f0 fd29 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_TlmGet_InputPort[port].init();
   107e2:	4640      	mov	r0, r8
   107e4:	f006 fcdc 	bl	171a0 <Fw::InputTlmGetPort::init()>
      this->m_TlmGet_InputPort[port].addCallComp(
   107e8:	4a59      	ldr	r2, [pc, #356]	; (10950 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1d4>)
   107ea:	4640      	mov	r0, r8
   107ec:	4621      	mov	r1, r4
   107ee:	f006 fcbd 	bl	1716c <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))>
      this->m_TlmGet_InputPort[port].setPortNum(port);
   107f2:	2100      	movs	r1, #0
   107f4:	4640      	mov	r0, r8
   107f6:	f007 fa6d 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
   107fa:	4668      	mov	r0, sp
   107fc:	f7f0 fd10 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   10800:	4951      	ldr	r1, [pc, #324]	; (10948 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1cc>)
   10802:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
   10804:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
   10806:	f7f0 fd73 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
   1080a:	2300      	movs	r3, #0
   1080c:	4632      	mov	r2, r6
   1080e:	4951      	ldr	r1, [pc, #324]	; (10954 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1d8>)
   10810:	4668      	mov	r0, sp
   10812:	f7f0 fd3b 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_TlmGet_InputPort[port].setObjName(portName.toChar());
   10816:	a901      	add	r1, sp, #4
   10818:	4640      	mov	r0, r8
      this->m_PktSend_OutputPort[port].init();
   1081a:	f204 4854 	addw	r8, r4, #1108	; 0x454
      this->m_TlmGet_InputPort[port].setObjName(portName.toChar());
   1081e:	f007 fbbf 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
   10822:	4668      	mov	r0, sp
   10824:	9500      	str	r5, [sp, #0]
   10826:	f7f0 fd05 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_TlmRecv_InputPort[port].init();
   1082a:	4638      	mov	r0, r7
   1082c:	f006 fe12 	bl	17454 <Fw::InputTlmPort::init()>
      this->m_TlmRecv_InputPort[port].addCallComp(
   10830:	4a49      	ldr	r2, [pc, #292]	; (10958 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1dc>)
   10832:	4638      	mov	r0, r7
   10834:	4621      	mov	r1, r4
   10836:	f006 fd53 	bl	172e0 <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))>
      this->m_TlmRecv_InputPort[port].setPortNum(port);
   1083a:	2100      	movs	r1, #0
   1083c:	4638      	mov	r0, r7
   1083e:	f007 fa49 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
   10842:	4668      	mov	r0, sp
   10844:	f7f0 fcec 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   10848:	493f      	ldr	r1, [pc, #252]	; (10948 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1cc>)
   1084a:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
   1084c:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
   1084e:	f7f0 fd4f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
   10852:	2300      	movs	r3, #0
   10854:	4632      	mov	r2, r6
   10856:	4941      	ldr	r1, [pc, #260]	; (1095c <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1e0>)
   10858:	4668      	mov	r0, sp
   1085a:	f7f0 fd17 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_TlmRecv_InputPort[port].setObjName(portName.toChar());
   1085e:	a901      	add	r1, sp, #4
   10860:	4638      	mov	r0, r7
      this->m_pingIn_InputPort[port].init();
   10862:	f504 7779 	add.w	r7, r4, #996	; 0x3e4
      this->m_TlmRecv_InputPort[port].setObjName(portName.toChar());
   10866:	f007 fb9b 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
   1086a:	4668      	mov	r0, sp
   1086c:	9500      	str	r5, [sp, #0]
   1086e:	f7f0 fce1 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_pingIn_InputPort[port].init();
   10872:	4638      	mov	r0, r7
   10874:	f000 fd30 	bl	112d8 <Svc::InputPingPort::init()>
      this->m_pingIn_InputPort[port].addCallComp(
   10878:	4a39      	ldr	r2, [pc, #228]	; (10960 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1e4>)
   1087a:	4638      	mov	r0, r7
   1087c:	4621      	mov	r1, r4
   1087e:	f000 fc9f 	bl	111c0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>
      this->m_pingIn_InputPort[port].setPortNum(port);
   10882:	2100      	movs	r1, #0
   10884:	4638      	mov	r0, r7
   10886:	f007 fa25 	bl	17cd4 <Fw::InputPortBase::setPortNum(long)>
    ObjectName() : StringBase() { *this = ""; }
   1088a:	4668      	mov	r0, sp
   1088c:	f7f0 fcc8 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   10890:	492d      	ldr	r1, [pc, #180]	; (10948 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1cc>)
   10892:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
   10894:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
   10896:	f7f0 fd2b 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
   1089a:	2300      	movs	r3, #0
   1089c:	4632      	mov	r2, r6
   1089e:	4931      	ldr	r1, [pc, #196]	; (10964 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1e8>)
   108a0:	4668      	mov	r0, sp
   108a2:	f7f0 fcf3 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
   108a6:	a901      	add	r1, sp, #4
   108a8:	4638      	mov	r0, r7
      this->m_pingOut_OutputPort[port].init();
   108aa:	f504 6798 	add.w	r7, r4, #1216	; 0x4c0
      this->m_pingIn_InputPort[port].setObjName(portName.toChar());
   108ae:	f007 fb77 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
   108b2:	4668      	mov	r0, sp
   108b4:	9500      	str	r5, [sp, #0]
   108b6:	f7f0 fcbd 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_PktSend_OutputPort[port].init();
   108ba:	4640      	mov	r0, r8
   108bc:	f006 ff9e 	bl	177fc <Fw::OutputComPort::init()>
    ObjectName() : StringBase() { *this = ""; }
   108c0:	4668      	mov	r0, sp
   108c2:	f7f0 fcad 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   108c6:	4920      	ldr	r1, [pc, #128]	; (10948 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1cc>)
   108c8:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
   108ca:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
   108cc:	f7f0 fd10 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
   108d0:	2300      	movs	r3, #0
   108d2:	4632      	mov	r2, r6
   108d4:	4924      	ldr	r1, [pc, #144]	; (10968 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1ec>)
   108d6:	4668      	mov	r0, sp
   108d8:	f7f0 fcd8 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_PktSend_OutputPort[port].setObjName(portName.toChar());
   108dc:	a901      	add	r1, sp, #4
   108de:	4640      	mov	r0, r8
   108e0:	f007 fb5e 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
   108e4:	4668      	mov	r0, sp
   108e6:	9500      	str	r5, [sp, #0]
   108e8:	f7f0 fca4 	bl	1234 <Fw::StringBase::~StringBase()>
      this->m_pingOut_OutputPort[port].init();
   108ec:	4638      	mov	r0, r7
   108ee:	f000 fcf5 	bl	112dc <Svc::OutputPingPort::init()>
    ObjectName() : StringBase() { *this = ""; }
   108f2:	4668      	mov	r0, sp
   108f4:	f7f0 fc94 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   108f8:	4913      	ldr	r1, [pc, #76]	; (10948 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1cc>)
   108fa:	4668      	mov	r0, sp
    ObjectName() : StringBase() { *this = ""; }
   108fc:	9500      	str	r5, [sp, #0]
        (void)StringBase::operator=(src);
   108fe:	f7f0 fcf7 	bl	12f0 <Fw::StringBase::operator=(char const*)>
      portName.format(
   10902:	4632      	mov	r2, r6
   10904:	2300      	movs	r3, #0
   10906:	4919      	ldr	r1, [pc, #100]	; (1096c <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1f0>)
   10908:	4668      	mov	r0, sp
   1090a:	f7f0 fcbf 	bl	128c <Fw::StringBase::format(char const*, ...)>
      this->m_pingOut_OutputPort[port].setObjName(portName.toChar());
   1090e:	a901      	add	r1, sp, #4
   10910:	4638      	mov	r0, r7
   10912:	f007 fb45 	bl	17fa0 <Fw::ObjBase::setObjName(char const*)>
    ~ObjectName() {}
   10916:	4668      	mov	r0, sp
   10918:	9500      	str	r5, [sp, #0]
   1091a:	f7f0 fc8b 	bl	1234 <Fw::StringBase::~StringBase()>
    Os::Queue::Status qStat = this->createQueue(
   1091e:	220c      	movs	r2, #12
   10920:	4649      	mov	r1, r9
   10922:	4620      	mov	r0, r4
   10924:	f000 fd24 	bl	11370 <Fw::QueuedComponentBase::createQueue(unsigned long, unsigned long)>
    FW_ASSERT(
   10928:	b910      	cbnz	r0, 10930 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1b4>
  }
   1092a:	b017      	add	sp, #92	; 0x5c
   1092c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FW_ASSERT(
   10930:	4601      	mov	r1, r0
   10932:	22da      	movs	r2, #218	; 0xda
   10934:	480e      	ldr	r0, [pc, #56]	; (10970 <Svc::TlmChanComponentBase::init(unsigned long, long)+0x1f4>)
  }
   10936:	b017      	add	sp, #92	; 0x5c
   10938:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    FW_ASSERT(
   1093c:	f7f0 be74 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10940:	20002b80 	.word	0x20002b80
   10944:	00010b2d 	.word	0x00010b2d
   10948:	20001d2c 	.word	0x20001d2c
   1094c:	20001404 	.word	0x20001404
   10950:	00010bdd 	.word	0x00010bdd
   10954:	2000141c 	.word	0x2000141c
   10958:	00010c89 	.word	0x00010c89
   1095c:	20001438 	.word	0x20001438
   10960:	00010d8d 	.word	0x00010d8d
   10964:	200016a8 	.word	0x200016a8
   10968:	20001770 	.word	0x20001770
   1096c:	2000178c 	.word	0x2000178c
   10970:	200013b8 	.word	0x200013b8

00010974 <Svc::TlmChanComponentBase::get_Run_InputPort(long)>:
  {
   10974:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
   10976:	1e0c      	subs	r4, r1, #0
  {
   10978:	4605      	mov	r5, r0
    FW_ASSERT(
   1097a:	dd03      	ble.n	10984 <Svc::TlmChanComponentBase::get_Run_InputPort(long)+0x10>
   1097c:	22e7      	movs	r2, #231	; 0xe7
   1097e:	4805      	ldr	r0, [pc, #20]	; (10994 <Svc::TlmChanComponentBase::get_Run_InputPort(long)+0x20>)
   10980:	f7f0 fe52 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_Run_InputPort[portNum];
   10984:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   10988:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
   1098c:	f500 7025 	add.w	r0, r0, #660	; 0x294
   10990:	bd38      	pop	{r3, r4, r5, pc}
   10992:	bf00      	nop
   10994:	200013b8 	.word	0x200013b8

00010998 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)>:
  {
   10998:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
   1099a:	1e0c      	subs	r4, r1, #0
  {
   1099c:	4605      	mov	r5, r0
    FW_ASSERT(
   1099e:	dd03      	ble.n	109a8 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)+0x10>
   109a0:	22fd      	movs	r2, #253	; 0xfd
   109a2:	4805      	ldr	r0, [pc, #20]	; (109b8 <Svc::TlmChanComponentBase::get_TlmRecv_InputPort(long)+0x20>)
   109a4:	f7f0 fe40 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return &this->m_TlmRecv_InputPort[portNum];
   109a8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   109ac:	eb05 1004 	add.w	r0, r5, r4, lsl #4
  }
   109b0:	f500 705d 	add.w	r0, r0, #884	; 0x374
   109b4:	bd38      	pop	{r3, r4, r5, pc}
   109b6:	bf00      	nop
   109b8:	200013b8 	.word	0x200013b8

000109bc <Svc::TlmChanComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)>:
  {
   109bc:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
   109be:	1e0d      	subs	r5, r1, #0
  {
   109c0:	4604      	mov	r4, r0
   109c2:	4616      	mov	r6, r2
    FW_ASSERT(
   109c4:	dd04      	ble.n	109d0 <Svc::TlmChanComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)+0x14>
   109c6:	f44f 728d 	mov.w	r2, #282	; 0x11a
   109ca:	4806      	ldr	r0, [pc, #24]	; (109e4 <Svc::TlmChanComponentBase::set_PktSend_OutputPort(long, Fw::InputComPort*)+0x28>)
   109cc:	f7f0 fe2c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_PktSend_OutputPort[portNum].addCallPort(port);
   109d0:	236c      	movs	r3, #108	; 0x6c
   109d2:	4631      	mov	r1, r6
   109d4:	fb03 4005 	mla	r0, r3, r5, r4
  }
   109d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_PktSend_OutputPort[portNum].addCallPort(port);
   109dc:	f200 4054 	addw	r0, r0, #1108	; 0x454
   109e0:	f006 be76 	b.w	176d0 <Fw::OutputComPort::addCallPort(Fw::InputComPort*)>
   109e4:	200013b8 	.word	0x200013b8

000109e8 <Svc::TlmChanComponentBase::TlmChanComponentBase(char const*)>:
  TlmChanComponentBase ::
   109e8:	b510      	push	{r4, lr}
   109ea:	4604      	mov	r4, r0
      Fw::ActiveComponentBase(compName)
   109ec:	f000 fd08 	bl	11400 <Fw::ActiveComponentBase::ActiveComponentBase(char const*)>
   109f0:	4b0f      	ldr	r3, [pc, #60]	; (10a30 <Svc::TlmChanComponentBase::TlmChanComponentBase(char const*)+0x48>)
   109f2:	f504 7025 	add.w	r0, r4, #660	; 0x294
   109f6:	6023      	str	r3, [r4, #0]
   109f8:	f000 fab8 	bl	10f6c <Svc::InputSchedPort::InputSchedPort()>
   109fc:	f504 7041 	add.w	r0, r4, #772	; 0x304
   10a00:	f006 fba8 	bl	17154 <Fw::InputTlmGetPort::InputTlmGetPort()>
   10a04:	f504 705d 	add.w	r0, r4, #884	; 0x374
   10a08:	f006 fc5e 	bl	172c8 <Fw::InputTlmPort::InputTlmPort()>
   10a0c:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
   10a10:	f000 fbca 	bl	111a8 <Svc::InputPingPort::InputPingPort()>
   10a14:	f204 4054 	addw	r0, r4, #1108	; 0x454
   10a18:	f006 fe4e 	bl	176b8 <Fw::OutputComPort::OutputComPort()>
   10a1c:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
   10a20:	f000 fc10 	bl	11244 <Svc::OutputPingPort::OutputPingPort()>
   10a24:	f504 60a6 	add.w	r0, r4, #1328	; 0x530
   10a28:	f002 ff0a 	bl	13840 <Os::Mutex::Mutex()>
  }
   10a2c:	4620      	mov	r0, r4
   10a2e:	bd10      	pop	{r4, pc}
   10a30:	20003bf0 	.word	0x20003bf0

00010a34 <Svc::TlmChanComponentBase::isConnected_PktSend_OutputPort(long)>:
  {
   10a34:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(
   10a36:	1e0d      	subs	r5, r1, #0
  {
   10a38:	4604      	mov	r4, r0
    FW_ASSERT(
   10a3a:	dd04      	ble.n	10a46 <Svc::TlmChanComponentBase::isConnected_PktSend_OutputPort(long)+0x12>
   10a3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
   10a40:	4805      	ldr	r0, [pc, #20]	; (10a58 <Svc::TlmChanComponentBase::isConnected_PktSend_OutputPort(long)+0x24>)
   10a42:	f7f0 fdf1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_PktSend_OutputPort[portNum].isConnected();
   10a46:	236c      	movs	r3, #108	; 0x6c
   10a48:	fb03 4005 	mla	r0, r3, r5, r4
  }
   10a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->m_PktSend_OutputPort[portNum].isConnected();
   10a50:	f200 4054 	addw	r0, r0, #1108	; 0x454
   10a54:	f007 b9fa 	b.w	17e4c <Fw::PortBase::isConnected() const>
   10a58:	200013b8 	.word	0x200013b8

00010a5c <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)>:
  {
   10a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
   10a5e:	1e0f      	subs	r7, r1, #0
  {
   10a60:	b087      	sub	sp, #28
   10a62:	4604      	mov	r4, r0
   10a64:	4616      	mov	r6, r2
    FW_ASSERT(
   10a66:	dd04      	ble.n	10a72 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x16>
   10a68:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   10a6c:	482c      	ldr	r0, [pc, #176]	; (10b20 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xc4>)
   10a6e:	f7f0 fddb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    Run_preMsgHook(
   10a72:	6823      	ldr	r3, [r4, #0]
   10a74:	4a2b      	ldr	r2, [pc, #172]	; (10b24 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xc8>)
   10a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10a78:	4293      	cmp	r3, r2
   10a7a:	d14c      	bne.n	10b16 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xba>
    class ComponentIpcSerializableBuffer :
   10a7c:	4668      	mov	r0, sp
   10a7e:	4d2a      	ldr	r5, [pc, #168]	; (10b28 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xcc>)
   10a80:	f7ef fd5e 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(
   10a84:	2101      	movs	r1, #1
   10a86:	4668      	mov	r0, sp
    class ComponentIpcSerializableBuffer :
   10a88:	9500      	str	r5, [sp, #0]
    _status = msg.serialize(
   10a8a:	f7ef fe4d 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
   10a8e:	b9b8      	cbnz	r0, 10ac0 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x64>
    _status = msg.serialize(portNum);
   10a90:	4639      	mov	r1, r7
   10a92:	4668      	mov	r0, sp
   10a94:	f7ef fe48 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
   10a98:	b9f0      	cbnz	r0, 10ad8 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x7c>
    _status = msg.serialize(context);
   10a9a:	4631      	mov	r1, r6
   10a9c:	4668      	mov	r0, sp
   10a9e:	f7ef fddd 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
   10aa2:	bb28      	cbnz	r0, 10af0 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x94>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
   10aa4:	2301      	movs	r3, #1
   10aa6:	2200      	movs	r2, #0
   10aa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   10aac:	4669      	mov	r1, sp
   10aae:	f001 f94f 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
   10ab2:	bb20      	cbnz	r0, 10afe <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xa2>
    class ComponentIpcSerializableBuffer :
   10ab4:	4668      	mov	r0, sp
   10ab6:	9500      	str	r5, [sp, #0]
   10ab8:	f7ef fd4a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   10abc:	b007      	add	sp, #28
   10abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(
   10ac0:	4601      	mov	r1, r0
   10ac2:	f240 12c9 	movw	r2, #457	; 0x1c9
   10ac6:	4816      	ldr	r0, [pc, #88]	; (10b20 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xc4>)
   10ac8:	f7f0 fdae 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(portNum);
   10acc:	4639      	mov	r1, r7
   10ace:	4668      	mov	r0, sp
   10ad0:	f7ef fe2a 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
   10ad4:	2800      	cmp	r0, #0
   10ad6:	d0e0      	beq.n	10a9a <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x3e>
   10ad8:	4601      	mov	r1, r0
   10ada:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
   10ade:	4810      	ldr	r0, [pc, #64]	; (10b20 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xc4>)
   10ae0:	f7f0 fda2 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(context);
   10ae4:	4631      	mov	r1, r6
   10ae6:	4668      	mov	r0, sp
   10ae8:	f7ef fdb8 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
   10aec:	2800      	cmp	r0, #0
   10aee:	d0d9      	beq.n	10aa4 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x48>
   10af0:	4601      	mov	r1, r0
   10af2:	f240 12d7 	movw	r2, #471	; 0x1d7
   10af6:	480a      	ldr	r0, [pc, #40]	; (10b20 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xc4>)
   10af8:	f7f0 fd96 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10afc:	e7d2      	b.n	10aa4 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x48>
    FW_ASSERT(
   10afe:	4601      	mov	r1, r0
   10b00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10b04:	4806      	ldr	r0, [pc, #24]	; (10b20 <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0xc4>)
   10b06:	f7f0 fd8f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    class ComponentIpcSerializableBuffer :
   10b0a:	4668      	mov	r0, sp
   10b0c:	9500      	str	r5, [sp, #0]
   10b0e:	f7ef fd1f 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   10b12:	b007      	add	sp, #28
   10b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Run_preMsgHook(
   10b16:	4632      	mov	r2, r6
   10b18:	4639      	mov	r1, r7
   10b1a:	4620      	mov	r0, r4
   10b1c:	4798      	blx	r3
   10b1e:	e7ad      	b.n	10a7c <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)+0x20>
   10b20:	200013b8 	.word	0x200013b8
   10b24:	00010645 	.word	0x00010645
   10b28:	200039a4 	.word	0x200039a4

00010b2c <Svc::TlmChanComponentBase::m_p_Run_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_Run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
   10b2c:	b530      	push	{r4, r5, lr}
   10b2e:	460d      	mov	r5, r1
   10b30:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
   10b32:	4604      	mov	r4, r0
   10b34:	b130      	cbz	r0, 10b44 <Svc::TlmChanComponentBase::m_p_Run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->Run_handlerBase(
   10b36:	4629      	mov	r1, r5
   10b38:	4620      	mov	r0, r4
      portNum,
      context
    );
  }
   10b3a:	b003      	add	sp, #12
   10b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->Run_handlerBase(
   10b40:	f7ff bf8c 	b.w	10a5c <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
   10b44:	f44f 7142 	mov.w	r1, #776	; 0x308
   10b48:	4805      	ldr	r0, [pc, #20]	; (10b60 <Svc::TlmChanComponentBase::m_p_Run_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
   10b4a:	9201      	str	r2, [sp, #4]
   10b4c:	f7f0 fd5e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   10b50:	9a01      	ldr	r2, [sp, #4]
    compPtr->Run_handlerBase(
   10b52:	4629      	mov	r1, r5
   10b54:	4620      	mov	r0, r4
  }
   10b56:	b003      	add	sp, #12
   10b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->Run_handlerBase(
   10b5c:	f7ff bf7e 	b.w	10a5c <Svc::TlmChanComponentBase::Run_handlerBase(long, unsigned long)>
   10b60:	200013b8 	.word	0x200013b8

00010b64 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
  {
   10b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
   10b66:	1e0d      	subs	r5, r1, #0
  {
   10b68:	b085      	sub	sp, #20
   10b6a:	4604      	mov	r4, r0
   10b6c:	4616      	mov	r6, r2
   10b6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    FW_ASSERT(
   10b70:	dd06      	ble.n	10b80 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x1c>
   10b72:	f240 12ef 	movw	r2, #495	; 0x1ef
   10b76:	4816      	ldr	r0, [pc, #88]	; (10bd0 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x6c>)
   10b78:	9303      	str	r3, [sp, #12]
   10b7a:	f7f0 fd55 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10b7e:	9b03      	ldr	r3, [sp, #12]
    this->lock();
   10b80:	6822      	ldr	r2, [r4, #0]
   10b82:	4914      	ldr	r1, [pc, #80]	; (10bd4 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x70>)
   10b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10b86:	9303      	str	r3, [sp, #12]
   10b88:	428a      	cmp	r2, r1
   10b8a:	d117      	bne.n	10bbc <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x58>
    this->m_guardedPortMutex.lock();
   10b8c:	f504 60a6 	add.w	r0, r4, #1328	; 0x530
   10b90:	f002 fe72 	bl	13878 <Os::Mutex::lock()>
  }
   10b94:	9b03      	ldr	r3, [sp, #12]
    this->TlmGet_handler(
   10b96:	9700      	str	r7, [sp, #0]
   10b98:	4632      	mov	r2, r6
   10b9a:	6820      	ldr	r0, [r4, #0]
   10b9c:	4629      	mov	r1, r5
   10b9e:	6a05      	ldr	r5, [r0, #32]
   10ba0:	4620      	mov	r0, r4
   10ba2:	47a8      	blx	r5
    this->unLock();
   10ba4:	6823      	ldr	r3, [r4, #0]
   10ba6:	4a0c      	ldr	r2, [pc, #48]	; (10bd8 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x74>)
   10ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10baa:	4293      	cmp	r3, r2
   10bac:	d10a      	bne.n	10bc4 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x60>
    this->m_guardedPortMutex.unLock();
   10bae:	f504 60a6 	add.w	r0, r4, #1328	; 0x530
  }
   10bb2:	b005      	add	sp, #20
   10bb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->m_guardedPortMutex.unLock();
   10bb8:	f002 beb2 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
   10bbc:	4620      	mov	r0, r4
   10bbe:	4790      	blx	r2
   10bc0:	9b03      	ldr	r3, [sp, #12]
   10bc2:	e7e8      	b.n	10b96 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x32>
    this->unLock();
   10bc4:	4620      	mov	r0, r4
  }
   10bc6:	b005      	add	sp, #20
   10bc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->unLock();
   10bcc:	4718      	bx	r3
   10bce:	bf00      	nop
   10bd0:	200013b8 	.word	0x200013b8
   10bd4:	00010679 	.word	0x00010679
   10bd8:	00010681 	.word	0x00010681

00010bdc <Svc::TlmChanComponentBase::m_p_TlmGet_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
        FwIndexType portNum,
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
   10bdc:	b570      	push	{r4, r5, r6, lr}
   10bde:	b082      	sub	sp, #8
   10be0:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
   10be2:	4604      	mov	r4, r0
  {
   10be4:	9e06      	ldr	r6, [sp, #24]
    FW_ASSERT(callComp);
   10be6:	b138      	cbz	r0, 10bf8 <Svc::TlmChanComponentBase::m_p_TlmGet_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x1c>
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->TlmGet_handlerBase(
   10be8:	4629      	mov	r1, r5
   10bea:	4620      	mov	r0, r4
   10bec:	9606      	str	r6, [sp, #24]
      portNum,
      id,
      timeTag,
      val
    );
  }
   10bee:	b002      	add	sp, #8
   10bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    compPtr->TlmGet_handlerBase(
   10bf4:	f7ff bfb6 	b.w	10b64 <Svc::TlmChanComponentBase::TlmGet_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>
    FW_ASSERT(callComp);
   10bf8:	f240 3119 	movw	r1, #793	; 0x319
   10bfc:	4803      	ldr	r0, [pc, #12]	; (10c0c <Svc::TlmChanComponentBase::m_p_TlmGet_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x30>)
   10bfe:	e9cd 2300 	strd	r2, r3, [sp]
   10c02:	f7f0 fd03 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   10c06:	e9dd 2300 	ldrd	r2, r3, [sp]
   10c0a:	e7ed      	b.n	10be8 <Svc::TlmChanComponentBase::m_p_TlmGet_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xc>
   10c0c:	200013b8 	.word	0x200013b8

00010c10 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
  {
   10c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
   10c12:	1e0d      	subs	r5, r1, #0
  {
   10c14:	b085      	sub	sp, #20
   10c16:	4604      	mov	r4, r0
   10c18:	4616      	mov	r6, r2
   10c1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    FW_ASSERT(
   10c1c:	dd06      	ble.n	10c2c <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x1c>
   10c1e:	f44f 7203 	mov.w	r2, #524	; 0x20c
   10c22:	4816      	ldr	r0, [pc, #88]	; (10c7c <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x6c>)
   10c24:	9303      	str	r3, [sp, #12]
   10c26:	f7f0 fcff 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10c2a:	9b03      	ldr	r3, [sp, #12]
    this->lock();
   10c2c:	6822      	ldr	r2, [r4, #0]
   10c2e:	4914      	ldr	r1, [pc, #80]	; (10c80 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x70>)
   10c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10c32:	9303      	str	r3, [sp, #12]
   10c34:	428a      	cmp	r2, r1
   10c36:	d117      	bne.n	10c68 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x58>
    this->m_guardedPortMutex.lock();
   10c38:	f504 60a6 	add.w	r0, r4, #1328	; 0x530
   10c3c:	f002 fe1c 	bl	13878 <Os::Mutex::lock()>
  }
   10c40:	9b03      	ldr	r3, [sp, #12]
    this->TlmRecv_handler(
   10c42:	9700      	str	r7, [sp, #0]
   10c44:	4632      	mov	r2, r6
   10c46:	6820      	ldr	r0, [r4, #0]
   10c48:	4629      	mov	r1, r5
   10c4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10c4c:	4620      	mov	r0, r4
   10c4e:	47a8      	blx	r5
    this->unLock();
   10c50:	6823      	ldr	r3, [r4, #0]
   10c52:	4a0c      	ldr	r2, [pc, #48]	; (10c84 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x74>)
   10c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10c56:	4293      	cmp	r3, r2
   10c58:	d10a      	bne.n	10c70 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x60>
    this->m_guardedPortMutex.unLock();
   10c5a:	f504 60a6 	add.w	r0, r4, #1328	; 0x530
  }
   10c5e:	b005      	add	sp, #20
   10c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->m_guardedPortMutex.unLock();
   10c64:	f002 be5c 	b.w	13920 <Os::Mutex::unLock()>
    this->lock();
   10c68:	4620      	mov	r0, r4
   10c6a:	4790      	blx	r2
   10c6c:	9b03      	ldr	r3, [sp, #12]
   10c6e:	e7e8      	b.n	10c42 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x32>
    this->unLock();
   10c70:	4620      	mov	r0, r4
  }
   10c72:	b005      	add	sp, #20
   10c74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->unLock();
   10c78:	4718      	bx	r3
   10c7a:	bf00      	nop
   10c7c:	200013b8 	.word	0x200013b8
   10c80:	00010679 	.word	0x00010679
   10c84:	00010681 	.word	0x00010681

00010c88 <Svc::TlmChanComponentBase::m_p_TlmRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
        FwIndexType portNum,
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
   10c88:	b570      	push	{r4, r5, r6, lr}
   10c8a:	b082      	sub	sp, #8
   10c8c:	460d      	mov	r5, r1
    FW_ASSERT(callComp);
   10c8e:	4604      	mov	r4, r0
  {
   10c90:	9e06      	ldr	r6, [sp, #24]
    FW_ASSERT(callComp);
   10c92:	b138      	cbz	r0, 10ca4 <Svc::TlmChanComponentBase::m_p_TlmRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x1c>
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->TlmRecv_handlerBase(
   10c94:	4629      	mov	r1, r5
   10c96:	4620      	mov	r0, r4
   10c98:	9606      	str	r6, [sp, #24]
      portNum,
      id,
      timeTag,
      val
    );
  }
   10c9a:	b002      	add	sp, #8
   10c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    compPtr->TlmRecv_handlerBase(
   10ca0:	f7ff bfb6 	b.w	10c10 <Svc::TlmChanComponentBase::TlmRecv_handlerBase(long, unsigned long, Fw::Time&, Fw::TlmBuffer&)>
    FW_ASSERT(callComp);
   10ca4:	f44f 714b 	mov.w	r1, #812	; 0x32c
   10ca8:	4803      	ldr	r0, [pc, #12]	; (10cb8 <Svc::TlmChanComponentBase::m_p_TlmRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x30>)
   10caa:	e9cd 2300 	strd	r2, r3, [sp]
   10cae:	f7f0 fcad 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   10cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
   10cb6:	e7ed      	b.n	10c94 <Svc::TlmChanComponentBase::m_p_TlmRecv_in(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&)+0xc>
   10cb8:	200013b8 	.word	0x200013b8

00010cbc <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)>:
  {
   10cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    FW_ASSERT(
   10cbe:	1e0f      	subs	r7, r1, #0
  {
   10cc0:	b087      	sub	sp, #28
   10cc2:	4604      	mov	r4, r0
   10cc4:	4616      	mov	r6, r2
    FW_ASSERT(
   10cc6:	dd04      	ble.n	10cd2 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x16>
   10cc8:	f240 2227 	movw	r2, #551	; 0x227
   10ccc:	482c      	ldr	r0, [pc, #176]	; (10d80 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
   10cce:	f7f0 fcab 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    pingIn_preMsgHook(
   10cd2:	6823      	ldr	r3, [r4, #0]
   10cd4:	4a2b      	ldr	r2, [pc, #172]	; (10d84 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xc8>)
   10cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10cd8:	4293      	cmp	r3, r2
   10cda:	d14c      	bne.n	10d76 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xba>
    class ComponentIpcSerializableBuffer :
   10cdc:	4668      	mov	r0, sp
   10cde:	4d2a      	ldr	r5, [pc, #168]	; (10d88 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xcc>)
   10ce0:	f7ef fc2e 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
    _status = msg.serialize(
   10ce4:	2102      	movs	r1, #2
   10ce6:	4668      	mov	r0, sp
    class ComponentIpcSerializableBuffer :
   10ce8:	9500      	str	r5, [sp, #0]
    _status = msg.serialize(
   10cea:	f7ef fd1d 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
   10cee:	b9b8      	cbnz	r0, 10d20 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x64>
    _status = msg.serialize(portNum);
   10cf0:	4639      	mov	r1, r7
   10cf2:	4668      	mov	r0, sp
   10cf4:	f7ef fd18 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
   10cf8:	b9f0      	cbnz	r0, 10d38 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x7c>
    _status = msg.serialize(key);
   10cfa:	4631      	mov	r1, r6
   10cfc:	4668      	mov	r0, sp
   10cfe:	f7ef fcad 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
   10d02:	bb28      	cbnz	r0, 10d50 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x94>
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);
   10d04:	2301      	movs	r3, #1
   10d06:	2200      	movs	r2, #0
   10d08:	f104 0068 	add.w	r0, r4, #104	; 0x68
   10d0c:	4669      	mov	r1, sp
   10d0e:	f001 f81f 	bl	11d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>
    FW_ASSERT(
   10d12:	bb20      	cbnz	r0, 10d5e <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xa2>
    class ComponentIpcSerializableBuffer :
   10d14:	4668      	mov	r0, sp
   10d16:	9500      	str	r5, [sp, #0]
   10d18:	f7ef fc1a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   10d1c:	b007      	add	sp, #28
   10d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(
   10d20:	4601      	mov	r1, r0
   10d22:	f44f 720e 	mov.w	r2, #568	; 0x238
   10d26:	4816      	ldr	r0, [pc, #88]	; (10d80 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
   10d28:	f7f0 fc7e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(portNum);
   10d2c:	4639      	mov	r1, r7
   10d2e:	4668      	mov	r0, sp
   10d30:	f7ef fcfa 	bl	728 <Fw::SerializeBufferBase::serialize(long)>
    FW_ASSERT(
   10d34:	2800      	cmp	r0, #0
   10d36:	d0e0      	beq.n	10cfa <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x3e>
   10d38:	4601      	mov	r1, r0
   10d3a:	f240 223f 	movw	r2, #575	; 0x23f
   10d3e:	4810      	ldr	r0, [pc, #64]	; (10d80 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
   10d40:	f7f0 fc72 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    _status = msg.serialize(key);
   10d44:	4631      	mov	r1, r6
   10d46:	4668      	mov	r0, sp
   10d48:	f7ef fc88 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    FW_ASSERT(
   10d4c:	2800      	cmp	r0, #0
   10d4e:	d0d9      	beq.n	10d04 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x48>
   10d50:	4601      	mov	r1, r0
   10d52:	f240 2246 	movw	r2, #582	; 0x246
   10d56:	480a      	ldr	r0, [pc, #40]	; (10d80 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
   10d58:	f7f0 fc66 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   10d5c:	e7d2      	b.n	10d04 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x48>
    FW_ASSERT(
   10d5e:	4601      	mov	r1, r0
   10d60:	f240 224f 	movw	r2, #591	; 0x24f
   10d64:	4806      	ldr	r0, [pc, #24]	; (10d80 <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0xc4>)
   10d66:	f7f0 fc5f 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    class ComponentIpcSerializableBuffer :
   10d6a:	4668      	mov	r0, sp
   10d6c:	9500      	str	r5, [sp, #0]
   10d6e:	f7ef fbef 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   10d72:	b007      	add	sp, #28
   10d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pingIn_preMsgHook(
   10d76:	4632      	mov	r2, r6
   10d78:	4639      	mov	r1, r7
   10d7a:	4620      	mov	r0, r4
   10d7c:	4798      	blx	r3
   10d7e:	e7ad      	b.n	10cdc <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)+0x20>
   10d80:	200013b8 	.word	0x200013b8
   10d84:	00010645 	.word	0x00010645
   10d88:	200039a4 	.word	0x200039a4

00010d8c <Svc::TlmChanComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)>:
    m_p_pingIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 key
    )
  {
   10d8c:	b530      	push	{r4, r5, lr}
   10d8e:	460d      	mov	r5, r1
   10d90:	b083      	sub	sp, #12
    FW_ASSERT(callComp);
   10d92:	4604      	mov	r4, r0
   10d94:	b130      	cbz	r0, 10da4 <Svc::TlmChanComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x18>
    TlmChanComponentBase* compPtr = static_cast<TlmChanComponentBase*>(callComp);
    compPtr->pingIn_handlerBase(
   10d96:	4629      	mov	r1, r5
   10d98:	4620      	mov	r0, r4
      portNum,
      key
    );
  }
   10d9a:	b003      	add	sp, #12
   10d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->pingIn_handlerBase(
   10da0:	f7ff bf8c 	b.w	10cbc <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)>
    FW_ASSERT(callComp);
   10da4:	f240 313d 	movw	r1, #829	; 0x33d
   10da8:	4805      	ldr	r0, [pc, #20]	; (10dc0 <Svc::TlmChanComponentBase::m_p_pingIn_in(Fw::PassiveComponentBase*, long, unsigned long)+0x34>)
   10daa:	9201      	str	r2, [sp, #4]
   10dac:	f7f0 fc2e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   10db0:	9a01      	ldr	r2, [sp, #4]
    compPtr->pingIn_handlerBase(
   10db2:	4629      	mov	r1, r5
   10db4:	4620      	mov	r0, r4
  }
   10db6:	b003      	add	sp, #12
   10db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    compPtr->pingIn_handlerBase(
   10dbc:	f7ff bf7e 	b.w	10cbc <Svc::TlmChanComponentBase::pingIn_handlerBase(long, unsigned long)>
   10dc0:	200013b8 	.word	0x200013b8

00010dc4 <Svc::TlmChanComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)>:
  {
   10dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(
   10dc6:	1e0d      	subs	r5, r1, #0
  {
   10dc8:	4604      	mov	r4, r0
   10dca:	4616      	mov	r6, r2
   10dcc:	461f      	mov	r7, r3
    FW_ASSERT(
   10dce:	dd04      	ble.n	10dda <Svc::TlmChanComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)+0x16>
   10dd0:	f240 227a 	movw	r2, #634	; 0x27a
   10dd4:	4806      	ldr	r0, [pc, #24]	; (10df0 <Svc::TlmChanComponentBase::PktSend_out(long, Fw::ComBuffer&, unsigned long)+0x2c>)
   10dd6:	f7f0 fc27 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_PktSend_OutputPort[portNum].invoke(
   10dda:	236c      	movs	r3, #108	; 0x6c
   10ddc:	463a      	mov	r2, r7
   10dde:	4631      	mov	r1, r6
   10de0:	fb03 4005 	mla	r0, r3, r5, r4
  }
   10de4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    this->m_PktSend_OutputPort[portNum].invoke(
   10de8:	f200 4054 	addw	r0, r0, #1108	; 0x454
   10dec:	f006 bc80 	b.w	176f0 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const>
   10df0:	200013b8 	.word	0x200013b8

00010df4 <Svc::TlmChanComponentBase::pingOut_out(long, unsigned long)>:
  {
   10df4:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(
   10df6:	1e0d      	subs	r5, r1, #0
  {
   10df8:	4604      	mov	r4, r0
   10dfa:	4616      	mov	r6, r2
    FW_ASSERT(
   10dfc:	dd04      	ble.n	10e08 <Svc::TlmChanComponentBase::pingOut_out(long, unsigned long)+0x14>
   10dfe:	f240 228a 	movw	r2, #650	; 0x28a
   10e02:	4806      	ldr	r0, [pc, #24]	; (10e1c <Svc::TlmChanComponentBase::pingOut_out(long, unsigned long)+0x28>)
   10e04:	f7f0 fc10 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    this->m_pingOut_OutputPort[portNum].invoke(
   10e08:	236c      	movs	r3, #108	; 0x6c
   10e0a:	4631      	mov	r1, r6
   10e0c:	fb03 4005 	mla	r0, r3, r5, r4
  }
   10e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_pingOut_OutputPort[portNum].invoke(
   10e14:	f500 6098 	add.w	r0, r0, #1216	; 0x4c0
   10e18:	f000 ba20 	b.w	1125c <Svc::OutputPingPort::invoke(unsigned long) const>
   10e1c:	200013b8 	.word	0x200013b8

00010e20 <Svc::TlmChanComponentBase::~TlmChanComponentBase()>:
  TlmChanComponentBase ::
   10e20:	b510      	push	{r4, lr}
    ~TlmChanComponentBase()
   10e22:	4b18      	ldr	r3, [pc, #96]	; (10e84 <Svc::TlmChanComponentBase::~TlmChanComponentBase()+0x64>)
  TlmChanComponentBase ::
   10e24:	4604      	mov	r4, r0
    ~TlmChanComponentBase()
   10e26:	f500 60a6 	add.w	r0, r0, #1328	; 0x530
   10e2a:	6023      	str	r3, [r4, #0]
   10e2c:	f002 fabe 	bl	133ac <Os::Mutex::~Mutex()>
   10e30:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
   10e34:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
   10e38:	685b      	ldr	r3, [r3, #4]
   10e3a:	4798      	blx	r3
   10e3c:	f8d4 3454 	ldr.w	r3, [r4, #1108]	; 0x454
   10e40:	f204 4054 	addw	r0, r4, #1108	; 0x454
   10e44:	685b      	ldr	r3, [r3, #4]
   10e46:	4798      	blx	r3
   10e48:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
   10e4c:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
   10e50:	685b      	ldr	r3, [r3, #4]
   10e52:	4798      	blx	r3
   10e54:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
   10e58:	f504 705d 	add.w	r0, r4, #884	; 0x374
   10e5c:	685b      	ldr	r3, [r3, #4]
   10e5e:	4798      	blx	r3
   10e60:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   10e64:	f504 7041 	add.w	r0, r4, #772	; 0x304
   10e68:	685b      	ldr	r3, [r3, #4]
   10e6a:	4798      	blx	r3
   10e6c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
   10e70:	f504 7025 	add.w	r0, r4, #660	; 0x294
   10e74:	685b      	ldr	r3, [r3, #4]
   10e76:	4798      	blx	r3
   10e78:	4620      	mov	r0, r4
   10e7a:	f000 fad1 	bl	11420 <Fw::ActiveComponentBase::~ActiveComponentBase()>
  }
   10e7e:	4620      	mov	r0, r4
   10e80:	bd10      	pop	{r4, pc}
   10e82:	bf00      	nop
   10e84:	20003bf0 	.word	0x20003bf0

00010e88 <Svc::(anonymous namespace)::SchedPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputSchedPort::SERIALIZED_SIZE;
        }
   10e88:	2004      	movs	r0, #4
   10e8a:	4770      	bx	lr

00010e8c <Svc::(anonymous namespace)::SchedPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   10e8c:	300c      	adds	r0, #12
   10e8e:	4770      	bx	lr

00010e90 <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputSchedPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
   10e90:	b530      	push	{r4, r5, lr}
   10e92:	4604      	mov	r4, r0
   10e94:	b083      	sub	sp, #12
   10e96:	460d      	mov	r5, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
   10e98:	f006 ffde 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   10e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e9e:	b17b      	cbz	r3, 10ec0 <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
    FW_ASSERT(this->m_func != nullptr);
   10ea0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   10ea2:	b1a3      	cbz	r3, 10ece <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x3e>

    U32 context;
    _status = _buffer.deserialize(context);
   10ea4:	4628      	mov	r0, r5
   10ea6:	a901      	add	r1, sp, #4
   10ea8:	f7ef ff0a 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   10eac:	4605      	mov	r5, r0
   10eae:	b920      	cbnz	r0, 10eba <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, context);
   10eb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   10eb2:	9a01      	ldr	r2, [sp, #4]
   10eb4:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   10eb8:	4798      	blx	r3

    return Fw::FW_SERIALIZE_OK;
  }
   10eba:	4628      	mov	r0, r5
   10ebc:	b003      	add	sp, #12
   10ebe:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
   10ec0:	2163      	movs	r1, #99	; 0x63
   10ec2:	4805      	ldr	r0, [pc, #20]	; (10ed8 <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
   10ec4:	f7f0 fba2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   10ec8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d1ea      	bne.n	10ea4 <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   10ece:	2164      	movs	r1, #100	; 0x64
   10ed0:	4801      	ldr	r0, [pc, #4]	; (10ed8 <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
   10ed2:	f7f0 fb9b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   10ed6:	e7e5      	b.n	10ea4 <Svc::InputSchedPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   10ed8:	2000112c 	.word	0x2000112c

00010edc <Svc::(anonymous namespace)::SchedPortBuffer::~SchedPortBuffer()>:
    class SchedPortBuffer : public Fw::SerializeBufferBase {
   10edc:	4b03      	ldr	r3, [pc, #12]	; (10eec <Svc::(anonymous namespace)::SchedPortBuffer::~SchedPortBuffer()+0x10>)
   10ede:	b510      	push	{r4, lr}
   10ee0:	4604      	mov	r4, r0
   10ee2:	6003      	str	r3, [r0, #0]
   10ee4:	f7ef fb34 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   10ee8:	4620      	mov	r0, r4
   10eea:	bd10      	pop	{r4, pc}
   10eec:	20003934 	.word	0x20003934

00010ef0 <Svc::(anonymous namespace)::SchedPortBuffer::~SchedPortBuffer()>:
   10ef0:	4b05      	ldr	r3, [pc, #20]	; (10f08 <Svc::(anonymous namespace)::SchedPortBuffer::~SchedPortBuffer()+0x18>)
   10ef2:	b510      	push	{r4, lr}
   10ef4:	4604      	mov	r4, r0
   10ef6:	6003      	str	r3, [r0, #0]
   10ef8:	f7ef fb2a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   10efc:	2110      	movs	r1, #16
   10efe:	4620      	mov	r0, r4
   10f00:	f007 fee6 	bl	18cd0 <operator delete(void*, unsigned int)>
   10f04:	4620      	mov	r0, r4
   10f06:	bd10      	pop	{r4, pc}
   10f08:	20003934 	.word	0x20003934

00010f0c <Svc::OutputSchedPort::~OutputSchedPort()>:

  };

  //! Output Sched port
  //! Scheduler Port with order argument
  class OutputSchedPort :
   10f0c:	4b03      	ldr	r3, [pc, #12]	; (10f1c <Svc::OutputSchedPort::~OutputSchedPort()+0x10>)
   10f0e:	b510      	push	{r4, lr}
   10f10:	4604      	mov	r4, r0
   10f12:	6003      	str	r3, [r0, #0]
   10f14:	f006 fef2 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   10f18:	4620      	mov	r0, r4
   10f1a:	bd10      	pop	{r4, pc}
   10f1c:	20003a94 	.word	0x20003a94

00010f20 <Svc::OutputSchedPort::~OutputSchedPort()>:
   10f20:	4b05      	ldr	r3, [pc, #20]	; (10f38 <Svc::OutputSchedPort::~OutputSchedPort()+0x18>)
   10f22:	b510      	push	{r4, lr}
   10f24:	4604      	mov	r4, r0
   10f26:	6003      	str	r3, [r0, #0]
   10f28:	f006 fee8 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   10f2c:	216c      	movs	r1, #108	; 0x6c
   10f2e:	4620      	mov	r0, r4
   10f30:	f007 fece 	bl	18cd0 <operator delete(void*, unsigned int)>
   10f34:	4620      	mov	r0, r4
   10f36:	bd10      	pop	{r4, pc}
   10f38:	20003a94 	.word	0x20003a94

00010f3c <Svc::InputSchedPort::~InputSchedPort()>:
  class InputSchedPort :
   10f3c:	4b03      	ldr	r3, [pc, #12]	; (10f4c <Svc::InputSchedPort::~InputSchedPort()+0x10>)
   10f3e:	b510      	push	{r4, lr}
   10f40:	4604      	mov	r4, r0
   10f42:	6003      	str	r3, [r0, #0]
   10f44:	f006 febc 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   10f48:	4620      	mov	r0, r4
   10f4a:	bd10      	pop	{r4, pc}
   10f4c:	20003a14 	.word	0x20003a14

00010f50 <Svc::InputSchedPort::~InputSchedPort()>:
   10f50:	4b05      	ldr	r3, [pc, #20]	; (10f68 <Svc::InputSchedPort::~InputSchedPort()+0x18>)
   10f52:	b510      	push	{r4, lr}
   10f54:	4604      	mov	r4, r0
   10f56:	6003      	str	r3, [r0, #0]
   10f58:	f006 feb2 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   10f5c:	2170      	movs	r1, #112	; 0x70
   10f5e:	4620      	mov	r0, r4
   10f60:	f007 feb6 	bl	18cd0 <operator delete(void*, unsigned int)>
   10f64:	4620      	mov	r0, r4
   10f66:	bd10      	pop	{r4, pc}
   10f68:	20003a14 	.word	0x20003a14

00010f6c <Svc::InputSchedPort::InputSchedPort()>:
  InputSchedPort ::
   10f6c:	b510      	push	{r4, lr}
   10f6e:	4604      	mov	r4, r0
      m_func(nullptr)
   10f70:	f006 fe96 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   10f74:	4a02      	ldr	r2, [pc, #8]	; (10f80 <Svc::InputSchedPort::InputSchedPort()+0x14>)
   10f76:	2300      	movs	r3, #0
  }
   10f78:	4620      	mov	r0, r4
      m_func(nullptr)
   10f7a:	6022      	str	r2, [r4, #0]
   10f7c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   10f7e:	bd10      	pop	{r4, pc}
   10f80:	20003a14 	.word	0x20003a14

00010f84 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>:
  {
   10f84:	b570      	push	{r4, r5, r6, lr}
   10f86:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   10f88:	460d      	mov	r5, r1
  {
   10f8a:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   10f8c:	b121      	cbz	r1, 10f98 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   10f8e:	b14e      	cbz	r6, 10fa4 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x20>
    this->m_comp = callComp;
   10f90:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   10f92:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   10f94:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   10f96:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   10f98:	2143      	movs	r1, #67	; 0x43
   10f9a:	4806      	ldr	r0, [pc, #24]	; (10fb4 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   10f9c:	f7f0 fb36 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   10fa0:	2e00      	cmp	r6, #0
   10fa2:	d1f5      	bne.n	10f90 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0xc>
   10fa4:	2144      	movs	r1, #68	; 0x44
   10fa6:	4803      	ldr	r0, [pc, #12]	; (10fb4 <Svc::InputSchedPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   10fa8:	f7f0 fb30 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   10fac:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   10fae:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   10fb0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   10fb2:	bd70      	pop	{r4, r5, r6, pc}
   10fb4:	2000112c 	.word	0x2000112c

00010fb8 <Svc::InputSchedPort::invoke(unsigned long)>:
  {
   10fb8:	b510      	push	{r4, lr}
   10fba:	4604      	mov	r4, r0
   10fbc:	b082      	sub	sp, #8
   10fbe:	9101      	str	r1, [sp, #4]
    this->trace();
   10fc0:	f006 ff4a 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   10fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10fc6:	9a01      	ldr	r2, [sp, #4]
   10fc8:	b13b      	cbz	r3, 10fda <Svc::InputSchedPort::invoke(unsigned long)+0x22>
    FW_ASSERT(this->m_func != nullptr);
   10fca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   10fcc:	b16b      	cbz	r3, 10fea <Svc::InputSchedPort::invoke(unsigned long)+0x32>
    return this->m_func(this->m_comp, this->m_portNum, context);
   10fce:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   10fd2:	b002      	add	sp, #8
   10fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, context);
   10fd8:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
   10fda:	2152      	movs	r1, #82	; 0x52
   10fdc:	4809      	ldr	r0, [pc, #36]	; (11004 <Svc::InputSchedPort::invoke(unsigned long)+0x4c>)
   10fde:	f7f0 fb15 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   10fe2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   10fe4:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	d1f1      	bne.n	10fce <Svc::InputSchedPort::invoke(unsigned long)+0x16>
   10fea:	2153      	movs	r1, #83	; 0x53
   10fec:	4805      	ldr	r0, [pc, #20]	; (11004 <Svc::InputSchedPort::invoke(unsigned long)+0x4c>)
   10fee:	9201      	str	r2, [sp, #4]
   10ff0:	f7f0 fb0c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, context);
   10ff4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   10ff6:	9a01      	ldr	r2, [sp, #4]
   10ff8:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   10ffc:	b002      	add	sp, #8
   10ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, context);
   11002:	4718      	bx	r3
   11004:	2000112c 	.word	0x2000112c

00011008 <Svc::OutputSchedPort::OutputSchedPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputSchedPort ::
   11008:	b510      	push	{r4, lr}
   1100a:	4604      	mov	r4, r0
    OutputSchedPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   1100c:	f006 fe8e 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   11010:	4a02      	ldr	r2, [pc, #8]	; (1101c <Svc::OutputSchedPort::OutputSchedPort()+0x14>)
   11012:	2300      	movs	r3, #0
  {

  }
   11014:	4620      	mov	r0, r4
      m_port(nullptr)
   11016:	6022      	str	r2, [r4, #0]
   11018:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   1101a:	bd10      	pop	{r4, pc}
   1101c:	20003a94 	.word	0x20003a94

00011020 <Svc::OutputSchedPort::addCallPort(Svc::InputSchedPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputSchedPort ::
    addCallPort(InputSchedPort* callPort)
  {
   11020:	b538      	push	{r3, r4, r5, lr}
   11022:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   11024:	460d      	mov	r5, r1
   11026:	b121      	cbz	r1, 11032 <Svc::OutputSchedPort::addCallPort(Svc::InputSchedPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   11028:	2300      	movs	r3, #0
    this->m_port = callPort;
   1102a:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   1102c:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   1102e:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   11030:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   11032:	2188      	movs	r1, #136	; 0x88
   11034:	4801      	ldr	r0, [pc, #4]	; (1103c <Svc::OutputSchedPort::addCallPort(Svc::InputSchedPort*)+0x1c>)
   11036:	f7f0 fae9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1103a:	e7f5      	b.n	11028 <Svc::OutputSchedPort::addCallPort(Svc::InputSchedPort*)+0x8>
   1103c:	2000112c 	.word	0x2000112c

00011040 <Svc::OutputSchedPort::invoke(unsigned long) const>:

  void OutputSchedPort ::
    invoke(U32 context) const
  {
   11040:	b570      	push	{r4, r5, r6, lr}
   11042:	4604      	mov	r4, r0
   11044:	b084      	sub	sp, #16
   11046:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
   11048:	f006 ff06 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   1104c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1104e:	b128      	cbz	r0, 1105c <Svc::OutputSchedPort::invoke(unsigned long) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(context);
   11050:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(context);
#endif
  }
   11052:	b004      	add	sp, #16
   11054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(context);
   11058:	f7ff bfae 	b.w	10fb8 <Svc::InputSchedPort::invoke(unsigned long)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   1105c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1105e:	b30b      	cbz	r3, 110a4 <Svc::OutputSchedPort::invoke(unsigned long) const+0x64>
    class SchedPortBuffer : public Fw::SerializeBufferBase {
   11060:	4e14      	ldr	r6, [pc, #80]	; (110b4 <Svc::OutputSchedPort::invoke(unsigned long) const+0x74>)
   11062:	4668      	mov	r0, sp
   11064:	f7ef fa6c 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(context);
   11068:	4629      	mov	r1, r5
   1106a:	4668      	mov	r0, sp
    class SchedPortBuffer : public Fw::SerializeBufferBase {
   1106c:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(context);
   1106e:	f7ef faf5 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   11072:	b958      	cbnz	r0, 1108c <Svc::OutputSchedPort::invoke(unsigned long) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
   11074:	6e60      	ldr	r0, [r4, #100]	; 0x64
   11076:	4669      	mov	r1, sp
   11078:	6803      	ldr	r3, [r0, #0]
   1107a:	695b      	ldr	r3, [r3, #20]
   1107c:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1107e:	b958      	cbnz	r0, 11098 <Svc::OutputSchedPort::invoke(unsigned long) const+0x58>
    class SchedPortBuffer : public Fw::SerializeBufferBase {
   11080:	4668      	mov	r0, sp
   11082:	9600      	str	r6, [sp, #0]
   11084:	f7ef fa64 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   11088:	b004      	add	sp, #16
   1108a:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1108c:	4601      	mov	r1, r0
   1108e:	22a4      	movs	r2, #164	; 0xa4
   11090:	4809      	ldr	r0, [pc, #36]	; (110b8 <Svc::OutputSchedPort::invoke(unsigned long) const+0x78>)
   11092:	f7f0 fac9 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   11096:	e7ed      	b.n	11074 <Svc::OutputSchedPort::invoke(unsigned long) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   11098:	4601      	mov	r1, r0
   1109a:	22a7      	movs	r2, #167	; 0xa7
   1109c:	4806      	ldr	r0, [pc, #24]	; (110b8 <Svc::OutputSchedPort::invoke(unsigned long) const+0x78>)
   1109e:	f7f0 fac3 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   110a2:	e7ed      	b.n	11080 <Svc::OutputSchedPort::invoke(unsigned long) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   110a4:	219a      	movs	r1, #154	; 0x9a
   110a6:	4804      	ldr	r0, [pc, #16]	; (110b8 <Svc::OutputSchedPort::invoke(unsigned long) const+0x78>)
   110a8:	f7f0 fab0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   110ac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   110ae:	2800      	cmp	r0, #0
   110b0:	d0d6      	beq.n	11060 <Svc::OutputSchedPort::invoke(unsigned long) const+0x20>
   110b2:	e7cd      	b.n	11050 <Svc::OutputSchedPort::invoke(unsigned long) const+0x10>
   110b4:	20003934 	.word	0x20003934
   110b8:	2000112c 	.word	0x2000112c

000110bc <Svc::InputSchedPort::init()>:
    Fw::InputPortBase::init();
   110bc:	f006 be18 	b.w	17cf0 <Fw::InputPortBase::init()>

000110c0 <Svc::OutputSchedPort::init()>:
    Fw::OutputPortBase::init();
   110c0:	f006 be40 	b.w	17d44 <Fw::OutputPortBase::init()>

000110c4 <Svc::(anonymous namespace)::PingPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputPingPort::SERIALIZED_SIZE;
        }
   110c4:	2004      	movs	r0, #4
   110c6:	4770      	bx	lr

000110c8 <Svc::(anonymous namespace)::PingPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   110c8:	300c      	adds	r0, #12
   110ca:	4770      	bx	lr

000110cc <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputPingPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
   110cc:	b530      	push	{r4, r5, lr}
   110ce:	4604      	mov	r4, r0
   110d0:	b083      	sub	sp, #12
   110d2:	460d      	mov	r5, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
   110d4:	f006 fec0 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   110d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   110da:	b17b      	cbz	r3, 110fc <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
    FW_ASSERT(this->m_func != nullptr);
   110dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   110de:	b1a3      	cbz	r3, 1110a <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x3e>

    U32 key;
    _status = _buffer.deserialize(key);
   110e0:	4628      	mov	r0, r5
   110e2:	a901      	add	r1, sp, #4
   110e4:	f7ef fdec 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   110e8:	4605      	mov	r5, r0
   110ea:	b920      	cbnz	r0, 110f6 <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, key);
   110ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   110ee:	9a01      	ldr	r2, [sp, #4]
   110f0:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   110f4:	4798      	blx	r3

    return Fw::FW_SERIALIZE_OK;
  }
   110f6:	4628      	mov	r0, r5
   110f8:	b003      	add	sp, #12
   110fa:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
   110fc:	2163      	movs	r1, #99	; 0x63
   110fe:	4805      	ldr	r0, [pc, #20]	; (11114 <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
   11100:	f7f0 fa84 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   11104:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   11106:	2b00      	cmp	r3, #0
   11108:	d1ea      	bne.n	110e0 <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   1110a:	2164      	movs	r1, #100	; 0x64
   1110c:	4801      	ldr	r0, [pc, #4]	; (11114 <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
   1110e:	f7f0 fa7d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11112:	e7e5      	b.n	110e0 <Svc::InputPingPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   11114:	200010a8 	.word	0x200010a8

00011118 <Svc::(anonymous namespace)::PingPortBuffer::~PingPortBuffer()>:
    class PingPortBuffer : public Fw::SerializeBufferBase {
   11118:	4b03      	ldr	r3, [pc, #12]	; (11128 <Svc::(anonymous namespace)::PingPortBuffer::~PingPortBuffer()+0x10>)
   1111a:	b510      	push	{r4, lr}
   1111c:	4604      	mov	r4, r0
   1111e:	6003      	str	r3, [r0, #0]
   11120:	f7ef fa16 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   11124:	4620      	mov	r0, r4
   11126:	bd10      	pop	{r4, pc}
   11128:	200038fc 	.word	0x200038fc

0001112c <Svc::(anonymous namespace)::PingPortBuffer::~PingPortBuffer()>:
   1112c:	4b05      	ldr	r3, [pc, #20]	; (11144 <Svc::(anonymous namespace)::PingPortBuffer::~PingPortBuffer()+0x18>)
   1112e:	b510      	push	{r4, lr}
   11130:	4604      	mov	r4, r0
   11132:	6003      	str	r3, [r0, #0]
   11134:	f7ef fa0c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   11138:	2110      	movs	r1, #16
   1113a:	4620      	mov	r0, r4
   1113c:	f007 fdc8 	bl	18cd0 <operator delete(void*, unsigned int)>
   11140:	4620      	mov	r0, r4
   11142:	bd10      	pop	{r4, pc}
   11144:	200038fc 	.word	0x200038fc

00011148 <Svc::OutputPingPort::~OutputPingPort()>:

  };

  //! Output Ping port
  //! Port for pinging active components
  class OutputPingPort :
   11148:	4b03      	ldr	r3, [pc, #12]	; (11158 <Svc::OutputPingPort::~OutputPingPort()+0x10>)
   1114a:	b510      	push	{r4, lr}
   1114c:	4604      	mov	r4, r0
   1114e:	6003      	str	r3, [r0, #0]
   11150:	f006 fdd4 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   11154:	4620      	mov	r0, r4
   11156:	bd10      	pop	{r4, pc}
   11158:	20003a34 	.word	0x20003a34

0001115c <Svc::OutputPingPort::~OutputPingPort()>:
   1115c:	4b05      	ldr	r3, [pc, #20]	; (11174 <Svc::OutputPingPort::~OutputPingPort()+0x18>)
   1115e:	b510      	push	{r4, lr}
   11160:	4604      	mov	r4, r0
   11162:	6003      	str	r3, [r0, #0]
   11164:	f006 fdca 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   11168:	216c      	movs	r1, #108	; 0x6c
   1116a:	4620      	mov	r0, r4
   1116c:	f007 fdb0 	bl	18cd0 <operator delete(void*, unsigned int)>
   11170:	4620      	mov	r0, r4
   11172:	bd10      	pop	{r4, pc}
   11174:	20003a34 	.word	0x20003a34

00011178 <Svc::InputPingPort::~InputPingPort()>:
  class InputPingPort :
   11178:	4b03      	ldr	r3, [pc, #12]	; (11188 <Svc::InputPingPort::~InputPingPort()+0x10>)
   1117a:	b510      	push	{r4, lr}
   1117c:	4604      	mov	r4, r0
   1117e:	6003      	str	r3, [r0, #0]
   11180:	f006 fd9e 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   11184:	4620      	mov	r0, r4
   11186:	bd10      	pop	{r4, pc}
   11188:	200039d4 	.word	0x200039d4

0001118c <Svc::InputPingPort::~InputPingPort()>:
   1118c:	4b05      	ldr	r3, [pc, #20]	; (111a4 <Svc::InputPingPort::~InputPingPort()+0x18>)
   1118e:	b510      	push	{r4, lr}
   11190:	4604      	mov	r4, r0
   11192:	6003      	str	r3, [r0, #0]
   11194:	f006 fd94 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   11198:	2170      	movs	r1, #112	; 0x70
   1119a:	4620      	mov	r0, r4
   1119c:	f007 fd98 	bl	18cd0 <operator delete(void*, unsigned int)>
   111a0:	4620      	mov	r0, r4
   111a2:	bd10      	pop	{r4, pc}
   111a4:	200039d4 	.word	0x200039d4

000111a8 <Svc::InputPingPort::InputPingPort()>:
  InputPingPort ::
   111a8:	b510      	push	{r4, lr}
   111aa:	4604      	mov	r4, r0
      m_func(nullptr)
   111ac:	f006 fd78 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   111b0:	4a02      	ldr	r2, [pc, #8]	; (111bc <Svc::InputPingPort::InputPingPort()+0x14>)
   111b2:	2300      	movs	r3, #0
  }
   111b4:	4620      	mov	r0, r4
      m_func(nullptr)
   111b6:	6022      	str	r2, [r4, #0]
   111b8:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   111ba:	bd10      	pop	{r4, pc}
   111bc:	200039d4 	.word	0x200039d4

000111c0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>:
  {
   111c0:	b570      	push	{r4, r5, r6, lr}
   111c2:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   111c4:	460d      	mov	r5, r1
  {
   111c6:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   111c8:	b121      	cbz	r1, 111d4 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   111ca:	b14e      	cbz	r6, 111e0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x20>
    this->m_comp = callComp;
   111cc:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   111ce:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   111d0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   111d2:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   111d4:	2143      	movs	r1, #67	; 0x43
   111d6:	4806      	ldr	r0, [pc, #24]	; (111f0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   111d8:	f7f0 fa18 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   111dc:	2e00      	cmp	r6, #0
   111de:	d1f5      	bne.n	111cc <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0xc>
   111e0:	2144      	movs	r1, #68	; 0x44
   111e2:	4803      	ldr	r0, [pc, #12]	; (111f0 <Svc::InputPingPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   111e4:	f7f0 fa12 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   111e8:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   111ea:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   111ec:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   111ee:	bd70      	pop	{r4, r5, r6, pc}
   111f0:	200010a8 	.word	0x200010a8

000111f4 <Svc::InputPingPort::invoke(unsigned long)>:
  {
   111f4:	b510      	push	{r4, lr}
   111f6:	4604      	mov	r4, r0
   111f8:	b082      	sub	sp, #8
   111fa:	9101      	str	r1, [sp, #4]
    this->trace();
   111fc:	f006 fe2c 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   11200:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11202:	9a01      	ldr	r2, [sp, #4]
   11204:	b13b      	cbz	r3, 11216 <Svc::InputPingPort::invoke(unsigned long)+0x22>
    FW_ASSERT(this->m_func != nullptr);
   11206:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   11208:	b16b      	cbz	r3, 11226 <Svc::InputPingPort::invoke(unsigned long)+0x32>
    return this->m_func(this->m_comp, this->m_portNum, key);
   1120a:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   1120e:	b002      	add	sp, #8
   11210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, key);
   11214:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
   11216:	2152      	movs	r1, #82	; 0x52
   11218:	4809      	ldr	r0, [pc, #36]	; (11240 <Svc::InputPingPort::invoke(unsigned long)+0x4c>)
   1121a:	f7f0 f9f7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   1121e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   11220:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   11222:	2b00      	cmp	r3, #0
   11224:	d1f1      	bne.n	1120a <Svc::InputPingPort::invoke(unsigned long)+0x16>
   11226:	2153      	movs	r1, #83	; 0x53
   11228:	4805      	ldr	r0, [pc, #20]	; (11240 <Svc::InputPingPort::invoke(unsigned long)+0x4c>)
   1122a:	9201      	str	r2, [sp, #4]
   1122c:	f7f0 f9ee 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, key);
   11230:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   11232:	9a01      	ldr	r2, [sp, #4]
   11234:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   11238:	b002      	add	sp, #8
   1123a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, key);
   1123e:	4718      	bx	r3
   11240:	200010a8 	.word	0x200010a8

00011244 <Svc::OutputPingPort::OutputPingPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputPingPort ::
   11244:	b510      	push	{r4, lr}
   11246:	4604      	mov	r4, r0
    OutputPingPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   11248:	f006 fd70 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   1124c:	4a02      	ldr	r2, [pc, #8]	; (11258 <Svc::OutputPingPort::OutputPingPort()+0x14>)
   1124e:	2300      	movs	r3, #0
  {

  }
   11250:	4620      	mov	r0, r4
      m_port(nullptr)
   11252:	6022      	str	r2, [r4, #0]
   11254:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   11256:	bd10      	pop	{r4, pc}
   11258:	20003a34 	.word	0x20003a34

0001125c <Svc::OutputPingPort::invoke(unsigned long) const>:
#endif
  }

  void OutputPingPort ::
    invoke(U32 key) const
  {
   1125c:	b570      	push	{r4, r5, r6, lr}
   1125e:	4604      	mov	r4, r0
   11260:	b084      	sub	sp, #16
   11262:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
   11264:	f006 fdf8 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   11268:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1126a:	b128      	cbz	r0, 11278 <Svc::OutputPingPort::invoke(unsigned long) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(key);
   1126c:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(key);
#endif
  }
   1126e:	b004      	add	sp, #16
   11270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(key);
   11274:	f7ff bfbe 	b.w	111f4 <Svc::InputPingPort::invoke(unsigned long)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   11278:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1127a:	b30b      	cbz	r3, 112c0 <Svc::OutputPingPort::invoke(unsigned long) const+0x64>
    class PingPortBuffer : public Fw::SerializeBufferBase {
   1127c:	4e14      	ldr	r6, [pc, #80]	; (112d0 <Svc::OutputPingPort::invoke(unsigned long) const+0x74>)
   1127e:	4668      	mov	r0, sp
   11280:	f7ef f95e 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(key);
   11284:	4629      	mov	r1, r5
   11286:	4668      	mov	r0, sp
    class PingPortBuffer : public Fw::SerializeBufferBase {
   11288:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(key);
   1128a:	f7ef f9e7 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1128e:	b958      	cbnz	r0, 112a8 <Svc::OutputPingPort::invoke(unsigned long) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
   11290:	6e60      	ldr	r0, [r4, #100]	; 0x64
   11292:	4669      	mov	r1, sp
   11294:	6803      	ldr	r3, [r0, #0]
   11296:	695b      	ldr	r3, [r3, #20]
   11298:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1129a:	b958      	cbnz	r0, 112b4 <Svc::OutputPingPort::invoke(unsigned long) const+0x58>
    class PingPortBuffer : public Fw::SerializeBufferBase {
   1129c:	4668      	mov	r0, sp
   1129e:	9600      	str	r6, [sp, #0]
   112a0:	f7ef f956 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   112a4:	b004      	add	sp, #16
   112a6:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   112a8:	4601      	mov	r1, r0
   112aa:	22a4      	movs	r2, #164	; 0xa4
   112ac:	4809      	ldr	r0, [pc, #36]	; (112d4 <Svc::OutputPingPort::invoke(unsigned long) const+0x78>)
   112ae:	f7f0 f9bb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   112b2:	e7ed      	b.n	11290 <Svc::OutputPingPort::invoke(unsigned long) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   112b4:	4601      	mov	r1, r0
   112b6:	22a7      	movs	r2, #167	; 0xa7
   112b8:	4806      	ldr	r0, [pc, #24]	; (112d4 <Svc::OutputPingPort::invoke(unsigned long) const+0x78>)
   112ba:	f7f0 f9b5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   112be:	e7ed      	b.n	1129c <Svc::OutputPingPort::invoke(unsigned long) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   112c0:	219a      	movs	r1, #154	; 0x9a
   112c2:	4804      	ldr	r0, [pc, #16]	; (112d4 <Svc::OutputPingPort::invoke(unsigned long) const+0x78>)
   112c4:	f7f0 f9a2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   112c8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   112ca:	2800      	cmp	r0, #0
   112cc:	d0d6      	beq.n	1127c <Svc::OutputPingPort::invoke(unsigned long) const+0x20>
   112ce:	e7cd      	b.n	1126c <Svc::OutputPingPort::invoke(unsigned long) const+0x10>
   112d0:	200038fc 	.word	0x200038fc
   112d4:	200010a8 	.word	0x200010a8

000112d8 <Svc::InputPingPort::init()>:
    Fw::InputPortBase::init();
   112d8:	f006 bd0a 	b.w	17cf0 <Fw::InputPortBase::init()>

000112dc <Svc::OutputPingPort::init()>:
    Fw::OutputPortBase::init();
   112dc:	f006 bd32 	b.w	17d44 <Fw::OutputPortBase::init()>

000112e0 <Os::QueueString::toChar() const>:
    QueueString& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
   112e0:	3004      	adds	r0, #4
   112e2:	4770      	bx	lr

000112e4 <Os::QueueString::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
   112e4:	2002      	movs	r0, #2
   112e6:	4770      	bx	lr

000112e8 <Fw::QueuedComponentBase::getToStringFormatString()>:
    }

#if FW_OBJECT_TO_STRING == 1
    const char* QueuedComponentBase::getToStringFormatString() {
        return "QueueComp: %s";
    }
   112e8:	4800      	ldr	r0, [pc, #0]	; (112ec <Fw::QueuedComponentBase::getToStringFormatString()+0x4>)
   112ea:	4770      	bx	lr
   112ec:	20000ae4 	.word	0x20000ae4

000112f0 <Os::QueueString::~QueueString()>:
    ~QueueString() {}
   112f0:	4b03      	ldr	r3, [pc, #12]	; (11300 <Os::QueueString::~QueueString()+0x10>)
   112f2:	b510      	push	{r4, lr}
   112f4:	4604      	mov	r4, r0
   112f6:	6003      	str	r3, [r0, #0]
   112f8:	f7ef ff9c 	bl	1234 <Fw::StringBase::~StringBase()>
   112fc:	4620      	mov	r0, r4
   112fe:	bd10      	pop	{r4, pc}
   11300:	20003468 	.word	0x20003468

00011304 <Os::QueueString::~QueueString()>:
   11304:	4b05      	ldr	r3, [pc, #20]	; (1131c <Os::QueueString::~QueueString()+0x18>)
   11306:	b510      	push	{r4, lr}
   11308:	4604      	mov	r4, r0
   1130a:	6003      	str	r3, [r0, #0]
   1130c:	f7ef ff92 	bl	1234 <Fw::StringBase::~StringBase()>
   11310:	2108      	movs	r1, #8
   11312:	4620      	mov	r0, r4
   11314:	f007 fcdc 	bl	18cd0 <operator delete(void*, unsigned int)>
   11318:	4620      	mov	r0, r4
   1131a:	bd10      	pop	{r4, pc}
   1131c:	20003468 	.word	0x20003468

00011320 <Fw::QueuedComponentBase::QueuedComponentBase(char const*)>:
    QueuedComponentBase::QueuedComponentBase(const char* name) : PassiveComponentBase(name),m_msgsDropped(0) {
   11320:	b510      	push	{r4, lr}
   11322:	4604      	mov	r4, r0
   11324:	f000 fdce 	bl	11ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>
   11328:	4b05      	ldr	r3, [pc, #20]	; (11340 <Fw::QueuedComponentBase::QueuedComponentBase(char const*)+0x20>)
   1132a:	4620      	mov	r0, r4
   1132c:	f840 3b68 	str.w	r3, [r0], #104
   11330:	f000 fcec 	bl	11d0c <Os::Queue::Queue()>
   11334:	2300      	movs	r3, #0
    }
   11336:	4620      	mov	r0, r4
    QueuedComponentBase::QueuedComponentBase(const char* name) : PassiveComponentBase(name),m_msgsDropped(0) {
   11338:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
    }
   1133c:	bd10      	pop	{r4, pc}
   1133e:	bf00      	nop
   11340:	2000316c 	.word	0x2000316c

00011344 <Fw::QueuedComponentBase::init(long)>:
        PassiveComponentBase::init(instance);
   11344:	f000 bdcc 	b.w	11ee0 <Fw::PassiveComponentBase::init(long)>

00011348 <Fw::QueuedComponentBase::incNumMsgDropped()>:
    NATIVE_INT_TYPE QueuedComponentBase::getNumMsgsDropped() {
        return this->m_msgsDropped;
    }

    void QueuedComponentBase::incNumMsgDropped() {
        this->m_msgsDropped++;
   11348:	f8d0 31e8 	ldr.w	r3, [r0, #488]	; 0x1e8
   1134c:	3301      	adds	r3, #1
   1134e:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
    }
   11352:	4770      	bx	lr

00011354 <Fw::QueuedComponentBase::~QueuedComponentBase()>:
    QueuedComponentBase::~QueuedComponentBase() {
   11354:	4b05      	ldr	r3, [pc, #20]	; (1136c <Fw::QueuedComponentBase::~QueuedComponentBase()+0x18>)
   11356:	b510      	push	{r4, lr}
   11358:	4604      	mov	r4, r0
   1135a:	f840 3b68 	str.w	r3, [r0], #104
   1135e:	f000 fa43 	bl	117e8 <Os::Queue::~Queue()>
   11362:	4620      	mov	r0, r4
   11364:	f000 fd56 	bl	11e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>
    }
   11368:	4620      	mov	r0, r4
   1136a:	bd10      	pop	{r4, pc}
   1136c:	2000316c 	.word	0x2000316c

00011370 <Fw::QueuedComponentBase::createQueue(unsigned long, unsigned long)>:
    Os::Queue::Queue::Status QueuedComponentBase::createQueue(FwSizeType depth, FwSizeType msgSize) {
   11370:	b570      	push	{r4, r5, r6, lr}
   11372:	b084      	sub	sp, #16
   11374:	4604      	mov	r4, r0
    QueueString() : StringBase() { *this = ""; }
   11376:	4e0f      	ldr	r6, [pc, #60]	; (113b4 <Fw::QueuedComponentBase::createQueue(unsigned long, unsigned long)+0x44>)
   11378:	460d      	mov	r5, r1
   1137a:	a802      	add	r0, sp, #8
   1137c:	9201      	str	r2, [sp, #4]
   1137e:	f7ef ff4f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   11382:	490d      	ldr	r1, [pc, #52]	; (113b8 <Fw::QueuedComponentBase::createQueue(unsigned long, unsigned long)+0x48>)
   11384:	a802      	add	r0, sp, #8
    QueueString() : StringBase() { *this = ""; }
   11386:	9602      	str	r6, [sp, #8]
        (void)StringBase::operator=(src);
   11388:	f7ef ffb2 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        (void)StringBase::operator=(src);
   1138c:	1d21      	adds	r1, r4, #4
   1138e:	a802      	add	r0, sp, #8
   11390:	f7ef ff8a 	bl	12a8 <Fw::StringBase::operator=(Fw::StringBase const&)>
    	return this->m_queue.create(queueName, depth, msgSize);
   11394:	9b01      	ldr	r3, [sp, #4]
   11396:	462a      	mov	r2, r5
   11398:	a902      	add	r1, sp, #8
   1139a:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1139e:	f000 f95f 	bl	11660 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)>
   113a2:	4604      	mov	r4, r0
    ~QueueString() {}
   113a4:	a802      	add	r0, sp, #8
   113a6:	9602      	str	r6, [sp, #8]
   113a8:	f7ef ff44 	bl	1234 <Fw::StringBase::~StringBase()>
    }
   113ac:	4620      	mov	r0, r4
   113ae:	b004      	add	sp, #16
   113b0:	bd70      	pop	{r4, r5, r6, pc}
   113b2:	bf00      	nop
   113b4:	20003468 	.word	0x20003468
   113b8:	20001d2c 	.word	0x20001d2c

000113bc <Os::TaskString::toChar() const>:
    TaskString& operator=(const char* src) {
        (void)StringBase::operator=(src);
        return *this;
    }

    const char* toChar() const { return this->m_buf; }
   113bc:	3004      	adds	r0, #4
   113be:	4770      	bx	lr

000113c0 <Os::TaskString::getCapacity() const>:

    StringBase::SizeType getCapacity() const { return sizeof this->m_buf; }
   113c0:	2002      	movs	r0, #2
   113c2:	4770      	bx	lr

000113c4 <Fw::ActiveComponentBase::getToStringFormatString()>:
    }

#if FW_OBJECT_TO_STRING == 1
    const char* ActiveComponentBase::getToStringFormatString() {
            return "ActComp: %s";
    }
   113c4:	4800      	ldr	r0, [pc, #0]	; (113c8 <Fw::ActiveComponentBase::getToStringFormatString()+0x4>)
   113c6:	4770      	bx	lr
   113c8:	20000a70 	.word	0x20000a70

000113cc <Fw::ActiveComponentBase::preamble()>:
        }
       return this->doDispatch();
    }

    void ActiveComponentBase::preamble() {
    }
   113cc:	4770      	bx	lr
   113ce:	bf00      	nop

000113d0 <Os::TaskString::~TaskString()>:
    ~TaskString() {}
   113d0:	4b03      	ldr	r3, [pc, #12]	; (113e0 <Os::TaskString::~TaskString()+0x10>)
   113d2:	b510      	push	{r4, lr}
   113d4:	4604      	mov	r4, r0
   113d6:	6003      	str	r3, [r0, #0]
   113d8:	f7ef ff2c 	bl	1234 <Fw::StringBase::~StringBase()>
   113dc:	4620      	mov	r0, r4
   113de:	bd10      	pop	{r4, pc}
   113e0:	20003440 	.word	0x20003440

000113e4 <Os::TaskString::~TaskString()>:
   113e4:	4b05      	ldr	r3, [pc, #20]	; (113fc <Os::TaskString::~TaskString()+0x18>)
   113e6:	b510      	push	{r4, lr}
   113e8:	4604      	mov	r4, r0
   113ea:	6003      	str	r3, [r0, #0]
   113ec:	f7ef ff22 	bl	1234 <Fw::StringBase::~StringBase()>
   113f0:	2108      	movs	r1, #8
   113f2:	4620      	mov	r0, r4
   113f4:	f007 fc6c 	bl	18cd0 <operator delete(void*, unsigned int)>
   113f8:	4620      	mov	r0, r4
   113fa:	bd10      	pop	{r4, pc}
   113fc:	20003440 	.word	0x20003440

00011400 <Fw::ActiveComponentBase::ActiveComponentBase(char const*)>:
    ActiveComponentBase::ActiveComponentBase(const char* name) : QueuedComponentBase(name) {
   11400:	b510      	push	{r4, lr}
   11402:	4604      	mov	r4, r0
   11404:	f7ff ff8c 	bl	11320 <Fw::QueuedComponentBase::QueuedComponentBase(char const*)>
   11408:	4b03      	ldr	r3, [pc, #12]	; (11418 <Fw::ActiveComponentBase::ActiveComponentBase(char const*)+0x18>)
   1140a:	f504 70f8 	add.w	r0, r4, #496	; 0x1f0
   1140e:	6023      	str	r3, [r4, #0]
   11410:	f003 f9a6 	bl	14760 <Os::Task::Task()>
    }
   11414:	4620      	mov	r0, r4
   11416:	bd10      	pop	{r4, pc}
   11418:	2000310c 	.word	0x2000310c

0001141c <Fw::ActiveComponentBase::init(long)>:
        QueuedComponentBase::init(instance);
   1141c:	f7ff bf92 	b.w	11344 <Fw::QueuedComponentBase::init(long)>

00011420 <Fw::ActiveComponentBase::~ActiveComponentBase()>:
    ActiveComponentBase::~ActiveComponentBase() {
   11420:	b510      	push	{r4, lr}
   11422:	4b06      	ldr	r3, [pc, #24]	; (1143c <Fw::ActiveComponentBase::~ActiveComponentBase()+0x1c>)
   11424:	4604      	mov	r4, r0
   11426:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
   1142a:	6023      	str	r3, [r4, #0]
   1142c:	f002 fece 	bl	141cc <Os::Task::~Task()>
   11430:	4620      	mov	r0, r4
   11432:	f7ff ff8f 	bl	11354 <Fw::QueuedComponentBase::~QueuedComponentBase()>
    }
   11436:	4620      	mov	r0, r4
   11438:	bd10      	pop	{r4, pc}
   1143a:	bf00      	nop
   1143c:	2000310c 	.word	0x2000310c

00011440 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)>:
    void ActiveComponentBase::start(Os::Task::ParamType priority, Os::Task::ParamType stackSize, Os::Task::ParamType cpuAffinity, Os::Task::ParamType identifier) {
   11440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11444:	b08f      	sub	sp, #60	; 0x3c
   11446:	4604      	mov	r4, r0
        Os::Task::taskRoutine routine = (m_task.isCooperative()) ? this->s_taskStateMachine : this->s_taskLoop;
   11448:	f500 79f8 	add.w	r9, r0, #496	; 0x1f0
    TaskString() : StringBase() { *this = ""; }
   1144c:	4d1d      	ldr	r5, [pc, #116]	; (114c4 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x84>)
   1144e:	a804      	add	r0, sp, #16
    void ActiveComponentBase::start(Os::Task::ParamType priority, Os::Task::ParamType stackSize, Os::Task::ParamType cpuAffinity, Os::Task::ParamType identifier) {
   11450:	4617      	mov	r7, r2
   11452:	4698      	mov	r8, r3
   11454:	460e      	mov	r6, r1
   11456:	f7ef fee3 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   1145a:	491b      	ldr	r1, [pc, #108]	; (114c8 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x88>)
   1145c:	a804      	add	r0, sp, #16
    TaskString() : StringBase() { *this = ""; }
   1145e:	9504      	str	r5, [sp, #16]
        (void)StringBase::operator=(src);
   11460:	f7ef ff46 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        taskName = this->getObjName();
   11464:	4620      	mov	r0, r4
   11466:	f006 fd99 	bl	17f9c <Fw::ObjBase::getObjName()>
   1146a:	4601      	mov	r1, r0
   1146c:	a804      	add	r0, sp, #16
   1146e:	f7ef ff3f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        Os::Task::taskRoutine routine = (m_task.isCooperative()) ? this->s_taskStateMachine : this->s_taskLoop;
   11472:	4648      	mov	r0, r9
   11474:	f002 fdd0 	bl	14018 <Os::Task::isCooperative()>
        Os::Task::Arguments arguments(taskName, routine, this, priority, stackSize, cpuAffinity, static_cast<PlatformUIntType>(identifier));
   11478:	9b16      	ldr	r3, [sp, #88]	; 0x58
        Os::Task::taskRoutine routine = (m_task.isCooperative()) ? this->s_taskStateMachine : this->s_taskLoop;
   1147a:	4a14      	ldr	r2, [pc, #80]	; (114cc <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x8c>)
        Os::Task::Arguments arguments(taskName, routine, this, priority, stackSize, cpuAffinity, static_cast<PlatformUIntType>(identifier));
   1147c:	a904      	add	r1, sp, #16
   1147e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   11482:	4623      	mov	r3, r4
        Os::Task::taskRoutine routine = (m_task.isCooperative()) ? this->s_taskStateMachine : this->s_taskLoop;
   11484:	4c12      	ldr	r4, [pc, #72]	; (114d0 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x90>)
        Os::Task::Arguments arguments(taskName, routine, this, priority, stackSize, cpuAffinity, static_cast<PlatformUIntType>(identifier));
   11486:	e9cd 6700 	strd	r6, r7, [sp]
   1148a:	2800      	cmp	r0, #0
   1148c:	bf18      	it	ne
   1148e:	4622      	movne	r2, r4
   11490:	a806      	add	r0, sp, #24
   11492:	f003 f93d 	bl	14710 <Os::TaskInterface::Arguments::Arguments(Fw::StringBase const&, void (*)(void*), void*, unsigned long, unsigned long, unsigned long, unsigned long)>
        Os::Task::Status status = this->m_task.start(arguments);
   11496:	a906      	add	r1, sp, #24
   11498:	4648      	mov	r0, r9
   1149a:	f002 fe27 	bl	140ec <Os::Task::start(Os::TaskInterface::Arguments const&)>
        FW_ASSERT(status == Os::Task::Status::OP_OK,static_cast<NATIVE_INT_TYPE>(status));
   1149e:	b950      	cbnz	r0, 114b6 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x76>
    ~TaskString() {}
   114a0:	a806      	add	r0, sp, #24
   114a2:	9506      	str	r5, [sp, #24]
   114a4:	f7ef fec6 	bl	1234 <Fw::StringBase::~StringBase()>
   114a8:	a804      	add	r0, sp, #16
   114aa:	9504      	str	r5, [sp, #16]
   114ac:	f7ef fec2 	bl	1234 <Fw::StringBase::~StringBase()>
    }
   114b0:	b00f      	add	sp, #60	; 0x3c
   114b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        FW_ASSERT(status == Os::Task::Status::OP_OK,static_cast<NATIVE_INT_TYPE>(status));
   114b6:	4601      	mov	r1, r0
   114b8:	223b      	movs	r2, #59	; 0x3b
   114ba:	4806      	ldr	r0, [pc, #24]	; (114d4 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x94>)
   114bc:	f7f0 f8b4 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   114c0:	e7ee      	b.n	114a0 <Fw::ActiveComponentBase::start(unsigned long, unsigned long, unsigned long, unsigned long)+0x60>
   114c2:	bf00      	nop
   114c4:	20003440 	.word	0x20003440
   114c8:	20001d2c 	.word	0x20001d2c
   114cc:	00011569 	.word	0x00011569
   114d0:	000114d9 	.word	0x000114d9
   114d4:	20000a7c 	.word	0x20000a7c

000114d8 <Fw::ActiveComponentBase::s_taskStateMachine(void*)>:
    void ActiveComponentBase::s_taskStateMachine(void* component_pointer) {
   114d8:	b510      	push	{r4, lr}
        FW_ASSERT(component_pointer != nullptr);
   114da:	4604      	mov	r4, r0
   114dc:	b378      	cbz	r0, 1153e <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x66>
        switch (component->m_stage) {
   114de:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
   114e2:	2b03      	cmp	r3, #3
   114e4:	d836      	bhi.n	11554 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x7c>
   114e6:	e8df f003 	tbb	[pc, r3]
   114ea:	1402      	.short	0x1402
   114ec:	0a0b      	.short	0x0a0b
                component->preamble();
   114ee:	6823      	ldr	r3, [r4, #0]
   114f0:	4a1b      	ldr	r2, [pc, #108]	; (11560 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x88>)
   114f2:	695b      	ldr	r3, [r3, #20]
   114f4:	4293      	cmp	r3, r2
   114f6:	d12a      	bne.n	1154e <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x76>
                component->m_stage = Lifecycle::DISPATCHING;
   114f8:	2301      	movs	r3, #1
   114fa:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
    }
   114fe:	bd10      	pop	{r4, pc}
                component->finalizer();
   11500:	6823      	ldr	r3, [r4, #0]
   11502:	4a17      	ldr	r2, [pc, #92]	; (11560 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x88>)
   11504:	699b      	ldr	r3, [r3, #24]
   11506:	4293      	cmp	r3, r2
   11508:	d11e      	bne.n	11548 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x70>
                component->m_stage = Lifecycle::DONE;
   1150a:	2303      	movs	r3, #3
   1150c:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
    }
   11510:	bd10      	pop	{r4, pc}
        if (this->m_task.isCooperative() and m_queue.getMessagesAvailable() == 0) {
   11512:	f504 70f8 	add.w	r0, r4, #496	; 0x1f0
   11516:	f002 fd7f 	bl	14018 <Os::Task::isCooperative()>
   1151a:	b948      	cbnz	r0, 11530 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x58>
       return this->doDispatch();
   1151c:	6823      	ldr	r3, [r4, #0]
   1151e:	4620      	mov	r0, r4
   11520:	691b      	ldr	r3, [r3, #16]
   11522:	4798      	blx	r3
                if (component->dispatch() == MsgDispatchStatus::MSG_DISPATCH_EXIT) {
   11524:	2803      	cmp	r0, #3
   11526:	d1ea      	bne.n	114fe <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x26>
                    component->m_stage = Lifecycle::FINALIZING;
   11528:	2302      	movs	r3, #2
   1152a:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
    }
   1152e:	bd10      	pop	{r4, pc}
        if (this->m_task.isCooperative() and m_queue.getMessagesAvailable() == 0) {
   11530:	f104 0068 	add.w	r0, r4, #104	; 0x68
   11534:	f000 fa04 	bl	11940 <Os::Queue::getMessagesAvailable() const>
   11538:	2800      	cmp	r0, #0
   1153a:	d1ef      	bne.n	1151c <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x44>
    }
   1153c:	bd10      	pop	{r4, pc}
        FW_ASSERT(component_pointer != nullptr);
   1153e:	214e      	movs	r1, #78	; 0x4e
   11540:	4808      	ldr	r0, [pc, #32]	; (11564 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x8c>)
   11542:	f7f0 f863 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11546:	e7ca      	b.n	114de <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x6>
                component->finalizer();
   11548:	4620      	mov	r0, r4
   1154a:	4798      	blx	r3
   1154c:	e7dd      	b.n	1150a <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x32>
                component->preamble();
   1154e:	4620      	mov	r0, r4
   11550:	4798      	blx	r3
   11552:	e7d1      	b.n	114f8 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x20>
                FW_ASSERT(0);
   11554:	216d      	movs	r1, #109	; 0x6d
   11556:	4803      	ldr	r0, [pc, #12]	; (11564 <Fw::ActiveComponentBase::s_taskStateMachine(void*)+0x8c>)
    }
   11558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                FW_ASSERT(0);
   1155c:	f7f0 b856 	b.w	160c <Fw::SwAssert(char const*, unsigned long)>
   11560:	000113cd 	.word	0x000113cd
   11564:	20000a7c 	.word	0x20000a7c

00011568 <Fw::ActiveComponentBase::s_taskLoop(void*)>:
    void ActiveComponentBase::s_taskLoop(void* component_pointer) {
   11568:	b510      	push	{r4, lr}
        FW_ASSERT(component_pointer != nullptr);
   1156a:	4604      	mov	r4, r0
   1156c:	b918      	cbnz	r0, 11576 <Fw::ActiveComponentBase::s_taskLoop(void*)+0xe>
   1156e:	e007      	b.n	11580 <Fw::ActiveComponentBase::s_taskLoop(void*)+0x18>
            ActiveComponentBase::s_taskStateMachine(component);
   11570:	4620      	mov	r0, r4
   11572:	f7ff ffb1 	bl	114d8 <Fw::ActiveComponentBase::s_taskStateMachine(void*)>
        while (component->m_stage != ActiveComponentBase::Lifecycle::DONE) {
   11576:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
   1157a:	2b03      	cmp	r3, #3
   1157c:	d1f8      	bne.n	11570 <Fw::ActiveComponentBase::s_taskLoop(void*)+0x8>
    }
   1157e:	bd10      	pop	{r4, pc}
        FW_ASSERT(component_pointer != nullptr);
   11580:	2173      	movs	r1, #115	; 0x73
   11582:	4802      	ldr	r0, [pc, #8]	; (1158c <Fw::ActiveComponentBase::s_taskLoop(void*)+0x24>)
   11584:	f7f0 f842 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        while (component->m_stage != ActiveComponentBase::Lifecycle::DONE) {
   11588:	e7f5      	b.n	11576 <Fw::ActiveComponentBase::s_taskLoop(void*)+0xe>
   1158a:	bf00      	nop
   1158c:	20000a7c 	.word	0x20000a7c

00011590 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)>:
                                   QueueInterface::BlockingType blockType) {
   11590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11594:	4616      	mov	r6, r2
   11596:	461f      	mov	r7, r3
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   11598:	f8d0 2178 	ldr.w	r2, [r0, #376]	; 0x178
   1159c:	f100 0318 	add.w	r3, r0, #24
                                   QueueInterface::BlockingType blockType) {
   115a0:	4604      	mov	r4, r0
   115a2:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   115a4:	429a      	cmp	r2, r3
                                   QueueInterface::BlockingType blockType) {
   115a6:	f89d 8018 	ldrb.w	r8, [sp, #24]
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   115aa:	d003      	beq.n	115b4 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x24>
   115ac:	212e      	movs	r1, #46	; 0x2e
   115ae:	4811      	ldr	r0, [pc, #68]	; (115f4 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x64>)
   115b0:	f7f0 f82c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(buffer != nullptr);
   115b4:	b1c5      	cbz	r5, 115e8 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x58>
    if (this->m_depth == 0 || this->m_size == 0) {
   115b6:	68e3      	ldr	r3, [r4, #12]
   115b8:	b183      	cbz	r3, 115dc <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x4c>
   115ba:	6923      	ldr	r3, [r4, #16]
   115bc:	b173      	cbz	r3, 115dc <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x4c>
    else if (size > this->getMessageSize()) {
   115be:	42b3      	cmp	r3, r6
   115c0:	d30f      	bcc.n	115e2 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x52>
    return this->m_delegate.send(buffer, size, priority, blockType);
   115c2:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   115c6:	463b      	mov	r3, r7
   115c8:	4632      	mov	r2, r6
   115ca:	4629      	mov	r1, r5
   115cc:	6804      	ldr	r4, [r0, #0]
   115ce:	f8cd 8018 	str.w	r8, [sp, #24]
   115d2:	6924      	ldr	r4, [r4, #16]
   115d4:	46a4      	mov	ip, r4
}
   115d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.send(buffer, size, priority, blockType);
   115da:	4760      	bx	ip
        return QueueInterface::Status::UNINITIALIZED;
   115dc:	2003      	movs	r0, #3
}
   115de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return QueueInterface::Status::SIZE_MISMATCH;
   115e2:	2004      	movs	r0, #4
}
   115e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(buffer != nullptr);
   115e8:	212f      	movs	r1, #47	; 0x2f
   115ea:	4802      	ldr	r0, [pc, #8]	; (115f4 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x64>)
   115ec:	f7f0 f80e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   115f0:	e7e1      	b.n	115b6 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)+0x26>
   115f2:	bf00      	nop
   115f4:	20000dd8 	.word	0x20000dd8

000115f8 <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)>:
                                      PlatformIntType& priority) {
   115f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   115fc:	460d      	mov	r5, r1
   115fe:	4616      	mov	r6, r2
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   11600:	f8d0 1178 	ldr.w	r1, [r0, #376]	; 0x178
   11604:	f100 0218 	add.w	r2, r0, #24
                                      PlatformIntType& priority) {
   11608:	4604      	mov	r4, r0
   1160a:	4699      	mov	r9, r3
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   1160c:	4291      	cmp	r1, r2
                                      PlatformIntType& priority) {
   1160e:	9f08      	ldr	r7, [sp, #32]
   11610:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   11614:	d003      	beq.n	1161e <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x26>
   11616:	2140      	movs	r1, #64	; 0x40
   11618:	4810      	ldr	r0, [pc, #64]	; (1165c <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x64>)
   1161a:	f7ef fff7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(destination != nullptr);
   1161e:	b1c5      	cbz	r5, 11652 <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x5a>
    if (this->m_depth == 0 || this->m_size == 0) {
   11620:	68e2      	ldr	r2, [r4, #12]
   11622:	b182      	cbz	r2, 11646 <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x4e>
   11624:	6922      	ldr	r2, [r4, #16]
   11626:	b172      	cbz	r2, 11646 <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x4e>
    else if (capacity < this->getMessageSize()) {
   11628:	42b2      	cmp	r2, r6
   1162a:	d80f      	bhi.n	1164c <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x54>
    return this->m_delegate.receive(destination, capacity, blockType, actualSize, priority);
   1162c:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   11630:	464b      	mov	r3, r9
   11632:	4632      	mov	r2, r6
   11634:	4629      	mov	r1, r5
   11636:	6804      	ldr	r4, [r0, #0]
   11638:	e9cd 7808 	strd	r7, r8, [sp, #32]
   1163c:	6964      	ldr	r4, [r4, #20]
   1163e:	46a4      	mov	ip, r4
}
   11640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return this->m_delegate.receive(destination, capacity, blockType, actualSize, priority);
   11644:	4760      	bx	ip
        return QueueInterface::Status::UNINITIALIZED;
   11646:	2003      	movs	r0, #3
}
   11648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return QueueInterface::Status::SIZE_MISMATCH;
   1164c:	2004      	movs	r0, #4
}
   1164e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FW_ASSERT(destination != nullptr);
   11652:	2141      	movs	r1, #65	; 0x41
   11654:	4801      	ldr	r0, [pc, #4]	; (1165c <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x64>)
   11656:	f7ef ffd9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1165a:	e7e1      	b.n	11620 <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)+0x28>
   1165c:	20000dd8 	.word	0x20000dd8

00011660 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)>:
QueueInterface::Status Queue ::create(const Fw::StringBase& name, FwSizeType depth, FwSizeType messageSize) {
   11660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11664:	4616      	mov	r6, r2
   11666:	461d      	mov	r5, r3
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   11668:	f8d0 2178 	ldr.w	r2, [r0, #376]	; 0x178
   1166c:	f100 0318 	add.w	r3, r0, #24
QueueInterface::Status Queue ::create(const Fw::StringBase& name, FwSizeType depth, FwSizeType messageSize) {
   11670:	b082      	sub	sp, #8
   11672:	4604      	mov	r4, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   11674:	429a      	cmp	r2, r3
QueueInterface::Status Queue ::create(const Fw::StringBase& name, FwSizeType depth, FwSizeType messageSize) {
   11676:	460f      	mov	r7, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<QueueInterface*>(&this->m_handle_storage[0]));
   11678:	d003      	beq.n	11682 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x22>
   1167a:	2115      	movs	r1, #21
   1167c:	4829      	ldr	r0, [pc, #164]	; (11724 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xc4>)
   1167e:	f7ef ffc5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(depth > 0);
   11682:	2e00      	cmp	r6, #0
   11684:	d038      	beq.n	116f8 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x98>
    FW_ASSERT(messageSize > 0);
   11686:	2d00      	cmp	r5, #0
   11688:	d03c      	beq.n	11704 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xa4>
    if (this->m_depth > 0 || this->m_size > 0) {
   1168a:	68e3      	ldr	r3, [r4, #12]
   1168c:	2b00      	cmp	r3, #0
   1168e:	d12d      	bne.n	116ec <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x8c>
   11690:	6923      	ldr	r3, [r4, #16]
   11692:	bb5b      	cbnz	r3, 116ec <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x8c>
    QueueInterface::Status status = this->m_delegate.create(name, depth, messageSize);
   11694:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   11698:	462b      	mov	r3, r5
   1169a:	4632      	mov	r2, r6
   1169c:	4639      	mov	r1, r7
   1169e:	f8d0 c000 	ldr.w	ip, [r0]
   116a2:	f8dc 800c 	ldr.w	r8, [ip, #12]
   116a6:	47c0      	blx	r8
    if (status == QueueInterface::Status::OP_OK) {
   116a8:	4680      	mov	r8, r0
   116aa:	bb08      	cbnz	r0, 116f0 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x90>
        (void)StringBase::operator=(src);
   116ac:	4639      	mov	r1, r7
    static Os::Mutex s_mutex;
   116ae:	4f1e      	ldr	r7, [pc, #120]	; (11728 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xc8>)
   116b0:	1d20      	adds	r0, r4, #4
   116b2:	f7ef fdf9 	bl	12a8 <Fw::StringBase::operator=(Fw::StringBase const&)>
   116b6:	683b      	ldr	r3, [r7, #0]
        this->m_depth = depth;
   116b8:	60e6      	str	r6, [r4, #12]
    static Os::Mutex s_mutex;
   116ba:	07db      	lsls	r3, r3, #31
        this->m_size = messageSize;
   116bc:	6125      	str	r5, [r4, #16]
    static Os::Mutex s_mutex;
   116be:	d526      	bpl.n	1170e <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xae>
        ScopeLock lock(Queue::getStaticMutex());
   116c0:	491a      	ldr	r1, [pc, #104]	; (1172c <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xcc>)
   116c2:	a801      	add	r0, sp, #4
   116c4:	f002 f980 	bl	139c8 <Os::ScopeLock::ScopeLock(Os::Mutex&)>
        Queue::s_queueCount++;
   116c8:	4a19      	ldr	r2, [pc, #100]	; (11730 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xd0>)
   116ca:	6813      	ldr	r3, [r2, #0]
   116cc:	3301      	adds	r3, #1
   116ce:	6013      	str	r3, [r2, #0]
        if (Queue::s_queueRegistry != nullptr) {
   116d0:	4b18      	ldr	r3, [pc, #96]	; (11734 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xd4>)
   116d2:	6818      	ldr	r0, [r3, #0]
   116d4:	b118      	cbz	r0, 116de <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x7e>
            Queue::s_queueRegistry->registerQueue(this);
   116d6:	6803      	ldr	r3, [r0, #0]
   116d8:	4621      	mov	r1, r4
   116da:	689b      	ldr	r3, [r3, #8]
   116dc:	4798      	blx	r3
    }
   116de:	a801      	add	r0, sp, #4
   116e0:	f002 f9ca 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
}
   116e4:	4640      	mov	r0, r8
   116e6:	b002      	add	sp, #8
   116e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return QueueInterface::Status::ALREADY_CREATED;
   116ec:	f04f 0801 	mov.w	r8, #1
}
   116f0:	4640      	mov	r0, r8
   116f2:	b002      	add	sp, #8
   116f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FW_ASSERT(depth > 0);
   116f8:	2116      	movs	r1, #22
   116fa:	480a      	ldr	r0, [pc, #40]	; (11724 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xc4>)
   116fc:	f7ef ff86 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(messageSize > 0);
   11700:	2d00      	cmp	r5, #0
   11702:	d1c2      	bne.n	1168a <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x2a>
   11704:	2117      	movs	r1, #23
   11706:	4807      	ldr	r0, [pc, #28]	; (11724 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xc4>)
   11708:	f7ef ff80 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1170c:	e7bd      	b.n	1168a <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x2a>
    static Os::Mutex s_mutex;
   1170e:	4807      	ldr	r0, [pc, #28]	; (1172c <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xcc>)
   11710:	f002 f896 	bl	13840 <Os::Mutex::Mutex()>
   11714:	2301      	movs	r3, #1
   11716:	4a08      	ldr	r2, [pc, #32]	; (11738 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xd8>)
   11718:	4908      	ldr	r1, [pc, #32]	; (1173c <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xdc>)
   1171a:	4804      	ldr	r0, [pc, #16]	; (1172c <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0xcc>)
   1171c:	603b      	str	r3, [r7, #0]
   1171e:	f008 fe2f 	bl	1a380 <__aeabi_atexit>
   11722:	e7cd      	b.n	116c0 <Os::Queue::create(Fw::StringBase const&, unsigned long, unsigned long)+0x60>
   11724:	20000dd8 	.word	0x20000dd8
   11728:	2000ba1c 	.word	0x2000ba1c
   1172c:	2000b968 	.word	0x2000b968
   11730:	2000c9cc 	.word	0x2000c9cc
   11734:	2000c9d0 	.word	0x2000c9d0
   11738:	20005a58 	.word	0x20005a58
   1173c:	000133ad 	.word	0x000133ad

00011740 <Os::Queue::~Queue()>:
Queue::~Queue() {
   11740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11744:	4b25      	ldr	r3, [pc, #148]	; (117dc <Os::Queue::~Queue()+0x9c>)
   11746:	4604      	mov	r4, r0
    m_delegate.~QueueInterface();
   11748:	f8d0 5178 	ldr.w	r5, [r0, #376]	; 0x178
Queue::~Queue() {
   1174c:	6003      	str	r3, [r0, #0]
    m_delegate.~QueueInterface();
   1174e:	682a      	ldr	r2, [r5, #0]
   11750:	4923      	ldr	r1, [pc, #140]	; (117e0 <Os::Queue::~Queue()+0xa0>)
   11752:	6812      	ldr	r2, [r2, #0]
   11754:	428a      	cmp	r2, r1
   11756:	d131      	bne.n	117bc <Os::Queue::~Queue()+0x7c>
   11758:	f8d5 6178 	ldr.w	r6, [r5, #376]	; 0x178
Queue::~Queue() {
   1175c:	602b      	str	r3, [r5, #0]
    m_delegate.~QueueInterface();
   1175e:	6831      	ldr	r1, [r6, #0]
   11760:	6809      	ldr	r1, [r1, #0]
   11762:	4291      	cmp	r1, r2
   11764:	d12f      	bne.n	117c6 <Os::Queue::~Queue()+0x86>
   11766:	f8d6 7178 	ldr.w	r7, [r6, #376]	; 0x178
Queue::~Queue() {
   1176a:	6033      	str	r3, [r6, #0]
    m_delegate.~QueueInterface();
   1176c:	683a      	ldr	r2, [r7, #0]
   1176e:	6812      	ldr	r2, [r2, #0]
   11770:	428a      	cmp	r2, r1
   11772:	d12d      	bne.n	117d0 <Os::Queue::~Queue()+0x90>
   11774:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
Queue::~Queue() {
   11778:	603b      	str	r3, [r7, #0]
    m_delegate.~QueueInterface();
   1177a:	6803      	ldr	r3, [r0, #0]
    ~QueueString() {}
   1177c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 117e4 <Os::Queue::~Queue()+0xa4>
   11780:	681b      	ldr	r3, [r3, #0]
   11782:	4798      	blx	r3
   11784:	4638      	mov	r0, r7
   11786:	f840 8f04 	str.w	r8, [r0, #4]!
   1178a:	f7ef fd53 	bl	1234 <Fw::StringBase::~StringBase()>
   1178e:	4630      	mov	r0, r6
   11790:	f840 8f04 	str.w	r8, [r0, #4]!
   11794:	f7ef fd4e 	bl	1234 <Fw::StringBase::~StringBase()>
   11798:	4628      	mov	r0, r5
   1179a:	f840 8f04 	str.w	r8, [r0, #4]!
   1179e:	f7ef fd49 	bl	1234 <Fw::StringBase::~StringBase()>
   117a2:	4620      	mov	r0, r4
   117a4:	f840 8f04 	str.w	r8, [r0, #4]!
   117a8:	f7ef fd44 	bl	1234 <Fw::StringBase::~StringBase()>
}
   117ac:	4620      	mov	r0, r4
   117ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
   117b2:	f007 fa8d 	bl	18cd0 <operator delete(void*, unsigned int)>
   117b6:	4620      	mov	r0, r4
   117b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~QueueInterface();
   117bc:	4628      	mov	r0, r5
   117be:	f8df 8024 	ldr.w	r8, [pc, #36]	; 117e4 <Os::Queue::~Queue()+0xa4>
   117c2:	4790      	blx	r2
   117c4:	e7ed      	b.n	117a2 <Os::Queue::~Queue()+0x62>
   117c6:	4630      	mov	r0, r6
   117c8:	f8df 8018 	ldr.w	r8, [pc, #24]	; 117e4 <Os::Queue::~Queue()+0xa4>
   117cc:	4788      	blx	r1
   117ce:	e7e3      	b.n	11798 <Os::Queue::~Queue()+0x58>
   117d0:	4638      	mov	r0, r7
   117d2:	f8df 8010 	ldr.w	r8, [pc, #16]	; 117e4 <Os::Queue::~Queue()+0xa4>
   117d6:	4790      	blx	r2
   117d8:	e7d9      	b.n	1178e <Os::Queue::~Queue()+0x4e>
   117da:	bf00      	nop
   117dc:	20003578 	.word	0x20003578
   117e0:	000117e9 	.word	0x000117e9
   117e4:	20003468 	.word	0x20003468

000117e8 <Os::Queue::~Queue()>:
Queue::~Queue() {
   117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117ec:	4f51      	ldr	r7, [pc, #324]	; (11934 <Os::Queue::~Queue()+0x14c>)
   117ee:	b083      	sub	sp, #12
    m_delegate.~QueueInterface();
   117f0:	f8d0 4178 	ldr.w	r4, [r0, #376]	; 0x178
Queue::~Queue() {
   117f4:	4605      	mov	r5, r0
   117f6:	6007      	str	r7, [r0, #0]
    m_delegate.~QueueInterface();
   117f8:	6823      	ldr	r3, [r4, #0]
   117fa:	4a4f      	ldr	r2, [pc, #316]	; (11938 <Os::Queue::~Queue()+0x150>)
   117fc:	681b      	ldr	r3, [r3, #0]
   117fe:	4293      	cmp	r3, r2
   11800:	d16d      	bne.n	118de <Os::Queue::~Queue()+0xf6>
   11802:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
Queue::~Queue() {
   11806:	6027      	str	r7, [r4, #0]
    m_delegate.~QueueInterface();
   11808:	6832      	ldr	r2, [r6, #0]
   1180a:	6812      	ldr	r2, [r2, #0]
   1180c:	429a      	cmp	r2, r3
   1180e:	d176      	bne.n	118fe <Os::Queue::~Queue()+0x116>
   11810:	f8d6 8178 	ldr.w	r8, [r6, #376]	; 0x178
Queue::~Queue() {
   11814:	6037      	str	r7, [r6, #0]
    m_delegate.~QueueInterface();
   11816:	f8d8 3000 	ldr.w	r3, [r8]
   1181a:	681b      	ldr	r3, [r3, #0]
   1181c:	4293      	cmp	r3, r2
   1181e:	d172      	bne.n	11906 <Os::Queue::~Queue()+0x11e>
   11820:	f8d8 9178 	ldr.w	r9, [r8, #376]	; 0x178
Queue::~Queue() {
   11824:	f8c8 7000 	str.w	r7, [r8]
    m_delegate.~QueueInterface();
   11828:	f8d9 2000 	ldr.w	r2, [r9]
   1182c:	6811      	ldr	r1, [r2, #0]
   1182e:	4299      	cmp	r1, r3
   11830:	d161      	bne.n	118f6 <Os::Queue::~Queue()+0x10e>
   11832:	f8d9 a178 	ldr.w	sl, [r9, #376]	; 0x178
Queue::~Queue() {
   11836:	f8c9 7000 	str.w	r7, [r9]
    m_delegate.~QueueInterface();
   1183a:	f8da 3000 	ldr.w	r3, [sl]
   1183e:	681a      	ldr	r2, [r3, #0]
   11840:	428a      	cmp	r2, r1
   11842:	d164      	bne.n	1190e <Os::Queue::~Queue()+0x126>
   11844:	f8da b178 	ldr.w	fp, [sl, #376]	; 0x178
Queue::~Queue() {
   11848:	f8ca 7000 	str.w	r7, [sl]
    m_delegate.~QueueInterface();
   1184c:	f8db 3000 	ldr.w	r3, [fp]
   11850:	6819      	ldr	r1, [r3, #0]
   11852:	4291      	cmp	r1, r2
   11854:	d15f      	bne.n	11916 <Os::Queue::~Queue()+0x12e>
   11856:	f8db 3178 	ldr.w	r3, [fp, #376]	; 0x178
Queue::~Queue() {
   1185a:	f8cb 7000 	str.w	r7, [fp]
    m_delegate.~QueueInterface();
   1185e:	681a      	ldr	r2, [r3, #0]
   11860:	6810      	ldr	r0, [r2, #0]
   11862:	4288      	cmp	r0, r1
   11864:	4602      	mov	r2, r0
   11866:	d15a      	bne.n	1191e <Os::Queue::~Queue()+0x136>
   11868:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
Queue::~Queue() {
   1186c:	601f      	str	r7, [r3, #0]
    m_delegate.~QueueInterface();
   1186e:	6811      	ldr	r1, [r2, #0]
   11870:	6809      	ldr	r1, [r1, #0]
   11872:	4281      	cmp	r1, r0
   11874:	d157      	bne.n	11926 <Os::Queue::~Queue()+0x13e>
   11876:	f8d2 0178 	ldr.w	r0, [r2, #376]	; 0x178
Queue::~Queue() {
   1187a:	6017      	str	r7, [r2, #0]
    m_delegate.~QueueInterface();
   1187c:	6801      	ldr	r1, [r0, #0]
   1187e:	9301      	str	r3, [sp, #4]
   11880:	6809      	ldr	r1, [r1, #0]
   11882:	9200      	str	r2, [sp, #0]
   11884:	4788      	blx	r1
   11886:	9a00      	ldr	r2, [sp, #0]
   11888:	4f2c      	ldr	r7, [pc, #176]	; (1193c <Os::Queue::~Queue()+0x154>)
   1188a:	4610      	mov	r0, r2
   1188c:	f840 7f04 	str.w	r7, [r0, #4]!
   11890:	f7ef fcd0 	bl	1234 <Fw::StringBase::~StringBase()>
}
   11894:	9b01      	ldr	r3, [sp, #4]
   11896:	4618      	mov	r0, r3
   11898:	f840 7f04 	str.w	r7, [r0, #4]!
   1189c:	f7ef fcca 	bl	1234 <Fw::StringBase::~StringBase()>
   118a0:	4658      	mov	r0, fp
   118a2:	f840 7f04 	str.w	r7, [r0, #4]!
   118a6:	f7ef fcc5 	bl	1234 <Fw::StringBase::~StringBase()>
   118aa:	4650      	mov	r0, sl
   118ac:	f840 7f04 	str.w	r7, [r0, #4]!
   118b0:	f7ef fcc0 	bl	1234 <Fw::StringBase::~StringBase()>
   118b4:	4648      	mov	r0, r9
   118b6:	f840 7f04 	str.w	r7, [r0, #4]!
   118ba:	f7ef fcbb 	bl	1234 <Fw::StringBase::~StringBase()>
   118be:	4640      	mov	r0, r8
   118c0:	f840 7f04 	str.w	r7, [r0, #4]!
   118c4:	f7ef fcb6 	bl	1234 <Fw::StringBase::~StringBase()>
   118c8:	4630      	mov	r0, r6
   118ca:	f840 7f04 	str.w	r7, [r0, #4]!
   118ce:	f7ef fcb1 	bl	1234 <Fw::StringBase::~StringBase()>
   118d2:	4620      	mov	r0, r4
   118d4:	f840 7f04 	str.w	r7, [r0, #4]!
   118d8:	f7ef fcac 	bl	1234 <Fw::StringBase::~StringBase()>
   118dc:	e002      	b.n	118e4 <Os::Queue::~Queue()+0xfc>
    m_delegate.~QueueInterface();
   118de:	4620      	mov	r0, r4
   118e0:	4f16      	ldr	r7, [pc, #88]	; (1193c <Os::Queue::~Queue()+0x154>)
   118e2:	4798      	blx	r3
   118e4:	4628      	mov	r0, r5
   118e6:	f840 7f04 	str.w	r7, [r0, #4]!
   118ea:	f7ef fca3 	bl	1234 <Fw::StringBase::~StringBase()>
}
   118ee:	4628      	mov	r0, r5
   118f0:	b003      	add	sp, #12
   118f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_delegate.~QueueInterface();
   118f6:	4648      	mov	r0, r9
   118f8:	4f10      	ldr	r7, [pc, #64]	; (1193c <Os::Queue::~Queue()+0x154>)
   118fa:	4788      	blx	r1
   118fc:	e7df      	b.n	118be <Os::Queue::~Queue()+0xd6>
   118fe:	4630      	mov	r0, r6
   11900:	4f0e      	ldr	r7, [pc, #56]	; (1193c <Os::Queue::~Queue()+0x154>)
   11902:	4790      	blx	r2
   11904:	e7e5      	b.n	118d2 <Os::Queue::~Queue()+0xea>
   11906:	4640      	mov	r0, r8
   11908:	4f0c      	ldr	r7, [pc, #48]	; (1193c <Os::Queue::~Queue()+0x154>)
   1190a:	4798      	blx	r3
   1190c:	e7dc      	b.n	118c8 <Os::Queue::~Queue()+0xe0>
   1190e:	4650      	mov	r0, sl
   11910:	4f0a      	ldr	r7, [pc, #40]	; (1193c <Os::Queue::~Queue()+0x154>)
   11912:	4790      	blx	r2
   11914:	e7ce      	b.n	118b4 <Os::Queue::~Queue()+0xcc>
   11916:	4658      	mov	r0, fp
   11918:	4f08      	ldr	r7, [pc, #32]	; (1193c <Os::Queue::~Queue()+0x154>)
   1191a:	4788      	blx	r1
   1191c:	e7c5      	b.n	118aa <Os::Queue::~Queue()+0xc2>
   1191e:	4618      	mov	r0, r3
   11920:	4f06      	ldr	r7, [pc, #24]	; (1193c <Os::Queue::~Queue()+0x154>)
   11922:	4790      	blx	r2
   11924:	e7bc      	b.n	118a0 <Os::Queue::~Queue()+0xb8>
   11926:	9300      	str	r3, [sp, #0]
   11928:	4610      	mov	r0, r2
   1192a:	4788      	blx	r1
   1192c:	4f03      	ldr	r7, [pc, #12]	; (1193c <Os::Queue::~Queue()+0x154>)
   1192e:	9b00      	ldr	r3, [sp, #0]
   11930:	e7b1      	b.n	11896 <Os::Queue::~Queue()+0xae>
   11932:	bf00      	nop
   11934:	20003578 	.word	0x20003578
   11938:	000117e9 	.word	0x000117e9
   1193c:	20003468 	.word	0x20003468

00011940 <Os::Queue::getMessagesAvailable() const>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11940:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
FwSizeType Queue::getMessagesAvailable() const {
   11944:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11946:	f100 0418 	add.w	r4, r0, #24
   1194a:	42a3      	cmp	r3, r4
   1194c:	d006      	beq.n	1195c <Os::Queue::getMessagesAvailable() const+0x1c>
   1194e:	4605      	mov	r5, r0
   11950:	214e      	movs	r1, #78	; 0x4e
   11952:	484a      	ldr	r0, [pc, #296]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   11954:	f7ef fe5a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   11958:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
   1195c:	6823      	ldr	r3, [r4, #0]
   1195e:	4d48      	ldr	r5, [pc, #288]	; (11a80 <Os::Queue::getMessagesAvailable() const+0x140>)
   11960:	699b      	ldr	r3, [r3, #24]
   11962:	42ab      	cmp	r3, r5
   11964:	f040 8085 	bne.w	11a72 <Os::Queue::getMessagesAvailable() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11968:	f104 0618 	add.w	r6, r4, #24
   1196c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11970:	42b3      	cmp	r3, r6
   11972:	d005      	beq.n	11980 <Os::Queue::getMessagesAvailable() const+0x40>
   11974:	214e      	movs	r1, #78	; 0x4e
   11976:	4841      	ldr	r0, [pc, #260]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   11978:	f7ef fe48 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   1197c:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11980:	6833      	ldr	r3, [r6, #0]
   11982:	699b      	ldr	r3, [r3, #24]
   11984:	42ab      	cmp	r3, r5
   11986:	d170      	bne.n	11a6a <Os::Queue::getMessagesAvailable() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11988:	f106 0418 	add.w	r4, r6, #24
   1198c:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11990:	42a3      	cmp	r3, r4
   11992:	d005      	beq.n	119a0 <Os::Queue::getMessagesAvailable() const+0x60>
   11994:	214e      	movs	r1, #78	; 0x4e
   11996:	4839      	ldr	r0, [pc, #228]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   11998:	f7ef fe38 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   1199c:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   119a0:	6823      	ldr	r3, [r4, #0]
   119a2:	699b      	ldr	r3, [r3, #24]
   119a4:	42ab      	cmp	r3, r5
   119a6:	d164      	bne.n	11a72 <Os::Queue::getMessagesAvailable() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   119a8:	f104 0618 	add.w	r6, r4, #24
   119ac:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   119b0:	42b3      	cmp	r3, r6
   119b2:	d005      	beq.n	119c0 <Os::Queue::getMessagesAvailable() const+0x80>
   119b4:	214e      	movs	r1, #78	; 0x4e
   119b6:	4831      	ldr	r0, [pc, #196]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   119b8:	f7ef fe28 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   119bc:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   119c0:	6833      	ldr	r3, [r6, #0]
   119c2:	699b      	ldr	r3, [r3, #24]
   119c4:	42ab      	cmp	r3, r5
   119c6:	d150      	bne.n	11a6a <Os::Queue::getMessagesAvailable() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   119c8:	f106 0418 	add.w	r4, r6, #24
   119cc:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   119d0:	42a3      	cmp	r3, r4
   119d2:	d005      	beq.n	119e0 <Os::Queue::getMessagesAvailable() const+0xa0>
   119d4:	214e      	movs	r1, #78	; 0x4e
   119d6:	4829      	ldr	r0, [pc, #164]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   119d8:	f7ef fe18 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   119dc:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   119e0:	6823      	ldr	r3, [r4, #0]
   119e2:	699b      	ldr	r3, [r3, #24]
   119e4:	42ab      	cmp	r3, r5
   119e6:	d144      	bne.n	11a72 <Os::Queue::getMessagesAvailable() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   119e8:	f104 0618 	add.w	r6, r4, #24
   119ec:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   119f0:	42b3      	cmp	r3, r6
   119f2:	d005      	beq.n	11a00 <Os::Queue::getMessagesAvailable() const+0xc0>
   119f4:	214e      	movs	r1, #78	; 0x4e
   119f6:	4821      	ldr	r0, [pc, #132]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   119f8:	f7ef fe08 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   119fc:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11a00:	6833      	ldr	r3, [r6, #0]
   11a02:	699b      	ldr	r3, [r3, #24]
   11a04:	42ab      	cmp	r3, r5
   11a06:	d130      	bne.n	11a6a <Os::Queue::getMessagesAvailable() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11a08:	f106 0418 	add.w	r4, r6, #24
   11a0c:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11a10:	42a3      	cmp	r3, r4
   11a12:	d005      	beq.n	11a20 <Os::Queue::getMessagesAvailable() const+0xe0>
   11a14:	214e      	movs	r1, #78	; 0x4e
   11a16:	4819      	ldr	r0, [pc, #100]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   11a18:	f7ef fdf8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   11a1c:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11a20:	6823      	ldr	r3, [r4, #0]
   11a22:	699b      	ldr	r3, [r3, #24]
   11a24:	42ab      	cmp	r3, r5
   11a26:	d124      	bne.n	11a72 <Os::Queue::getMessagesAvailable() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11a28:	f104 0618 	add.w	r6, r4, #24
   11a2c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11a30:	42b3      	cmp	r3, r6
   11a32:	d005      	beq.n	11a40 <Os::Queue::getMessagesAvailable() const+0x100>
   11a34:	214e      	movs	r1, #78	; 0x4e
   11a36:	4811      	ldr	r0, [pc, #68]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   11a38:	f7ef fde8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   11a3c:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11a40:	6833      	ldr	r3, [r6, #0]
   11a42:	699b      	ldr	r3, [r3, #24]
   11a44:	42ab      	cmp	r3, r5
   11a46:	d110      	bne.n	11a6a <Os::Queue::getMessagesAvailable() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11a48:	f106 0018 	add.w	r0, r6, #24
   11a4c:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11a50:	4283      	cmp	r3, r0
   11a52:	d005      	beq.n	11a60 <Os::Queue::getMessagesAvailable() const+0x120>
   11a54:	214e      	movs	r1, #78	; 0x4e
   11a56:	4809      	ldr	r0, [pc, #36]	; (11a7c <Os::Queue::getMessagesAvailable() const+0x13c>)
   11a58:	f7ef fdd8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessagesAvailable();
   11a5c:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
   11a60:	6803      	ldr	r3, [r0, #0]
}
   11a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getMessagesAvailable();
   11a66:	699b      	ldr	r3, [r3, #24]
   11a68:	4718      	bx	r3
   11a6a:	4630      	mov	r0, r6
}
   11a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getMessagesAvailable();
   11a70:	4718      	bx	r3
   11a72:	4620      	mov	r0, r4
}
   11a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getMessagesAvailable();
   11a78:	4718      	bx	r3
   11a7a:	bf00      	nop
   11a7c:	20000dd8 	.word	0x20000dd8
   11a80:	00011941 	.word	0x00011941

00011a84 <Os::Queue::getMessageHighWaterMark() const>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11a84:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
FwSizeType Queue::getMessageHighWaterMark() const {
   11a88:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11a8a:	f100 0418 	add.w	r4, r0, #24
   11a8e:	42a3      	cmp	r3, r4
   11a90:	d006      	beq.n	11aa0 <Os::Queue::getMessageHighWaterMark() const+0x1c>
   11a92:	4605      	mov	r5, r0
   11a94:	2153      	movs	r1, #83	; 0x53
   11a96:	484a      	ldr	r0, [pc, #296]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11a98:	f7ef fdb8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11a9c:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
   11aa0:	6823      	ldr	r3, [r4, #0]
   11aa2:	4d48      	ldr	r5, [pc, #288]	; (11bc4 <Os::Queue::getMessageHighWaterMark() const+0x140>)
   11aa4:	69db      	ldr	r3, [r3, #28]
   11aa6:	42ab      	cmp	r3, r5
   11aa8:	f040 8085 	bne.w	11bb6 <Os::Queue::getMessageHighWaterMark() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11aac:	f104 0618 	add.w	r6, r4, #24
   11ab0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11ab4:	42b3      	cmp	r3, r6
   11ab6:	d005      	beq.n	11ac4 <Os::Queue::getMessageHighWaterMark() const+0x40>
   11ab8:	2153      	movs	r1, #83	; 0x53
   11aba:	4841      	ldr	r0, [pc, #260]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11abc:	f7ef fda6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11ac0:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11ac4:	6833      	ldr	r3, [r6, #0]
   11ac6:	69db      	ldr	r3, [r3, #28]
   11ac8:	42ab      	cmp	r3, r5
   11aca:	d170      	bne.n	11bae <Os::Queue::getMessageHighWaterMark() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11acc:	f106 0418 	add.w	r4, r6, #24
   11ad0:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11ad4:	42a3      	cmp	r3, r4
   11ad6:	d005      	beq.n	11ae4 <Os::Queue::getMessageHighWaterMark() const+0x60>
   11ad8:	2153      	movs	r1, #83	; 0x53
   11ada:	4839      	ldr	r0, [pc, #228]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11adc:	f7ef fd96 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11ae0:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11ae4:	6823      	ldr	r3, [r4, #0]
   11ae6:	69db      	ldr	r3, [r3, #28]
   11ae8:	42ab      	cmp	r3, r5
   11aea:	d164      	bne.n	11bb6 <Os::Queue::getMessageHighWaterMark() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11aec:	f104 0618 	add.w	r6, r4, #24
   11af0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11af4:	42b3      	cmp	r3, r6
   11af6:	d005      	beq.n	11b04 <Os::Queue::getMessageHighWaterMark() const+0x80>
   11af8:	2153      	movs	r1, #83	; 0x53
   11afa:	4831      	ldr	r0, [pc, #196]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11afc:	f7ef fd86 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11b00:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11b04:	6833      	ldr	r3, [r6, #0]
   11b06:	69db      	ldr	r3, [r3, #28]
   11b08:	42ab      	cmp	r3, r5
   11b0a:	d150      	bne.n	11bae <Os::Queue::getMessageHighWaterMark() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11b0c:	f106 0418 	add.w	r4, r6, #24
   11b10:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11b14:	42a3      	cmp	r3, r4
   11b16:	d005      	beq.n	11b24 <Os::Queue::getMessageHighWaterMark() const+0xa0>
   11b18:	2153      	movs	r1, #83	; 0x53
   11b1a:	4829      	ldr	r0, [pc, #164]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11b1c:	f7ef fd76 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11b20:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11b24:	6823      	ldr	r3, [r4, #0]
   11b26:	69db      	ldr	r3, [r3, #28]
   11b28:	42ab      	cmp	r3, r5
   11b2a:	d144      	bne.n	11bb6 <Os::Queue::getMessageHighWaterMark() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11b2c:	f104 0618 	add.w	r6, r4, #24
   11b30:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11b34:	42b3      	cmp	r3, r6
   11b36:	d005      	beq.n	11b44 <Os::Queue::getMessageHighWaterMark() const+0xc0>
   11b38:	2153      	movs	r1, #83	; 0x53
   11b3a:	4821      	ldr	r0, [pc, #132]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11b3c:	f7ef fd66 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11b40:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11b44:	6833      	ldr	r3, [r6, #0]
   11b46:	69db      	ldr	r3, [r3, #28]
   11b48:	42ab      	cmp	r3, r5
   11b4a:	d130      	bne.n	11bae <Os::Queue::getMessageHighWaterMark() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11b4c:	f106 0418 	add.w	r4, r6, #24
   11b50:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11b54:	42a3      	cmp	r3, r4
   11b56:	d005      	beq.n	11b64 <Os::Queue::getMessageHighWaterMark() const+0xe0>
   11b58:	2153      	movs	r1, #83	; 0x53
   11b5a:	4819      	ldr	r0, [pc, #100]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11b5c:	f7ef fd56 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11b60:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11b64:	6823      	ldr	r3, [r4, #0]
   11b66:	69db      	ldr	r3, [r3, #28]
   11b68:	42ab      	cmp	r3, r5
   11b6a:	d124      	bne.n	11bb6 <Os::Queue::getMessageHighWaterMark() const+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11b6c:	f104 0618 	add.w	r6, r4, #24
   11b70:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11b74:	42b3      	cmp	r3, r6
   11b76:	d005      	beq.n	11b84 <Os::Queue::getMessageHighWaterMark() const+0x100>
   11b78:	2153      	movs	r1, #83	; 0x53
   11b7a:	4811      	ldr	r0, [pc, #68]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11b7c:	f7ef fd46 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11b80:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11b84:	6833      	ldr	r3, [r6, #0]
   11b86:	69db      	ldr	r3, [r3, #28]
   11b88:	42ab      	cmp	r3, r5
   11b8a:	d110      	bne.n	11bae <Os::Queue::getMessageHighWaterMark() const+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11b8c:	f106 0018 	add.w	r0, r6, #24
   11b90:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11b94:	4283      	cmp	r3, r0
   11b96:	d005      	beq.n	11ba4 <Os::Queue::getMessageHighWaterMark() const+0x120>
   11b98:	2153      	movs	r1, #83	; 0x53
   11b9a:	4809      	ldr	r0, [pc, #36]	; (11bc0 <Os::Queue::getMessageHighWaterMark() const+0x13c>)
   11b9c:	f7ef fd36 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getMessageHighWaterMark();
   11ba0:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
   11ba4:	6803      	ldr	r3, [r0, #0]
}
   11ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getMessageHighWaterMark();
   11baa:	69db      	ldr	r3, [r3, #28]
   11bac:	4718      	bx	r3
   11bae:	4630      	mov	r0, r6
}
   11bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getMessageHighWaterMark();
   11bb4:	4718      	bx	r3
   11bb6:	4620      	mov	r0, r4
}
   11bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getMessageHighWaterMark();
   11bbc:	4718      	bx	r3
   11bbe:	bf00      	nop
   11bc0:	20000dd8 	.word	0x20000dd8
   11bc4:	00011a85 	.word	0x00011a85

00011bc8 <Os::Queue::getHandle()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11bc8:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
QueueHandle* Queue::getHandle(){
   11bcc:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11bce:	f100 0418 	add.w	r4, r0, #24
   11bd2:	42a3      	cmp	r3, r4
   11bd4:	d006      	beq.n	11be4 <Os::Queue::getHandle()+0x1c>
   11bd6:	4605      	mov	r5, r0
   11bd8:	2158      	movs	r1, #88	; 0x58
   11bda:	484a      	ldr	r0, [pc, #296]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11bdc:	f7ef fd16 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11be0:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
   11be4:	6823      	ldr	r3, [r4, #0]
   11be6:	4d48      	ldr	r5, [pc, #288]	; (11d08 <Os::Queue::getHandle()+0x140>)
   11be8:	6a1b      	ldr	r3, [r3, #32]
   11bea:	42ab      	cmp	r3, r5
   11bec:	f040 8085 	bne.w	11cfa <Os::Queue::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11bf0:	f104 0618 	add.w	r6, r4, #24
   11bf4:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11bf8:	42b3      	cmp	r3, r6
   11bfa:	d005      	beq.n	11c08 <Os::Queue::getHandle()+0x40>
   11bfc:	2158      	movs	r1, #88	; 0x58
   11bfe:	4841      	ldr	r0, [pc, #260]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11c00:	f7ef fd04 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11c04:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11c08:	6833      	ldr	r3, [r6, #0]
   11c0a:	6a1b      	ldr	r3, [r3, #32]
   11c0c:	42ab      	cmp	r3, r5
   11c0e:	d170      	bne.n	11cf2 <Os::Queue::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11c10:	f106 0418 	add.w	r4, r6, #24
   11c14:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11c18:	42a3      	cmp	r3, r4
   11c1a:	d005      	beq.n	11c28 <Os::Queue::getHandle()+0x60>
   11c1c:	2158      	movs	r1, #88	; 0x58
   11c1e:	4839      	ldr	r0, [pc, #228]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11c20:	f7ef fcf4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11c24:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11c28:	6823      	ldr	r3, [r4, #0]
   11c2a:	6a1b      	ldr	r3, [r3, #32]
   11c2c:	42ab      	cmp	r3, r5
   11c2e:	d164      	bne.n	11cfa <Os::Queue::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11c30:	f104 0618 	add.w	r6, r4, #24
   11c34:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11c38:	42b3      	cmp	r3, r6
   11c3a:	d005      	beq.n	11c48 <Os::Queue::getHandle()+0x80>
   11c3c:	2158      	movs	r1, #88	; 0x58
   11c3e:	4831      	ldr	r0, [pc, #196]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11c40:	f7ef fce4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11c44:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11c48:	6833      	ldr	r3, [r6, #0]
   11c4a:	6a1b      	ldr	r3, [r3, #32]
   11c4c:	42ab      	cmp	r3, r5
   11c4e:	d150      	bne.n	11cf2 <Os::Queue::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11c50:	f106 0418 	add.w	r4, r6, #24
   11c54:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11c58:	42a3      	cmp	r3, r4
   11c5a:	d005      	beq.n	11c68 <Os::Queue::getHandle()+0xa0>
   11c5c:	2158      	movs	r1, #88	; 0x58
   11c5e:	4829      	ldr	r0, [pc, #164]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11c60:	f7ef fcd4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11c64:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11c68:	6823      	ldr	r3, [r4, #0]
   11c6a:	6a1b      	ldr	r3, [r3, #32]
   11c6c:	42ab      	cmp	r3, r5
   11c6e:	d144      	bne.n	11cfa <Os::Queue::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11c70:	f104 0618 	add.w	r6, r4, #24
   11c74:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11c78:	42b3      	cmp	r3, r6
   11c7a:	d005      	beq.n	11c88 <Os::Queue::getHandle()+0xc0>
   11c7c:	2158      	movs	r1, #88	; 0x58
   11c7e:	4821      	ldr	r0, [pc, #132]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11c80:	f7ef fcc4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11c84:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11c88:	6833      	ldr	r3, [r6, #0]
   11c8a:	6a1b      	ldr	r3, [r3, #32]
   11c8c:	42ab      	cmp	r3, r5
   11c8e:	d130      	bne.n	11cf2 <Os::Queue::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11c90:	f106 0418 	add.w	r4, r6, #24
   11c94:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11c98:	42a3      	cmp	r3, r4
   11c9a:	d005      	beq.n	11ca8 <Os::Queue::getHandle()+0xe0>
   11c9c:	2158      	movs	r1, #88	; 0x58
   11c9e:	4819      	ldr	r0, [pc, #100]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11ca0:	f7ef fcb4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11ca4:	f8d6 4178 	ldr.w	r4, [r6, #376]	; 0x178
   11ca8:	6823      	ldr	r3, [r4, #0]
   11caa:	6a1b      	ldr	r3, [r3, #32]
   11cac:	42ab      	cmp	r3, r5
   11cae:	d124      	bne.n	11cfa <Os::Queue::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11cb0:	f104 0618 	add.w	r6, r4, #24
   11cb4:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   11cb8:	42b3      	cmp	r3, r6
   11cba:	d005      	beq.n	11cc8 <Os::Queue::getHandle()+0x100>
   11cbc:	2158      	movs	r1, #88	; 0x58
   11cbe:	4811      	ldr	r0, [pc, #68]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11cc0:	f7ef fca4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11cc4:	f8d4 6178 	ldr.w	r6, [r4, #376]	; 0x178
   11cc8:	6833      	ldr	r3, [r6, #0]
   11cca:	6a1b      	ldr	r3, [r3, #32]
   11ccc:	42ab      	cmp	r3, r5
   11cce:	d110      	bne.n	11cf2 <Os::Queue::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const QueueInterface*>(&this->m_handle_storage[0]));
   11cd0:	f106 0018 	add.w	r0, r6, #24
   11cd4:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   11cd8:	4283      	cmp	r3, r0
   11cda:	d005      	beq.n	11ce8 <Os::Queue::getHandle()+0x120>
   11cdc:	2158      	movs	r1, #88	; 0x58
   11cde:	4809      	ldr	r0, [pc, #36]	; (11d04 <Os::Queue::getHandle()+0x13c>)
   11ce0:	f7ef fc94 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   11ce4:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
   11ce8:	6803      	ldr	r3, [r0, #0]
}
   11cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   11cee:	6a1b      	ldr	r3, [r3, #32]
   11cf0:	4718      	bx	r3
   11cf2:	4630      	mov	r0, r6
}
   11cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   11cf8:	4718      	bx	r3
   11cfa:	4620      	mov	r0, r4
}
   11cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   11d00:	4718      	bx	r3
   11d02:	bf00      	nop
   11d04:	20000dd8 	.word	0x20000dd8
   11d08:	00011bc9 	.word	0x00011bc9

00011d0c <Os::Queue::Queue()>:
Queue::Queue() : m_name(""), m_depth(0), m_size(0), m_delegate(*QueueInterface::getDelegate(m_handle_storage)) {}
   11d0c:	b538      	push	{r3, r4, r5, lr}
   11d0e:	4605      	mov	r5, r0
   11d10:	4b0c      	ldr	r3, [pc, #48]	; (11d44 <Os::Queue::Queue()+0x38>)
   11d12:	4604      	mov	r4, r0
   11d14:	f845 3b04 	str.w	r3, [r5], #4
    explicit QueueString(const char* src) : StringBase() { *this = src; }
   11d18:	4628      	mov	r0, r5
   11d1a:	f7ef fa81 	bl	1220 <Fw::StringBase::StringBase()>
   11d1e:	4b0a      	ldr	r3, [pc, #40]	; (11d48 <Os::Queue::Queue()+0x3c>)
        (void)StringBase::operator=(src);
   11d20:	490a      	ldr	r1, [pc, #40]	; (11d4c <Os::Queue::Queue()+0x40>)
   11d22:	4628      	mov	r0, r5
    explicit QueueString(const char* src) : StringBase() { *this = src; }
   11d24:	6063      	str	r3, [r4, #4]
        (void)StringBase::operator=(src);
   11d26:	f7ef fae3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
   11d2a:	2300      	movs	r3, #0
   11d2c:	f104 0018 	add.w	r0, r4, #24
   11d30:	e9c4 3303 	strd	r3, r3, [r4, #12]
   11d34:	f7ee f9f0 	bl	118 <Os::QueueInterface::getDelegate(unsigned char (&) [352])>
   11d38:	4603      	mov	r3, r0
   11d3a:	4620      	mov	r0, r4
   11d3c:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
   11d40:	bd38      	pop	{r3, r4, r5, pc}
   11d42:	bf00      	nop
   11d44:	20003578 	.word	0x20003578
   11d48:	20003468 	.word	0x20003468
   11d4c:	20001d2c 	.word	0x20001d2c

00011d50 <Os::Queue::send(Fw::SerializeBufferBase const&, long, Os::QueueInterface::BlockingType)>:
                                   QueueInterface::BlockingType blockType) {
   11d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d52:	461d      	mov	r5, r3
    return this->send(message.getBuffAddr(), message.getBuffLength(), priority, blockType);
   11d54:	680b      	ldr	r3, [r1, #0]
                                   QueueInterface::BlockingType blockType) {
   11d56:	b085      	sub	sp, #20
   11d58:	460c      	mov	r4, r1
   11d5a:	4606      	mov	r6, r0
    return this->send(message.getBuffAddr(), message.getBuffLength(), priority, blockType);
   11d5c:	691b      	ldr	r3, [r3, #16]
   11d5e:	4608      	mov	r0, r1
                                   QueueInterface::BlockingType blockType) {
   11d60:	4617      	mov	r7, r2
    return this->send(message.getBuffAddr(), message.getBuffLength(), priority, blockType);
   11d62:	4798      	blx	r3
   11d64:	4601      	mov	r1, r0
   11d66:	4620      	mov	r0, r4
   11d68:	9103      	str	r1, [sp, #12]
   11d6a:	f7ef f94b 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   11d6e:	463b      	mov	r3, r7
   11d70:	4602      	mov	r2, r0
   11d72:	9903      	ldr	r1, [sp, #12]
   11d74:	4630      	mov	r0, r6
   11d76:	9500      	str	r5, [sp, #0]
   11d78:	f7ff fc0a 	bl	11590 <Os::Queue::send(unsigned char const*, unsigned long, long, Os::QueueInterface::BlockingType)>
}
   11d7c:	b005      	add	sp, #20
   11d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011d80 <Os::Queue::receive(Fw::SerializeBufferBase&, Os::QueueInterface::BlockingType, long&)>:
                                      PlatformIntType& priority) {
   11d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d82:	460c      	mov	r4, r1
   11d84:	b087      	sub	sp, #28
    FwSizeType actualSize = 0;
   11d86:	2100      	movs	r1, #0
                                      PlatformIntType& priority) {
   11d88:	4605      	mov	r5, r0
    destination.resetSer();  // Reset the buffer
   11d8a:	4620      	mov	r0, r4
                                      PlatformIntType& priority) {
   11d8c:	4616      	mov	r6, r2
   11d8e:	461f      	mov	r7, r3
    FwSizeType actualSize = 0;
   11d90:	9105      	str	r1, [sp, #20]
    destination.resetSer();  // Reset the buffer
   11d92:	f7ef f92f 	bl	ff4 <Fw::SerializeBufferBase::resetSer()>
        this->receive(destination.getBuffAddrSer(), destination.getBuffCapacity(), blockType, actualSize, priority);
   11d96:	4620      	mov	r0, r4
   11d98:	f7ef f9c8 	bl	112c <Fw::SerializeBufferBase::getBuffAddrSer()>
   11d9c:	6823      	ldr	r3, [r4, #0]
   11d9e:	9003      	str	r0, [sp, #12]
   11da0:	4620      	mov	r0, r4
   11da2:	689b      	ldr	r3, [r3, #8]
   11da4:	4798      	blx	r3
   11da6:	4602      	mov	r2, r0
   11da8:	4628      	mov	r0, r5
   11daa:	ad05      	add	r5, sp, #20
   11dac:	4633      	mov	r3, r6
   11dae:	9903      	ldr	r1, [sp, #12]
   11db0:	9701      	str	r7, [sp, #4]
   11db2:	9500      	str	r5, [sp, #0]
   11db4:	f7ff fc20 	bl	115f8 <Os::Queue::receive(unsigned char*, unsigned long, Os::QueueInterface::BlockingType, unsigned long&, long&)>
    if (status == QueueInterface::Status::OP_OK) {
   11db8:	b108      	cbz	r0, 11dbe <Os::Queue::receive(Fw::SerializeBufferBase&, Os::QueueInterface::BlockingType, long&)+0x3e>
}
   11dba:	b007      	add	sp, #28
   11dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            destination.setBuffLen(static_cast<Fw::Serializable::SizeType>(actualSize));
   11dbe:	9905      	ldr	r1, [sp, #20]
   11dc0:	4620      	mov	r0, r4
   11dc2:	f7ef f95f 	bl	1084 <Fw::SerializeBufferBase::setBuffLen(unsigned long)>
        if (serializeStatus != Fw::SerializeStatus::FW_SERIALIZE_OK) {
   11dc6:	3800      	subs	r0, #0
   11dc8:	bf18      	it	ne
   11dca:	2001      	movne	r0, #1
   11dcc:	0080      	lsls	r0, r0, #2
}
   11dce:	b007      	add	sp, #28
   11dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11dd2:	bf00      	nop

00011dd4 <Fw::ExternalString::toChar() const>:
    // StringBase interface
    // ----------------------------------------------------------------------

    //! Gets the char buffer
    //! @return The char buffer
    const char* toChar() const { return this->m_bufferPtr; }
   11dd4:	6840      	ldr	r0, [r0, #4]
   11dd6:	4770      	bx	lr

00011dd8 <Fw::ExternalString::getCapacity() const>:

    //! Returns the buffer size
    //! @return The buffer size
    StringBase::SizeType getCapacity() const { return this->m_bufferSize; }
   11dd8:	6880      	ldr	r0, [r0, #8]
   11dda:	4770      	bx	lr

00011ddc <Fw::PassiveComponentBase::getToStringFormatString()>:
    }

#if FW_OBJECT_TO_STRING == 1
    const char* PassiveComponentBase::getToStringFormatString() {
        return "Comp: %s";
    }
   11ddc:	4800      	ldr	r0, [pc, #0]	; (11de0 <Fw::PassiveComponentBase::getToStringFormatString()+0x4>)
   11dde:	4770      	bx	lr
   11de0:	20000c38 	.word	0x20000c38

00011de4 <Fw::ExternalString::~ExternalString()>:
    ~ExternalString() {}
   11de4:	4b03      	ldr	r3, [pc, #12]	; (11df4 <Fw::ExternalString::~ExternalString()+0x10>)
   11de6:	b510      	push	{r4, lr}
   11de8:	4604      	mov	r4, r0
   11dea:	6003      	str	r3, [r0, #0]
   11dec:	f7ef fa22 	bl	1234 <Fw::StringBase::~StringBase()>
   11df0:	4620      	mov	r0, r4
   11df2:	bd10      	pop	{r4, pc}
   11df4:	20002fa4 	.word	0x20002fa4

00011df8 <Fw::ExternalString::~ExternalString()>:
   11df8:	4b05      	ldr	r3, [pc, #20]	; (11e10 <Fw::ExternalString::~ExternalString()+0x18>)
   11dfa:	b510      	push	{r4, lr}
   11dfc:	4604      	mov	r4, r0
   11dfe:	6003      	str	r3, [r0, #0]
   11e00:	f7ef fa18 	bl	1234 <Fw::StringBase::~StringBase()>
   11e04:	210c      	movs	r1, #12
   11e06:	4620      	mov	r0, r4
   11e08:	f006 ff62 	bl	18cd0 <operator delete(void*, unsigned int)>
   11e0c:	4620      	mov	r0, r4
   11e0e:	bd10      	pop	{r4, pc}
   11e10:	20002fa4 	.word	0x20002fa4

00011e14 <Fw::PassiveComponentBase::~PassiveComponentBase()>:
            buffer[0] = 0;
        }
    }
#endif

    PassiveComponentBase::~PassiveComponentBase() {
   11e14:	4b03      	ldr	r3, [pc, #12]	; (11e24 <Fw::PassiveComponentBase::~PassiveComponentBase()+0x10>)
   11e16:	b510      	push	{r4, lr}
   11e18:	4604      	mov	r4, r0
   11e1a:	6003      	str	r3, [r0, #0]
   11e1c:	f006 f832 	bl	17e84 <Fw::ObjBase::~ObjBase()>
    }
   11e20:	4620      	mov	r0, r4
   11e22:	bd10      	pop	{r4, pc}
   11e24:	200031e0 	.word	0x200031e0

00011e28 <Fw::PassiveComponentBase::~PassiveComponentBase()>:
    PassiveComponentBase::~PassiveComponentBase() {
   11e28:	4b05      	ldr	r3, [pc, #20]	; (11e40 <Fw::PassiveComponentBase::~PassiveComponentBase()+0x18>)
   11e2a:	b510      	push	{r4, lr}
   11e2c:	4604      	mov	r4, r0
   11e2e:	6003      	str	r3, [r0, #0]
   11e30:	f006 f828 	bl	17e84 <Fw::ObjBase::~ObjBase()>
    }
   11e34:	2164      	movs	r1, #100	; 0x64
   11e36:	4620      	mov	r0, r4
   11e38:	f006 ff4a 	bl	18cd0 <operator delete(void*, unsigned int)>
   11e3c:	4620      	mov	r0, r4
   11e3e:	bd10      	pop	{r4, pc}
   11e40:	200031e0 	.word	0x200031e0

00011e44 <Fw::PassiveComponentBase::toString(char*, long)>:
    void PassiveComponentBase::toString(char* buffer, NATIVE_INT_TYPE size) {
   11e44:	b5f0      	push	{r4, r5, r6, r7, lr}
        FW_ASSERT(size > 0);
   11e46:	1e16      	subs	r6, r2, #0
    void PassiveComponentBase::toString(char* buffer, NATIVE_INT_TYPE size) {
   11e48:	b085      	sub	sp, #20
   11e4a:	4605      	mov	r5, r0
   11e4c:	460c      	mov	r4, r1
        FW_ASSERT(size > 0);
   11e4e:	dd20      	ble.n	11e92 <Fw::PassiveComponentBase::toString(char*, long)+0x4e>
        FW_ASSERT(buffer != nullptr);
   11e50:	b32c      	cbz	r4, 11e9e <Fw::PassiveComponentBase::toString(char*, long)+0x5a>
        : StringBase(), m_bufferPtr(bufferPtr), m_bufferSize(bufferSize) {
   11e52:	a801      	add	r0, sp, #4
   11e54:	4f16      	ldr	r7, [pc, #88]	; (11eb0 <Fw::PassiveComponentBase::toString(char*, long)+0x6c>)
   11e56:	f7ef f9e3 	bl	1220 <Fw::StringBase::StringBase()>
        return *this;
    }

    // const char* assignment operator
    ExternalString& operator=(const char* src) {
        (void)StringBase::operator=(src);
   11e5a:	4916      	ldr	r1, [pc, #88]	; (11eb4 <Fw::PassiveComponentBase::toString(char*, long)+0x70>)
   11e5c:	a801      	add	r0, sp, #4
        : StringBase(), m_bufferPtr(bufferPtr), m_bufferSize(bufferSize) {
   11e5e:	9701      	str	r7, [sp, #4]
   11e60:	e9cd 4602 	strd	r4, r6, [sp, #8]
        (void)StringBase::operator=(src);
   11e64:	f7ef fa44 	bl	12f0 <Fw::StringBase::operator=(char const*)>
            this->getToStringFormatString(),
   11e68:	682b      	ldr	r3, [r5, #0]
   11e6a:	4a13      	ldr	r2, [pc, #76]	; (11eb8 <Fw::PassiveComponentBase::toString(char*, long)+0x74>)
   11e6c:	68db      	ldr	r3, [r3, #12]
   11e6e:	4293      	cmp	r3, r2
   11e70:	d11a      	bne.n	11ea8 <Fw::PassiveComponentBase::toString(char*, long)+0x64>
   11e72:	4912      	ldr	r1, [pc, #72]	; (11ebc <Fw::PassiveComponentBase::toString(char*, long)+0x78>)
        Fw::FormatStatus status = Fw::ExternalString(buffer, static_cast<Fw::ExternalString::SizeType>(size)).format(
   11e74:	f105 0208 	add.w	r2, r5, #8
   11e78:	a801      	add	r0, sp, #4
   11e7a:	f7ef fa07 	bl	128c <Fw::StringBase::format(char const*, ...)>
   11e7e:	4605      	mov	r5, r0
    ~ExternalString() {}
   11e80:	a801      	add	r0, sp, #4
   11e82:	9701      	str	r7, [sp, #4]
   11e84:	f7ef f9d6 	bl	1234 <Fw::StringBase::~StringBase()>
        if (status != Fw::FormatStatus::SUCCESS) {
   11e88:	b10d      	cbz	r5, 11e8e <Fw::PassiveComponentBase::toString(char*, long)+0x4a>
            buffer[0] = 0;
   11e8a:	2300      	movs	r3, #0
   11e8c:	7023      	strb	r3, [r4, #0]
    }
   11e8e:	b005      	add	sp, #20
   11e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FW_ASSERT(size > 0);
   11e92:	2112      	movs	r1, #18
   11e94:	480a      	ldr	r0, [pc, #40]	; (11ec0 <Fw::PassiveComponentBase::toString(char*, long)+0x7c>)
   11e96:	f7ef fbb9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        FW_ASSERT(buffer != nullptr);
   11e9a:	2c00      	cmp	r4, #0
   11e9c:	d1d9      	bne.n	11e52 <Fw::PassiveComponentBase::toString(char*, long)+0xe>
   11e9e:	2113      	movs	r1, #19
   11ea0:	4807      	ldr	r0, [pc, #28]	; (11ec0 <Fw::PassiveComponentBase::toString(char*, long)+0x7c>)
   11ea2:	f7ef fbb3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11ea6:	e7d4      	b.n	11e52 <Fw::PassiveComponentBase::toString(char*, long)+0xe>
        Fw::FormatStatus status = Fw::ExternalString(buffer, static_cast<Fw::ExternalString::SizeType>(size)).format(
   11ea8:	4628      	mov	r0, r5
   11eaa:	4798      	blx	r3
   11eac:	4601      	mov	r1, r0
   11eae:	e7e1      	b.n	11e74 <Fw::PassiveComponentBase::toString(char*, long)+0x30>
   11eb0:	20002fa4 	.word	0x20002fa4
   11eb4:	20001d2c 	.word	0x20001d2c
   11eb8:	00011ddd 	.word	0x00011ddd
   11ebc:	20000c38 	.word	0x20000c38
   11ec0:	20000c44 	.word	0x20000c44

00011ec4 <Fw::PassiveComponentBase::PassiveComponentBase(char const*)>:
    PassiveComponentBase::PassiveComponentBase(const char* name) : Fw::ObjBase(name), m_idBase(0), m_instance(0) {
   11ec4:	b510      	push	{r4, lr}
   11ec6:	4604      	mov	r4, r0
   11ec8:	f006 f836 	bl	17f38 <Fw::ObjBase::ObjBase(char const*)>
   11ecc:	2300      	movs	r3, #0
   11ece:	4a03      	ldr	r2, [pc, #12]	; (11edc <Fw::PassiveComponentBase::PassiveComponentBase(char const*)+0x18>)
    }
   11ed0:	4620      	mov	r0, r4
    PassiveComponentBase::PassiveComponentBase(const char* name) : Fw::ObjBase(name), m_idBase(0), m_instance(0) {
   11ed2:	6022      	str	r2, [r4, #0]
   11ed4:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    }
   11ed8:	bd10      	pop	{r4, pc}
   11eda:	bf00      	nop
   11edc:	200031e0 	.word	0x200031e0

00011ee0 <Fw::PassiveComponentBase::init(long)>:

    void PassiveComponentBase::init(NATIVE_INT_TYPE instance) {
   11ee0:	b538      	push	{r3, r4, r5, lr}
   11ee2:	4604      	mov	r4, r0
   11ee4:	460d      	mov	r5, r1
        ObjBase::init();
   11ee6:	f006 f84d 	bl	17f84 <Fw::ObjBase::init()>
        this->m_instance = instance;
   11eea:	6625      	str	r5, [r4, #96]	; 0x60
    }
   11eec:	bd38      	pop	{r3, r4, r5, pc}
   11eee:	bf00      	nop

00011ef0 <Fw::PassiveComponentBase::setIdBase(unsigned long)>:
    }

    void PassiveComponentBase ::
      setIdBase(const U32 idBase)
    {
      this->m_idBase = idBase;
   11ef0:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
   11ef2:	4770      	bx	lr

00011ef4 <Fw::PassiveComponentBase::getIdBase() const>:

    U32 PassiveComponentBase ::
      getIdBase() const
    {
      return this->m_idBase;
    }
   11ef4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   11ef6:	4770      	bx	lr

00011ef8 <Os::FileSystem::_removeDirectory(char const*)>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
    return this->m_delegate.getHandle();
}

FileSystem::Status FileSystem::_removeDirectory(const char* path) {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11ef8:	f100 0308 	add.w	r3, r0, #8
   11efc:	6982      	ldr	r2, [r0, #24]
   11efe:	429a      	cmp	r2, r3
FileSystem::Status FileSystem::_removeDirectory(const char* path) {
   11f00:	b570      	push	{r4, r5, r6, lr}
   11f02:	4604      	mov	r4, r0
   11f04:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11f06:	d003      	beq.n	11f10 <Os::FileSystem::_removeDirectory(char const*)+0x18>
   11f08:	2119      	movs	r1, #25
   11f0a:	4808      	ldr	r0, [pc, #32]	; (11f2c <Os::FileSystem::_removeDirectory(char const*)+0x34>)
   11f0c:	f7ef fb7e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(path != nullptr);
   11f10:	b135      	cbz	r5, 11f20 <Os::FileSystem::_removeDirectory(char const*)+0x28>
    return this->m_delegate._removeDirectory(path);
   11f12:	69a0      	ldr	r0, [r4, #24]
   11f14:	4629      	mov	r1, r5
   11f16:	6803      	ldr	r3, [r0, #0]
}
   11f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate._removeDirectory(path);
   11f1c:	68db      	ldr	r3, [r3, #12]
   11f1e:	4718      	bx	r3
    FW_ASSERT(path != nullptr);
   11f20:	211a      	movs	r1, #26
   11f22:	4802      	ldr	r0, [pc, #8]	; (11f2c <Os::FileSystem::_removeDirectory(char const*)+0x34>)
   11f24:	f7ef fb72 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11f28:	e7f3      	b.n	11f12 <Os::FileSystem::_removeDirectory(char const*)+0x1a>
   11f2a:	bf00      	nop
   11f2c:	20000d88 	.word	0x20000d88

00011f30 <Os::FileSystem::_removeFile(char const*)>:

FileSystem::Status FileSystem::_removeFile(const char* path) {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11f30:	f100 0308 	add.w	r3, r0, #8
   11f34:	6982      	ldr	r2, [r0, #24]
   11f36:	429a      	cmp	r2, r3
FileSystem::Status FileSystem::_removeFile(const char* path) {
   11f38:	b570      	push	{r4, r5, r6, lr}
   11f3a:	4604      	mov	r4, r0
   11f3c:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11f3e:	d003      	beq.n	11f48 <Os::FileSystem::_removeFile(char const*)+0x18>
   11f40:	211f      	movs	r1, #31
   11f42:	4808      	ldr	r0, [pc, #32]	; (11f64 <Os::FileSystem::_removeFile(char const*)+0x34>)
   11f44:	f7ef fb62 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(path != nullptr);
   11f48:	b135      	cbz	r5, 11f58 <Os::FileSystem::_removeFile(char const*)+0x28>
    return this->m_delegate._removeFile(path);
   11f4a:	69a0      	ldr	r0, [r4, #24]
   11f4c:	4629      	mov	r1, r5
   11f4e:	6803      	ldr	r3, [r0, #0]
}
   11f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate._removeFile(path);
   11f54:	691b      	ldr	r3, [r3, #16]
   11f56:	4718      	bx	r3
    FW_ASSERT(path != nullptr);
   11f58:	2120      	movs	r1, #32
   11f5a:	4802      	ldr	r0, [pc, #8]	; (11f64 <Os::FileSystem::_removeFile(char const*)+0x34>)
   11f5c:	f7ef fb56 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11f60:	e7f3      	b.n	11f4a <Os::FileSystem::_removeFile(char const*)+0x1a>
   11f62:	bf00      	nop
   11f64:	20000d88 	.word	0x20000d88

00011f68 <Os::FileSystem::_rename(char const*, char const*)>:

FileSystem::Status FileSystem::_rename(const char* sourcePath, const char* destPath) {
   11f68:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11f6a:	f100 0308 	add.w	r3, r0, #8
FileSystem::Status FileSystem::_rename(const char* sourcePath, const char* destPath) {
   11f6e:	4616      	mov	r6, r2
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11f70:	6982      	ldr	r2, [r0, #24]
FileSystem::Status FileSystem::_rename(const char* sourcePath, const char* destPath) {
   11f72:	4604      	mov	r4, r0
   11f74:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11f76:	429a      	cmp	r2, r3
   11f78:	d003      	beq.n	11f82 <Os::FileSystem::_rename(char const*, char const*)+0x1a>
   11f7a:	2125      	movs	r1, #37	; 0x25
   11f7c:	480b      	ldr	r0, [pc, #44]	; (11fac <Os::FileSystem::_rename(char const*, char const*)+0x44>)
   11f7e:	f7ef fb45 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(sourcePath != nullptr);
   11f82:	b145      	cbz	r5, 11f96 <Os::FileSystem::_rename(char const*, char const*)+0x2e>
    FW_ASSERT(destPath != nullptr);
   11f84:	b16e      	cbz	r6, 11fa2 <Os::FileSystem::_rename(char const*, char const*)+0x3a>
    return this->m_delegate._rename(sourcePath, destPath);
   11f86:	69a0      	ldr	r0, [r4, #24]
   11f88:	4632      	mov	r2, r6
   11f8a:	4629      	mov	r1, r5
   11f8c:	6803      	ldr	r3, [r0, #0]
}
   11f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate._rename(sourcePath, destPath);
   11f92:	695b      	ldr	r3, [r3, #20]
   11f94:	4718      	bx	r3
    FW_ASSERT(sourcePath != nullptr);
   11f96:	2126      	movs	r1, #38	; 0x26
   11f98:	4804      	ldr	r0, [pc, #16]	; (11fac <Os::FileSystem::_rename(char const*, char const*)+0x44>)
   11f9a:	f7ef fb37 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(destPath != nullptr);
   11f9e:	2e00      	cmp	r6, #0
   11fa0:	d1f1      	bne.n	11f86 <Os::FileSystem::_rename(char const*, char const*)+0x1e>
   11fa2:	2127      	movs	r1, #39	; 0x27
   11fa4:	4801      	ldr	r0, [pc, #4]	; (11fac <Os::FileSystem::_rename(char const*, char const*)+0x44>)
   11fa6:	f7ef fb31 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11faa:	e7ec      	b.n	11f86 <Os::FileSystem::_rename(char const*, char const*)+0x1e>
   11fac:	20000d88 	.word	0x20000d88

00011fb0 <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)>:

FileSystem::Status FileSystem::_getWorkingDirectory(char* path, FwSizeType bufferSize) {
   11fb0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11fb2:	f100 0308 	add.w	r3, r0, #8
FileSystem::Status FileSystem::_getWorkingDirectory(char* path, FwSizeType bufferSize) {
   11fb6:	4616      	mov	r6, r2
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11fb8:	6982      	ldr	r2, [r0, #24]
FileSystem::Status FileSystem::_getWorkingDirectory(char* path, FwSizeType bufferSize) {
   11fba:	4604      	mov	r4, r0
   11fbc:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11fbe:	429a      	cmp	r2, r3
   11fc0:	d003      	beq.n	11fca <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x1a>
   11fc2:	212c      	movs	r1, #44	; 0x2c
   11fc4:	480b      	ldr	r0, [pc, #44]	; (11ff4 <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x44>)
   11fc6:	f7ef fb21 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(path != nullptr);
   11fca:	b16d      	cbz	r5, 11fe8 <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x38>
    FW_ASSERT(bufferSize > 0); // because bufferSize=0 would trigger a malloc in some implementations (e.g. Posix)
   11fcc:	b13e      	cbz	r6, 11fde <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x2e>
    return this->m_delegate._getWorkingDirectory(path, bufferSize);
   11fce:	69a0      	ldr	r0, [r4, #24]
   11fd0:	4632      	mov	r2, r6
   11fd2:	4629      	mov	r1, r5
   11fd4:	6803      	ldr	r3, [r0, #0]
}
   11fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate._getWorkingDirectory(path, bufferSize);
   11fda:	69db      	ldr	r3, [r3, #28]
   11fdc:	4718      	bx	r3
    FW_ASSERT(bufferSize > 0); // because bufferSize=0 would trigger a malloc in some implementations (e.g. Posix)
   11fde:	212e      	movs	r1, #46	; 0x2e
   11fe0:	4804      	ldr	r0, [pc, #16]	; (11ff4 <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x44>)
   11fe2:	f7ef fb13 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11fe6:	e7f2      	b.n	11fce <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x1e>
    FW_ASSERT(path != nullptr);
   11fe8:	212d      	movs	r1, #45	; 0x2d
   11fea:	4802      	ldr	r0, [pc, #8]	; (11ff4 <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x44>)
   11fec:	f7ef fb0e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   11ff0:	e7ec      	b.n	11fcc <Os::FileSystem::_getWorkingDirectory(char*, unsigned long)+0x1c>
   11ff2:	bf00      	nop
   11ff4:	20000d88 	.word	0x20000d88

00011ff8 <Os::FileSystem::_changeWorkingDirectory(char const*)>:

FileSystem::Status FileSystem::_changeWorkingDirectory(const char* path) {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   11ff8:	f100 0308 	add.w	r3, r0, #8
   11ffc:	6982      	ldr	r2, [r0, #24]
   11ffe:	429a      	cmp	r2, r3
FileSystem::Status FileSystem::_changeWorkingDirectory(const char* path) {
   12000:	b570      	push	{r4, r5, r6, lr}
   12002:	4604      	mov	r4, r0
   12004:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12006:	d003      	beq.n	12010 <Os::FileSystem::_changeWorkingDirectory(char const*)+0x18>
   12008:	2133      	movs	r1, #51	; 0x33
   1200a:	4808      	ldr	r0, [pc, #32]	; (1202c <Os::FileSystem::_changeWorkingDirectory(char const*)+0x34>)
   1200c:	f7ef fafe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(path != nullptr);
   12010:	b135      	cbz	r5, 12020 <Os::FileSystem::_changeWorkingDirectory(char const*)+0x28>
    return this->m_delegate._changeWorkingDirectory(path);
   12012:	69a0      	ldr	r0, [r4, #24]
   12014:	4629      	mov	r1, r5
   12016:	6803      	ldr	r3, [r0, #0]
}
   12018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate._changeWorkingDirectory(path);
   1201c:	6a1b      	ldr	r3, [r3, #32]
   1201e:	4718      	bx	r3
    FW_ASSERT(path != nullptr);
   12020:	2134      	movs	r1, #52	; 0x34
   12022:	4802      	ldr	r0, [pc, #8]	; (1202c <Os::FileSystem::_changeWorkingDirectory(char const*)+0x34>)
   12024:	f7ef faf2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   12028:	e7f3      	b.n	12012 <Os::FileSystem::_changeWorkingDirectory(char const*)+0x1a>
   1202a:	bf00      	nop
   1202c:	20000d88 	.word	0x20000d88

00012030 <Os::FileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)>:

FileSystem::Status FileSystem::_getFreeSpace(const char* path, FwSizeType& totalBytes, FwSizeType& freeBytes) {
   12030:	b530      	push	{r4, r5, lr}
   12032:	4604      	mov	r4, r0
   12034:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12036:	f100 0108 	add.w	r1, r0, #8
   1203a:	6980      	ldr	r0, [r0, #24]
FileSystem::Status FileSystem::_getFreeSpace(const char* path, FwSizeType& totalBytes, FwSizeType& freeBytes) {
   1203c:	b083      	sub	sp, #12
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1203e:	4288      	cmp	r0, r1
   12040:	d007      	beq.n	12052 <Os::FileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)+0x22>
   12042:	2139      	movs	r1, #57	; 0x39
   12044:	480c      	ldr	r0, [pc, #48]	; (12078 <Os::FileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)+0x48>)
   12046:	e9cd 2300 	strd	r2, r3, [sp]
   1204a:	f7ef fadf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1204e:	e9dd 2300 	ldrd	r2, r3, [sp]
    FW_ASSERT(path != nullptr);
   12052:	b145      	cbz	r5, 12066 <Os::FileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)+0x36>
    return this->m_delegate._getFreeSpace(path, totalBytes, freeBytes);
   12054:	69a0      	ldr	r0, [r4, #24]
   12056:	4629      	mov	r1, r5
   12058:	6804      	ldr	r4, [r0, #0]
   1205a:	69a4      	ldr	r4, [r4, #24]
   1205c:	46a4      	mov	ip, r4
}
   1205e:	b003      	add	sp, #12
   12060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return this->m_delegate._getFreeSpace(path, totalBytes, freeBytes);
   12064:	4760      	bx	ip
    FW_ASSERT(path != nullptr);
   12066:	213a      	movs	r1, #58	; 0x3a
   12068:	4803      	ldr	r0, [pc, #12]	; (12078 <Os::FileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)+0x48>)
   1206a:	e9cd 2300 	strd	r2, r3, [sp]
   1206e:	f7ef facd 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   12072:	e9dd 2300 	ldrd	r2, r3, [sp]
   12076:	e7ed      	b.n	12054 <Os::FileSystem::_getFreeSpace(char const*, unsigned long&, unsigned long&)+0x24>
   12078:	20000d88 	.word	0x20000d88

0001207c <Os::FileSystem::getSingleton() [clone .part.0]>:
void FileSystem::init() {
    // Force trigger on the fly singleton setup
    (void) FileSystem::getSingleton();
}

FileSystem& FileSystem::getSingleton() {
   1207c:	b538      	push	{r3, r4, r5, lr}
FileSystem::FileSystem() : m_handle_storage(), m_delegate(*FileSystemInterface::getDelegate(m_handle_storage)) {
   1207e:	4d0f      	ldr	r5, [pc, #60]	; (120bc <Os::FileSystem::getSingleton() [clone .part.0]+0x40>)
   12080:	2300      	movs	r3, #0
   12082:	4a0f      	ldr	r2, [pc, #60]	; (120c0 <Os::FileSystem::getSingleton() [clone .part.0]+0x44>)
   12084:	462c      	mov	r4, r5
   12086:	60ab      	str	r3, [r5, #8]
   12088:	f844 2b08 	str.w	r2, [r4], #8
   1208c:	4620      	mov	r0, r4
   1208e:	60e3      	str	r3, [r4, #12]
   12090:	e9c4 3301 	strd	r3, r3, [r4, #4]
   12094:	f7ee f83a 	bl	10c <Os::FileSystemInterface::getDelegate(unsigned char (&) [16])>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12098:	42a0      	cmp	r0, r4
FileSystem::FileSystem() : m_handle_storage(), m_delegate(*FileSystemInterface::getDelegate(m_handle_storage)) {
   1209a:	61a8      	str	r0, [r5, #24]
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1209c:	d003      	beq.n	120a6 <Os::FileSystem::getSingleton() [clone .part.0]+0x2a>
   1209e:	210b      	movs	r1, #11
   120a0:	4808      	ldr	r0, [pc, #32]	; (120c4 <Os::FileSystem::getSingleton() [clone .part.0]+0x48>)
   120a2:	f7ef fab3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    static FileSystem s_singleton;
   120a6:	4b08      	ldr	r3, [pc, #32]	; (120c8 <Os::FileSystem::getSingleton() [clone .part.0]+0x4c>)
   120a8:	2401      	movs	r4, #1
   120aa:	4a08      	ldr	r2, [pc, #32]	; (120cc <Os::FileSystem::getSingleton() [clone .part.0]+0x50>)
   120ac:	601c      	str	r4, [r3, #0]
   120ae:	4908      	ldr	r1, [pc, #32]	; (120d0 <Os::FileSystem::getSingleton() [clone .part.0]+0x54>)
   120b0:	4802      	ldr	r0, [pc, #8]	; (120bc <Os::FileSystem::getSingleton() [clone .part.0]+0x40>)
    return s_singleton;
}
   120b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    static FileSystem s_singleton;
   120b6:	f008 b963 	b.w	1a380 <__aeabi_atexit>
   120ba:	bf00      	nop
   120bc:	2000b888 	.word	0x2000b888
   120c0:	20003414 	.word	0x20003414
   120c4:	20000d88 	.word	0x20000d88
   120c8:	2000ba10 	.word	0x2000ba10
   120cc:	20005a58 	.word	0x20005a58
   120d0:	00012195 	.word	0x00012195

000120d4 <Os::FileSystem::~FileSystem()>:
FileSystem::~FileSystem() {
   120d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   120d8:	6983      	ldr	r3, [r0, #24]
FileSystem::~FileSystem() {
   120da:	4604      	mov	r4, r0
   120dc:	4f2a      	ldr	r7, [pc, #168]	; (12188 <Os::FileSystem::~FileSystem()+0xb4>)
   120de:	4605      	mov	r5, r0
   120e0:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   120e4:	42a3      	cmp	r3, r4
   120e6:	d004      	beq.n	120f2 <Os::FileSystem::~FileSystem()+0x1e>
   120e8:	210f      	movs	r1, #15
   120ea:	4828      	ldr	r0, [pc, #160]	; (1218c <Os::FileSystem::~FileSystem()+0xb8>)
   120ec:	f7ef fa8e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   120f0:	69ac      	ldr	r4, [r5, #24]
   120f2:	6823      	ldr	r3, [r4, #0]
   120f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 12190 <Os::FileSystem::~FileSystem()+0xbc>
   120f8:	681b      	ldr	r3, [r3, #0]
   120fa:	4543      	cmp	r3, r8
   120fc:	d132      	bne.n	12164 <Os::FileSystem::~FileSystem()+0x90>
FileSystem::~FileSystem() {
   120fe:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12100:	69a3      	ldr	r3, [r4, #24]
FileSystem::~FileSystem() {
   12102:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12106:	42b3      	cmp	r3, r6
   12108:	d004      	beq.n	12114 <Os::FileSystem::~FileSystem()+0x40>
   1210a:	210f      	movs	r1, #15
   1210c:	481f      	ldr	r0, [pc, #124]	; (1218c <Os::FileSystem::~FileSystem()+0xb8>)
   1210e:	f7ef fa7d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   12112:	69a6      	ldr	r6, [r4, #24]
   12114:	6833      	ldr	r3, [r6, #0]
   12116:	681b      	ldr	r3, [r3, #0]
   12118:	4543      	cmp	r3, r8
   1211a:	d12c      	bne.n	12176 <Os::FileSystem::~FileSystem()+0xa2>
FileSystem::~FileSystem() {
   1211c:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1211e:	69b3      	ldr	r3, [r6, #24]
FileSystem::~FileSystem() {
   12120:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12124:	42a3      	cmp	r3, r4
   12126:	d004      	beq.n	12132 <Os::FileSystem::~FileSystem()+0x5e>
   12128:	210f      	movs	r1, #15
   1212a:	4818      	ldr	r0, [pc, #96]	; (1218c <Os::FileSystem::~FileSystem()+0xb8>)
   1212c:	f7ef fa6e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   12130:	69b4      	ldr	r4, [r6, #24]
   12132:	6823      	ldr	r3, [r4, #0]
FileSystem::~FileSystem() {
   12134:	4620      	mov	r0, r4
    m_delegate.~FileSystemInterface();
   12136:	681b      	ldr	r3, [r3, #0]
   12138:	4543      	cmp	r3, r8
   1213a:	d114      	bne.n	12166 <Os::FileSystem::~FileSystem()+0x92>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1213c:	69a3      	ldr	r3, [r4, #24]
FileSystem::~FileSystem() {
   1213e:	f840 7b08 	str.w	r7, [r0], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12142:	4283      	cmp	r3, r0
   12144:	d004      	beq.n	12150 <Os::FileSystem::~FileSystem()+0x7c>
   12146:	210f      	movs	r1, #15
   12148:	4810      	ldr	r0, [pc, #64]	; (1218c <Os::FileSystem::~FileSystem()+0xb8>)
   1214a:	f7ef fa5f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   1214e:	69a0      	ldr	r0, [r4, #24]
   12150:	6803      	ldr	r3, [r0, #0]
   12152:	681b      	ldr	r3, [r3, #0]
   12154:	4798      	blx	r3
}
   12156:	4628      	mov	r0, r5
   12158:	2120      	movs	r1, #32
   1215a:	f006 fdb9 	bl	18cd0 <operator delete(void*, unsigned int)>
   1215e:	4628      	mov	r0, r5
   12160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~FileSystemInterface();
   12164:	4620      	mov	r0, r4
   12166:	4798      	blx	r3
}
   12168:	4628      	mov	r0, r5
   1216a:	2120      	movs	r1, #32
   1216c:	f006 fdb0 	bl	18cd0 <operator delete(void*, unsigned int)>
   12170:	4628      	mov	r0, r5
   12172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~FileSystemInterface();
   12176:	4630      	mov	r0, r6
   12178:	4798      	blx	r3
}
   1217a:	4628      	mov	r0, r5
   1217c:	2120      	movs	r1, #32
   1217e:	f006 fda7 	bl	18cd0 <operator delete(void*, unsigned int)>
   12182:	4628      	mov	r0, r5
   12184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12188:	20003414 	.word	0x20003414
   1218c:	20000d88 	.word	0x20000d88
   12190:	00012195 	.word	0x00012195

00012194 <Os::FileSystem::~FileSystem()>:
FileSystem::~FileSystem() {
   12194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12198:	6983      	ldr	r3, [r0, #24]
FileSystem::~FileSystem() {
   1219a:	4604      	mov	r4, r0
   1219c:	4f4a      	ldr	r7, [pc, #296]	; (122c8 <Os::FileSystem::~FileSystem()+0x134>)
   1219e:	4605      	mov	r5, r0
   121a0:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   121a4:	42a3      	cmp	r3, r4
   121a6:	d004      	beq.n	121b2 <Os::FileSystem::~FileSystem()+0x1e>
   121a8:	210f      	movs	r1, #15
   121aa:	4848      	ldr	r0, [pc, #288]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   121ac:	f7ef fa2e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   121b0:	69ac      	ldr	r4, [r5, #24]
   121b2:	6823      	ldr	r3, [r4, #0]
   121b4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 122d0 <Os::FileSystem::~FileSystem()+0x13c>
   121b8:	681b      	ldr	r3, [r3, #0]
   121ba:	4543      	cmp	r3, r8
   121bc:	d17e      	bne.n	122bc <Os::FileSystem::~FileSystem()+0x128>
FileSystem::~FileSystem() {
   121be:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   121c0:	69a3      	ldr	r3, [r4, #24]
FileSystem::~FileSystem() {
   121c2:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   121c6:	42b3      	cmp	r3, r6
   121c8:	d004      	beq.n	121d4 <Os::FileSystem::~FileSystem()+0x40>
   121ca:	210f      	movs	r1, #15
   121cc:	483f      	ldr	r0, [pc, #252]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   121ce:	f7ef fa1d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   121d2:	69a6      	ldr	r6, [r4, #24]
   121d4:	6833      	ldr	r3, [r6, #0]
   121d6:	681b      	ldr	r3, [r3, #0]
   121d8:	4543      	cmp	r3, r8
   121da:	d16a      	bne.n	122b2 <Os::FileSystem::~FileSystem()+0x11e>
FileSystem::~FileSystem() {
   121dc:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   121de:	69b3      	ldr	r3, [r6, #24]
FileSystem::~FileSystem() {
   121e0:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   121e4:	42a3      	cmp	r3, r4
   121e6:	d004      	beq.n	121f2 <Os::FileSystem::~FileSystem()+0x5e>
   121e8:	210f      	movs	r1, #15
   121ea:	4838      	ldr	r0, [pc, #224]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   121ec:	f7ef fa0e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   121f0:	69b4      	ldr	r4, [r6, #24]
   121f2:	6823      	ldr	r3, [r4, #0]
   121f4:	681b      	ldr	r3, [r3, #0]
   121f6:	4543      	cmp	r3, r8
   121f8:	d160      	bne.n	122bc <Os::FileSystem::~FileSystem()+0x128>
FileSystem::~FileSystem() {
   121fa:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   121fc:	69a3      	ldr	r3, [r4, #24]
FileSystem::~FileSystem() {
   121fe:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12202:	42b3      	cmp	r3, r6
   12204:	d004      	beq.n	12210 <Os::FileSystem::~FileSystem()+0x7c>
   12206:	210f      	movs	r1, #15
   12208:	4830      	ldr	r0, [pc, #192]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   1220a:	f7ef f9ff 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   1220e:	69a6      	ldr	r6, [r4, #24]
   12210:	6833      	ldr	r3, [r6, #0]
   12212:	681b      	ldr	r3, [r3, #0]
   12214:	4543      	cmp	r3, r8
   12216:	d14c      	bne.n	122b2 <Os::FileSystem::~FileSystem()+0x11e>
FileSystem::~FileSystem() {
   12218:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1221a:	69b3      	ldr	r3, [r6, #24]
FileSystem::~FileSystem() {
   1221c:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12220:	42a3      	cmp	r3, r4
   12222:	d004      	beq.n	1222e <Os::FileSystem::~FileSystem()+0x9a>
   12224:	210f      	movs	r1, #15
   12226:	4829      	ldr	r0, [pc, #164]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   12228:	f7ef f9f0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   1222c:	69b4      	ldr	r4, [r6, #24]
   1222e:	6823      	ldr	r3, [r4, #0]
   12230:	681b      	ldr	r3, [r3, #0]
   12232:	4543      	cmp	r3, r8
   12234:	d142      	bne.n	122bc <Os::FileSystem::~FileSystem()+0x128>
FileSystem::~FileSystem() {
   12236:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12238:	69a3      	ldr	r3, [r4, #24]
FileSystem::~FileSystem() {
   1223a:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1223e:	42b3      	cmp	r3, r6
   12240:	d004      	beq.n	1224c <Os::FileSystem::~FileSystem()+0xb8>
   12242:	210f      	movs	r1, #15
   12244:	4821      	ldr	r0, [pc, #132]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   12246:	f7ef f9e1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   1224a:	69a6      	ldr	r6, [r4, #24]
   1224c:	6833      	ldr	r3, [r6, #0]
   1224e:	681b      	ldr	r3, [r3, #0]
   12250:	4543      	cmp	r3, r8
   12252:	d12e      	bne.n	122b2 <Os::FileSystem::~FileSystem()+0x11e>
FileSystem::~FileSystem() {
   12254:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12256:	69b3      	ldr	r3, [r6, #24]
FileSystem::~FileSystem() {
   12258:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1225c:	42a3      	cmp	r3, r4
   1225e:	d004      	beq.n	1226a <Os::FileSystem::~FileSystem()+0xd6>
   12260:	210f      	movs	r1, #15
   12262:	481a      	ldr	r0, [pc, #104]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   12264:	f7ef f9d2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   12268:	69b4      	ldr	r4, [r6, #24]
   1226a:	6823      	ldr	r3, [r4, #0]
   1226c:	681b      	ldr	r3, [r3, #0]
   1226e:	4543      	cmp	r3, r8
   12270:	d124      	bne.n	122bc <Os::FileSystem::~FileSystem()+0x128>
FileSystem::~FileSystem() {
   12272:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12274:	69a3      	ldr	r3, [r4, #24]
FileSystem::~FileSystem() {
   12276:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1227a:	42b3      	cmp	r3, r6
   1227c:	d004      	beq.n	12288 <Os::FileSystem::~FileSystem()+0xf4>
   1227e:	210f      	movs	r1, #15
   12280:	4812      	ldr	r0, [pc, #72]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   12282:	f7ef f9c3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   12286:	69a6      	ldr	r6, [r4, #24]
   12288:	6833      	ldr	r3, [r6, #0]
FileSystem::~FileSystem() {
   1228a:	4630      	mov	r0, r6
    m_delegate.~FileSystemInterface();
   1228c:	681b      	ldr	r3, [r3, #0]
   1228e:	4543      	cmp	r3, r8
   12290:	d115      	bne.n	122be <Os::FileSystem::~FileSystem()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12292:	69b3      	ldr	r3, [r6, #24]
FileSystem::~FileSystem() {
   12294:	f840 7b08 	str.w	r7, [r0], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12298:	4283      	cmp	r3, r0
   1229a:	d004      	beq.n	122a6 <Os::FileSystem::~FileSystem()+0x112>
   1229c:	210f      	movs	r1, #15
   1229e:	480b      	ldr	r0, [pc, #44]	; (122cc <Os::FileSystem::~FileSystem()+0x138>)
   122a0:	f7ef f9b4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~FileSystemInterface();
   122a4:	69b0      	ldr	r0, [r6, #24]
   122a6:	6803      	ldr	r3, [r0, #0]
   122a8:	681b      	ldr	r3, [r3, #0]
   122aa:	4798      	blx	r3
}
   122ac:	4628      	mov	r0, r5
   122ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~FileSystemInterface();
   122b2:	4630      	mov	r0, r6
   122b4:	4798      	blx	r3
}
   122b6:	4628      	mov	r0, r5
   122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~FileSystemInterface();
   122bc:	4620      	mov	r0, r4
   122be:	4798      	blx	r3
}
   122c0:	4628      	mov	r0, r5
   122c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   122c6:	bf00      	nop
   122c8:	20003414 	.word	0x20003414
   122cc:	20000d88 	.word	0x20000d88
   122d0:	00012195 	.word	0x00012195

000122d4 <Os::FileSystem::getHandle()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   122d4:	6983      	ldr	r3, [r0, #24]
FileSystemHandle* FileSystem::getHandle() {
   122d6:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   122d8:	f100 0408 	add.w	r4, r0, #8
   122dc:	42a3      	cmp	r3, r4
   122de:	d005      	beq.n	122ec <Os::FileSystem::getHandle()+0x18>
   122e0:	4605      	mov	r5, r0
   122e2:	2114      	movs	r1, #20
   122e4:	4840      	ldr	r0, [pc, #256]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   122e6:	f7ef f991 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   122ea:	69ac      	ldr	r4, [r5, #24]
   122ec:	6823      	ldr	r3, [r4, #0]
   122ee:	4d3f      	ldr	r5, [pc, #252]	; (123ec <Os::FileSystem::getHandle()+0x118>)
   122f0:	689b      	ldr	r3, [r3, #8]
   122f2:	42ab      	cmp	r3, r5
   122f4:	d174      	bne.n	123e0 <Os::FileSystem::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   122f6:	f104 0608 	add.w	r6, r4, #8
   122fa:	69a3      	ldr	r3, [r4, #24]
   122fc:	42b3      	cmp	r3, r6
   122fe:	d004      	beq.n	1230a <Os::FileSystem::getHandle()+0x36>
   12300:	2114      	movs	r1, #20
   12302:	4839      	ldr	r0, [pc, #228]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   12304:	f7ef f982 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12308:	69a6      	ldr	r6, [r4, #24]
   1230a:	6833      	ldr	r3, [r6, #0]
   1230c:	689b      	ldr	r3, [r3, #8]
   1230e:	42ab      	cmp	r3, r5
   12310:	d162      	bne.n	123d8 <Os::FileSystem::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12312:	f106 0408 	add.w	r4, r6, #8
   12316:	69b3      	ldr	r3, [r6, #24]
   12318:	42a3      	cmp	r3, r4
   1231a:	d004      	beq.n	12326 <Os::FileSystem::getHandle()+0x52>
   1231c:	2114      	movs	r1, #20
   1231e:	4832      	ldr	r0, [pc, #200]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   12320:	f7ef f974 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12324:	69b4      	ldr	r4, [r6, #24]
   12326:	6823      	ldr	r3, [r4, #0]
   12328:	689b      	ldr	r3, [r3, #8]
   1232a:	42ab      	cmp	r3, r5
   1232c:	d158      	bne.n	123e0 <Os::FileSystem::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1232e:	f104 0608 	add.w	r6, r4, #8
   12332:	69a3      	ldr	r3, [r4, #24]
   12334:	42b3      	cmp	r3, r6
   12336:	d004      	beq.n	12342 <Os::FileSystem::getHandle()+0x6e>
   12338:	2114      	movs	r1, #20
   1233a:	482b      	ldr	r0, [pc, #172]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   1233c:	f7ef f966 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12340:	69a6      	ldr	r6, [r4, #24]
   12342:	6833      	ldr	r3, [r6, #0]
   12344:	689b      	ldr	r3, [r3, #8]
   12346:	42ab      	cmp	r3, r5
   12348:	d146      	bne.n	123d8 <Os::FileSystem::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1234a:	f106 0408 	add.w	r4, r6, #8
   1234e:	69b3      	ldr	r3, [r6, #24]
   12350:	42a3      	cmp	r3, r4
   12352:	d004      	beq.n	1235e <Os::FileSystem::getHandle()+0x8a>
   12354:	2114      	movs	r1, #20
   12356:	4824      	ldr	r0, [pc, #144]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   12358:	f7ef f958 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   1235c:	69b4      	ldr	r4, [r6, #24]
   1235e:	6823      	ldr	r3, [r4, #0]
   12360:	689b      	ldr	r3, [r3, #8]
   12362:	42ab      	cmp	r3, r5
   12364:	d13c      	bne.n	123e0 <Os::FileSystem::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12366:	f104 0608 	add.w	r6, r4, #8
   1236a:	69a3      	ldr	r3, [r4, #24]
   1236c:	42b3      	cmp	r3, r6
   1236e:	d004      	beq.n	1237a <Os::FileSystem::getHandle()+0xa6>
   12370:	2114      	movs	r1, #20
   12372:	481d      	ldr	r0, [pc, #116]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   12374:	f7ef f94a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12378:	69a6      	ldr	r6, [r4, #24]
   1237a:	6833      	ldr	r3, [r6, #0]
   1237c:	689b      	ldr	r3, [r3, #8]
   1237e:	42ab      	cmp	r3, r5
   12380:	d12a      	bne.n	123d8 <Os::FileSystem::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12382:	f106 0408 	add.w	r4, r6, #8
   12386:	69b3      	ldr	r3, [r6, #24]
   12388:	42a3      	cmp	r3, r4
   1238a:	d004      	beq.n	12396 <Os::FileSystem::getHandle()+0xc2>
   1238c:	2114      	movs	r1, #20
   1238e:	4816      	ldr	r0, [pc, #88]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   12390:	f7ef f93c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12394:	69b4      	ldr	r4, [r6, #24]
   12396:	6823      	ldr	r3, [r4, #0]
   12398:	689b      	ldr	r3, [r3, #8]
   1239a:	42ab      	cmp	r3, r5
   1239c:	d120      	bne.n	123e0 <Os::FileSystem::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   1239e:	f104 0608 	add.w	r6, r4, #8
   123a2:	69a3      	ldr	r3, [r4, #24]
   123a4:	42b3      	cmp	r3, r6
   123a6:	d004      	beq.n	123b2 <Os::FileSystem::getHandle()+0xde>
   123a8:	2114      	movs	r1, #20
   123aa:	480f      	ldr	r0, [pc, #60]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   123ac:	f7ef f92e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   123b0:	69a6      	ldr	r6, [r4, #24]
   123b2:	6833      	ldr	r3, [r6, #0]
   123b4:	689b      	ldr	r3, [r3, #8]
   123b6:	42ab      	cmp	r3, r5
   123b8:	d10e      	bne.n	123d8 <Os::FileSystem::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   123ba:	f106 0008 	add.w	r0, r6, #8
   123be:	69b3      	ldr	r3, [r6, #24]
   123c0:	4283      	cmp	r3, r0
   123c2:	d004      	beq.n	123ce <Os::FileSystem::getHandle()+0xfa>
   123c4:	2114      	movs	r1, #20
   123c6:	4808      	ldr	r0, [pc, #32]	; (123e8 <Os::FileSystem::getHandle()+0x114>)
   123c8:	f7ef f920 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   123cc:	69b0      	ldr	r0, [r6, #24]
   123ce:	6803      	ldr	r3, [r0, #0]
}
   123d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   123d4:	689b      	ldr	r3, [r3, #8]
   123d6:	4718      	bx	r3
   123d8:	4630      	mov	r0, r6
}
   123da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   123de:	4718      	bx	r3
   123e0:	4620      	mov	r0, r4
}
   123e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   123e6:	4718      	bx	r3
   123e8:	20000d88 	.word	0x20000d88
   123ec:	000122d5 	.word	0x000122d5

000123f0 <Os::FileSystem::init()>:
    static FileSystem s_singleton;
   123f0:	4b03      	ldr	r3, [pc, #12]	; (12400 <Os::FileSystem::init()+0x10>)
   123f2:	681b      	ldr	r3, [r3, #0]
   123f4:	07db      	lsls	r3, r3, #31
   123f6:	d500      	bpl.n	123fa <Os::FileSystem::init()+0xa>
}
   123f8:	4770      	bx	lr
   123fa:	f7ff be3f 	b.w	1207c <Os::FileSystem::getSingleton() [clone .part.0]>
   123fe:	bf00      	nop
   12400:	2000ba10 	.word	0x2000ba10

00012404 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)>:
    static FileSystem s_singleton;
   12404:	4b15      	ldr	r3, [pc, #84]	; (1245c <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x58>)

FileSystem::Status FileSystem::changeWorkingDirectory(const char* path) {
    return FileSystem::getSingleton()._changeWorkingDirectory(path);
}

FileSystem::Status FileSystem::getFreeSpace(const char* path, FwSizeType& totalBytes, FwSizeType& freeBytes) {
   12406:	b570      	push	{r4, r5, r6, lr}
    static FileSystem s_singleton;
   12408:	681e      	ldr	r6, [r3, #0]
FileSystem::Status FileSystem::getFreeSpace(const char* path, FwSizeType& totalBytes, FwSizeType& freeBytes) {
   1240a:	4613      	mov	r3, r2
   1240c:	b082      	sub	sp, #8
   1240e:	4604      	mov	r4, r0
    static FileSystem s_singleton;
   12410:	07f2      	lsls	r2, r6, #31
FileSystem::Status FileSystem::getFreeSpace(const char* path, FwSizeType& totalBytes, FwSizeType& freeBytes) {
   12412:	460d      	mov	r5, r1
    static FileSystem s_singleton;
   12414:	d516      	bpl.n	12444 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x40>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<FileSystemInterface*>(&this->m_handle_storage[0]));
   12416:	4e12      	ldr	r6, [pc, #72]	; (12460 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x5c>)
   12418:	f106 0208 	add.w	r2, r6, #8
   1241c:	69b1      	ldr	r1, [r6, #24]
   1241e:	4291      	cmp	r1, r2
   12420:	d005      	beq.n	1242e <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x2a>
   12422:	2139      	movs	r1, #57	; 0x39
   12424:	480f      	ldr	r0, [pc, #60]	; (12464 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x60>)
   12426:	9301      	str	r3, [sp, #4]
   12428:	f7ef f8f0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1242c:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(path != nullptr);
   1242e:	b174      	cbz	r4, 1244e <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x4a>
    return this->m_delegate._getFreeSpace(path, totalBytes, freeBytes);
   12430:	69b0      	ldr	r0, [r6, #24]
   12432:	4621      	mov	r1, r4
   12434:	462a      	mov	r2, r5
   12436:	6804      	ldr	r4, [r0, #0]
   12438:	69a4      	ldr	r4, [r4, #24]
   1243a:	46a4      	mov	ip, r4
    return FileSystem::getSingleton()._getFreeSpace(path, totalBytes, freeBytes);
}
   1243c:	b002      	add	sp, #8
   1243e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate._getFreeSpace(path, totalBytes, freeBytes);
   12442:	4760      	bx	ip
   12444:	9301      	str	r3, [sp, #4]
   12446:	f7ff fe19 	bl	1207c <Os::FileSystem::getSingleton() [clone .part.0]>
   1244a:	9b01      	ldr	r3, [sp, #4]
   1244c:	e7e3      	b.n	12416 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x12>
    FW_ASSERT(path != nullptr);
   1244e:	213a      	movs	r1, #58	; 0x3a
   12450:	4804      	ldr	r0, [pc, #16]	; (12464 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x60>)
   12452:	9301      	str	r3, [sp, #4]
   12454:	f7ef f8da 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   12458:	9b01      	ldr	r3, [sp, #4]
   1245a:	e7e9      	b.n	12430 <Os::FileSystem::getFreeSpace(char const*, unsigned long&, unsigned long&)+0x2c>
   1245c:	2000ba10 	.word	0x2000ba10
   12460:	2000b888 	.word	0x2000b888
   12464:	20000d88 	.word	0x20000d88

00012468 <Utils::Hash::Hash()>:
    }

    void Hash ::
        init()
    {
        this->hash_handle = 0xffffffffL;
   12468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1246c:	6003      	str	r3, [r0, #0]
    }
   1246e:	4770      	bx	lr

00012470 <Utils::Hash::~Hash()>:
    }
   12470:	4770      	bx	lr
   12472:	bf00      	nop

00012474 <Utils::Hash::init()>:
        this->hash_handle = 0xffffffffL;
   12474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12478:	6003      	str	r3, [r0, #0]
    }
   1247a:	4770      	bx	lr

0001247c <Utils::Hash::update(void const*, long)>:

    void Hash ::
        update(const void *const data, NATIVE_INT_TYPE len)
    {
   1247c:	b570      	push	{r4, r5, r6, lr}
   1247e:	4606      	mov	r6, r0
        FW_ASSERT(data);
   12480:	460d      	mov	r5, r1
    {
   12482:	4614      	mov	r4, r2
        FW_ASSERT(data);
   12484:	b169      	cbz	r1, 124a2 <Utils::Hash::update(void const*, long)+0x26>
        char c;
        for(int index = 0; index < len; index++) {
   12486:	2c00      	cmp	r4, #0
   12488:	dd0a      	ble.n	124a0 <Utils::Hash::update(void const*, long)+0x24>
   1248a:	1e62      	subs	r2, r4, #1
            c = static_cast<const char*>(data)[index];
            this->hash_handle = static_cast<HASH_HANDLE_TYPE>(update_crc_32(this->hash_handle, c));
   1248c:	6830      	ldr	r0, [r6, #0]
   1248e:	1e6c      	subs	r4, r5, #1
   12490:	4415      	add	r5, r2
   12492:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   12496:	f000 f85f 	bl	12558 <update_crc_32>
   1249a:	6030      	str	r0, [r6, #0]
        for(int index = 0; index < len; index++) {
   1249c:	42ac      	cmp	r4, r5
   1249e:	d1f8      	bne.n	12492 <Utils::Hash::update(void const*, long)+0x16>
        }
    }
   124a0:	bd70      	pop	{r4, r5, r6, pc}
        FW_ASSERT(data);
   124a2:	2137      	movs	r1, #55	; 0x37
   124a4:	4801      	ldr	r0, [pc, #4]	; (124ac <Utils::Hash::update(void const*, long)+0x30>)
   124a6:	f7ef f8b1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   124aa:	e7ec      	b.n	12486 <Utils::Hash::update(void const*, long)+0xa>
   124ac:	20001dac 	.word	0x20001dac

000124b0 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)>:
    {
   124b0:	b570      	push	{r4, r5, r6, lr}
   124b2:	460c      	mov	r4, r1
   124b4:	b086      	sub	sp, #24
        FW_ASSERT(data);
   124b6:	4605      	mov	r5, r0
    {
   124b8:	4616      	mov	r6, r2
        FW_ASSERT(data);
   124ba:	b320      	cbz	r0, 12506 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x56>
        for(int index = 0; index < len; index++) {
   124bc:	2c00      	cmp	r4, #0
   124be:	dd28      	ble.n	12512 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x62>
   124c0:	1e61      	subs	r1, r4, #1
   124c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   124c6:	1e6c      	subs	r4, r5, #1
   124c8:	440d      	add	r5, r1
            local_hash_handle = static_cast<HASH_HANDLE_TYPE>(update_crc_32(local_hash_handle, c));
   124ca:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   124ce:	f000 f843 	bl	12558 <update_crc_32>
        for(int index = 0; index < len; index++) {
   124d2:	42ac      	cmp	r4, r5
   124d4:	d1f9      	bne.n	124ca <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x1a>
        Fw::SerializeStatus status = bufferOut.serialize(~(local_hash_handle));
   124d6:	43c1      	mvns	r1, r0
        HashBuffer bufferOut;
   124d8:	a802      	add	r0, sp, #8
   124da:	9101      	str	r1, [sp, #4]
   124dc:	f000 f888 	bl	125f0 <Utils::HashBuffer::HashBuffer()>
        Fw::SerializeStatus status = bufferOut.serialize(~(local_hash_handle));
   124e0:	9901      	ldr	r1, [sp, #4]
   124e2:	a802      	add	r0, sp, #8
   124e4:	f7ee f8ba 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        FW_ASSERT( Fw::FW_SERIALIZE_OK == status );
   124e8:	b940      	cbnz	r0, 124fc <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x4c>
        buffer = bufferOut;
   124ea:	a902      	add	r1, sp, #8
   124ec:	4630      	mov	r0, r6
   124ee:	f000 f88b 	bl	12608 <Utils::HashBuffer::operator=(Utils::HashBuffer const&)>
    }
   124f2:	a802      	add	r0, sp, #8
   124f4:	f000 f864 	bl	125c0 <Utils::HashBuffer::~HashBuffer()>
   124f8:	b006      	add	sp, #24
   124fa:	bd70      	pop	{r4, r5, r6, pc}
        FW_ASSERT( Fw::FW_SERIALIZE_OK == status );
   124fc:	212a      	movs	r1, #42	; 0x2a
   124fe:	4806      	ldr	r0, [pc, #24]	; (12518 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x68>)
   12500:	f7ef f884 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   12504:	e7f1      	b.n	124ea <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x3a>
        FW_ASSERT(data);
   12506:	2121      	movs	r1, #33	; 0x21
   12508:	4803      	ldr	r0, [pc, #12]	; (12518 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x68>)
   1250a:	f7ef f87f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        for(int index = 0; index < len; index++) {
   1250e:	2c00      	cmp	r4, #0
   12510:	dcd6      	bgt.n	124c0 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x10>
   12512:	2100      	movs	r1, #0
   12514:	e7e0      	b.n	124d8 <Utils::Hash::hash(void const*, long, Utils::HashBuffer&)+0x28>
   12516:	bf00      	nop
   12518:	20001dac 	.word	0x20001dac

0001251c <Utils::Hash::final(Utils::HashBuffer&)>:

    void Hash ::
        final(HashBuffer& buffer)
    {
   1251c:	b530      	push	{r4, r5, lr}
   1251e:	b085      	sub	sp, #20
   12520:	4605      	mov	r5, r0
   12522:	460c      	mov	r4, r1
        HashBuffer bufferOut;
   12524:	4668      	mov	r0, sp
   12526:	f000 f863 	bl	125f0 <Utils::HashBuffer::HashBuffer()>
        // For CRC32 we need to return the one's complement of the result:
        Fw::SerializeStatus status = bufferOut.serialize(~(this->hash_handle));
   1252a:	6829      	ldr	r1, [r5, #0]
   1252c:	4668      	mov	r0, sp
   1252e:	43c9      	mvns	r1, r1
   12530:	f7ee f894 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        FW_ASSERT( Fw::FW_SERIALIZE_OK == status );
   12534:	b940      	cbnz	r0, 12548 <Utils::Hash::final(Utils::HashBuffer&)+0x2c>
        buffer = bufferOut;
   12536:	4669      	mov	r1, sp
   12538:	4620      	mov	r0, r4
   1253a:	f000 f865 	bl	12608 <Utils::HashBuffer::operator=(Utils::HashBuffer const&)>
    }
   1253e:	4668      	mov	r0, sp
   12540:	f000 f83e 	bl	125c0 <Utils::HashBuffer::~HashBuffer()>
   12544:	b005      	add	sp, #20
   12546:	bd30      	pop	{r4, r5, pc}
        FW_ASSERT( Fw::FW_SERIALIZE_OK == status );
   12548:	2145      	movs	r1, #69	; 0x45
   1254a:	4802      	ldr	r0, [pc, #8]	; (12554 <Utils::Hash::final(Utils::HashBuffer&)+0x38>)
   1254c:	f7ef f85e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   12550:	e7f1      	b.n	12536 <Utils::Hash::final(Utils::HashBuffer&)+0x1a>
   12552:	bf00      	nop
   12554:	20001dac 	.word	0x20001dac

00012558 <update_crc_32>:
unsigned long update_crc_32( unsigned long crc, char c ) {
   12558:	b570      	push	{r4, r5, r6, lr}
    if ( ! crc_tab32_init ) init_crc32_tab();
   1255a:	4e13      	ldr	r6, [pc, #76]	; (125a8 <update_crc_32+0x50>)
unsigned long update_crc_32( unsigned long crc, char c ) {
   1255c:	4604      	mov	r4, r0
   1255e:	4608      	mov	r0, r1
    if ( ! crc_tab32_init ) init_crc32_tab();
   12560:	6833      	ldr	r3, [r6, #0]
   12562:	b143      	cbz	r3, 12576 <update_crc_32+0x1e>
    tmp = crc ^ long_c;
   12564:	ea80 0304 	eor.w	r3, r0, r4
    crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
   12568:	4a10      	ldr	r2, [pc, #64]	; (125ac <update_crc_32+0x54>)
   1256a:	b2db      	uxtb	r3, r3
   1256c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}  /* update_crc_32 */
   12570:	ea80 2014 	eor.w	r0, r0, r4, lsr #8
   12574:	bd70      	pop	{r4, r5, r6, pc}
   12576:	4a0e      	ldr	r2, [pc, #56]	; (125b0 <update_crc_32+0x58>)

        crc = (unsigned long) i;

        for (j=0; j<8; j++) {

            if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ P_32;
   12578:	4d0e      	ldr	r5, [pc, #56]	; (125b4 <update_crc_32+0x5c>)
   1257a:	f502 6e80 	add.w	lr, r2, #1024	; 0x400
        crc = (unsigned long) i;
   1257e:	4619      	mov	r1, r3
unsigned long update_crc_32( unsigned long crc, char c ) {
   12580:	f04f 0c08 	mov.w	ip, #8
            if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ P_32;
   12584:	f011 0f01 	tst.w	r1, #1
   12588:	bf14      	ite	ne
   1258a:	ea85 0151 	eorne.w	r1, r5, r1, lsr #1
            else                     crc =   crc >> 1;
   1258e:	0849      	lsreq	r1, r1, #1
        for (j=0; j<8; j++) {
   12590:	f1bc 0c01 	subs.w	ip, ip, #1
   12594:	d1f6      	bne.n	12584 <update_crc_32+0x2c>
        }

        crc_tab32[i] = crc;
   12596:	f842 1f04 	str.w	r1, [r2, #4]!
    for (i=0; i<256; i++) {
   1259a:	4572      	cmp	r2, lr
   1259c:	f103 0301 	add.w	r3, r3, #1
   125a0:	d1ed      	bne.n	1257e <update_crc_32+0x26>
    }

    crc_tab32_init = CRC_TRUE;
   125a2:	2301      	movs	r3, #1
   125a4:	6033      	str	r3, [r6, #0]

}  /* init_crc32_tab */
   125a6:	e7dd      	b.n	12564 <update_crc_32+0xc>
   125a8:	2000d284 	.word	0x2000d284
   125ac:	2000ce84 	.word	0x2000ce84
   125b0:	2000ce80 	.word	0x2000ce80
   125b4:	edb88320 	.word	0xedb88320

000125b8 <Utils::HashBuffer::getBuffAddr()>:
    return this->m_bufferData;
}

U8* HashBuffer::getBuffAddr() {
    return this->m_bufferData;
}
   125b8:	300c      	adds	r0, #12
   125ba:	4770      	bx	lr

000125bc <Utils::HashBuffer::getBuffCapacity() const>:

NATIVE_UINT_TYPE HashBuffer::getBuffCapacity() const {
    return sizeof(this->m_bufferData);
}
   125bc:	2004      	movs	r0, #4
   125be:	4770      	bx	lr

000125c0 <Utils::HashBuffer::~HashBuffer()>:
HashBuffer::~HashBuffer() {}
   125c0:	4b03      	ldr	r3, [pc, #12]	; (125d0 <Utils::HashBuffer::~HashBuffer()+0x10>)
   125c2:	b510      	push	{r4, lr}
   125c4:	4604      	mov	r4, r0
   125c6:	6003      	str	r3, [r0, #0]
   125c8:	f7ed ffc2 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   125cc:	4620      	mov	r0, r4
   125ce:	bd10      	pop	{r4, pc}
   125d0:	20003f80 	.word	0x20003f80

000125d4 <Utils::HashBuffer::~HashBuffer()>:
   125d4:	4b05      	ldr	r3, [pc, #20]	; (125ec <Utils::HashBuffer::~HashBuffer()+0x18>)
   125d6:	b510      	push	{r4, lr}
   125d8:	4604      	mov	r4, r0
   125da:	6003      	str	r3, [r0, #0]
   125dc:	f7ed ffb8 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   125e0:	2110      	movs	r1, #16
   125e2:	4620      	mov	r0, r4
   125e4:	f006 fb74 	bl	18cd0 <operator delete(void*, unsigned int)>
   125e8:	4620      	mov	r0, r4
   125ea:	bd10      	pop	{r4, pc}
   125ec:	20003f80 	.word	0x20003f80

000125f0 <Utils::HashBuffer::HashBuffer()>:
HashBuffer::HashBuffer() {}
   125f0:	b510      	push	{r4, lr}
   125f2:	4604      	mov	r4, r0
   125f4:	f7ed ffa4 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
   125f8:	4a02      	ldr	r2, [pc, #8]	; (12604 <Utils::HashBuffer::HashBuffer()+0x14>)
   125fa:	2300      	movs	r3, #0
   125fc:	4620      	mov	r0, r4
   125fe:	6022      	str	r2, [r4, #0]
   12600:	60e3      	str	r3, [r4, #12]
   12602:	bd10      	pop	{r4, pc}
   12604:	20003f80 	.word	0x20003f80

00012608 <Utils::HashBuffer::operator=(Utils::HashBuffer const&)>:
    if (this == &other) {
   12608:	4288      	cmp	r0, r1
HashBuffer& HashBuffer::operator=(const HashBuffer& other) {
   1260a:	b538      	push	{r3, r4, r5, lr}
   1260c:	4604      	mov	r4, r0
    if (this == &other) {
   1260e:	d00a      	beq.n	12626 <Utils::HashBuffer::operator=(Utils::HashBuffer const&)+0x1e>
    Fw::SerializeStatus stat = Fw::SerializeBufferBase::setBuff(other.m_bufferData, other.getBuffLength());
   12610:	460d      	mov	r5, r1
   12612:	4608      	mov	r0, r1
   12614:	f7ee fcf6 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   12618:	4602      	mov	r2, r0
   1261a:	f105 010c 	add.w	r1, r5, #12
   1261e:	4620      	mov	r0, r4
   12620:	f7ee fcf2 	bl	1008 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)>
    FW_ASSERT(Fw::FW_SERIALIZE_OK == stat, static_cast<NATIVE_INT_TYPE>(stat));
   12624:	b908      	cbnz	r0, 1262a <Utils::HashBuffer::operator=(Utils::HashBuffer const&)+0x22>
}
   12626:	4620      	mov	r0, r4
   12628:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(Fw::FW_SERIALIZE_OK == stat, static_cast<NATIVE_INT_TYPE>(stat));
   1262a:	4601      	mov	r1, r0
   1262c:	221e      	movs	r2, #30
   1262e:	4802      	ldr	r0, [pc, #8]	; (12638 <Utils::HashBuffer::operator=(Utils::HashBuffer const&)+0x30>)
   12630:	f7ee fffa 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
}
   12634:	4620      	mov	r0, r4
   12636:	bd38      	pop	{r3, r4, r5, pc}
   12638:	20001d8c 	.word	0x20001d8c

0001263c <Types::MaxHeap::MaxHeap()>:

namespace Types {

MaxHeap::MaxHeap() {
    // Initialize the heap:
    this->m_capacity = 0;
   1263c:	2200      	movs	r2, #0
   1263e:	60c2      	str	r2, [r0, #12]
    this->m_heap = nullptr;
    this->m_size = 0;
    this->m_order = 0;
   12640:	6082      	str	r2, [r0, #8]
    this->m_size = 0;
   12642:	e9c0 2200 	strd	r2, r2, [r0]
}
   12646:	4770      	bx	lr

00012648 <Types::MaxHeap::~MaxHeap()>:

MaxHeap::~MaxHeap() {
   12648:	b510      	push	{r4, lr}
   1264a:	4604      	mov	r4, r0
    delete[] this->m_heap;
   1264c:	6800      	ldr	r0, [r0, #0]
   1264e:	b108      	cbz	r0, 12654 <Types::MaxHeap::~MaxHeap()+0xc>
   12650:	f006 fb3c 	bl	18ccc <operator delete[](void*)>
    this->m_heap = nullptr;
}
   12654:	4620      	mov	r0, r4
   12656:	bd10      	pop	{r4, pc}

00012658 <Types::MaxHeap::create(unsigned long)>:

bool MaxHeap::create(FwSizeType capacity) {
   12658:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(this->m_heap == nullptr);
   1265a:	6803      	ldr	r3, [r0, #0]
bool MaxHeap::create(FwSizeType capacity) {
   1265c:	4605      	mov	r5, r0
   1265e:	460c      	mov	r4, r1
    FW_ASSERT(this->m_heap == nullptr);
   12660:	b11b      	cbz	r3, 1266a <Types::MaxHeap::create(unsigned long)+0x12>
   12662:	212e      	movs	r1, #46	; 0x2e
   12664:	480d      	ldr	r0, [pc, #52]	; (1269c <Types::MaxHeap::create(unsigned long)+0x44>)
   12666:	f7ee ffd1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    // Loop bounds will overflow if capacity set to the max allowable value
    FW_ASSERT(capacity < std::numeric_limits<FwSizeType>::max());
   1266a:	1c63      	adds	r3, r4, #1
   1266c:	d010      	beq.n	12690 <Types::MaxHeap::create(unsigned long)+0x38>
    this->m_heap = new (std::nothrow) Node[capacity];
   1266e:	4b0c      	ldr	r3, [pc, #48]	; (126a0 <Types::MaxHeap::create(unsigned long)+0x48>)
   12670:	429c      	cmp	r4, r3
   12672:	d80a      	bhi.n	1268a <Types::MaxHeap::create(unsigned long)+0x32>
   12674:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   12678:	0080      	lsls	r0, r0, #2
   1267a:	490a      	ldr	r1, [pc, #40]	; (126a4 <Types::MaxHeap::create(unsigned long)+0x4c>)
   1267c:	f005 feba 	bl	183f4 <operator new[](unsigned int, std::nothrow_t const&)>
   12680:	6028      	str	r0, [r5, #0]
    if (nullptr == this->m_heap) {
   12682:	b108      	cbz	r0, 12688 <Types::MaxHeap::create(unsigned long)+0x30>
        return false;
    }
    this->m_capacity = capacity;
    return true;
   12684:	2001      	movs	r0, #1
    this->m_capacity = capacity;
   12686:	60ec      	str	r4, [r5, #12]
}
   12688:	bd38      	pop	{r3, r4, r5, pc}
    this->m_heap = new (std::nothrow) Node[capacity];
   1268a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1268e:	e7f4      	b.n	1267a <Types::MaxHeap::create(unsigned long)+0x22>
    FW_ASSERT(capacity < std::numeric_limits<FwSizeType>::max());
   12690:	2130      	movs	r1, #48	; 0x30
   12692:	4802      	ldr	r0, [pc, #8]	; (1269c <Types::MaxHeap::create(unsigned long)+0x44>)
   12694:	f7ee ffba 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_heap = new (std::nothrow) Node[capacity];
   12698:	4620      	mov	r0, r4
   1269a:	e7ee      	b.n	1267a <Types::MaxHeap::create(unsigned long)+0x22>
   1269c:	20001d6c 	.word	0x20001d6c
   126a0:	0aaaaaaa 	.word	0x0aaaaaaa
   126a4:	2000299c 	.word	0x2000299c

000126a8 <Types::MaxHeap::push(long, unsigned long)>:

bool MaxHeap::push(FwQueuePriorityType value, FwSizeType id) {
   126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // If the queue is full, return false:
    if (this->isFull()) {
   126ac:	68c3      	ldr	r3, [r0, #12]
bool MaxHeap::push(FwQueuePriorityType value, FwSizeType id) {
   126ae:	b083      	sub	sp, #12
    return true;
}

// Is the heap full:
bool MaxHeap::isFull() {
    return (this->m_size == this->m_capacity);
   126b0:	6844      	ldr	r4, [r0, #4]
bool MaxHeap::push(FwQueuePriorityType value, FwSizeType id) {
   126b2:	9201      	str	r2, [sp, #4]
    if (this->isFull()) {
   126b4:	429c      	cmp	r4, r3
   126b6:	d066      	beq.n	12786 <Types::MaxHeap::push(long, unsigned long)+0xde>
    FW_ASSERT(maxIter != 0);
   126b8:	f114 0a01 	adds.w	sl, r4, #1
   126bc:	4680      	mov	r8, r0
   126be:	4689      	mov	r9, r1
   126c0:	d046      	beq.n	12750 <Types::MaxHeap::push(long, unsigned long)+0xa8>
    for (i = 0; (i < maxIter) && (index != 0); i++) {
   126c2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   126c6:	f11c 0f03 	cmn.w	ip, #3
   126ca:	d860      	bhi.n	1278e <Types::MaxHeap::push(long, unsigned long)+0xe6>
   126cc:	2700      	movs	r7, #0
        FW_ASSERT(parent < index, static_cast<FwAssertArgType>(parent), static_cast<FwAssertArgType>(index));
   126ce:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 127a0 <Types::MaxHeap::push(long, unsigned long)+0xf8>
   126d2:	e018      	b.n	12706 <Types::MaxHeap::push(long, unsigned long)+0x5e>
        if (value <= this->m_heap[parent].value) {
   126d4:	f8d8 3000 	ldr.w	r3, [r8]
   126d8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
        this->m_heap[index] = this->m_heap[parent];
   126dc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   126e0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
        if (value <= this->m_heap[parent].value) {
   126e4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   126e8:	eb03 0285 	add.w	r2, r3, r5, lsl #2
        this->m_heap[index] = this->m_heap[parent];
   126ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
        if (value <= this->m_heap[parent].value) {
   126f0:	4549      	cmp	r1, r9
   126f2:	ea4f 0585 	mov.w	r5, r5, lsl #2
   126f6:	da14      	bge.n	12722 <Types::MaxHeap::push(long, unsigned long)+0x7a>
    for (i = 0; (i < maxIter) && (index != 0); i++) {
   126f8:	45ba      	cmp	sl, r7
        this->m_heap[index] = this->m_heap[parent];
   126fa:	ca07      	ldmia	r2, {r0, r1, r2}
   126fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for (i = 0; (i < maxIter) && (index != 0); i++) {
   12700:	d94b      	bls.n	1279a <Types::MaxHeap::push(long, unsigned long)+0xf2>
   12702:	2c00      	cmp	r4, #0
   12704:	d045      	beq.n	12792 <Types::MaxHeap::push(long, unsigned long)+0xea>
        parent = PARENT(index);
   12706:	4626      	mov	r6, r4
    for (i = 0; (i < maxIter) && (index != 0); i++) {
   12708:	3701      	adds	r7, #1
        parent = PARENT(index);
   1270a:	ea4f 045c 	mov.w	r4, ip, lsr #1
        FW_ASSERT(parent < index, static_cast<FwAssertArgType>(parent), static_cast<FwAssertArgType>(index));
   1270e:	ebb6 0f5c 	cmp.w	r6, ip, lsr #1
   12712:	d8df      	bhi.n	126d4 <Types::MaxHeap::push(long, unsigned long)+0x2c>
   12714:	4632      	mov	r2, r6
   12716:	4621      	mov	r1, r4
   12718:	234f      	movs	r3, #79	; 0x4f
   1271a:	4658      	mov	r0, fp
   1271c:	f7ee ff94 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
   12720:	e7d8      	b.n	126d4 <Types::MaxHeap::push(long, unsigned long)+0x2c>
        this->m_heap[index] = this->m_heap[parent];
   12722:	0085      	lsls	r5, r0, #2
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   12724:	f8d8 4004 	ldr.w	r4, [r8, #4]
   12728:	42b4      	cmp	r4, r6
   1272a:	d324      	bcc.n	12776 <Types::MaxHeap::push(long, unsigned long)+0xce>
    this->m_heap[index].value = value;
   1272c:	f8d8 3000 	ldr.w	r3, [r8]
    return true;
   12730:	2001      	movs	r0, #1
    this->m_heap[index].order = m_order;
   12732:	f8d8 2008 	ldr.w	r2, [r8, #8]
    ++this->m_size;
   12736:	3401      	adds	r4, #1
    this->m_heap[index].value = value;
   12738:	f843 9005 	str.w	r9, [r3, r5]
   1273c:	442b      	add	r3, r5
    this->m_heap[index].id = id;
   1273e:	9901      	ldr	r1, [sp, #4]
    this->m_heap[index].order = m_order;
   12740:	605a      	str	r2, [r3, #4]
    this->m_heap[index].id = id;
   12742:	6099      	str	r1, [r3, #8]
    ++this->m_order;
   12744:	1811      	adds	r1, r2, r0
    ++this->m_size;
   12746:	e9c8 4101 	strd	r4, r1, [r8, #4]
}
   1274a:	b003      	add	sp, #12
   1274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FW_ASSERT(maxIter != 0);
   12750:	4657      	mov	r7, sl
   12752:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12756:	f06f 050b 	mvn.w	r5, #11
   1275a:	2145      	movs	r1, #69	; 0x45
   1275c:	4810      	ldr	r0, [pc, #64]	; (127a0 <Types::MaxHeap::push(long, unsigned long)+0xf8>)
   1275e:	f7ee ff55 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(i < maxIter, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(maxIter));
   12762:	4652      	mov	r2, sl
   12764:	4639      	mov	r1, r7
   12766:	235c      	movs	r3, #92	; 0x5c
   12768:	480d      	ldr	r0, [pc, #52]	; (127a0 <Types::MaxHeap::push(long, unsigned long)+0xf8>)
   1276a:	f7ee ff6d 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   1276e:	f8d8 4004 	ldr.w	r4, [r8, #4]
   12772:	42b4      	cmp	r4, r6
   12774:	d2da      	bcs.n	1272c <Types::MaxHeap::push(long, unsigned long)+0x84>
   12776:	4631      	mov	r1, r6
   12778:	225d      	movs	r2, #93	; 0x5d
   1277a:	4809      	ldr	r0, [pc, #36]	; (127a0 <Types::MaxHeap::push(long, unsigned long)+0xf8>)
   1277c:	f7ee ff54 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    ++this->m_size;
   12780:	f8d8 4004 	ldr.w	r4, [r8, #4]
   12784:	e7d2      	b.n	1272c <Types::MaxHeap::push(long, unsigned long)+0x84>
        return false;
   12786:	2000      	movs	r0, #0
}
   12788:	b003      	add	sp, #12
   1278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   1278e:	2500      	movs	r5, #0
   12790:	e7cc      	b.n	1272c <Types::MaxHeap::push(long, unsigned long)+0x84>
    FW_ASSERT(i < maxIter, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(maxIter));
   12792:	45ba      	cmp	sl, r7
        parent = PARENT(index);
   12794:	bf88      	it	hi
   12796:	4626      	movhi	r6, r4
    FW_ASSERT(i < maxIter, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(maxIter));
   12798:	d8c4      	bhi.n	12724 <Types::MaxHeap::push(long, unsigned long)+0x7c>
        parent = PARENT(index);
   1279a:	4626      	mov	r6, r4
   1279c:	e7e1      	b.n	12762 <Types::MaxHeap::push(long, unsigned long)+0xba>
   1279e:	bf00      	nop
   127a0:	20001d6c 	.word	0x20001d6c

000127a4 <Types::MaxHeap::isFull()>:
    return (this->m_size == this->m_capacity);
   127a4:	6842      	ldr	r2, [r0, #4]
   127a6:	68c0      	ldr	r0, [r0, #12]
}
   127a8:	1a10      	subs	r0, r2, r0
   127aa:	fab0 f080 	clz	r0, r0
   127ae:	0940      	lsrs	r0, r0, #5
   127b0:	4770      	bx	lr
   127b2:	bf00      	nop

000127b4 <Types::MaxHeap::isEmpty()>:

// Is the heap empty:
bool MaxHeap::isEmpty() {
    return (this->m_size == 0);
   127b4:	6840      	ldr	r0, [r0, #4]
}
   127b6:	fab0 f080 	clz	r0, r0
   127ba:	0940      	lsrs	r0, r0, #5
   127bc:	4770      	bx	lr
   127be:	bf00      	nop

000127c0 <Types::MaxHeap::getSize() const>:

// Get the current size of the heap:
FwSizeType MaxHeap::getSize() const {
    return this->m_size;
}
   127c0:	6840      	ldr	r0, [r0, #4]
   127c2:	4770      	bx	lr

000127c4 <Types::MaxHeap::max(unsigned long, unsigned long)>:
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
}

// Return the maximum priority index between two nodes. If their
// priorities are equal, return the oldest to keep the heap stable
FwSizeType MaxHeap::max(FwSizeType a, FwSizeType b) {
   127c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127c6:	4614      	mov	r4, r2
    static_assert(not std::numeric_limits<FwSizeType>::is_signed, "FwSizeType must be unsigned");
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   127c8:	6842      	ldr	r2, [r0, #4]
FwSizeType MaxHeap::max(FwSizeType a, FwSizeType b) {
   127ca:	4606      	mov	r6, r0
   127cc:	460d      	mov	r5, r1
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   127ce:	428a      	cmp	r2, r1
   127d0:	d924      	bls.n	1281c <Types::MaxHeap::max(unsigned long, unsigned long)+0x58>
    FW_ASSERT(b < this->m_size, static_cast<FwAssertArgType>(b), static_cast<FwAssertArgType>(this->m_size));
   127d2:	4294      	cmp	r4, r2
   127d4:	d21c      	bcs.n	12810 <Types::MaxHeap::max(unsigned long, unsigned long)+0x4c>

    // Extract the priorities:
    FwQueuePriorityType aValue = this->m_heap[a].value;
   127d6:	6833      	ldr	r3, [r6, #0]
   127d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    FwQueuePriorityType bValue = this->m_heap[b].value;
   127dc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    FwQueuePriorityType aValue = this->m_heap[a].value;
   127e0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
   127e4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    FwQueuePriorityType bValue = this->m_heap[b].value;
   127e8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   127ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    // the "older" one as determined by order pushed on to the
    // heap. Using this secondary ordering technique makes the
    // heap stable (ie. FIFO for equal priority elements).
    // Note: We check this first, because it is the most common
    // case. Let's save as many ticks as we can...
    if (aValue == bValue) {
   127f0:	4287      	cmp	r7, r0
   127f2:	d003      	beq.n	127fc <Types::MaxHeap::max(unsigned long, unsigned long)+0x38>
        }
        return b;
    }

    // Which priority is larger?:
    if (aValue > bValue) {
   127f4:	bfc8      	it	gt
   127f6:	462c      	movgt	r4, r5
        return a;
    }
    // B is larger:
    return b;
}
   127f8:	4620      	mov	r0, r4
   127fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FwSizeType bAge = this->m_order - this->m_heap[b].order;
   127fc:	6858      	ldr	r0, [r3, #4]
        FwSizeType aAge = this->m_order - this->m_heap[a].order;
   127fe:	68b1      	ldr	r1, [r6, #8]
   12800:	6852      	ldr	r2, [r2, #4]
   12802:	1a8b      	subs	r3, r1, r2
        FwSizeType bAge = this->m_order - this->m_heap[b].order;
   12804:	1a09      	subs	r1, r1, r0
        if (aAge > bAge) {
   12806:	428b      	cmp	r3, r1
   12808:	bf88      	it	hi
   1280a:	462c      	movhi	r4, r5
}
   1280c:	4620      	mov	r0, r4
   1280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(b < this->m_size, static_cast<FwAssertArgType>(b), static_cast<FwAssertArgType>(this->m_size));
   12810:	23d6      	movs	r3, #214	; 0xd6
   12812:	4621      	mov	r1, r4
   12814:	4804      	ldr	r0, [pc, #16]	; (12828 <Types::MaxHeap::max(unsigned long, unsigned long)+0x64>)
   12816:	f7ee ff17 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
   1281a:	e7dc      	b.n	127d6 <Types::MaxHeap::max(unsigned long, unsigned long)+0x12>
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   1281c:	23d5      	movs	r3, #213	; 0xd5
   1281e:	4802      	ldr	r0, [pc, #8]	; (12828 <Types::MaxHeap::max(unsigned long, unsigned long)+0x64>)
   12820:	f7ee ff12 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(b < this->m_size, static_cast<FwAssertArgType>(b), static_cast<FwAssertArgType>(this->m_size));
   12824:	6872      	ldr	r2, [r6, #4]
   12826:	e7d4      	b.n	127d2 <Types::MaxHeap::max(unsigned long, unsigned long)+0xe>
   12828:	20001d6c 	.word	0x20001d6c

0001282c <Types::MaxHeap::swap(unsigned long, unsigned long)>:

// Swap two nodes in the heap:
void MaxHeap::swap(FwSizeType a, FwSizeType b) {
   1282c:	b570      	push	{r4, r5, r6, lr}
   1282e:	4615      	mov	r5, r2
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   12830:	6842      	ldr	r2, [r0, #4]
void MaxHeap::swap(FwSizeType a, FwSizeType b) {
   12832:	b084      	sub	sp, #16
   12834:	4606      	mov	r6, r0
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   12836:	428a      	cmp	r2, r1
void MaxHeap::swap(FwSizeType a, FwSizeType b) {
   12838:	460c      	mov	r4, r1
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   1283a:	d91a      	bls.n	12872 <Types::MaxHeap::swap(unsigned long, unsigned long)+0x46>
    FW_ASSERT(b < this->m_size, static_cast<FwAssertArgType>(b), static_cast<FwAssertArgType>(this->m_size));
   1283c:	4295      	cmp	r5, r2
   1283e:	d21f      	bcs.n	12880 <Types::MaxHeap::swap(unsigned long, unsigned long)+0x54>
    Node temp = this->m_heap[a];
   12840:	6830      	ldr	r0, [r6, #0]
   12842:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    this->m_heap[a] = this->m_heap[b];
   12846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    Node temp = this->m_heap[a];
   1284a:	f10d 0c04 	add.w	ip, sp, #4
   1284e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    this->m_heap[a] = this->m_heap[b];
   12852:	eb00 0485 	add.w	r4, r0, r5, lsl #2
    Node temp = this->m_heap[a];
   12856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1285a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    this->m_heap[a] = this->m_heap[b];
   1285e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    this->m_heap[b] = temp;
   12866:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   1286a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
   1286e:	b004      	add	sp, #16
   12870:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(a < this->m_size, static_cast<FwAssertArgType>(a), static_cast<FwAssertArgType>(this->m_size));
   12872:	23f5      	movs	r3, #245	; 0xf5
   12874:	4805      	ldr	r0, [pc, #20]	; (1288c <Types::MaxHeap::swap(unsigned long, unsigned long)+0x60>)
   12876:	f7ee fee7 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(b < this->m_size, static_cast<FwAssertArgType>(b), static_cast<FwAssertArgType>(this->m_size));
   1287a:	6872      	ldr	r2, [r6, #4]
   1287c:	4295      	cmp	r5, r2
   1287e:	d3df      	bcc.n	12840 <Types::MaxHeap::swap(unsigned long, unsigned long)+0x14>
   12880:	23f6      	movs	r3, #246	; 0xf6
   12882:	4629      	mov	r1, r5
   12884:	4801      	ldr	r0, [pc, #4]	; (1288c <Types::MaxHeap::swap(unsigned long, unsigned long)+0x60>)
   12886:	f7ee fedf 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
   1288a:	e7d9      	b.n	12840 <Types::MaxHeap::swap(unsigned long, unsigned long)+0x14>
   1288c:	20001d6c 	.word	0x20001d6c

00012890 <Types::MaxHeap::heapify()>:
void MaxHeap::heapify() {
   12890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const FwSizeType maxIter = this->m_size + 1;
   12894:	f8d0 9004 	ldr.w	r9, [r0, #4]
void MaxHeap::heapify() {
   12898:	4607      	mov	r7, r0
    for (i = 0; (i < maxIter) && (index <= this->m_size); i++) {
   1289a:	f119 0b01 	adds.w	fp, r9, #1
   1289e:	d057      	beq.n	12950 <Types::MaxHeap::heapify()+0xc0>
   128a0:	f04f 0800 	mov.w	r8, #0
        FW_ASSERT(left > index, static_cast<FwAssertArgType>(left), static_cast<FwAssertArgType>(index));
   128a4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 12958 <Types::MaxHeap::heapify()+0xc8>
    FwSizeType index = 0;
   128a8:	4646      	mov	r6, r8
   128aa:	e01d      	b.n	128e8 <Types::MaxHeap::heapify()+0x58>
        FW_ASSERT(right > left, static_cast<FwAssertArgType>(right), static_cast<FwAssertArgType>(left));
   128ac:	42ac      	cmp	r4, r5
   128ae:	d228      	bcs.n	12902 <Types::MaxHeap::heapify()+0x72>
        if (left >= this->m_size) {
   128b0:	687b      	ldr	r3, [r7, #4]
   128b2:	42a3      	cmp	r3, r4
   128b4:	d92e      	bls.n	12914 <Types::MaxHeap::heapify()+0x84>
        largest = this->max(left, largest);
   128b6:	4621      	mov	r1, r4
   128b8:	4632      	mov	r2, r6
   128ba:	4638      	mov	r0, r7
   128bc:	f7ff ff82 	bl	127c4 <Types::MaxHeap::max(unsigned long, unsigned long)>
        if (right < this->m_size) {
   128c0:	687b      	ldr	r3, [r7, #4]
        largest = this->max(left, largest);
   128c2:	4604      	mov	r4, r0
        if (right < this->m_size) {
   128c4:	42ab      	cmp	r3, r5
   128c6:	d829      	bhi.n	1291c <Types::MaxHeap::heapify()+0x8c>
        if (largest == index) {
   128c8:	42b4      	cmp	r4, r6
   128ca:	d02f      	beq.n	1292c <Types::MaxHeap::heapify()+0x9c>
        this->swap(index, largest);
   128cc:	4631      	mov	r1, r6
   128ce:	4622      	mov	r2, r4
   128d0:	4638      	mov	r0, r7
   128d2:	f7ff ffab 	bl	1282c <Types::MaxHeap::swap(unsigned long, unsigned long)>
    for (i = 0; (i < maxIter) && (index <= this->m_size); i++) {
   128d6:	45c1      	cmp	r9, r8
   128d8:	f108 0101 	add.w	r1, r8, #1
   128dc:	d030      	beq.n	12940 <Types::MaxHeap::heapify()+0xb0>
   128de:	687b      	ldr	r3, [r7, #4]
   128e0:	42a3      	cmp	r3, r4
   128e2:	d326      	bcc.n	12932 <Types::MaxHeap::heapify()+0xa2>
   128e4:	4688      	mov	r8, r1
   128e6:	4626      	mov	r6, r4
        left = LCHILD(index);
   128e8:	0075      	lsls	r5, r6, #1
   128ea:	1c6c      	adds	r4, r5, #1
        right = RCHILD(index);
   128ec:	3502      	adds	r5, #2
        FW_ASSERT(left > index, static_cast<FwAssertArgType>(left), static_cast<FwAssertArgType>(index));
   128ee:	42b4      	cmp	r4, r6
   128f0:	d8dc      	bhi.n	128ac <Types::MaxHeap::heapify()+0x1c>
   128f2:	23a6      	movs	r3, #166	; 0xa6
   128f4:	4632      	mov	r2, r6
   128f6:	4621      	mov	r1, r4
   128f8:	4650      	mov	r0, sl
   128fa:	f7ee fea5 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
        FW_ASSERT(right > left, static_cast<FwAssertArgType>(right), static_cast<FwAssertArgType>(left));
   128fe:	42ac      	cmp	r4, r5
   12900:	d3d6      	bcc.n	128b0 <Types::MaxHeap::heapify()+0x20>
   12902:	23a7      	movs	r3, #167	; 0xa7
   12904:	4622      	mov	r2, r4
   12906:	4629      	mov	r1, r5
   12908:	4650      	mov	r0, sl
   1290a:	f7ee fe9d 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
        if (left >= this->m_size) {
   1290e:	687b      	ldr	r3, [r7, #4]
   12910:	42a3      	cmp	r3, r4
   12912:	d8d0      	bhi.n	128b6 <Types::MaxHeap::heapify()+0x26>
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   12914:	42b3      	cmp	r3, r6
   12916:	d30b      	bcc.n	12930 <Types::MaxHeap::heapify()+0xa0>
}
   12918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            largest = this->max(right, largest);
   1291c:	4602      	mov	r2, r0
   1291e:	4629      	mov	r1, r5
   12920:	4638      	mov	r0, r7
   12922:	f7ff ff4f 	bl	127c4 <Types::MaxHeap::max(unsigned long, unsigned long)>
   12926:	4604      	mov	r4, r0
        if (largest == index) {
   12928:	42b4      	cmp	r4, r6
   1292a:	d1cf      	bne.n	128cc <Types::MaxHeap::heapify()+0x3c>
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   1292c:	687b      	ldr	r3, [r7, #4]
   1292e:	e7f1      	b.n	12914 <Types::MaxHeap::heapify()+0x84>
   12930:	4634      	mov	r4, r6
   12932:	4621      	mov	r1, r4
   12934:	22ce      	movs	r2, #206	; 0xce
   12936:	4808      	ldr	r0, [pc, #32]	; (12958 <Types::MaxHeap::heapify()+0xc8>)
}
   12938:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   1293c:	f7ee be74 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    FW_ASSERT(i < maxIter, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(maxIter));
   12940:	4626      	mov	r6, r4
   12942:	23cd      	movs	r3, #205	; 0xcd
   12944:	465a      	mov	r2, fp
   12946:	4804      	ldr	r0, [pc, #16]	; (12958 <Types::MaxHeap::heapify()+0xc8>)
   12948:	f7ee fe7e 	bl	1648 <Fw::SwAssert(char const*, long, long, unsigned long)>
    FW_ASSERT(index <= this->m_size, static_cast<FwAssertArgType>(index));
   1294c:	687b      	ldr	r3, [r7, #4]
   1294e:	e7e1      	b.n	12914 <Types::MaxHeap::heapify()+0x84>
    FwSizeType index = 0;
   12950:	465e      	mov	r6, fp
    for (i = 0; (i < maxIter) && (index <= this->m_size); i++) {
   12952:	4659      	mov	r1, fp
   12954:	e7f5      	b.n	12942 <Types::MaxHeap::heapify()+0xb2>
   12956:	bf00      	nop
   12958:	20001d6c 	.word	0x20001d6c

0001295c <Types::MaxHeap::pop(long&, unsigned long&)>:
bool MaxHeap::pop(FwQueuePriorityType& value, FwSizeType& id) {
   1295c:	b538      	push	{r3, r4, r5, lr}
   1295e:	4603      	mov	r3, r0
    if (this->isEmpty()) {
   12960:	6840      	ldr	r0, [r0, #4]
   12962:	b900      	cbnz	r0, 12966 <Types::MaxHeap::pop(long&, unsigned long&)+0xa>
}
   12964:	bd38      	pop	{r3, r4, r5, pc}
    value = this->m_heap[0].value;
   12966:	681c      	ldr	r4, [r3, #0]
   12968:	6820      	ldr	r0, [r4, #0]
   1296a:	6008      	str	r0, [r1, #0]
    id = this->m_heap[0].id;
   1296c:	68a1      	ldr	r1, [r4, #8]
   1296e:	6011      	str	r1, [r2, #0]
    FwSizeType index = this->m_size - 1;
   12970:	685d      	ldr	r5, [r3, #4]
   12972:	3d01      	subs	r5, #1
    this->m_heap[0] = this->m_heap[index];
   12974:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   12978:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1297c:	ca07      	ldmia	r2, {r0, r1, r2}
   1297e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    this->heapify();
   12982:	4618      	mov	r0, r3
    --this->m_size;
   12984:	605d      	str	r5, [r3, #4]
    this->heapify();
   12986:	f7ff ff83 	bl	12890 <Types::MaxHeap::heapify()>
    return true;
   1298a:	2001      	movs	r0, #1
}
   1298c:	bd38      	pop	{r3, r4, r5, pc}
   1298e:	bf00      	nop

00012990 <Os::Cpu::_getTicks(Os::Generic::UsedTotal&, unsigned long)>:
Cpu::Status Cpu::_getCount(FwSizeType& cpu_count) {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
    return this->m_delegate._getCount(cpu_count);
}

Cpu::Status Cpu::_getTicks(Ticks& ticks, FwSizeType cpu_index) {
   12990:	b530      	push	{r4, r5, lr}
   12992:	4604      	mov	r4, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12994:	3008      	adds	r0, #8
Cpu::Status Cpu::_getTicks(Ticks& ticks, FwSizeType cpu_index) {
   12996:	b083      	sub	sp, #12
   12998:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   1299a:	69a3      	ldr	r3, [r4, #24]
   1299c:	4283      	cmp	r3, r0
   1299e:	d006      	beq.n	129ae <Os::Cpu::_getTicks(Os::Generic::UsedTotal&, unsigned long)+0x1e>
   129a0:	211f      	movs	r1, #31
   129a2:	4806      	ldr	r0, [pc, #24]	; (129bc <Os::Cpu::_getTicks(Os::Generic::UsedTotal&, unsigned long)+0x2c>)
   129a4:	9201      	str	r2, [sp, #4]
   129a6:	f7ee fe31 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getTicks(ticks, cpu_index);
   129aa:	69a0      	ldr	r0, [r4, #24]
   129ac:	9a01      	ldr	r2, [sp, #4]
   129ae:	6803      	ldr	r3, [r0, #0]
   129b0:	4629      	mov	r1, r5
   129b2:	691b      	ldr	r3, [r3, #16]
}
   129b4:	b003      	add	sp, #12
   129b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return this->m_delegate._getTicks(ticks, cpu_index);
   129ba:	4718      	bx	r3
   129bc:	20000db0 	.word	0x20000db0

000129c0 <Os::Cpu::~Cpu()>:
Cpu::~Cpu() {
   129c0:	b538      	push	{r3, r4, r5, lr}
   129c2:	4604      	mov	r4, r0
   129c4:	4b19      	ldr	r3, [pc, #100]	; (12a2c <Os::Cpu::~Cpu()+0x6c>)
    m_delegate.~CpuInterface();
   129c6:	6980      	ldr	r0, [r0, #24]
Cpu::~Cpu() {
   129c8:	6023      	str	r3, [r4, #0]
    m_delegate.~CpuInterface();
   129ca:	6801      	ldr	r1, [r0, #0]
   129cc:	4a18      	ldr	r2, [pc, #96]	; (12a30 <Os::Cpu::~Cpu()+0x70>)
   129ce:	6809      	ldr	r1, [r1, #0]
   129d0:	4291      	cmp	r1, r2
   129d2:	d124      	bne.n	12a1e <Os::Cpu::~Cpu()+0x5e>
   129d4:	6982      	ldr	r2, [r0, #24]
Cpu::~Cpu() {
   129d6:	6003      	str	r3, [r0, #0]
    m_delegate.~CpuInterface();
   129d8:	6810      	ldr	r0, [r2, #0]
   129da:	6805      	ldr	r5, [r0, #0]
   129dc:	428d      	cmp	r5, r1
   129de:	d116      	bne.n	12a0e <Os::Cpu::~Cpu()+0x4e>
   129e0:	6990      	ldr	r0, [r2, #24]
Cpu::~Cpu() {
   129e2:	6013      	str	r3, [r2, #0]
    m_delegate.~CpuInterface();
   129e4:	6802      	ldr	r2, [r0, #0]
   129e6:	6811      	ldr	r1, [r2, #0]
   129e8:	42a9      	cmp	r1, r5
   129ea:	d118      	bne.n	12a1e <Os::Cpu::~Cpu()+0x5e>
   129ec:	6982      	ldr	r2, [r0, #24]
Cpu::~Cpu() {
   129ee:	6003      	str	r3, [r0, #0]
    m_delegate.~CpuInterface();
   129f0:	6810      	ldr	r0, [r2, #0]
   129f2:	6805      	ldr	r5, [r0, #0]
   129f4:	428d      	cmp	r5, r1
   129f6:	d10a      	bne.n	12a0e <Os::Cpu::~Cpu()+0x4e>
   129f8:	6990      	ldr	r0, [r2, #24]
Cpu::~Cpu() {
   129fa:	6013      	str	r3, [r2, #0]
    m_delegate.~CpuInterface();
   129fc:	6803      	ldr	r3, [r0, #0]
   129fe:	681b      	ldr	r3, [r3, #0]
   12a00:	4798      	blx	r3
}
   12a02:	4620      	mov	r0, r4
   12a04:	2120      	movs	r1, #32
   12a06:	f006 f963 	bl	18cd0 <operator delete(void*, unsigned int)>
   12a0a:	4620      	mov	r0, r4
   12a0c:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~CpuInterface();
   12a0e:	4610      	mov	r0, r2
   12a10:	47a8      	blx	r5
}
   12a12:	4620      	mov	r0, r4
   12a14:	2120      	movs	r1, #32
   12a16:	f006 f95b 	bl	18cd0 <operator delete(void*, unsigned int)>
   12a1a:	4620      	mov	r0, r4
   12a1c:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~CpuInterface();
   12a1e:	4788      	blx	r1
}
   12a20:	4620      	mov	r0, r4
   12a22:	2120      	movs	r1, #32
   12a24:	f006 f954 	bl	18cd0 <operator delete(void*, unsigned int)>
   12a28:	4620      	mov	r0, r4
   12a2a:	bd38      	pop	{r3, r4, r5, pc}
   12a2c:	200034e0 	.word	0x200034e0
   12a30:	00012a35 	.word	0x00012a35

00012a34 <Os::Cpu::~Cpu()>:
Cpu::~Cpu() {
   12a34:	b538      	push	{r3, r4, r5, lr}
   12a36:	4604      	mov	r4, r0
   12a38:	4b1f      	ldr	r3, [pc, #124]	; (12ab8 <Os::Cpu::~Cpu()+0x84>)
    m_delegate.~CpuInterface();
   12a3a:	6980      	ldr	r0, [r0, #24]
Cpu::~Cpu() {
   12a3c:	6023      	str	r3, [r4, #0]
    m_delegate.~CpuInterface();
   12a3e:	6801      	ldr	r1, [r0, #0]
   12a40:	4a1e      	ldr	r2, [pc, #120]	; (12abc <Os::Cpu::~Cpu()+0x88>)
   12a42:	6809      	ldr	r1, [r1, #0]
   12a44:	4291      	cmp	r1, r2
   12a46:	d134      	bne.n	12ab2 <Os::Cpu::~Cpu()+0x7e>
   12a48:	6982      	ldr	r2, [r0, #24]
Cpu::~Cpu() {
   12a4a:	6003      	str	r3, [r0, #0]
    m_delegate.~CpuInterface();
   12a4c:	6810      	ldr	r0, [r2, #0]
   12a4e:	6805      	ldr	r5, [r0, #0]
   12a50:	428d      	cmp	r5, r1
   12a52:	d12a      	bne.n	12aaa <Os::Cpu::~Cpu()+0x76>
   12a54:	6990      	ldr	r0, [r2, #24]
Cpu::~Cpu() {
   12a56:	6013      	str	r3, [r2, #0]
    m_delegate.~CpuInterface();
   12a58:	6802      	ldr	r2, [r0, #0]
   12a5a:	6811      	ldr	r1, [r2, #0]
   12a5c:	42a9      	cmp	r1, r5
   12a5e:	d128      	bne.n	12ab2 <Os::Cpu::~Cpu()+0x7e>
   12a60:	6982      	ldr	r2, [r0, #24]
Cpu::~Cpu() {
   12a62:	6003      	str	r3, [r0, #0]
    m_delegate.~CpuInterface();
   12a64:	6810      	ldr	r0, [r2, #0]
   12a66:	6805      	ldr	r5, [r0, #0]
   12a68:	428d      	cmp	r5, r1
   12a6a:	d11e      	bne.n	12aaa <Os::Cpu::~Cpu()+0x76>
   12a6c:	6990      	ldr	r0, [r2, #24]
Cpu::~Cpu() {
   12a6e:	6013      	str	r3, [r2, #0]
    m_delegate.~CpuInterface();
   12a70:	6802      	ldr	r2, [r0, #0]
   12a72:	6811      	ldr	r1, [r2, #0]
   12a74:	42a9      	cmp	r1, r5
   12a76:	d11c      	bne.n	12ab2 <Os::Cpu::~Cpu()+0x7e>
   12a78:	6982      	ldr	r2, [r0, #24]
Cpu::~Cpu() {
   12a7a:	6003      	str	r3, [r0, #0]
    m_delegate.~CpuInterface();
   12a7c:	6810      	ldr	r0, [r2, #0]
   12a7e:	6805      	ldr	r5, [r0, #0]
   12a80:	428d      	cmp	r5, r1
   12a82:	d112      	bne.n	12aaa <Os::Cpu::~Cpu()+0x76>
   12a84:	6990      	ldr	r0, [r2, #24]
Cpu::~Cpu() {
   12a86:	6013      	str	r3, [r2, #0]
    m_delegate.~CpuInterface();
   12a88:	6802      	ldr	r2, [r0, #0]
   12a8a:	6811      	ldr	r1, [r2, #0]
   12a8c:	42a9      	cmp	r1, r5
   12a8e:	d110      	bne.n	12ab2 <Os::Cpu::~Cpu()+0x7e>
   12a90:	6982      	ldr	r2, [r0, #24]
Cpu::~Cpu() {
   12a92:	6003      	str	r3, [r0, #0]
    m_delegate.~CpuInterface();
   12a94:	6810      	ldr	r0, [r2, #0]
   12a96:	6805      	ldr	r5, [r0, #0]
   12a98:	428d      	cmp	r5, r1
   12a9a:	d106      	bne.n	12aaa <Os::Cpu::~Cpu()+0x76>
   12a9c:	6990      	ldr	r0, [r2, #24]
Cpu::~Cpu() {
   12a9e:	6013      	str	r3, [r2, #0]
    m_delegate.~CpuInterface();
   12aa0:	6803      	ldr	r3, [r0, #0]
   12aa2:	681b      	ldr	r3, [r3, #0]
   12aa4:	4798      	blx	r3
}
   12aa6:	4620      	mov	r0, r4
   12aa8:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~CpuInterface();
   12aaa:	4610      	mov	r0, r2
   12aac:	47a8      	blx	r5
}
   12aae:	4620      	mov	r0, r4
   12ab0:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~CpuInterface();
   12ab2:	4788      	blx	r1
}
   12ab4:	4620      	mov	r0, r4
   12ab6:	bd38      	pop	{r3, r4, r5, pc}
   12ab8:	200034e0 	.word	0x200034e0
   12abc:	00012a35 	.word	0x00012a35

00012ac0 <Os::Cpu::getHandle()>:

CpuHandle* Cpu::getHandle() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12ac0:	6983      	ldr	r3, [r0, #24]
CpuHandle* Cpu::getHandle() {
   12ac2:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12ac4:	f100 0408 	add.w	r4, r0, #8
   12ac8:	42a3      	cmp	r3, r4
   12aca:	d005      	beq.n	12ad8 <Os::Cpu::getHandle()+0x18>
   12acc:	4605      	mov	r5, r0
   12ace:	2124      	movs	r1, #36	; 0x24
   12ad0:	4840      	ldr	r0, [pc, #256]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12ad2:	f7ee fd9b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12ad6:	69ac      	ldr	r4, [r5, #24]
   12ad8:	6823      	ldr	r3, [r4, #0]
   12ada:	4d3f      	ldr	r5, [pc, #252]	; (12bd8 <Os::Cpu::getHandle()+0x118>)
   12adc:	695b      	ldr	r3, [r3, #20]
   12ade:	42ab      	cmp	r3, r5
   12ae0:	d174      	bne.n	12bcc <Os::Cpu::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12ae2:	f104 0608 	add.w	r6, r4, #8
   12ae6:	69a3      	ldr	r3, [r4, #24]
   12ae8:	42b3      	cmp	r3, r6
   12aea:	d004      	beq.n	12af6 <Os::Cpu::getHandle()+0x36>
   12aec:	2124      	movs	r1, #36	; 0x24
   12aee:	4839      	ldr	r0, [pc, #228]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12af0:	f7ee fd8c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12af4:	69a6      	ldr	r6, [r4, #24]
   12af6:	6833      	ldr	r3, [r6, #0]
   12af8:	695b      	ldr	r3, [r3, #20]
   12afa:	42ab      	cmp	r3, r5
   12afc:	d162      	bne.n	12bc4 <Os::Cpu::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12afe:	f106 0408 	add.w	r4, r6, #8
   12b02:	69b3      	ldr	r3, [r6, #24]
   12b04:	42a3      	cmp	r3, r4
   12b06:	d004      	beq.n	12b12 <Os::Cpu::getHandle()+0x52>
   12b08:	2124      	movs	r1, #36	; 0x24
   12b0a:	4832      	ldr	r0, [pc, #200]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12b0c:	f7ee fd7e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12b10:	69b4      	ldr	r4, [r6, #24]
   12b12:	6823      	ldr	r3, [r4, #0]
   12b14:	695b      	ldr	r3, [r3, #20]
   12b16:	42ab      	cmp	r3, r5
   12b18:	d158      	bne.n	12bcc <Os::Cpu::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12b1a:	f104 0608 	add.w	r6, r4, #8
   12b1e:	69a3      	ldr	r3, [r4, #24]
   12b20:	42b3      	cmp	r3, r6
   12b22:	d004      	beq.n	12b2e <Os::Cpu::getHandle()+0x6e>
   12b24:	2124      	movs	r1, #36	; 0x24
   12b26:	482b      	ldr	r0, [pc, #172]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12b28:	f7ee fd70 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12b2c:	69a6      	ldr	r6, [r4, #24]
   12b2e:	6833      	ldr	r3, [r6, #0]
   12b30:	695b      	ldr	r3, [r3, #20]
   12b32:	42ab      	cmp	r3, r5
   12b34:	d146      	bne.n	12bc4 <Os::Cpu::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12b36:	f106 0408 	add.w	r4, r6, #8
   12b3a:	69b3      	ldr	r3, [r6, #24]
   12b3c:	42a3      	cmp	r3, r4
   12b3e:	d004      	beq.n	12b4a <Os::Cpu::getHandle()+0x8a>
   12b40:	2124      	movs	r1, #36	; 0x24
   12b42:	4824      	ldr	r0, [pc, #144]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12b44:	f7ee fd62 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12b48:	69b4      	ldr	r4, [r6, #24]
   12b4a:	6823      	ldr	r3, [r4, #0]
   12b4c:	695b      	ldr	r3, [r3, #20]
   12b4e:	42ab      	cmp	r3, r5
   12b50:	d13c      	bne.n	12bcc <Os::Cpu::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12b52:	f104 0608 	add.w	r6, r4, #8
   12b56:	69a3      	ldr	r3, [r4, #24]
   12b58:	42b3      	cmp	r3, r6
   12b5a:	d004      	beq.n	12b66 <Os::Cpu::getHandle()+0xa6>
   12b5c:	2124      	movs	r1, #36	; 0x24
   12b5e:	481d      	ldr	r0, [pc, #116]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12b60:	f7ee fd54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12b64:	69a6      	ldr	r6, [r4, #24]
   12b66:	6833      	ldr	r3, [r6, #0]
   12b68:	695b      	ldr	r3, [r3, #20]
   12b6a:	42ab      	cmp	r3, r5
   12b6c:	d12a      	bne.n	12bc4 <Os::Cpu::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12b6e:	f106 0408 	add.w	r4, r6, #8
   12b72:	69b3      	ldr	r3, [r6, #24]
   12b74:	42a3      	cmp	r3, r4
   12b76:	d004      	beq.n	12b82 <Os::Cpu::getHandle()+0xc2>
   12b78:	2124      	movs	r1, #36	; 0x24
   12b7a:	4816      	ldr	r0, [pc, #88]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12b7c:	f7ee fd46 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12b80:	69b4      	ldr	r4, [r6, #24]
   12b82:	6823      	ldr	r3, [r4, #0]
   12b84:	695b      	ldr	r3, [r3, #20]
   12b86:	42ab      	cmp	r3, r5
   12b88:	d120      	bne.n	12bcc <Os::Cpu::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12b8a:	f104 0608 	add.w	r6, r4, #8
   12b8e:	69a3      	ldr	r3, [r4, #24]
   12b90:	42b3      	cmp	r3, r6
   12b92:	d004      	beq.n	12b9e <Os::Cpu::getHandle()+0xde>
   12b94:	2124      	movs	r1, #36	; 0x24
   12b96:	480f      	ldr	r0, [pc, #60]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12b98:	f7ee fd38 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12b9c:	69a6      	ldr	r6, [r4, #24]
   12b9e:	6833      	ldr	r3, [r6, #0]
   12ba0:	695b      	ldr	r3, [r3, #20]
   12ba2:	42ab      	cmp	r3, r5
   12ba4:	d10e      	bne.n	12bc4 <Os::Cpu::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12ba6:	f106 0008 	add.w	r0, r6, #8
   12baa:	69b3      	ldr	r3, [r6, #24]
   12bac:	4283      	cmp	r3, r0
   12bae:	d004      	beq.n	12bba <Os::Cpu::getHandle()+0xfa>
   12bb0:	2124      	movs	r1, #36	; 0x24
   12bb2:	4808      	ldr	r0, [pc, #32]	; (12bd4 <Os::Cpu::getHandle()+0x114>)
   12bb4:	f7ee fd2a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12bb8:	69b0      	ldr	r0, [r6, #24]
   12bba:	6803      	ldr	r3, [r0, #0]
}
   12bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   12bc0:	695b      	ldr	r3, [r3, #20]
   12bc2:	4718      	bx	r3
   12bc4:	4630      	mov	r0, r6
}
   12bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   12bca:	4718      	bx	r3
   12bcc:	4620      	mov	r0, r4
}
   12bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   12bd2:	4718      	bx	r3
   12bd4:	20000db0 	.word	0x20000db0
   12bd8:	00012ac1 	.word	0x00012ac1

00012bdc <Os::Cpu::_getCount(unsigned long&)>:
Cpu::Status Cpu::_getCount(FwSizeType& cpu_count) {
   12bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12be0:	6983      	ldr	r3, [r0, #24]
   12be2:	f100 0408 	add.w	r4, r0, #8
Cpu::Status Cpu::_getCount(FwSizeType& cpu_count) {
   12be6:	460f      	mov	r7, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12be8:	42a3      	cmp	r3, r4
   12bea:	d005      	beq.n	12bf8 <Os::Cpu::_getCount(unsigned long&)+0x1c>
   12bec:	4605      	mov	r5, r0
   12bee:	211a      	movs	r1, #26
   12bf0:	4842      	ldr	r0, [pc, #264]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12bf2:	f7ee fd0b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12bf6:	69ac      	ldr	r4, [r5, #24]
   12bf8:	6823      	ldr	r3, [r4, #0]
   12bfa:	4d41      	ldr	r5, [pc, #260]	; (12d00 <Os::Cpu::_getCount(unsigned long&)+0x124>)
   12bfc:	68db      	ldr	r3, [r3, #12]
   12bfe:	42ab      	cmp	r3, r5
   12c00:	d176      	bne.n	12cf0 <Os::Cpu::_getCount(unsigned long&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12c02:	f104 0608 	add.w	r6, r4, #8
   12c06:	69a3      	ldr	r3, [r4, #24]
   12c08:	42b3      	cmp	r3, r6
   12c0a:	d004      	beq.n	12c16 <Os::Cpu::_getCount(unsigned long&)+0x3a>
   12c0c:	211a      	movs	r1, #26
   12c0e:	483b      	ldr	r0, [pc, #236]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12c10:	f7ee fcfc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12c14:	69a6      	ldr	r6, [r4, #24]
   12c16:	6833      	ldr	r3, [r6, #0]
   12c18:	68db      	ldr	r3, [r3, #12]
   12c1a:	42ab      	cmp	r3, r5
   12c1c:	d163      	bne.n	12ce6 <Os::Cpu::_getCount(unsigned long&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12c1e:	f106 0408 	add.w	r4, r6, #8
   12c22:	69b3      	ldr	r3, [r6, #24]
   12c24:	42a3      	cmp	r3, r4
   12c26:	d004      	beq.n	12c32 <Os::Cpu::_getCount(unsigned long&)+0x56>
   12c28:	211a      	movs	r1, #26
   12c2a:	4834      	ldr	r0, [pc, #208]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12c2c:	f7ee fcee 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12c30:	69b4      	ldr	r4, [r6, #24]
   12c32:	6823      	ldr	r3, [r4, #0]
   12c34:	68db      	ldr	r3, [r3, #12]
   12c36:	42ab      	cmp	r3, r5
   12c38:	d15a      	bne.n	12cf0 <Os::Cpu::_getCount(unsigned long&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12c3a:	f104 0608 	add.w	r6, r4, #8
   12c3e:	69a3      	ldr	r3, [r4, #24]
   12c40:	42b3      	cmp	r3, r6
   12c42:	d004      	beq.n	12c4e <Os::Cpu::_getCount(unsigned long&)+0x72>
   12c44:	211a      	movs	r1, #26
   12c46:	482d      	ldr	r0, [pc, #180]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12c48:	f7ee fce0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12c4c:	69a6      	ldr	r6, [r4, #24]
   12c4e:	6833      	ldr	r3, [r6, #0]
   12c50:	68db      	ldr	r3, [r3, #12]
   12c52:	42ab      	cmp	r3, r5
   12c54:	d147      	bne.n	12ce6 <Os::Cpu::_getCount(unsigned long&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12c56:	f106 0408 	add.w	r4, r6, #8
   12c5a:	69b3      	ldr	r3, [r6, #24]
   12c5c:	42a3      	cmp	r3, r4
   12c5e:	d004      	beq.n	12c6a <Os::Cpu::_getCount(unsigned long&)+0x8e>
   12c60:	211a      	movs	r1, #26
   12c62:	4826      	ldr	r0, [pc, #152]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12c64:	f7ee fcd2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12c68:	69b4      	ldr	r4, [r6, #24]
   12c6a:	6823      	ldr	r3, [r4, #0]
   12c6c:	68db      	ldr	r3, [r3, #12]
   12c6e:	42ab      	cmp	r3, r5
   12c70:	d13e      	bne.n	12cf0 <Os::Cpu::_getCount(unsigned long&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12c72:	f104 0608 	add.w	r6, r4, #8
   12c76:	69a3      	ldr	r3, [r4, #24]
   12c78:	42b3      	cmp	r3, r6
   12c7a:	d004      	beq.n	12c86 <Os::Cpu::_getCount(unsigned long&)+0xaa>
   12c7c:	211a      	movs	r1, #26
   12c7e:	481f      	ldr	r0, [pc, #124]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12c80:	f7ee fcc4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12c84:	69a6      	ldr	r6, [r4, #24]
   12c86:	6833      	ldr	r3, [r6, #0]
   12c88:	68db      	ldr	r3, [r3, #12]
   12c8a:	42ab      	cmp	r3, r5
   12c8c:	d12b      	bne.n	12ce6 <Os::Cpu::_getCount(unsigned long&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12c8e:	f106 0408 	add.w	r4, r6, #8
   12c92:	69b3      	ldr	r3, [r6, #24]
   12c94:	42a3      	cmp	r3, r4
   12c96:	d004      	beq.n	12ca2 <Os::Cpu::_getCount(unsigned long&)+0xc6>
   12c98:	211a      	movs	r1, #26
   12c9a:	4818      	ldr	r0, [pc, #96]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12c9c:	f7ee fcb6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12ca0:	69b4      	ldr	r4, [r6, #24]
   12ca2:	6823      	ldr	r3, [r4, #0]
   12ca4:	68db      	ldr	r3, [r3, #12]
   12ca6:	42ab      	cmp	r3, r5
   12ca8:	d122      	bne.n	12cf0 <Os::Cpu::_getCount(unsigned long&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12caa:	f104 0608 	add.w	r6, r4, #8
   12cae:	69a3      	ldr	r3, [r4, #24]
   12cb0:	42b3      	cmp	r3, r6
   12cb2:	d004      	beq.n	12cbe <Os::Cpu::_getCount(unsigned long&)+0xe2>
   12cb4:	211a      	movs	r1, #26
   12cb6:	4811      	ldr	r0, [pc, #68]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12cb8:	f7ee fca8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12cbc:	69a6      	ldr	r6, [r4, #24]
   12cbe:	6833      	ldr	r3, [r6, #0]
   12cc0:	68db      	ldr	r3, [r3, #12]
   12cc2:	42ab      	cmp	r3, r5
   12cc4:	d10f      	bne.n	12ce6 <Os::Cpu::_getCount(unsigned long&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12cc6:	f106 0008 	add.w	r0, r6, #8
   12cca:	69b3      	ldr	r3, [r6, #24]
   12ccc:	4283      	cmp	r3, r0
   12cce:	d004      	beq.n	12cda <Os::Cpu::_getCount(unsigned long&)+0xfe>
   12cd0:	211a      	movs	r1, #26
   12cd2:	480a      	ldr	r0, [pc, #40]	; (12cfc <Os::Cpu::_getCount(unsigned long&)+0x120>)
   12cd4:	f7ee fc9a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12cd8:	69b0      	ldr	r0, [r6, #24]
   12cda:	6803      	ldr	r3, [r0, #0]
   12cdc:	4639      	mov	r1, r7
   12cde:	68db      	ldr	r3, [r3, #12]
}
   12ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getCount(cpu_count);
   12ce4:	4718      	bx	r3
   12ce6:	4639      	mov	r1, r7
   12ce8:	4630      	mov	r0, r6
}
   12cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getCount(cpu_count);
   12cee:	4718      	bx	r3
   12cf0:	4639      	mov	r1, r7
   12cf2:	4620      	mov	r0, r4
}
   12cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getCount(cpu_count);
   12cf8:	4718      	bx	r3
   12cfa:	bf00      	nop
   12cfc:	20000db0 	.word	0x20000db0
   12d00:	00012bdd 	.word	0x00012bdd

00012d04 <Os::Cpu::init()>:
void Cpu::init() {
   12d04:	b538      	push	{r3, r4, r5, lr}
    static Cpu _singleton;
   12d06:	4c0b      	ldr	r4, [pc, #44]	; (12d34 <Os::Cpu::init()+0x30>)
   12d08:	6823      	ldr	r3, [r4, #0]
   12d0a:	07db      	lsls	r3, r3, #31
   12d0c:	d500      	bpl.n	12d10 <Os::Cpu::init()+0xc>
}
   12d0e:	bd38      	pop	{r3, r4, r5, pc}
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12d10:	4d09      	ldr	r5, [pc, #36]	; (12d38 <Os::Cpu::init()+0x34>)
   12d12:	4b0a      	ldr	r3, [pc, #40]	; (12d3c <Os::Cpu::init()+0x38>)
   12d14:	4628      	mov	r0, r5
   12d16:	f840 3b08 	str.w	r3, [r0], #8
   12d1a:	f7ed fa1d 	bl	158 <Os::CpuInterface::getDelegate(unsigned char (&) [16])>
    static Cpu _singleton;
   12d1e:	2301      	movs	r3, #1
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12d20:	61a8      	str	r0, [r5, #24]
    static Cpu _singleton;
   12d22:	4628      	mov	r0, r5
   12d24:	6023      	str	r3, [r4, #0]
   12d26:	4a06      	ldr	r2, [pc, #24]	; (12d40 <Os::Cpu::init()+0x3c>)
   12d28:	4906      	ldr	r1, [pc, #24]	; (12d44 <Os::Cpu::init()+0x40>)
}
   12d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    static Cpu _singleton;
   12d2e:	f007 bb27 	b.w	1a380 <__aeabi_atexit>
   12d32:	bf00      	nop
   12d34:	2000ba14 	.word	0x2000ba14
   12d38:	2000b8a8 	.word	0x2000b8a8
   12d3c:	200034e0 	.word	0x200034e0
   12d40:	20005a58 	.word	0x20005a58
   12d44:	00012a35 	.word	0x00012a35

00012d48 <Os::Cpu::getCount(unsigned long&)>:

Cpu::Status Cpu::getCount(FwSizeType& cpu_count) {
   12d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static Cpu _singleton;
   12d4c:	4c2c      	ldr	r4, [pc, #176]	; (12e00 <Os::Cpu::getCount(unsigned long&)+0xb8>)
Cpu::Status Cpu::getCount(FwSizeType& cpu_count) {
   12d4e:	4606      	mov	r6, r0
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12d50:	4d2c      	ldr	r5, [pc, #176]	; (12e04 <Os::Cpu::getCount(unsigned long&)+0xbc>)
    static Cpu _singleton;
   12d52:	6823      	ldr	r3, [r4, #0]
   12d54:	07db      	lsls	r3, r3, #31
   12d56:	d539      	bpl.n	12dcc <Os::Cpu::getCount(unsigned long&)+0x84>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12d58:	69ac      	ldr	r4, [r5, #24]
   12d5a:	4b2b      	ldr	r3, [pc, #172]	; (12e08 <Os::Cpu::getCount(unsigned long&)+0xc0>)
   12d5c:	429c      	cmp	r4, r3
   12d5e:	d004      	beq.n	12d6a <Os::Cpu::getCount(unsigned long&)+0x22>
   12d60:	211a      	movs	r1, #26
   12d62:	482a      	ldr	r0, [pc, #168]	; (12e0c <Os::Cpu::getCount(unsigned long&)+0xc4>)
   12d64:	f7ee fc52 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12d68:	69ac      	ldr	r4, [r5, #24]
   12d6a:	6823      	ldr	r3, [r4, #0]
   12d6c:	4f28      	ldr	r7, [pc, #160]	; (12e10 <Os::Cpu::getCount(unsigned long&)+0xc8>)
   12d6e:	68db      	ldr	r3, [r3, #12]
   12d70:	42bb      	cmp	r3, r7
   12d72:	d13a      	bne.n	12dea <Os::Cpu::getCount(unsigned long&)+0xa2>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12d74:	f104 0508 	add.w	r5, r4, #8
   12d78:	69a3      	ldr	r3, [r4, #24]
   12d7a:	42ab      	cmp	r3, r5
   12d7c:	d004      	beq.n	12d88 <Os::Cpu::getCount(unsigned long&)+0x40>
   12d7e:	211a      	movs	r1, #26
   12d80:	4822      	ldr	r0, [pc, #136]	; (12e0c <Os::Cpu::getCount(unsigned long&)+0xc4>)
   12d82:	f7ee fc43 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12d86:	69a5      	ldr	r5, [r4, #24]
   12d88:	682b      	ldr	r3, [r5, #0]
   12d8a:	68db      	ldr	r3, [r3, #12]
   12d8c:	42bb      	cmp	r3, r7
   12d8e:	d131      	bne.n	12df4 <Os::Cpu::getCount(unsigned long&)+0xac>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12d90:	f105 0408 	add.w	r4, r5, #8
   12d94:	69ab      	ldr	r3, [r5, #24]
   12d96:	42a3      	cmp	r3, r4
   12d98:	d004      	beq.n	12da4 <Os::Cpu::getCount(unsigned long&)+0x5c>
   12d9a:	211a      	movs	r1, #26
   12d9c:	481b      	ldr	r0, [pc, #108]	; (12e0c <Os::Cpu::getCount(unsigned long&)+0xc4>)
   12d9e:	f7ee fc35 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12da2:	69ac      	ldr	r4, [r5, #24]
   12da4:	6823      	ldr	r3, [r4, #0]
   12da6:	68db      	ldr	r3, [r3, #12]
   12da8:	42bb      	cmp	r3, r7
   12daa:	d11e      	bne.n	12dea <Os::Cpu::getCount(unsigned long&)+0xa2>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12dac:	f104 0008 	add.w	r0, r4, #8
   12db0:	69a3      	ldr	r3, [r4, #24]
   12db2:	4283      	cmp	r3, r0
   12db4:	d004      	beq.n	12dc0 <Os::Cpu::getCount(unsigned long&)+0x78>
   12db6:	211a      	movs	r1, #26
   12db8:	4814      	ldr	r0, [pc, #80]	; (12e0c <Os::Cpu::getCount(unsigned long&)+0xc4>)
   12dba:	f7ee fc27 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getCount(cpu_count);
   12dbe:	69a0      	ldr	r0, [r4, #24]
   12dc0:	6803      	ldr	r3, [r0, #0]
   12dc2:	4631      	mov	r1, r6
   12dc4:	68db      	ldr	r3, [r3, #12]
    return Cpu::getSingleton()._getCount(cpu_count);
}
   12dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getCount(cpu_count);
   12dca:	4718      	bx	r3
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12dcc:	4b11      	ldr	r3, [pc, #68]	; (12e14 <Os::Cpu::getCount(unsigned long&)+0xcc>)
   12dce:	4628      	mov	r0, r5
   12dd0:	f840 3b08 	str.w	r3, [r0], #8
   12dd4:	f7ed f9c0 	bl	158 <Os::CpuInterface::getDelegate(unsigned char (&) [16])>
    static Cpu _singleton;
   12dd8:	2301      	movs	r3, #1
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12dda:	61a8      	str	r0, [r5, #24]
    static Cpu _singleton;
   12ddc:	4628      	mov	r0, r5
   12dde:	4a0e      	ldr	r2, [pc, #56]	; (12e18 <Os::Cpu::getCount(unsigned long&)+0xd0>)
   12de0:	490e      	ldr	r1, [pc, #56]	; (12e1c <Os::Cpu::getCount(unsigned long&)+0xd4>)
   12de2:	6023      	str	r3, [r4, #0]
   12de4:	f007 facc 	bl	1a380 <__aeabi_atexit>
   12de8:	e7b6      	b.n	12d58 <Os::Cpu::getCount(unsigned long&)+0x10>
    return this->m_delegate._getCount(cpu_count);
   12dea:	4631      	mov	r1, r6
   12dec:	4620      	mov	r0, r4
}
   12dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getCount(cpu_count);
   12df2:	4718      	bx	r3
   12df4:	4631      	mov	r1, r6
   12df6:	4628      	mov	r0, r5
}
   12df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getCount(cpu_count);
   12dfc:	4718      	bx	r3
   12dfe:	bf00      	nop
   12e00:	2000ba14 	.word	0x2000ba14
   12e04:	2000b8a8 	.word	0x2000b8a8
   12e08:	2000b8b0 	.word	0x2000b8b0
   12e0c:	20000db0 	.word	0x20000db0
   12e10:	00012bdd 	.word	0x00012bdd
   12e14:	200034e0 	.word	0x200034e0
   12e18:	20005a58 	.word	0x20005a58
   12e1c:	00012a35 	.word	0x00012a35

00012e20 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)>:

Cpu::Status Cpu::getTicks(Ticks& ticks, FwSizeType cpu_index) {
   12e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static Cpu _singleton;
   12e24:	4f12      	ldr	r7, [pc, #72]	; (12e70 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x50>)
Cpu::Status Cpu::getTicks(Ticks& ticks, FwSizeType cpu_index) {
   12e26:	4604      	mov	r4, r0
   12e28:	460d      	mov	r5, r1
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12e2a:	4e12      	ldr	r6, [pc, #72]	; (12e74 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x54>)
    static Cpu _singleton;
   12e2c:	683b      	ldr	r3, [r7, #0]
   12e2e:	07db      	lsls	r3, r3, #31
   12e30:	d50f      	bpl.n	12e52 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x32>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<CpuInterface*>(&this->m_handle_storage[0]));
   12e32:	69b0      	ldr	r0, [r6, #24]
   12e34:	4b10      	ldr	r3, [pc, #64]	; (12e78 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x58>)
   12e36:	4298      	cmp	r0, r3
   12e38:	d004      	beq.n	12e44 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x24>
   12e3a:	211f      	movs	r1, #31
   12e3c:	480f      	ldr	r0, [pc, #60]	; (12e7c <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x5c>)
   12e3e:	f7ee fbe5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getTicks(ticks, cpu_index);
   12e42:	69b0      	ldr	r0, [r6, #24]
   12e44:	6803      	ldr	r3, [r0, #0]
   12e46:	462a      	mov	r2, r5
   12e48:	4621      	mov	r1, r4
   12e4a:	691b      	ldr	r3, [r3, #16]
    return Cpu::getSingleton()._getTicks(ticks, cpu_index);
}
   12e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getTicks(ticks, cpu_index);
   12e50:	4718      	bx	r3
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12e52:	4b0b      	ldr	r3, [pc, #44]	; (12e80 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x60>)
   12e54:	4630      	mov	r0, r6
   12e56:	f840 3b08 	str.w	r3, [r0], #8
   12e5a:	f7ed f97d 	bl	158 <Os::CpuInterface::getDelegate(unsigned char (&) [16])>
    static Cpu _singleton;
   12e5e:	2301      	movs	r3, #1
Cpu::Cpu() : m_delegate(*CpuInterface::getDelegate(m_handle_storage)) {}
   12e60:	61b0      	str	r0, [r6, #24]
    static Cpu _singleton;
   12e62:	4630      	mov	r0, r6
   12e64:	4a07      	ldr	r2, [pc, #28]	; (12e84 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x64>)
   12e66:	4908      	ldr	r1, [pc, #32]	; (12e88 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x68>)
   12e68:	603b      	str	r3, [r7, #0]
   12e6a:	f007 fa89 	bl	1a380 <__aeabi_atexit>
   12e6e:	e7e0      	b.n	12e32 <Os::Cpu::getTicks(Os::Generic::UsedTotal&, unsigned long)+0x12>
   12e70:	2000ba14 	.word	0x2000ba14
   12e74:	2000b8a8 	.word	0x2000b8a8
   12e78:	2000b8b0 	.word	0x2000b8b0
   12e7c:	20000db0 	.word	0x20000db0
   12e80:	200034e0 	.word	0x200034e0
   12e84:	20005a58 	.word	0x20005a58
   12e88:	00012a35 	.word	0x00012a35

00012e8c <Os::Memory::~Memory()>:

namespace Os {

Memory::Memory() : m_delegate(*MemoryInterface::getDelegate(m_handle_storage)) {}

Memory::~Memory() {
   12e8c:	b538      	push	{r3, r4, r5, lr}
   12e8e:	4604      	mov	r4, r0
   12e90:	4b19      	ldr	r3, [pc, #100]	; (12ef8 <Os::Memory::~Memory()+0x6c>)
    m_delegate.~MemoryInterface();
   12e92:	6980      	ldr	r0, [r0, #24]
Memory::~Memory() {
   12e94:	6023      	str	r3, [r4, #0]
    m_delegate.~MemoryInterface();
   12e96:	6801      	ldr	r1, [r0, #0]
   12e98:	4a18      	ldr	r2, [pc, #96]	; (12efc <Os::Memory::~Memory()+0x70>)
   12e9a:	6809      	ldr	r1, [r1, #0]
   12e9c:	4291      	cmp	r1, r2
   12e9e:	d124      	bne.n	12eea <Os::Memory::~Memory()+0x5e>
   12ea0:	6982      	ldr	r2, [r0, #24]
Memory::~Memory() {
   12ea2:	6003      	str	r3, [r0, #0]
    m_delegate.~MemoryInterface();
   12ea4:	6810      	ldr	r0, [r2, #0]
   12ea6:	6805      	ldr	r5, [r0, #0]
   12ea8:	428d      	cmp	r5, r1
   12eaa:	d116      	bne.n	12eda <Os::Memory::~Memory()+0x4e>
   12eac:	6990      	ldr	r0, [r2, #24]
Memory::~Memory() {
   12eae:	6013      	str	r3, [r2, #0]
    m_delegate.~MemoryInterface();
   12eb0:	6802      	ldr	r2, [r0, #0]
   12eb2:	6811      	ldr	r1, [r2, #0]
   12eb4:	42a9      	cmp	r1, r5
   12eb6:	d118      	bne.n	12eea <Os::Memory::~Memory()+0x5e>
   12eb8:	6982      	ldr	r2, [r0, #24]
Memory::~Memory() {
   12eba:	6003      	str	r3, [r0, #0]
    m_delegate.~MemoryInterface();
   12ebc:	6810      	ldr	r0, [r2, #0]
   12ebe:	6805      	ldr	r5, [r0, #0]
   12ec0:	428d      	cmp	r5, r1
   12ec2:	d10a      	bne.n	12eda <Os::Memory::~Memory()+0x4e>
   12ec4:	6990      	ldr	r0, [r2, #24]
Memory::~Memory() {
   12ec6:	6013      	str	r3, [r2, #0]
    m_delegate.~MemoryInterface();
   12ec8:	6803      	ldr	r3, [r0, #0]
   12eca:	681b      	ldr	r3, [r3, #0]
   12ecc:	4798      	blx	r3
}
   12ece:	4620      	mov	r0, r4
   12ed0:	2120      	movs	r1, #32
   12ed2:	f005 fefd 	bl	18cd0 <operator delete(void*, unsigned int)>
   12ed6:	4620      	mov	r0, r4
   12ed8:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~MemoryInterface();
   12eda:	4610      	mov	r0, r2
   12edc:	47a8      	blx	r5
}
   12ede:	4620      	mov	r0, r4
   12ee0:	2120      	movs	r1, #32
   12ee2:	f005 fef5 	bl	18cd0 <operator delete(void*, unsigned int)>
   12ee6:	4620      	mov	r0, r4
   12ee8:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~MemoryInterface();
   12eea:	4788      	blx	r1
}
   12eec:	4620      	mov	r0, r4
   12eee:	2120      	movs	r1, #32
   12ef0:	f005 feee 	bl	18cd0 <operator delete(void*, unsigned int)>
   12ef4:	4620      	mov	r0, r4
   12ef6:	bd38      	pop	{r3, r4, r5, pc}
   12ef8:	200035a4 	.word	0x200035a4
   12efc:	00012f01 	.word	0x00012f01

00012f00 <Os::Memory::~Memory()>:
Memory::~Memory() {
   12f00:	b538      	push	{r3, r4, r5, lr}
   12f02:	4604      	mov	r4, r0
   12f04:	4b1f      	ldr	r3, [pc, #124]	; (12f84 <Os::Memory::~Memory()+0x84>)
    m_delegate.~MemoryInterface();
   12f06:	6980      	ldr	r0, [r0, #24]
Memory::~Memory() {
   12f08:	6023      	str	r3, [r4, #0]
    m_delegate.~MemoryInterface();
   12f0a:	6801      	ldr	r1, [r0, #0]
   12f0c:	4a1e      	ldr	r2, [pc, #120]	; (12f88 <Os::Memory::~Memory()+0x88>)
   12f0e:	6809      	ldr	r1, [r1, #0]
   12f10:	4291      	cmp	r1, r2
   12f12:	d134      	bne.n	12f7e <Os::Memory::~Memory()+0x7e>
   12f14:	6982      	ldr	r2, [r0, #24]
Memory::~Memory() {
   12f16:	6003      	str	r3, [r0, #0]
    m_delegate.~MemoryInterface();
   12f18:	6810      	ldr	r0, [r2, #0]
   12f1a:	6805      	ldr	r5, [r0, #0]
   12f1c:	428d      	cmp	r5, r1
   12f1e:	d12a      	bne.n	12f76 <Os::Memory::~Memory()+0x76>
   12f20:	6990      	ldr	r0, [r2, #24]
Memory::~Memory() {
   12f22:	6013      	str	r3, [r2, #0]
    m_delegate.~MemoryInterface();
   12f24:	6802      	ldr	r2, [r0, #0]
   12f26:	6811      	ldr	r1, [r2, #0]
   12f28:	42a9      	cmp	r1, r5
   12f2a:	d128      	bne.n	12f7e <Os::Memory::~Memory()+0x7e>
   12f2c:	6982      	ldr	r2, [r0, #24]
Memory::~Memory() {
   12f2e:	6003      	str	r3, [r0, #0]
    m_delegate.~MemoryInterface();
   12f30:	6810      	ldr	r0, [r2, #0]
   12f32:	6805      	ldr	r5, [r0, #0]
   12f34:	428d      	cmp	r5, r1
   12f36:	d11e      	bne.n	12f76 <Os::Memory::~Memory()+0x76>
   12f38:	6990      	ldr	r0, [r2, #24]
Memory::~Memory() {
   12f3a:	6013      	str	r3, [r2, #0]
    m_delegate.~MemoryInterface();
   12f3c:	6802      	ldr	r2, [r0, #0]
   12f3e:	6811      	ldr	r1, [r2, #0]
   12f40:	42a9      	cmp	r1, r5
   12f42:	d11c      	bne.n	12f7e <Os::Memory::~Memory()+0x7e>
   12f44:	6982      	ldr	r2, [r0, #24]
Memory::~Memory() {
   12f46:	6003      	str	r3, [r0, #0]
    m_delegate.~MemoryInterface();
   12f48:	6810      	ldr	r0, [r2, #0]
   12f4a:	6805      	ldr	r5, [r0, #0]
   12f4c:	428d      	cmp	r5, r1
   12f4e:	d112      	bne.n	12f76 <Os::Memory::~Memory()+0x76>
   12f50:	6990      	ldr	r0, [r2, #24]
Memory::~Memory() {
   12f52:	6013      	str	r3, [r2, #0]
    m_delegate.~MemoryInterface();
   12f54:	6802      	ldr	r2, [r0, #0]
   12f56:	6811      	ldr	r1, [r2, #0]
   12f58:	42a9      	cmp	r1, r5
   12f5a:	d110      	bne.n	12f7e <Os::Memory::~Memory()+0x7e>
   12f5c:	6982      	ldr	r2, [r0, #24]
Memory::~Memory() {
   12f5e:	6003      	str	r3, [r0, #0]
    m_delegate.~MemoryInterface();
   12f60:	6810      	ldr	r0, [r2, #0]
   12f62:	6805      	ldr	r5, [r0, #0]
   12f64:	428d      	cmp	r5, r1
   12f66:	d106      	bne.n	12f76 <Os::Memory::~Memory()+0x76>
   12f68:	6990      	ldr	r0, [r2, #24]
Memory::~Memory() {
   12f6a:	6013      	str	r3, [r2, #0]
    m_delegate.~MemoryInterface();
   12f6c:	6803      	ldr	r3, [r0, #0]
   12f6e:	681b      	ldr	r3, [r3, #0]
   12f70:	4798      	blx	r3
}
   12f72:	4620      	mov	r0, r4
   12f74:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~MemoryInterface();
   12f76:	4610      	mov	r0, r2
   12f78:	47a8      	blx	r5
}
   12f7a:	4620      	mov	r0, r4
   12f7c:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~MemoryInterface();
   12f7e:	4788      	blx	r1
}
   12f80:	4620      	mov	r0, r4
   12f82:	bd38      	pop	{r3, r4, r5, pc}
   12f84:	200035a4 	.word	0x200035a4
   12f88:	00012f01 	.word	0x00012f01

00012f8c <Os::Memory::getHandle()>:
Memory::Status Memory::getUsage(Os::Memory::Usage& memory_usage) {
    return Memory::getSingleton()._getUsage(memory_usage);
}

MemoryHandle* Memory::getHandle() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   12f8c:	6983      	ldr	r3, [r0, #24]
MemoryHandle* Memory::getHandle() {
   12f8e:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   12f90:	f100 0408 	add.w	r4, r0, #8
   12f94:	42a3      	cmp	r3, r4
   12f96:	d005      	beq.n	12fa4 <Os::Memory::getHandle()+0x18>
   12f98:	4605      	mov	r5, r0
   12f9a:	2123      	movs	r1, #35	; 0x23
   12f9c:	4840      	ldr	r0, [pc, #256]	; (130a0 <Os::Memory::getHandle()+0x114>)
   12f9e:	f7ee fb35 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12fa2:	69ac      	ldr	r4, [r5, #24]
   12fa4:	6823      	ldr	r3, [r4, #0]
   12fa6:	4d3f      	ldr	r5, [pc, #252]	; (130a4 <Os::Memory::getHandle()+0x118>)
   12fa8:	691b      	ldr	r3, [r3, #16]
   12faa:	42ab      	cmp	r3, r5
   12fac:	d174      	bne.n	13098 <Os::Memory::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   12fae:	f104 0608 	add.w	r6, r4, #8
   12fb2:	69a3      	ldr	r3, [r4, #24]
   12fb4:	42b3      	cmp	r3, r6
   12fb6:	d004      	beq.n	12fc2 <Os::Memory::getHandle()+0x36>
   12fb8:	2123      	movs	r1, #35	; 0x23
   12fba:	4839      	ldr	r0, [pc, #228]	; (130a0 <Os::Memory::getHandle()+0x114>)
   12fbc:	f7ee fb26 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12fc0:	69a6      	ldr	r6, [r4, #24]
   12fc2:	6833      	ldr	r3, [r6, #0]
   12fc4:	691b      	ldr	r3, [r3, #16]
   12fc6:	42ab      	cmp	r3, r5
   12fc8:	d162      	bne.n	13090 <Os::Memory::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   12fca:	f106 0408 	add.w	r4, r6, #8
   12fce:	69b3      	ldr	r3, [r6, #24]
   12fd0:	42a3      	cmp	r3, r4
   12fd2:	d004      	beq.n	12fde <Os::Memory::getHandle()+0x52>
   12fd4:	2123      	movs	r1, #35	; 0x23
   12fd6:	4832      	ldr	r0, [pc, #200]	; (130a0 <Os::Memory::getHandle()+0x114>)
   12fd8:	f7ee fb18 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12fdc:	69b4      	ldr	r4, [r6, #24]
   12fde:	6823      	ldr	r3, [r4, #0]
   12fe0:	691b      	ldr	r3, [r3, #16]
   12fe2:	42ab      	cmp	r3, r5
   12fe4:	d158      	bne.n	13098 <Os::Memory::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   12fe6:	f104 0608 	add.w	r6, r4, #8
   12fea:	69a3      	ldr	r3, [r4, #24]
   12fec:	42b3      	cmp	r3, r6
   12fee:	d004      	beq.n	12ffa <Os::Memory::getHandle()+0x6e>
   12ff0:	2123      	movs	r1, #35	; 0x23
   12ff2:	482b      	ldr	r0, [pc, #172]	; (130a0 <Os::Memory::getHandle()+0x114>)
   12ff4:	f7ee fb0a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   12ff8:	69a6      	ldr	r6, [r4, #24]
   12ffa:	6833      	ldr	r3, [r6, #0]
   12ffc:	691b      	ldr	r3, [r3, #16]
   12ffe:	42ab      	cmp	r3, r5
   13000:	d146      	bne.n	13090 <Os::Memory::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13002:	f106 0408 	add.w	r4, r6, #8
   13006:	69b3      	ldr	r3, [r6, #24]
   13008:	42a3      	cmp	r3, r4
   1300a:	d004      	beq.n	13016 <Os::Memory::getHandle()+0x8a>
   1300c:	2123      	movs	r1, #35	; 0x23
   1300e:	4824      	ldr	r0, [pc, #144]	; (130a0 <Os::Memory::getHandle()+0x114>)
   13010:	f7ee fafc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13014:	69b4      	ldr	r4, [r6, #24]
   13016:	6823      	ldr	r3, [r4, #0]
   13018:	691b      	ldr	r3, [r3, #16]
   1301a:	42ab      	cmp	r3, r5
   1301c:	d13c      	bne.n	13098 <Os::Memory::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   1301e:	f104 0608 	add.w	r6, r4, #8
   13022:	69a3      	ldr	r3, [r4, #24]
   13024:	42b3      	cmp	r3, r6
   13026:	d004      	beq.n	13032 <Os::Memory::getHandle()+0xa6>
   13028:	2123      	movs	r1, #35	; 0x23
   1302a:	481d      	ldr	r0, [pc, #116]	; (130a0 <Os::Memory::getHandle()+0x114>)
   1302c:	f7ee faee 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13030:	69a6      	ldr	r6, [r4, #24]
   13032:	6833      	ldr	r3, [r6, #0]
   13034:	691b      	ldr	r3, [r3, #16]
   13036:	42ab      	cmp	r3, r5
   13038:	d12a      	bne.n	13090 <Os::Memory::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   1303a:	f106 0408 	add.w	r4, r6, #8
   1303e:	69b3      	ldr	r3, [r6, #24]
   13040:	42a3      	cmp	r3, r4
   13042:	d004      	beq.n	1304e <Os::Memory::getHandle()+0xc2>
   13044:	2123      	movs	r1, #35	; 0x23
   13046:	4816      	ldr	r0, [pc, #88]	; (130a0 <Os::Memory::getHandle()+0x114>)
   13048:	f7ee fae0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   1304c:	69b4      	ldr	r4, [r6, #24]
   1304e:	6823      	ldr	r3, [r4, #0]
   13050:	691b      	ldr	r3, [r3, #16]
   13052:	42ab      	cmp	r3, r5
   13054:	d120      	bne.n	13098 <Os::Memory::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13056:	f104 0608 	add.w	r6, r4, #8
   1305a:	69a3      	ldr	r3, [r4, #24]
   1305c:	42b3      	cmp	r3, r6
   1305e:	d004      	beq.n	1306a <Os::Memory::getHandle()+0xde>
   13060:	2123      	movs	r1, #35	; 0x23
   13062:	480f      	ldr	r0, [pc, #60]	; (130a0 <Os::Memory::getHandle()+0x114>)
   13064:	f7ee fad2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13068:	69a6      	ldr	r6, [r4, #24]
   1306a:	6833      	ldr	r3, [r6, #0]
   1306c:	691b      	ldr	r3, [r3, #16]
   1306e:	42ab      	cmp	r3, r5
   13070:	d10e      	bne.n	13090 <Os::Memory::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13072:	f106 0008 	add.w	r0, r6, #8
   13076:	69b3      	ldr	r3, [r6, #24]
   13078:	4283      	cmp	r3, r0
   1307a:	d004      	beq.n	13086 <Os::Memory::getHandle()+0xfa>
   1307c:	2123      	movs	r1, #35	; 0x23
   1307e:	4808      	ldr	r0, [pc, #32]	; (130a0 <Os::Memory::getHandle()+0x114>)
   13080:	f7ee fac4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13084:	69b0      	ldr	r0, [r6, #24]
   13086:	6803      	ldr	r3, [r0, #0]
}
   13088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   1308c:	691b      	ldr	r3, [r3, #16]
   1308e:	4718      	bx	r3
   13090:	4630      	mov	r0, r6
}
   13092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   13096:	4718      	bx	r3
   13098:	4620      	mov	r0, r4
}
   1309a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   1309e:	4718      	bx	r3
   130a0:	20000de8 	.word	0x20000de8
   130a4:	00012f8d 	.word	0x00012f8d

000130a8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)>:
Memory::Status Memory::_getUsage(Os::Memory::Usage& memory_usage) {
   130a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   130ac:	6983      	ldr	r3, [r0, #24]
   130ae:	f100 0408 	add.w	r4, r0, #8
Memory::Status Memory::_getUsage(Os::Memory::Usage& memory_usage) {
   130b2:	460f      	mov	r7, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   130b4:	42a3      	cmp	r3, r4
   130b6:	d005      	beq.n	130c4 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x1c>
   130b8:	4605      	mov	r5, r0
   130ba:	211a      	movs	r1, #26
   130bc:	4842      	ldr	r0, [pc, #264]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   130be:	f7ee faa5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   130c2:	69ac      	ldr	r4, [r5, #24]
   130c4:	6823      	ldr	r3, [r4, #0]
   130c6:	4d41      	ldr	r5, [pc, #260]	; (131cc <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x124>)
   130c8:	68db      	ldr	r3, [r3, #12]
   130ca:	42ab      	cmp	r3, r5
   130cc:	d176      	bne.n	131bc <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   130ce:	f104 0608 	add.w	r6, r4, #8
   130d2:	69a3      	ldr	r3, [r4, #24]
   130d4:	42b3      	cmp	r3, r6
   130d6:	d004      	beq.n	130e2 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x3a>
   130d8:	211a      	movs	r1, #26
   130da:	483b      	ldr	r0, [pc, #236]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   130dc:	f7ee fa96 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   130e0:	69a6      	ldr	r6, [r4, #24]
   130e2:	6833      	ldr	r3, [r6, #0]
   130e4:	68db      	ldr	r3, [r3, #12]
   130e6:	42ab      	cmp	r3, r5
   130e8:	d163      	bne.n	131b2 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   130ea:	f106 0408 	add.w	r4, r6, #8
   130ee:	69b3      	ldr	r3, [r6, #24]
   130f0:	42a3      	cmp	r3, r4
   130f2:	d004      	beq.n	130fe <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x56>
   130f4:	211a      	movs	r1, #26
   130f6:	4834      	ldr	r0, [pc, #208]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   130f8:	f7ee fa88 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   130fc:	69b4      	ldr	r4, [r6, #24]
   130fe:	6823      	ldr	r3, [r4, #0]
   13100:	68db      	ldr	r3, [r3, #12]
   13102:	42ab      	cmp	r3, r5
   13104:	d15a      	bne.n	131bc <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13106:	f104 0608 	add.w	r6, r4, #8
   1310a:	69a3      	ldr	r3, [r4, #24]
   1310c:	42b3      	cmp	r3, r6
   1310e:	d004      	beq.n	1311a <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x72>
   13110:	211a      	movs	r1, #26
   13112:	482d      	ldr	r0, [pc, #180]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   13114:	f7ee fa7a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   13118:	69a6      	ldr	r6, [r4, #24]
   1311a:	6833      	ldr	r3, [r6, #0]
   1311c:	68db      	ldr	r3, [r3, #12]
   1311e:	42ab      	cmp	r3, r5
   13120:	d147      	bne.n	131b2 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13122:	f106 0408 	add.w	r4, r6, #8
   13126:	69b3      	ldr	r3, [r6, #24]
   13128:	42a3      	cmp	r3, r4
   1312a:	d004      	beq.n	13136 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x8e>
   1312c:	211a      	movs	r1, #26
   1312e:	4826      	ldr	r0, [pc, #152]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   13130:	f7ee fa6c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   13134:	69b4      	ldr	r4, [r6, #24]
   13136:	6823      	ldr	r3, [r4, #0]
   13138:	68db      	ldr	r3, [r3, #12]
   1313a:	42ab      	cmp	r3, r5
   1313c:	d13e      	bne.n	131bc <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   1313e:	f104 0608 	add.w	r6, r4, #8
   13142:	69a3      	ldr	r3, [r4, #24]
   13144:	42b3      	cmp	r3, r6
   13146:	d004      	beq.n	13152 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0xaa>
   13148:	211a      	movs	r1, #26
   1314a:	481f      	ldr	r0, [pc, #124]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   1314c:	f7ee fa5e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   13150:	69a6      	ldr	r6, [r4, #24]
   13152:	6833      	ldr	r3, [r6, #0]
   13154:	68db      	ldr	r3, [r3, #12]
   13156:	42ab      	cmp	r3, r5
   13158:	d12b      	bne.n	131b2 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   1315a:	f106 0408 	add.w	r4, r6, #8
   1315e:	69b3      	ldr	r3, [r6, #24]
   13160:	42a3      	cmp	r3, r4
   13162:	d004      	beq.n	1316e <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0xc6>
   13164:	211a      	movs	r1, #26
   13166:	4818      	ldr	r0, [pc, #96]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   13168:	f7ee fa50 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   1316c:	69b4      	ldr	r4, [r6, #24]
   1316e:	6823      	ldr	r3, [r4, #0]
   13170:	68db      	ldr	r3, [r3, #12]
   13172:	42ab      	cmp	r3, r5
   13174:	d122      	bne.n	131bc <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13176:	f104 0608 	add.w	r6, r4, #8
   1317a:	69a3      	ldr	r3, [r4, #24]
   1317c:	42b3      	cmp	r3, r6
   1317e:	d004      	beq.n	1318a <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0xe2>
   13180:	211a      	movs	r1, #26
   13182:	4811      	ldr	r0, [pc, #68]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   13184:	f7ee fa42 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   13188:	69a6      	ldr	r6, [r4, #24]
   1318a:	6833      	ldr	r3, [r6, #0]
   1318c:	68db      	ldr	r3, [r3, #12]
   1318e:	42ab      	cmp	r3, r5
   13190:	d10f      	bne.n	131b2 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13192:	f106 0008 	add.w	r0, r6, #8
   13196:	69b3      	ldr	r3, [r6, #24]
   13198:	4283      	cmp	r3, r0
   1319a:	d004      	beq.n	131a6 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0xfe>
   1319c:	211a      	movs	r1, #26
   1319e:	480a      	ldr	r0, [pc, #40]	; (131c8 <Os::Memory::_getUsage(Os::Generic::UsedTotal&)+0x120>)
   131a0:	f7ee fa34 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   131a4:	69b0      	ldr	r0, [r6, #24]
   131a6:	6803      	ldr	r3, [r0, #0]
   131a8:	4639      	mov	r1, r7
   131aa:	68db      	ldr	r3, [r3, #12]
}
   131ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getUsage(memory_usage);
   131b0:	4718      	bx	r3
   131b2:	4639      	mov	r1, r7
   131b4:	4630      	mov	r0, r6
}
   131b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getUsage(memory_usage);
   131ba:	4718      	bx	r3
   131bc:	4639      	mov	r1, r7
   131be:	4620      	mov	r0, r4
}
   131c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getUsage(memory_usage);
   131c4:	4718      	bx	r3
   131c6:	bf00      	nop
   131c8:	20000de8 	.word	0x20000de8
   131cc:	000130a9 	.word	0x000130a9

000131d0 <Os::Memory::init()>:
void Memory::init() {
   131d0:	b538      	push	{r3, r4, r5, lr}
    static Memory _singleton;
   131d2:	4c0b      	ldr	r4, [pc, #44]	; (13200 <Os::Memory::init()+0x30>)
   131d4:	6823      	ldr	r3, [r4, #0]
   131d6:	07db      	lsls	r3, r3, #31
   131d8:	d500      	bpl.n	131dc <Os::Memory::init()+0xc>
}
   131da:	bd38      	pop	{r3, r4, r5, pc}
Memory::Memory() : m_delegate(*MemoryInterface::getDelegate(m_handle_storage)) {}
   131dc:	4d09      	ldr	r5, [pc, #36]	; (13204 <Os::Memory::init()+0x34>)
   131de:	4b0a      	ldr	r3, [pc, #40]	; (13208 <Os::Memory::init()+0x38>)
   131e0:	4628      	mov	r0, r5
   131e2:	f840 3b08 	str.w	r3, [r0], #8
   131e6:	f7ec ffbd 	bl	164 <Os::MemoryInterface::getDelegate(unsigned char (&) [16])>
    static Memory _singleton;
   131ea:	2301      	movs	r3, #1
Memory::Memory() : m_delegate(*MemoryInterface::getDelegate(m_handle_storage)) {}
   131ec:	61a8      	str	r0, [r5, #24]
    static Memory _singleton;
   131ee:	4628      	mov	r0, r5
   131f0:	6023      	str	r3, [r4, #0]
   131f2:	4a06      	ldr	r2, [pc, #24]	; (1320c <Os::Memory::init()+0x3c>)
   131f4:	4906      	ldr	r1, [pc, #24]	; (13210 <Os::Memory::init()+0x40>)
}
   131f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    static Memory _singleton;
   131fa:	f007 b8c1 	b.w	1a380 <__aeabi_atexit>
   131fe:	bf00      	nop
   13200:	2000ba20 	.word	0x2000ba20
   13204:	2000b9c0 	.word	0x2000b9c0
   13208:	200035a4 	.word	0x200035a4
   1320c:	20005a58 	.word	0x20005a58
   13210:	00012f01 	.word	0x00012f01

00013214 <Os::Memory::getUsage(Os::Generic::UsedTotal&)>:
Memory::Status Memory::getUsage(Os::Memory::Usage& memory_usage) {
   13214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static Memory _singleton;
   13218:	4c2c      	ldr	r4, [pc, #176]	; (132cc <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xb8>)
Memory::Status Memory::getUsage(Os::Memory::Usage& memory_usage) {
   1321a:	4606      	mov	r6, r0
Memory::Memory() : m_delegate(*MemoryInterface::getDelegate(m_handle_storage)) {}
   1321c:	4d2c      	ldr	r5, [pc, #176]	; (132d0 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xbc>)
    static Memory _singleton;
   1321e:	6823      	ldr	r3, [r4, #0]
   13220:	07db      	lsls	r3, r3, #31
   13222:	d539      	bpl.n	13298 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0x84>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13224:	69ac      	ldr	r4, [r5, #24]
   13226:	4b2b      	ldr	r3, [pc, #172]	; (132d4 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xc0>)
   13228:	429c      	cmp	r4, r3
   1322a:	d004      	beq.n	13236 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0x22>
   1322c:	211a      	movs	r1, #26
   1322e:	482a      	ldr	r0, [pc, #168]	; (132d8 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xc4>)
   13230:	f7ee f9ec 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   13234:	69ac      	ldr	r4, [r5, #24]
   13236:	6823      	ldr	r3, [r4, #0]
   13238:	4f28      	ldr	r7, [pc, #160]	; (132dc <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xc8>)
   1323a:	68db      	ldr	r3, [r3, #12]
   1323c:	42bb      	cmp	r3, r7
   1323e:	d13a      	bne.n	132b6 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xa2>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13240:	f104 0508 	add.w	r5, r4, #8
   13244:	69a3      	ldr	r3, [r4, #24]
   13246:	42ab      	cmp	r3, r5
   13248:	d004      	beq.n	13254 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0x40>
   1324a:	211a      	movs	r1, #26
   1324c:	4822      	ldr	r0, [pc, #136]	; (132d8 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xc4>)
   1324e:	f7ee f9dd 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   13252:	69a5      	ldr	r5, [r4, #24]
   13254:	682b      	ldr	r3, [r5, #0]
   13256:	68db      	ldr	r3, [r3, #12]
   13258:	42bb      	cmp	r3, r7
   1325a:	d131      	bne.n	132c0 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xac>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   1325c:	f105 0408 	add.w	r4, r5, #8
   13260:	69ab      	ldr	r3, [r5, #24]
   13262:	42a3      	cmp	r3, r4
   13264:	d004      	beq.n	13270 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0x5c>
   13266:	211a      	movs	r1, #26
   13268:	481b      	ldr	r0, [pc, #108]	; (132d8 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xc4>)
   1326a:	f7ee f9cf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   1326e:	69ac      	ldr	r4, [r5, #24]
   13270:	6823      	ldr	r3, [r4, #0]
   13272:	68db      	ldr	r3, [r3, #12]
   13274:	42bb      	cmp	r3, r7
   13276:	d11e      	bne.n	132b6 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xa2>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MemoryInterface*>(&this->m_handle_storage[0]));
   13278:	f104 0008 	add.w	r0, r4, #8
   1327c:	69a3      	ldr	r3, [r4, #24]
   1327e:	4283      	cmp	r3, r0
   13280:	d004      	beq.n	1328c <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0x78>
   13282:	211a      	movs	r1, #26
   13284:	4814      	ldr	r0, [pc, #80]	; (132d8 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xc4>)
   13286:	f7ee f9c1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._getUsage(memory_usage);
   1328a:	69a0      	ldr	r0, [r4, #24]
   1328c:	6803      	ldr	r3, [r0, #0]
   1328e:	4631      	mov	r1, r6
   13290:	68db      	ldr	r3, [r3, #12]
}
   13292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getUsage(memory_usage);
   13296:	4718      	bx	r3
Memory::Memory() : m_delegate(*MemoryInterface::getDelegate(m_handle_storage)) {}
   13298:	4b11      	ldr	r3, [pc, #68]	; (132e0 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xcc>)
   1329a:	4628      	mov	r0, r5
   1329c:	f840 3b08 	str.w	r3, [r0], #8
   132a0:	f7ec ff60 	bl	164 <Os::MemoryInterface::getDelegate(unsigned char (&) [16])>
    static Memory _singleton;
   132a4:	2301      	movs	r3, #1
Memory::Memory() : m_delegate(*MemoryInterface::getDelegate(m_handle_storage)) {}
   132a6:	61a8      	str	r0, [r5, #24]
    static Memory _singleton;
   132a8:	4628      	mov	r0, r5
   132aa:	4a0e      	ldr	r2, [pc, #56]	; (132e4 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xd0>)
   132ac:	490e      	ldr	r1, [pc, #56]	; (132e8 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0xd4>)
   132ae:	6023      	str	r3, [r4, #0]
   132b0:	f007 f866 	bl	1a380 <__aeabi_atexit>
   132b4:	e7b6      	b.n	13224 <Os::Memory::getUsage(Os::Generic::UsedTotal&)+0x10>
    return this->m_delegate._getUsage(memory_usage);
   132b6:	4631      	mov	r1, r6
   132b8:	4620      	mov	r0, r4
}
   132ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getUsage(memory_usage);
   132be:	4718      	bx	r3
   132c0:	4631      	mov	r1, r6
   132c2:	4628      	mov	r0, r5
}
   132c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate._getUsage(memory_usage);
   132c8:	4718      	bx	r3
   132ca:	bf00      	nop
   132cc:	2000ba20 	.word	0x2000ba20
   132d0:	2000b9c0 	.word	0x2000b9c0
   132d4:	2000b9c8 	.word	0x2000b9c8
   132d8:	20000de8 	.word	0x20000de8
   132dc:	000130a9 	.word	0x000130a9
   132e0:	200035a4 	.word	0x200035a4
   132e4:	20005a58 	.word	0x20005a58
   132e8:	00012f01 	.word	0x00012f01

000132ec <Os::Mutex::~Mutex()>:

Mutex::Mutex() : m_handle_storage(), m_delegate(*MutexInterface::getDelegate(m_handle_storage)) {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
}

Mutex::~Mutex() {
   132ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   132f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
Mutex::~Mutex() {
   132f2:	4604      	mov	r4, r0
   132f4:	4f2a      	ldr	r7, [pc, #168]	; (133a0 <Os::Mutex::~Mutex()+0xb4>)
   132f6:	4605      	mov	r5, r0
   132f8:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   132fc:	42a3      	cmp	r3, r4
   132fe:	d004      	beq.n	1330a <Os::Mutex::~Mutex()+0x1e>
   13300:	210f      	movs	r1, #15
   13302:	4828      	ldr	r0, [pc, #160]	; (133a4 <Os::Mutex::~Mutex()+0xb8>)
   13304:	f7ee f982 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13308:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1330a:	6823      	ldr	r3, [r4, #0]
   1330c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 133a8 <Os::Mutex::~Mutex()+0xbc>
   13310:	681b      	ldr	r3, [r3, #0]
   13312:	4543      	cmp	r3, r8
   13314:	d132      	bne.n	1337c <Os::Mutex::~Mutex()+0x90>
Mutex::~Mutex() {
   13316:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13318:	6d23      	ldr	r3, [r4, #80]	; 0x50
Mutex::~Mutex() {
   1331a:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1331e:	42b3      	cmp	r3, r6
   13320:	d004      	beq.n	1332c <Os::Mutex::~Mutex()+0x40>
   13322:	210f      	movs	r1, #15
   13324:	481f      	ldr	r0, [pc, #124]	; (133a4 <Os::Mutex::~Mutex()+0xb8>)
   13326:	f7ee f971 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   1332a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1332c:	6833      	ldr	r3, [r6, #0]
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	4543      	cmp	r3, r8
   13332:	d12c      	bne.n	1338e <Os::Mutex::~Mutex()+0xa2>
Mutex::~Mutex() {
   13334:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13336:	6d33      	ldr	r3, [r6, #80]	; 0x50
Mutex::~Mutex() {
   13338:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1333c:	42a3      	cmp	r3, r4
   1333e:	d004      	beq.n	1334a <Os::Mutex::~Mutex()+0x5e>
   13340:	210f      	movs	r1, #15
   13342:	4818      	ldr	r0, [pc, #96]	; (133a4 <Os::Mutex::~Mutex()+0xb8>)
   13344:	f7ee f962 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13348:	6d34      	ldr	r4, [r6, #80]	; 0x50
   1334a:	6823      	ldr	r3, [r4, #0]
Mutex::~Mutex() {
   1334c:	4620      	mov	r0, r4
    m_delegate.~MutexInterface();
   1334e:	681b      	ldr	r3, [r3, #0]
   13350:	4543      	cmp	r3, r8
   13352:	d114      	bne.n	1337e <Os::Mutex::~Mutex()+0x92>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13354:	6d23      	ldr	r3, [r4, #80]	; 0x50
Mutex::~Mutex() {
   13356:	f840 7b08 	str.w	r7, [r0], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1335a:	4283      	cmp	r3, r0
   1335c:	d004      	beq.n	13368 <Os::Mutex::~Mutex()+0x7c>
   1335e:	210f      	movs	r1, #15
   13360:	4810      	ldr	r0, [pc, #64]	; (133a4 <Os::Mutex::~Mutex()+0xb8>)
   13362:	f7ee f953 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13366:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13368:	6803      	ldr	r3, [r0, #0]
   1336a:	681b      	ldr	r3, [r3, #0]
   1336c:	4798      	blx	r3
}
   1336e:	4628      	mov	r0, r5
   13370:	2158      	movs	r1, #88	; 0x58
   13372:	f005 fcad 	bl	18cd0 <operator delete(void*, unsigned int)>
   13376:	4628      	mov	r0, r5
   13378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~MutexInterface();
   1337c:	4620      	mov	r0, r4
   1337e:	4798      	blx	r3
}
   13380:	4628      	mov	r0, r5
   13382:	2158      	movs	r1, #88	; 0x58
   13384:	f005 fca4 	bl	18cd0 <operator delete(void*, unsigned int)>
   13388:	4628      	mov	r0, r5
   1338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~MutexInterface();
   1338e:	4630      	mov	r0, r6
   13390:	4798      	blx	r3
}
   13392:	4628      	mov	r0, r5
   13394:	2158      	movs	r1, #88	; 0x58
   13396:	f005 fc9b 	bl	18cd0 <operator delete(void*, unsigned int)>
   1339a:	4628      	mov	r0, r5
   1339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133a0:	2000355c 	.word	0x2000355c
   133a4:	20000dc8 	.word	0x20000dc8
   133a8:	000133ad 	.word	0x000133ad

000133ac <Os::Mutex::~Mutex()>:
Mutex::~Mutex() {
   133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   133b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
Mutex::~Mutex() {
   133b2:	4604      	mov	r4, r0
   133b4:	4f4a      	ldr	r7, [pc, #296]	; (134e0 <Os::Mutex::~Mutex()+0x134>)
   133b6:	4605      	mov	r5, r0
   133b8:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   133bc:	42a3      	cmp	r3, r4
   133be:	d004      	beq.n	133ca <Os::Mutex::~Mutex()+0x1e>
   133c0:	210f      	movs	r1, #15
   133c2:	4848      	ldr	r0, [pc, #288]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   133c4:	f7ee f922 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   133c8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   133ca:	6823      	ldr	r3, [r4, #0]
   133cc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 134e8 <Os::Mutex::~Mutex()+0x13c>
   133d0:	681b      	ldr	r3, [r3, #0]
   133d2:	4543      	cmp	r3, r8
   133d4:	d17e      	bne.n	134d4 <Os::Mutex::~Mutex()+0x128>
Mutex::~Mutex() {
   133d6:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   133d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
Mutex::~Mutex() {
   133da:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   133de:	42b3      	cmp	r3, r6
   133e0:	d004      	beq.n	133ec <Os::Mutex::~Mutex()+0x40>
   133e2:	210f      	movs	r1, #15
   133e4:	483f      	ldr	r0, [pc, #252]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   133e6:	f7ee f911 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   133ea:	6d26      	ldr	r6, [r4, #80]	; 0x50
   133ec:	6833      	ldr	r3, [r6, #0]
   133ee:	681b      	ldr	r3, [r3, #0]
   133f0:	4543      	cmp	r3, r8
   133f2:	d16a      	bne.n	134ca <Os::Mutex::~Mutex()+0x11e>
Mutex::~Mutex() {
   133f4:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   133f6:	6d33      	ldr	r3, [r6, #80]	; 0x50
Mutex::~Mutex() {
   133f8:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   133fc:	42a3      	cmp	r3, r4
   133fe:	d004      	beq.n	1340a <Os::Mutex::~Mutex()+0x5e>
   13400:	210f      	movs	r1, #15
   13402:	4838      	ldr	r0, [pc, #224]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   13404:	f7ee f902 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13408:	6d34      	ldr	r4, [r6, #80]	; 0x50
   1340a:	6823      	ldr	r3, [r4, #0]
   1340c:	681b      	ldr	r3, [r3, #0]
   1340e:	4543      	cmp	r3, r8
   13410:	d160      	bne.n	134d4 <Os::Mutex::~Mutex()+0x128>
Mutex::~Mutex() {
   13412:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13414:	6d23      	ldr	r3, [r4, #80]	; 0x50
Mutex::~Mutex() {
   13416:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1341a:	42b3      	cmp	r3, r6
   1341c:	d004      	beq.n	13428 <Os::Mutex::~Mutex()+0x7c>
   1341e:	210f      	movs	r1, #15
   13420:	4830      	ldr	r0, [pc, #192]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   13422:	f7ee f8f3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13426:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13428:	6833      	ldr	r3, [r6, #0]
   1342a:	681b      	ldr	r3, [r3, #0]
   1342c:	4543      	cmp	r3, r8
   1342e:	d14c      	bne.n	134ca <Os::Mutex::~Mutex()+0x11e>
Mutex::~Mutex() {
   13430:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13432:	6d33      	ldr	r3, [r6, #80]	; 0x50
Mutex::~Mutex() {
   13434:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13438:	42a3      	cmp	r3, r4
   1343a:	d004      	beq.n	13446 <Os::Mutex::~Mutex()+0x9a>
   1343c:	210f      	movs	r1, #15
   1343e:	4829      	ldr	r0, [pc, #164]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   13440:	f7ee f8e4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13444:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13446:	6823      	ldr	r3, [r4, #0]
   13448:	681b      	ldr	r3, [r3, #0]
   1344a:	4543      	cmp	r3, r8
   1344c:	d142      	bne.n	134d4 <Os::Mutex::~Mutex()+0x128>
Mutex::~Mutex() {
   1344e:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13450:	6d23      	ldr	r3, [r4, #80]	; 0x50
Mutex::~Mutex() {
   13452:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13456:	42b3      	cmp	r3, r6
   13458:	d004      	beq.n	13464 <Os::Mutex::~Mutex()+0xb8>
   1345a:	210f      	movs	r1, #15
   1345c:	4821      	ldr	r0, [pc, #132]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   1345e:	f7ee f8d5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13462:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13464:	6833      	ldr	r3, [r6, #0]
   13466:	681b      	ldr	r3, [r3, #0]
   13468:	4543      	cmp	r3, r8
   1346a:	d12e      	bne.n	134ca <Os::Mutex::~Mutex()+0x11e>
Mutex::~Mutex() {
   1346c:	4634      	mov	r4, r6
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1346e:	6d33      	ldr	r3, [r6, #80]	; 0x50
Mutex::~Mutex() {
   13470:	f844 7b08 	str.w	r7, [r4], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13474:	42a3      	cmp	r3, r4
   13476:	d004      	beq.n	13482 <Os::Mutex::~Mutex()+0xd6>
   13478:	210f      	movs	r1, #15
   1347a:	481a      	ldr	r0, [pc, #104]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   1347c:	f7ee f8c6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   13480:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13482:	6823      	ldr	r3, [r4, #0]
   13484:	681b      	ldr	r3, [r3, #0]
   13486:	4543      	cmp	r3, r8
   13488:	d124      	bne.n	134d4 <Os::Mutex::~Mutex()+0x128>
Mutex::~Mutex() {
   1348a:	4626      	mov	r6, r4
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1348c:	6d23      	ldr	r3, [r4, #80]	; 0x50
Mutex::~Mutex() {
   1348e:	f846 7b08 	str.w	r7, [r6], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13492:	42b3      	cmp	r3, r6
   13494:	d004      	beq.n	134a0 <Os::Mutex::~Mutex()+0xf4>
   13496:	210f      	movs	r1, #15
   13498:	4812      	ldr	r0, [pc, #72]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   1349a:	f7ee f8b7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   1349e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   134a0:	6833      	ldr	r3, [r6, #0]
Mutex::~Mutex() {
   134a2:	4630      	mov	r0, r6
    m_delegate.~MutexInterface();
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	4543      	cmp	r3, r8
   134a8:	d115      	bne.n	134d6 <Os::Mutex::~Mutex()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   134aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
Mutex::~Mutex() {
   134ac:	f840 7b08 	str.w	r7, [r0], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   134b0:	4283      	cmp	r3, r0
   134b2:	d004      	beq.n	134be <Os::Mutex::~Mutex()+0x112>
   134b4:	210f      	movs	r1, #15
   134b6:	480b      	ldr	r0, [pc, #44]	; (134e4 <Os::Mutex::~Mutex()+0x138>)
   134b8:	f7ee f8a8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~MutexInterface();
   134bc:	6d30      	ldr	r0, [r6, #80]	; 0x50
   134be:	6803      	ldr	r3, [r0, #0]
   134c0:	681b      	ldr	r3, [r3, #0]
   134c2:	4798      	blx	r3
}
   134c4:	4628      	mov	r0, r5
   134c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~MutexInterface();
   134ca:	4630      	mov	r0, r6
   134cc:	4798      	blx	r3
}
   134ce:	4628      	mov	r0, r5
   134d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_delegate.~MutexInterface();
   134d4:	4620      	mov	r0, r4
   134d6:	4798      	blx	r3
}
   134d8:	4628      	mov	r0, r5
   134da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134de:	bf00      	nop
   134e0:	2000355c 	.word	0x2000355c
   134e4:	20000dc8 	.word	0x20000dc8
   134e8:	000133ad 	.word	0x000133ad

000134ec <Os::Mutex::getHandle()>:

MutexHandle* Mutex::getHandle() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   134ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
MutexHandle* Mutex::getHandle() {
   134ee:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   134f0:	f100 0408 	add.w	r4, r0, #8
   134f4:	42a3      	cmp	r3, r4
   134f6:	d005      	beq.n	13504 <Os::Mutex::getHandle()+0x18>
   134f8:	4605      	mov	r5, r0
   134fa:	2114      	movs	r1, #20
   134fc:	4840      	ldr	r0, [pc, #256]	; (13600 <Os::Mutex::getHandle()+0x114>)
   134fe:	f7ee f885 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13502:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   13504:	6823      	ldr	r3, [r4, #0]
   13506:	4d3f      	ldr	r5, [pc, #252]	; (13604 <Os::Mutex::getHandle()+0x118>)
   13508:	689b      	ldr	r3, [r3, #8]
   1350a:	42ab      	cmp	r3, r5
   1350c:	d174      	bne.n	135f8 <Os::Mutex::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1350e:	f104 0608 	add.w	r6, r4, #8
   13512:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13514:	42b3      	cmp	r3, r6
   13516:	d004      	beq.n	13522 <Os::Mutex::getHandle()+0x36>
   13518:	2114      	movs	r1, #20
   1351a:	4839      	ldr	r0, [pc, #228]	; (13600 <Os::Mutex::getHandle()+0x114>)
   1351c:	f7ee f876 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13520:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13522:	6833      	ldr	r3, [r6, #0]
   13524:	689b      	ldr	r3, [r3, #8]
   13526:	42ab      	cmp	r3, r5
   13528:	d162      	bne.n	135f0 <Os::Mutex::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1352a:	f106 0408 	add.w	r4, r6, #8
   1352e:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13530:	42a3      	cmp	r3, r4
   13532:	d004      	beq.n	1353e <Os::Mutex::getHandle()+0x52>
   13534:	2114      	movs	r1, #20
   13536:	4832      	ldr	r0, [pc, #200]	; (13600 <Os::Mutex::getHandle()+0x114>)
   13538:	f7ee f868 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   1353c:	6d34      	ldr	r4, [r6, #80]	; 0x50
   1353e:	6823      	ldr	r3, [r4, #0]
   13540:	689b      	ldr	r3, [r3, #8]
   13542:	42ab      	cmp	r3, r5
   13544:	d158      	bne.n	135f8 <Os::Mutex::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13546:	f104 0608 	add.w	r6, r4, #8
   1354a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1354c:	42b3      	cmp	r3, r6
   1354e:	d004      	beq.n	1355a <Os::Mutex::getHandle()+0x6e>
   13550:	2114      	movs	r1, #20
   13552:	482b      	ldr	r0, [pc, #172]	; (13600 <Os::Mutex::getHandle()+0x114>)
   13554:	f7ee f85a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13558:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1355a:	6833      	ldr	r3, [r6, #0]
   1355c:	689b      	ldr	r3, [r3, #8]
   1355e:	42ab      	cmp	r3, r5
   13560:	d146      	bne.n	135f0 <Os::Mutex::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13562:	f106 0408 	add.w	r4, r6, #8
   13566:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13568:	42a3      	cmp	r3, r4
   1356a:	d004      	beq.n	13576 <Os::Mutex::getHandle()+0x8a>
   1356c:	2114      	movs	r1, #20
   1356e:	4824      	ldr	r0, [pc, #144]	; (13600 <Os::Mutex::getHandle()+0x114>)
   13570:	f7ee f84c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13574:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13576:	6823      	ldr	r3, [r4, #0]
   13578:	689b      	ldr	r3, [r3, #8]
   1357a:	42ab      	cmp	r3, r5
   1357c:	d13c      	bne.n	135f8 <Os::Mutex::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1357e:	f104 0608 	add.w	r6, r4, #8
   13582:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13584:	42b3      	cmp	r3, r6
   13586:	d004      	beq.n	13592 <Os::Mutex::getHandle()+0xa6>
   13588:	2114      	movs	r1, #20
   1358a:	481d      	ldr	r0, [pc, #116]	; (13600 <Os::Mutex::getHandle()+0x114>)
   1358c:	f7ee f83e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13590:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13592:	6833      	ldr	r3, [r6, #0]
   13594:	689b      	ldr	r3, [r3, #8]
   13596:	42ab      	cmp	r3, r5
   13598:	d12a      	bne.n	135f0 <Os::Mutex::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1359a:	f106 0408 	add.w	r4, r6, #8
   1359e:	6d33      	ldr	r3, [r6, #80]	; 0x50
   135a0:	42a3      	cmp	r3, r4
   135a2:	d004      	beq.n	135ae <Os::Mutex::getHandle()+0xc2>
   135a4:	2114      	movs	r1, #20
   135a6:	4816      	ldr	r0, [pc, #88]	; (13600 <Os::Mutex::getHandle()+0x114>)
   135a8:	f7ee f830 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   135ac:	6d34      	ldr	r4, [r6, #80]	; 0x50
   135ae:	6823      	ldr	r3, [r4, #0]
   135b0:	689b      	ldr	r3, [r3, #8]
   135b2:	42ab      	cmp	r3, r5
   135b4:	d120      	bne.n	135f8 <Os::Mutex::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   135b6:	f104 0608 	add.w	r6, r4, #8
   135ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   135bc:	42b3      	cmp	r3, r6
   135be:	d004      	beq.n	135ca <Os::Mutex::getHandle()+0xde>
   135c0:	2114      	movs	r1, #20
   135c2:	480f      	ldr	r0, [pc, #60]	; (13600 <Os::Mutex::getHandle()+0x114>)
   135c4:	f7ee f822 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   135c8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   135ca:	6833      	ldr	r3, [r6, #0]
   135cc:	689b      	ldr	r3, [r3, #8]
   135ce:	42ab      	cmp	r3, r5
   135d0:	d10e      	bne.n	135f0 <Os::Mutex::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   135d2:	f106 0008 	add.w	r0, r6, #8
   135d6:	6d33      	ldr	r3, [r6, #80]	; 0x50
   135d8:	4283      	cmp	r3, r0
   135da:	d004      	beq.n	135e6 <Os::Mutex::getHandle()+0xfa>
   135dc:	2114      	movs	r1, #20
   135de:	4808      	ldr	r0, [pc, #32]	; (13600 <Os::Mutex::getHandle()+0x114>)
   135e0:	f7ee f814 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   135e4:	6d30      	ldr	r0, [r6, #80]	; 0x50
   135e6:	6803      	ldr	r3, [r0, #0]
}
   135e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   135ec:	689b      	ldr	r3, [r3, #8]
   135ee:	4718      	bx	r3
   135f0:	4630      	mov	r0, r6
}
   135f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   135f6:	4718      	bx	r3
   135f8:	4620      	mov	r0, r4
}
   135fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   135fe:	4718      	bx	r3
   13600:	20000dc8 	.word	0x20000dc8
   13604:	000134ed 	.word	0x000134ed

00013608 <Os::Mutex::take()>:

Mutex::Status Mutex::take() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13608:	6d03      	ldr	r3, [r0, #80]	; 0x50
Mutex::Status Mutex::take() {
   1360a:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1360c:	f100 0408 	add.w	r4, r0, #8
   13610:	42a3      	cmp	r3, r4
   13612:	d005      	beq.n	13620 <Os::Mutex::take()+0x18>
   13614:	4605      	mov	r5, r0
   13616:	2119      	movs	r1, #25
   13618:	4840      	ldr	r0, [pc, #256]	; (1371c <Os::Mutex::take()+0x114>)
   1361a:	f7ed fff7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   1361e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   13620:	6823      	ldr	r3, [r4, #0]
   13622:	4d3f      	ldr	r5, [pc, #252]	; (13720 <Os::Mutex::take()+0x118>)
   13624:	68db      	ldr	r3, [r3, #12]
   13626:	42ab      	cmp	r3, r5
   13628:	d174      	bne.n	13714 <Os::Mutex::take()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1362a:	f104 0608 	add.w	r6, r4, #8
   1362e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13630:	42b3      	cmp	r3, r6
   13632:	d004      	beq.n	1363e <Os::Mutex::take()+0x36>
   13634:	2119      	movs	r1, #25
   13636:	4839      	ldr	r0, [pc, #228]	; (1371c <Os::Mutex::take()+0x114>)
   13638:	f7ed ffe8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   1363c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1363e:	6833      	ldr	r3, [r6, #0]
   13640:	68db      	ldr	r3, [r3, #12]
   13642:	42ab      	cmp	r3, r5
   13644:	d162      	bne.n	1370c <Os::Mutex::take()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13646:	f106 0408 	add.w	r4, r6, #8
   1364a:	6d33      	ldr	r3, [r6, #80]	; 0x50
   1364c:	42a3      	cmp	r3, r4
   1364e:	d004      	beq.n	1365a <Os::Mutex::take()+0x52>
   13650:	2119      	movs	r1, #25
   13652:	4832      	ldr	r0, [pc, #200]	; (1371c <Os::Mutex::take()+0x114>)
   13654:	f7ed ffda 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13658:	6d34      	ldr	r4, [r6, #80]	; 0x50
   1365a:	6823      	ldr	r3, [r4, #0]
   1365c:	68db      	ldr	r3, [r3, #12]
   1365e:	42ab      	cmp	r3, r5
   13660:	d158      	bne.n	13714 <Os::Mutex::take()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13662:	f104 0608 	add.w	r6, r4, #8
   13666:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13668:	42b3      	cmp	r3, r6
   1366a:	d004      	beq.n	13676 <Os::Mutex::take()+0x6e>
   1366c:	2119      	movs	r1, #25
   1366e:	482b      	ldr	r0, [pc, #172]	; (1371c <Os::Mutex::take()+0x114>)
   13670:	f7ed ffcc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13674:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13676:	6833      	ldr	r3, [r6, #0]
   13678:	68db      	ldr	r3, [r3, #12]
   1367a:	42ab      	cmp	r3, r5
   1367c:	d146      	bne.n	1370c <Os::Mutex::take()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1367e:	f106 0408 	add.w	r4, r6, #8
   13682:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13684:	42a3      	cmp	r3, r4
   13686:	d004      	beq.n	13692 <Os::Mutex::take()+0x8a>
   13688:	2119      	movs	r1, #25
   1368a:	4824      	ldr	r0, [pc, #144]	; (1371c <Os::Mutex::take()+0x114>)
   1368c:	f7ed ffbe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13690:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13692:	6823      	ldr	r3, [r4, #0]
   13694:	68db      	ldr	r3, [r3, #12]
   13696:	42ab      	cmp	r3, r5
   13698:	d13c      	bne.n	13714 <Os::Mutex::take()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1369a:	f104 0608 	add.w	r6, r4, #8
   1369e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   136a0:	42b3      	cmp	r3, r6
   136a2:	d004      	beq.n	136ae <Os::Mutex::take()+0xa6>
   136a4:	2119      	movs	r1, #25
   136a6:	481d      	ldr	r0, [pc, #116]	; (1371c <Os::Mutex::take()+0x114>)
   136a8:	f7ed ffb0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   136ac:	6d26      	ldr	r6, [r4, #80]	; 0x50
   136ae:	6833      	ldr	r3, [r6, #0]
   136b0:	68db      	ldr	r3, [r3, #12]
   136b2:	42ab      	cmp	r3, r5
   136b4:	d12a      	bne.n	1370c <Os::Mutex::take()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   136b6:	f106 0408 	add.w	r4, r6, #8
   136ba:	6d33      	ldr	r3, [r6, #80]	; 0x50
   136bc:	42a3      	cmp	r3, r4
   136be:	d004      	beq.n	136ca <Os::Mutex::take()+0xc2>
   136c0:	2119      	movs	r1, #25
   136c2:	4816      	ldr	r0, [pc, #88]	; (1371c <Os::Mutex::take()+0x114>)
   136c4:	f7ed ffa2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   136c8:	6d34      	ldr	r4, [r6, #80]	; 0x50
   136ca:	6823      	ldr	r3, [r4, #0]
   136cc:	68db      	ldr	r3, [r3, #12]
   136ce:	42ab      	cmp	r3, r5
   136d0:	d120      	bne.n	13714 <Os::Mutex::take()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   136d2:	f104 0608 	add.w	r6, r4, #8
   136d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   136d8:	42b3      	cmp	r3, r6
   136da:	d004      	beq.n	136e6 <Os::Mutex::take()+0xde>
   136dc:	2119      	movs	r1, #25
   136de:	480f      	ldr	r0, [pc, #60]	; (1371c <Os::Mutex::take()+0x114>)
   136e0:	f7ed ff94 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   136e4:	6d26      	ldr	r6, [r4, #80]	; 0x50
   136e6:	6833      	ldr	r3, [r6, #0]
   136e8:	68db      	ldr	r3, [r3, #12]
   136ea:	42ab      	cmp	r3, r5
   136ec:	d10e      	bne.n	1370c <Os::Mutex::take()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   136ee:	f106 0008 	add.w	r0, r6, #8
   136f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
   136f4:	4283      	cmp	r3, r0
   136f6:	d004      	beq.n	13702 <Os::Mutex::take()+0xfa>
   136f8:	2119      	movs	r1, #25
   136fa:	4808      	ldr	r0, [pc, #32]	; (1371c <Os::Mutex::take()+0x114>)
   136fc:	f7ed ff86 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13700:	6d30      	ldr	r0, [r6, #80]	; 0x50
   13702:	6803      	ldr	r3, [r0, #0]
}
   13704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.take();
   13708:	68db      	ldr	r3, [r3, #12]
   1370a:	4718      	bx	r3
   1370c:	4630      	mov	r0, r6
}
   1370e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.take();
   13712:	4718      	bx	r3
   13714:	4620      	mov	r0, r4
}
   13716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.take();
   1371a:	4718      	bx	r3
   1371c:	20000dc8 	.word	0x20000dc8
   13720:	00013609 	.word	0x00013609

00013724 <Os::Mutex::release()>:

Mutex::Status Mutex::release() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13724:	6d03      	ldr	r3, [r0, #80]	; 0x50
Mutex::Status Mutex::release() {
   13726:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13728:	f100 0408 	add.w	r4, r0, #8
   1372c:	42a3      	cmp	r3, r4
   1372e:	d005      	beq.n	1373c <Os::Mutex::release()+0x18>
   13730:	4605      	mov	r5, r0
   13732:	211e      	movs	r1, #30
   13734:	4840      	ldr	r0, [pc, #256]	; (13838 <Os::Mutex::release()+0x114>)
   13736:	f7ed ff69 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   1373a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1373c:	6823      	ldr	r3, [r4, #0]
   1373e:	4d3f      	ldr	r5, [pc, #252]	; (1383c <Os::Mutex::release()+0x118>)
   13740:	691b      	ldr	r3, [r3, #16]
   13742:	42ab      	cmp	r3, r5
   13744:	d174      	bne.n	13830 <Os::Mutex::release()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13746:	f104 0608 	add.w	r6, r4, #8
   1374a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1374c:	42b3      	cmp	r3, r6
   1374e:	d004      	beq.n	1375a <Os::Mutex::release()+0x36>
   13750:	211e      	movs	r1, #30
   13752:	4839      	ldr	r0, [pc, #228]	; (13838 <Os::Mutex::release()+0x114>)
   13754:	f7ed ff5a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13758:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1375a:	6833      	ldr	r3, [r6, #0]
   1375c:	691b      	ldr	r3, [r3, #16]
   1375e:	42ab      	cmp	r3, r5
   13760:	d162      	bne.n	13828 <Os::Mutex::release()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13762:	f106 0408 	add.w	r4, r6, #8
   13766:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13768:	42a3      	cmp	r3, r4
   1376a:	d004      	beq.n	13776 <Os::Mutex::release()+0x52>
   1376c:	211e      	movs	r1, #30
   1376e:	4832      	ldr	r0, [pc, #200]	; (13838 <Os::Mutex::release()+0x114>)
   13770:	f7ed ff4c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13774:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13776:	6823      	ldr	r3, [r4, #0]
   13778:	691b      	ldr	r3, [r3, #16]
   1377a:	42ab      	cmp	r3, r5
   1377c:	d158      	bne.n	13830 <Os::Mutex::release()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1377e:	f104 0608 	add.w	r6, r4, #8
   13782:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13784:	42b3      	cmp	r3, r6
   13786:	d004      	beq.n	13792 <Os::Mutex::release()+0x6e>
   13788:	211e      	movs	r1, #30
   1378a:	482b      	ldr	r0, [pc, #172]	; (13838 <Os::Mutex::release()+0x114>)
   1378c:	f7ed ff3e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13790:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13792:	6833      	ldr	r3, [r6, #0]
   13794:	691b      	ldr	r3, [r3, #16]
   13796:	42ab      	cmp	r3, r5
   13798:	d146      	bne.n	13828 <Os::Mutex::release()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1379a:	f106 0408 	add.w	r4, r6, #8
   1379e:	6d33      	ldr	r3, [r6, #80]	; 0x50
   137a0:	42a3      	cmp	r3, r4
   137a2:	d004      	beq.n	137ae <Os::Mutex::release()+0x8a>
   137a4:	211e      	movs	r1, #30
   137a6:	4824      	ldr	r0, [pc, #144]	; (13838 <Os::Mutex::release()+0x114>)
   137a8:	f7ed ff30 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   137ac:	6d34      	ldr	r4, [r6, #80]	; 0x50
   137ae:	6823      	ldr	r3, [r4, #0]
   137b0:	691b      	ldr	r3, [r3, #16]
   137b2:	42ab      	cmp	r3, r5
   137b4:	d13c      	bne.n	13830 <Os::Mutex::release()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   137b6:	f104 0608 	add.w	r6, r4, #8
   137ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   137bc:	42b3      	cmp	r3, r6
   137be:	d004      	beq.n	137ca <Os::Mutex::release()+0xa6>
   137c0:	211e      	movs	r1, #30
   137c2:	481d      	ldr	r0, [pc, #116]	; (13838 <Os::Mutex::release()+0x114>)
   137c4:	f7ed ff22 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   137c8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   137ca:	6833      	ldr	r3, [r6, #0]
   137cc:	691b      	ldr	r3, [r3, #16]
   137ce:	42ab      	cmp	r3, r5
   137d0:	d12a      	bne.n	13828 <Os::Mutex::release()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   137d2:	f106 0408 	add.w	r4, r6, #8
   137d6:	6d33      	ldr	r3, [r6, #80]	; 0x50
   137d8:	42a3      	cmp	r3, r4
   137da:	d004      	beq.n	137e6 <Os::Mutex::release()+0xc2>
   137dc:	211e      	movs	r1, #30
   137de:	4816      	ldr	r0, [pc, #88]	; (13838 <Os::Mutex::release()+0x114>)
   137e0:	f7ed ff14 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   137e4:	6d34      	ldr	r4, [r6, #80]	; 0x50
   137e6:	6823      	ldr	r3, [r4, #0]
   137e8:	691b      	ldr	r3, [r3, #16]
   137ea:	42ab      	cmp	r3, r5
   137ec:	d120      	bne.n	13830 <Os::Mutex::release()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   137ee:	f104 0608 	add.w	r6, r4, #8
   137f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   137f4:	42b3      	cmp	r3, r6
   137f6:	d004      	beq.n	13802 <Os::Mutex::release()+0xde>
   137f8:	211e      	movs	r1, #30
   137fa:	480f      	ldr	r0, [pc, #60]	; (13838 <Os::Mutex::release()+0x114>)
   137fc:	f7ed ff06 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13800:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13802:	6833      	ldr	r3, [r6, #0]
   13804:	691b      	ldr	r3, [r3, #16]
   13806:	42ab      	cmp	r3, r5
   13808:	d10e      	bne.n	13828 <Os::Mutex::release()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1380a:	f106 0008 	add.w	r0, r6, #8
   1380e:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13810:	4283      	cmp	r3, r0
   13812:	d004      	beq.n	1381e <Os::Mutex::release()+0xfa>
   13814:	211e      	movs	r1, #30
   13816:	4808      	ldr	r0, [pc, #32]	; (13838 <Os::Mutex::release()+0x114>)
   13818:	f7ed fef8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   1381c:	6d30      	ldr	r0, [r6, #80]	; 0x50
   1381e:	6803      	ldr	r3, [r0, #0]
}
   13820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.release();
   13824:	691b      	ldr	r3, [r3, #16]
   13826:	4718      	bx	r3
   13828:	4630      	mov	r0, r6
}
   1382a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.release();
   1382e:	4718      	bx	r3
   13830:	4620      	mov	r0, r4
}
   13832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.release();
   13836:	4718      	bx	r3
   13838:	20000dc8 	.word	0x20000dc8
   1383c:	00013725 	.word	0x00013725

00013840 <Os::Mutex::Mutex()>:
Mutex::Mutex() : m_handle_storage(), m_delegate(*MutexInterface::getDelegate(m_handle_storage)) {
   13840:	b538      	push	{r3, r4, r5, lr}
   13842:	4605      	mov	r5, r0
   13844:	4b0a      	ldr	r3, [pc, #40]	; (13870 <Os::Mutex::Mutex()+0x30>)
   13846:	2248      	movs	r2, #72	; 0x48
   13848:	2100      	movs	r1, #0
   1384a:	f845 3b08 	str.w	r3, [r5], #8
   1384e:	4604      	mov	r4, r0
   13850:	4628      	mov	r0, r5
   13852:	f011 f9cb 	bl	24bec <memset>
   13856:	4628      	mov	r0, r5
   13858:	f7ec fc8a 	bl	170 <Os::MutexInterface::getDelegate(unsigned char (&) [72])>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1385c:	42a8      	cmp	r0, r5
Mutex::Mutex() : m_handle_storage(), m_delegate(*MutexInterface::getDelegate(m_handle_storage)) {
   1385e:	6520      	str	r0, [r4, #80]	; 0x50
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13860:	d003      	beq.n	1386a <Os::Mutex::Mutex()+0x2a>
   13862:	210b      	movs	r1, #11
   13864:	4803      	ldr	r0, [pc, #12]	; (13874 <Os::Mutex::Mutex()+0x34>)
   13866:	f7ed fed1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
}
   1386a:	4620      	mov	r0, r4
   1386c:	bd38      	pop	{r3, r4, r5, pc}
   1386e:	bf00      	nop
   13870:	2000355c 	.word	0x2000355c
   13874:	20000dc8 	.word	0x20000dc8

00013878 <Os::Mutex::lock()>:

void Mutex::lock() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13878:	6d03      	ldr	r3, [r0, #80]	; 0x50
void Mutex::lock() {
   1387a:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1387c:	f100 0408 	add.w	r4, r0, #8
   13880:	42a3      	cmp	r3, r4
   13882:	d00c      	beq.n	1389e <Os::Mutex::lock()+0x26>
   13884:	4605      	mov	r5, r0
   13886:	2123      	movs	r1, #35	; 0x23
   13888:	4823      	ldr	r0, [pc, #140]	; (13918 <Os::Mutex::lock()+0xa0>)
   1388a:	f7ed febf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1388e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13890:	429c      	cmp	r4, r3
   13892:	d004      	beq.n	1389e <Os::Mutex::lock()+0x26>
   13894:	2119      	movs	r1, #25
   13896:	4820      	ldr	r0, [pc, #128]	; (13918 <Os::Mutex::lock()+0xa0>)
   13898:	f7ed feb8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   1389c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1389e:	6823      	ldr	r3, [r4, #0]
   138a0:	4e1e      	ldr	r6, [pc, #120]	; (1391c <Os::Mutex::lock()+0xa4>)
   138a2:	68db      	ldr	r3, [r3, #12]
   138a4:	42b3      	cmp	r3, r6
   138a6:	d131      	bne.n	1390c <Os::Mutex::lock()+0x94>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   138a8:	f104 0508 	add.w	r5, r4, #8
   138ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   138ae:	42ab      	cmp	r3, r5
   138b0:	d004      	beq.n	138bc <Os::Mutex::lock()+0x44>
   138b2:	2119      	movs	r1, #25
   138b4:	4818      	ldr	r0, [pc, #96]	; (13918 <Os::Mutex::lock()+0xa0>)
   138b6:	f7ed fea9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   138ba:	6d25      	ldr	r5, [r4, #80]	; 0x50
   138bc:	682b      	ldr	r3, [r5, #0]
   138be:	68db      	ldr	r3, [r3, #12]
   138c0:	42b3      	cmp	r3, r6
   138c2:	d126      	bne.n	13912 <Os::Mutex::lock()+0x9a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   138c4:	f105 0408 	add.w	r4, r5, #8
   138c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   138ca:	42a3      	cmp	r3, r4
   138cc:	d004      	beq.n	138d8 <Os::Mutex::lock()+0x60>
   138ce:	2119      	movs	r1, #25
   138d0:	4811      	ldr	r0, [pc, #68]	; (13918 <Os::Mutex::lock()+0xa0>)
   138d2:	f7ed fe9b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   138d6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   138d8:	6823      	ldr	r3, [r4, #0]
   138da:	68db      	ldr	r3, [r3, #12]
   138dc:	42b3      	cmp	r3, r6
   138de:	d115      	bne.n	1390c <Os::Mutex::lock()+0x94>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   138e0:	f104 0008 	add.w	r0, r4, #8
   138e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   138e6:	4283      	cmp	r3, r0
   138e8:	d004      	beq.n	138f4 <Os::Mutex::lock()+0x7c>
   138ea:	2119      	movs	r1, #25
   138ec:	480a      	ldr	r0, [pc, #40]	; (13918 <Os::Mutex::lock()+0xa0>)
   138ee:	f7ed fe8d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   138f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
   138f4:	6803      	ldr	r3, [r0, #0]
   138f6:	68db      	ldr	r3, [r3, #12]
   138f8:	4798      	blx	r3
    Mutex::Status status = this->take();
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   138fa:	b900      	cbnz	r0, 138fe <Os::Mutex::lock()+0x86>
}
   138fc:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   138fe:	4601      	mov	r1, r0
   13900:	2225      	movs	r2, #37	; 0x25
   13902:	4805      	ldr	r0, [pc, #20]	; (13918 <Os::Mutex::lock()+0xa0>)
}
   13904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   13908:	f7ed be8e 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_delegate.take();
   1390c:	4620      	mov	r0, r4
   1390e:	4798      	blx	r3
   13910:	e7f3      	b.n	138fa <Os::Mutex::lock()+0x82>
   13912:	4628      	mov	r0, r5
   13914:	4798      	blx	r3
   13916:	e7f0      	b.n	138fa <Os::Mutex::lock()+0x82>
   13918:	20000dc8 	.word	0x20000dc8
   1391c:	00013609 	.word	0x00013609

00013920 <Os::Mutex::unLock()>:

void Mutex::unLock() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13920:	6d03      	ldr	r3, [r0, #80]	; 0x50
void Mutex::unLock() {
   13922:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13924:	f100 0408 	add.w	r4, r0, #8
   13928:	42a3      	cmp	r3, r4
   1392a:	d00c      	beq.n	13946 <Os::Mutex::unLock()+0x26>
   1392c:	4605      	mov	r5, r0
   1392e:	2129      	movs	r1, #41	; 0x29
   13930:	4823      	ldr	r0, [pc, #140]	; (139c0 <Os::Mutex::unLock()+0xa0>)
   13932:	f7ed fe6b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13936:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13938:	429c      	cmp	r4, r3
   1393a:	d004      	beq.n	13946 <Os::Mutex::unLock()+0x26>
   1393c:	211e      	movs	r1, #30
   1393e:	4820      	ldr	r0, [pc, #128]	; (139c0 <Os::Mutex::unLock()+0xa0>)
   13940:	f7ed fe64 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13944:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   13946:	6823      	ldr	r3, [r4, #0]
   13948:	4e1e      	ldr	r6, [pc, #120]	; (139c4 <Os::Mutex::unLock()+0xa4>)
   1394a:	691b      	ldr	r3, [r3, #16]
   1394c:	42b3      	cmp	r3, r6
   1394e:	d131      	bne.n	139b4 <Os::Mutex::unLock()+0x94>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13950:	f104 0508 	add.w	r5, r4, #8
   13954:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13956:	42ab      	cmp	r3, r5
   13958:	d004      	beq.n	13964 <Os::Mutex::unLock()+0x44>
   1395a:	211e      	movs	r1, #30
   1395c:	4818      	ldr	r0, [pc, #96]	; (139c0 <Os::Mutex::unLock()+0xa0>)
   1395e:	f7ed fe55 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13962:	6d25      	ldr	r5, [r4, #80]	; 0x50
   13964:	682b      	ldr	r3, [r5, #0]
   13966:	691b      	ldr	r3, [r3, #16]
   13968:	42b3      	cmp	r3, r6
   1396a:	d126      	bne.n	139ba <Os::Mutex::unLock()+0x9a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   1396c:	f105 0408 	add.w	r4, r5, #8
   13970:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13972:	42a3      	cmp	r3, r4
   13974:	d004      	beq.n	13980 <Os::Mutex::unLock()+0x60>
   13976:	211e      	movs	r1, #30
   13978:	4811      	ldr	r0, [pc, #68]	; (139c0 <Os::Mutex::unLock()+0xa0>)
   1397a:	f7ed fe47 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   1397e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   13980:	6823      	ldr	r3, [r4, #0]
   13982:	691b      	ldr	r3, [r3, #16]
   13984:	42b3      	cmp	r3, r6
   13986:	d115      	bne.n	139b4 <Os::Mutex::unLock()+0x94>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13988:	f104 0008 	add.w	r0, r4, #8
   1398c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1398e:	4283      	cmp	r3, r0
   13990:	d004      	beq.n	1399c <Os::Mutex::unLock()+0x7c>
   13992:	211e      	movs	r1, #30
   13994:	480a      	ldr	r0, [pc, #40]	; (139c0 <Os::Mutex::unLock()+0xa0>)
   13996:	f7ed fe39 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   1399a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1399c:	6803      	ldr	r3, [r0, #0]
   1399e:	691b      	ldr	r3, [r3, #16]
   139a0:	4798      	blx	r3
    Mutex::Status status = this->release();
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   139a2:	b900      	cbnz	r0, 139a6 <Os::Mutex::unLock()+0x86>
}
   139a4:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   139a6:	4601      	mov	r1, r0
   139a8:	222b      	movs	r2, #43	; 0x2b
   139aa:	4805      	ldr	r0, [pc, #20]	; (139c0 <Os::Mutex::unLock()+0xa0>)
}
   139ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   139b0:	f7ed be3a 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    return this->m_delegate.release();
   139b4:	4620      	mov	r0, r4
   139b6:	4798      	blx	r3
   139b8:	e7f3      	b.n	139a2 <Os::Mutex::unLock()+0x82>
   139ba:	4628      	mov	r0, r5
   139bc:	4798      	blx	r3
   139be:	e7f0      	b.n	139a2 <Os::Mutex::unLock()+0x82>
   139c0:	20000dc8 	.word	0x20000dc8
   139c4:	00013725 	.word	0x00013725

000139c8 <Os::ScopeLock::ScopeLock(Os::Mutex&)>:

ScopeLock::ScopeLock(Mutex& mutex) : m_mutex(mutex) {
   139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   139ca:	f101 0508 	add.w	r5, r1, #8
   139ce:	6d0b      	ldr	r3, [r1, #80]	; 0x50
ScopeLock::ScopeLock(Mutex& mutex) : m_mutex(mutex) {
   139d0:	4606      	mov	r6, r0
   139d2:	6001      	str	r1, [r0, #0]
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   139d4:	42ab      	cmp	r3, r5
   139d6:	d00c      	beq.n	139f2 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x2a>
   139d8:	460c      	mov	r4, r1
   139da:	4825      	ldr	r0, [pc, #148]	; (13a70 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa8>)
   139dc:	2123      	movs	r1, #35	; 0x23
   139de:	f7ed fe15 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   139e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   139e4:	429d      	cmp	r5, r3
   139e6:	d004      	beq.n	139f2 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x2a>
   139e8:	2119      	movs	r1, #25
   139ea:	4821      	ldr	r0, [pc, #132]	; (13a70 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa8>)
   139ec:	f7ed fe0e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   139f0:	6d25      	ldr	r5, [r4, #80]	; 0x50
   139f2:	682b      	ldr	r3, [r5, #0]
   139f4:	4f1f      	ldr	r7, [pc, #124]	; (13a74 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xac>)
   139f6:	68db      	ldr	r3, [r3, #12]
   139f8:	42bb      	cmp	r3, r7
   139fa:	d132      	bne.n	13a62 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x9a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   139fc:	f105 0408 	add.w	r4, r5, #8
   13a00:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13a02:	42a3      	cmp	r3, r4
   13a04:	d004      	beq.n	13a10 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x48>
   13a06:	2119      	movs	r1, #25
   13a08:	4819      	ldr	r0, [pc, #100]	; (13a70 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa8>)
   13a0a:	f7ed fdff 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13a0e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   13a10:	6823      	ldr	r3, [r4, #0]
   13a12:	68db      	ldr	r3, [r3, #12]
   13a14:	42bb      	cmp	r3, r7
   13a16:	d127      	bne.n	13a68 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa0>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13a18:	f104 0508 	add.w	r5, r4, #8
   13a1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13a1e:	42ab      	cmp	r3, r5
   13a20:	d004      	beq.n	13a2c <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x64>
   13a22:	2119      	movs	r1, #25
   13a24:	4812      	ldr	r0, [pc, #72]	; (13a70 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa8>)
   13a26:	f7ed fdf1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13a2a:	6d25      	ldr	r5, [r4, #80]	; 0x50
   13a2c:	682b      	ldr	r3, [r5, #0]
   13a2e:	68db      	ldr	r3, [r3, #12]
   13a30:	42bb      	cmp	r3, r7
   13a32:	d116      	bne.n	13a62 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x9a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13a34:	f105 0008 	add.w	r0, r5, #8
   13a38:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13a3a:	4283      	cmp	r3, r0
   13a3c:	d004      	beq.n	13a48 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x80>
   13a3e:	2119      	movs	r1, #25
   13a40:	480b      	ldr	r0, [pc, #44]	; (13a70 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa8>)
   13a42:	f7ed fde3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.take();
   13a46:	6d28      	ldr	r0, [r5, #80]	; 0x50
   13a48:	6803      	ldr	r3, [r0, #0]
   13a4a:	68db      	ldr	r3, [r3, #12]
   13a4c:	4798      	blx	r3
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   13a4e:	b908      	cbnz	r0, 13a54 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x8c>
    this->m_mutex.lock();
}
   13a50:	4630      	mov	r0, r6
   13a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   13a54:	4601      	mov	r1, r0
   13a56:	2225      	movs	r2, #37	; 0x25
   13a58:	4805      	ldr	r0, [pc, #20]	; (13a70 <Os::ScopeLock::ScopeLock(Os::Mutex&)+0xa8>)
   13a5a:	f7ed fde5 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
}
   13a5e:	4630      	mov	r0, r6
   13a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return this->m_delegate.take();
   13a62:	4628      	mov	r0, r5
   13a64:	4798      	blx	r3
   13a66:	e7f2      	b.n	13a4e <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x86>
   13a68:	4620      	mov	r0, r4
   13a6a:	4798      	blx	r3
   13a6c:	e7ef      	b.n	13a4e <Os::ScopeLock::ScopeLock(Os::Mutex&)+0x86>
   13a6e:	bf00      	nop
   13a70:	20000dc8 	.word	0x20000dc8
   13a74:	00013609 	.word	0x00013609

00013a78 <Os::ScopeLock::~ScopeLock()>:

ScopeLock::~ScopeLock() {
   13a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    this->m_mutex.unLock();
   13a7a:	6806      	ldr	r6, [r0, #0]
ScopeLock::~ScopeLock() {
   13a7c:	4605      	mov	r5, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13a7e:	f106 0408 	add.w	r4, r6, #8
   13a82:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13a84:	42a3      	cmp	r3, r4
   13a86:	d00b      	beq.n	13aa0 <Os::ScopeLock::~ScopeLock()+0x28>
   13a88:	2129      	movs	r1, #41	; 0x29
   13a8a:	4824      	ldr	r0, [pc, #144]	; (13b1c <Os::ScopeLock::~ScopeLock()+0xa4>)
   13a8c:	f7ed fdbe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13a90:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13a92:	429c      	cmp	r4, r3
   13a94:	d004      	beq.n	13aa0 <Os::ScopeLock::~ScopeLock()+0x28>
   13a96:	211e      	movs	r1, #30
   13a98:	4820      	ldr	r0, [pc, #128]	; (13b1c <Os::ScopeLock::~ScopeLock()+0xa4>)
   13a9a:	f7ed fdb7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13a9e:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13aa0:	6823      	ldr	r3, [r4, #0]
   13aa2:	4f1f      	ldr	r7, [pc, #124]	; (13b20 <Os::ScopeLock::~ScopeLock()+0xa8>)
   13aa4:	691b      	ldr	r3, [r3, #16]
   13aa6:	42bb      	cmp	r3, r7
   13aa8:	d132      	bne.n	13b10 <Os::ScopeLock::~ScopeLock()+0x98>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13aaa:	f104 0608 	add.w	r6, r4, #8
   13aae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13ab0:	42b3      	cmp	r3, r6
   13ab2:	d004      	beq.n	13abe <Os::ScopeLock::~ScopeLock()+0x46>
   13ab4:	211e      	movs	r1, #30
   13ab6:	4819      	ldr	r0, [pc, #100]	; (13b1c <Os::ScopeLock::~ScopeLock()+0xa4>)
   13ab8:	f7ed fda8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13abc:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13abe:	6833      	ldr	r3, [r6, #0]
   13ac0:	691b      	ldr	r3, [r3, #16]
   13ac2:	42bb      	cmp	r3, r7
   13ac4:	d127      	bne.n	13b16 <Os::ScopeLock::~ScopeLock()+0x9e>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13ac6:	f106 0408 	add.w	r4, r6, #8
   13aca:	6d33      	ldr	r3, [r6, #80]	; 0x50
   13acc:	42a3      	cmp	r3, r4
   13ace:	d004      	beq.n	13ada <Os::ScopeLock::~ScopeLock()+0x62>
   13ad0:	211e      	movs	r1, #30
   13ad2:	4812      	ldr	r0, [pc, #72]	; (13b1c <Os::ScopeLock::~ScopeLock()+0xa4>)
   13ad4:	f7ed fd9a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13ad8:	6d34      	ldr	r4, [r6, #80]	; 0x50
   13ada:	6823      	ldr	r3, [r4, #0]
   13adc:	691b      	ldr	r3, [r3, #16]
   13ade:	42bb      	cmp	r3, r7
   13ae0:	d116      	bne.n	13b10 <Os::ScopeLock::~ScopeLock()+0x98>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<MutexInterface*>(&this->m_handle_storage[0]));
   13ae2:	f104 0008 	add.w	r0, r4, #8
   13ae6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13ae8:	4283      	cmp	r3, r0
   13aea:	d004      	beq.n	13af6 <Os::ScopeLock::~ScopeLock()+0x7e>
   13aec:	211e      	movs	r1, #30
   13aee:	480b      	ldr	r0, [pc, #44]	; (13b1c <Os::ScopeLock::~ScopeLock()+0xa4>)
   13af0:	f7ed fd8c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.release();
   13af4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13af6:	6803      	ldr	r3, [r0, #0]
   13af8:	691b      	ldr	r3, [r3, #16]
   13afa:	4798      	blx	r3
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   13afc:	b908      	cbnz	r0, 13b02 <Os::ScopeLock::~ScopeLock()+0x8a>
}
   13afe:	4628      	mov	r0, r5
   13b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FW_ASSERT(status == Mutex::Status::OP_OK, status);
   13b02:	4601      	mov	r1, r0
   13b04:	222b      	movs	r2, #43	; 0x2b
   13b06:	4805      	ldr	r0, [pc, #20]	; (13b1c <Os::ScopeLock::~ScopeLock()+0xa4>)
   13b08:	f7ed fd8e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
}
   13b0c:	4628      	mov	r0, r5
   13b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return this->m_delegate.release();
   13b10:	4620      	mov	r0, r4
   13b12:	4798      	blx	r3
   13b14:	e7f2      	b.n	13afc <Os::ScopeLock::~ScopeLock()+0x84>
   13b16:	4630      	mov	r0, r6
   13b18:	4798      	blx	r3
   13b1a:	e7ef      	b.n	13afc <Os::ScopeLock::~ScopeLock()+0x84>
   13b1c:	20000dc8 	.word	0x20000dc8
   13b20:	00013725 	.word	0x00013725

00013b24 <Os::ConditionVariable::pend(Os::Mutex&)>:
ConditionVariable::~ConditionVariable() {
    m_delegate.~ConditionVariableInterface();
}

ConditionVariable::Status ConditionVariable::pend(Os::Mutex& mutex) {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13b24:	f100 0308 	add.w	r3, r0, #8
   13b28:	6c02      	ldr	r2, [r0, #64]	; 0x40
   13b2a:	429a      	cmp	r2, r3
ConditionVariable::Status ConditionVariable::pend(Os::Mutex& mutex) {
   13b2c:	b570      	push	{r4, r5, r6, lr}
   13b2e:	4604      	mov	r4, r0
   13b30:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13b32:	d003      	beq.n	13b3c <Os::ConditionVariable::pend(Os::Mutex&)+0x18>
   13b34:	210c      	movs	r1, #12
   13b36:	4808      	ldr	r0, [pc, #32]	; (13b58 <Os::ConditionVariable::pend(Os::Mutex&)+0x34>)
   13b38:	f7ed fd68 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_lock != nullptr && this->m_lock != &mutex) {
   13b3c:	6863      	ldr	r3, [r4, #4]
   13b3e:	42ab      	cmp	r3, r5
   13b40:	d000      	beq.n	13b44 <Os::ConditionVariable::pend(Os::Mutex&)+0x20>
   13b42:	b93b      	cbnz	r3, 13b54 <Os::ConditionVariable::pend(Os::Mutex&)+0x30>
        return Status::ERROR_DIFFERENT_MUTEX;
    };
    this->m_lock = &mutex;
    return this->m_delegate.pend(mutex);
   13b44:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13b46:	4629      	mov	r1, r5
    this->m_lock = &mutex;
   13b48:	6065      	str	r5, [r4, #4]
    return this->m_delegate.pend(mutex);
   13b4a:	6803      	ldr	r3, [r0, #0]
}
   13b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.pend(mutex);
   13b50:	68db      	ldr	r3, [r3, #12]
   13b52:	4718      	bx	r3
}
   13b54:	2002      	movs	r0, #2
   13b56:	bd70      	pop	{r4, r5, r6, pc}
   13b58:	20000d9c 	.word	0x20000d9c

00013b5c <Os::ConditionVariable::~ConditionVariable()>:
ConditionVariable::~ConditionVariable() {
   13b5c:	b538      	push	{r3, r4, r5, lr}
   13b5e:	4604      	mov	r4, r0
   13b60:	4b19      	ldr	r3, [pc, #100]	; (13bc8 <Os::ConditionVariable::~ConditionVariable()+0x6c>)
    m_delegate.~ConditionVariableInterface();
   13b62:	6c00      	ldr	r0, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13b64:	6023      	str	r3, [r4, #0]
    m_delegate.~ConditionVariableInterface();
   13b66:	6801      	ldr	r1, [r0, #0]
   13b68:	4a18      	ldr	r2, [pc, #96]	; (13bcc <Os::ConditionVariable::~ConditionVariable()+0x70>)
   13b6a:	6809      	ldr	r1, [r1, #0]
   13b6c:	4291      	cmp	r1, r2
   13b6e:	d124      	bne.n	13bba <Os::ConditionVariable::~ConditionVariable()+0x5e>
   13b70:	6c02      	ldr	r2, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13b72:	6003      	str	r3, [r0, #0]
    m_delegate.~ConditionVariableInterface();
   13b74:	6810      	ldr	r0, [r2, #0]
   13b76:	6805      	ldr	r5, [r0, #0]
   13b78:	428d      	cmp	r5, r1
   13b7a:	d116      	bne.n	13baa <Os::ConditionVariable::~ConditionVariable()+0x4e>
   13b7c:	6c10      	ldr	r0, [r2, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13b7e:	6013      	str	r3, [r2, #0]
    m_delegate.~ConditionVariableInterface();
   13b80:	6802      	ldr	r2, [r0, #0]
   13b82:	6811      	ldr	r1, [r2, #0]
   13b84:	42a9      	cmp	r1, r5
   13b86:	d118      	bne.n	13bba <Os::ConditionVariable::~ConditionVariable()+0x5e>
   13b88:	6c02      	ldr	r2, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13b8a:	6003      	str	r3, [r0, #0]
    m_delegate.~ConditionVariableInterface();
   13b8c:	6810      	ldr	r0, [r2, #0]
   13b8e:	6805      	ldr	r5, [r0, #0]
   13b90:	428d      	cmp	r5, r1
   13b92:	d10a      	bne.n	13baa <Os::ConditionVariable::~ConditionVariable()+0x4e>
   13b94:	6c10      	ldr	r0, [r2, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13b96:	6013      	str	r3, [r2, #0]
    m_delegate.~ConditionVariableInterface();
   13b98:	6803      	ldr	r3, [r0, #0]
   13b9a:	681b      	ldr	r3, [r3, #0]
   13b9c:	4798      	blx	r3
}
   13b9e:	4620      	mov	r0, r4
   13ba0:	2148      	movs	r1, #72	; 0x48
   13ba2:	f005 f895 	bl	18cd0 <operator delete(void*, unsigned int)>
   13ba6:	4620      	mov	r0, r4
   13ba8:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~ConditionVariableInterface();
   13baa:	4610      	mov	r0, r2
   13bac:	47a8      	blx	r5
}
   13bae:	4620      	mov	r0, r4
   13bb0:	2148      	movs	r1, #72	; 0x48
   13bb2:	f005 f88d 	bl	18cd0 <operator delete(void*, unsigned int)>
   13bb6:	4620      	mov	r0, r4
   13bb8:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~ConditionVariableInterface();
   13bba:	4788      	blx	r1
}
   13bbc:	4620      	mov	r0, r4
   13bbe:	2148      	movs	r1, #72	; 0x48
   13bc0:	f005 f886 	bl	18cd0 <operator delete(void*, unsigned int)>
   13bc4:	4620      	mov	r0, r4
   13bc6:	bd38      	pop	{r3, r4, r5, pc}
   13bc8:	200034b8 	.word	0x200034b8
   13bcc:	00013c19 	.word	0x00013c19

00013bd0 <Os::ConditionVariable::wait(Os::Mutex&)>:
void ConditionVariable::wait(Os::Mutex& mutex) {
   13bd0:	b538      	push	{r3, r4, r5, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13bd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
   13bd4:	f100 0308 	add.w	r3, r0, #8
void ConditionVariable::wait(Os::Mutex& mutex) {
   13bd8:	4604      	mov	r4, r0
   13bda:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13bdc:	429a      	cmp	r2, r3
   13bde:	d003      	beq.n	13be8 <Os::ConditionVariable::wait(Os::Mutex&)+0x18>
   13be0:	210c      	movs	r1, #12
   13be2:	480c      	ldr	r0, [pc, #48]	; (13c14 <Os::ConditionVariable::wait(Os::Mutex&)+0x44>)
   13be4:	f7ed fd12 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_lock != nullptr && this->m_lock != &mutex) {
   13be8:	6863      	ldr	r3, [r4, #4]
   13bea:	429d      	cmp	r5, r3
   13bec:	d000      	beq.n	13bf0 <Os::ConditionVariable::wait(Os::Mutex&)+0x20>
   13bee:	b93b      	cbnz	r3, 13c00 <Os::ConditionVariable::wait(Os::Mutex&)+0x30>
    return this->m_delegate.pend(mutex);
   13bf0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13bf2:	4629      	mov	r1, r5
    this->m_lock = &mutex;
   13bf4:	6065      	str	r5, [r4, #4]
    return this->m_delegate.pend(mutex);
   13bf6:	6803      	ldr	r3, [r0, #0]
   13bf8:	68db      	ldr	r3, [r3, #12]
   13bfa:	4798      	blx	r3
    Status status = this->pend(mutex);
    FW_ASSERT(status == Status::OP_OK, static_cast<FwAssertArgType>(status));
   13bfc:	b938      	cbnz	r0, 13c0e <Os::ConditionVariable::wait(Os::Mutex&)+0x3e>
}
   13bfe:	bd38      	pop	{r3, r4, r5, pc}
   13c00:	2102      	movs	r1, #2
    FW_ASSERT(status == Status::OP_OK, static_cast<FwAssertArgType>(status));
   13c02:	2215      	movs	r2, #21
   13c04:	4803      	ldr	r0, [pc, #12]	; (13c14 <Os::ConditionVariable::wait(Os::Mutex&)+0x44>)
}
   13c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    FW_ASSERT(status == Status::OP_OK, static_cast<FwAssertArgType>(status));
   13c0a:	f7ed bd0d 	b.w	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   13c0e:	4601      	mov	r1, r0
   13c10:	e7f7      	b.n	13c02 <Os::ConditionVariable::wait(Os::Mutex&)+0x32>
   13c12:	bf00      	nop
   13c14:	20000d9c 	.word	0x20000d9c

00013c18 <Os::ConditionVariable::~ConditionVariable()>:
ConditionVariable::~ConditionVariable() {
   13c18:	b538      	push	{r3, r4, r5, lr}
   13c1a:	4604      	mov	r4, r0
   13c1c:	4b1f      	ldr	r3, [pc, #124]	; (13c9c <Os::ConditionVariable::~ConditionVariable()+0x84>)
    m_delegate.~ConditionVariableInterface();
   13c1e:	6c00      	ldr	r0, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c20:	6023      	str	r3, [r4, #0]
    m_delegate.~ConditionVariableInterface();
   13c22:	6801      	ldr	r1, [r0, #0]
   13c24:	4a1e      	ldr	r2, [pc, #120]	; (13ca0 <Os::ConditionVariable::~ConditionVariable()+0x88>)
   13c26:	6809      	ldr	r1, [r1, #0]
   13c28:	4291      	cmp	r1, r2
   13c2a:	d134      	bne.n	13c96 <Os::ConditionVariable::~ConditionVariable()+0x7e>
   13c2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c2e:	6003      	str	r3, [r0, #0]
    m_delegate.~ConditionVariableInterface();
   13c30:	6810      	ldr	r0, [r2, #0]
   13c32:	6805      	ldr	r5, [r0, #0]
   13c34:	428d      	cmp	r5, r1
   13c36:	d12a      	bne.n	13c8e <Os::ConditionVariable::~ConditionVariable()+0x76>
   13c38:	6c10      	ldr	r0, [r2, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c3a:	6013      	str	r3, [r2, #0]
    m_delegate.~ConditionVariableInterface();
   13c3c:	6802      	ldr	r2, [r0, #0]
   13c3e:	6811      	ldr	r1, [r2, #0]
   13c40:	42a9      	cmp	r1, r5
   13c42:	d128      	bne.n	13c96 <Os::ConditionVariable::~ConditionVariable()+0x7e>
   13c44:	6c02      	ldr	r2, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c46:	6003      	str	r3, [r0, #0]
    m_delegate.~ConditionVariableInterface();
   13c48:	6810      	ldr	r0, [r2, #0]
   13c4a:	6805      	ldr	r5, [r0, #0]
   13c4c:	428d      	cmp	r5, r1
   13c4e:	d11e      	bne.n	13c8e <Os::ConditionVariable::~ConditionVariable()+0x76>
   13c50:	6c10      	ldr	r0, [r2, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c52:	6013      	str	r3, [r2, #0]
    m_delegate.~ConditionVariableInterface();
   13c54:	6802      	ldr	r2, [r0, #0]
   13c56:	6811      	ldr	r1, [r2, #0]
   13c58:	42a9      	cmp	r1, r5
   13c5a:	d11c      	bne.n	13c96 <Os::ConditionVariable::~ConditionVariable()+0x7e>
   13c5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c5e:	6003      	str	r3, [r0, #0]
    m_delegate.~ConditionVariableInterface();
   13c60:	6810      	ldr	r0, [r2, #0]
   13c62:	6805      	ldr	r5, [r0, #0]
   13c64:	428d      	cmp	r5, r1
   13c66:	d112      	bne.n	13c8e <Os::ConditionVariable::~ConditionVariable()+0x76>
   13c68:	6c10      	ldr	r0, [r2, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c6a:	6013      	str	r3, [r2, #0]
    m_delegate.~ConditionVariableInterface();
   13c6c:	6802      	ldr	r2, [r0, #0]
   13c6e:	6811      	ldr	r1, [r2, #0]
   13c70:	42a9      	cmp	r1, r5
   13c72:	d110      	bne.n	13c96 <Os::ConditionVariable::~ConditionVariable()+0x7e>
   13c74:	6c02      	ldr	r2, [r0, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c76:	6003      	str	r3, [r0, #0]
    m_delegate.~ConditionVariableInterface();
   13c78:	6810      	ldr	r0, [r2, #0]
   13c7a:	6805      	ldr	r5, [r0, #0]
   13c7c:	428d      	cmp	r5, r1
   13c7e:	d106      	bne.n	13c8e <Os::ConditionVariable::~ConditionVariable()+0x76>
   13c80:	6c10      	ldr	r0, [r2, #64]	; 0x40
ConditionVariable::~ConditionVariable() {
   13c82:	6013      	str	r3, [r2, #0]
    m_delegate.~ConditionVariableInterface();
   13c84:	6803      	ldr	r3, [r0, #0]
   13c86:	681b      	ldr	r3, [r3, #0]
   13c88:	4798      	blx	r3
}
   13c8a:	4620      	mov	r0, r4
   13c8c:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~ConditionVariableInterface();
   13c8e:	4610      	mov	r0, r2
   13c90:	47a8      	blx	r5
}
   13c92:	4620      	mov	r0, r4
   13c94:	bd38      	pop	{r3, r4, r5, pc}
    m_delegate.~ConditionVariableInterface();
   13c96:	4788      	blx	r1
}
   13c98:	4620      	mov	r0, r4
   13c9a:	bd38      	pop	{r3, r4, r5, pc}
   13c9c:	200034b8 	.word	0x200034b8
   13ca0:	00013c19 	.word	0x00013c19

00013ca4 <Os::ConditionVariable::notify()>:
void ConditionVariable::notify() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13ca4:	6c03      	ldr	r3, [r0, #64]	; 0x40
void ConditionVariable::notify() {
   13ca6:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13ca8:	f100 0408 	add.w	r4, r0, #8
   13cac:	42a3      	cmp	r3, r4
   13cae:	d005      	beq.n	13cbc <Os::ConditionVariable::notify()+0x18>
   13cb0:	4605      	mov	r5, r0
   13cb2:	2118      	movs	r1, #24
   13cb4:	4840      	ldr	r0, [pc, #256]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13cb6:	f7ed fca9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13cba:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   13cbc:	6823      	ldr	r3, [r4, #0]
   13cbe:	4d3f      	ldr	r5, [pc, #252]	; (13dbc <Os::ConditionVariable::notify()+0x118>)
   13cc0:	691b      	ldr	r3, [r3, #16]
   13cc2:	42ab      	cmp	r3, r5
   13cc4:	d174      	bne.n	13db0 <Os::ConditionVariable::notify()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13cc6:	f104 0608 	add.w	r6, r4, #8
   13cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13ccc:	42b3      	cmp	r3, r6
   13cce:	d004      	beq.n	13cda <Os::ConditionVariable::notify()+0x36>
   13cd0:	2118      	movs	r1, #24
   13cd2:	4839      	ldr	r0, [pc, #228]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13cd4:	f7ed fc9a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13cd8:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13cda:	6833      	ldr	r3, [r6, #0]
   13cdc:	691b      	ldr	r3, [r3, #16]
   13cde:	42ab      	cmp	r3, r5
   13ce0:	d162      	bne.n	13da8 <Os::ConditionVariable::notify()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13ce2:	f106 0408 	add.w	r4, r6, #8
   13ce6:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13ce8:	42a3      	cmp	r3, r4
   13cea:	d004      	beq.n	13cf6 <Os::ConditionVariable::notify()+0x52>
   13cec:	2118      	movs	r1, #24
   13cee:	4832      	ldr	r0, [pc, #200]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13cf0:	f7ed fc8c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13cf4:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13cf6:	6823      	ldr	r3, [r4, #0]
   13cf8:	691b      	ldr	r3, [r3, #16]
   13cfa:	42ab      	cmp	r3, r5
   13cfc:	d158      	bne.n	13db0 <Os::ConditionVariable::notify()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13cfe:	f104 0608 	add.w	r6, r4, #8
   13d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13d04:	42b3      	cmp	r3, r6
   13d06:	d004      	beq.n	13d12 <Os::ConditionVariable::notify()+0x6e>
   13d08:	2118      	movs	r1, #24
   13d0a:	482b      	ldr	r0, [pc, #172]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13d0c:	f7ed fc7e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13d10:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13d12:	6833      	ldr	r3, [r6, #0]
   13d14:	691b      	ldr	r3, [r3, #16]
   13d16:	42ab      	cmp	r3, r5
   13d18:	d146      	bne.n	13da8 <Os::ConditionVariable::notify()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13d1a:	f106 0408 	add.w	r4, r6, #8
   13d1e:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13d20:	42a3      	cmp	r3, r4
   13d22:	d004      	beq.n	13d2e <Os::ConditionVariable::notify()+0x8a>
   13d24:	2118      	movs	r1, #24
   13d26:	4824      	ldr	r0, [pc, #144]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13d28:	f7ed fc70 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13d2c:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13d2e:	6823      	ldr	r3, [r4, #0]
   13d30:	691b      	ldr	r3, [r3, #16]
   13d32:	42ab      	cmp	r3, r5
   13d34:	d13c      	bne.n	13db0 <Os::ConditionVariable::notify()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13d36:	f104 0608 	add.w	r6, r4, #8
   13d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13d3c:	42b3      	cmp	r3, r6
   13d3e:	d004      	beq.n	13d4a <Os::ConditionVariable::notify()+0xa6>
   13d40:	2118      	movs	r1, #24
   13d42:	481d      	ldr	r0, [pc, #116]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13d44:	f7ed fc62 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13d48:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13d4a:	6833      	ldr	r3, [r6, #0]
   13d4c:	691b      	ldr	r3, [r3, #16]
   13d4e:	42ab      	cmp	r3, r5
   13d50:	d12a      	bne.n	13da8 <Os::ConditionVariable::notify()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13d52:	f106 0408 	add.w	r4, r6, #8
   13d56:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13d58:	42a3      	cmp	r3, r4
   13d5a:	d004      	beq.n	13d66 <Os::ConditionVariable::notify()+0xc2>
   13d5c:	2118      	movs	r1, #24
   13d5e:	4816      	ldr	r0, [pc, #88]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13d60:	f7ed fc54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13d64:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13d66:	6823      	ldr	r3, [r4, #0]
   13d68:	691b      	ldr	r3, [r3, #16]
   13d6a:	42ab      	cmp	r3, r5
   13d6c:	d120      	bne.n	13db0 <Os::ConditionVariable::notify()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13d6e:	f104 0608 	add.w	r6, r4, #8
   13d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13d74:	42b3      	cmp	r3, r6
   13d76:	d004      	beq.n	13d82 <Os::ConditionVariable::notify()+0xde>
   13d78:	2118      	movs	r1, #24
   13d7a:	480f      	ldr	r0, [pc, #60]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13d7c:	f7ed fc46 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13d80:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13d82:	6833      	ldr	r3, [r6, #0]
   13d84:	691b      	ldr	r3, [r3, #16]
   13d86:	42ab      	cmp	r3, r5
   13d88:	d10e      	bne.n	13da8 <Os::ConditionVariable::notify()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13d8a:	f106 0008 	add.w	r0, r6, #8
   13d8e:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13d90:	4283      	cmp	r3, r0
   13d92:	d004      	beq.n	13d9e <Os::ConditionVariable::notify()+0xfa>
   13d94:	2118      	movs	r1, #24
   13d96:	4808      	ldr	r0, [pc, #32]	; (13db8 <Os::ConditionVariable::notify()+0x114>)
   13d98:	f7ed fc38 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notify();
   13d9c:	6c30      	ldr	r0, [r6, #64]	; 0x40
   13d9e:	6803      	ldr	r3, [r0, #0]
}
   13da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.notify();
   13da4:	691b      	ldr	r3, [r3, #16]
   13da6:	4718      	bx	r3
   13da8:	4630      	mov	r0, r6
}
   13daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.notify();
   13dae:	4718      	bx	r3
   13db0:	4620      	mov	r0, r4
}
   13db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.notify();
   13db6:	4718      	bx	r3
   13db8:	20000d9c 	.word	0x20000d9c
   13dbc:	00013ca5 	.word	0x00013ca5

00013dc0 <Os::ConditionVariable::notifyAll()>:
void ConditionVariable::notifyAll() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13dc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
void ConditionVariable::notifyAll() {
   13dc2:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13dc4:	f100 0408 	add.w	r4, r0, #8
   13dc8:	42a3      	cmp	r3, r4
   13dca:	d005      	beq.n	13dd8 <Os::ConditionVariable::notifyAll()+0x18>
   13dcc:	4605      	mov	r5, r0
   13dce:	211c      	movs	r1, #28
   13dd0:	4840      	ldr	r0, [pc, #256]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13dd2:	f7ed fc1b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13dd6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   13dd8:	6823      	ldr	r3, [r4, #0]
   13dda:	4d3f      	ldr	r5, [pc, #252]	; (13ed8 <Os::ConditionVariable::notifyAll()+0x118>)
   13ddc:	695b      	ldr	r3, [r3, #20]
   13dde:	42ab      	cmp	r3, r5
   13de0:	d174      	bne.n	13ecc <Os::ConditionVariable::notifyAll()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13de2:	f104 0608 	add.w	r6, r4, #8
   13de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13de8:	42b3      	cmp	r3, r6
   13dea:	d004      	beq.n	13df6 <Os::ConditionVariable::notifyAll()+0x36>
   13dec:	211c      	movs	r1, #28
   13dee:	4839      	ldr	r0, [pc, #228]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13df0:	f7ed fc0c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13df4:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13df6:	6833      	ldr	r3, [r6, #0]
   13df8:	695b      	ldr	r3, [r3, #20]
   13dfa:	42ab      	cmp	r3, r5
   13dfc:	d162      	bne.n	13ec4 <Os::ConditionVariable::notifyAll()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13dfe:	f106 0408 	add.w	r4, r6, #8
   13e02:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13e04:	42a3      	cmp	r3, r4
   13e06:	d004      	beq.n	13e12 <Os::ConditionVariable::notifyAll()+0x52>
   13e08:	211c      	movs	r1, #28
   13e0a:	4832      	ldr	r0, [pc, #200]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13e0c:	f7ed fbfe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13e10:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13e12:	6823      	ldr	r3, [r4, #0]
   13e14:	695b      	ldr	r3, [r3, #20]
   13e16:	42ab      	cmp	r3, r5
   13e18:	d158      	bne.n	13ecc <Os::ConditionVariable::notifyAll()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13e1a:	f104 0608 	add.w	r6, r4, #8
   13e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13e20:	42b3      	cmp	r3, r6
   13e22:	d004      	beq.n	13e2e <Os::ConditionVariable::notifyAll()+0x6e>
   13e24:	211c      	movs	r1, #28
   13e26:	482b      	ldr	r0, [pc, #172]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13e28:	f7ed fbf0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13e2c:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13e2e:	6833      	ldr	r3, [r6, #0]
   13e30:	695b      	ldr	r3, [r3, #20]
   13e32:	42ab      	cmp	r3, r5
   13e34:	d146      	bne.n	13ec4 <Os::ConditionVariable::notifyAll()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13e36:	f106 0408 	add.w	r4, r6, #8
   13e3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13e3c:	42a3      	cmp	r3, r4
   13e3e:	d004      	beq.n	13e4a <Os::ConditionVariable::notifyAll()+0x8a>
   13e40:	211c      	movs	r1, #28
   13e42:	4824      	ldr	r0, [pc, #144]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13e44:	f7ed fbe2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13e48:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13e4a:	6823      	ldr	r3, [r4, #0]
   13e4c:	695b      	ldr	r3, [r3, #20]
   13e4e:	42ab      	cmp	r3, r5
   13e50:	d13c      	bne.n	13ecc <Os::ConditionVariable::notifyAll()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13e52:	f104 0608 	add.w	r6, r4, #8
   13e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13e58:	42b3      	cmp	r3, r6
   13e5a:	d004      	beq.n	13e66 <Os::ConditionVariable::notifyAll()+0xa6>
   13e5c:	211c      	movs	r1, #28
   13e5e:	481d      	ldr	r0, [pc, #116]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13e60:	f7ed fbd4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13e64:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13e66:	6833      	ldr	r3, [r6, #0]
   13e68:	695b      	ldr	r3, [r3, #20]
   13e6a:	42ab      	cmp	r3, r5
   13e6c:	d12a      	bne.n	13ec4 <Os::ConditionVariable::notifyAll()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13e6e:	f106 0408 	add.w	r4, r6, #8
   13e72:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13e74:	42a3      	cmp	r3, r4
   13e76:	d004      	beq.n	13e82 <Os::ConditionVariable::notifyAll()+0xc2>
   13e78:	211c      	movs	r1, #28
   13e7a:	4816      	ldr	r0, [pc, #88]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13e7c:	f7ed fbc6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13e80:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13e82:	6823      	ldr	r3, [r4, #0]
   13e84:	695b      	ldr	r3, [r3, #20]
   13e86:	42ab      	cmp	r3, r5
   13e88:	d120      	bne.n	13ecc <Os::ConditionVariable::notifyAll()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13e8a:	f104 0608 	add.w	r6, r4, #8
   13e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13e90:	42b3      	cmp	r3, r6
   13e92:	d004      	beq.n	13e9e <Os::ConditionVariable::notifyAll()+0xde>
   13e94:	211c      	movs	r1, #28
   13e96:	480f      	ldr	r0, [pc, #60]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13e98:	f7ed fbb8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13e9c:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13e9e:	6833      	ldr	r3, [r6, #0]
   13ea0:	695b      	ldr	r3, [r3, #20]
   13ea2:	42ab      	cmp	r3, r5
   13ea4:	d10e      	bne.n	13ec4 <Os::ConditionVariable::notifyAll()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13ea6:	f106 0008 	add.w	r0, r6, #8
   13eaa:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13eac:	4283      	cmp	r3, r0
   13eae:	d004      	beq.n	13eba <Os::ConditionVariable::notifyAll()+0xfa>
   13eb0:	211c      	movs	r1, #28
   13eb2:	4808      	ldr	r0, [pc, #32]	; (13ed4 <Os::ConditionVariable::notifyAll()+0x114>)
   13eb4:	f7ed fbaa 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.notifyAll();
   13eb8:	6c30      	ldr	r0, [r6, #64]	; 0x40
   13eba:	6803      	ldr	r3, [r0, #0]
}
   13ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.notifyAll();
   13ec0:	695b      	ldr	r3, [r3, #20]
   13ec2:	4718      	bx	r3
   13ec4:	4630      	mov	r0, r6
}
   13ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.notifyAll();
   13eca:	4718      	bx	r3
   13ecc:	4620      	mov	r0, r4
}
   13ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.notifyAll();
   13ed2:	4718      	bx	r3
   13ed4:	20000d9c 	.word	0x20000d9c
   13ed8:	00013dc1 	.word	0x00013dc1

00013edc <Os::ConditionVariable::getHandle()>:

ConditionVariableHandle* ConditionVariable::getHandle() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13edc:	6c03      	ldr	r3, [r0, #64]	; 0x40
ConditionVariableHandle* ConditionVariable::getHandle() {
   13ede:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13ee0:	f100 0408 	add.w	r4, r0, #8
   13ee4:	42a3      	cmp	r3, r4
   13ee6:	d005      	beq.n	13ef4 <Os::ConditionVariable::getHandle()+0x18>
   13ee8:	4605      	mov	r5, r0
   13eea:	2121      	movs	r1, #33	; 0x21
   13eec:	4840      	ldr	r0, [pc, #256]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13eee:	f7ed fb8d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13ef2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   13ef4:	6823      	ldr	r3, [r4, #0]
   13ef6:	4d3f      	ldr	r5, [pc, #252]	; (13ff4 <Os::ConditionVariable::getHandle()+0x118>)
   13ef8:	699b      	ldr	r3, [r3, #24]
   13efa:	42ab      	cmp	r3, r5
   13efc:	d174      	bne.n	13fe8 <Os::ConditionVariable::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13efe:	f104 0608 	add.w	r6, r4, #8
   13f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13f04:	42b3      	cmp	r3, r6
   13f06:	d004      	beq.n	13f12 <Os::ConditionVariable::getHandle()+0x36>
   13f08:	2121      	movs	r1, #33	; 0x21
   13f0a:	4839      	ldr	r0, [pc, #228]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13f0c:	f7ed fb7e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13f10:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13f12:	6833      	ldr	r3, [r6, #0]
   13f14:	699b      	ldr	r3, [r3, #24]
   13f16:	42ab      	cmp	r3, r5
   13f18:	d162      	bne.n	13fe0 <Os::ConditionVariable::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13f1a:	f106 0408 	add.w	r4, r6, #8
   13f1e:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13f20:	42a3      	cmp	r3, r4
   13f22:	d004      	beq.n	13f2e <Os::ConditionVariable::getHandle()+0x52>
   13f24:	2121      	movs	r1, #33	; 0x21
   13f26:	4832      	ldr	r0, [pc, #200]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13f28:	f7ed fb70 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13f2c:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13f2e:	6823      	ldr	r3, [r4, #0]
   13f30:	699b      	ldr	r3, [r3, #24]
   13f32:	42ab      	cmp	r3, r5
   13f34:	d158      	bne.n	13fe8 <Os::ConditionVariable::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13f36:	f104 0608 	add.w	r6, r4, #8
   13f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13f3c:	42b3      	cmp	r3, r6
   13f3e:	d004      	beq.n	13f4a <Os::ConditionVariable::getHandle()+0x6e>
   13f40:	2121      	movs	r1, #33	; 0x21
   13f42:	482b      	ldr	r0, [pc, #172]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13f44:	f7ed fb62 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13f48:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13f4a:	6833      	ldr	r3, [r6, #0]
   13f4c:	699b      	ldr	r3, [r3, #24]
   13f4e:	42ab      	cmp	r3, r5
   13f50:	d146      	bne.n	13fe0 <Os::ConditionVariable::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13f52:	f106 0408 	add.w	r4, r6, #8
   13f56:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13f58:	42a3      	cmp	r3, r4
   13f5a:	d004      	beq.n	13f66 <Os::ConditionVariable::getHandle()+0x8a>
   13f5c:	2121      	movs	r1, #33	; 0x21
   13f5e:	4824      	ldr	r0, [pc, #144]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13f60:	f7ed fb54 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13f64:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13f66:	6823      	ldr	r3, [r4, #0]
   13f68:	699b      	ldr	r3, [r3, #24]
   13f6a:	42ab      	cmp	r3, r5
   13f6c:	d13c      	bne.n	13fe8 <Os::ConditionVariable::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13f6e:	f104 0608 	add.w	r6, r4, #8
   13f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13f74:	42b3      	cmp	r3, r6
   13f76:	d004      	beq.n	13f82 <Os::ConditionVariable::getHandle()+0xa6>
   13f78:	2121      	movs	r1, #33	; 0x21
   13f7a:	481d      	ldr	r0, [pc, #116]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13f7c:	f7ed fb46 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13f80:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13f82:	6833      	ldr	r3, [r6, #0]
   13f84:	699b      	ldr	r3, [r3, #24]
   13f86:	42ab      	cmp	r3, r5
   13f88:	d12a      	bne.n	13fe0 <Os::ConditionVariable::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13f8a:	f106 0408 	add.w	r4, r6, #8
   13f8e:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13f90:	42a3      	cmp	r3, r4
   13f92:	d004      	beq.n	13f9e <Os::ConditionVariable::getHandle()+0xc2>
   13f94:	2121      	movs	r1, #33	; 0x21
   13f96:	4816      	ldr	r0, [pc, #88]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13f98:	f7ed fb38 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13f9c:	6c34      	ldr	r4, [r6, #64]	; 0x40
   13f9e:	6823      	ldr	r3, [r4, #0]
   13fa0:	699b      	ldr	r3, [r3, #24]
   13fa2:	42ab      	cmp	r3, r5
   13fa4:	d120      	bne.n	13fe8 <Os::ConditionVariable::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13fa6:	f104 0608 	add.w	r6, r4, #8
   13faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13fac:	42b3      	cmp	r3, r6
   13fae:	d004      	beq.n	13fba <Os::ConditionVariable::getHandle()+0xde>
   13fb0:	2121      	movs	r1, #33	; 0x21
   13fb2:	480f      	ldr	r0, [pc, #60]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13fb4:	f7ed fb2a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13fb8:	6c26      	ldr	r6, [r4, #64]	; 0x40
   13fba:	6833      	ldr	r3, [r6, #0]
   13fbc:	699b      	ldr	r3, [r3, #24]
   13fbe:	42ab      	cmp	r3, r5
   13fc0:	d10e      	bne.n	13fe0 <Os::ConditionVariable::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const ConditionVariableInterface*>(&this->m_handle_storage[0]));
   13fc2:	f106 0008 	add.w	r0, r6, #8
   13fc6:	6c33      	ldr	r3, [r6, #64]	; 0x40
   13fc8:	4283      	cmp	r3, r0
   13fca:	d004      	beq.n	13fd6 <Os::ConditionVariable::getHandle()+0xfa>
   13fcc:	2121      	movs	r1, #33	; 0x21
   13fce:	4808      	ldr	r0, [pc, #32]	; (13ff0 <Os::ConditionVariable::getHandle()+0x114>)
   13fd0:	f7ed fb1c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   13fd4:	6c30      	ldr	r0, [r6, #64]	; 0x40
   13fd6:	6803      	ldr	r3, [r0, #0]
}
   13fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   13fdc:	699b      	ldr	r3, [r3, #24]
   13fde:	4718      	bx	r3
   13fe0:	4630      	mov	r0, r6
}
   13fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   13fe6:	4718      	bx	r3
   13fe8:	4620      	mov	r0, r4
}
   13fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   13fee:	4718      	bx	r3
   13ff0:	20000d9c 	.word	0x20000d9c
   13ff4:	00013edd 	.word	0x00013edd

00013ff8 <Os::ConditionVariable::ConditionVariable()>:
ConditionVariable::ConditionVariable() : m_delegate(*ConditionVariableInterface::getDelegate(m_handle_storage)) {}
   13ff8:	b510      	push	{r4, lr}
   13ffa:	4a06      	ldr	r2, [pc, #24]	; (14014 <Os::ConditionVariable::ConditionVariable()+0x1c>)
   13ffc:	4604      	mov	r4, r0
   13ffe:	2300      	movs	r3, #0
   14000:	3008      	adds	r0, #8
   14002:	e9c4 2300 	strd	r2, r3, [r4]
   14006:	f7ec f8b9 	bl	17c <Os::ConditionVariableInterface::getDelegate(unsigned char (&) [56])>
   1400a:	4603      	mov	r3, r0
   1400c:	4620      	mov	r0, r4
   1400e:	6423      	str	r3, [r4, #64]	; 0x40
   14010:	bd10      	pop	{r4, pc}
   14012:	bf00      	nop
   14014:	200034b8 	.word	0x200034b8

00014018 <Os::Task::isCooperative()>:
void Task::resume() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
    this->m_delegate.resume();
}

bool Task::isCooperative() {
   14018:	b510      	push	{r4, lr}
   1401a:	4604      	mov	r4, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1401c:	3080      	adds	r0, #128	; 0x80
   1401e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14022:	4283      	cmp	r3, r0
   14024:	d005      	beq.n	14032 <Os::Task::isCooperative()+0x1a>
   14026:	21a5      	movs	r1, #165	; 0xa5
   14028:	4804      	ldr	r0, [pc, #16]	; (1403c <Os::Task::isCooperative()+0x24>)
   1402a:	f7ed faef 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.isCooperative();
   1402e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   14032:	6803      	ldr	r3, [r0, #0]
}
   14034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_delegate.isCooperative();
   14038:	69db      	ldr	r3, [r3, #28]
   1403a:	4718      	bx	r3
   1403c:	20000dbc 	.word	0x20000dbc

00014040 <Os::Task::suspend(Os::TaskInterface::SuspensionType)>:
void Task::suspend(Task::SuspensionType suspensionType) {
   14040:	b530      	push	{r4, r5, lr}
   14042:	4604      	mov	r4, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14044:	3080      	adds	r0, #128	; 0x80
void Task::suspend(Task::SuspensionType suspensionType) {
   14046:	b083      	sub	sp, #12
   14048:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1404a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1404e:	4283      	cmp	r3, r0
   14050:	d005      	beq.n	1405e <Os::Task::suspend(Os::TaskInterface::SuspensionType)+0x1e>
   14052:	2198      	movs	r1, #152	; 0x98
   14054:	480c      	ldr	r0, [pc, #48]	; (14088 <Os::Task::suspend(Os::TaskInterface::SuspensionType)+0x48>)
   14056:	f7ed fad9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.suspend(suspensionType);
   1405a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1405e:	6803      	ldr	r3, [r0, #0]
   14060:	4629      	mov	r1, r5
   14062:	691b      	ldr	r3, [r3, #16]
   14064:	4798      	blx	r3
    this->m_lock.lock();
   14066:	f104 0010 	add.w	r0, r4, #16
   1406a:	9001      	str	r0, [sp, #4]
   1406c:	f7ff fc04 	bl	13878 <Os::Mutex::lock()>
    this->m_state = (suspensionType == Task::SuspensionType::INTENTIONAL) ? State::SUSPENDED_INTENTIONALLY : State::SUSPENDED_UNINTENTIONALLY;
   14070:	2d00      	cmp	r5, #0

    Status take() override;            //!<  lock the mutex and get return status
    Status release() override;         //!<  unlock the mutex and get return status
    void lock();                       //!<  lock the mutex and assert success
    void unLock();                     //!<  unlock the mutex and assert success
    void unlock() { this->unLock(); }  //!<  alias for unLock to meet BasicLockable requirements
   14072:	9801      	ldr	r0, [sp, #4]
   14074:	bf0c      	ite	eq
   14076:	2303      	moveq	r3, #3
   14078:	2304      	movne	r3, #4
   1407a:	7323      	strb	r3, [r4, #12]
}
   1407c:	b003      	add	sp, #12
   1407e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14082:	f7ff bc4d 	b.w	13920 <Os::Mutex::unLock()>
   14086:	bf00      	nop
   14088:	20000dbc 	.word	0x20000dbc

0001408c <Os::Task::join()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1408c:	f100 0380 	add.w	r3, r0, #128	; 0x80
   14090:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
   14094:	429a      	cmp	r2, r3
Task::Status Task::join() {
   14096:	b570      	push	{r4, r5, r6, lr}
   14098:	4604      	mov	r4, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1409a:	d003      	beq.n	140a4 <Os::Task::join()+0x18>
   1409c:	2187      	movs	r1, #135	; 0x87
   1409e:	4812      	ldr	r0, [pc, #72]	; (140e8 <Os::Task::join()+0x5c>)
   140a0:	f7ed fab4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_lock.lock();
   140a4:	f104 0510 	add.w	r5, r4, #16
   140a8:	4628      	mov	r0, r5
   140aa:	f7ff fbe5 	bl	13878 <Os::Mutex::lock()>
    state = this->m_state;
   140ae:	7b26      	ldrb	r6, [r4, #12]
   140b0:	4628      	mov	r0, r5
    if (state == Task::RUNNING || state == STARTING) {
   140b2:	3e01      	subs	r6, #1
   140b4:	f7ff fc34 	bl	13920 <Os::Mutex::unLock()>
   140b8:	2e01      	cmp	r6, #1
   140ba:	d812      	bhi.n	140e2 <Os::Task::join()+0x56>
        status = this->m_delegate.join();
   140bc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   140c0:	6803      	ldr	r3, [r0, #0]
   140c2:	68db      	ldr	r3, [r3, #12]
   140c4:	4798      	blx	r3
   140c6:	4606      	mov	r6, r0
        this->m_lock.lock();
   140c8:	4628      	mov	r0, r5
   140ca:	f7ff fbd5 	bl	13878 <Os::Mutex::lock()>
            this->m_state = Task::State::EXITED;
   140ce:	2e00      	cmp	r6, #0
   140d0:	4628      	mov	r0, r5
   140d2:	bf14      	ite	ne
   140d4:	2306      	movne	r3, #6
   140d6:	2305      	moveq	r3, #5
   140d8:	7323      	strb	r3, [r4, #12]
   140da:	f7ff fc21 	bl	13920 <Os::Mutex::unLock()>
}
   140de:	4630      	mov	r0, r6
   140e0:	bd70      	pop	{r4, r5, r6, pc}
    Task::Status status = Task::Status::INVALID_STATE;
   140e2:	260b      	movs	r6, #11
}
   140e4:	4630      	mov	r0, r6
   140e6:	bd70      	pop	{r4, r5, r6, pc}
   140e8:	20000dbc 	.word	0x20000dbc

000140ec <Os::Task::start(Os::TaskInterface::Arguments const&)>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   140ec:	f100 0380 	add.w	r3, r0, #128	; 0x80
   140f0:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
   140f4:	429a      	cmp	r2, r3
Task::Status Task::start(const Task::Arguments& arguments) {
   140f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   140f8:	4604      	mov	r4, r0
   140fa:	b08b      	sub	sp, #44	; 0x2c
   140fc:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   140fe:	d003      	beq.n	14108 <Os::Task::start(Os::TaskInterface::Arguments const&)+0x1c>
   14100:	215f      	movs	r1, #95	; 0x5f
   14102:	482c      	ldr	r0, [pc, #176]	; (141b4 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xc8>)
   14104:	f7ed fa82 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(arguments.m_routine != nullptr);
   14108:	68ab      	ldr	r3, [r5, #8]
   1410a:	2b00      	cmp	r3, #0
   1410c:	d04d      	beq.n	141aa <Os::Task::start(Os::TaskInterface::Arguments const&)+0xbe>
    this->m_state = State::STARTING;
   1410e:	2701      	movs	r7, #1
        (void)StringBase::operator=(src);
   14110:	4629      	mov	r1, r5
   14112:	1d20      	adds	r0, r4, #4
    explicit TaskString(const TaskString& src) : StringBase() { *this = src; }
   14114:	4e28      	ldr	r6, [pc, #160]	; (141b8 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xcc>)
        (void)StringBase::operator=(src);
   14116:	f7ed f8c7 	bl	12a8 <Fw::StringBase::operator=(Fw::StringBase const&)>
    explicit TaskString(const TaskString& src) : StringBase() { *this = src; }
   1411a:	a802      	add	r0, sp, #8
   1411c:	7327      	strb	r7, [r4, #12]
   1411e:	f7ed f87f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   14122:	4629      	mov	r1, r5
   14124:	a802      	add	r0, sp, #8
    explicit TaskString(const TaskString& src) : StringBase() { *this = src; }
   14126:	9602      	str	r6, [sp, #8]
        (void)StringBase::operator=(src);
   14128:	f7ed f8be 	bl	12a8 <Fw::StringBase::operator=(Fw::StringBase const&)>
            };

            //! Prototype for task routine started in task context
            typedef void (*taskRoutine)(void* ptr);

            class Arguments {
   1412c:	692b      	ldr	r3, [r5, #16]
   1412e:	68aa      	ldr	r2, [r5, #8]
    Task::Status status = this->m_delegate.start(wrapped_arguments);
   14130:	a902      	add	r1, sp, #8
   14132:	9306      	str	r3, [sp, #24]
   14134:	696b      	ldr	r3, [r5, #20]
   14136:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1413a:	9307      	str	r3, [sp, #28]
   1413c:	69ab      	ldr	r3, [r5, #24]
   1413e:	9308      	str	r3, [sp, #32]
   14140:	69eb      	ldr	r3, [r5, #28]
    this->m_wrapper.m_user_function = arguments.m_routine;
   14142:	66e2      	str	r2, [r4, #108]	; 0x6c
   14144:	9309      	str	r3, [sp, #36]	; 0x24
    this->m_wrapper.m_user_argument = arguments.m_routine_argument;
   14146:	68eb      	ldr	r3, [r5, #12]
   14148:	6723      	str	r3, [r4, #112]	; 0x70
    wrapped_arguments.m_routine = Task::TaskRoutineWrapper::run;
   1414a:	4b1c      	ldr	r3, [pc, #112]	; (141bc <Os::Task::start(Os::TaskInterface::Arguments const&)+0xd0>)
   1414c:	9304      	str	r3, [sp, #16]
    wrapped_arguments.m_routine_argument = &this->m_wrapper;
   1414e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   14152:	9305      	str	r3, [sp, #20]
    Task::Status status = this->m_delegate.start(wrapped_arguments);
   14154:	6803      	ldr	r3, [r0, #0]
   14156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14158:	4798      	blx	r3
    if (status == Task::Status::OP_OK) {
   1415a:	4605      	mov	r5, r0
   1415c:	b130      	cbz	r0, 1416c <Os::Task::start(Os::TaskInterface::Arguments const&)+0x80>
    ~TaskString() {}
   1415e:	a802      	add	r0, sp, #8
   14160:	9602      	str	r6, [sp, #8]
   14162:	f7ed f867 	bl	1234 <Fw::StringBase::~StringBase()>
}
   14166:	4628      	mov	r0, r5
   14168:	b00b      	add	sp, #44	; 0x2c
   1416a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Task::m_lock.lock();
   1416c:	f104 0010 	add.w	r0, r4, #16
   14170:	9001      	str	r0, [sp, #4]
   14172:	f7ff fb81 	bl	13878 <Os::Mutex::lock()>
        this->m_priority = wrapped_arguments.m_priority;
   14176:	9b06      	ldr	r3, [sp, #24]
   14178:	9801      	ldr	r0, [sp, #4]
   1417a:	6763      	str	r3, [r4, #116]	; 0x74
   1417c:	f7ff fbd0 	bl	13920 <Os::Mutex::unLock()>
        Task::s_taskMutex.lock();
   14180:	480f      	ldr	r0, [pc, #60]	; (141c0 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xd4>)
   14182:	f7ff fb79 	bl	13878 <Os::Mutex::lock()>
        Task::s_numTasks++;
   14186:	4a0f      	ldr	r2, [pc, #60]	; (141c4 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xd8>)
   14188:	480d      	ldr	r0, [pc, #52]	; (141c0 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xd4>)
   1418a:	6813      	ldr	r3, [r2, #0]
   1418c:	443b      	add	r3, r7
   1418e:	6013      	str	r3, [r2, #0]
   14190:	f7ff fbc6 	bl	13920 <Os::Mutex::unLock()>
        if (Task::s_taskRegistry) {
   14194:	4b0c      	ldr	r3, [pc, #48]	; (141c8 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xdc>)
   14196:	6818      	ldr	r0, [r3, #0]
   14198:	2800      	cmp	r0, #0
   1419a:	d0e0      	beq.n	1415e <Os::Task::start(Os::TaskInterface::Arguments const&)+0x72>
            Task::s_taskRegistry->addTask(this);
   1419c:	6803      	ldr	r3, [r0, #0]
   1419e:	4621      	mov	r1, r4
   141a0:	689b      	ldr	r3, [r3, #8]
   141a2:	4798      	blx	r3
            this->m_registered = true;
   141a4:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
   141a8:	e7d9      	b.n	1415e <Os::Task::start(Os::TaskInterface::Arguments const&)+0x72>
    FW_ASSERT(arguments.m_routine != nullptr);
   141aa:	2160      	movs	r1, #96	; 0x60
   141ac:	4801      	ldr	r0, [pc, #4]	; (141b4 <Os::Task::start(Os::TaskInterface::Arguments const&)+0xc8>)
   141ae:	f7ed fa2d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   141b2:	e7ac      	b.n	1410e <Os::Task::start(Os::TaskInterface::Arguments const&)+0x22>
   141b4:	20000dbc 	.word	0x20000dbc
   141b8:	20003440 	.word	0x20003440
   141bc:	00014279 	.word	0x00014279
   141c0:	2000b830 	.word	0x2000b830
   141c4:	2000c9c4 	.word	0x2000c9c4
   141c8:	2000c9c8 	.word	0x2000c9c8

000141cc <Os::Task::~Task()>:
    if ((Task::s_taskRegistry != nullptr) && this->m_registered) {
   141cc:	4a0f      	ldr	r2, [pc, #60]	; (1420c <Os::Task::~Task()+0x40>)
Task::~Task() {
   141ce:	4b10      	ldr	r3, [pc, #64]	; (14210 <Os::Task::~Task()+0x44>)
   141d0:	b510      	push	{r4, lr}
   141d2:	4604      	mov	r4, r0
    if ((Task::s_taskRegistry != nullptr) && this->m_registered) {
   141d4:	6810      	ldr	r0, [r2, #0]
Task::~Task() {
   141d6:	6023      	str	r3, [r4, #0]
    if ((Task::s_taskRegistry != nullptr) && this->m_registered) {
   141d8:	b130      	cbz	r0, 141e8 <Os::Task::~Task()+0x1c>
   141da:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   141de:	b11b      	cbz	r3, 141e8 <Os::Task::~Task()+0x1c>
        Task::s_taskRegistry->removeTask(this);
   141e0:	6803      	ldr	r3, [r0, #0]
   141e2:	4621      	mov	r1, r4
   141e4:	68db      	ldr	r3, [r3, #12]
   141e6:	4798      	blx	r3
    m_delegate.~TaskInterface();
   141e8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   141ec:	6803      	ldr	r3, [r0, #0]
   141ee:	681b      	ldr	r3, [r3, #0]
   141f0:	4798      	blx	r3
Task::~Task() {
   141f2:	f104 0010 	add.w	r0, r4, #16
   141f6:	f7ff f8d9 	bl	133ac <Os::Mutex::~Mutex()>
   141fa:	4620      	mov	r0, r4
   141fc:	4b05      	ldr	r3, [pc, #20]	; (14214 <Os::Task::~Task()+0x48>)
   141fe:	f840 3f04 	str.w	r3, [r0, #4]!
   14202:	f7ed f817 	bl	1234 <Fw::StringBase::~StringBase()>
}
   14206:	4620      	mov	r0, r4
   14208:	bd10      	pop	{r4, pc}
   1420a:	bf00      	nop
   1420c:	2000c9c8 	.word	0x2000c9c8
   14210:	2000352c 	.word	0x2000352c
   14214:	20003440 	.word	0x20003440

00014218 <Os::Task::~Task()>:
Task::~Task() {
   14218:	b510      	push	{r4, lr}
   1421a:	4604      	mov	r4, r0
}
   1421c:	f7ff ffd6 	bl	141cc <Os::Task::~Task()>
   14220:	21a0      	movs	r1, #160	; 0xa0
   14222:	4620      	mov	r0, r4
   14224:	f004 fd54 	bl	18cd0 <operator delete(void*, unsigned int)>
   14228:	4620      	mov	r0, r4
   1422a:	bd10      	pop	{r4, pc}

0001422c <Os::Task::_delay(Fw::TimeInterval)>:
    FwSizeType num_tasks = Task::s_numTasks;
    Task::s_taskMutex.unlock();
    return num_tasks;
}

Os::TaskInterface::Status Task::_delay(Fw::TimeInterval interval) {
   1422c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1422e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   14232:	f100 0580 	add.w	r5, r0, #128	; 0x80
Os::TaskInterface::Status Task::_delay(Fw::TimeInterval interval) {
   14236:	b084      	sub	sp, #16
   14238:	460e      	mov	r6, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1423a:	42ab      	cmp	r3, r5
   1423c:	d006      	beq.n	1424c <Os::Task::_delay(Fw::TimeInterval)+0x20>
   1423e:	4604      	mov	r4, r0
   14240:	21bb      	movs	r1, #187	; 0xbb
   14242:	480b      	ldr	r0, [pc, #44]	; (14270 <Os::Task::_delay(Fw::TimeInterval)+0x44>)
   14244:	f7ed f9e2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate._delay(interval);
   14248:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   1424c:	682b      	ldr	r3, [r5, #0]
   1424e:	4631      	mov	r1, r6
   14250:	a801      	add	r0, sp, #4
   14252:	699c      	ldr	r4, [r3, #24]
   14254:	f003 fbe4 	bl	17a20 <Fw::TimeInterval::TimeInterval(Fw::TimeInterval const&)>
   14258:	a901      	add	r1, sp, #4
   1425a:	4628      	mov	r0, r5
   1425c:	47a0      	blx	r4
            enum {
                SERIALIZED_SIZE = sizeof(U32) * 2
            };

            TimeInterval() = default; // !< Default constructor
            ~TimeInterval() = default; // !< Default destructor
   1425e:	4b05      	ldr	r3, [pc, #20]	; (14274 <Os::Task::_delay(Fw::TimeInterval)+0x48>)
   14260:	4604      	mov	r4, r0
   14262:	a801      	add	r0, sp, #4
   14264:	9301      	str	r3, [sp, #4]
   14266:	f7ec f969 	bl	53c <Fw::Serializable::~Serializable()>
}
   1426a:	4620      	mov	r0, r4
   1426c:	b004      	add	sp, #16
   1426e:	bd70      	pop	{r4, r5, r6, pc}
   14270:	20000dbc 	.word	0x20000dbc
   14274:	20002d60 	.word	0x20002d60

00014278 <Os::Task::TaskRoutineWrapper::run(void*)>:
void Task::TaskRoutineWrapper::run(void* wrapper_pointer) {
   14278:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(wrapper_pointer != nullptr);
   1427a:	4604      	mov	r4, r0
   1427c:	2800      	cmp	r0, #0
   1427e:	d04e      	beq.n	1431e <Os::Task::TaskRoutineWrapper::run(void*)+0xa6>
    FW_ASSERT(wrapper.m_user_function != nullptr);
   14280:	6863      	ldr	r3, [r4, #4]
   14282:	2b00      	cmp	r3, #0
   14284:	d052      	beq.n	1432c <Os::Task::TaskRoutineWrapper::run(void*)+0xb4>
    wrapper.m_task.m_lock.lock();
   14286:	6820      	ldr	r0, [r4, #0]
   14288:	3010      	adds	r0, #16
   1428a:	f7ff faf5 	bl	13878 <Os::Mutex::lock()>
    Task::State state = wrapper.m_task.m_state;
   1428e:	6820      	ldr	r0, [r4, #0]
   14290:	7b05      	ldrb	r5, [r0, #12]
   14292:	3010      	adds	r0, #16
   14294:	f7ff fb44 	bl	13920 <Os::Mutex::unLock()>
    FW_ASSERT(state != Task::State::NOT_STARTED);
   14298:	2d00      	cmp	r5, #0
   1429a:	d037      	beq.n	1430c <Os::Task::TaskRoutineWrapper::run(void*)+0x94>
    if (state == Task::State::STARTING) {
   1429c:	2d01      	cmp	r5, #1
   1429e:	d004      	beq.n	142aa <Os::Task::TaskRoutineWrapper::run(void*)+0x32>
    wrapper.m_user_function(wrapper.m_user_argument);
   142a0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
}
   142a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wrapper.m_user_function(wrapper.m_user_argument);
   142a8:	4718      	bx	r3
        wrapper.m_task.m_lock.lock();
   142aa:	6820      	ldr	r0, [r4, #0]
   142ac:	3010      	adds	r0, #16
   142ae:	f7ff fae3 	bl	13878 <Os::Mutex::lock()>
        wrapper.m_task.m_state = Task::State::RUNNING;
   142b2:	6823      	ldr	r3, [r4, #0]
   142b4:	2202      	movs	r2, #2
   142b6:	f103 0010 	add.w	r0, r3, #16
   142ba:	731a      	strb	r2, [r3, #12]
   142bc:	f7ff fb30 	bl	13920 <Os::Mutex::unLock()>
        wrapper.m_task.onStart();
   142c0:	6826      	ldr	r6, [r4, #0]
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   142c2:	f106 0580 	add.w	r5, r6, #128	; 0x80
   142c6:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   142ca:	42ab      	cmp	r3, r5
   142cc:	d005      	beq.n	142da <Os::Task::TaskRoutineWrapper::run(void*)+0x62>
   142ce:	217e      	movs	r1, #126	; 0x7e
   142d0:	481a      	ldr	r0, [pc, #104]	; (1433c <Os::Task::TaskRoutineWrapper::run(void*)+0xc4>)
   142d2:	f7ed f99b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   142d6:	f8d6 5098 	ldr.w	r5, [r6, #152]	; 0x98
   142da:	682b      	ldr	r3, [r5, #0]
   142dc:	4a18      	ldr	r2, [pc, #96]	; (14340 <Os::Task::TaskRoutineWrapper::run(void*)+0xc8>)
   142de:	689b      	ldr	r3, [r3, #8]
   142e0:	4293      	cmp	r3, r2
   142e2:	d128      	bne.n	14336 <Os::Task::TaskRoutineWrapper::run(void*)+0xbe>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   142e4:	f105 0080 	add.w	r0, r5, #128	; 0x80
   142e8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   142ec:	4283      	cmp	r3, r0
   142ee:	d005      	beq.n	142fc <Os::Task::TaskRoutineWrapper::run(void*)+0x84>
   142f0:	217e      	movs	r1, #126	; 0x7e
   142f2:	4812      	ldr	r0, [pc, #72]	; (1433c <Os::Task::TaskRoutineWrapper::run(void*)+0xc4>)
   142f4:	f7ed f98a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   142f8:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   142fc:	6803      	ldr	r3, [r0, #0]
   142fe:	689b      	ldr	r3, [r3, #8]
   14300:	4798      	blx	r3
    wrapper.m_user_function(wrapper.m_user_argument);
   14302:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
}
   14306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wrapper.m_user_function(wrapper.m_user_argument);
   1430a:	4718      	bx	r3
    FW_ASSERT(state != Task::State::NOT_STARTED);
   1430c:	2123      	movs	r1, #35	; 0x23
   1430e:	480b      	ldr	r0, [pc, #44]	; (1433c <Os::Task::TaskRoutineWrapper::run(void*)+0xc4>)
   14310:	f7ed f97c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    wrapper.m_user_function(wrapper.m_user_argument);
   14314:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
}
   14318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wrapper.m_user_function(wrapper.m_user_argument);
   1431c:	4718      	bx	r3
    FW_ASSERT(wrapper_pointer != nullptr);
   1431e:	211c      	movs	r1, #28
   14320:	4806      	ldr	r0, [pc, #24]	; (1433c <Os::Task::TaskRoutineWrapper::run(void*)+0xc4>)
   14322:	f7ed f973 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(wrapper.m_user_function != nullptr);
   14326:	6863      	ldr	r3, [r4, #4]
   14328:	2b00      	cmp	r3, #0
   1432a:	d1ac      	bne.n	14286 <Os::Task::TaskRoutineWrapper::run(void*)+0xe>
   1432c:	211e      	movs	r1, #30
   1432e:	4803      	ldr	r0, [pc, #12]	; (1433c <Os::Task::TaskRoutineWrapper::run(void*)+0xc4>)
   14330:	f7ed f96c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   14334:	e7a7      	b.n	14286 <Os::Task::TaskRoutineWrapper::run(void*)+0xe>
    this->m_delegate.onStart();
   14336:	4628      	mov	r0, r5
   14338:	4798      	blx	r3
   1433a:	e7b1      	b.n	142a0 <Os::Task::TaskRoutineWrapper::run(void*)+0x28>
   1433c:	20000dbc 	.word	0x20000dbc
   14340:	00014345 	.word	0x00014345

00014344 <Os::Task::onStart()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14344:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
void Task::onStart() {
   14348:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1434a:	f100 0480 	add.w	r4, r0, #128	; 0x80
   1434e:	42a3      	cmp	r3, r4
   14350:	d006      	beq.n	14360 <Os::Task::onStart()+0x1c>
   14352:	4605      	mov	r5, r0
   14354:	217e      	movs	r1, #126	; 0x7e
   14356:	484a      	ldr	r0, [pc, #296]	; (14480 <Os::Task::onStart()+0x13c>)
   14358:	f7ed f958 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   1435c:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
   14360:	6823      	ldr	r3, [r4, #0]
   14362:	4d48      	ldr	r5, [pc, #288]	; (14484 <Os::Task::onStart()+0x140>)
   14364:	689b      	ldr	r3, [r3, #8]
   14366:	42ab      	cmp	r3, r5
   14368:	f040 8085 	bne.w	14476 <Os::Task::onStart()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1436c:	f104 0680 	add.w	r6, r4, #128	; 0x80
   14370:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14374:	42b3      	cmp	r3, r6
   14376:	d005      	beq.n	14384 <Os::Task::onStart()+0x40>
   14378:	217e      	movs	r1, #126	; 0x7e
   1437a:	4841      	ldr	r0, [pc, #260]	; (14480 <Os::Task::onStart()+0x13c>)
   1437c:	f7ed f946 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   14380:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   14384:	6833      	ldr	r3, [r6, #0]
   14386:	689b      	ldr	r3, [r3, #8]
   14388:	42ab      	cmp	r3, r5
   1438a:	d170      	bne.n	1446e <Os::Task::onStart()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1438c:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14390:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   14394:	42a3      	cmp	r3, r4
   14396:	d005      	beq.n	143a4 <Os::Task::onStart()+0x60>
   14398:	217e      	movs	r1, #126	; 0x7e
   1439a:	4839      	ldr	r0, [pc, #228]	; (14480 <Os::Task::onStart()+0x13c>)
   1439c:	f7ed f936 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   143a0:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   143a4:	6823      	ldr	r3, [r4, #0]
   143a6:	689b      	ldr	r3, [r3, #8]
   143a8:	42ab      	cmp	r3, r5
   143aa:	d164      	bne.n	14476 <Os::Task::onStart()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   143ac:	f104 0680 	add.w	r6, r4, #128	; 0x80
   143b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   143b4:	42b3      	cmp	r3, r6
   143b6:	d005      	beq.n	143c4 <Os::Task::onStart()+0x80>
   143b8:	217e      	movs	r1, #126	; 0x7e
   143ba:	4831      	ldr	r0, [pc, #196]	; (14480 <Os::Task::onStart()+0x13c>)
   143bc:	f7ed f926 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   143c0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   143c4:	6833      	ldr	r3, [r6, #0]
   143c6:	689b      	ldr	r3, [r3, #8]
   143c8:	42ab      	cmp	r3, r5
   143ca:	d150      	bne.n	1446e <Os::Task::onStart()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   143cc:	f106 0480 	add.w	r4, r6, #128	; 0x80
   143d0:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   143d4:	42a3      	cmp	r3, r4
   143d6:	d005      	beq.n	143e4 <Os::Task::onStart()+0xa0>
   143d8:	217e      	movs	r1, #126	; 0x7e
   143da:	4829      	ldr	r0, [pc, #164]	; (14480 <Os::Task::onStart()+0x13c>)
   143dc:	f7ed f916 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   143e0:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   143e4:	6823      	ldr	r3, [r4, #0]
   143e6:	689b      	ldr	r3, [r3, #8]
   143e8:	42ab      	cmp	r3, r5
   143ea:	d144      	bne.n	14476 <Os::Task::onStart()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   143ec:	f104 0680 	add.w	r6, r4, #128	; 0x80
   143f0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   143f4:	42b3      	cmp	r3, r6
   143f6:	d005      	beq.n	14404 <Os::Task::onStart()+0xc0>
   143f8:	217e      	movs	r1, #126	; 0x7e
   143fa:	4821      	ldr	r0, [pc, #132]	; (14480 <Os::Task::onStart()+0x13c>)
   143fc:	f7ed f906 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   14400:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   14404:	6833      	ldr	r3, [r6, #0]
   14406:	689b      	ldr	r3, [r3, #8]
   14408:	42ab      	cmp	r3, r5
   1440a:	d130      	bne.n	1446e <Os::Task::onStart()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1440c:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14410:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   14414:	42a3      	cmp	r3, r4
   14416:	d005      	beq.n	14424 <Os::Task::onStart()+0xe0>
   14418:	217e      	movs	r1, #126	; 0x7e
   1441a:	4819      	ldr	r0, [pc, #100]	; (14480 <Os::Task::onStart()+0x13c>)
   1441c:	f7ed f8f6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   14420:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   14424:	6823      	ldr	r3, [r4, #0]
   14426:	689b      	ldr	r3, [r3, #8]
   14428:	42ab      	cmp	r3, r5
   1442a:	d124      	bne.n	14476 <Os::Task::onStart()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1442c:	f104 0680 	add.w	r6, r4, #128	; 0x80
   14430:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14434:	42b3      	cmp	r3, r6
   14436:	d005      	beq.n	14444 <Os::Task::onStart()+0x100>
   14438:	217e      	movs	r1, #126	; 0x7e
   1443a:	4811      	ldr	r0, [pc, #68]	; (14480 <Os::Task::onStart()+0x13c>)
   1443c:	f7ed f8e6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   14440:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   14444:	6833      	ldr	r3, [r6, #0]
   14446:	689b      	ldr	r3, [r3, #8]
   14448:	42ab      	cmp	r3, r5
   1444a:	d110      	bne.n	1446e <Os::Task::onStart()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1444c:	f106 0080 	add.w	r0, r6, #128	; 0x80
   14450:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   14454:	4283      	cmp	r3, r0
   14456:	d005      	beq.n	14464 <Os::Task::onStart()+0x120>
   14458:	217e      	movs	r1, #126	; 0x7e
   1445a:	4809      	ldr	r0, [pc, #36]	; (14480 <Os::Task::onStart()+0x13c>)
   1445c:	f7ed f8d6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.onStart();
   14460:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
   14464:	6803      	ldr	r3, [r0, #0]
}
   14466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.onStart();
   1446a:	689b      	ldr	r3, [r3, #8]
   1446c:	4718      	bx	r3
   1446e:	4630      	mov	r0, r6
}
   14470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.onStart();
   14474:	4718      	bx	r3
   14476:	4620      	mov	r0, r4
}
   14478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.onStart();
   1447c:	4718      	bx	r3
   1447e:	bf00      	nop
   14480:	20000dbc 	.word	0x20000dbc
   14484:	00014345 	.word	0x00014345

00014488 <Os::Task::resume()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14488:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
void Task::resume() {
   1448c:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   1448e:	f100 0480 	add.w	r4, r0, #128	; 0x80
   14492:	42a3      	cmp	r3, r4
   14494:	d006      	beq.n	144a4 <Os::Task::resume()+0x1c>
   14496:	4605      	mov	r5, r0
   14498:	21a0      	movs	r1, #160	; 0xa0
   1449a:	484a      	ldr	r0, [pc, #296]	; (145c4 <Os::Task::resume()+0x13c>)
   1449c:	f7ed f8b6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   144a0:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
   144a4:	6823      	ldr	r3, [r4, #0]
   144a6:	4d48      	ldr	r5, [pc, #288]	; (145c8 <Os::Task::resume()+0x140>)
   144a8:	695b      	ldr	r3, [r3, #20]
   144aa:	42ab      	cmp	r3, r5
   144ac:	f040 8085 	bne.w	145ba <Os::Task::resume()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   144b0:	f104 0680 	add.w	r6, r4, #128	; 0x80
   144b4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   144b8:	42b3      	cmp	r3, r6
   144ba:	d005      	beq.n	144c8 <Os::Task::resume()+0x40>
   144bc:	21a0      	movs	r1, #160	; 0xa0
   144be:	4841      	ldr	r0, [pc, #260]	; (145c4 <Os::Task::resume()+0x13c>)
   144c0:	f7ed f8a4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   144c4:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   144c8:	6833      	ldr	r3, [r6, #0]
   144ca:	695b      	ldr	r3, [r3, #20]
   144cc:	42ab      	cmp	r3, r5
   144ce:	d170      	bne.n	145b2 <Os::Task::resume()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   144d0:	f106 0480 	add.w	r4, r6, #128	; 0x80
   144d4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   144d8:	42a3      	cmp	r3, r4
   144da:	d005      	beq.n	144e8 <Os::Task::resume()+0x60>
   144dc:	21a0      	movs	r1, #160	; 0xa0
   144de:	4839      	ldr	r0, [pc, #228]	; (145c4 <Os::Task::resume()+0x13c>)
   144e0:	f7ed f894 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   144e4:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   144e8:	6823      	ldr	r3, [r4, #0]
   144ea:	695b      	ldr	r3, [r3, #20]
   144ec:	42ab      	cmp	r3, r5
   144ee:	d164      	bne.n	145ba <Os::Task::resume()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   144f0:	f104 0680 	add.w	r6, r4, #128	; 0x80
   144f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   144f8:	42b3      	cmp	r3, r6
   144fa:	d005      	beq.n	14508 <Os::Task::resume()+0x80>
   144fc:	21a0      	movs	r1, #160	; 0xa0
   144fe:	4831      	ldr	r0, [pc, #196]	; (145c4 <Os::Task::resume()+0x13c>)
   14500:	f7ed f884 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   14504:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   14508:	6833      	ldr	r3, [r6, #0]
   1450a:	695b      	ldr	r3, [r3, #20]
   1450c:	42ab      	cmp	r3, r5
   1450e:	d150      	bne.n	145b2 <Os::Task::resume()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14510:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14514:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   14518:	42a3      	cmp	r3, r4
   1451a:	d005      	beq.n	14528 <Os::Task::resume()+0xa0>
   1451c:	21a0      	movs	r1, #160	; 0xa0
   1451e:	4829      	ldr	r0, [pc, #164]	; (145c4 <Os::Task::resume()+0x13c>)
   14520:	f7ed f874 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   14524:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   14528:	6823      	ldr	r3, [r4, #0]
   1452a:	695b      	ldr	r3, [r3, #20]
   1452c:	42ab      	cmp	r3, r5
   1452e:	d144      	bne.n	145ba <Os::Task::resume()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14530:	f104 0680 	add.w	r6, r4, #128	; 0x80
   14534:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14538:	42b3      	cmp	r3, r6
   1453a:	d005      	beq.n	14548 <Os::Task::resume()+0xc0>
   1453c:	21a0      	movs	r1, #160	; 0xa0
   1453e:	4821      	ldr	r0, [pc, #132]	; (145c4 <Os::Task::resume()+0x13c>)
   14540:	f7ed f864 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   14544:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   14548:	6833      	ldr	r3, [r6, #0]
   1454a:	695b      	ldr	r3, [r3, #20]
   1454c:	42ab      	cmp	r3, r5
   1454e:	d130      	bne.n	145b2 <Os::Task::resume()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14550:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14554:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   14558:	42a3      	cmp	r3, r4
   1455a:	d005      	beq.n	14568 <Os::Task::resume()+0xe0>
   1455c:	21a0      	movs	r1, #160	; 0xa0
   1455e:	4819      	ldr	r0, [pc, #100]	; (145c4 <Os::Task::resume()+0x13c>)
   14560:	f7ed f854 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   14564:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   14568:	6823      	ldr	r3, [r4, #0]
   1456a:	695b      	ldr	r3, [r3, #20]
   1456c:	42ab      	cmp	r3, r5
   1456e:	d124      	bne.n	145ba <Os::Task::resume()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14570:	f104 0680 	add.w	r6, r4, #128	; 0x80
   14574:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14578:	42b3      	cmp	r3, r6
   1457a:	d005      	beq.n	14588 <Os::Task::resume()+0x100>
   1457c:	21a0      	movs	r1, #160	; 0xa0
   1457e:	4811      	ldr	r0, [pc, #68]	; (145c4 <Os::Task::resume()+0x13c>)
   14580:	f7ed f844 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   14584:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   14588:	6833      	ldr	r3, [r6, #0]
   1458a:	695b      	ldr	r3, [r3, #20]
   1458c:	42ab      	cmp	r3, r5
   1458e:	d110      	bne.n	145b2 <Os::Task::resume()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14590:	f106 0080 	add.w	r0, r6, #128	; 0x80
   14594:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   14598:	4283      	cmp	r3, r0
   1459a:	d005      	beq.n	145a8 <Os::Task::resume()+0x120>
   1459c:	21a0      	movs	r1, #160	; 0xa0
   1459e:	4809      	ldr	r0, [pc, #36]	; (145c4 <Os::Task::resume()+0x13c>)
   145a0:	f7ed f834 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_delegate.resume();
   145a4:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
   145a8:	6803      	ldr	r3, [r0, #0]
}
   145aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.resume();
   145ae:	695b      	ldr	r3, [r3, #20]
   145b0:	4718      	bx	r3
   145b2:	4630      	mov	r0, r6
}
   145b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.resume();
   145b8:	4718      	bx	r3
   145ba:	4620      	mov	r0, r4
}
   145bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    this->m_delegate.resume();
   145c0:	4718      	bx	r3
   145c2:	bf00      	nop
   145c4:	20000dbc 	.word	0x20000dbc
   145c8:	00014489 	.word	0x00014489

000145cc <Os::Task::getHandle()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   145cc:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
TaskHandle* Task::getHandle() {
   145d0:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   145d2:	f100 0480 	add.w	r4, r0, #128	; 0x80
   145d6:	42a3      	cmp	r3, r4
   145d8:	d006      	beq.n	145e8 <Os::Task::getHandle()+0x1c>
   145da:	4605      	mov	r5, r0
   145dc:	21af      	movs	r1, #175	; 0xaf
   145de:	484a      	ldr	r0, [pc, #296]	; (14708 <Os::Task::getHandle()+0x13c>)
   145e0:	f7ed f814 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   145e4:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
   145e8:	6823      	ldr	r3, [r4, #0]
   145ea:	4d48      	ldr	r5, [pc, #288]	; (1470c <Os::Task::getHandle()+0x140>)
   145ec:	6a1b      	ldr	r3, [r3, #32]
   145ee:	42ab      	cmp	r3, r5
   145f0:	f040 8085 	bne.w	146fe <Os::Task::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   145f4:	f104 0680 	add.w	r6, r4, #128	; 0x80
   145f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   145fc:	42b3      	cmp	r3, r6
   145fe:	d005      	beq.n	1460c <Os::Task::getHandle()+0x40>
   14600:	21af      	movs	r1, #175	; 0xaf
   14602:	4841      	ldr	r0, [pc, #260]	; (14708 <Os::Task::getHandle()+0x13c>)
   14604:	f7ed f802 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14608:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   1460c:	6833      	ldr	r3, [r6, #0]
   1460e:	6a1b      	ldr	r3, [r3, #32]
   14610:	42ab      	cmp	r3, r5
   14612:	d170      	bne.n	146f6 <Os::Task::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14614:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14618:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   1461c:	42a3      	cmp	r3, r4
   1461e:	d005      	beq.n	1462c <Os::Task::getHandle()+0x60>
   14620:	21af      	movs	r1, #175	; 0xaf
   14622:	4839      	ldr	r0, [pc, #228]	; (14708 <Os::Task::getHandle()+0x13c>)
   14624:	f7ec fff2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14628:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   1462c:	6823      	ldr	r3, [r4, #0]
   1462e:	6a1b      	ldr	r3, [r3, #32]
   14630:	42ab      	cmp	r3, r5
   14632:	d164      	bne.n	146fe <Os::Task::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14634:	f104 0680 	add.w	r6, r4, #128	; 0x80
   14638:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1463c:	42b3      	cmp	r3, r6
   1463e:	d005      	beq.n	1464c <Os::Task::getHandle()+0x80>
   14640:	21af      	movs	r1, #175	; 0xaf
   14642:	4831      	ldr	r0, [pc, #196]	; (14708 <Os::Task::getHandle()+0x13c>)
   14644:	f7ec ffe2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14648:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   1464c:	6833      	ldr	r3, [r6, #0]
   1464e:	6a1b      	ldr	r3, [r3, #32]
   14650:	42ab      	cmp	r3, r5
   14652:	d150      	bne.n	146f6 <Os::Task::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14654:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14658:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   1465c:	42a3      	cmp	r3, r4
   1465e:	d005      	beq.n	1466c <Os::Task::getHandle()+0xa0>
   14660:	21af      	movs	r1, #175	; 0xaf
   14662:	4829      	ldr	r0, [pc, #164]	; (14708 <Os::Task::getHandle()+0x13c>)
   14664:	f7ec ffd2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14668:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   1466c:	6823      	ldr	r3, [r4, #0]
   1466e:	6a1b      	ldr	r3, [r3, #32]
   14670:	42ab      	cmp	r3, r5
   14672:	d144      	bne.n	146fe <Os::Task::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14674:	f104 0680 	add.w	r6, r4, #128	; 0x80
   14678:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1467c:	42b3      	cmp	r3, r6
   1467e:	d005      	beq.n	1468c <Os::Task::getHandle()+0xc0>
   14680:	21af      	movs	r1, #175	; 0xaf
   14682:	4821      	ldr	r0, [pc, #132]	; (14708 <Os::Task::getHandle()+0x13c>)
   14684:	f7ec ffc2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14688:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   1468c:	6833      	ldr	r3, [r6, #0]
   1468e:	6a1b      	ldr	r3, [r3, #32]
   14690:	42ab      	cmp	r3, r5
   14692:	d130      	bne.n	146f6 <Os::Task::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   14694:	f106 0480 	add.w	r4, r6, #128	; 0x80
   14698:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   1469c:	42a3      	cmp	r3, r4
   1469e:	d005      	beq.n	146ac <Os::Task::getHandle()+0xe0>
   146a0:	21af      	movs	r1, #175	; 0xaf
   146a2:	4819      	ldr	r0, [pc, #100]	; (14708 <Os::Task::getHandle()+0x13c>)
   146a4:	f7ec ffb2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   146a8:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
   146ac:	6823      	ldr	r3, [r4, #0]
   146ae:	6a1b      	ldr	r3, [r3, #32]
   146b0:	42ab      	cmp	r3, r5
   146b2:	d124      	bne.n	146fe <Os::Task::getHandle()+0x132>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   146b4:	f104 0680 	add.w	r6, r4, #128	; 0x80
   146b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   146bc:	42b3      	cmp	r3, r6
   146be:	d005      	beq.n	146cc <Os::Task::getHandle()+0x100>
   146c0:	21af      	movs	r1, #175	; 0xaf
   146c2:	4811      	ldr	r0, [pc, #68]	; (14708 <Os::Task::getHandle()+0x13c>)
   146c4:	f7ec ffa2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   146c8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   146cc:	6833      	ldr	r3, [r6, #0]
   146ce:	6a1b      	ldr	r3, [r3, #32]
   146d0:	42ab      	cmp	r3, r5
   146d2:	d110      	bne.n	146f6 <Os::Task::getHandle()+0x12a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<TaskInterface*>(&this->m_handle_storage[0]));
   146d4:	f106 0080 	add.w	r0, r6, #128	; 0x80
   146d8:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   146dc:	4283      	cmp	r3, r0
   146de:	d005      	beq.n	146ec <Os::Task::getHandle()+0x120>
   146e0:	21af      	movs	r1, #175	; 0xaf
   146e2:	4809      	ldr	r0, [pc, #36]	; (14708 <Os::Task::getHandle()+0x13c>)
   146e4:	f7ec ff92 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   146e8:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
   146ec:	6803      	ldr	r3, [r0, #0]
}
   146ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   146f2:	6a1b      	ldr	r3, [r3, #32]
   146f4:	4718      	bx	r3
   146f6:	4630      	mov	r0, r6
}
   146f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   146fc:	4718      	bx	r3
   146fe:	4620      	mov	r0, r4
}
   14700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   14704:	4718      	bx	r3
   14706:	bf00      	nop
   14708:	20000dbc 	.word	0x20000dbc
   1470c:	000145cd 	.word	0x000145cd

00014710 <Os::TaskInterface::Arguments::Arguments(Fw::StringBase const&, void (*)(void*), void*, unsigned long, unsigned long, unsigned long, unsigned long)>:
TaskInterface::Arguments::Arguments(const Fw::StringBase &name, const Os::TaskInterface::taskRoutine routine,
   14710:	b570      	push	{r4, r5, r6, lr}
   14712:	b082      	sub	sp, #8
   14714:	4604      	mov	r4, r0
   14716:	4615      	mov	r5, r2
   14718:	461e      	mov	r6, r3
   1471a:	9101      	str	r1, [sp, #4]
    explicit TaskString(const StringBase& src) : StringBase() { *this = src; }
   1471c:	f7ec fd80 	bl	1220 <Fw::StringBase::StringBase()>
   14720:	4b0d      	ldr	r3, [pc, #52]	; (14758 <Os::TaskInterface::Arguments::Arguments(Fw::StringBase const&, void (*)(void*), void*, unsigned long, unsigned long, unsigned long, unsigned long)+0x48>)
        (void)StringBase::operator=(src);
   14722:	4620      	mov	r0, r4
   14724:	9901      	ldr	r1, [sp, #4]
    explicit TaskString(const StringBase& src) : StringBase() { *this = src; }
   14726:	6023      	str	r3, [r4, #0]
        (void)StringBase::operator=(src);
   14728:	f7ec fdbe 	bl	12a8 <Fw::StringBase::operator=(Fw::StringBase const&)>
    m_priority(priority),
   1472c:	9b06      	ldr	r3, [sp, #24]
    m_routine_argument(routine_argument),
   1472e:	60e6      	str	r6, [r4, #12]
    m_priority(priority),
   14730:	6123      	str	r3, [r4, #16]
    m_stackSize(stackSize),
   14732:	9b07      	ldr	r3, [sp, #28]
    m_routine(routine),
   14734:	60a5      	str	r5, [r4, #8]
    m_stackSize(stackSize),
   14736:	6163      	str	r3, [r4, #20]
    m_cpuAffinity(cpuAffinity),
   14738:	9b08      	ldr	r3, [sp, #32]
   1473a:	61a3      	str	r3, [r4, #24]
    m_identifier(identifier)
   1473c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1473e:	61e3      	str	r3, [r4, #28]
    FW_ASSERT(routine != nullptr);
   14740:	b115      	cbz	r5, 14748 <Os::TaskInterface::Arguments::Arguments(Fw::StringBase const&, void (*)(void*), void*, unsigned long, unsigned long, unsigned long, unsigned long)+0x38>
}
   14742:	4620      	mov	r0, r4
   14744:	b002      	add	sp, #8
   14746:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(routine != nullptr);
   14748:	2116      	movs	r1, #22
   1474a:	4804      	ldr	r0, [pc, #16]	; (1475c <Os::TaskInterface::Arguments::Arguments(Fw::StringBase const&, void (*)(void*), void*, unsigned long, unsigned long, unsigned long, unsigned long)+0x4c>)
   1474c:	f7ec ff5e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
}
   14750:	4620      	mov	r0, r4
   14752:	b002      	add	sp, #8
   14754:	bd70      	pop	{r4, r5, r6, pc}
   14756:	bf00      	nop
   14758:	20003440 	.word	0x20003440
   1475c:	20000dbc 	.word	0x20000dbc

00014760 <Os::Task::Task()>:
Task::Task() : m_wrapper(*this), m_handle_storage(), m_delegate(*TaskInterface::getDelegate(m_handle_storage)) {}
   14760:	b570      	push	{r4, r5, r6, lr}
   14762:	4b17      	ldr	r3, [pc, #92]	; (147c0 <Os::Task::Task()+0x60>)
   14764:	4606      	mov	r6, r0
   14766:	4604      	mov	r4, r0
   14768:	2500      	movs	r5, #0
   1476a:	f846 3b04 	str.w	r3, [r6], #4
    TaskString() : StringBase() { *this = ""; }
   1476e:	4630      	mov	r0, r6
   14770:	f7ec fd56 	bl	1220 <Fw::StringBase::StringBase()>
   14774:	4b13      	ldr	r3, [pc, #76]	; (147c4 <Os::Task::Task()+0x64>)
        (void)StringBase::operator=(src);
   14776:	4914      	ldr	r1, [pc, #80]	; (147c8 <Os::Task::Task()+0x68>)
   14778:	4630      	mov	r0, r6
    TaskString() : StringBase() { *this = ""; }
   1477a:	6063      	str	r3, [r4, #4]
        (void)StringBase::operator=(src);
   1477c:	f7ec fdb8 	bl	12f0 <Fw::StringBase::operator=(char const*)>
   14780:	f104 0010 	add.w	r0, r4, #16
   14784:	7325      	strb	r5, [r4, #12]
   14786:	f7ff f85b 	bl	13840 <Os::Mutex::Mutex()>
   1478a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   1478e:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
   14792:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   14796:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1479a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
   1479e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
   147a2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
   147a6:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
Task::TaskRoutineWrapper::TaskRoutineWrapper(Task& self) : m_task(self) {}
   147aa:	e9c4 451a 	strd	r4, r5, [r4, #104]	; 0x68
Task::Task() : m_wrapper(*this), m_handle_storage(), m_delegate(*TaskInterface::getDelegate(m_handle_storage)) {}
   147ae:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
   147b2:	f7eb fce9 	bl	188 <Os::TaskInterface::getDelegate(unsigned char (&) [24])>
   147b6:	4603      	mov	r3, r0
   147b8:	4620      	mov	r0, r4
   147ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
   147be:	bd70      	pop	{r4, r5, r6, pc}
   147c0:	2000352c 	.word	0x2000352c
   147c4:	20003440 	.word	0x20003440
   147c8:	20001d2c 	.word	0x20001d2c

000147cc <Os::Task::getState()>:
Task::State Task::getState() {
   147cc:	b510      	push	{r4, lr}
   147ce:	4604      	mov	r4, r0
   147d0:	b082      	sub	sp, #8
    this->m_lock.lock();
   147d2:	3010      	adds	r0, #16
   147d4:	9001      	str	r0, [sp, #4]
   147d6:	f7ff f84f 	bl	13878 <Os::Mutex::lock()>
    state = this->m_state;
   147da:	7b24      	ldrb	r4, [r4, #12]
   147dc:	9801      	ldr	r0, [sp, #4]
   147de:	f7ff f89f 	bl	13920 <Os::Mutex::unLock()>
}
   147e2:	4620      	mov	r0, r4
   147e4:	b002      	add	sp, #8
   147e6:	bd10      	pop	{r4, pc}

000147e8 <Os::Task::getPriority()>:
FwSizeType Task::getPriority() {
   147e8:	b510      	push	{r4, lr}
   147ea:	4604      	mov	r4, r0
   147ec:	b082      	sub	sp, #8
    Os::ScopeLock lock(this->m_lock);
   147ee:	f104 0110 	add.w	r1, r4, #16
   147f2:	a801      	add	r0, sp, #4
   147f4:	f7ff f8e8 	bl	139c8 <Os::ScopeLock::ScopeLock(Os::Mutex&)>
    return this->m_priority;
   147f8:	6f64      	ldr	r4, [r4, #116]	; 0x74
}
   147fa:	a801      	add	r0, sp, #4
   147fc:	f7ff f93c 	bl	13a78 <Os::ScopeLock::~ScopeLock()>
   14800:	4620      	mov	r0, r4
   14802:	b002      	add	sp, #8
   14804:	bd10      	pop	{r4, pc}
   14806:	bf00      	nop

00014808 <Os::Task::init()>:

Os::TaskInterface::Status Task::delay(Fw::TimeInterval interval) {
    return Task::getSingleton()._delay(interval);
}

void Task::init() {
   14808:	b510      	push	{r4, lr}
    // Force trigger on the fly singleton setup
    (void) Task::getSingleton();
}

Task& Task::getSingleton() {
    static Task s_singleton;
   1480a:	4c08      	ldr	r4, [pc, #32]	; (1482c <Os::Task::init()+0x24>)
   1480c:	6823      	ldr	r3, [r4, #0]
   1480e:	07db      	lsls	r3, r3, #31
   14810:	d500      	bpl.n	14814 <Os::Task::init()+0xc>
}
   14812:	bd10      	pop	{r4, pc}
    static Task s_singleton;
   14814:	4806      	ldr	r0, [pc, #24]	; (14830 <Os::Task::init()+0x28>)
   14816:	f7ff ffa3 	bl	14760 <Os::Task::Task()>
   1481a:	2301      	movs	r3, #1
   1481c:	4a05      	ldr	r2, [pc, #20]	; (14834 <Os::Task::init()+0x2c>)
   1481e:	6023      	str	r3, [r4, #0]
   14820:	4905      	ldr	r1, [pc, #20]	; (14838 <Os::Task::init()+0x30>)
   14822:	4803      	ldr	r0, [pc, #12]	; (14830 <Os::Task::init()+0x28>)
}
   14824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    static Task s_singleton;
   14828:	f005 bdaa 	b.w	1a380 <__aeabi_atexit>
   1482c:	2000ba18 	.word	0x2000ba18
   14830:	2000b8c8 	.word	0x2000b8c8
   14834:	20005a58 	.word	0x20005a58
   14838:	000141cd 	.word	0x000141cd

0001483c <Os::Task::registerTaskRegistry(Os::TaskRegistry*)>:
    return s_singleton;
}

void Task::registerTaskRegistry(TaskRegistry* registry) {
    Task::s_taskRegistry = registry;
   1483c:	4b01      	ldr	r3, [pc, #4]	; (14844 <Os::Task::registerTaskRegistry(Os::TaskRegistry*)+0x8>)
   1483e:	6018      	str	r0, [r3, #0]
}
   14840:	4770      	bx	lr
   14842:	bf00      	nop
   14844:	2000c9c8 	.word	0x2000c9c8

00014848 <_GLOBAL__sub_I__ZN2Os13TaskInterface9ArgumentsC2ERKN2Fw10StringBaseEPFvPvES6_mmmm>:
}
   14848:	b510      	push	{r4, lr}
Mutex Task::s_taskMutex;
   1484a:	4c05      	ldr	r4, [pc, #20]	; (14860 <_GLOBAL__sub_I__ZN2Os13TaskInterface9ArgumentsC2ERKN2Fw10StringBaseEPFvPvES6_mmmm+0x18>)
   1484c:	4620      	mov	r0, r4
   1484e:	f7fe fff7 	bl	13840 <Os::Mutex::Mutex()>
   14852:	4620      	mov	r0, r4
   14854:	4a03      	ldr	r2, [pc, #12]	; (14864 <_GLOBAL__sub_I__ZN2Os13TaskInterface9ArgumentsC2ERKN2Fw10StringBaseEPFvPvES6_mmmm+0x1c>)
   14856:	4904      	ldr	r1, [pc, #16]	; (14868 <_GLOBAL__sub_I__ZN2Os13TaskInterface9ArgumentsC2ERKN2Fw10StringBaseEPFvPvES6_mmmm+0x20>)
}
   14858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Mutex Task::s_taskMutex;
   1485c:	f005 bd90 	b.w	1a380 <__aeabi_atexit>
   14860:	2000b830 	.word	0x2000b830
   14864:	20005a58 	.word	0x20005a58
   14868:	000133ad 	.word	0x000133ad

0001486c <Os::Console::writeMessage(char const*, unsigned long)>:
            this->m_delegate = *ConsoleInterface::getDelegate(m_handle_storage, &other.m_delegate);
        }
        return *this;
    }

    void Console::writeMessage(const CHAR *message, const FwSizeType size) {
   1486c:	b570      	push	{r4, r5, r6, lr}
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   1486e:	f100 0308 	add.w	r3, r0, #8
    void Console::writeMessage(const CHAR *message, const FwSizeType size) {
   14872:	4616      	mov	r6, r2
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14874:	6a02      	ldr	r2, [r0, #32]
    void Console::writeMessage(const CHAR *message, const FwSizeType size) {
   14876:	4604      	mov	r4, r0
   14878:	460d      	mov	r5, r1
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   1487a:	429a      	cmp	r2, r3
   1487c:	d003      	beq.n	14886 <Os::Console::writeMessage(char const*, unsigned long)+0x1a>
   1487e:	211f      	movs	r1, #31
   14880:	4808      	ldr	r0, [pc, #32]	; (148a4 <Os::Console::writeMessage(char const*, unsigned long)+0x38>)
   14882:	f7ec fec3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        FW_ASSERT(message != nullptr || size == 0);
   14886:	b905      	cbnz	r5, 1488a <Os::Console::writeMessage(char const*, unsigned long)+0x1e>
   14888:	b93e      	cbnz	r6, 1489a <Os::Console::writeMessage(char const*, unsigned long)+0x2e>
        this->m_delegate.writeMessage(message, size);
   1488a:	6a20      	ldr	r0, [r4, #32]
   1488c:	4632      	mov	r2, r6
   1488e:	4629      	mov	r1, r5
   14890:	6803      	ldr	r3, [r0, #0]
    }
   14892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        this->m_delegate.writeMessage(message, size);
   14896:	689b      	ldr	r3, [r3, #8]
   14898:	4718      	bx	r3
        FW_ASSERT(message != nullptr || size == 0);
   1489a:	2120      	movs	r1, #32
   1489c:	4801      	ldr	r0, [pc, #4]	; (148a4 <Os::Console::writeMessage(char const*, unsigned long)+0x38>)
   1489e:	f7ec feb5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   148a2:	e7f2      	b.n	1488a <Os::Console::writeMessage(char const*, unsigned long)+0x1e>
   148a4:	20000df8 	.word	0x20000df8

000148a8 <Os::Console::writeMessage(Fw::StringBase const&)>:

    void Console::writeMessage(const Fw::StringBase& message) {
        this->writeMessage(message.toChar(), message.length());
   148a8:	680b      	ldr	r3, [r1, #0]
   148aa:	6802      	ldr	r2, [r0, #0]
   148ac:	695b      	ldr	r3, [r3, #20]
    void Console::writeMessage(const Fw::StringBase& message) {
   148ae:	b570      	push	{r4, r5, r6, lr}
   148b0:	460c      	mov	r4, r1
   148b2:	b082      	sub	sp, #8
   148b4:	4605      	mov	r5, r0
        this->writeMessage(message.toChar(), message.length());
   148b6:	4608      	mov	r0, r1
   148b8:	6896      	ldr	r6, [r2, #8]
   148ba:	4798      	blx	r3
   148bc:	4601      	mov	r1, r0
   148be:	4620      	mov	r0, r4
   148c0:	9101      	str	r1, [sp, #4]
   148c2:	f7ec fd29 	bl	1318 <Fw::StringBase::length() const>
   148c6:	9901      	ldr	r1, [sp, #4]
   148c8:	4602      	mov	r2, r0
   148ca:	4633      	mov	r3, r6
   148cc:	4628      	mov	r0, r5
    }
   148ce:	b002      	add	sp, #8
   148d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        this->writeMessage(message.toChar(), message.length());
   148d4:	4718      	bx	r3
   148d6:	bf00      	nop

000148d8 <non-virtual thunk to Os::Console::writeMessage(Fw::StringBase const&)>:
        //! \brief write message to console
        //!
        //! Write a message to the console as stored as a StringBase
        //!
        //! \param message: raw message to write (StringBase)
        void writeMessage(const Fw::StringBase& message) override;
   148d8:	f1a0 0004 	sub.w	r0, r0, #4
   148dc:	f7ff bfe4 	b.w	148a8 <Os::Console::writeMessage(Fw::StringBase const&)>

000148e0 <non-virtual thunk to Os::Console::~Console()>:
   148e0:	b538      	push	{r3, r4, r5, lr}
   148e2:	4b0b      	ldr	r3, [pc, #44]	; (14910 <non-virtual thunk to Os::Console::~Console()+0x30>)
   148e4:	4604      	mov	r4, r0
   148e6:	69c2      	ldr	r2, [r0, #28]
   148e8:	1f05      	subs	r5, r0, #4
   148ea:	f103 011c 	add.w	r1, r3, #28
   148ee:	f840 3c04 	str.w	r3, [r0, #-4]
   148f2:	f840 1b04 	str.w	r1, [r0], #4
   148f6:	4282      	cmp	r2, r0
   148f8:	d004      	beq.n	14904 <non-virtual thunk to Os::Console::~Console()+0x24>
   148fa:	210c      	movs	r1, #12
   148fc:	4805      	ldr	r0, [pc, #20]	; (14914 <non-virtual thunk to Os::Console::~Console()+0x34>)
   148fe:	f7ec fe85 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   14902:	69e0      	ldr	r0, [r4, #28]
   14904:	6803      	ldr	r3, [r0, #0]
   14906:	681b      	ldr	r3, [r3, #0]
   14908:	4798      	blx	r3
   1490a:	4628      	mov	r0, r5
   1490c:	bd38      	pop	{r3, r4, r5, pc}
   1490e:	bf00      	nop
   14910:	20003600 	.word	0x20003600
   14914:	20000df8 	.word	0x20000df8

00014918 <non-virtual thunk to Os::Console::~Console()>:
   14918:	b538      	push	{r3, r4, r5, lr}
   1491a:	4b0d      	ldr	r3, [pc, #52]	; (14950 <non-virtual thunk to Os::Console::~Console()+0x38>)
   1491c:	4604      	mov	r4, r0
   1491e:	69c2      	ldr	r2, [r0, #28]
   14920:	1f05      	subs	r5, r0, #4
   14922:	f103 011c 	add.w	r1, r3, #28
   14926:	f840 3c04 	str.w	r3, [r0, #-4]
   1492a:	f840 1b04 	str.w	r1, [r0], #4
   1492e:	4282      	cmp	r2, r0
   14930:	d004      	beq.n	1493c <non-virtual thunk to Os::Console::~Console()+0x24>
   14932:	210c      	movs	r1, #12
   14934:	4807      	ldr	r0, [pc, #28]	; (14954 <non-virtual thunk to Os::Console::~Console()+0x3c>)
   14936:	f7ec fe69 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1493a:	69e0      	ldr	r0, [r4, #28]
   1493c:	6803      	ldr	r3, [r0, #0]
   1493e:	681b      	ldr	r3, [r3, #0]
   14940:	4798      	blx	r3
   14942:	4628      	mov	r0, r5
   14944:	2128      	movs	r1, #40	; 0x28
   14946:	f004 f9c3 	bl	18cd0 <operator delete(void*, unsigned int)>
   1494a:	4628      	mov	r0, r5
   1494c:	bd38      	pop	{r3, r4, r5, pc}
   1494e:	bf00      	nop
   14950:	20003600 	.word	0x20003600
   14954:	20000df8 	.word	0x20000df8

00014958 <Os::Console::~Console()>:
    Console::~Console() {
   14958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1495c:	4f2e      	ldr	r7, [pc, #184]	; (14a18 <Os::Console::~Console()+0xc0>)
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   1495e:	f100 0508 	add.w	r5, r0, #8
   14962:	6a03      	ldr	r3, [r0, #32]
    Console::~Console() {
   14964:	4604      	mov	r4, r0
   14966:	f107 081c 	add.w	r8, r7, #28
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   1496a:	42ab      	cmp	r3, r5
    Console::~Console() {
   1496c:	e9c0 7800 	strd	r7, r8, [r0]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14970:	d004      	beq.n	1497c <Os::Console::~Console()+0x24>
   14972:	210c      	movs	r1, #12
   14974:	4829      	ldr	r0, [pc, #164]	; (14a1c <Os::Console::~Console()+0xc4>)
   14976:	f7ec fe49 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   1497a:	6a25      	ldr	r5, [r4, #32]
   1497c:	682b      	ldr	r3, [r5, #0]
   1497e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 14a20 <Os::Console::~Console()+0xc8>
   14982:	681b      	ldr	r3, [r3, #0]
   14984:	454b      	cmp	r3, r9
   14986:	d135      	bne.n	149f4 <Os::Console::~Console()+0x9c>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14988:	f105 0608 	add.w	r6, r5, #8
   1498c:	6a2b      	ldr	r3, [r5, #32]
   1498e:	42b3      	cmp	r3, r6
    Console::~Console() {
   14990:	e9c5 7800 	strd	r7, r8, [r5]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14994:	d004      	beq.n	149a0 <Os::Console::~Console()+0x48>
   14996:	210c      	movs	r1, #12
   14998:	4820      	ldr	r0, [pc, #128]	; (14a1c <Os::Console::~Console()+0xc4>)
   1499a:	f7ec fe37 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   1499e:	6a2e      	ldr	r6, [r5, #32]
   149a0:	6833      	ldr	r3, [r6, #0]
   149a2:	681b      	ldr	r3, [r3, #0]
   149a4:	454b      	cmp	r3, r9
   149a6:	d12e      	bne.n	14a06 <Os::Console::~Console()+0xae>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   149a8:	f106 0508 	add.w	r5, r6, #8
   149ac:	6a33      	ldr	r3, [r6, #32]
   149ae:	42ab      	cmp	r3, r5
    Console::~Console() {
   149b0:	e9c6 7800 	strd	r7, r8, [r6]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   149b4:	d004      	beq.n	149c0 <Os::Console::~Console()+0x68>
   149b6:	210c      	movs	r1, #12
   149b8:	4818      	ldr	r0, [pc, #96]	; (14a1c <Os::Console::~Console()+0xc4>)
   149ba:	f7ec fe27 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   149be:	6a35      	ldr	r5, [r6, #32]
   149c0:	682b      	ldr	r3, [r5, #0]
   149c2:	681b      	ldr	r3, [r3, #0]
   149c4:	454b      	cmp	r3, r9
   149c6:	d115      	bne.n	149f4 <Os::Console::~Console()+0x9c>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   149c8:	f105 0008 	add.w	r0, r5, #8
   149cc:	6a2b      	ldr	r3, [r5, #32]
   149ce:	4283      	cmp	r3, r0
    Console::~Console() {
   149d0:	e9c5 7800 	strd	r7, r8, [r5]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   149d4:	d004      	beq.n	149e0 <Os::Console::~Console()+0x88>
   149d6:	210c      	movs	r1, #12
   149d8:	4810      	ldr	r0, [pc, #64]	; (14a1c <Os::Console::~Console()+0xc4>)
   149da:	f7ec fe17 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   149de:	6a28      	ldr	r0, [r5, #32]
   149e0:	6803      	ldr	r3, [r0, #0]
   149e2:	681b      	ldr	r3, [r3, #0]
   149e4:	4798      	blx	r3
    }
   149e6:	4620      	mov	r0, r4
   149e8:	2128      	movs	r1, #40	; 0x28
   149ea:	f004 f971 	bl	18cd0 <operator delete(void*, unsigned int)>
   149ee:	4620      	mov	r0, r4
   149f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_delegate.~ConsoleInterface();
   149f4:	4628      	mov	r0, r5
   149f6:	4798      	blx	r3
    }
   149f8:	4620      	mov	r0, r4
   149fa:	2128      	movs	r1, #40	; 0x28
   149fc:	f004 f968 	bl	18cd0 <operator delete(void*, unsigned int)>
   14a00:	4620      	mov	r0, r4
   14a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_delegate.~ConsoleInterface();
   14a06:	4630      	mov	r0, r6
   14a08:	4798      	blx	r3
    }
   14a0a:	4620      	mov	r0, r4
   14a0c:	2128      	movs	r1, #40	; 0x28
   14a0e:	f004 f95f 	bl	18cd0 <operator delete(void*, unsigned int)>
   14a12:	4620      	mov	r0, r4
   14a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14a18:	20003600 	.word	0x20003600
   14a1c:	20000df8 	.word	0x20000df8
   14a20:	00014b41 	.word	0x00014b41

00014a24 <Os::Console::getHandle()>:

    ConsoleHandle* Console::getHandle() {
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14a24:	6a03      	ldr	r3, [r0, #32]
    ConsoleHandle* Console::getHandle() {
   14a26:	b570      	push	{r4, r5, r6, lr}
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14a28:	f100 0408 	add.w	r4, r0, #8
   14a2c:	42a3      	cmp	r3, r4
   14a2e:	d005      	beq.n	14a3c <Os::Console::getHandle()+0x18>
   14a30:	4605      	mov	r5, r0
   14a32:	2129      	movs	r1, #41	; 0x29
   14a34:	4840      	ldr	r0, [pc, #256]	; (14b38 <Os::Console::getHandle()+0x114>)
   14a36:	f7ec fde9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14a3a:	6a2c      	ldr	r4, [r5, #32]
   14a3c:	6823      	ldr	r3, [r4, #0]
   14a3e:	4d3f      	ldr	r5, [pc, #252]	; (14b3c <Os::Console::getHandle()+0x118>)
   14a40:	68db      	ldr	r3, [r3, #12]
   14a42:	42ab      	cmp	r3, r5
   14a44:	d174      	bne.n	14b30 <Os::Console::getHandle()+0x10c>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14a46:	f104 0608 	add.w	r6, r4, #8
   14a4a:	6a23      	ldr	r3, [r4, #32]
   14a4c:	42b3      	cmp	r3, r6
   14a4e:	d004      	beq.n	14a5a <Os::Console::getHandle()+0x36>
   14a50:	2129      	movs	r1, #41	; 0x29
   14a52:	4839      	ldr	r0, [pc, #228]	; (14b38 <Os::Console::getHandle()+0x114>)
   14a54:	f7ec fdda 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14a58:	6a26      	ldr	r6, [r4, #32]
   14a5a:	6833      	ldr	r3, [r6, #0]
   14a5c:	68db      	ldr	r3, [r3, #12]
   14a5e:	42ab      	cmp	r3, r5
   14a60:	d162      	bne.n	14b28 <Os::Console::getHandle()+0x104>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14a62:	f106 0408 	add.w	r4, r6, #8
   14a66:	6a33      	ldr	r3, [r6, #32]
   14a68:	42a3      	cmp	r3, r4
   14a6a:	d004      	beq.n	14a76 <Os::Console::getHandle()+0x52>
   14a6c:	2129      	movs	r1, #41	; 0x29
   14a6e:	4832      	ldr	r0, [pc, #200]	; (14b38 <Os::Console::getHandle()+0x114>)
   14a70:	f7ec fdcc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14a74:	6a34      	ldr	r4, [r6, #32]
   14a76:	6823      	ldr	r3, [r4, #0]
   14a78:	68db      	ldr	r3, [r3, #12]
   14a7a:	42ab      	cmp	r3, r5
   14a7c:	d158      	bne.n	14b30 <Os::Console::getHandle()+0x10c>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14a7e:	f104 0608 	add.w	r6, r4, #8
   14a82:	6a23      	ldr	r3, [r4, #32]
   14a84:	42b3      	cmp	r3, r6
   14a86:	d004      	beq.n	14a92 <Os::Console::getHandle()+0x6e>
   14a88:	2129      	movs	r1, #41	; 0x29
   14a8a:	482b      	ldr	r0, [pc, #172]	; (14b38 <Os::Console::getHandle()+0x114>)
   14a8c:	f7ec fdbe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14a90:	6a26      	ldr	r6, [r4, #32]
   14a92:	6833      	ldr	r3, [r6, #0]
   14a94:	68db      	ldr	r3, [r3, #12]
   14a96:	42ab      	cmp	r3, r5
   14a98:	d146      	bne.n	14b28 <Os::Console::getHandle()+0x104>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14a9a:	f106 0408 	add.w	r4, r6, #8
   14a9e:	6a33      	ldr	r3, [r6, #32]
   14aa0:	42a3      	cmp	r3, r4
   14aa2:	d004      	beq.n	14aae <Os::Console::getHandle()+0x8a>
   14aa4:	2129      	movs	r1, #41	; 0x29
   14aa6:	4824      	ldr	r0, [pc, #144]	; (14b38 <Os::Console::getHandle()+0x114>)
   14aa8:	f7ec fdb0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14aac:	6a34      	ldr	r4, [r6, #32]
   14aae:	6823      	ldr	r3, [r4, #0]
   14ab0:	68db      	ldr	r3, [r3, #12]
   14ab2:	42ab      	cmp	r3, r5
   14ab4:	d13c      	bne.n	14b30 <Os::Console::getHandle()+0x10c>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14ab6:	f104 0608 	add.w	r6, r4, #8
   14aba:	6a23      	ldr	r3, [r4, #32]
   14abc:	42b3      	cmp	r3, r6
   14abe:	d004      	beq.n	14aca <Os::Console::getHandle()+0xa6>
   14ac0:	2129      	movs	r1, #41	; 0x29
   14ac2:	481d      	ldr	r0, [pc, #116]	; (14b38 <Os::Console::getHandle()+0x114>)
   14ac4:	f7ec fda2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14ac8:	6a26      	ldr	r6, [r4, #32]
   14aca:	6833      	ldr	r3, [r6, #0]
   14acc:	68db      	ldr	r3, [r3, #12]
   14ace:	42ab      	cmp	r3, r5
   14ad0:	d12a      	bne.n	14b28 <Os::Console::getHandle()+0x104>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14ad2:	f106 0408 	add.w	r4, r6, #8
   14ad6:	6a33      	ldr	r3, [r6, #32]
   14ad8:	42a3      	cmp	r3, r4
   14ada:	d004      	beq.n	14ae6 <Os::Console::getHandle()+0xc2>
   14adc:	2129      	movs	r1, #41	; 0x29
   14ade:	4816      	ldr	r0, [pc, #88]	; (14b38 <Os::Console::getHandle()+0x114>)
   14ae0:	f7ec fd94 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14ae4:	6a34      	ldr	r4, [r6, #32]
   14ae6:	6823      	ldr	r3, [r4, #0]
   14ae8:	68db      	ldr	r3, [r3, #12]
   14aea:	42ab      	cmp	r3, r5
   14aec:	d120      	bne.n	14b30 <Os::Console::getHandle()+0x10c>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14aee:	f104 0608 	add.w	r6, r4, #8
   14af2:	6a23      	ldr	r3, [r4, #32]
   14af4:	42b3      	cmp	r3, r6
   14af6:	d004      	beq.n	14b02 <Os::Console::getHandle()+0xde>
   14af8:	2129      	movs	r1, #41	; 0x29
   14afa:	480f      	ldr	r0, [pc, #60]	; (14b38 <Os::Console::getHandle()+0x114>)
   14afc:	f7ec fd86 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14b00:	6a26      	ldr	r6, [r4, #32]
   14b02:	6833      	ldr	r3, [r6, #0]
   14b04:	68db      	ldr	r3, [r3, #12]
   14b06:	42ab      	cmp	r3, r5
   14b08:	d10e      	bne.n	14b28 <Os::Console::getHandle()+0x104>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage));
   14b0a:	f106 0008 	add.w	r0, r6, #8
   14b0e:	6a33      	ldr	r3, [r6, #32]
   14b10:	4283      	cmp	r3, r0
   14b12:	d004      	beq.n	14b1e <Os::Console::getHandle()+0xfa>
   14b14:	2129      	movs	r1, #41	; 0x29
   14b16:	4808      	ldr	r0, [pc, #32]	; (14b38 <Os::Console::getHandle()+0x114>)
   14b18:	f7ec fd78 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return this->m_delegate.getHandle();
   14b1c:	6a30      	ldr	r0, [r6, #32]
   14b1e:	6803      	ldr	r3, [r0, #0]
    }
   14b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return this->m_delegate.getHandle();
   14b24:	68db      	ldr	r3, [r3, #12]
   14b26:	4718      	bx	r3
   14b28:	4630      	mov	r0, r6
    }
   14b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return this->m_delegate.getHandle();
   14b2e:	4718      	bx	r3
   14b30:	4620      	mov	r0, r4
    }
   14b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return this->m_delegate.getHandle();
   14b36:	4718      	bx	r3
   14b38:	20000df8 	.word	0x20000df8
   14b3c:	00014a25 	.word	0x00014a25

00014b40 <Os::Console::~Console()>:
    Console::~Console() {
   14b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b44:	4e51      	ldr	r6, [pc, #324]	; (14c8c <Os::Console::~Console()+0x14c>)
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b46:	f100 0508 	add.w	r5, r0, #8
   14b4a:	6a03      	ldr	r3, [r0, #32]
    Console::~Console() {
   14b4c:	4604      	mov	r4, r0
   14b4e:	f106 081c 	add.w	r8, r6, #28
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b52:	42ab      	cmp	r3, r5
    Console::~Console() {
   14b54:	e9c0 6800 	strd	r6, r8, [r0]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b58:	d004      	beq.n	14b64 <Os::Console::~Console()+0x24>
   14b5a:	210c      	movs	r1, #12
   14b5c:	484c      	ldr	r0, [pc, #304]	; (14c90 <Os::Console::~Console()+0x150>)
   14b5e:	f7ec fd55 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14b62:	6a25      	ldr	r5, [r4, #32]
   14b64:	682b      	ldr	r3, [r5, #0]
   14b66:	f8df 912c 	ldr.w	r9, [pc, #300]	; 14c94 <Os::Console::~Console()+0x154>
   14b6a:	681b      	ldr	r3, [r3, #0]
   14b6c:	454b      	cmp	r3, r9
   14b6e:	f040 8087 	bne.w	14c80 <Os::Console::~Console()+0x140>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b72:	f105 0708 	add.w	r7, r5, #8
   14b76:	6a2b      	ldr	r3, [r5, #32]
   14b78:	42bb      	cmp	r3, r7
    Console::~Console() {
   14b7a:	e9c5 6800 	strd	r6, r8, [r5]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b7e:	d004      	beq.n	14b8a <Os::Console::~Console()+0x4a>
   14b80:	210c      	movs	r1, #12
   14b82:	4843      	ldr	r0, [pc, #268]	; (14c90 <Os::Console::~Console()+0x150>)
   14b84:	f7ec fd42 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14b88:	6a2f      	ldr	r7, [r5, #32]
   14b8a:	683b      	ldr	r3, [r7, #0]
   14b8c:	681b      	ldr	r3, [r3, #0]
   14b8e:	454b      	cmp	r3, r9
   14b90:	d171      	bne.n	14c76 <Os::Console::~Console()+0x136>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b92:	f107 0508 	add.w	r5, r7, #8
   14b96:	6a3b      	ldr	r3, [r7, #32]
   14b98:	42ab      	cmp	r3, r5
    Console::~Console() {
   14b9a:	e9c7 6800 	strd	r6, r8, [r7]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14b9e:	d004      	beq.n	14baa <Os::Console::~Console()+0x6a>
   14ba0:	210c      	movs	r1, #12
   14ba2:	483b      	ldr	r0, [pc, #236]	; (14c90 <Os::Console::~Console()+0x150>)
   14ba4:	f7ec fd32 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14ba8:	6a3d      	ldr	r5, [r7, #32]
   14baa:	682b      	ldr	r3, [r5, #0]
   14bac:	681b      	ldr	r3, [r3, #0]
   14bae:	454b      	cmp	r3, r9
   14bb0:	d166      	bne.n	14c80 <Os::Console::~Console()+0x140>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14bb2:	f105 0708 	add.w	r7, r5, #8
   14bb6:	6a2b      	ldr	r3, [r5, #32]
   14bb8:	42bb      	cmp	r3, r7
    Console::~Console() {
   14bba:	e9c5 6800 	strd	r6, r8, [r5]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14bbe:	d004      	beq.n	14bca <Os::Console::~Console()+0x8a>
   14bc0:	210c      	movs	r1, #12
   14bc2:	4833      	ldr	r0, [pc, #204]	; (14c90 <Os::Console::~Console()+0x150>)
   14bc4:	f7ec fd22 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14bc8:	6a2f      	ldr	r7, [r5, #32]
   14bca:	683b      	ldr	r3, [r7, #0]
   14bcc:	681b      	ldr	r3, [r3, #0]
   14bce:	454b      	cmp	r3, r9
   14bd0:	d151      	bne.n	14c76 <Os::Console::~Console()+0x136>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14bd2:	f107 0508 	add.w	r5, r7, #8
   14bd6:	6a3b      	ldr	r3, [r7, #32]
   14bd8:	42ab      	cmp	r3, r5
    Console::~Console() {
   14bda:	e9c7 6800 	strd	r6, r8, [r7]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14bde:	d004      	beq.n	14bea <Os::Console::~Console()+0xaa>
   14be0:	210c      	movs	r1, #12
   14be2:	482b      	ldr	r0, [pc, #172]	; (14c90 <Os::Console::~Console()+0x150>)
   14be4:	f7ec fd12 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14be8:	6a3d      	ldr	r5, [r7, #32]
   14bea:	682b      	ldr	r3, [r5, #0]
   14bec:	681b      	ldr	r3, [r3, #0]
   14bee:	454b      	cmp	r3, r9
   14bf0:	d146      	bne.n	14c80 <Os::Console::~Console()+0x140>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14bf2:	f105 0708 	add.w	r7, r5, #8
   14bf6:	6a2b      	ldr	r3, [r5, #32]
   14bf8:	42bb      	cmp	r3, r7
    Console::~Console() {
   14bfa:	e9c5 6800 	strd	r6, r8, [r5]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14bfe:	d004      	beq.n	14c0a <Os::Console::~Console()+0xca>
   14c00:	210c      	movs	r1, #12
   14c02:	4823      	ldr	r0, [pc, #140]	; (14c90 <Os::Console::~Console()+0x150>)
   14c04:	f7ec fd02 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14c08:	6a2f      	ldr	r7, [r5, #32]
   14c0a:	683b      	ldr	r3, [r7, #0]
   14c0c:	681b      	ldr	r3, [r3, #0]
   14c0e:	454b      	cmp	r3, r9
   14c10:	d131      	bne.n	14c76 <Os::Console::~Console()+0x136>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14c12:	f107 0508 	add.w	r5, r7, #8
   14c16:	6a3b      	ldr	r3, [r7, #32]
   14c18:	42ab      	cmp	r3, r5
    Console::~Console() {
   14c1a:	e9c7 6800 	strd	r6, r8, [r7]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14c1e:	d004      	beq.n	14c2a <Os::Console::~Console()+0xea>
   14c20:	210c      	movs	r1, #12
   14c22:	481b      	ldr	r0, [pc, #108]	; (14c90 <Os::Console::~Console()+0x150>)
   14c24:	f7ec fcf2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14c28:	6a3d      	ldr	r5, [r7, #32]
   14c2a:	682b      	ldr	r3, [r5, #0]
   14c2c:	681b      	ldr	r3, [r3, #0]
   14c2e:	454b      	cmp	r3, r9
   14c30:	d126      	bne.n	14c80 <Os::Console::~Console()+0x140>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14c32:	f105 0708 	add.w	r7, r5, #8
   14c36:	6a2b      	ldr	r3, [r5, #32]
   14c38:	42bb      	cmp	r3, r7
    Console::~Console() {
   14c3a:	e9c5 6800 	strd	r6, r8, [r5]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14c3e:	d004      	beq.n	14c4a <Os::Console::~Console()+0x10a>
   14c40:	210c      	movs	r1, #12
   14c42:	4813      	ldr	r0, [pc, #76]	; (14c90 <Os::Console::~Console()+0x150>)
   14c44:	f7ec fce2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14c48:	6a2f      	ldr	r7, [r5, #32]
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	681b      	ldr	r3, [r3, #0]
   14c4e:	454b      	cmp	r3, r9
   14c50:	d111      	bne.n	14c76 <Os::Console::~Console()+0x136>
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14c52:	f107 0008 	add.w	r0, r7, #8
   14c56:	6a3b      	ldr	r3, [r7, #32]
   14c58:	4283      	cmp	r3, r0
    Console::~Console() {
   14c5a:	e9c7 6800 	strd	r6, r8, [r7]
        FW_ASSERT(&this->m_delegate == reinterpret_cast<ConsoleInterface*>(&this->m_handle_storage[0]));
   14c5e:	d004      	beq.n	14c6a <Os::Console::~Console()+0x12a>
   14c60:	210c      	movs	r1, #12
   14c62:	480b      	ldr	r0, [pc, #44]	; (14c90 <Os::Console::~Console()+0x150>)
   14c64:	f7ec fcd2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        m_delegate.~ConsoleInterface();
   14c68:	6a38      	ldr	r0, [r7, #32]
   14c6a:	6803      	ldr	r3, [r0, #0]
   14c6c:	681b      	ldr	r3, [r3, #0]
   14c6e:	4798      	blx	r3
    }
   14c70:	4620      	mov	r0, r4
   14c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_delegate.~ConsoleInterface();
   14c76:	4638      	mov	r0, r7
   14c78:	4798      	blx	r3
    }
   14c7a:	4620      	mov	r0, r4
   14c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        m_delegate.~ConsoleInterface();
   14c80:	4628      	mov	r0, r5
   14c82:	4798      	blx	r3
    }
   14c84:	4620      	mov	r0, r4
   14c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c8a:	bf00      	nop
   14c8c:	20003600 	.word	0x20003600
   14c90:	20000df8 	.word	0x20000df8
   14c94:	00014b41 	.word	0x00014b41

00014c98 <Os::Console::getSingleton()>:
    void Console::init() {
        // Force trigger on the fly singleton setup
        (void) Console::getSingleton();
    }

    Console& Console::getSingleton() {
   14c98:	b538      	push	{r3, r4, r5, lr}
        static Console s_singleton;
   14c9a:	4d13      	ldr	r5, [pc, #76]	; (14ce8 <Os::Console::getSingleton()+0x50>)
   14c9c:	6829      	ldr	r1, [r5, #0]
   14c9e:	f011 0101 	ands.w	r1, r1, #1
   14ca2:	d004      	beq.n	14cae <Os::Console::getSingleton()+0x16>
        Fw::Logger::registerLogger(&s_singleton);
   14ca4:	4811      	ldr	r0, [pc, #68]	; (14cec <Os::Console::getSingleton()+0x54>)
   14ca6:	f7ec fd3b 	bl	1720 <Fw::Logger::registerLogger(Fw::Logger*)>
        return s_singleton;
    }
   14caa:	4811      	ldr	r0, [pc, #68]	; (14cf0 <Os::Console::getSingleton()+0x58>)
   14cac:	bd38      	pop	{r3, r4, r5, pc}
    Console::Console() : ConsoleInterface(), Fw::Logger(), m_handle_storage(), m_delegate(*ConsoleInterface::getDelegate(m_handle_storage)) {}
   14cae:	4c10      	ldr	r4, [pc, #64]	; (14cf0 <Os::Console::getSingleton()+0x58>)
   14cb0:	4b10      	ldr	r3, [pc, #64]	; (14cf4 <Os::Console::getSingleton()+0x5c>)
   14cb2:	f104 0008 	add.w	r0, r4, #8
   14cb6:	f103 021c 	add.w	r2, r3, #28
   14cba:	6023      	str	r3, [r4, #0]
   14cbc:	e9c4 1102 	strd	r1, r1, [r4, #8]
   14cc0:	e9c0 1102 	strd	r1, r1, [r0, #8]
   14cc4:	e9c0 1104 	strd	r1, r1, [r0, #16]
   14cc8:	6062      	str	r2, [r4, #4]
   14cca:	f7eb fa63 	bl	194 <Os::ConsoleInterface::getDelegate(unsigned char (&) [24], Os::ConsoleInterface const*)>
        static Console s_singleton;
   14cce:	2301      	movs	r3, #1
   14cd0:	4a09      	ldr	r2, [pc, #36]	; (14cf8 <Os::Console::getSingleton()+0x60>)
   14cd2:	490a      	ldr	r1, [pc, #40]	; (14cfc <Os::Console::getSingleton()+0x64>)
    Console::Console() : ConsoleInterface(), Fw::Logger(), m_handle_storage(), m_delegate(*ConsoleInterface::getDelegate(m_handle_storage)) {}
   14cd4:	6220      	str	r0, [r4, #32]
        static Console s_singleton;
   14cd6:	4620      	mov	r0, r4
   14cd8:	602b      	str	r3, [r5, #0]
   14cda:	f005 fb51 	bl	1a380 <__aeabi_atexit>
        Fw::Logger::registerLogger(&s_singleton);
   14cde:	4803      	ldr	r0, [pc, #12]	; (14cec <Os::Console::getSingleton()+0x54>)
   14ce0:	f7ec fd1e 	bl	1720 <Fw::Logger::registerLogger(Fw::Logger*)>
    }
   14ce4:	4802      	ldr	r0, [pc, #8]	; (14cf0 <Os::Console::getSingleton()+0x58>)
   14ce6:	bd38      	pop	{r3, r4, r5, pc}
   14ce8:	2000ba24 	.word	0x2000ba24
   14cec:	2000b9e4 	.word	0x2000b9e4
   14cf0:	2000b9e0 	.word	0x2000b9e0
   14cf4:	20003600 	.word	0x20003600
   14cf8:	20005a58 	.word	0x20005a58
   14cfc:	00014b41 	.word	0x00014b41

00014d00 <Os::Console::init()>:
        (void) Console::getSingleton();
   14d00:	f7ff bfca 	b.w	14c98 <Os::Console::getSingleton()>

00014d04 <Os::RawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const>:
RawTime::Status RawTime::now() {
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
    return this->m_delegate.now();
}

RawTime::Status RawTime::getTimeInterval(const Os::RawTime& other, Fw::TimeInterval& result) const {
   14d04:	b530      	push	{r4, r5, lr}
   14d06:	4604      	mov	r4, r0
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   14d08:	3008      	adds	r0, #8
RawTime::Status RawTime::getTimeInterval(const Os::RawTime& other, Fw::TimeInterval& result) const {
   14d0a:	b083      	sub	sp, #12
   14d0c:	460d      	mov	r5, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   14d0e:	6a23      	ldr	r3, [r4, #32]
   14d10:	4283      	cmp	r3, r0
   14d12:	d006      	beq.n	14d22 <Os::RawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x1e>
   14d14:	212a      	movs	r1, #42	; 0x2a
   14d16:	4806      	ldr	r0, [pc, #24]	; (14d30 <Os::RawTime::getTimeInterval(Os::RawTime const&, Fw::TimeInterval&) const+0x2c>)
   14d18:	9201      	str	r2, [sp, #4]
   14d1a:	f7ec fc77 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getTimeInterval(other, result);
   14d1e:	6a20      	ldr	r0, [r4, #32]
   14d20:	9a01      	ldr	r2, [sp, #4]
   14d22:	6803      	ldr	r3, [r0, #0]
   14d24:	4629      	mov	r1, r5
   14d26:	69db      	ldr	r3, [r3, #28]
}
   14d28:	b003      	add	sp, #12
   14d2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return this->m_delegate.getTimeInterval(other, result);
   14d2e:	4718      	bx	r3
   14d30:	20002420 	.word	0x20002420

00014d34 <Os::RawTime::~RawTime()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14d34:	6a03      	ldr	r3, [r0, #32]
RawTime::~RawTime() {
   14d36:	4a0b      	ldr	r2, [pc, #44]	; (14d64 <Os::RawTime::~RawTime()+0x30>)
   14d38:	b510      	push	{r4, lr}
   14d3a:	4604      	mov	r4, r0
   14d3c:	f840 2b08 	str.w	r2, [r0], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14d40:	4283      	cmp	r3, r0
   14d42:	d004      	beq.n	14d4e <Os::RawTime::~RawTime()+0x1a>
   14d44:	210f      	movs	r1, #15
   14d46:	4808      	ldr	r0, [pc, #32]	; (14d68 <Os::RawTime::~RawTime()+0x34>)
   14d48:	f7ec fc60 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~RawTimeInterface();
   14d4c:	6a20      	ldr	r0, [r4, #32]
   14d4e:	6803      	ldr	r3, [r0, #0]
   14d50:	68db      	ldr	r3, [r3, #12]
   14d52:	4798      	blx	r3
   14d54:	4b05      	ldr	r3, [pc, #20]	; (14d6c <Os::RawTime::~RawTime()+0x38>)
   14d56:	4620      	mov	r0, r4
   14d58:	6023      	str	r3, [r4, #0]
   14d5a:	f7eb fbef 	bl	53c <Fw::Serializable::~Serializable()>
}
   14d5e:	4620      	mov	r0, r4
   14d60:	bd10      	pop	{r4, pc}
   14d62:	bf00      	nop
   14d64:	2000365c 	.word	0x2000365c
   14d68:	20002420 	.word	0x20002420
   14d6c:	20003490 	.word	0x20003490

00014d70 <Os::RawTime::~RawTime()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14d70:	6a03      	ldr	r3, [r0, #32]
RawTime::~RawTime() {
   14d72:	4a0d      	ldr	r2, [pc, #52]	; (14da8 <Os::RawTime::~RawTime()+0x38>)
   14d74:	b510      	push	{r4, lr}
   14d76:	4604      	mov	r4, r0
   14d78:	f840 2b08 	str.w	r2, [r0], #8
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14d7c:	4283      	cmp	r3, r0
   14d7e:	d004      	beq.n	14d8a <Os::RawTime::~RawTime()+0x1a>
   14d80:	210f      	movs	r1, #15
   14d82:	480a      	ldr	r0, [pc, #40]	; (14dac <Os::RawTime::~RawTime()+0x3c>)
   14d84:	f7ec fc42 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    m_delegate.~RawTimeInterface();
   14d88:	6a20      	ldr	r0, [r4, #32]
   14d8a:	6803      	ldr	r3, [r0, #0]
   14d8c:	68db      	ldr	r3, [r3, #12]
   14d8e:	4798      	blx	r3
   14d90:	4b07      	ldr	r3, [pc, #28]	; (14db0 <Os::RawTime::~RawTime()+0x40>)
   14d92:	4620      	mov	r0, r4
   14d94:	6023      	str	r3, [r4, #0]
   14d96:	f7eb fbd1 	bl	53c <Fw::Serializable::~Serializable()>
}
   14d9a:	4620      	mov	r0, r4
   14d9c:	2128      	movs	r1, #40	; 0x28
   14d9e:	f003 ff97 	bl	18cd0 <operator delete(void*, unsigned int)>
   14da2:	4620      	mov	r0, r4
   14da4:	bd10      	pop	{r4, pc}
   14da6:	bf00      	nop
   14da8:	2000365c 	.word	0x2000365c
   14dac:	20002420 	.word	0x20002420
   14db0:	20003490 	.word	0x20003490

00014db4 <Os::RawTime::getHandle()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14db4:	6a03      	ldr	r3, [r0, #32]
RawTimeHandle* RawTime::getHandle() {
   14db6:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14db8:	f100 0408 	add.w	r4, r0, #8
   14dbc:	42a3      	cmp	r3, r4
   14dbe:	d005      	beq.n	14dcc <Os::RawTime::getHandle()+0x18>
   14dc0:	4605      	mov	r5, r0
   14dc2:	2120      	movs	r1, #32
   14dc4:	4840      	ldr	r0, [pc, #256]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14dc6:	f7ec fc21 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14dca:	6a2c      	ldr	r4, [r5, #32]
   14dcc:	6823      	ldr	r3, [r4, #0]
   14dce:	4d3f      	ldr	r5, [pc, #252]	; (14ecc <Os::RawTime::getHandle()+0x118>)
   14dd0:	695b      	ldr	r3, [r3, #20]
   14dd2:	42ab      	cmp	r3, r5
   14dd4:	d174      	bne.n	14ec0 <Os::RawTime::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14dd6:	f104 0608 	add.w	r6, r4, #8
   14dda:	6a23      	ldr	r3, [r4, #32]
   14ddc:	42b3      	cmp	r3, r6
   14dde:	d004      	beq.n	14dea <Os::RawTime::getHandle()+0x36>
   14de0:	2120      	movs	r1, #32
   14de2:	4839      	ldr	r0, [pc, #228]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14de4:	f7ec fc12 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14de8:	6a26      	ldr	r6, [r4, #32]
   14dea:	6833      	ldr	r3, [r6, #0]
   14dec:	695b      	ldr	r3, [r3, #20]
   14dee:	42ab      	cmp	r3, r5
   14df0:	d162      	bne.n	14eb8 <Os::RawTime::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14df2:	f106 0408 	add.w	r4, r6, #8
   14df6:	6a33      	ldr	r3, [r6, #32]
   14df8:	42a3      	cmp	r3, r4
   14dfa:	d004      	beq.n	14e06 <Os::RawTime::getHandle()+0x52>
   14dfc:	2120      	movs	r1, #32
   14dfe:	4832      	ldr	r0, [pc, #200]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14e00:	f7ec fc04 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14e04:	6a34      	ldr	r4, [r6, #32]
   14e06:	6823      	ldr	r3, [r4, #0]
   14e08:	695b      	ldr	r3, [r3, #20]
   14e0a:	42ab      	cmp	r3, r5
   14e0c:	d158      	bne.n	14ec0 <Os::RawTime::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14e0e:	f104 0608 	add.w	r6, r4, #8
   14e12:	6a23      	ldr	r3, [r4, #32]
   14e14:	42b3      	cmp	r3, r6
   14e16:	d004      	beq.n	14e22 <Os::RawTime::getHandle()+0x6e>
   14e18:	2120      	movs	r1, #32
   14e1a:	482b      	ldr	r0, [pc, #172]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14e1c:	f7ec fbf6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14e20:	6a26      	ldr	r6, [r4, #32]
   14e22:	6833      	ldr	r3, [r6, #0]
   14e24:	695b      	ldr	r3, [r3, #20]
   14e26:	42ab      	cmp	r3, r5
   14e28:	d146      	bne.n	14eb8 <Os::RawTime::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14e2a:	f106 0408 	add.w	r4, r6, #8
   14e2e:	6a33      	ldr	r3, [r6, #32]
   14e30:	42a3      	cmp	r3, r4
   14e32:	d004      	beq.n	14e3e <Os::RawTime::getHandle()+0x8a>
   14e34:	2120      	movs	r1, #32
   14e36:	4824      	ldr	r0, [pc, #144]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14e38:	f7ec fbe8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14e3c:	6a34      	ldr	r4, [r6, #32]
   14e3e:	6823      	ldr	r3, [r4, #0]
   14e40:	695b      	ldr	r3, [r3, #20]
   14e42:	42ab      	cmp	r3, r5
   14e44:	d13c      	bne.n	14ec0 <Os::RawTime::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14e46:	f104 0608 	add.w	r6, r4, #8
   14e4a:	6a23      	ldr	r3, [r4, #32]
   14e4c:	42b3      	cmp	r3, r6
   14e4e:	d004      	beq.n	14e5a <Os::RawTime::getHandle()+0xa6>
   14e50:	2120      	movs	r1, #32
   14e52:	481d      	ldr	r0, [pc, #116]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14e54:	f7ec fbda 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14e58:	6a26      	ldr	r6, [r4, #32]
   14e5a:	6833      	ldr	r3, [r6, #0]
   14e5c:	695b      	ldr	r3, [r3, #20]
   14e5e:	42ab      	cmp	r3, r5
   14e60:	d12a      	bne.n	14eb8 <Os::RawTime::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14e62:	f106 0408 	add.w	r4, r6, #8
   14e66:	6a33      	ldr	r3, [r6, #32]
   14e68:	42a3      	cmp	r3, r4
   14e6a:	d004      	beq.n	14e76 <Os::RawTime::getHandle()+0xc2>
   14e6c:	2120      	movs	r1, #32
   14e6e:	4816      	ldr	r0, [pc, #88]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14e70:	f7ec fbcc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14e74:	6a34      	ldr	r4, [r6, #32]
   14e76:	6823      	ldr	r3, [r4, #0]
   14e78:	695b      	ldr	r3, [r3, #20]
   14e7a:	42ab      	cmp	r3, r5
   14e7c:	d120      	bne.n	14ec0 <Os::RawTime::getHandle()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14e7e:	f104 0608 	add.w	r6, r4, #8
   14e82:	6a23      	ldr	r3, [r4, #32]
   14e84:	42b3      	cmp	r3, r6
   14e86:	d004      	beq.n	14e92 <Os::RawTime::getHandle()+0xde>
   14e88:	2120      	movs	r1, #32
   14e8a:	480f      	ldr	r0, [pc, #60]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14e8c:	f7ec fbbe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14e90:	6a26      	ldr	r6, [r4, #32]
   14e92:	6833      	ldr	r3, [r6, #0]
   14e94:	695b      	ldr	r3, [r3, #20]
   14e96:	42ab      	cmp	r3, r5
   14e98:	d10e      	bne.n	14eb8 <Os::RawTime::getHandle()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14e9a:	f106 0008 	add.w	r0, r6, #8
   14e9e:	6a33      	ldr	r3, [r6, #32]
   14ea0:	4283      	cmp	r3, r0
   14ea2:	d004      	beq.n	14eae <Os::RawTime::getHandle()+0xfa>
   14ea4:	2120      	movs	r1, #32
   14ea6:	4808      	ldr	r0, [pc, #32]	; (14ec8 <Os::RawTime::getHandle()+0x114>)
   14ea8:	f7ec fbb0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getHandle();
   14eac:	6a30      	ldr	r0, [r6, #32]
   14eae:	6803      	ldr	r3, [r0, #0]
}
   14eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   14eb4:	695b      	ldr	r3, [r3, #20]
   14eb6:	4718      	bx	r3
   14eb8:	4630      	mov	r0, r6
}
   14eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   14ebe:	4718      	bx	r3
   14ec0:	4620      	mov	r0, r4
}
   14ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.getHandle();
   14ec6:	4718      	bx	r3
   14ec8:	20002420 	.word	0x20002420
   14ecc:	00014db5 	.word	0x00014db5

00014ed0 <Os::RawTime::now()>:
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14ed0:	6a03      	ldr	r3, [r0, #32]
RawTime::Status RawTime::now() {
   14ed2:	b570      	push	{r4, r5, r6, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14ed4:	f100 0408 	add.w	r4, r0, #8
   14ed8:	42a3      	cmp	r3, r4
   14eda:	d005      	beq.n	14ee8 <Os::RawTime::now()+0x18>
   14edc:	4605      	mov	r5, r0
   14ede:	2125      	movs	r1, #37	; 0x25
   14ee0:	4840      	ldr	r0, [pc, #256]	; (14fe4 <Os::RawTime::now()+0x114>)
   14ee2:	f7ec fb93 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14ee6:	6a2c      	ldr	r4, [r5, #32]
   14ee8:	6823      	ldr	r3, [r4, #0]
   14eea:	4d3f      	ldr	r5, [pc, #252]	; (14fe8 <Os::RawTime::now()+0x118>)
   14eec:	699b      	ldr	r3, [r3, #24]
   14eee:	42ab      	cmp	r3, r5
   14ef0:	d174      	bne.n	14fdc <Os::RawTime::now()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14ef2:	f104 0608 	add.w	r6, r4, #8
   14ef6:	6a23      	ldr	r3, [r4, #32]
   14ef8:	42b3      	cmp	r3, r6
   14efa:	d004      	beq.n	14f06 <Os::RawTime::now()+0x36>
   14efc:	2125      	movs	r1, #37	; 0x25
   14efe:	4839      	ldr	r0, [pc, #228]	; (14fe4 <Os::RawTime::now()+0x114>)
   14f00:	f7ec fb84 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14f04:	6a26      	ldr	r6, [r4, #32]
   14f06:	6833      	ldr	r3, [r6, #0]
   14f08:	699b      	ldr	r3, [r3, #24]
   14f0a:	42ab      	cmp	r3, r5
   14f0c:	d162      	bne.n	14fd4 <Os::RawTime::now()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14f0e:	f106 0408 	add.w	r4, r6, #8
   14f12:	6a33      	ldr	r3, [r6, #32]
   14f14:	42a3      	cmp	r3, r4
   14f16:	d004      	beq.n	14f22 <Os::RawTime::now()+0x52>
   14f18:	2125      	movs	r1, #37	; 0x25
   14f1a:	4832      	ldr	r0, [pc, #200]	; (14fe4 <Os::RawTime::now()+0x114>)
   14f1c:	f7ec fb76 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14f20:	6a34      	ldr	r4, [r6, #32]
   14f22:	6823      	ldr	r3, [r4, #0]
   14f24:	699b      	ldr	r3, [r3, #24]
   14f26:	42ab      	cmp	r3, r5
   14f28:	d158      	bne.n	14fdc <Os::RawTime::now()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14f2a:	f104 0608 	add.w	r6, r4, #8
   14f2e:	6a23      	ldr	r3, [r4, #32]
   14f30:	42b3      	cmp	r3, r6
   14f32:	d004      	beq.n	14f3e <Os::RawTime::now()+0x6e>
   14f34:	2125      	movs	r1, #37	; 0x25
   14f36:	482b      	ldr	r0, [pc, #172]	; (14fe4 <Os::RawTime::now()+0x114>)
   14f38:	f7ec fb68 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14f3c:	6a26      	ldr	r6, [r4, #32]
   14f3e:	6833      	ldr	r3, [r6, #0]
   14f40:	699b      	ldr	r3, [r3, #24]
   14f42:	42ab      	cmp	r3, r5
   14f44:	d146      	bne.n	14fd4 <Os::RawTime::now()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14f46:	f106 0408 	add.w	r4, r6, #8
   14f4a:	6a33      	ldr	r3, [r6, #32]
   14f4c:	42a3      	cmp	r3, r4
   14f4e:	d004      	beq.n	14f5a <Os::RawTime::now()+0x8a>
   14f50:	2125      	movs	r1, #37	; 0x25
   14f52:	4824      	ldr	r0, [pc, #144]	; (14fe4 <Os::RawTime::now()+0x114>)
   14f54:	f7ec fb5a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14f58:	6a34      	ldr	r4, [r6, #32]
   14f5a:	6823      	ldr	r3, [r4, #0]
   14f5c:	699b      	ldr	r3, [r3, #24]
   14f5e:	42ab      	cmp	r3, r5
   14f60:	d13c      	bne.n	14fdc <Os::RawTime::now()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14f62:	f104 0608 	add.w	r6, r4, #8
   14f66:	6a23      	ldr	r3, [r4, #32]
   14f68:	42b3      	cmp	r3, r6
   14f6a:	d004      	beq.n	14f76 <Os::RawTime::now()+0xa6>
   14f6c:	2125      	movs	r1, #37	; 0x25
   14f6e:	481d      	ldr	r0, [pc, #116]	; (14fe4 <Os::RawTime::now()+0x114>)
   14f70:	f7ec fb4c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14f74:	6a26      	ldr	r6, [r4, #32]
   14f76:	6833      	ldr	r3, [r6, #0]
   14f78:	699b      	ldr	r3, [r3, #24]
   14f7a:	42ab      	cmp	r3, r5
   14f7c:	d12a      	bne.n	14fd4 <Os::RawTime::now()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14f7e:	f106 0408 	add.w	r4, r6, #8
   14f82:	6a33      	ldr	r3, [r6, #32]
   14f84:	42a3      	cmp	r3, r4
   14f86:	d004      	beq.n	14f92 <Os::RawTime::now()+0xc2>
   14f88:	2125      	movs	r1, #37	; 0x25
   14f8a:	4816      	ldr	r0, [pc, #88]	; (14fe4 <Os::RawTime::now()+0x114>)
   14f8c:	f7ec fb3e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14f90:	6a34      	ldr	r4, [r6, #32]
   14f92:	6823      	ldr	r3, [r4, #0]
   14f94:	699b      	ldr	r3, [r3, #24]
   14f96:	42ab      	cmp	r3, r5
   14f98:	d120      	bne.n	14fdc <Os::RawTime::now()+0x10c>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14f9a:	f104 0608 	add.w	r6, r4, #8
   14f9e:	6a23      	ldr	r3, [r4, #32]
   14fa0:	42b3      	cmp	r3, r6
   14fa2:	d004      	beq.n	14fae <Os::RawTime::now()+0xde>
   14fa4:	2125      	movs	r1, #37	; 0x25
   14fa6:	480f      	ldr	r0, [pc, #60]	; (14fe4 <Os::RawTime::now()+0x114>)
   14fa8:	f7ec fb30 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14fac:	6a26      	ldr	r6, [r4, #32]
   14fae:	6833      	ldr	r3, [r6, #0]
   14fb0:	699b      	ldr	r3, [r3, #24]
   14fb2:	42ab      	cmp	r3, r5
   14fb4:	d10e      	bne.n	14fd4 <Os::RawTime::now()+0x104>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   14fb6:	f106 0008 	add.w	r0, r6, #8
   14fba:	6a33      	ldr	r3, [r6, #32]
   14fbc:	4283      	cmp	r3, r0
   14fbe:	d004      	beq.n	14fca <Os::RawTime::now()+0xfa>
   14fc0:	2125      	movs	r1, #37	; 0x25
   14fc2:	4808      	ldr	r0, [pc, #32]	; (14fe4 <Os::RawTime::now()+0x114>)
   14fc4:	f7ec fb22 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.now();
   14fc8:	6a30      	ldr	r0, [r6, #32]
   14fca:	6803      	ldr	r3, [r0, #0]
}
   14fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.now();
   14fd0:	699b      	ldr	r3, [r3, #24]
   14fd2:	4718      	bx	r3
   14fd4:	4630      	mov	r0, r6
}
   14fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.now();
   14fda:	4718      	bx	r3
   14fdc:	4620      	mov	r0, r4
}
   14fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_delegate.now();
   14fe2:	4718      	bx	r3
   14fe4:	20002420 	.word	0x20002420
   14fe8:	00014ed1 	.word	0x00014ed1

00014fec <Os::RawTime::serialize(Fw::SerializeBufferBase&) const>:

Fw::SerializeStatus RawTime::serialize(Fw::SerializeBufferBase& buffer) const {
   14fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   14ff0:	6a03      	ldr	r3, [r0, #32]
   14ff2:	f100 0408 	add.w	r4, r0, #8
Fw::SerializeStatus RawTime::serialize(Fw::SerializeBufferBase& buffer) const {
   14ff6:	460f      	mov	r7, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   14ff8:	42a3      	cmp	r3, r4
   14ffa:	d005      	beq.n	15008 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x1c>
   14ffc:	4605      	mov	r5, r0
   14ffe:	212f      	movs	r1, #47	; 0x2f
   15000:	4842      	ldr	r0, [pc, #264]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   15002:	f7ec fb03 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   15006:	6a2c      	ldr	r4, [r5, #32]
   15008:	6823      	ldr	r3, [r4, #0]
   1500a:	4d41      	ldr	r5, [pc, #260]	; (15110 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x124>)
   1500c:	681b      	ldr	r3, [r3, #0]
   1500e:	42ab      	cmp	r3, r5
   15010:	d176      	bne.n	15100 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15012:	f104 0608 	add.w	r6, r4, #8
   15016:	6a23      	ldr	r3, [r4, #32]
   15018:	42b3      	cmp	r3, r6
   1501a:	d004      	beq.n	15026 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x3a>
   1501c:	212f      	movs	r1, #47	; 0x2f
   1501e:	483b      	ldr	r0, [pc, #236]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   15020:	f7ec faf4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   15024:	6a26      	ldr	r6, [r4, #32]
   15026:	6833      	ldr	r3, [r6, #0]
   15028:	681b      	ldr	r3, [r3, #0]
   1502a:	42ab      	cmp	r3, r5
   1502c:	d163      	bne.n	150f6 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   1502e:	f106 0408 	add.w	r4, r6, #8
   15032:	6a33      	ldr	r3, [r6, #32]
   15034:	42a3      	cmp	r3, r4
   15036:	d004      	beq.n	15042 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x56>
   15038:	212f      	movs	r1, #47	; 0x2f
   1503a:	4834      	ldr	r0, [pc, #208]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   1503c:	f7ec fae6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   15040:	6a34      	ldr	r4, [r6, #32]
   15042:	6823      	ldr	r3, [r4, #0]
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	42ab      	cmp	r3, r5
   15048:	d15a      	bne.n	15100 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   1504a:	f104 0608 	add.w	r6, r4, #8
   1504e:	6a23      	ldr	r3, [r4, #32]
   15050:	42b3      	cmp	r3, r6
   15052:	d004      	beq.n	1505e <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x72>
   15054:	212f      	movs	r1, #47	; 0x2f
   15056:	482d      	ldr	r0, [pc, #180]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   15058:	f7ec fad8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   1505c:	6a26      	ldr	r6, [r4, #32]
   1505e:	6833      	ldr	r3, [r6, #0]
   15060:	681b      	ldr	r3, [r3, #0]
   15062:	42ab      	cmp	r3, r5
   15064:	d147      	bne.n	150f6 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15066:	f106 0408 	add.w	r4, r6, #8
   1506a:	6a33      	ldr	r3, [r6, #32]
   1506c:	42a3      	cmp	r3, r4
   1506e:	d004      	beq.n	1507a <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x8e>
   15070:	212f      	movs	r1, #47	; 0x2f
   15072:	4826      	ldr	r0, [pc, #152]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   15074:	f7ec faca 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   15078:	6a34      	ldr	r4, [r6, #32]
   1507a:	6823      	ldr	r3, [r4, #0]
   1507c:	681b      	ldr	r3, [r3, #0]
   1507e:	42ab      	cmp	r3, r5
   15080:	d13e      	bne.n	15100 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15082:	f104 0608 	add.w	r6, r4, #8
   15086:	6a23      	ldr	r3, [r4, #32]
   15088:	42b3      	cmp	r3, r6
   1508a:	d004      	beq.n	15096 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0xaa>
   1508c:	212f      	movs	r1, #47	; 0x2f
   1508e:	481f      	ldr	r0, [pc, #124]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   15090:	f7ec fabc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   15094:	6a26      	ldr	r6, [r4, #32]
   15096:	6833      	ldr	r3, [r6, #0]
   15098:	681b      	ldr	r3, [r3, #0]
   1509a:	42ab      	cmp	r3, r5
   1509c:	d12b      	bne.n	150f6 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   1509e:	f106 0408 	add.w	r4, r6, #8
   150a2:	6a33      	ldr	r3, [r6, #32]
   150a4:	42a3      	cmp	r3, r4
   150a6:	d004      	beq.n	150b2 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0xc6>
   150a8:	212f      	movs	r1, #47	; 0x2f
   150aa:	4818      	ldr	r0, [pc, #96]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   150ac:	f7ec faae 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   150b0:	6a34      	ldr	r4, [r6, #32]
   150b2:	6823      	ldr	r3, [r4, #0]
   150b4:	681b      	ldr	r3, [r3, #0]
   150b6:	42ab      	cmp	r3, r5
   150b8:	d122      	bne.n	15100 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   150ba:	f104 0608 	add.w	r6, r4, #8
   150be:	6a23      	ldr	r3, [r4, #32]
   150c0:	42b3      	cmp	r3, r6
   150c2:	d004      	beq.n	150ce <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0xe2>
   150c4:	212f      	movs	r1, #47	; 0x2f
   150c6:	4811      	ldr	r0, [pc, #68]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   150c8:	f7ec faa0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   150cc:	6a26      	ldr	r6, [r4, #32]
   150ce:	6833      	ldr	r3, [r6, #0]
   150d0:	681b      	ldr	r3, [r3, #0]
   150d2:	42ab      	cmp	r3, r5
   150d4:	d10f      	bne.n	150f6 <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   150d6:	f106 0008 	add.w	r0, r6, #8
   150da:	6a33      	ldr	r3, [r6, #32]
   150dc:	4283      	cmp	r3, r0
   150de:	d004      	beq.n	150ea <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0xfe>
   150e0:	212f      	movs	r1, #47	; 0x2f
   150e2:	480a      	ldr	r0, [pc, #40]	; (1510c <Os::RawTime::serialize(Fw::SerializeBufferBase&) const+0x120>)
   150e4:	f7ec fa92 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.serialize(buffer);
   150e8:	6a30      	ldr	r0, [r6, #32]
   150ea:	6803      	ldr	r3, [r0, #0]
   150ec:	4639      	mov	r1, r7
   150ee:	681b      	ldr	r3, [r3, #0]
}
   150f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.serialize(buffer);
   150f4:	4718      	bx	r3
   150f6:	4639      	mov	r1, r7
   150f8:	4630      	mov	r0, r6
}
   150fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.serialize(buffer);
   150fe:	4718      	bx	r3
   15100:	4639      	mov	r1, r7
   15102:	4620      	mov	r0, r4
}
   15104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.serialize(buffer);
   15108:	4718      	bx	r3
   1510a:	bf00      	nop
   1510c:	20002420 	.word	0x20002420
   15110:	00014fed 	.word	0x00014fed

00015114 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)>:

Fw::SerializeStatus RawTime::deserialize(Fw::SerializeBufferBase& buffer) {
   15114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15118:	6a03      	ldr	r3, [r0, #32]
   1511a:	f100 0408 	add.w	r4, r0, #8
Fw::SerializeStatus RawTime::deserialize(Fw::SerializeBufferBase& buffer) {
   1511e:	460f      	mov	r7, r1
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15120:	42a3      	cmp	r3, r4
   15122:	d005      	beq.n	15130 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x1c>
   15124:	4605      	mov	r5, r0
   15126:	2134      	movs	r1, #52	; 0x34
   15128:	4842      	ldr	r0, [pc, #264]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   1512a:	f7ec fa6f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   1512e:	6a2c      	ldr	r4, [r5, #32]
   15130:	6823      	ldr	r3, [r4, #0]
   15132:	4d41      	ldr	r5, [pc, #260]	; (15238 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x124>)
   15134:	685b      	ldr	r3, [r3, #4]
   15136:	42ab      	cmp	r3, r5
   15138:	d176      	bne.n	15228 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   1513a:	f104 0608 	add.w	r6, r4, #8
   1513e:	6a23      	ldr	r3, [r4, #32]
   15140:	42b3      	cmp	r3, r6
   15142:	d004      	beq.n	1514e <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x3a>
   15144:	2134      	movs	r1, #52	; 0x34
   15146:	483b      	ldr	r0, [pc, #236]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   15148:	f7ec fa60 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   1514c:	6a26      	ldr	r6, [r4, #32]
   1514e:	6833      	ldr	r3, [r6, #0]
   15150:	685b      	ldr	r3, [r3, #4]
   15152:	42ab      	cmp	r3, r5
   15154:	d163      	bne.n	1521e <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15156:	f106 0408 	add.w	r4, r6, #8
   1515a:	6a33      	ldr	r3, [r6, #32]
   1515c:	42a3      	cmp	r3, r4
   1515e:	d004      	beq.n	1516a <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x56>
   15160:	2134      	movs	r1, #52	; 0x34
   15162:	4834      	ldr	r0, [pc, #208]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   15164:	f7ec fa52 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   15168:	6a34      	ldr	r4, [r6, #32]
   1516a:	6823      	ldr	r3, [r4, #0]
   1516c:	685b      	ldr	r3, [r3, #4]
   1516e:	42ab      	cmp	r3, r5
   15170:	d15a      	bne.n	15228 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   15172:	f104 0608 	add.w	r6, r4, #8
   15176:	6a23      	ldr	r3, [r4, #32]
   15178:	42b3      	cmp	r3, r6
   1517a:	d004      	beq.n	15186 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x72>
   1517c:	2134      	movs	r1, #52	; 0x34
   1517e:	482d      	ldr	r0, [pc, #180]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   15180:	f7ec fa44 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   15184:	6a26      	ldr	r6, [r4, #32]
   15186:	6833      	ldr	r3, [r6, #0]
   15188:	685b      	ldr	r3, [r3, #4]
   1518a:	42ab      	cmp	r3, r5
   1518c:	d147      	bne.n	1521e <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   1518e:	f106 0408 	add.w	r4, r6, #8
   15192:	6a33      	ldr	r3, [r6, #32]
   15194:	42a3      	cmp	r3, r4
   15196:	d004      	beq.n	151a2 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x8e>
   15198:	2134      	movs	r1, #52	; 0x34
   1519a:	4826      	ldr	r0, [pc, #152]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   1519c:	f7ec fa36 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   151a0:	6a34      	ldr	r4, [r6, #32]
   151a2:	6823      	ldr	r3, [r4, #0]
   151a4:	685b      	ldr	r3, [r3, #4]
   151a6:	42ab      	cmp	r3, r5
   151a8:	d13e      	bne.n	15228 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   151aa:	f104 0608 	add.w	r6, r4, #8
   151ae:	6a23      	ldr	r3, [r4, #32]
   151b0:	42b3      	cmp	r3, r6
   151b2:	d004      	beq.n	151be <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0xaa>
   151b4:	2134      	movs	r1, #52	; 0x34
   151b6:	481f      	ldr	r0, [pc, #124]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   151b8:	f7ec fa28 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   151bc:	6a26      	ldr	r6, [r4, #32]
   151be:	6833      	ldr	r3, [r6, #0]
   151c0:	685b      	ldr	r3, [r3, #4]
   151c2:	42ab      	cmp	r3, r5
   151c4:	d12b      	bne.n	1521e <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   151c6:	f106 0408 	add.w	r4, r6, #8
   151ca:	6a33      	ldr	r3, [r6, #32]
   151cc:	42a3      	cmp	r3, r4
   151ce:	d004      	beq.n	151da <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0xc6>
   151d0:	2134      	movs	r1, #52	; 0x34
   151d2:	4818      	ldr	r0, [pc, #96]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   151d4:	f7ec fa1a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   151d8:	6a34      	ldr	r4, [r6, #32]
   151da:	6823      	ldr	r3, [r4, #0]
   151dc:	685b      	ldr	r3, [r3, #4]
   151de:	42ab      	cmp	r3, r5
   151e0:	d122      	bne.n	15228 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x114>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   151e2:	f104 0608 	add.w	r6, r4, #8
   151e6:	6a23      	ldr	r3, [r4, #32]
   151e8:	42b3      	cmp	r3, r6
   151ea:	d004      	beq.n	151f6 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0xe2>
   151ec:	2134      	movs	r1, #52	; 0x34
   151ee:	4811      	ldr	r0, [pc, #68]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   151f0:	f7ec fa0c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   151f4:	6a26      	ldr	r6, [r4, #32]
   151f6:	6833      	ldr	r3, [r6, #0]
   151f8:	685b      	ldr	r3, [r3, #4]
   151fa:	42ab      	cmp	r3, r5
   151fc:	d10f      	bne.n	1521e <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x10a>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   151fe:	f106 0008 	add.w	r0, r6, #8
   15202:	6a33      	ldr	r3, [r6, #32]
   15204:	4283      	cmp	r3, r0
   15206:	d004      	beq.n	15212 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0xfe>
   15208:	2134      	movs	r1, #52	; 0x34
   1520a:	480a      	ldr	r0, [pc, #40]	; (15234 <Os::RawTime::deserialize(Fw::SerializeBufferBase&)+0x120>)
   1520c:	f7ec f9fe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.deserialize(buffer);
   15210:	6a30      	ldr	r0, [r6, #32]
   15212:	6803      	ldr	r3, [r0, #0]
   15214:	4639      	mov	r1, r7
   15216:	685b      	ldr	r3, [r3, #4]
}
   15218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.deserialize(buffer);
   1521c:	4718      	bx	r3
   1521e:	4639      	mov	r1, r7
   15220:	4630      	mov	r0, r6
}
   15222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.deserialize(buffer);
   15226:	4718      	bx	r3
   15228:	4639      	mov	r1, r7
   1522a:	4620      	mov	r0, r4
}
   1522c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return this->m_delegate.deserialize(buffer);
   15230:	4718      	bx	r3
   15232:	bf00      	nop
   15234:	20002420 	.word	0x20002420
   15238:	00015115 	.word	0x00015115

0001523c <Os::RawTime::RawTime()>:
RawTime::RawTime() : m_handle_storage(), m_delegate(*RawTimeInterface::getDelegate(m_handle_storage)) {
   1523c:	b538      	push	{r3, r4, r5, lr}
   1523e:	4605      	mov	r5, r0
    RawTimeInterface() = default;
   15240:	f7eb f976 	bl	530 <Fw::Serializable::Serializable()>
   15244:	2100      	movs	r1, #0
   15246:	4b0b      	ldr	r3, [pc, #44]	; (15274 <Os::RawTime::RawTime()+0x38>)
   15248:	462c      	mov	r4, r5
   1524a:	f844 3b08 	str.w	r3, [r4], #8
   1524e:	4620      	mov	r0, r4
   15250:	60a9      	str	r1, [r5, #8]
   15252:	6061      	str	r1, [r4, #4]
   15254:	60a1      	str	r1, [r4, #8]
   15256:	60e1      	str	r1, [r4, #12]
   15258:	6121      	str	r1, [r4, #16]
   1525a:	6161      	str	r1, [r4, #20]
   1525c:	f7ea ffa6 	bl	1ac <Os::RawTimeInterface::getDelegate(unsigned char (&) [24], Os::RawTimeInterface const*)>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   15260:	42a0      	cmp	r0, r4
RawTime::RawTime() : m_handle_storage(), m_delegate(*RawTimeInterface::getDelegate(m_handle_storage)) {
   15262:	6228      	str	r0, [r5, #32]
    FW_ASSERT(&this->m_delegate == reinterpret_cast<RawTimeInterface*>(&this->m_handle_storage[0]));
   15264:	d003      	beq.n	1526e <Os::RawTime::RawTime()+0x32>
   15266:	210b      	movs	r1, #11
   15268:	4803      	ldr	r0, [pc, #12]	; (15278 <Os::RawTime::RawTime()+0x3c>)
   1526a:	f7ec f9cf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
}
   1526e:	4628      	mov	r0, r5
   15270:	bd38      	pop	{r3, r4, r5, pc}
   15272:	bf00      	nop
   15274:	2000365c 	.word	0x2000365c
   15278:	20002420 	.word	0x20002420

0001527c <Os::RawTime::operator=(Os::RawTime const&)>:
    if (this != &other) {
   1527c:	4288      	cmp	r0, r1
RawTime& RawTime::operator=(const RawTime& other) {
   1527e:	b510      	push	{r4, lr}
   15280:	4604      	mov	r4, r0
    if (this != &other) {
   15282:	d003      	beq.n	1528c <Os::RawTime::operator=(Os::RawTime const&)+0x10>
        this->m_delegate = *RawTimeInterface::getDelegate(m_handle_storage, &other.m_delegate);
   15284:	6a09      	ldr	r1, [r1, #32]
   15286:	3008      	adds	r0, #8
   15288:	f7ea ff90 	bl	1ac <Os::RawTimeInterface::getDelegate(unsigned char (&) [24], Os::RawTimeInterface const*)>
}
   1528c:	4620      	mov	r0, r4
   1528e:	bd10      	pop	{r4, pc}

00015290 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const>:

RawTime::Status RawTime::getDiffUsec(const RawTime& other, U32& result) const {
   15290:	b5f0      	push	{r4, r5, r6, r7, lr}
   15292:	b085      	sub	sp, #20
   15294:	4604      	mov	r4, r0
   15296:	460d      	mov	r5, r1
   15298:	4616      	mov	r6, r2
            TimeInterval() = default; // !< Default constructor
   1529a:	a801      	add	r0, sp, #4
   1529c:	4f19      	ldr	r7, [pc, #100]	; (15304 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x74>)
   1529e:	f7eb f947 	bl	530 <Fw::Serializable::Serializable()>
    FW_ASSERT(&this->m_delegate == reinterpret_cast<const RawTimeInterface*>(&this->m_handle_storage[0]));
   152a2:	f104 0008 	add.w	r0, r4, #8
   152a6:	6a23      	ldr	r3, [r4, #32]
   152a8:	9701      	str	r7, [sp, #4]
   152aa:	4283      	cmp	r3, r0
   152ac:	d004      	beq.n	152b8 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x28>
   152ae:	212a      	movs	r1, #42	; 0x2a
   152b0:	4815      	ldr	r0, [pc, #84]	; (15308 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x78>)
   152b2:	f7ec f9ab 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_delegate.getTimeInterval(other, result);
   152b6:	6a20      	ldr	r0, [r4, #32]
   152b8:	6803      	ldr	r3, [r0, #0]
   152ba:	4629      	mov	r1, r5
   152bc:	aa01      	add	r2, sp, #4
   152be:	69db      	ldr	r3, [r3, #28]
   152c0:	4798      	blx	r3
    Fw::TimeInterval interval;
    Status status = this->getTimeInterval(other, interval);
    if (status != Status::OP_OK) {
   152c2:	4604      	mov	r4, r0
   152c4:	b130      	cbz	r0, 152d4 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x44>
            ~TimeInterval() = default; // !< Default destructor
   152c6:	a801      	add	r0, sp, #4
   152c8:	9701      	str	r7, [sp, #4]
   152ca:	f7eb f937 	bl	53c <Fw::Serializable::~Serializable()>
        return Status::OP_OVERFLOW;
    }
    // No overflow, we can safely add values to get total microseconds
    result = secToUsec + useconds;
    return status;
}
   152ce:	4620      	mov	r0, r4
   152d0:	b005      	add	sp, #20
   152d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    U32 seconds = interval.getSeconds();
   152d4:	a801      	add	r0, sp, #4
   152d6:	f002 fbb7 	bl	17a48 <Fw::TimeInterval::getSeconds() const>
   152da:	4605      	mov	r5, r0
    U32 useconds = interval.getUSeconds();
   152dc:	a801      	add	r0, sp, #4
   152de:	f002 fbb5 	bl	17a4c <Fw::TimeInterval::getUSeconds() const>
    if (seconds > (std::numeric_limits<U32>::max() / 1000000)) {
   152e2:	f241 03c6 	movw	r3, #4294	; 0x10c6
   152e6:	429d      	cmp	r5, r3
   152e8:	d806      	bhi.n	152f8 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x68>
    U32 secToUsec = seconds * 1000000;
   152ea:	4b08      	ldr	r3, [pc, #32]	; (1530c <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x7c>)
   152ec:	fb03 f505 	mul.w	r5, r3, r5
    if (secToUsec > (std::numeric_limits<U32>::max() - useconds)) {
   152f0:	1940      	adds	r0, r0, r5
   152f2:	d201      	bcs.n	152f8 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x68>
    result = secToUsec + useconds;
   152f4:	6030      	str	r0, [r6, #0]
    return status;
   152f6:	e7e6      	b.n	152c6 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x36>
        result = std::numeric_limits<U32>::max();
   152f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        return Status::OP_OVERFLOW;
   152fc:	2401      	movs	r4, #1
        result = std::numeric_limits<U32>::max();
   152fe:	6033      	str	r3, [r6, #0]
        return Status::OP_OVERFLOW;
   15300:	e7e1      	b.n	152c6 <Os::RawTime::getDiffUsec(Os::RawTime const&, unsigned long&) const+0x36>
   15302:	bf00      	nop
   15304:	20002d60 	.word	0x20002d60
   15308:	20002420 	.word	0x20002420
   1530c:	000f4240 	.word	0x000f4240

00015310 <Fw::Buffer::toString(Fw::StringBase&) const>:
    }
    return stat;
}

#if FW_SERIALIZABLE_TO_STRING
void Buffer::toString(Fw::StringBase& text) const {
   15310:	4602      	mov	r2, r0
   15312:	4608      	mov	r0, r1
    static const char * formatString = "(data = %p, size = %u, context = %u)";
    text.format(formatString, this->m_bufferData, this->m_size, this->m_context);
   15314:	4905      	ldr	r1, [pc, #20]	; (1532c <Fw::Buffer::toString(Fw::StringBase&) const+0x1c>)
void Buffer::toString(Fw::StringBase& text) const {
   15316:	b510      	push	{r4, lr}
    text.format(formatString, this->m_bufferData, this->m_size, this->m_context);
   15318:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
void Buffer::toString(Fw::StringBase& text) const {
   1531c:	b082      	sub	sp, #8
    text.format(formatString, this->m_bufferData, this->m_size, this->m_context);
   1531e:	6992      	ldr	r2, [r2, #24]
   15320:	9400      	str	r4, [sp, #0]
   15322:	f7eb ffb3 	bl	128c <Fw::StringBase::format(char const*, ...)>
}
   15326:	b002      	add	sp, #8
   15328:	bd10      	pop	{r4, pc}
   1532a:	bf00      	nop
   1532c:	200023c4 	.word	0x200023c4

00015330 <Fw::Buffer::~Buffer()>:
   15330:	4a06      	ldr	r2, [pc, #24]	; (1534c <Fw::Buffer::~Buffer()+0x1c>)
   15332:	4b07      	ldr	r3, [pc, #28]	; (15350 <Fw::Buffer::~Buffer()+0x20>)
   15334:	b510      	push	{r4, lr}
   15336:	4604      	mov	r4, r0
   15338:	6002      	str	r2, [r0, #0]
   1533a:	f840 3f04 	str.w	r3, [r0, #4]!
   1533e:	f7eb f907 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15342:	4620      	mov	r0, r4
   15344:	f7eb f8fa 	bl	53c <Fw::Serializable::~Serializable()>
   15348:	4620      	mov	r0, r4
   1534a:	bd10      	pop	{r4, pc}
   1534c:	200032c0 	.word	0x200032c0
   15350:	20003214 	.word	0x20003214

00015354 <Fw::Buffer::serialize(Fw::SerializeBufferBase&) const>:
Fw::SerializeStatus Buffer::serialize(Fw::SerializeBufferBase& buffer) const {
   15354:	b538      	push	{r3, r4, r5, lr}
   15356:	460c      	mov	r4, r1
   15358:	4605      	mov	r5, r0
    stat = buffer.serialize(reinterpret_cast<POINTER_CAST>(this->m_bufferData));
   1535a:	6981      	ldr	r1, [r0, #24]
   1535c:	4620      	mov	r0, r4
   1535e:	f7eb f97d 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    if (stat != Fw::FW_SERIALIZE_OK) {
   15362:	b100      	cbz	r0, 15366 <Fw::Buffer::serialize(Fw::SerializeBufferBase&) const+0x12>
}
   15364:	bd38      	pop	{r3, r4, r5, pc}
    stat = buffer.serialize(this->m_size);
   15366:	69e9      	ldr	r1, [r5, #28]
   15368:	4620      	mov	r0, r4
   1536a:	f7eb f977 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
    if (stat != Fw::FW_SERIALIZE_OK) {
   1536e:	2800      	cmp	r0, #0
   15370:	d1f8      	bne.n	15364 <Fw::Buffer::serialize(Fw::SerializeBufferBase&) const+0x10>
    stat = buffer.serialize(this->m_context);
   15372:	6a29      	ldr	r1, [r5, #32]
   15374:	4620      	mov	r0, r4
}
   15376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    stat = buffer.serialize(this->m_context);
   1537a:	f7eb b96f 	b.w	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
   1537e:	bf00      	nop

00015380 <Fw::Buffer::deserialize(Fw::SerializeBufferBase&)>:
Fw::SerializeStatus Buffer::deserialize(Fw::SerializeBufferBase& buffer) {
   15380:	b570      	push	{r4, r5, r6, lr}
   15382:	460d      	mov	r5, r1
   15384:	b082      	sub	sp, #8
   15386:	4606      	mov	r6, r0
    stat = buffer.deserialize(pointer);
   15388:	a901      	add	r1, sp, #4
   1538a:	4628      	mov	r0, r5
   1538c:	f7eb fc98 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (stat != Fw::FW_SERIALIZE_OK) {
   15390:	4604      	mov	r4, r0
   15392:	b110      	cbz	r0, 1539a <Fw::Buffer::deserialize(Fw::SerializeBufferBase&)+0x1a>
}
   15394:	4620      	mov	r0, r4
   15396:	b002      	add	sp, #8
   15398:	bd70      	pop	{r4, r5, r6, pc}
    this->m_bufferData = reinterpret_cast<U8*>(pointer);
   1539a:	9b01      	ldr	r3, [sp, #4]
    stat = buffer.deserialize(this->m_size);
   1539c:	f106 011c 	add.w	r1, r6, #28
   153a0:	4628      	mov	r0, r5
    this->m_bufferData = reinterpret_cast<U8*>(pointer);
   153a2:	61b3      	str	r3, [r6, #24]
    stat = buffer.deserialize(this->m_size);
   153a4:	f7eb fc8c 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (stat != Fw::FW_SERIALIZE_OK) {
   153a8:	4604      	mov	r4, r0
   153aa:	2800      	cmp	r0, #0
   153ac:	d1f2      	bne.n	15394 <Fw::Buffer::deserialize(Fw::SerializeBufferBase&)+0x14>
    stat = buffer.deserialize(this->m_context);
   153ae:	f106 0120 	add.w	r1, r6, #32
   153b2:	4628      	mov	r0, r5
   153b4:	f7eb fc84 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (stat != Fw::FW_SERIALIZE_OK) {
   153b8:	4604      	mov	r4, r0
   153ba:	2800      	cmp	r0, #0
   153bc:	d1ea      	bne.n	15394 <Fw::Buffer::deserialize(Fw::SerializeBufferBase&)+0x14>
    if (this->m_bufferData != nullptr) {
   153be:	69b1      	ldr	r1, [r6, #24]
   153c0:	2900      	cmp	r1, #0
   153c2:	d0e7      	beq.n	15394 <Fw::Buffer::deserialize(Fw::SerializeBufferBase&)+0x14>
        this->m_serialize_repr.setExtBuffer(this->m_bufferData, this->m_size);
   153c4:	69f2      	ldr	r2, [r6, #28]
   153c6:	1d30      	adds	r0, r6, #4
   153c8:	f7eb fecc 	bl	1164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>
   153cc:	e7e2      	b.n	15394 <Fw::Buffer::deserialize(Fw::SerializeBufferBase&)+0x14>
   153ce:	bf00      	nop

000153d0 <Fw::Buffer::~Buffer()>:
   153d0:	4a08      	ldr	r2, [pc, #32]	; (153f4 <Fw::Buffer::~Buffer()+0x24>)
   153d2:	4b09      	ldr	r3, [pc, #36]	; (153f8 <Fw::Buffer::~Buffer()+0x28>)
   153d4:	b510      	push	{r4, lr}
   153d6:	4604      	mov	r4, r0
   153d8:	6002      	str	r2, [r0, #0]
   153da:	f840 3f04 	str.w	r3, [r0, #4]!
   153de:	f7eb f8b7 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   153e2:	4620      	mov	r0, r4
   153e4:	f7eb f8aa 	bl	53c <Fw::Serializable::~Serializable()>
   153e8:	4620      	mov	r0, r4
   153ea:	2124      	movs	r1, #36	; 0x24
   153ec:	f003 fc70 	bl	18cd0 <operator delete(void*, unsigned int)>
   153f0:	4620      	mov	r0, r4
   153f2:	bd10      	pop	{r4, pc}
   153f4:	200032c0 	.word	0x200032c0
   153f8:	20003214 	.word	0x20003214

000153fc <Fw::Buffer::Buffer()>:
Buffer::Buffer(): Serializable(),
   153fc:	b510      	push	{r4, lr}
   153fe:	4604      	mov	r4, r0
    m_context(0xFFFFFFFF)
   15400:	f7eb f896 	bl	530 <Fw::Serializable::Serializable()>
   15404:	4b06      	ldr	r3, [pc, #24]	; (15420 <Fw::Buffer::Buffer()+0x24>)
   15406:	4620      	mov	r0, r4
   15408:	f840 3b04 	str.w	r3, [r0], #4
    m_serialize_repr(),
   1540c:	f7eb fea0 	bl	1150 <Fw::ExternalSerializeBuffer::ExternalSerializeBuffer()>
    m_bufferData(nullptr),
   15410:	2300      	movs	r3, #0
    m_context(0xFFFFFFFF)
   15412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{}
   15416:	4620      	mov	r0, r4
    m_size(0),
   15418:	e9c4 3306 	strd	r3, r3, [r4, #24]
    m_context(0xFFFFFFFF)
   1541c:	6222      	str	r2, [r4, #32]
{}
   1541e:	bd10      	pop	{r4, pc}
   15420:	200032c0 	.word	0x200032c0

00015424 <Fw::Buffer::Buffer(Fw::Buffer const&)>:
Buffer::Buffer(const Buffer& src) : Serializable(),
   15424:	b570      	push	{r4, r5, r6, lr}
   15426:	4604      	mov	r4, r0
   15428:	460d      	mov	r5, r1
    m_context(src.m_context)
   1542a:	f7eb f881 	bl	530 <Fw::Serializable::Serializable()>
   1542e:	4b09      	ldr	r3, [pc, #36]	; (15454 <Fw::Buffer::Buffer(Fw::Buffer const&)+0x30>)
   15430:	4626      	mov	r6, r4
   15432:	f846 3b04 	str.w	r3, [r6], #4
    m_serialize_repr(),
   15436:	4630      	mov	r0, r6
   15438:	f7eb fe8a 	bl	1150 <Fw::ExternalSerializeBuffer::ExternalSerializeBuffer()>
    m_context(src.m_context)
   1543c:	6a2b      	ldr	r3, [r5, #32]
    m_size(src.m_size),
   1543e:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
    m_context(src.m_context)
   15442:	6223      	str	r3, [r4, #32]
    m_size(src.m_size),
   15444:	e9c4 1206 	strd	r1, r2, [r4, #24]
    if(src.m_bufferData != nullptr){
   15448:	b111      	cbz	r1, 15450 <Fw::Buffer::Buffer(Fw::Buffer const&)+0x2c>
        this->m_serialize_repr.setExtBuffer(src.m_bufferData, src.m_size);
   1544a:	4630      	mov	r0, r6
   1544c:	f7eb fe8a 	bl	1164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>
}
   15450:	4620      	mov	r0, r4
   15452:	bd70      	pop	{r4, r5, r6, pc}
   15454:	200032c0 	.word	0x200032c0

00015458 <Fw::Buffer::Buffer(unsigned char*, unsigned long, unsigned long)>:
Buffer::Buffer(U8* data, U32 size, U32 context) : Serializable(),
   15458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1545c:	4604      	mov	r4, r0
   1545e:	460d      	mov	r5, r1
   15460:	4617      	mov	r7, r2
   15462:	4698      	mov	r8, r3
    m_context(context)
   15464:	4626      	mov	r6, r4
   15466:	f7eb f863 	bl	530 <Fw::Serializable::Serializable()>
   1546a:	4b09      	ldr	r3, [pc, #36]	; (15490 <Fw::Buffer::Buffer(unsigned char*, unsigned long, unsigned long)+0x38>)
   1546c:	f846 3b04 	str.w	r3, [r6], #4
    m_serialize_repr(),
   15470:	4630      	mov	r0, r6
   15472:	f7eb fe6d 	bl	1150 <Fw::ExternalSerializeBuffer::ExternalSerializeBuffer()>
    m_context(context)
   15476:	f8c4 8020 	str.w	r8, [r4, #32]
    m_size(size),
   1547a:	e9c4 5706 	strd	r5, r7, [r4, #24]
    if(m_bufferData != nullptr){
   1547e:	b125      	cbz	r5, 1548a <Fw::Buffer::Buffer(unsigned char*, unsigned long, unsigned long)+0x32>
        this->m_serialize_repr.setExtBuffer(this->m_bufferData, this->m_size);
   15480:	463a      	mov	r2, r7
   15482:	4629      	mov	r1, r5
   15484:	4630      	mov	r0, r6
   15486:	f7eb fe6d 	bl	1164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>
}
   1548a:	4620      	mov	r0, r4
   1548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15490:	200032c0 	.word	0x200032c0

00015494 <Fw::Buffer::operator=(Fw::Buffer const&)>:
    if (this != &src) {
   15494:	4288      	cmp	r0, r1
Buffer& Buffer::operator=(const Buffer& src) {
   15496:	b538      	push	{r3, r4, r5, lr}
   15498:	4604      	mov	r4, r0
    if (this != &src) {
   1549a:	d00a      	beq.n	154b2 <Fw::Buffer::operator=(Fw::Buffer const&)+0x1e>
        this->set(src.m_bufferData, src.m_size, src.m_context);
   1549c:	6a0d      	ldr	r5, [r1, #32]
   1549e:	e9d1 3206 	ldrd	r3, r2, [r1, #24]
    this->m_size = size;
   154a2:	e9c0 3206 	strd	r3, r2, [r0, #24]
    if (m_bufferData != nullptr) {
   154a6:	b11b      	cbz	r3, 154b0 <Fw::Buffer::operator=(Fw::Buffer const&)+0x1c>
        this->m_serialize_repr.setExtBuffer(this->m_bufferData, this->m_size);
   154a8:	4619      	mov	r1, r3
   154aa:	3004      	adds	r0, #4
   154ac:	f7eb fe5a 	bl	1164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>
    this->m_context = context;
   154b0:	6225      	str	r5, [r4, #32]
}
   154b2:	4620      	mov	r0, r4
   154b4:	bd38      	pop	{r3, r4, r5, pc}
   154b6:	bf00      	nop

000154b8 <Fw::Buffer::getData() const>:
}
   154b8:	6980      	ldr	r0, [r0, #24]
   154ba:	4770      	bx	lr

000154bc <Fw::Buffer::getSize() const>:
}
   154bc:	69c0      	ldr	r0, [r0, #28]
   154be:	4770      	bx	lr

000154c0 <Fw::Buffer::getContext() const>:
}
   154c0:	6a00      	ldr	r0, [r0, #32]
   154c2:	4770      	bx	lr

000154c4 <Fw::Buffer::setData(unsigned char*)>:
    this->m_bufferData = data;
   154c4:	6181      	str	r1, [r0, #24]
    if (m_bufferData != nullptr) {
   154c6:	b119      	cbz	r1, 154d0 <Fw::Buffer::setData(unsigned char*)+0xc>
        this->m_serialize_repr.setExtBuffer(this->m_bufferData, this->m_size);
   154c8:	69c2      	ldr	r2, [r0, #28]
   154ca:	3004      	adds	r0, #4
   154cc:	f7eb be4a 	b.w	1164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>
}
   154d0:	4770      	bx	lr
   154d2:	bf00      	nop

000154d4 <Fw::Buffer::setSize(unsigned long)>:
void Buffer::setSize(const U32 size) {
   154d4:	460a      	mov	r2, r1
    if (m_bufferData != nullptr) {
   154d6:	6981      	ldr	r1, [r0, #24]
    this->m_size = size;
   154d8:	61c2      	str	r2, [r0, #28]
    if (m_bufferData != nullptr) {
   154da:	b111      	cbz	r1, 154e2 <Fw::Buffer::setSize(unsigned long)+0xe>
        this->m_serialize_repr.setExtBuffer(this->m_bufferData, this->m_size);
   154dc:	3004      	adds	r0, #4
   154de:	f7eb be41 	b.w	1164 <Fw::ExternalSerializeBuffer::setExtBuffer(unsigned char*, unsigned long)>
}
   154e2:	4770      	bx	lr

000154e4 <Fw::Buffer::getSerializeRepr()>:
}
   154e4:	3004      	adds	r0, #4
   154e6:	4770      	bx	lr

000154e8 <Fw::InputBufferGetPort::invokeSerial(Fw::SerializeBufferBase&)>:
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    // For ports with a return type, invokeSerial is not used
    (void) _buffer;

    FW_ASSERT(0);
   154e8:	2142      	movs	r1, #66	; 0x42
   154ea:	4803      	ldr	r0, [pc, #12]	; (154f8 <Fw::InputBufferGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x10>)
  {
   154ec:	b508      	push	{r3, lr}
    FW_ASSERT(0);
   154ee:	f7ec f88d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return Fw::FW_SERIALIZE_OK;
  }
   154f2:	2000      	movs	r0, #0
   154f4:	bd08      	pop	{r3, pc}
   154f6:	bf00      	nop
   154f8:	20000a28 	.word	0x20000a28

000154fc <Fw::OutputBufferGetPort::~OutputBufferGetPort()>:
  };

  //! Output BufferGet port
  //! Port for getting a buffer
  //! Returns the buffer
  class OutputBufferGetPort :
   154fc:	4b03      	ldr	r3, [pc, #12]	; (1550c <Fw::OutputBufferGetPort::~OutputBufferGetPort()+0x10>)
   154fe:	b510      	push	{r4, lr}
   15500:	4604      	mov	r4, r0
   15502:	6003      	str	r3, [r0, #0]
   15504:	f002 fbfa 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15508:	4620      	mov	r0, r4
   1550a:	bd10      	pop	{r4, pc}
   1550c:	20003150 	.word	0x20003150

00015510 <Fw::OutputBufferGetPort::~OutputBufferGetPort()>:
   15510:	4b05      	ldr	r3, [pc, #20]	; (15528 <Fw::OutputBufferGetPort::~OutputBufferGetPort()+0x18>)
   15512:	b510      	push	{r4, lr}
   15514:	4604      	mov	r4, r0
   15516:	6003      	str	r3, [r0, #0]
   15518:	f002 fbf0 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   1551c:	216c      	movs	r1, #108	; 0x6c
   1551e:	4620      	mov	r0, r4
   15520:	f003 fbd6 	bl	18cd0 <operator delete(void*, unsigned int)>
   15524:	4620      	mov	r0, r4
   15526:	bd10      	pop	{r4, pc}
   15528:	20003150 	.word	0x20003150

0001552c <Fw::InputBufferGetPort::~InputBufferGetPort()>:
  class InputBufferGetPort :
   1552c:	4b03      	ldr	r3, [pc, #12]	; (1553c <Fw::InputBufferGetPort::~InputBufferGetPort()+0x10>)
   1552e:	b510      	push	{r4, lr}
   15530:	4604      	mov	r4, r0
   15532:	6003      	str	r3, [r0, #0]
   15534:	f002 fbc4 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   15538:	4620      	mov	r0, r4
   1553a:	bd10      	pop	{r4, pc}
   1553c:	200030ec 	.word	0x200030ec

00015540 <Fw::InputBufferGetPort::~InputBufferGetPort()>:
   15540:	4b05      	ldr	r3, [pc, #20]	; (15558 <Fw::InputBufferGetPort::~InputBufferGetPort()+0x18>)
   15542:	b510      	push	{r4, lr}
   15544:	4604      	mov	r4, r0
   15546:	6003      	str	r3, [r0, #0]
   15548:	f002 fbba 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   1554c:	2170      	movs	r1, #112	; 0x70
   1554e:	4620      	mov	r0, r4
   15550:	f003 fbbe 	bl	18cd0 <operator delete(void*, unsigned int)>
   15554:	4620      	mov	r0, r4
   15556:	bd10      	pop	{r4, pc}
   15558:	200030ec 	.word	0x200030ec

0001555c <Fw::InputBufferGetPort::InputBufferGetPort()>:
  InputBufferGetPort ::
   1555c:	b510      	push	{r4, lr}
   1555e:	4604      	mov	r4, r0
      m_func(nullptr)
   15560:	f002 fb9e 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   15564:	4a02      	ldr	r2, [pc, #8]	; (15570 <Fw::InputBufferGetPort::InputBufferGetPort()+0x14>)
   15566:	2300      	movs	r3, #0
  }
   15568:	4620      	mov	r0, r4
      m_func(nullptr)
   1556a:	6022      	str	r2, [r4, #0]
   1556c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   1556e:	bd10      	pop	{r4, pc}
   15570:	200030ec 	.word	0x200030ec

00015574 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))>:
  {
   15574:	b570      	push	{r4, r5, r6, lr}
   15576:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   15578:	460d      	mov	r5, r1
  {
   1557a:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   1557c:	b121      	cbz	r1, 15588 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   1557e:	b14e      	cbz	r6, 15594 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x20>
    this->m_comp = callComp;
   15580:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   15582:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   15584:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   15586:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   15588:	2125      	movs	r1, #37	; 0x25
   1558a:	4806      	ldr	r0, [pc, #24]	; (155a4 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   1558c:	f7ec f83e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   15590:	2e00      	cmp	r6, #0
   15592:	d1f5      	bne.n	15580 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))+0xc>
   15594:	2126      	movs	r1, #38	; 0x26
   15596:	4803      	ldr	r0, [pc, #12]	; (155a4 <Fw::InputBufferGetPort::addCallComp(Fw::PassiveComponentBase*, Fw::Buffer (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   15598:	f7ec f838 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   1559c:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   1559e:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   155a0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   155a2:	bd70      	pop	{r4, r5, r6, pc}
   155a4:	20000a28 	.word	0x20000a28

000155a8 <Fw::InputBufferGetPort::invoke(unsigned long)>:
  {
   155a8:	b570      	push	{r4, r5, r6, lr}
   155aa:	460c      	mov	r4, r1
   155ac:	b082      	sub	sp, #8
   155ae:	4605      	mov	r5, r0
    this->trace();
   155b0:	4608      	mov	r0, r1
  {
   155b2:	9201      	str	r2, [sp, #4]
    this->trace();
   155b4:	f002 fc50 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   155b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   155ba:	9b01      	ldr	r3, [sp, #4]
   155bc:	b142      	cbz	r2, 155d0 <Fw::InputBufferGetPort::invoke(unsigned long)+0x28>
    FW_ASSERT(this->m_func != nullptr);
   155be:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   155c0:	b176      	cbz	r6, 155e0 <Fw::InputBufferGetPort::invoke(unsigned long)+0x38>
    return this->m_func(this->m_comp, this->m_portNum, size);
   155c2:	4628      	mov	r0, r5
   155c4:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
   155c8:	47b0      	blx	r6
  }
   155ca:	4628      	mov	r0, r5
   155cc:	b002      	add	sp, #8
   155ce:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
   155d0:	2134      	movs	r1, #52	; 0x34
   155d2:	4807      	ldr	r0, [pc, #28]	; (155f0 <Fw::InputBufferGetPort::invoke(unsigned long)+0x48>)
   155d4:	f7ec f81a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   155d8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   155da:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   155dc:	2e00      	cmp	r6, #0
   155de:	d1f0      	bne.n	155c2 <Fw::InputBufferGetPort::invoke(unsigned long)+0x1a>
   155e0:	2135      	movs	r1, #53	; 0x35
   155e2:	4803      	ldr	r0, [pc, #12]	; (155f0 <Fw::InputBufferGetPort::invoke(unsigned long)+0x48>)
   155e4:	9301      	str	r3, [sp, #4]
   155e6:	f7ec f811 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, size);
   155ea:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   155ec:	9b01      	ldr	r3, [sp, #4]
   155ee:	e7e8      	b.n	155c2 <Fw::InputBufferGetPort::invoke(unsigned long)+0x1a>
   155f0:	20000a28 	.word	0x20000a28

000155f4 <Fw::OutputBufferGetPort::OutputBufferGetPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputBufferGetPort ::
   155f4:	b510      	push	{r4, lr}
   155f6:	4604      	mov	r4, r0
    OutputBufferGetPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   155f8:	f002 fb98 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   155fc:	4a02      	ldr	r2, [pc, #8]	; (15608 <Fw::OutputBufferGetPort::OutputBufferGetPort()+0x14>)
   155fe:	2300      	movs	r3, #0
  {

  }
   15600:	4620      	mov	r0, r4
      m_port(nullptr)
   15602:	6022      	str	r2, [r4, #0]
   15604:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   15606:	bd10      	pop	{r4, pc}
   15608:	20003150 	.word	0x20003150

0001560c <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputBufferGetPort ::
    addCallPort(InputBufferGetPort* callPort)
  {
   1560c:	b538      	push	{r3, r4, r5, lr}
   1560e:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   15610:	460d      	mov	r5, r1
   15612:	b121      	cbz	r1, 1561e <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   15614:	2300      	movs	r3, #0
    this->m_port = callPort;
   15616:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   15618:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   1561a:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   1561c:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   1561e:	215d      	movs	r1, #93	; 0x5d
   15620:	4801      	ldr	r0, [pc, #4]	; (15628 <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)+0x1c>)
   15622:	f7eb fff3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   15626:	e7f5      	b.n	15614 <Fw::OutputBufferGetPort::addCallPort(Fw::InputBufferGetPort*)+0x8>
   15628:	20000a28 	.word	0x20000a28

0001562c <Fw::OutputBufferGetPort::invoke(unsigned long) const>:

  Fw::Buffer OutputBufferGetPort ::
    invoke(U32 size) const
  {
   1562c:	b530      	push	{r4, r5, lr}
   1562e:	460c      	mov	r4, r1
   15630:	b083      	sub	sp, #12
   15632:	4605      	mov	r5, r0
#if FW_PORT_TRACING == 1
    this->trace();
   15634:	4608      	mov	r0, r1
  {
   15636:	9201      	str	r2, [sp, #4]
    this->trace();
   15638:	f002 fc0e 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_port != nullptr);
   1563c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   1563e:	9a01      	ldr	r2, [sp, #4]
   15640:	b129      	cbz	r1, 1564e <Fw::OutputBufferGetPort::invoke(unsigned long) const+0x22>
    return this->m_port->invoke(size);
   15642:	4628      	mov	r0, r5
   15644:	f7ff ffb0 	bl	155a8 <Fw::InputBufferGetPort::invoke(unsigned long)>
  }
   15648:	4628      	mov	r0, r5
   1564a:	b003      	add	sp, #12
   1564c:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_port != nullptr);
   1564e:	216e      	movs	r1, #110	; 0x6e
   15650:	4805      	ldr	r0, [pc, #20]	; (15668 <Fw::OutputBufferGetPort::invoke(unsigned long) const+0x3c>)
   15652:	f7eb ffdb 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_port->invoke(size);
   15656:	4628      	mov	r0, r5
   15658:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   1565a:	9a01      	ldr	r2, [sp, #4]
   1565c:	f7ff ffa4 	bl	155a8 <Fw::InputBufferGetPort::invoke(unsigned long)>
  }
   15660:	4628      	mov	r0, r5
   15662:	b003      	add	sp, #12
   15664:	bd30      	pop	{r4, r5, pc}
   15666:	bf00      	nop
   15668:	20000a28 	.word	0x20000a28

0001566c <Fw::InputBufferGetPort::init()>:
    Fw::InputPortBase::init();
   1566c:	f002 bb40 	b.w	17cf0 <Fw::InputPortBase::init()>

00015670 <Fw::OutputBufferGetPort::init()>:
    Fw::OutputPortBase::init();
   15670:	f002 bb68 	b.w	17d44 <Fw::OutputPortBase::init()>

00015674 <Fw::(anonymous namespace)::BufferSendPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputBufferSendPort::SERIALIZED_SIZE;
        }
   15674:	200c      	movs	r0, #12
   15676:	4770      	bx	lr

00015678 <Fw::(anonymous namespace)::BufferSendPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   15678:	300c      	adds	r0, #12
   1567a:	4770      	bx	lr

0001567c <Fw::(anonymous namespace)::BufferSendPortBuffer::~BufferSendPortBuffer()>:
    class BufferSendPortBuffer : public Fw::SerializeBufferBase {
   1567c:	4b03      	ldr	r3, [pc, #12]	; (1568c <Fw::(anonymous namespace)::BufferSendPortBuffer::~BufferSendPortBuffer()+0x10>)
   1567e:	b510      	push	{r4, lr}
   15680:	4604      	mov	r4, r0
   15682:	6003      	str	r3, [r0, #0]
   15684:	f7ea ff64 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15688:	4620      	mov	r0, r4
   1568a:	bd10      	pop	{r4, pc}
   1568c:	20002e5c 	.word	0x20002e5c

00015690 <Fw::(anonymous namespace)::BufferSendPortBuffer::~BufferSendPortBuffer()>:
   15690:	4b05      	ldr	r3, [pc, #20]	; (156a8 <Fw::(anonymous namespace)::BufferSendPortBuffer::~BufferSendPortBuffer()+0x18>)
   15692:	b510      	push	{r4, lr}
   15694:	4604      	mov	r4, r0
   15696:	6003      	str	r3, [r0, #0]
   15698:	f7ea ff5a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   1569c:	2118      	movs	r1, #24
   1569e:	4620      	mov	r0, r4
   156a0:	f003 fb16 	bl	18cd0 <operator delete(void*, unsigned int)>
   156a4:	4620      	mov	r0, r4
   156a6:	bd10      	pop	{r4, pc}
   156a8:	20002e5c 	.word	0x20002e5c

000156ac <Fw::OutputBufferSendPort::~OutputBufferSendPort()>:

  };

  //! Output BufferSend port
  //! Port for sending a buffer
  class OutputBufferSendPort :
   156ac:	4b03      	ldr	r3, [pc, #12]	; (156bc <Fw::OutputBufferSendPort::~OutputBufferSendPort()+0x10>)
   156ae:	b510      	push	{r4, lr}
   156b0:	4604      	mov	r4, r0
   156b2:	6003      	str	r3, [r0, #0]
   156b4:	f002 fb22 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   156b8:	4620      	mov	r0, r4
   156ba:	bd10      	pop	{r4, pc}
   156bc:	200031c4 	.word	0x200031c4

000156c0 <Fw::OutputBufferSendPort::~OutputBufferSendPort()>:
   156c0:	4b05      	ldr	r3, [pc, #20]	; (156d8 <Fw::OutputBufferSendPort::~OutputBufferSendPort()+0x18>)
   156c2:	b510      	push	{r4, lr}
   156c4:	4604      	mov	r4, r0
   156c6:	6003      	str	r3, [r0, #0]
   156c8:	f002 fb18 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   156cc:	216c      	movs	r1, #108	; 0x6c
   156ce:	4620      	mov	r0, r4
   156d0:	f003 fafe 	bl	18cd0 <operator delete(void*, unsigned int)>
   156d4:	4620      	mov	r0, r4
   156d6:	bd10      	pop	{r4, pc}
   156d8:	200031c4 	.word	0x200031c4

000156dc <Fw::InputBufferSendPort::~InputBufferSendPort()>:
  class InputBufferSendPort :
   156dc:	4b03      	ldr	r3, [pc, #12]	; (156ec <Fw::InputBufferSendPort::~InputBufferSendPort()+0x10>)
   156de:	b510      	push	{r4, lr}
   156e0:	4604      	mov	r4, r0
   156e2:	6003      	str	r3, [r0, #0]
   156e4:	f002 faec 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   156e8:	4620      	mov	r0, r4
   156ea:	bd10      	pop	{r4, pc}
   156ec:	20003130 	.word	0x20003130

000156f0 <Fw::InputBufferSendPort::~InputBufferSendPort()>:
   156f0:	4b05      	ldr	r3, [pc, #20]	; (15708 <Fw::InputBufferSendPort::~InputBufferSendPort()+0x18>)
   156f2:	b510      	push	{r4, lr}
   156f4:	4604      	mov	r4, r0
   156f6:	6003      	str	r3, [r0, #0]
   156f8:	f002 fae2 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   156fc:	2170      	movs	r1, #112	; 0x70
   156fe:	4620      	mov	r0, r4
   15700:	f003 fae6 	bl	18cd0 <operator delete(void*, unsigned int)>
   15704:	4620      	mov	r0, r4
   15706:	bd10      	pop	{r4, pc}
   15708:	20003130 	.word	0x20003130

0001570c <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputBufferSendPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
   1570c:	b530      	push	{r4, r5, lr}
   1570e:	4604      	mov	r4, r0
   15710:	b08b      	sub	sp, #44	; 0x2c
   15712:	460d      	mov	r5, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
   15714:	f002 fba0 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   15718:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1571a:	b1e3      	cbz	r3, 15756 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x4a>
    FW_ASSERT(this->m_func != nullptr);
   1571c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1571e:	b30b      	cbz	r3, 15764 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x58>

    Fw::Buffer fwBuffer;
   15720:	a801      	add	r0, sp, #4
   15722:	f7ff fe6b 	bl	153fc <Fw::Buffer::Buffer()>
    _status = _buffer.deserialize(fwBuffer);
   15726:	4628      	mov	r0, r5
   15728:	a901      	add	r1, sp, #4
   1572a:	f7eb fbd3 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   1572e:	4605      	mov	r5, r0
   15730:	b920      	cbnz	r0, 1573c <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, fwBuffer);
   15732:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15734:	aa01      	add	r2, sp, #4
   15736:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   1573a:	4798      	blx	r3
   1573c:	4a0c      	ldr	r2, [pc, #48]	; (15770 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>)
   1573e:	a802      	add	r0, sp, #8
   15740:	4b0c      	ldr	r3, [pc, #48]	; (15774 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x68>)
   15742:	e9cd 2301 	strd	r2, r3, [sp, #4]
   15746:	f7ea ff03 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   1574a:	a801      	add	r0, sp, #4
   1574c:	f7ea fef6 	bl	53c <Fw::Serializable::~Serializable()>

    return Fw::FW_SERIALIZE_OK;
  }
   15750:	4628      	mov	r0, r5
   15752:	b00b      	add	sp, #44	; 0x2c
   15754:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
   15756:	2163      	movs	r1, #99	; 0x63
   15758:	4807      	ldr	r0, [pc, #28]	; (15778 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x6c>)
   1575a:	f7eb ff57 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   1575e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15760:	2b00      	cmp	r3, #0
   15762:	d1dd      	bne.n	15720 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   15764:	2164      	movs	r1, #100	; 0x64
   15766:	4804      	ldr	r0, [pc, #16]	; (15778 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x6c>)
   15768:	f7eb ff50 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1576c:	e7d8      	b.n	15720 <Fw::InputBufferSendPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   1576e:	bf00      	nop
   15770:	200032c0 	.word	0x200032c0
   15774:	20003214 	.word	0x20003214
   15778:	20000a9c 	.word	0x20000a9c

0001577c <Fw::InputBufferSendPort::InputBufferSendPort()>:
  InputBufferSendPort ::
   1577c:	b510      	push	{r4, lr}
   1577e:	4604      	mov	r4, r0
      m_func(nullptr)
   15780:	f002 fa8e 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   15784:	4a02      	ldr	r2, [pc, #8]	; (15790 <Fw::InputBufferSendPort::InputBufferSendPort()+0x14>)
   15786:	2300      	movs	r3, #0
  }
   15788:	4620      	mov	r0, r4
      m_func(nullptr)
   1578a:	6022      	str	r2, [r4, #0]
   1578c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   1578e:	bd10      	pop	{r4, pc}
   15790:	20003130 	.word	0x20003130

00015794 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))>:
  {
   15794:	b570      	push	{r4, r5, r6, lr}
   15796:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   15798:	460d      	mov	r5, r1
  {
   1579a:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   1579c:	b121      	cbz	r1, 157a8 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   1579e:	b14e      	cbz	r6, 157b4 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x20>
    this->m_comp = callComp;
   157a0:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   157a2:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   157a4:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   157a6:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   157a8:	2143      	movs	r1, #67	; 0x43
   157aa:	4806      	ldr	r0, [pc, #24]	; (157c4 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x30>)
   157ac:	f7eb ff2e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   157b0:	2e00      	cmp	r6, #0
   157b2:	d1f5      	bne.n	157a0 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0xc>
   157b4:	2144      	movs	r1, #68	; 0x44
   157b6:	4803      	ldr	r0, [pc, #12]	; (157c4 <Fw::InputBufferSendPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Buffer&))+0x30>)
   157b8:	f7eb ff28 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   157bc:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   157be:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   157c0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   157c2:	bd70      	pop	{r4, r5, r6, pc}
   157c4:	20000a9c 	.word	0x20000a9c

000157c8 <Fw::InputBufferSendPort::invoke(Fw::Buffer&)>:
  {
   157c8:	b510      	push	{r4, lr}
   157ca:	4604      	mov	r4, r0
   157cc:	b082      	sub	sp, #8
   157ce:	9101      	str	r1, [sp, #4]
    this->trace();
   157d0:	f002 fb42 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   157d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   157d6:	9a01      	ldr	r2, [sp, #4]
   157d8:	b13b      	cbz	r3, 157ea <Fw::InputBufferSendPort::invoke(Fw::Buffer&)+0x22>
    FW_ASSERT(this->m_func != nullptr);
   157da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   157dc:	b16b      	cbz	r3, 157fa <Fw::InputBufferSendPort::invoke(Fw::Buffer&)+0x32>
    return this->m_func(this->m_comp, this->m_portNum, fwBuffer);
   157de:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   157e2:	b002      	add	sp, #8
   157e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, fwBuffer);
   157e8:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
   157ea:	2152      	movs	r1, #82	; 0x52
   157ec:	4809      	ldr	r0, [pc, #36]	; (15814 <Fw::InputBufferSendPort::invoke(Fw::Buffer&)+0x4c>)
   157ee:	f7eb ff0d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   157f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   157f4:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   157f6:	2b00      	cmp	r3, #0
   157f8:	d1f1      	bne.n	157de <Fw::InputBufferSendPort::invoke(Fw::Buffer&)+0x16>
   157fa:	2153      	movs	r1, #83	; 0x53
   157fc:	4805      	ldr	r0, [pc, #20]	; (15814 <Fw::InputBufferSendPort::invoke(Fw::Buffer&)+0x4c>)
   157fe:	9201      	str	r2, [sp, #4]
   15800:	f7eb ff04 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, fwBuffer);
   15804:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15806:	9a01      	ldr	r2, [sp, #4]
   15808:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   1580c:	b002      	add	sp, #8
   1580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, fwBuffer);
   15812:	4718      	bx	r3
   15814:	20000a9c 	.word	0x20000a9c

00015818 <Fw::OutputBufferSendPort::OutputBufferSendPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputBufferSendPort ::
   15818:	b510      	push	{r4, lr}
   1581a:	4604      	mov	r4, r0
    OutputBufferSendPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   1581c:	f002 fa86 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   15820:	4a02      	ldr	r2, [pc, #8]	; (1582c <Fw::OutputBufferSendPort::OutputBufferSendPort()+0x14>)
   15822:	2300      	movs	r3, #0
  {

  }
   15824:	4620      	mov	r0, r4
      m_port(nullptr)
   15826:	6022      	str	r2, [r4, #0]
   15828:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   1582a:	bd10      	pop	{r4, pc}
   1582c:	200031c4 	.word	0x200031c4

00015830 <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputBufferSendPort ::
    addCallPort(InputBufferSendPort* callPort)
  {
   15830:	b538      	push	{r3, r4, r5, lr}
   15832:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   15834:	460d      	mov	r5, r1
   15836:	b121      	cbz	r1, 15842 <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   15838:	2300      	movs	r3, #0
    this->m_port = callPort;
   1583a:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   1583c:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   1583e:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   15840:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   15842:	2188      	movs	r1, #136	; 0x88
   15844:	4801      	ldr	r0, [pc, #4]	; (1584c <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)+0x1c>)
   15846:	f7eb fee1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1584a:	e7f5      	b.n	15838 <Fw::OutputBufferSendPort::addCallPort(Fw::InputBufferSendPort*)+0x8>
   1584c:	20000a9c 	.word	0x20000a9c

00015850 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const>:

  void OutputBufferSendPort ::
    invoke(Fw::Buffer& fwBuffer) const
  {
   15850:	b570      	push	{r4, r5, r6, lr}
   15852:	4604      	mov	r4, r0
   15854:	b086      	sub	sp, #24
   15856:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
   15858:	f002 fafe 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   1585c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1585e:	b128      	cbz	r0, 1586c <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(fwBuffer);
   15860:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(fwBuffer);
#endif
  }
   15862:	b006      	add	sp, #24
   15864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(fwBuffer);
   15868:	f7ff bfae 	b.w	157c8 <Fw::InputBufferSendPort::invoke(Fw::Buffer&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   1586c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1586e:	b30b      	cbz	r3, 158b4 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x64>
    class BufferSendPortBuffer : public Fw::SerializeBufferBase {
   15870:	4e14      	ldr	r6, [pc, #80]	; (158c4 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x74>)
   15872:	4668      	mov	r0, sp
   15874:	f7ea fe64 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(fwBuffer);
   15878:	4629      	mov	r1, r5
   1587a:	4668      	mov	r0, sp
    class BufferSendPortBuffer : public Fw::SerializeBufferBase {
   1587c:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(fwBuffer);
   1587e:	f7eb f93f 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15882:	b958      	cbnz	r0, 1589c <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
   15884:	6e60      	ldr	r0, [r4, #100]	; 0x64
   15886:	4669      	mov	r1, sp
   15888:	6803      	ldr	r3, [r0, #0]
   1588a:	695b      	ldr	r3, [r3, #20]
   1588c:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1588e:	b958      	cbnz	r0, 158a8 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x58>
    class BufferSendPortBuffer : public Fw::SerializeBufferBase {
   15890:	4668      	mov	r0, sp
   15892:	9600      	str	r6, [sp, #0]
   15894:	f7ea fe5c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   15898:	b006      	add	sp, #24
   1589a:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1589c:	4601      	mov	r1, r0
   1589e:	22a4      	movs	r2, #164	; 0xa4
   158a0:	4809      	ldr	r0, [pc, #36]	; (158c8 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x78>)
   158a2:	f7eb fec1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   158a6:	e7ed      	b.n	15884 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   158a8:	4601      	mov	r1, r0
   158aa:	22a7      	movs	r2, #167	; 0xa7
   158ac:	4806      	ldr	r0, [pc, #24]	; (158c8 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x78>)
   158ae:	f7eb febb 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   158b2:	e7ed      	b.n	15890 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   158b4:	219a      	movs	r1, #154	; 0x9a
   158b6:	4804      	ldr	r0, [pc, #16]	; (158c8 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x78>)
   158b8:	f7eb fea8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   158bc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   158be:	2800      	cmp	r0, #0
   158c0:	d0d6      	beq.n	15870 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x20>
   158c2:	e7cd      	b.n	15860 <Fw::OutputBufferSendPort::invoke(Fw::Buffer&) const+0x10>
   158c4:	20002e5c 	.word	0x20002e5c
   158c8:	20000a9c 	.word	0x20000a9c

000158cc <Fw::InputBufferSendPort::init()>:
    Fw::InputPortBase::init();
   158cc:	f002 ba10 	b.w	17cf0 <Fw::InputPortBase::init()>

000158d0 <Fw::OutputBufferSendPort::init()>:
    Fw::OutputPortBase::init();
   158d0:	f002 ba38 	b.w	17d44 <Fw::OutputPortBase::init()>

000158d4 <Fw::ParamBuffer::getBuffCapacity() const>:
        return *this;
    }

    NATIVE_UINT_TYPE ParamBuffer::getBuffCapacity() const {
        return sizeof(this->m_bufferData);
    }
   158d4:	2078      	movs	r0, #120	; 0x78
   158d6:	4770      	bx	lr

000158d8 <Fw::ParamBuffer::getBuffAddr()>:
        return this->m_bufferData;
    }

    U8* ParamBuffer::getBuffAddr() {
        return this->m_bufferData;
    }
   158d8:	300c      	adds	r0, #12
   158da:	4770      	bx	lr

000158dc <Fw::ParamBuffer::~ParamBuffer()>:
    ParamBuffer::~ParamBuffer() {
   158dc:	4b03      	ldr	r3, [pc, #12]	; (158ec <Fw::ParamBuffer::~ParamBuffer()+0x10>)
   158de:	b510      	push	{r4, lr}
   158e0:	4604      	mov	r4, r0
   158e2:	6003      	str	r3, [r0, #0]
   158e4:	f7ea fe34 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   158e8:	4620      	mov	r0, r4
   158ea:	bd10      	pop	{r4, pc}
   158ec:	20002c24 	.word	0x20002c24

000158f0 <Fw::ParamBuffer::~ParamBuffer()>:
    ParamBuffer::~ParamBuffer() {
   158f0:	4b05      	ldr	r3, [pc, #20]	; (15908 <Fw::ParamBuffer::~ParamBuffer()+0x18>)
   158f2:	b510      	push	{r4, lr}
   158f4:	4604      	mov	r4, r0
   158f6:	6003      	str	r3, [r0, #0]
   158f8:	f7ea fe2a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   158fc:	2184      	movs	r1, #132	; 0x84
   158fe:	4620      	mov	r0, r4
   15900:	f003 f9e6 	bl	18cd0 <operator delete(void*, unsigned int)>
   15904:	4620      	mov	r0, r4
   15906:	bd10      	pop	{r4, pc}
   15908:	20002c24 	.word	0x20002c24

0001590c <Fw::ParamBuffer::ParamBuffer()>:
	ParamBuffer::ParamBuffer() {
   1590c:	b510      	push	{r4, lr}
   1590e:	4604      	mov	r4, r0
   15910:	f7ea fe16 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
   15914:	4b01      	ldr	r3, [pc, #4]	; (1591c <Fw::ParamBuffer::ParamBuffer()+0x10>)
    }
   15916:	4620      	mov	r0, r4
	ParamBuffer::ParamBuffer() {
   15918:	6023      	str	r3, [r4, #0]
    }
   1591a:	bd10      	pop	{r4, pc}
   1591c:	20002c24 	.word	0x20002c24

00015920 <Fw::ParamValid::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= UNINIT) && (e <= DEFAULT));
  }

  Fw::SerializeStatus ParamValid ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   15920:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   15922:	7901      	ldrb	r1, [r0, #4]
   15924:	4618      	mov	r0, r3
   15926:	f7ea beff 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   1592a:	bf00      	nop

0001592c <Fw::ParamValid::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus ParamValid ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   1592c:	b510      	push	{r4, lr}
   1592e:	460a      	mov	r2, r1
   15930:	b082      	sub	sp, #8
   15932:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   15934:	a901      	add	r1, sp, #4
   15936:	4610      	mov	r0, r2
   15938:	f7eb f9d0 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   1593c:	b938      	cbnz	r0, 1594e <Fw::ParamValid::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
   1593e:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   15942:	2a03      	cmp	r2, #3
      this->e = static_cast<T>(es);
   15944:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   15946:	bf94      	ite	ls
   15948:	2300      	movls	r3, #0
   1594a:	2301      	movhi	r3, #1
   1594c:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   1594e:	b002      	add	sp, #8
   15950:	bd10      	pop	{r4, pc}
   15952:	bf00      	nop

00015954 <Fw::ParamValid::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void ParamValid ::
    toString(Fw::StringBase& sb) const
  {
   15954:	b570      	push	{r4, r5, r6, lr}
   15956:	b0a2      	sub	sp, #136	; 0x88
   15958:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   1595a:	4e1a      	ldr	r6, [pc, #104]	; (159c4 <Fw::ParamValid::toString(Fw::StringBase&) const+0x70>)
   1595c:	460d      	mov	r5, r1
   1595e:	4668      	mov	r0, sp
   15960:	f7eb fc5e 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   15964:	4918      	ldr	r1, [pc, #96]	; (159c8 <Fw::ParamValid::toString(Fw::StringBase&) const+0x74>)
   15966:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   15968:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   1596a:	f7eb fcc1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   1596e:	7923      	ldrb	r3, [r4, #4]
   15970:	2b03      	cmp	r3, #3
   15972:	d822      	bhi.n	159ba <Fw::ParamValid::toString(Fw::StringBase&) const+0x66>
   15974:	e8df f003 	tbb	[pc, r3]
   15978:	0212171c 	.word	0x0212171c
   1597c:	4913      	ldr	r1, [pc, #76]	; (159cc <Fw::ParamValid::toString(Fw::StringBase&) const+0x78>)
   1597e:	4668      	mov	r0, sp
   15980:	f7eb fcb6 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   15984:	7923      	ldrb	r3, [r4, #4]
   15986:	aa01      	add	r2, sp, #4
   15988:	4911      	ldr	r1, [pc, #68]	; (159d0 <Fw::ParamValid::toString(Fw::StringBase&) const+0x7c>)
   1598a:	4628      	mov	r0, r5
   1598c:	f7eb fc7e 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   15990:	4668      	mov	r0, sp
   15992:	9600      	str	r6, [sp, #0]
   15994:	f7eb fc4e 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   15998:	b022      	add	sp, #136	; 0x88
   1599a:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   1599c:	490d      	ldr	r1, [pc, #52]	; (159d4 <Fw::ParamValid::toString(Fw::StringBase&) const+0x80>)
   1599e:	4668      	mov	r0, sp
   159a0:	f7eb fca6 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   159a4:	e7ee      	b.n	15984 <Fw::ParamValid::toString(Fw::StringBase&) const+0x30>
        (void)StringBase::operator=(src);
   159a6:	490c      	ldr	r1, [pc, #48]	; (159d8 <Fw::ParamValid::toString(Fw::StringBase&) const+0x84>)
   159a8:	4668      	mov	r0, sp
   159aa:	f7eb fca1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   159ae:	e7e9      	b.n	15984 <Fw::ParamValid::toString(Fw::StringBase&) const+0x30>
        (void)StringBase::operator=(src);
   159b0:	490a      	ldr	r1, [pc, #40]	; (159dc <Fw::ParamValid::toString(Fw::StringBase&) const+0x88>)
   159b2:	4668      	mov	r0, sp
   159b4:	f7eb fc9c 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   159b8:	e7e4      	b.n	15984 <Fw::ParamValid::toString(Fw::StringBase&) const+0x30>
        (void)StringBase::operator=(src);
   159ba:	4909      	ldr	r1, [pc, #36]	; (159e0 <Fw::ParamValid::toString(Fw::StringBase&) const+0x8c>)
   159bc:	4668      	mov	r0, sp
   159be:	f7eb fc97 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   159c2:	e7df      	b.n	15984 <Fw::ParamValid::toString(Fw::StringBase&) const+0x30>
   159c4:	200032dc 	.word	0x200032dc
   159c8:	20001d2c 	.word	0x20001d2c
   159cc:	20002320 	.word	0x20002320
   159d0:	20002470 	.word	0x20002470
   159d4:	20002318 	.word	0x20002318
   159d8:	20002310 	.word	0x20002310
   159dc:	20002308 	.word	0x20002308
   159e0:	20002464 	.word	0x20002464

000159e4 <Fw::ParamValid::~ParamValid()>:
   159e4:	4b03      	ldr	r3, [pc, #12]	; (159f4 <Fw::ParamValid::~ParamValid()+0x10>)
   159e6:	b510      	push	{r4, lr}
   159e8:	4604      	mov	r4, r0
   159ea:	6003      	str	r3, [r0, #0]
   159ec:	f7ea fda6 	bl	53c <Fw::Serializable::~Serializable()>
   159f0:	4620      	mov	r0, r4
   159f2:	bd10      	pop	{r4, pc}
   159f4:	20002ba8 	.word	0x20002ba8

000159f8 <Fw::ParamValid::~ParamValid()>:
   159f8:	4b05      	ldr	r3, [pc, #20]	; (15a10 <Fw::ParamValid::~ParamValid()+0x18>)
   159fa:	b510      	push	{r4, lr}
   159fc:	4604      	mov	r4, r0
   159fe:	6003      	str	r3, [r0, #0]
   15a00:	f7ea fd9c 	bl	53c <Fw::Serializable::~Serializable()>
   15a04:	2108      	movs	r1, #8
   15a06:	4620      	mov	r0, r4
   15a08:	f003 f962 	bl	18cd0 <operator delete(void*, unsigned int)>
   15a0c:	4620      	mov	r0, r4
   15a0e:	bd10      	pop	{r4, pc}
   15a10:	20002ba8 	.word	0x20002ba8

00015a14 <Fw::ParamValid::operator=(Fw::ParamValid const&)>:
    this->e = obj.e;
   15a14:	790b      	ldrb	r3, [r1, #4]
   15a16:	7103      	strb	r3, [r0, #4]
  }
   15a18:	4770      	bx	lr
   15a1a:	bf00      	nop

00015a1c <Fw::ParamValid::operator=(Fw::ParamValid::T)>:
    this->e = e1;
   15a1c:	7101      	strb	r1, [r0, #4]
  }
   15a1e:	4770      	bx	lr

00015a20 <Fw::OutputPrmGetPort::~OutputPrmGetPort()>:

  };

  //! Output PrmGet port
  //! Port for getting a parameter
  class OutputPrmGetPort :
   15a20:	4b03      	ldr	r3, [pc, #12]	; (15a30 <Fw::OutputPrmGetPort::~OutputPrmGetPort()+0x10>)
   15a22:	b510      	push	{r4, lr}
   15a24:	4604      	mov	r4, r0
   15a26:	6003      	str	r3, [r0, #0]
   15a28:	f002 f968 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15a2c:	4620      	mov	r0, r4
   15a2e:	bd10      	pop	{r4, pc}
   15a30:	20003098 	.word	0x20003098

00015a34 <Fw::OutputPrmGetPort::~OutputPrmGetPort()>:
   15a34:	4b05      	ldr	r3, [pc, #20]	; (15a4c <Fw::OutputPrmGetPort::~OutputPrmGetPort()+0x18>)
   15a36:	b510      	push	{r4, lr}
   15a38:	4604      	mov	r4, r0
   15a3a:	6003      	str	r3, [r0, #0]
   15a3c:	f002 f95e 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15a40:	216c      	movs	r1, #108	; 0x6c
   15a42:	4620      	mov	r0, r4
   15a44:	f003 f944 	bl	18cd0 <operator delete(void*, unsigned int)>
   15a48:	4620      	mov	r0, r4
   15a4a:	bd10      	pop	{r4, pc}
   15a4c:	20003098 	.word	0x20003098

00015a50 <Fw::OutputPrmGetPort::OutputPrmGetPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputPrmGetPort ::
   15a50:	b510      	push	{r4, lr}
   15a52:	4604      	mov	r4, r0
    OutputPrmGetPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   15a54:	f002 f96a 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   15a58:	4a02      	ldr	r2, [pc, #8]	; (15a64 <Fw::OutputPrmGetPort::OutputPrmGetPort()+0x14>)
   15a5a:	2300      	movs	r3, #0
  {

  }
   15a5c:	4620      	mov	r0, r4
      m_port(nullptr)
   15a5e:	6022      	str	r2, [r4, #0]
   15a60:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   15a62:	bd10      	pop	{r4, pc}
   15a64:	20003098 	.word	0x20003098

00015a68 <Fw::OutputPrmGetPort::init()>:

  void OutputPrmGetPort ::
    init()
  {
    Fw::OutputPortBase::init();
   15a68:	f002 b96c 	b.w	17d44 <Fw::OutputPortBase::init()>

00015a6c <Fw::(anonymous namespace)::PrmSetPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputPrmSetPort::SERIALIZED_SIZE;
        }
   15a6c:	207e      	movs	r0, #126	; 0x7e
   15a6e:	4770      	bx	lr

00015a70 <Fw::(anonymous namespace)::PrmSetPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   15a70:	300c      	adds	r0, #12
   15a72:	4770      	bx	lr

00015a74 <Fw::(anonymous namespace)::PrmSetPortBuffer::~PrmSetPortBuffer()>:
    class PrmSetPortBuffer : public Fw::SerializeBufferBase {
   15a74:	4b03      	ldr	r3, [pc, #12]	; (15a84 <Fw::(anonymous namespace)::PrmSetPortBuffer::~PrmSetPortBuffer()+0x10>)
   15a76:	b510      	push	{r4, lr}
   15a78:	4604      	mov	r4, r0
   15a7a:	6003      	str	r3, [r0, #0]
   15a7c:	f7ea fd68 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15a80:	4620      	mov	r0, r4
   15a82:	bd10      	pop	{r4, pc}
   15a84:	20002e24 	.word	0x20002e24

00015a88 <Fw::(anonymous namespace)::PrmSetPortBuffer::~PrmSetPortBuffer()>:
   15a88:	4b05      	ldr	r3, [pc, #20]	; (15aa0 <Fw::(anonymous namespace)::PrmSetPortBuffer::~PrmSetPortBuffer()+0x18>)
   15a8a:	b510      	push	{r4, lr}
   15a8c:	4604      	mov	r4, r0
   15a8e:	6003      	str	r3, [r0, #0]
   15a90:	f7ea fd5e 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15a94:	218c      	movs	r1, #140	; 0x8c
   15a96:	4620      	mov	r0, r4
   15a98:	f003 f91a 	bl	18cd0 <operator delete(void*, unsigned int)>
   15a9c:	4620      	mov	r0, r4
   15a9e:	bd10      	pop	{r4, pc}
   15aa0:	20002e24 	.word	0x20002e24

00015aa4 <Fw::OutputPrmSetPort::~OutputPrmSetPort()>:

  };

  //! Output PrmSet port
  //! Port for setting a parameter
  class OutputPrmSetPort :
   15aa4:	4b03      	ldr	r3, [pc, #12]	; (15ab4 <Fw::OutputPrmSetPort::~OutputPrmSetPort()+0x10>)
   15aa6:	b510      	push	{r4, lr}
   15aa8:	4604      	mov	r4, r0
   15aaa:	6003      	str	r3, [r0, #0]
   15aac:	f002 f926 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15ab0:	4620      	mov	r0, r4
   15ab2:	bd10      	pop	{r4, pc}
   15ab4:	200030b4 	.word	0x200030b4

00015ab8 <Fw::OutputPrmSetPort::~OutputPrmSetPort()>:
   15ab8:	4b05      	ldr	r3, [pc, #20]	; (15ad0 <Fw::OutputPrmSetPort::~OutputPrmSetPort()+0x18>)
   15aba:	b510      	push	{r4, lr}
   15abc:	4604      	mov	r4, r0
   15abe:	6003      	str	r3, [r0, #0]
   15ac0:	f002 f91c 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15ac4:	216c      	movs	r1, #108	; 0x6c
   15ac6:	4620      	mov	r0, r4
   15ac8:	f003 f902 	bl	18cd0 <operator delete(void*, unsigned int)>
   15acc:	4620      	mov	r0, r4
   15ace:	bd10      	pop	{r4, pc}
   15ad0:	200030b4 	.word	0x200030b4

00015ad4 <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)>:
  void InputPrmSetPort ::
    invoke(
        FwPrmIdType id,
        Fw::ParamBuffer& val
    )
  {
   15ad4:	b570      	push	{r4, r5, r6, lr}
   15ad6:	4604      	mov	r4, r0
   15ad8:	b082      	sub	sp, #8
   15ada:	460d      	mov	r5, r1
   15adc:	9201      	str	r2, [sp, #4]
#if FW_PORT_TRACING == 1
    this->trace();
   15ade:	f002 f9bb 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   15ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15ae4:	9b01      	ldr	r3, [sp, #4]
   15ae6:	b14a      	cbz	r2, 15afc <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
   15ae8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   15aea:	b17e      	cbz	r6, 15b0c <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)+0x38>

    return this->m_func(this->m_comp, this->m_portNum, id, val);
   15aec:	462a      	mov	r2, r5
   15aee:	46b4      	mov	ip, r6
   15af0:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   15af4:	b002      	add	sp, #8
   15af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_func(this->m_comp, this->m_portNum, id, val);
   15afa:	4760      	bx	ip
    FW_ASSERT(this->m_comp != nullptr);
   15afc:	2155      	movs	r1, #85	; 0x55
   15afe:	4807      	ldr	r0, [pc, #28]	; (15b1c <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)+0x48>)
   15b00:	f7eb fd84 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   15b04:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   15b06:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   15b08:	2e00      	cmp	r6, #0
   15b0a:	d1ef      	bne.n	15aec <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)+0x18>
   15b0c:	2156      	movs	r1, #86	; 0x56
   15b0e:	4803      	ldr	r0, [pc, #12]	; (15b1c <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)+0x48>)
   15b10:	9301      	str	r3, [sp, #4]
   15b12:	f7eb fd7b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, id, val);
   15b16:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   15b18:	9b01      	ldr	r3, [sp, #4]
   15b1a:	e7e7      	b.n	15aec <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)+0x18>
   15b1c:	200008a8 	.word	0x200008a8

00015b20 <Fw::OutputPrmSetPort::OutputPrmSetPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputPrmSetPort ::
   15b20:	b510      	push	{r4, lr}
   15b22:	4604      	mov	r4, r0
    OutputPrmSetPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   15b24:	f002 f902 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   15b28:	4a02      	ldr	r2, [pc, #8]	; (15b34 <Fw::OutputPrmSetPort::OutputPrmSetPort()+0x14>)
   15b2a:	2300      	movs	r3, #0
  {

  }
   15b2c:	4620      	mov	r0, r4
      m_port(nullptr)
   15b2e:	6022      	str	r2, [r4, #0]
   15b30:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   15b32:	bd10      	pop	{r4, pc}
   15b34:	200030b4 	.word	0x200030b4

00015b38 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const>:
  void OutputPrmSetPort ::
    invoke(
        FwPrmIdType id,
        Fw::ParamBuffer& val
    ) const
  {
   15b38:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b3a:	4604      	mov	r4, r0
   15b3c:	b0a5      	sub	sp, #148	; 0x94
   15b3e:	460e      	mov	r6, r1
   15b40:	4615      	mov	r5, r2
#if FW_PORT_TRACING == 1
    this->trace();
   15b42:	f002 f989 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   15b46:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   15b48:	b130      	cbz	r0, 15b58 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x20>

    if (this->m_port != nullptr) {
      this->m_port->invoke(id, val);
   15b4a:	462a      	mov	r2, r5
   15b4c:	4631      	mov	r1, r6
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(id, val);
#endif
  }
   15b4e:	b025      	add	sp, #148	; 0x94
   15b50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      this->m_port->invoke(id, val);
   15b54:	f7ff bfbe 	b.w	15ad4 <Fw::InputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   15b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15b5a:	b363      	cbz	r3, 15bb6 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x7e>
    class PrmSetPortBuffer : public Fw::SerializeBufferBase {
   15b5c:	a801      	add	r0, sp, #4
   15b5e:	4f1a      	ldr	r7, [pc, #104]	; (15bc8 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x90>)
   15b60:	f7ea fcee 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(id);
   15b64:	4631      	mov	r1, r6
   15b66:	a801      	add	r0, sp, #4
    class PrmSetPortBuffer : public Fw::SerializeBufferBase {
   15b68:	9701      	str	r7, [sp, #4]
      _status = _buffer.serialize(id);
   15b6a:	f7ea fd77 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15b6e:	b980      	cbnz	r0, 15b92 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x5a>
      _status = _buffer.serialize(val);
   15b70:	4629      	mov	r1, r5
   15b72:	a801      	add	r0, sp, #4
   15b74:	f7ea ffca 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15b78:	b9b8      	cbnz	r0, 15baa <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x72>
      _status = this->m_serPort->invokeSerial(_buffer);
   15b7a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   15b7c:	a901      	add	r1, sp, #4
   15b7e:	6803      	ldr	r3, [r0, #0]
   15b80:	695b      	ldr	r3, [r3, #20]
   15b82:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15b84:	b958      	cbnz	r0, 15b9e <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x66>
    class PrmSetPortBuffer : public Fw::SerializeBufferBase {
   15b86:	a801      	add	r0, sp, #4
   15b88:	9701      	str	r7, [sp, #4]
   15b8a:	f7ea fce1 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   15b8e:	b025      	add	sp, #148	; 0x94
   15b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15b92:	4601      	mov	r1, r0
   15b94:	22b0      	movs	r2, #176	; 0xb0
   15b96:	480d      	ldr	r0, [pc, #52]	; (15bcc <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x94>)
   15b98:	f7eb fd46 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15b9c:	e7e8      	b.n	15b70 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x38>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15b9e:	4601      	mov	r1, r0
   15ba0:	22b6      	movs	r2, #182	; 0xb6
   15ba2:	480a      	ldr	r0, [pc, #40]	; (15bcc <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x94>)
   15ba4:	f7eb fd40 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15ba8:	e7ed      	b.n	15b86 <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x4e>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15baa:	4601      	mov	r1, r0
   15bac:	22b3      	movs	r2, #179	; 0xb3
   15bae:	4807      	ldr	r0, [pc, #28]	; (15bcc <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x94>)
   15bb0:	f7eb fd3a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15bb4:	e7e1      	b.n	15b7a <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x42>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   15bb6:	21a6      	movs	r1, #166	; 0xa6
   15bb8:	4804      	ldr	r0, [pc, #16]	; (15bcc <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x94>)
   15bba:	f7eb fd27 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   15bbe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   15bc0:	2800      	cmp	r0, #0
   15bc2:	d0cb      	beq.n	15b5c <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x24>
   15bc4:	e7c1      	b.n	15b4a <Fw::OutputPrmSetPort::invoke(unsigned long, Fw::ParamBuffer&) const+0x12>
   15bc6:	bf00      	nop
   15bc8:	20002e24 	.word	0x20002e24
   15bcc:	200008a8 	.word	0x200008a8

00015bd0 <Fw::OutputPrmSetPort::init()>:
    Fw::OutputPortBase::init();
   15bd0:	f002 b8b8 	b.w	17d44 <Fw::OutputPortBase::init()>

00015bd4 <Fw::CmdArgBuffer::getBuffCapacity() const>:
        return *this;
    }

    NATIVE_UINT_TYPE CmdArgBuffer::getBuffCapacity() const {
        return sizeof(this->m_bufferData);
    }
   15bd4:	2078      	movs	r0, #120	; 0x78
   15bd6:	4770      	bx	lr

00015bd8 <Fw::CmdArgBuffer::getBuffAddr()>:
        return this->m_bufferData;
    }

    U8* CmdArgBuffer::getBuffAddr() {
        return this->m_bufferData;
    }
   15bd8:	300c      	adds	r0, #12
   15bda:	4770      	bx	lr

00015bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>:
    CmdArgBuffer::~CmdArgBuffer() {
   15bdc:	4b03      	ldr	r3, [pc, #12]	; (15bec <Fw::CmdArgBuffer::~CmdArgBuffer()+0x10>)
   15bde:	b510      	push	{r4, lr}
   15be0:	4604      	mov	r4, r0
   15be2:	6003      	str	r3, [r0, #0]
   15be4:	f7ea fcb4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   15be8:	4620      	mov	r0, r4
   15bea:	bd10      	pop	{r4, pc}
   15bec:	20002c40 	.word	0x20002c40

00015bf0 <Fw::CmdArgBuffer::~CmdArgBuffer()>:
    CmdArgBuffer::~CmdArgBuffer() {
   15bf0:	4b05      	ldr	r3, [pc, #20]	; (15c08 <Fw::CmdArgBuffer::~CmdArgBuffer()+0x18>)
   15bf2:	b510      	push	{r4, lr}
   15bf4:	4604      	mov	r4, r0
   15bf6:	6003      	str	r3, [r0, #0]
   15bf8:	f7ea fcaa 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   15bfc:	2184      	movs	r1, #132	; 0x84
   15bfe:	4620      	mov	r0, r4
   15c00:	f003 f866 	bl	18cd0 <operator delete(void*, unsigned int)>
   15c04:	4620      	mov	r0, r4
   15c06:	bd10      	pop	{r4, pc}
   15c08:	20002c40 	.word	0x20002c40

00015c0c <Fw::CmdArgBuffer::CmdArgBuffer()>:
    CmdArgBuffer::CmdArgBuffer() {
   15c0c:	b510      	push	{r4, lr}
   15c0e:	4604      	mov	r4, r0
   15c10:	f7ea fc96 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
   15c14:	4b01      	ldr	r3, [pc, #4]	; (15c1c <Fw::CmdArgBuffer::CmdArgBuffer()+0x10>)
    }
   15c16:	4620      	mov	r0, r4
    CmdArgBuffer::CmdArgBuffer() {
   15c18:	6023      	str	r3, [r4, #0]
    }
   15c1a:	bd10      	pop	{r4, pc}
   15c1c:	20002c40 	.word	0x20002c40

00015c20 <Fw::CmdPacket::serialize(Fw::SerializeBufferBase&) const>:
    }

    SerializeStatus CmdPacket::serialize(SerializeBufferBase& buffer) const {

        // Shouldn't be called
        FW_ASSERT(0);
   15c20:	2118      	movs	r1, #24
   15c22:	4803      	ldr	r0, [pc, #12]	; (15c30 <Fw::CmdPacket::serialize(Fw::SerializeBufferBase&) const+0x10>)
    SerializeStatus CmdPacket::serialize(SerializeBufferBase& buffer) const {
   15c24:	b508      	push	{r3, lr}
        FW_ASSERT(0);
   15c26:	f7eb fcf1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        return FW_SERIALIZE_OK; // for compiler

    }
   15c2a:	2000      	movs	r0, #0
   15c2c:	bd08      	pop	{r3, pc}
   15c2e:	bf00      	nop
   15c30:	20002408 	.word	0x20002408

00015c34 <Fw::CmdPacket::deserialize(Fw::SerializeBufferBase&)>:

    SerializeStatus CmdPacket::deserialize(SerializeBufferBase& buffer) {
   15c34:	b570      	push	{r4, r5, r6, lr}
   15c36:	4605      	mov	r5, r0
   15c38:	460e      	mov	r6, r1

        SerializeStatus stat = ComPacket::deserializeBase(buffer);
   15c3a:	f001 fc71 	bl	17520 <Fw::ComPacket::deserializeBase(Fw::SerializeBufferBase&)>
        if (stat != FW_SERIALIZE_OK) {
   15c3e:	4604      	mov	r4, r0
   15c40:	b960      	cbnz	r0, 15c5c <Fw::CmdPacket::deserialize(Fw::SerializeBufferBase&)+0x28>
            return stat;
        }

        // double check packet type
        if (this->m_type != FW_PACKET_COMMAND) {
   15c42:	792b      	ldrb	r3, [r5, #4]
   15c44:	b963      	cbnz	r3, 15c60 <Fw::CmdPacket::deserialize(Fw::SerializeBufferBase&)+0x2c>
            return FW_DESERIALIZE_TYPE_MISMATCH;
        }

        stat = buffer.deserialize(this->m_opcode);
   15c46:	f105 0108 	add.w	r1, r5, #8
   15c4a:	4630      	mov	r0, r6
   15c4c:	f7eb f838 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (stat != FW_SERIALIZE_OK) {
   15c50:	4604      	mov	r4, r0
   15c52:	b918      	cbnz	r0, 15c5c <Fw::CmdPacket::deserialize(Fw::SerializeBufferBase&)+0x28>
            return stat;
        }

        // if non-empty, copy data
        if (buffer.getBuffLeft()) {
   15c54:	4630      	mov	r0, r6
   15c56:	f7eb fa2b 	bl	10b0 <Fw::SerializeBufferBase::getBuffLeft() const>
   15c5a:	b920      	cbnz	r0, 15c66 <Fw::CmdPacket::deserialize(Fw::SerializeBufferBase&)+0x32>
            // copy the serialized arguments to the buffer
            stat = buffer.copyRaw(this->m_argBuffer,buffer.getBuffLeft());
        }

        return stat;
    }
   15c5c:	4620      	mov	r0, r4
   15c5e:	bd70      	pop	{r4, r5, r6, pc}
            return FW_DESERIALIZE_TYPE_MISMATCH;
   15c60:	2406      	movs	r4, #6
    }
   15c62:	4620      	mov	r0, r4
   15c64:	bd70      	pop	{r4, r5, r6, pc}
            stat = buffer.copyRaw(this->m_argBuffer,buffer.getBuffLeft());
   15c66:	4630      	mov	r0, r6
   15c68:	f7eb fa22 	bl	10b0 <Fw::SerializeBufferBase::getBuffLeft() const>
   15c6c:	f105 010c 	add.w	r1, r5, #12
   15c70:	4602      	mov	r2, r0
   15c72:	4630      	mov	r0, r6
    }
   15c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            stat = buffer.copyRaw(this->m_argBuffer,buffer.getBuffLeft());
   15c78:	f7eb ba2e 	b.w	10d8 <Fw::SerializeBufferBase::copyRaw(Fw::SerializeBufferBase&, unsigned long)>

00015c7c <Fw::CmdPacket::CmdPacket()>:
    CmdPacket::CmdPacket() : m_opcode(0) {
   15c7c:	b538      	push	{r3, r4, r5, lr}
   15c7e:	4604      	mov	r4, r0
   15c80:	2500      	movs	r5, #0
   15c82:	f001 fc31 	bl	174e8 <Fw::ComPacket::ComPacket()>
   15c86:	4b05      	ldr	r3, [pc, #20]	; (15c9c <Fw::CmdPacket::CmdPacket()+0x20>)
   15c88:	f104 000c 	add.w	r0, r4, #12
   15c8c:	60a5      	str	r5, [r4, #8]
   15c8e:	6023      	str	r3, [r4, #0]
   15c90:	f7ff ffbc 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
    }
   15c94:	4620      	mov	r0, r4
        this->m_type = FW_PACKET_COMMAND;
   15c96:	7125      	strb	r5, [r4, #4]
    }
   15c98:	bd38      	pop	{r3, r4, r5, pc}
   15c9a:	bf00      	nop
   15c9c:	20003350 	.word	0x20003350

00015ca0 <Fw::CmdPacket::getOpCode() const>:

    FwOpcodeType CmdPacket::getOpCode() const {
        return this->m_opcode;
    }
   15ca0:	6880      	ldr	r0, [r0, #8]
   15ca2:	4770      	bx	lr

00015ca4 <Fw::CmdPacket::getArgBuffer()>:

    CmdArgBuffer& CmdPacket::getArgBuffer() {
        return this->m_argBuffer;
    }
   15ca4:	300c      	adds	r0, #12
   15ca6:	4770      	bx	lr

00015ca8 <Fw::CmdPacket::~CmdPacket()>:
    CmdPacket::~CmdPacket() {
   15ca8:	4b05      	ldr	r3, [pc, #20]	; (15cc0 <Fw::CmdPacket::~CmdPacket()+0x18>)
   15caa:	b510      	push	{r4, lr}
   15cac:	4604      	mov	r4, r0
   15cae:	f840 3b0c 	str.w	r3, [r0], #12
   15cb2:	f7ff ff93 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
   15cb6:	4620      	mov	r0, r4
   15cb8:	f001 fc22 	bl	17500 <Fw::ComPacket::~ComPacket()>
    }
   15cbc:	4620      	mov	r0, r4
   15cbe:	bd10      	pop	{r4, pc}
   15cc0:	20003350 	.word	0x20003350

00015cc4 <Fw::CmdPacket::~CmdPacket()>:
    CmdPacket::~CmdPacket() {
   15cc4:	4b07      	ldr	r3, [pc, #28]	; (15ce4 <Fw::CmdPacket::~CmdPacket()+0x20>)
   15cc6:	b510      	push	{r4, lr}
   15cc8:	4604      	mov	r4, r0
   15cca:	f840 3b0c 	str.w	r3, [r0], #12
   15cce:	f7ff ff85 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
   15cd2:	4620      	mov	r0, r4
   15cd4:	f001 fc14 	bl	17500 <Fw::ComPacket::~ComPacket()>
    }
   15cd8:	4620      	mov	r0, r4
   15cda:	2190      	movs	r1, #144	; 0x90
   15cdc:	f002 fff8 	bl	18cd0 <operator delete(void*, unsigned int)>
   15ce0:	4620      	mov	r0, r4
   15ce2:	bd10      	pop	{r4, pc}
   15ce4:	20003350 	.word	0x20003350

00015ce8 <Fw::(anonymous namespace)::CmdPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputCmdPort::SERIALIZED_SIZE;
        }
   15ce8:	2084      	movs	r0, #132	; 0x84
   15cea:	4770      	bx	lr

00015cec <Fw::(anonymous namespace)::CmdPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   15cec:	300c      	adds	r0, #12
   15cee:	4770      	bx	lr

00015cf0 <Fw::(anonymous namespace)::CmdPortBuffer::~CmdPortBuffer()>:
    class CmdPortBuffer : public Fw::SerializeBufferBase {
   15cf0:	4b03      	ldr	r3, [pc, #12]	; (15d00 <Fw::(anonymous namespace)::CmdPortBuffer::~CmdPortBuffer()+0x10>)
   15cf2:	b510      	push	{r4, lr}
   15cf4:	4604      	mov	r4, r0
   15cf6:	6003      	str	r3, [r0, #0]
   15cf8:	f7ea fc2a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15cfc:	4620      	mov	r0, r4
   15cfe:	bd10      	pop	{r4, pc}
   15d00:	20002d7c 	.word	0x20002d7c

00015d04 <Fw::(anonymous namespace)::CmdPortBuffer::~CmdPortBuffer()>:
   15d04:	4b05      	ldr	r3, [pc, #20]	; (15d1c <Fw::(anonymous namespace)::CmdPortBuffer::~CmdPortBuffer()+0x18>)
   15d06:	b510      	push	{r4, lr}
   15d08:	4604      	mov	r4, r0
   15d0a:	6003      	str	r3, [r0, #0]
   15d0c:	f7ea fc20 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15d10:	2190      	movs	r1, #144	; 0x90
   15d12:	4620      	mov	r0, r4
   15d14:	f002 ffdc 	bl	18cd0 <operator delete(void*, unsigned int)>
   15d18:	4620      	mov	r0, r4
   15d1a:	bd10      	pop	{r4, pc}
   15d1c:	20002d7c 	.word	0x20002d7c

00015d20 <Fw::OutputCmdPort::~OutputCmdPort()>:

  };

  //! Output Cmd port
  //! Port for sending commands
  class OutputCmdPort :
   15d20:	4b03      	ldr	r3, [pc, #12]	; (15d30 <Fw::OutputCmdPort::~OutputCmdPort()+0x10>)
   15d22:	b510      	push	{r4, lr}
   15d24:	4604      	mov	r4, r0
   15d26:	6003      	str	r3, [r0, #0]
   15d28:	f001 ffe8 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15d2c:	4620      	mov	r0, r4
   15d2e:	bd10      	pop	{r4, pc}
   15d30:	20002ef0 	.word	0x20002ef0

00015d34 <Fw::OutputCmdPort::~OutputCmdPort()>:
   15d34:	4b05      	ldr	r3, [pc, #20]	; (15d4c <Fw::OutputCmdPort::~OutputCmdPort()+0x18>)
   15d36:	b510      	push	{r4, lr}
   15d38:	4604      	mov	r4, r0
   15d3a:	6003      	str	r3, [r0, #0]
   15d3c:	f001 ffde 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   15d40:	216c      	movs	r1, #108	; 0x6c
   15d42:	4620      	mov	r0, r4
   15d44:	f002 ffc4 	bl	18cd0 <operator delete(void*, unsigned int)>
   15d48:	4620      	mov	r0, r4
   15d4a:	bd10      	pop	{r4, pc}
   15d4c:	20002ef0 	.word	0x20002ef0

00015d50 <Fw::InputCmdPort::~InputCmdPort()>:
  class InputCmdPort :
   15d50:	4b03      	ldr	r3, [pc, #12]	; (15d60 <Fw::InputCmdPort::~InputCmdPort()+0x10>)
   15d52:	b510      	push	{r4, lr}
   15d54:	4604      	mov	r4, r0
   15d56:	6003      	str	r3, [r0, #0]
   15d58:	f001 ffb2 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   15d5c:	4620      	mov	r0, r4
   15d5e:	bd10      	pop	{r4, pc}
   15d60:	20002c84 	.word	0x20002c84

00015d64 <Fw::InputCmdPort::~InputCmdPort()>:
   15d64:	4b05      	ldr	r3, [pc, #20]	; (15d7c <Fw::InputCmdPort::~InputCmdPort()+0x18>)
   15d66:	b510      	push	{r4, lr}
   15d68:	4604      	mov	r4, r0
   15d6a:	6003      	str	r3, [r0, #0]
   15d6c:	f001 ffa8 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   15d70:	2170      	movs	r1, #112	; 0x70
   15d72:	4620      	mov	r0, r4
   15d74:	f002 ffac 	bl	18cd0 <operator delete(void*, unsigned int)>
   15d78:	4620      	mov	r0, r4
   15d7a:	bd10      	pop	{r4, pc}
   15d7c:	20002c84 	.word	0x20002c84

00015d80 <Fw::InputCmdPort::InputCmdPort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputCmdPort ::
   15d80:	b510      	push	{r4, lr}
   15d82:	4604      	mov	r4, r0
    InputCmdPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   15d84:	f001 ff8c 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   15d88:	4a02      	ldr	r2, [pc, #8]	; (15d94 <Fw::InputCmdPort::InputCmdPort()+0x14>)
   15d8a:	2300      	movs	r3, #0
  {

  }
   15d8c:	4620      	mov	r0, r4
      m_func(nullptr)
   15d8e:	6022      	str	r2, [r4, #0]
   15d90:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   15d92:	bd10      	pop	{r4, pc}
   15d94:	20002c84 	.word	0x20002c84

00015d98 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))>:
  void InputCmdPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   15d98:	b570      	push	{r4, r5, r6, lr}
   15d9a:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   15d9c:	460d      	mov	r5, r1
  {
   15d9e:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   15da0:	b121      	cbz	r1, 15dac <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   15da2:	b14e      	cbz	r6, 15db8 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))+0x20>

    this->m_comp = callComp;
   15da4:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   15da6:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   15da8:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   15daa:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   15dac:	2143      	movs	r1, #67	; 0x43
   15dae:	4806      	ldr	r0, [pc, #24]	; (15dc8 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))+0x30>)
   15db0:	f7eb fc2c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   15db4:	2e00      	cmp	r6, #0
   15db6:	d1f5      	bne.n	15da4 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))+0xc>
   15db8:	2144      	movs	r1, #68	; 0x44
   15dba:	4803      	ldr	r0, [pc, #12]	; (15dc8 <Fw::InputCmdPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdArgBuffer&))+0x30>)
   15dbc:	f7eb fc26 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   15dc0:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   15dc2:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   15dc4:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   15dc6:	bd70      	pop	{r4, r5, r6, pc}
   15dc8:	200006d8 	.word	0x200006d8

00015dcc <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)>:
    invoke(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
   15dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15dce:	4604      	mov	r4, r0
   15dd0:	b085      	sub	sp, #20
   15dd2:	461d      	mov	r5, r3
   15dd4:	460e      	mov	r6, r1
   15dd6:	9203      	str	r2, [sp, #12]
#if FW_PORT_TRACING == 1
    this->trace();
   15dd8:	f002 f83e 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   15ddc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15dde:	9b03      	ldr	r3, [sp, #12]
   15de0:	b142      	cbz	r2, 15df4 <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
   15de2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   15de4:	b177      	cbz	r7, 15e04 <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x38>

    return this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, args);
   15de6:	9500      	str	r5, [sp, #0]
   15de8:	4632      	mov	r2, r6
   15dea:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   15dee:	47b8      	blx	r7
  }
   15df0:	b005      	add	sp, #20
   15df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_comp != nullptr);
   15df4:	2156      	movs	r1, #86	; 0x56
   15df6:	4807      	ldr	r0, [pc, #28]	; (15e14 <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x48>)
   15df8:	f7eb fc08 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   15dfc:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   15dfe:	9b03      	ldr	r3, [sp, #12]
    FW_ASSERT(this->m_func != nullptr);
   15e00:	2f00      	cmp	r7, #0
   15e02:	d1f0      	bne.n	15de6 <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x1a>
   15e04:	2157      	movs	r1, #87	; 0x57
   15e06:	4803      	ldr	r0, [pc, #12]	; (15e14 <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x48>)
   15e08:	9303      	str	r3, [sp, #12]
   15e0a:	f7eb fbff 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, args);
   15e0e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   15e10:	9b03      	ldr	r3, [sp, #12]
   15e12:	e7e8      	b.n	15de6 <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)+0x1a>
   15e14:	200006d8 	.word	0x200006d8

00015e18 <Fw::OutputCmdPort::OutputCmdPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputCmdPort ::
   15e18:	b510      	push	{r4, lr}
   15e1a:	4604      	mov	r4, r0
    OutputCmdPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   15e1c:	f001 ff86 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   15e20:	4a02      	ldr	r2, [pc, #8]	; (15e2c <Fw::OutputCmdPort::OutputCmdPort()+0x14>)
   15e22:	2300      	movs	r3, #0
  {

  }
   15e24:	4620      	mov	r0, r4
      m_port(nullptr)
   15e26:	6022      	str	r2, [r4, #0]
   15e28:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   15e2a:	bd10      	pop	{r4, pc}
   15e2c:	20002ef0 	.word	0x20002ef0

00015e30 <Fw::OutputCmdPort::addCallPort(Fw::InputCmdPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputCmdPort ::
    addCallPort(InputCmdPort* callPort)
  {
   15e30:	b538      	push	{r3, r4, r5, lr}
   15e32:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   15e34:	460d      	mov	r5, r1
   15e36:	b121      	cbz	r1, 15e42 <Fw::OutputCmdPort::addCallPort(Fw::InputCmdPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   15e38:	2300      	movs	r3, #0
    this->m_port = callPort;
   15e3a:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   15e3c:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   15e3e:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   15e40:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   15e42:	2198      	movs	r1, #152	; 0x98
   15e44:	4801      	ldr	r0, [pc, #4]	; (15e4c <Fw::OutputCmdPort::addCallPort(Fw::InputCmdPort*)+0x1c>)
   15e46:	f7eb fbe1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   15e4a:	e7f5      	b.n	15e38 <Fw::OutputCmdPort::addCallPort(Fw::InputCmdPort*)+0x8>
   15e4c:	200006d8 	.word	0x200006d8

00015e50 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const>:
    invoke(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    ) const
  {
   15e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e54:	4604      	mov	r4, r0
   15e56:	b0a4      	sub	sp, #144	; 0x90
   15e58:	460e      	mov	r6, r1
   15e5a:	4617      	mov	r7, r2
   15e5c:	461d      	mov	r5, r3
#if FW_PORT_TRACING == 1
    this->trace();
   15e5e:	f001 fffb 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   15e62:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   15e64:	b138      	cbz	r0, 15e76 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x26>

    if (this->m_port != nullptr) {
      this->m_port->invoke(opCode, cmdSeq, args);
   15e66:	462b      	mov	r3, r5
   15e68:	463a      	mov	r2, r7
   15e6a:	4631      	mov	r1, r6
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(opCode, cmdSeq, args);
#endif
  }
   15e6c:	b024      	add	sp, #144	; 0x90
   15e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      this->m_port->invoke(opCode, cmdSeq, args);
   15e72:	f7ff bfab 	b.w	15dcc <Fw::InputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   15e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15e78:	2b00      	cmp	r3, #0
   15e7a:	d03b      	beq.n	15ef4 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xa4>
    class CmdPortBuffer : public Fw::SerializeBufferBase {
   15e7c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 15f08 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xb8>
   15e80:	4668      	mov	r0, sp
   15e82:	f7ea fb5d 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(opCode);
   15e86:	4631      	mov	r1, r6
   15e88:	4668      	mov	r0, sp
    class CmdPortBuffer : public Fw::SerializeBufferBase {
   15e8a:	f8cd 8000 	str.w	r8, [sp]
      _status = _buffer.serialize(opCode);
   15e8e:	f7ea fbe5 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15e92:	b9b8      	cbnz	r0, 15ec4 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x74>
      _status = _buffer.serialize(cmdSeq);
   15e94:	4639      	mov	r1, r7
   15e96:	4668      	mov	r0, sp
   15e98:	f7ea fbe0 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15e9c:	bb20      	cbnz	r0, 15ee8 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x98>
      _status = _buffer.serialize(args);
   15e9e:	4629      	mov	r1, r5
   15ea0:	4668      	mov	r0, sp
   15ea2:	f7ea fe33 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15ea6:	b9c8      	cbnz	r0, 15edc <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x8c>
      _status = this->m_serPort->invokeSerial(_buffer);
   15ea8:	6e60      	ldr	r0, [r4, #100]	; 0x64
   15eaa:	4669      	mov	r1, sp
   15eac:	6803      	ldr	r3, [r0, #0]
   15eae:	695b      	ldr	r3, [r3, #20]
   15eb0:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15eb2:	b968      	cbnz	r0, 15ed0 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x80>
    class CmdPortBuffer : public Fw::SerializeBufferBase {
   15eb4:	4668      	mov	r0, sp
   15eb6:	f8cd 8000 	str.w	r8, [sp]
   15eba:	f7ea fb49 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   15ebe:	b024      	add	sp, #144	; 0x90
   15ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15ec4:	4601      	mov	r1, r0
   15ec6:	22b8      	movs	r2, #184	; 0xb8
   15ec8:	480e      	ldr	r0, [pc, #56]	; (15f04 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xb4>)
   15eca:	f7eb fbad 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15ece:	e7e1      	b.n	15e94 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x44>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15ed0:	4601      	mov	r1, r0
   15ed2:	22c1      	movs	r2, #193	; 0xc1
   15ed4:	480b      	ldr	r0, [pc, #44]	; (15f04 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xb4>)
   15ed6:	f7eb fba7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15eda:	e7eb      	b.n	15eb4 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x64>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15edc:	4601      	mov	r1, r0
   15ede:	22be      	movs	r2, #190	; 0xbe
   15ee0:	4808      	ldr	r0, [pc, #32]	; (15f04 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xb4>)
   15ee2:	f7eb fba1 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15ee6:	e7df      	b.n	15ea8 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x58>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   15ee8:	4601      	mov	r1, r0
   15eea:	22bb      	movs	r2, #187	; 0xbb
   15eec:	4805      	ldr	r0, [pc, #20]	; (15f04 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xb4>)
   15eee:	f7eb fb9b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   15ef2:	e7d4      	b.n	15e9e <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x4e>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   15ef4:	21ae      	movs	r1, #174	; 0xae
   15ef6:	4803      	ldr	r0, [pc, #12]	; (15f04 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0xb4>)
   15ef8:	f7eb fb88 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   15efc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   15efe:	2800      	cmp	r0, #0
   15f00:	d0bc      	beq.n	15e7c <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x2c>
   15f02:	e7b0      	b.n	15e66 <Fw::OutputCmdPort::invoke(unsigned long, unsigned long, Fw::CmdArgBuffer&) const+0x16>
   15f04:	200006d8 	.word	0x200006d8
   15f08:	20002d7c 	.word	0x20002d7c

00015f0c <Fw::InputCmdPort::init()>:
    Fw::InputPortBase::init();
   15f0c:	f001 bef0 	b.w	17cf0 <Fw::InputPortBase::init()>

00015f10 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
   15f10:	b570      	push	{r4, r5, r6, lr}
   15f12:	4605      	mov	r5, r0
   15f14:	b0a6      	sub	sp, #152	; 0x98
   15f16:	460e      	mov	r6, r1
    this->trace();
   15f18:	f001 ff9e 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   15f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15f1e:	b34b      	cbz	r3, 15f74 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>
    FW_ASSERT(this->m_func != nullptr);
   15f20:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   15f22:	2b00      	cmp	r3, #0
   15f24:	d02d      	beq.n	15f82 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x72>
    _status = _buffer.deserialize(opCode);
   15f26:	a903      	add	r1, sp, #12
   15f28:	4630      	mov	r0, r6
   15f2a:	f7ea fec9 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   15f2e:	4604      	mov	r4, r0
   15f30:	b110      	cbz	r0, 15f38 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x28>
  }
   15f32:	4620      	mov	r0, r4
   15f34:	b026      	add	sp, #152	; 0x98
   15f36:	bd70      	pop	{r4, r5, r6, pc}
    _status = _buffer.deserialize(cmdSeq);
   15f38:	a904      	add	r1, sp, #16
   15f3a:	4630      	mov	r0, r6
   15f3c:	f7ea fec0 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   15f40:	4604      	mov	r4, r0
   15f42:	2800      	cmp	r0, #0
   15f44:	d1f5      	bne.n	15f32 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x22>
    Fw::CmdArgBuffer args;
   15f46:	a805      	add	r0, sp, #20
   15f48:	f7ff fe60 	bl	15c0c <Fw::CmdArgBuffer::CmdArgBuffer()>
    _status = _buffer.deserialize(args);
   15f4c:	a905      	add	r1, sp, #20
   15f4e:	4630      	mov	r0, r6
   15f50:	f7ea ffc6 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   15f54:	4604      	mov	r4, r0
   15f56:	b938      	cbnz	r0, 15f68 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x58>
    this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, args);
   15f58:	aa05      	add	r2, sp, #20
   15f5a:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   15f5c:	9b04      	ldr	r3, [sp, #16]
   15f5e:	9200      	str	r2, [sp, #0]
   15f60:	9a03      	ldr	r2, [sp, #12]
   15f62:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   15f66:	47b0      	blx	r6
  }
   15f68:	a805      	add	r0, sp, #20
   15f6a:	f7ff fe37 	bl	15bdc <Fw::CmdArgBuffer::~CmdArgBuffer()>
   15f6e:	4620      	mov	r0, r4
   15f70:	b026      	add	sp, #152	; 0x98
   15f72:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
   15f74:	2167      	movs	r1, #103	; 0x67
   15f76:	4805      	ldr	r0, [pc, #20]	; (15f8c <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x7c>)
   15f78:	f7eb fb48 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   15f7c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   15f7e:	2b00      	cmp	r3, #0
   15f80:	d1d1      	bne.n	15f26 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x16>
   15f82:	2168      	movs	r1, #104	; 0x68
   15f84:	4801      	ldr	r0, [pc, #4]	; (15f8c <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x7c>)
   15f86:	f7eb fb41 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   15f8a:	e7cc      	b.n	15f26 <Fw::InputCmdPort::invokeSerial(Fw::SerializeBufferBase&)+0x16>
   15f8c:	200006d8 	.word	0x200006d8

00015f90 <Fw::OutputCmdPort::init()>:
    Fw::OutputPortBase::init();
   15f90:	f001 bed8 	b.w	17d44 <Fw::OutputPortBase::init()>

00015f94 <Fw::(anonymous namespace)::CmdRegPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputCmdRegPort::SERIALIZED_SIZE;
        }
   15f94:	2004      	movs	r0, #4
   15f96:	4770      	bx	lr

00015f98 <Fw::(anonymous namespace)::CmdRegPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   15f98:	300c      	adds	r0, #12
   15f9a:	4770      	bx	lr

00015f9c <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputCmdRegPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
   15f9c:	b530      	push	{r4, r5, lr}
   15f9e:	4604      	mov	r4, r0
   15fa0:	b083      	sub	sp, #12
   15fa2:	460d      	mov	r5, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
   15fa4:	f001 ff58 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   15fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15faa:	b17b      	cbz	r3, 15fcc <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
    FW_ASSERT(this->m_func != nullptr);
   15fac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15fae:	b1a3      	cbz	r3, 15fda <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x3e>

    FwOpcodeType opCode;
    _status = _buffer.deserialize(opCode);
   15fb0:	4628      	mov	r0, r5
   15fb2:	a901      	add	r1, sp, #4
   15fb4:	f7ea fe84 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   15fb8:	4605      	mov	r5, r0
   15fba:	b920      	cbnz	r0, 15fc6 <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, opCode);
   15fbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15fbe:	9a01      	ldr	r2, [sp, #4]
   15fc0:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   15fc4:	4798      	blx	r3

    return Fw::FW_SERIALIZE_OK;
  }
   15fc6:	4628      	mov	r0, r5
   15fc8:	b003      	add	sp, #12
   15fca:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
   15fcc:	2163      	movs	r1, #99	; 0x63
   15fce:	4805      	ldr	r0, [pc, #20]	; (15fe4 <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
   15fd0:	f7eb fb1c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   15fd4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   15fd6:	2b00      	cmp	r3, #0
   15fd8:	d1ea      	bne.n	15fb0 <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   15fda:	2164      	movs	r1, #100	; 0x64
   15fdc:	4801      	ldr	r0, [pc, #4]	; (15fe4 <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x48>)
   15fde:	f7eb fb15 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   15fe2:	e7e5      	b.n	15fb0 <Fw::InputCmdRegPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   15fe4:	20000868 	.word	0x20000868

00015fe8 <Fw::(anonymous namespace)::CmdRegPortBuffer::~CmdRegPortBuffer()>:
    class CmdRegPortBuffer : public Fw::SerializeBufferBase {
   15fe8:	4b03      	ldr	r3, [pc, #12]	; (15ff8 <Fw::(anonymous namespace)::CmdRegPortBuffer::~CmdRegPortBuffer()+0x10>)
   15fea:	b510      	push	{r4, lr}
   15fec:	4604      	mov	r4, r0
   15fee:	6003      	str	r3, [r0, #0]
   15ff0:	f7ea faae 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   15ff4:	4620      	mov	r0, r4
   15ff6:	bd10      	pop	{r4, pc}
   15ff8:	20002e08 	.word	0x20002e08

00015ffc <Fw::(anonymous namespace)::CmdRegPortBuffer::~CmdRegPortBuffer()>:
   15ffc:	4b05      	ldr	r3, [pc, #20]	; (16014 <Fw::(anonymous namespace)::CmdRegPortBuffer::~CmdRegPortBuffer()+0x18>)
   15ffe:	b510      	push	{r4, lr}
   16000:	4604      	mov	r4, r0
   16002:	6003      	str	r3, [r0, #0]
   16004:	f7ea faa4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   16008:	2110      	movs	r1, #16
   1600a:	4620      	mov	r0, r4
   1600c:	f002 fe60 	bl	18cd0 <operator delete(void*, unsigned int)>
   16010:	4620      	mov	r0, r4
   16012:	bd10      	pop	{r4, pc}
   16014:	20002e08 	.word	0x20002e08

00016018 <Fw::OutputCmdRegPort::~OutputCmdRegPort()>:

  };

  //! Output CmdReg port
  //! Command registration port
  class OutputCmdRegPort :
   16018:	4b03      	ldr	r3, [pc, #12]	; (16028 <Fw::OutputCmdRegPort::~OutputCmdRegPort()+0x10>)
   1601a:	b510      	push	{r4, lr}
   1601c:	4604      	mov	r4, r0
   1601e:	6003      	str	r3, [r0, #0]
   16020:	f001 fe6c 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   16024:	4620      	mov	r0, r4
   16026:	bd10      	pop	{r4, pc}
   16028:	2000307c 	.word	0x2000307c

0001602c <Fw::OutputCmdRegPort::~OutputCmdRegPort()>:
   1602c:	4b05      	ldr	r3, [pc, #20]	; (16044 <Fw::OutputCmdRegPort::~OutputCmdRegPort()+0x18>)
   1602e:	b510      	push	{r4, lr}
   16030:	4604      	mov	r4, r0
   16032:	6003      	str	r3, [r0, #0]
   16034:	f001 fe62 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   16038:	216c      	movs	r1, #108	; 0x6c
   1603a:	4620      	mov	r0, r4
   1603c:	f002 fe48 	bl	18cd0 <operator delete(void*, unsigned int)>
   16040:	4620      	mov	r0, r4
   16042:	bd10      	pop	{r4, pc}
   16044:	2000307c 	.word	0x2000307c

00016048 <Fw::InputCmdRegPort::~InputCmdRegPort()>:
  class InputCmdRegPort :
   16048:	4b03      	ldr	r3, [pc, #12]	; (16058 <Fw::InputCmdRegPort::~InputCmdRegPort()+0x10>)
   1604a:	b510      	push	{r4, lr}
   1604c:	4604      	mov	r4, r0
   1604e:	6003      	str	r3, [r0, #0]
   16050:	f001 fe36 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   16054:	4620      	mov	r0, r4
   16056:	bd10      	pop	{r4, pc}
   16058:	20003004 	.word	0x20003004

0001605c <Fw::InputCmdRegPort::~InputCmdRegPort()>:
   1605c:	4b05      	ldr	r3, [pc, #20]	; (16074 <Fw::InputCmdRegPort::~InputCmdRegPort()+0x18>)
   1605e:	b510      	push	{r4, lr}
   16060:	4604      	mov	r4, r0
   16062:	6003      	str	r3, [r0, #0]
   16064:	f001 fe2c 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   16068:	2170      	movs	r1, #112	; 0x70
   1606a:	4620      	mov	r0, r4
   1606c:	f002 fe30 	bl	18cd0 <operator delete(void*, unsigned int)>
   16070:	4620      	mov	r0, r4
   16072:	bd10      	pop	{r4, pc}
   16074:	20003004 	.word	0x20003004

00016078 <Fw::InputCmdRegPort::InputCmdRegPort()>:
  InputCmdRegPort ::
   16078:	b510      	push	{r4, lr}
   1607a:	4604      	mov	r4, r0
      m_func(nullptr)
   1607c:	f001 fe10 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   16080:	4a02      	ldr	r2, [pc, #8]	; (1608c <Fw::InputCmdRegPort::InputCmdRegPort()+0x14>)
   16082:	2300      	movs	r3, #0
  }
   16084:	4620      	mov	r0, r4
      m_func(nullptr)
   16086:	6022      	str	r2, [r4, #0]
   16088:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   1608a:	bd10      	pop	{r4, pc}
   1608c:	20003004 	.word	0x20003004

00016090 <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))>:
  {
   16090:	b570      	push	{r4, r5, r6, lr}
   16092:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   16094:	460d      	mov	r5, r1
  {
   16096:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   16098:	b121      	cbz	r1, 160a4 <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   1609a:	b14e      	cbz	r6, 160b0 <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x20>
    this->m_comp = callComp;
   1609c:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   1609e:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   160a0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   160a2:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   160a4:	2143      	movs	r1, #67	; 0x43
   160a6:	4806      	ldr	r0, [pc, #24]	; (160c0 <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   160a8:	f7eb fab0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   160ac:	2e00      	cmp	r6, #0
   160ae:	d1f5      	bne.n	1609c <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0xc>
   160b0:	2144      	movs	r1, #68	; 0x44
   160b2:	4803      	ldr	r0, [pc, #12]	; (160c0 <Fw::InputCmdRegPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long))+0x30>)
   160b4:	f7eb faaa 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   160b8:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   160ba:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   160bc:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   160be:	bd70      	pop	{r4, r5, r6, pc}
   160c0:	20000868 	.word	0x20000868

000160c4 <Fw::InputCmdRegPort::invoke(unsigned long)>:
  {
   160c4:	b510      	push	{r4, lr}
   160c6:	4604      	mov	r4, r0
   160c8:	b082      	sub	sp, #8
   160ca:	9101      	str	r1, [sp, #4]
    this->trace();
   160cc:	f001 fec4 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   160d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   160d2:	9a01      	ldr	r2, [sp, #4]
   160d4:	b13b      	cbz	r3, 160e6 <Fw::InputCmdRegPort::invoke(unsigned long)+0x22>
    FW_ASSERT(this->m_func != nullptr);
   160d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   160d8:	b16b      	cbz	r3, 160f6 <Fw::InputCmdRegPort::invoke(unsigned long)+0x32>
    return this->m_func(this->m_comp, this->m_portNum, opCode);
   160da:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   160de:	b002      	add	sp, #8
   160e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, opCode);
   160e4:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
   160e6:	2152      	movs	r1, #82	; 0x52
   160e8:	4809      	ldr	r0, [pc, #36]	; (16110 <Fw::InputCmdRegPort::invoke(unsigned long)+0x4c>)
   160ea:	f7eb fa8f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   160ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   160f0:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   160f2:	2b00      	cmp	r3, #0
   160f4:	d1f1      	bne.n	160da <Fw::InputCmdRegPort::invoke(unsigned long)+0x16>
   160f6:	2153      	movs	r1, #83	; 0x53
   160f8:	4805      	ldr	r0, [pc, #20]	; (16110 <Fw::InputCmdRegPort::invoke(unsigned long)+0x4c>)
   160fa:	9201      	str	r2, [sp, #4]
   160fc:	f7eb fa86 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, opCode);
   16100:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   16102:	9a01      	ldr	r2, [sp, #4]
   16104:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   16108:	b002      	add	sp, #8
   1610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, opCode);
   1610e:	4718      	bx	r3
   16110:	20000868 	.word	0x20000868

00016114 <Fw::OutputCmdRegPort::OutputCmdRegPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputCmdRegPort ::
   16114:	b510      	push	{r4, lr}
   16116:	4604      	mov	r4, r0
    OutputCmdRegPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   16118:	f001 fe08 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   1611c:	4a02      	ldr	r2, [pc, #8]	; (16128 <Fw::OutputCmdRegPort::OutputCmdRegPort()+0x14>)
   1611e:	2300      	movs	r3, #0
  {

  }
   16120:	4620      	mov	r0, r4
      m_port(nullptr)
   16122:	6022      	str	r2, [r4, #0]
   16124:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   16126:	bd10      	pop	{r4, pc}
   16128:	2000307c 	.word	0x2000307c

0001612c <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputCmdRegPort ::
    addCallPort(InputCmdRegPort* callPort)
  {
   1612c:	b538      	push	{r3, r4, r5, lr}
   1612e:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   16130:	460d      	mov	r5, r1
   16132:	b121      	cbz	r1, 1613e <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   16134:	2300      	movs	r3, #0
    this->m_port = callPort;
   16136:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   16138:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   1613a:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   1613c:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   1613e:	2188      	movs	r1, #136	; 0x88
   16140:	4801      	ldr	r0, [pc, #4]	; (16148 <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)+0x1c>)
   16142:	f7eb fa63 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   16146:	e7f5      	b.n	16134 <Fw::OutputCmdRegPort::addCallPort(Fw::InputCmdRegPort*)+0x8>
   16148:	20000868 	.word	0x20000868

0001614c <Fw::OutputCmdRegPort::invoke(unsigned long) const>:

  void OutputCmdRegPort ::
    invoke(FwOpcodeType opCode) const
  {
   1614c:	b570      	push	{r4, r5, r6, lr}
   1614e:	4604      	mov	r4, r0
   16150:	b084      	sub	sp, #16
   16152:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
   16154:	f001 fe80 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16158:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1615a:	b128      	cbz	r0, 16168 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(opCode);
   1615c:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(opCode);
#endif
  }
   1615e:	b004      	add	sp, #16
   16160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(opCode);
   16164:	f7ff bfae 	b.w	160c4 <Fw::InputCmdRegPort::invoke(unsigned long)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16168:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1616a:	b30b      	cbz	r3, 161b0 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x64>
    class CmdRegPortBuffer : public Fw::SerializeBufferBase {
   1616c:	4e14      	ldr	r6, [pc, #80]	; (161c0 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x74>)
   1616e:	4668      	mov	r0, sp
   16170:	f7ea f9e6 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(opCode);
   16174:	4629      	mov	r1, r5
   16176:	4668      	mov	r0, sp
    class CmdRegPortBuffer : public Fw::SerializeBufferBase {
   16178:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(opCode);
   1617a:	f7ea fa6f 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1617e:	b958      	cbnz	r0, 16198 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
   16180:	6e60      	ldr	r0, [r4, #100]	; 0x64
   16182:	4669      	mov	r1, sp
   16184:	6803      	ldr	r3, [r0, #0]
   16186:	695b      	ldr	r3, [r3, #20]
   16188:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1618a:	b958      	cbnz	r0, 161a4 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x58>
    class CmdRegPortBuffer : public Fw::SerializeBufferBase {
   1618c:	4668      	mov	r0, sp
   1618e:	9600      	str	r6, [sp, #0]
   16190:	f7ea f9de 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   16194:	b004      	add	sp, #16
   16196:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16198:	4601      	mov	r1, r0
   1619a:	22a4      	movs	r2, #164	; 0xa4
   1619c:	4809      	ldr	r0, [pc, #36]	; (161c4 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x78>)
   1619e:	f7eb fa43 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   161a2:	e7ed      	b.n	16180 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   161a4:	4601      	mov	r1, r0
   161a6:	22a7      	movs	r2, #167	; 0xa7
   161a8:	4806      	ldr	r0, [pc, #24]	; (161c4 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x78>)
   161aa:	f7eb fa3d 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   161ae:	e7ed      	b.n	1618c <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   161b0:	219a      	movs	r1, #154	; 0x9a
   161b2:	4804      	ldr	r0, [pc, #16]	; (161c4 <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x78>)
   161b4:	f7eb fa2a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   161b8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   161ba:	2800      	cmp	r0, #0
   161bc:	d0d6      	beq.n	1616c <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x20>
   161be:	e7cd      	b.n	1615c <Fw::OutputCmdRegPort::invoke(unsigned long) const+0x10>
   161c0:	20002e08 	.word	0x20002e08
   161c4:	20000868 	.word	0x20000868

000161c8 <Fw::InputCmdRegPort::init()>:
    Fw::InputPortBase::init();
   161c8:	f001 bd92 	b.w	17cf0 <Fw::InputPortBase::init()>

000161cc <Fw::OutputCmdRegPort::init()>:
    Fw::OutputPortBase::init();
   161cc:	f001 bdba 	b.w	17d44 <Fw::OutputPortBase::init()>

000161d0 <Fw::CmdResponse::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= OK) && (e <= BUSY));
  }

  Fw::SerializeStatus CmdResponse ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   161d0:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   161d2:	7901      	ldrb	r1, [r0, #4]
   161d4:	4618      	mov	r0, r3
   161d6:	f7ea baa7 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   161da:	bf00      	nop

000161dc <Fw::CmdResponse::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus CmdResponse ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   161dc:	b510      	push	{r4, lr}
   161de:	460a      	mov	r2, r1
   161e0:	b082      	sub	sp, #8
   161e2:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   161e4:	a901      	add	r1, sp, #4
   161e6:	4610      	mov	r0, r2
   161e8:	f7ea fd78 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   161ec:	b938      	cbnz	r0, 161fe <Fw::CmdResponse::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
   161ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   161f2:	2a05      	cmp	r2, #5
      this->e = static_cast<T>(es);
   161f4:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   161f6:	bf94      	ite	ls
   161f8:	2300      	movls	r3, #0
   161fa:	2301      	movhi	r3, #1
   161fc:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   161fe:	b002      	add	sp, #8
   16200:	bd10      	pop	{r4, pc}
   16202:	bf00      	nop

00016204 <Fw::CmdResponse::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void CmdResponse ::
    toString(Fw::StringBase& sb) const
  {
   16204:	b570      	push	{r4, r5, r6, lr}
   16206:	b0a2      	sub	sp, #136	; 0x88
   16208:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   1620a:	4e20      	ldr	r6, [pc, #128]	; (1628c <Fw::CmdResponse::toString(Fw::StringBase&) const+0x88>)
   1620c:	460d      	mov	r5, r1
   1620e:	4668      	mov	r0, sp
   16210:	f7eb f806 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   16214:	491e      	ldr	r1, [pc, #120]	; (16290 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x8c>)
   16216:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   16218:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   1621a:	f7eb f869 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   1621e:	7923      	ldrb	r3, [r4, #4]
   16220:	2b05      	cmp	r3, #5
   16222:	d82d      	bhi.n	16280 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x7c>
   16224:	e8df f003 	tbb	[pc, r3]
   16228:	221d1813 	.word	0x221d1813
   1622c:	0327      	.short	0x0327
   1622e:	4919      	ldr	r1, [pc, #100]	; (16294 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x90>)
   16230:	4668      	mov	r0, sp
   16232:	f7eb f85d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   16236:	7923      	ldrb	r3, [r4, #4]
   16238:	aa01      	add	r2, sp, #4
   1623a:	4917      	ldr	r1, [pc, #92]	; (16298 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x94>)
   1623c:	4628      	mov	r0, r5
   1623e:	f7eb f825 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   16242:	4668      	mov	r0, sp
   16244:	9600      	str	r6, [sp, #0]
   16246:	f7ea fff5 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   1624a:	b022      	add	sp, #136	; 0x88
   1624c:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   1624e:	4913      	ldr	r1, [pc, #76]	; (1629c <Fw::CmdResponse::toString(Fw::StringBase&) const+0x98>)
   16250:	4668      	mov	r0, sp
   16252:	f7eb f84d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16256:	e7ee      	b.n	16236 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
   16258:	4911      	ldr	r1, [pc, #68]	; (162a0 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x9c>)
   1625a:	4668      	mov	r0, sp
   1625c:	f7eb f848 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16260:	e7e9      	b.n	16236 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
   16262:	4910      	ldr	r1, [pc, #64]	; (162a4 <Fw::CmdResponse::toString(Fw::StringBase&) const+0xa0>)
   16264:	4668      	mov	r0, sp
   16266:	f7eb f843 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   1626a:	e7e4      	b.n	16236 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
   1626c:	490e      	ldr	r1, [pc, #56]	; (162a8 <Fw::CmdResponse::toString(Fw::StringBase&) const+0xa4>)
   1626e:	4668      	mov	r0, sp
   16270:	f7eb f83e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16274:	e7df      	b.n	16236 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
   16276:	490d      	ldr	r1, [pc, #52]	; (162ac <Fw::CmdResponse::toString(Fw::StringBase&) const+0xa8>)
   16278:	4668      	mov	r0, sp
   1627a:	f7eb f839 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   1627e:	e7da      	b.n	16236 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x32>
        (void)StringBase::operator=(src);
   16280:	490b      	ldr	r1, [pc, #44]	; (162b0 <Fw::CmdResponse::toString(Fw::StringBase&) const+0xac>)
   16282:	4668      	mov	r0, sp
   16284:	f7eb f834 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16288:	e7d5      	b.n	16236 <Fw::CmdResponse::toString(Fw::StringBase&) const+0x32>
   1628a:	bf00      	nop
   1628c:	200032dc 	.word	0x200032dc
   16290:	20001d2c 	.word	0x20001d2c
   16294:	20002370 	.word	0x20002370
   16298:	20002470 	.word	0x20002470
   1629c:	20002328 	.word	0x20002328
   162a0:	2000232c 	.word	0x2000232c
   162a4:	2000233c 	.word	0x2000233c
   162a8:	20002350 	.word	0x20002350
   162ac:	20002360 	.word	0x20002360
   162b0:	20002464 	.word	0x20002464

000162b4 <Fw::CmdResponse::~CmdResponse()>:
   162b4:	4b03      	ldr	r3, [pc, #12]	; (162c4 <Fw::CmdResponse::~CmdResponse()+0x10>)
   162b6:	b510      	push	{r4, lr}
   162b8:	4604      	mov	r4, r0
   162ba:	6003      	str	r3, [r0, #0]
   162bc:	f7ea f93e 	bl	53c <Fw::Serializable::~Serializable()>
   162c0:	4620      	mov	r0, r4
   162c2:	bd10      	pop	{r4, pc}
   162c4:	20002bec 	.word	0x20002bec

000162c8 <Fw::CmdResponse::~CmdResponse()>:
   162c8:	4b05      	ldr	r3, [pc, #20]	; (162e0 <Fw::CmdResponse::~CmdResponse()+0x18>)
   162ca:	b510      	push	{r4, lr}
   162cc:	4604      	mov	r4, r0
   162ce:	6003      	str	r3, [r0, #0]
   162d0:	f7ea f934 	bl	53c <Fw::Serializable::~Serializable()>
   162d4:	2108      	movs	r1, #8
   162d6:	4620      	mov	r0, r4
   162d8:	f002 fcfa 	bl	18cd0 <operator delete(void*, unsigned int)>
   162dc:	4620      	mov	r0, r4
   162de:	bd10      	pop	{r4, pc}
   162e0:	20002bec 	.word	0x20002bec

000162e4 <Fw::(anonymous namespace)::CmdResponsePortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputCmdResponsePort::SERIALIZED_SIZE;
        }
   162e4:	200c      	movs	r0, #12
   162e6:	4770      	bx	lr

000162e8 <Fw::(anonymous namespace)::CmdResponsePortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   162e8:	300c      	adds	r0, #12
   162ea:	4770      	bx	lr

000162ec <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputCmdResponsePort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
   162ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   162ee:	4605      	mov	r5, r0
   162f0:	b087      	sub	sp, #28
   162f2:	460e      	mov	r6, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
   162f4:	f001 fdb0 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   162f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   162fa:	2b00      	cmp	r3, #0
   162fc:	d02e      	beq.n	1635c <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x70>
    FW_ASSERT(this->m_func != nullptr);
   162fe:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   16300:	2b00      	cmp	r3, #0
   16302:	d032      	beq.n	1636a <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x7e>

    FwOpcodeType opCode;
    _status = _buffer.deserialize(opCode);
   16304:	a902      	add	r1, sp, #8
   16306:	4630      	mov	r0, r6
   16308:	f7ea fcda 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   1630c:	4604      	mov	r4, r0
   1630e:	b110      	cbz	r0, 16316 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
    }

    this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, response);

    return Fw::FW_SERIALIZE_OK;
  }
   16310:	4620      	mov	r0, r4
   16312:	b007      	add	sp, #28
   16314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _status = _buffer.deserialize(cmdSeq);
   16316:	a903      	add	r1, sp, #12
   16318:	4630      	mov	r0, r6
   1631a:	f7ea fcd1 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   1631e:	4604      	mov	r4, r0
   16320:	2800      	cmp	r0, #0
   16322:	d1f5      	bne.n	16310 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x24>
      {
   16324:	a804      	add	r0, sp, #16
   16326:	4f13      	ldr	r7, [pc, #76]	; (16374 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x88>)
   16328:	f7ea f902 	bl	530 <Fw::Serializable::Serializable()>
    _status = _buffer.deserialize(response);
   1632c:	4630      	mov	r0, r6
   1632e:	a904      	add	r1, sp, #16
        this->e = OK;
   16330:	f88d 4014 	strb.w	r4, [sp, #20]
      {
   16334:	9704      	str	r7, [sp, #16]
   16336:	f7ea fdcd 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   1633a:	4604      	mov	r4, r0
   1633c:	b938      	cbnz	r0, 1634e <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x62>
    this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, response);
   1633e:	ab04      	add	r3, sp, #16
   16340:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   16342:	9300      	str	r3, [sp, #0]
   16344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16348:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   1634c:	47b0      	blx	r6
  class CmdResponse :
   1634e:	a804      	add	r0, sp, #16
   16350:	9704      	str	r7, [sp, #16]
   16352:	f7ea f8f3 	bl	53c <Fw::Serializable::~Serializable()>
  }
   16356:	4620      	mov	r0, r4
   16358:	b007      	add	sp, #28
   1635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_comp != nullptr);
   1635c:	2167      	movs	r1, #103	; 0x67
   1635e:	4806      	ldr	r0, [pc, #24]	; (16378 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x8c>)
   16360:	f7eb f954 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   16364:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   16366:	2b00      	cmp	r3, #0
   16368:	d1cc      	bne.n	16304 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   1636a:	2168      	movs	r1, #104	; 0x68
   1636c:	4802      	ldr	r0, [pc, #8]	; (16378 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x8c>)
   1636e:	f7eb f94d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   16372:	e7c7      	b.n	16304 <Fw::InputCmdResponsePort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   16374:	20002bec 	.word	0x20002bec
   16378:	20000bf0 	.word	0x20000bf0

0001637c <Fw::(anonymous namespace)::CmdResponsePortBuffer::~CmdResponsePortBuffer()>:
    class CmdResponsePortBuffer : public Fw::SerializeBufferBase {
   1637c:	4b03      	ldr	r3, [pc, #12]	; (1638c <Fw::(anonymous namespace)::CmdResponsePortBuffer::~CmdResponsePortBuffer()+0x10>)
   1637e:	b510      	push	{r4, lr}
   16380:	4604      	mov	r4, r0
   16382:	6003      	str	r3, [r0, #0]
   16384:	f7ea f8e4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   16388:	4620      	mov	r0, r4
   1638a:	bd10      	pop	{r4, pc}
   1638c:	20002e78 	.word	0x20002e78

00016390 <Fw::(anonymous namespace)::CmdResponsePortBuffer::~CmdResponsePortBuffer()>:
   16390:	4b05      	ldr	r3, [pc, #20]	; (163a8 <Fw::(anonymous namespace)::CmdResponsePortBuffer::~CmdResponsePortBuffer()+0x18>)
   16392:	b510      	push	{r4, lr}
   16394:	4604      	mov	r4, r0
   16396:	6003      	str	r3, [r0, #0]
   16398:	f7ea f8da 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   1639c:	2118      	movs	r1, #24
   1639e:	4620      	mov	r0, r4
   163a0:	f002 fc96 	bl	18cd0 <operator delete(void*, unsigned int)>
   163a4:	4620      	mov	r0, r4
   163a6:	bd10      	pop	{r4, pc}
   163a8:	20002e78 	.word	0x20002e78

000163ac <Fw::OutputCmdResponsePort::~OutputCmdResponsePort()>:

  };

  //! Output CmdResponse port
  //! Port for sending command responses
  class OutputCmdResponsePort :
   163ac:	4b03      	ldr	r3, [pc, #12]	; (163bc <Fw::OutputCmdResponsePort::~OutputCmdResponsePort()+0x10>)
   163ae:	b510      	push	{r4, lr}
   163b0:	4604      	mov	r4, r0
   163b2:	6003      	str	r3, [r0, #0]
   163b4:	f001 fca2 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   163b8:	4620      	mov	r0, r4
   163ba:	bd10      	pop	{r4, pc}
   163bc:	200031f8 	.word	0x200031f8

000163c0 <Fw::OutputCmdResponsePort::~OutputCmdResponsePort()>:
   163c0:	4b05      	ldr	r3, [pc, #20]	; (163d8 <Fw::OutputCmdResponsePort::~OutputCmdResponsePort()+0x18>)
   163c2:	b510      	push	{r4, lr}
   163c4:	4604      	mov	r4, r0
   163c6:	6003      	str	r3, [r0, #0]
   163c8:	f001 fc98 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   163cc:	216c      	movs	r1, #108	; 0x6c
   163ce:	4620      	mov	r0, r4
   163d0:	f002 fc7e 	bl	18cd0 <operator delete(void*, unsigned int)>
   163d4:	4620      	mov	r0, r4
   163d6:	bd10      	pop	{r4, pc}
   163d8:	200031f8 	.word	0x200031f8

000163dc <Fw::InputCmdResponsePort::~InputCmdResponsePort()>:
  class InputCmdResponsePort :
   163dc:	4b03      	ldr	r3, [pc, #12]	; (163ec <Fw::InputCmdResponsePort::~InputCmdResponsePort()+0x10>)
   163de:	b510      	push	{r4, lr}
   163e0:	4604      	mov	r4, r0
   163e2:	6003      	str	r3, [r0, #0]
   163e4:	f001 fc6c 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   163e8:	4620      	mov	r0, r4
   163ea:	bd10      	pop	{r4, pc}
   163ec:	200031a4 	.word	0x200031a4

000163f0 <Fw::InputCmdResponsePort::~InputCmdResponsePort()>:
   163f0:	4b05      	ldr	r3, [pc, #20]	; (16408 <Fw::InputCmdResponsePort::~InputCmdResponsePort()+0x18>)
   163f2:	b510      	push	{r4, lr}
   163f4:	4604      	mov	r4, r0
   163f6:	6003      	str	r3, [r0, #0]
   163f8:	f001 fc62 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   163fc:	2170      	movs	r1, #112	; 0x70
   163fe:	4620      	mov	r0, r4
   16400:	f002 fc66 	bl	18cd0 <operator delete(void*, unsigned int)>
   16404:	4620      	mov	r0, r4
   16406:	bd10      	pop	{r4, pc}
   16408:	200031a4 	.word	0x200031a4

0001640c <Fw::InputCmdResponsePort::InputCmdResponsePort()>:
  InputCmdResponsePort ::
   1640c:	b510      	push	{r4, lr}
   1640e:	4604      	mov	r4, r0
      m_func(nullptr)
   16410:	f001 fc46 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   16414:	4a02      	ldr	r2, [pc, #8]	; (16420 <Fw::InputCmdResponsePort::InputCmdResponsePort()+0x14>)
   16416:	2300      	movs	r3, #0
  }
   16418:	4620      	mov	r0, r4
      m_func(nullptr)
   1641a:	6022      	str	r2, [r4, #0]
   1641c:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   1641e:	bd10      	pop	{r4, pc}
   16420:	200031a4 	.word	0x200031a4

00016424 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))>:
  {
   16424:	b570      	push	{r4, r5, r6, lr}
   16426:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   16428:	460d      	mov	r5, r1
  {
   1642a:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   1642c:	b121      	cbz	r1, 16438 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   1642e:	b14e      	cbz	r6, 16444 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))+0x20>
    this->m_comp = callComp;
   16430:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   16432:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   16434:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   16436:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   16438:	2143      	movs	r1, #67	; 0x43
   1643a:	4806      	ldr	r0, [pc, #24]	; (16454 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))+0x30>)
   1643c:	f7eb f8e6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   16440:	2e00      	cmp	r6, #0
   16442:	d1f5      	bne.n	16430 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))+0xc>
   16444:	2144      	movs	r1, #68	; 0x44
   16446:	4803      	ldr	r0, [pc, #12]	; (16454 <Fw::InputCmdResponsePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, unsigned long, Fw::CmdResponse const&))+0x30>)
   16448:	f7eb f8e0 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   1644c:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   1644e:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   16450:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   16452:	bd70      	pop	{r4, r5, r6, pc}
   16454:	20000bf0 	.word	0x20000bf0

00016458 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)>:
  {
   16458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1645a:	4604      	mov	r4, r0
   1645c:	b085      	sub	sp, #20
   1645e:	461d      	mov	r5, r3
   16460:	460e      	mov	r6, r1
   16462:	9203      	str	r2, [sp, #12]
    this->trace();
   16464:	f001 fcf8 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   16468:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1646a:	9b03      	ldr	r3, [sp, #12]
   1646c:	b142      	cbz	r2, 16480 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
   1646e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   16470:	b177      	cbz	r7, 16490 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)+0x38>
    return this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, response);
   16472:	9500      	str	r5, [sp, #0]
   16474:	4632      	mov	r2, r6
   16476:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   1647a:	47b8      	blx	r7
  }
   1647c:	b005      	add	sp, #20
   1647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_comp != nullptr);
   16480:	2156      	movs	r1, #86	; 0x56
   16482:	4807      	ldr	r0, [pc, #28]	; (164a0 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)+0x48>)
   16484:	f7eb f8c2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   16488:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   1648a:	9b03      	ldr	r3, [sp, #12]
    FW_ASSERT(this->m_func != nullptr);
   1648c:	2f00      	cmp	r7, #0
   1648e:	d1f0      	bne.n	16472 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)+0x1a>
   16490:	2157      	movs	r1, #87	; 0x57
   16492:	4803      	ldr	r0, [pc, #12]	; (164a0 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)+0x48>)
   16494:	9303      	str	r3, [sp, #12]
   16496:	f7eb f8b9 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, opCode, cmdSeq, response);
   1649a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   1649c:	9b03      	ldr	r3, [sp, #12]
   1649e:	e7e8      	b.n	16472 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)+0x1a>
   164a0:	20000bf0 	.word	0x20000bf0

000164a4 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputCmdResponsePort ::
   164a4:	b510      	push	{r4, lr}
   164a6:	4604      	mov	r4, r0
    OutputCmdResponsePort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   164a8:	f001 fc40 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   164ac:	4a02      	ldr	r2, [pc, #8]	; (164b8 <Fw::OutputCmdResponsePort::OutputCmdResponsePort()+0x14>)
   164ae:	2300      	movs	r3, #0
  {

  }
   164b0:	4620      	mov	r0, r4
      m_port(nullptr)
   164b2:	6022      	str	r2, [r4, #0]
   164b4:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   164b6:	bd10      	pop	{r4, pc}
   164b8:	200031f8 	.word	0x200031f8

000164bc <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputCmdResponsePort ::
    addCallPort(InputCmdResponsePort* callPort)
  {
   164bc:	b538      	push	{r3, r4, r5, lr}
   164be:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   164c0:	460d      	mov	r5, r1
   164c2:	b121      	cbz	r1, 164ce <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   164c4:	2300      	movs	r3, #0
    this->m_port = callPort;
   164c6:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   164c8:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   164ca:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   164cc:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   164ce:	2198      	movs	r1, #152	; 0x98
   164d0:	4801      	ldr	r0, [pc, #4]	; (164d8 <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)+0x1c>)
   164d2:	f7eb f89b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   164d6:	e7f5      	b.n	164c4 <Fw::OutputCmdResponsePort::addCallPort(Fw::InputCmdResponsePort*)+0x8>
   164d8:	20000bf0 	.word	0x20000bf0

000164dc <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const>:
    invoke(
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    ) const
  {
   164dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164e0:	4604      	mov	r4, r0
   164e2:	b086      	sub	sp, #24
   164e4:	460e      	mov	r6, r1
   164e6:	4617      	mov	r7, r2
   164e8:	461d      	mov	r5, r3
#if FW_PORT_TRACING == 1
    this->trace();
   164ea:	f001 fcb5 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   164ee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   164f0:	b138      	cbz	r0, 16502 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x26>

    if (this->m_port != nullptr) {
      this->m_port->invoke(opCode, cmdSeq, response);
   164f2:	462b      	mov	r3, r5
   164f4:	463a      	mov	r2, r7
   164f6:	4631      	mov	r1, r6
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(opCode, cmdSeq, response);
#endif
  }
   164f8:	b006      	add	sp, #24
   164fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      this->m_port->invoke(opCode, cmdSeq, response);
   164fe:	f7ff bfab 	b.w	16458 <Fw::InputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16502:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16504:	2b00      	cmp	r3, #0
   16506:	d03b      	beq.n	16580 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xa4>
    class CmdResponsePortBuffer : public Fw::SerializeBufferBase {
   16508:	f8df 8088 	ldr.w	r8, [pc, #136]	; 16594 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xb8>
   1650c:	4668      	mov	r0, sp
   1650e:	f7ea f817 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(opCode);
   16512:	4631      	mov	r1, r6
   16514:	4668      	mov	r0, sp
    class CmdResponsePortBuffer : public Fw::SerializeBufferBase {
   16516:	f8cd 8000 	str.w	r8, [sp]
      _status = _buffer.serialize(opCode);
   1651a:	f7ea f89f 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1651e:	b9b8      	cbnz	r0, 16550 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x74>
      _status = _buffer.serialize(cmdSeq);
   16520:	4639      	mov	r1, r7
   16522:	4668      	mov	r0, sp
   16524:	f7ea f89a 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16528:	bb20      	cbnz	r0, 16574 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x98>
      _status = _buffer.serialize(response);
   1652a:	4629      	mov	r1, r5
   1652c:	4668      	mov	r0, sp
   1652e:	f7ea fae7 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16532:	b9c8      	cbnz	r0, 16568 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x8c>
      _status = this->m_serPort->invokeSerial(_buffer);
   16534:	6e60      	ldr	r0, [r4, #100]	; 0x64
   16536:	4669      	mov	r1, sp
   16538:	6803      	ldr	r3, [r0, #0]
   1653a:	695b      	ldr	r3, [r3, #20]
   1653c:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1653e:	b968      	cbnz	r0, 1655c <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x80>
    class CmdResponsePortBuffer : public Fw::SerializeBufferBase {
   16540:	4668      	mov	r0, sp
   16542:	f8cd 8000 	str.w	r8, [sp]
   16546:	f7ea f803 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   1654a:	b006      	add	sp, #24
   1654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16550:	4601      	mov	r1, r0
   16552:	22b8      	movs	r2, #184	; 0xb8
   16554:	480e      	ldr	r0, [pc, #56]	; (16590 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xb4>)
   16556:	f7eb f867 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1655a:	e7e1      	b.n	16520 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x44>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1655c:	4601      	mov	r1, r0
   1655e:	22c1      	movs	r2, #193	; 0xc1
   16560:	480b      	ldr	r0, [pc, #44]	; (16590 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xb4>)
   16562:	f7eb f861 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16566:	e7eb      	b.n	16540 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x64>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16568:	4601      	mov	r1, r0
   1656a:	22be      	movs	r2, #190	; 0xbe
   1656c:	4808      	ldr	r0, [pc, #32]	; (16590 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xb4>)
   1656e:	f7eb f85b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16572:	e7df      	b.n	16534 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x58>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16574:	4601      	mov	r1, r0
   16576:	22bb      	movs	r2, #187	; 0xbb
   16578:	4805      	ldr	r0, [pc, #20]	; (16590 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xb4>)
   1657a:	f7eb f855 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1657e:	e7d4      	b.n	1652a <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x4e>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16580:	21ae      	movs	r1, #174	; 0xae
   16582:	4803      	ldr	r0, [pc, #12]	; (16590 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0xb4>)
   16584:	f7eb f842 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   16588:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1658a:	2800      	cmp	r0, #0
   1658c:	d0bc      	beq.n	16508 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x2c>
   1658e:	e7b0      	b.n	164f2 <Fw::OutputCmdResponsePort::invoke(unsigned long, unsigned long, Fw::CmdResponse const&) const+0x16>
   16590:	20000bf0 	.word	0x20000bf0
   16594:	20002e78 	.word	0x20002e78

00016598 <Fw::InputCmdResponsePort::init()>:
    Fw::InputPortBase::init();
   16598:	f001 bbaa 	b.w	17cf0 <Fw::InputPortBase::init()>

0001659c <Fw::OutputCmdResponsePort::init()>:
    Fw::OutputPortBase::init();
   1659c:	f001 bbd2 	b.w	17d44 <Fw::OutputPortBase::init()>

000165a0 <Fw::LogBuffer::getBuffCapacity() const>:
        return *this;
    }

    NATIVE_UINT_TYPE LogBuffer::getBuffCapacity() const {
        return sizeof(this->m_bufferData);
    }
   165a0:	2078      	movs	r0, #120	; 0x78
   165a2:	4770      	bx	lr

000165a4 <Fw::LogBuffer::getBuffAddr()>:
        return this->m_bufferData;
    }

    U8* LogBuffer::getBuffAddr() {
        return this->m_bufferData;
    }
   165a4:	300c      	adds	r0, #12
   165a6:	4770      	bx	lr

000165a8 <Fw::LogBuffer::~LogBuffer()>:
    LogBuffer::~LogBuffer() {
   165a8:	4b03      	ldr	r3, [pc, #12]	; (165b8 <Fw::LogBuffer::~LogBuffer()+0x10>)
   165aa:	b510      	push	{r4, lr}
   165ac:	4604      	mov	r4, r0
   165ae:	6003      	str	r3, [r0, #0]
   165b0:	f7e9 ffce 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   165b4:	4620      	mov	r0, r4
   165b6:	bd10      	pop	{r4, pc}
   165b8:	200033a4 	.word	0x200033a4

000165bc <Fw::LogBuffer::~LogBuffer()>:
    LogBuffer::~LogBuffer() {
   165bc:	4b05      	ldr	r3, [pc, #20]	; (165d4 <Fw::LogBuffer::~LogBuffer()+0x18>)
   165be:	b510      	push	{r4, lr}
   165c0:	4604      	mov	r4, r0
   165c2:	6003      	str	r3, [r0, #0]
   165c4:	f7e9 ffc4 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   165c8:	2184      	movs	r1, #132	; 0x84
   165ca:	4620      	mov	r0, r4
   165cc:	f002 fb80 	bl	18cd0 <operator delete(void*, unsigned int)>
   165d0:	4620      	mov	r0, r4
   165d2:	bd10      	pop	{r4, pc}
   165d4:	200033a4 	.word	0x200033a4

000165d8 <Fw::LogBuffer::LogBuffer()>:
    LogBuffer::LogBuffer() {
   165d8:	b510      	push	{r4, lr}
   165da:	4604      	mov	r4, r0
   165dc:	f7e9 ffb0 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
   165e0:	4b01      	ldr	r3, [pc, #4]	; (165e8 <Fw::LogBuffer::LogBuffer()+0x10>)
    }
   165e2:	4620      	mov	r0, r4
    LogBuffer::LogBuffer() {
   165e4:	6023      	str	r3, [r4, #0]
    }
   165e6:	bd10      	pop	{r4, pc}
   165e8:	200033a4 	.word	0x200033a4

000165ec <Fw::LogBuffer::operator=(Fw::LogBuffer const&)>:
        if(this == &other) {
   165ec:	4288      	cmp	r0, r1
    LogBuffer& LogBuffer::operator=(const LogBuffer& other) {
   165ee:	b538      	push	{r3, r4, r5, lr}
   165f0:	4604      	mov	r4, r0
        if(this == &other) {
   165f2:	d00a      	beq.n	1660a <Fw::LogBuffer::operator=(Fw::LogBuffer const&)+0x1e>
        SerializeStatus stat = SerializeBufferBase::setBuff(other.m_bufferData,other.getBuffLength());
   165f4:	460d      	mov	r5, r1
   165f6:	4608      	mov	r0, r1
   165f8:	f7ea fd04 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   165fc:	4602      	mov	r2, r0
   165fe:	f105 010c 	add.w	r1, r5, #12
   16602:	4620      	mov	r0, r4
   16604:	f7ea fd00 	bl	1008 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)>
        FW_ASSERT(FW_SERIALIZE_OK == stat, static_cast<FwAssertArgType>(stat));
   16608:	b908      	cbnz	r0, 1660e <Fw::LogBuffer::operator=(Fw::LogBuffer const&)+0x22>
    }
   1660a:	4620      	mov	r0, r4
   1660c:	bd38      	pop	{r3, r4, r5, pc}
        FW_ASSERT(FW_SERIALIZE_OK == stat, static_cast<FwAssertArgType>(stat));
   1660e:	4601      	mov	r1, r0
   16610:	221c      	movs	r2, #28
   16612:	4802      	ldr	r0, [pc, #8]	; (1661c <Fw::LogBuffer::operator=(Fw::LogBuffer const&)+0x30>)
   16614:	f7eb f808 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    }
   16618:	4620      	mov	r0, r4
   1661a:	bd38      	pop	{r3, r4, r5, pc}
   1661c:	20000d28 	.word	0x20000d28

00016620 <Fw::LogPacket::LogPacket()>:
#include <Fw/Log/LogPacket.hpp>
#include <Fw/Types/Assert.hpp>

namespace Fw {

    LogPacket::LogPacket() : m_id(0) {
   16620:	b510      	push	{r4, lr}
   16622:	4604      	mov	r4, r0
   16624:	f000 ff60 	bl	174e8 <Fw::ComPacket::ComPacket()>
   16628:	4a07      	ldr	r2, [pc, #28]	; (16648 <Fw::LogPacket::LogPacket()+0x28>)
   1662a:	2300      	movs	r3, #0
   1662c:	f104 000c 	add.w	r0, r4, #12
   16630:	60a3      	str	r3, [r4, #8]
   16632:	6022      	str	r2, [r4, #0]
   16634:	f001 f93c 	bl	178b0 <Fw::Time::Time()>
   16638:	f104 001c 	add.w	r0, r4, #28
   1663c:	f7ff ffcc 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
        this->m_type = FW_PACKET_LOG;
   16640:	2302      	movs	r3, #2
    }
   16642:	4620      	mov	r0, r4
        this->m_type = FW_PACKET_LOG;
   16644:	7123      	strb	r3, [r4, #4]
    }
   16646:	bd10      	pop	{r4, pc}
   16648:	200033c0 	.word	0x200033c0

0001664c <Fw::LogPacket::setId(unsigned long)>:
        }
        return stat;
    }

    void LogPacket::setId(FwEventIdType id) {
        this->m_id = id;
   1664c:	6081      	str	r1, [r0, #8]
    }
   1664e:	4770      	bx	lr

00016650 <Fw::LogPacket::setLogBuffer(Fw::LogBuffer const&)>:

    void LogPacket::setLogBuffer(const LogBuffer& buffer) {
        this->m_logBuffer = buffer;
   16650:	301c      	adds	r0, #28
   16652:	f7ff bfcb 	b.w	165ec <Fw::LogBuffer::operator=(Fw::LogBuffer const&)>
   16656:	bf00      	nop

00016658 <Fw::LogPacket::setTimeTag(Fw::Time const&)>:
    }

    void LogPacket::setTimeTag(const Fw::Time& timeTag) {
        this->m_timeTag = timeTag;
   16658:	300c      	adds	r0, #12
   1665a:	f001 b963 	b.w	17924 <Fw::Time::operator=(Fw::Time const&)>
   1665e:	bf00      	nop

00016660 <Fw::LogPacket::~LogPacket()>:
    LogPacket::~LogPacket() {
   16660:	4b07      	ldr	r3, [pc, #28]	; (16680 <Fw::LogPacket::~LogPacket()+0x20>)
   16662:	b510      	push	{r4, lr}
   16664:	4604      	mov	r4, r0
   16666:	f840 3b1c 	str.w	r3, [r0], #28
   1666a:	f7ff ff9d 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
   1666e:	f104 000c 	add.w	r0, r4, #12
   16672:	f001 f8c5 	bl	17800 <Fw::Time::~Time()>
   16676:	4620      	mov	r0, r4
   16678:	f000 ff42 	bl	17500 <Fw::ComPacket::~ComPacket()>
    }
   1667c:	4620      	mov	r0, r4
   1667e:	bd10      	pop	{r4, pc}
   16680:	200033c0 	.word	0x200033c0

00016684 <Fw::LogPacket::~LogPacket()>:
    LogPacket::~LogPacket() {
   16684:	4b09      	ldr	r3, [pc, #36]	; (166ac <Fw::LogPacket::~LogPacket()+0x28>)
   16686:	b510      	push	{r4, lr}
   16688:	4604      	mov	r4, r0
   1668a:	f840 3b1c 	str.w	r3, [r0], #28
   1668e:	f7ff ff8b 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
   16692:	f104 000c 	add.w	r0, r4, #12
   16696:	f001 f8b3 	bl	17800 <Fw::Time::~Time()>
   1669a:	4620      	mov	r0, r4
   1669c:	f000 ff30 	bl	17500 <Fw::ComPacket::~ComPacket()>
    }
   166a0:	4620      	mov	r0, r4
   166a2:	21a0      	movs	r1, #160	; 0xa0
   166a4:	f002 fb14 	bl	18cd0 <operator delete(void*, unsigned int)>
   166a8:	4620      	mov	r0, r4
   166aa:	bd10      	pop	{r4, pc}
   166ac:	200033c0 	.word	0x200033c0

000166b0 <Fw::LogPacket::serialize(Fw::SerializeBufferBase&) const>:
    SerializeStatus LogPacket::serialize(SerializeBufferBase& buffer) const {
   166b0:	b530      	push	{r4, r5, lr}
   166b2:	b083      	sub	sp, #12
   166b4:	4604      	mov	r4, r0
   166b6:	460d      	mov	r5, r1
        SerializeStatus stat = ComPacket::serializeBase(buffer);
   166b8:	f000 ff2c 	bl	17514 <Fw::ComPacket::serializeBase(Fw::SerializeBufferBase&) const>
        if (stat != FW_SERIALIZE_OK) {
   166bc:	b108      	cbz	r0, 166c2 <Fw::LogPacket::serialize(Fw::SerializeBufferBase&) const+0x12>
    }
   166be:	b003      	add	sp, #12
   166c0:	bd30      	pop	{r4, r5, pc}
        stat = buffer.serialize(this->m_id);
   166c2:	68a1      	ldr	r1, [r4, #8]
   166c4:	4628      	mov	r0, r5
   166c6:	f7e9 ffc9 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        if (stat != FW_SERIALIZE_OK) {
   166ca:	2800      	cmp	r0, #0
   166cc:	d1f7      	bne.n	166be <Fw::LogPacket::serialize(Fw::SerializeBufferBase&) const+0xe>
        stat = buffer.serialize(this->m_timeTag);
   166ce:	f104 010c 	add.w	r1, r4, #12
   166d2:	4628      	mov	r0, r5
   166d4:	f7ea fa14 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
        if (stat != FW_SERIALIZE_OK) {
   166d8:	2800      	cmp	r0, #0
   166da:	d1f0      	bne.n	166be <Fw::LogPacket::serialize(Fw::SerializeBufferBase&) const+0xe>
        return buffer.serialize(this->m_logBuffer.getBuffAddr(),m_logBuffer.getBuffLength(),true);
   166dc:	341c      	adds	r4, #28
   166de:	4620      	mov	r0, r4
   166e0:	f7ff ff60 	bl	165a4 <Fw::LogBuffer::getBuffAddr()>
   166e4:	4601      	mov	r1, r0
   166e6:	4620      	mov	r0, r4
   166e8:	9101      	str	r1, [sp, #4]
   166ea:	f7ea fc8b 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   166ee:	2301      	movs	r3, #1
   166f0:	4602      	mov	r2, r0
   166f2:	9901      	ldr	r1, [sp, #4]
   166f4:	4628      	mov	r0, r5
    }
   166f6:	b003      	add	sp, #12
   166f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return buffer.serialize(this->m_logBuffer.getBuffAddr(),m_logBuffer.getBuffLength(),true);
   166fc:	f7ea b99a 	b.w	a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>

00016700 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)>:
    SerializeStatus LogPacket::deserialize(SerializeBufferBase& buffer) {
   16700:	b570      	push	{r4, r5, r6, lr}
   16702:	b082      	sub	sp, #8
   16704:	4605      	mov	r5, r0
   16706:	460e      	mov	r6, r1
        SerializeStatus stat = deserializeBase(buffer);
   16708:	f000 ff0a 	bl	17520 <Fw::ComPacket::deserializeBase(Fw::SerializeBufferBase&)>
        if (stat != FW_SERIALIZE_OK) {
   1670c:	4604      	mov	r4, r0
   1670e:	b110      	cbz	r0, 16716 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x16>
    }
   16710:	4620      	mov	r0, r4
   16712:	b002      	add	sp, #8
   16714:	bd70      	pop	{r4, r5, r6, pc}
        stat = buffer.deserialize(this->m_id);
   16716:	f105 0108 	add.w	r1, r5, #8
   1671a:	4630      	mov	r0, r6
   1671c:	f7ea fad0 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (stat != FW_SERIALIZE_OK) {
   16720:	4604      	mov	r4, r0
   16722:	2800      	cmp	r0, #0
   16724:	d1f4      	bne.n	16710 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x10>
        stat = buffer.deserialize(this->m_timeTag);
   16726:	f105 010c 	add.w	r1, r5, #12
   1672a:	4630      	mov	r0, r6
   1672c:	f7ea fbd2 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
        if (stat != FW_SERIALIZE_OK) {
   16730:	4604      	mov	r4, r0
   16732:	2800      	cmp	r0, #0
   16734:	d1ec      	bne.n	16710 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x10>
        NATIVE_UINT_TYPE size = buffer.getBuffLeft();
   16736:	4630      	mov	r0, r6
        stat = buffer.deserialize(this->m_logBuffer.getBuffAddr(),size,true);
   16738:	351c      	adds	r5, #28
        NATIVE_UINT_TYPE size = buffer.getBuffLeft();
   1673a:	f7ea fcb9 	bl	10b0 <Fw::SerializeBufferBase::getBuffLeft() const>
   1673e:	4603      	mov	r3, r0
        stat = buffer.deserialize(this->m_logBuffer.getBuffAddr(),size,true);
   16740:	4628      	mov	r0, r5
        NATIVE_UINT_TYPE size = buffer.getBuffLeft();
   16742:	9301      	str	r3, [sp, #4]
        stat = buffer.deserialize(this->m_logBuffer.getBuffAddr(),size,true);
   16744:	f7ff ff2e 	bl	165a4 <Fw::LogBuffer::getBuffAddr()>
   16748:	2301      	movs	r3, #1
   1674a:	4601      	mov	r1, r0
   1674c:	aa01      	add	r2, sp, #4
   1674e:	4630      	mov	r0, r6
   16750:	f7ea fbb4 	bl	ebc <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, bool)>
        if (stat == FW_SERIALIZE_OK) {
   16754:	4604      	mov	r4, r0
   16756:	2800      	cmp	r0, #0
   16758:	d1da      	bne.n	16710 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x10>
            stat = this->m_logBuffer.setBuffLen(size);
   1675a:	9901      	ldr	r1, [sp, #4]
   1675c:	4628      	mov	r0, r5
   1675e:	f7ea fc91 	bl	1084 <Fw::SerializeBufferBase::setBuffLen(unsigned long)>
            FW_ASSERT(stat == FW_SERIALIZE_OK,static_cast<NATIVE_INT_TYPE>(stat));
   16762:	4604      	mov	r4, r0
   16764:	2800      	cmp	r0, #0
   16766:	d0d3      	beq.n	16710 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x10>
   16768:	4601      	mov	r1, r0
   1676a:	2240      	movs	r2, #64	; 0x40
   1676c:	4801      	ldr	r0, [pc, #4]	; (16774 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x74>)
   1676e:	f7ea ff5b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16772:	e7cd      	b.n	16710 <Fw::LogPacket::deserialize(Fw::SerializeBufferBase&)+0x10>
   16774:	20000d40 	.word	0x20000d40

00016778 <Fw::(anonymous namespace)::LogPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputLogPort::SERIALIZED_SIZE;
        }
   16778:	208d      	movs	r0, #141	; 0x8d
   1677a:	4770      	bx	lr

0001677c <Fw::(anonymous namespace)::LogPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   1677c:	300c      	adds	r0, #12
   1677e:	4770      	bx	lr

00016780 <Fw::(anonymous namespace)::LogPortBuffer::~LogPortBuffer()>:
    class LogPortBuffer : public Fw::SerializeBufferBase {
   16780:	4b03      	ldr	r3, [pc, #12]	; (16790 <Fw::(anonymous namespace)::LogPortBuffer::~LogPortBuffer()+0x10>)
   16782:	b510      	push	{r4, lr}
   16784:	4604      	mov	r4, r0
   16786:	6003      	str	r3, [r0, #0]
   16788:	f7e9 fee2 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   1678c:	4620      	mov	r0, r4
   1678e:	bd10      	pop	{r4, pc}
   16790:	20002db4 	.word	0x20002db4

00016794 <Fw::(anonymous namespace)::LogPortBuffer::~LogPortBuffer()>:
   16794:	4b05      	ldr	r3, [pc, #20]	; (167ac <Fw::(anonymous namespace)::LogPortBuffer::~LogPortBuffer()+0x18>)
   16796:	b510      	push	{r4, lr}
   16798:	4604      	mov	r4, r0
   1679a:	6003      	str	r3, [r0, #0]
   1679c:	f7e9 fed8 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   167a0:	219c      	movs	r1, #156	; 0x9c
   167a2:	4620      	mov	r0, r4
   167a4:	f002 fa94 	bl	18cd0 <operator delete(void*, unsigned int)>
   167a8:	4620      	mov	r0, r4
   167aa:	bd10      	pop	{r4, pc}
   167ac:	20002db4 	.word	0x20002db4

000167b0 <Fw::OutputLogPort::~OutputLogPort()>:

  };

  //! Output Log port
  //! Event log port
  class OutputLogPort :
   167b0:	4b03      	ldr	r3, [pc, #12]	; (167c0 <Fw::OutputLogPort::~OutputLogPort()+0x10>)
   167b2:	b510      	push	{r4, lr}
   167b4:	4604      	mov	r4, r0
   167b6:	6003      	str	r3, [r0, #0]
   167b8:	f001 faa0 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   167bc:	4620      	mov	r0, r4
   167be:	bd10      	pop	{r4, pc}
   167c0:	20002f28 	.word	0x20002f28

000167c4 <Fw::OutputLogPort::~OutputLogPort()>:
   167c4:	4b05      	ldr	r3, [pc, #20]	; (167dc <Fw::OutputLogPort::~OutputLogPort()+0x18>)
   167c6:	b510      	push	{r4, lr}
   167c8:	4604      	mov	r4, r0
   167ca:	6003      	str	r3, [r0, #0]
   167cc:	f001 fa96 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   167d0:	216c      	movs	r1, #108	; 0x6c
   167d2:	4620      	mov	r0, r4
   167d4:	f002 fa7c 	bl	18cd0 <operator delete(void*, unsigned int)>
   167d8:	4620      	mov	r0, r4
   167da:	bd10      	pop	{r4, pc}
   167dc:	20002f28 	.word	0x20002f28

000167e0 <Fw::InputLogPort::~InputLogPort()>:
  class InputLogPort :
   167e0:	4b03      	ldr	r3, [pc, #12]	; (167f0 <Fw::InputLogPort::~InputLogPort()+0x10>)
   167e2:	b510      	push	{r4, lr}
   167e4:	4604      	mov	r4, r0
   167e6:	6003      	str	r3, [r0, #0]
   167e8:	f001 fa6a 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   167ec:	4620      	mov	r0, r4
   167ee:	bd10      	pop	{r4, pc}
   167f0:	20002cc4 	.word	0x20002cc4

000167f4 <Fw::InputLogPort::~InputLogPort()>:
   167f4:	4b05      	ldr	r3, [pc, #20]	; (1680c <Fw::InputLogPort::~InputLogPort()+0x18>)
   167f6:	b510      	push	{r4, lr}
   167f8:	4604      	mov	r4, r0
   167fa:	6003      	str	r3, [r0, #0]
   167fc:	f001 fa60 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   16800:	2170      	movs	r1, #112	; 0x70
   16802:	4620      	mov	r0, r4
   16804:	f002 fa64 	bl	18cd0 <operator delete(void*, unsigned int)>
   16808:	4620      	mov	r0, r4
   1680a:	bd10      	pop	{r4, pc}
   1680c:	20002cc4 	.word	0x20002cc4

00016810 <Fw::InputLogPort::InputLogPort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputLogPort ::
   16810:	b510      	push	{r4, lr}
   16812:	4604      	mov	r4, r0
    InputLogPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   16814:	f001 fa44 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   16818:	4a02      	ldr	r2, [pc, #8]	; (16824 <Fw::InputLogPort::InputLogPort()+0x14>)
   1681a:	2300      	movs	r3, #0
  {

  }
   1681c:	4620      	mov	r0, r4
      m_func(nullptr)
   1681e:	6022      	str	r2, [r4, #0]
   16820:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   16822:	bd10      	pop	{r4, pc}
   16824:	20002cc4 	.word	0x20002cc4

00016828 <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))>:
  void InputLogPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   16828:	b570      	push	{r4, r5, r6, lr}
   1682a:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   1682c:	460d      	mov	r5, r1
  {
   1682e:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   16830:	b121      	cbz	r1, 1683c <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   16832:	b14e      	cbz	r6, 16848 <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))+0x20>

    this->m_comp = callComp;
   16834:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   16836:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   16838:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   1683a:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   1683c:	2143      	movs	r1, #67	; 0x43
   1683e:	4806      	ldr	r0, [pc, #24]	; (16858 <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))+0x30>)
   16840:	f7ea fee4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   16844:	2e00      	cmp	r6, #0
   16846:	d1f5      	bne.n	16834 <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))+0xc>
   16848:	2144      	movs	r1, #68	; 0x44
   1684a:	4803      	ldr	r0, [pc, #12]	; (16858 <Fw::InputLogPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&))+0x30>)
   1684c:	f7ea fede 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   16850:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   16852:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   16854:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   16856:	bd70      	pop	{r4, r5, r6, pc}
   16858:	20000758 	.word	0x20000758

0001685c <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)>:
        FwEventIdType id,
        Fw::Time& timeTag,
        const Fw::LogSeverity& severity,
        Fw::LogBuffer& args
    )
  {
   1685c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1685e:	4604      	mov	r4, r0
   16860:	b085      	sub	sp, #20
   16862:	461d      	mov	r5, r3
   16864:	460e      	mov	r6, r1
   16866:	9203      	str	r2, [sp, #12]
#if FW_PORT_TRACING == 1
    this->trace();
   16868:	f001 faf6 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   1686c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1686e:	9b03      	ldr	r3, [sp, #12]
   16870:	b152      	cbz	r2, 16888 <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x2c>
    FW_ASSERT(this->m_func != nullptr);
   16872:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   16874:	b187      	cbz	r7, 16898 <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x3c>

    return this->m_func(this->m_comp, this->m_portNum, id, timeTag, severity, args);
   16876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16878:	9500      	str	r5, [sp, #0]
   1687a:	9201      	str	r2, [sp, #4]
   1687c:	4632      	mov	r2, r6
   1687e:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   16882:	47b8      	blx	r7
  }
   16884:	b005      	add	sp, #20
   16886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_comp != nullptr);
   16888:	2157      	movs	r1, #87	; 0x57
   1688a:	4807      	ldr	r0, [pc, #28]	; (168a8 <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x4c>)
   1688c:	f7ea febe 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   16890:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   16892:	9b03      	ldr	r3, [sp, #12]
    FW_ASSERT(this->m_func != nullptr);
   16894:	2f00      	cmp	r7, #0
   16896:	d1ee      	bne.n	16876 <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x1a>
   16898:	2158      	movs	r1, #88	; 0x58
   1689a:	4803      	ldr	r0, [pc, #12]	; (168a8 <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x4c>)
   1689c:	9303      	str	r3, [sp, #12]
   1689e:	f7ea feb5 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, id, timeTag, severity, args);
   168a2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   168a4:	9b03      	ldr	r3, [sp, #12]
   168a6:	e7e6      	b.n	16876 <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)+0x1a>
   168a8:	20000758 	.word	0x20000758

000168ac <Fw::OutputLogPort::OutputLogPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputLogPort ::
   168ac:	b510      	push	{r4, lr}
   168ae:	4604      	mov	r4, r0
    OutputLogPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   168b0:	f001 fa3c 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   168b4:	4a02      	ldr	r2, [pc, #8]	; (168c0 <Fw::OutputLogPort::OutputLogPort()+0x14>)
   168b6:	2300      	movs	r3, #0
  {

  }
   168b8:	4620      	mov	r0, r4
      m_port(nullptr)
   168ba:	6022      	str	r2, [r4, #0]
   168bc:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   168be:	bd10      	pop	{r4, pc}
   168c0:	20002f28 	.word	0x20002f28

000168c4 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputLogPort ::
    addCallPort(InputLogPort* callPort)
  {
   168c4:	b538      	push	{r3, r4, r5, lr}
   168c6:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   168c8:	460d      	mov	r5, r1
   168ca:	b121      	cbz	r1, 168d6 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   168cc:	2300      	movs	r3, #0
    this->m_port = callPort;
   168ce:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   168d0:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   168d2:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   168d4:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   168d6:	219f      	movs	r1, #159	; 0x9f
   168d8:	4801      	ldr	r0, [pc, #4]	; (168e0 <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)+0x1c>)
   168da:	f7ea fe97 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   168de:	e7f5      	b.n	168cc <Fw::OutputLogPort::addCallPort(Fw::InputLogPort*)+0x8>
   168e0:	20000758 	.word	0x20000758

000168e4 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const>:
        FwEventIdType id,
        Fw::Time& timeTag,
        const Fw::LogSeverity& severity,
        Fw::LogBuffer& args
    ) const
  {
   168e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   168e8:	4604      	mov	r4, r0
   168ea:	b0a9      	sub	sp, #164	; 0xa4
   168ec:	460f      	mov	r7, r1
   168ee:	4616      	mov	r6, r2
   168f0:	461d      	mov	r5, r3
   168f2:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
#if FW_PORT_TRACING == 1
    this->trace();
   168f6:	f001 faaf 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   168fa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   168fc:	b148      	cbz	r0, 16912 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x2e>

    if (this->m_port != nullptr) {
      this->m_port->invoke(id, timeTag, severity, args);
   168fe:	462b      	mov	r3, r5
   16900:	4632      	mov	r2, r6
   16902:	4639      	mov	r1, r7
   16904:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(id, timeTag, severity, args);
#endif
  }
   16908:	b029      	add	sp, #164	; 0xa4
   1690a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      this->m_port->invoke(id, timeTag, severity, args);
   1690e:	f7ff bfa5 	b.w	1685c <Fw::InputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16912:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16914:	2b00      	cmp	r3, #0
   16916:	d046      	beq.n	169a6 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xc2>
    class LogPortBuffer : public Fw::SerializeBufferBase {
   16918:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 169bc <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd8>
   1691c:	a801      	add	r0, sp, #4
   1691e:	f7e9 fe0f 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(id);
   16922:	4639      	mov	r1, r7
   16924:	a801      	add	r0, sp, #4
    class LogPortBuffer : public Fw::SerializeBufferBase {
   16926:	f8cd 9004 	str.w	r9, [sp, #4]
      _status = _buffer.serialize(id);
   1692a:	f7e9 fe97 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1692e:	b9e0      	cbnz	r0, 1696a <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x86>
      _status = _buffer.serialize(timeTag);
   16930:	4631      	mov	r1, r6
   16932:	a801      	add	r0, sp, #4
   16934:	f7ea f8e4 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16938:	bb78      	cbnz	r0, 1699a <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xb6>
      _status = _buffer.serialize(severity);
   1693a:	4629      	mov	r1, r5
   1693c:	a801      	add	r0, sp, #4
   1693e:	f7ea f8df 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16942:	bb20      	cbnz	r0, 1698e <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xaa>
      _status = _buffer.serialize(args);
   16944:	4641      	mov	r1, r8
   16946:	a801      	add	r0, sp, #4
   16948:	f7ea f8e0 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1694c:	b9c8      	cbnz	r0, 16982 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x9e>
      _status = this->m_serPort->invokeSerial(_buffer);
   1694e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   16950:	a901      	add	r1, sp, #4
   16952:	6803      	ldr	r3, [r0, #0]
   16954:	695b      	ldr	r3, [r3, #20]
   16956:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16958:	b968      	cbnz	r0, 16976 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x92>
    class LogPortBuffer : public Fw::SerializeBufferBase {
   1695a:	a801      	add	r0, sp, #4
   1695c:	f8cd 9004 	str.w	r9, [sp, #4]
   16960:	f7e9 fdf6 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   16964:	b029      	add	sp, #164	; 0xa4
   16966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1696a:	4601      	mov	r1, r0
   1696c:	22c0      	movs	r2, #192	; 0xc0
   1696e:	4812      	ldr	r0, [pc, #72]	; (169b8 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd4>)
   16970:	f7ea fe5a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16974:	e7dc      	b.n	16930 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x4c>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16976:	4601      	mov	r1, r0
   16978:	22cc      	movs	r2, #204	; 0xcc
   1697a:	480f      	ldr	r0, [pc, #60]	; (169b8 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd4>)
   1697c:	f7ea fe54 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16980:	e7eb      	b.n	1695a <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x76>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16982:	4601      	mov	r1, r0
   16984:	22c9      	movs	r2, #201	; 0xc9
   16986:	480c      	ldr	r0, [pc, #48]	; (169b8 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd4>)
   16988:	f7ea fe4e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1698c:	e7df      	b.n	1694e <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x6a>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1698e:	4601      	mov	r1, r0
   16990:	22c6      	movs	r2, #198	; 0xc6
   16992:	4809      	ldr	r0, [pc, #36]	; (169b8 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd4>)
   16994:	f7ea fe48 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16998:	e7d4      	b.n	16944 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x60>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1699a:	4601      	mov	r1, r0
   1699c:	22c3      	movs	r2, #195	; 0xc3
   1699e:	4806      	ldr	r0, [pc, #24]	; (169b8 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd4>)
   169a0:	f7ea fe42 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   169a4:	e7c9      	b.n	1693a <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x56>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   169a6:	21b6      	movs	r1, #182	; 0xb6
   169a8:	4803      	ldr	r0, [pc, #12]	; (169b8 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0xd4>)
   169aa:	f7ea fe2f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   169ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   169b0:	2800      	cmp	r0, #0
   169b2:	d0b1      	beq.n	16918 <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x34>
   169b4:	e7a3      	b.n	168fe <Fw::OutputLogPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::LogBuffer&) const+0x1a>
   169b6:	bf00      	nop
   169b8:	20000758 	.word	0x20000758
   169bc:	20002db4 	.word	0x20002db4

000169c0 <Fw::InputLogPort::init()>:
    Fw::InputPortBase::init();
   169c0:	f001 b996 	b.w	17cf0 <Fw::InputPortBase::init()>

000169c4 <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
   169c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   169c6:	4605      	mov	r5, r0
   169c8:	b0ab      	sub	sp, #172	; 0xac
   169ca:	460e      	mov	r6, r1
    this->trace();
   169cc:	f001 fa44 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   169d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   169d2:	2b00      	cmp	r3, #0
   169d4:	d043      	beq.n	16a5e <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x9a>
    FW_ASSERT(this->m_func != nullptr);
   169d6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   169d8:	2b00      	cmp	r3, #0
   169da:	d047      	beq.n	16a6c <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0xa8>
    _status = _buffer.deserialize(id);
   169dc:	a902      	add	r1, sp, #8
   169de:	4630      	mov	r0, r6
   169e0:	f7ea f96e 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   169e4:	4604      	mov	r4, r0
   169e6:	b110      	cbz	r0, 169ee <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
  }
   169e8:	4620      	mov	r0, r4
   169ea:	b02b      	add	sp, #172	; 0xac
   169ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Fw::Time timeTag;
   169ee:	a805      	add	r0, sp, #20
   169f0:	f000 ff5e 	bl	178b0 <Fw::Time::Time()>
    _status = _buffer.deserialize(timeTag);
   169f4:	a905      	add	r1, sp, #20
   169f6:	4630      	mov	r0, r6
   169f8:	f7ea fa6c 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   169fc:	4604      	mov	r4, r0
   169fe:	b988      	cbnz	r0, 16a24 <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x60>
      {
   16a00:	a803      	add	r0, sp, #12
   16a02:	4f1d      	ldr	r7, [pc, #116]	; (16a78 <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0xb4>)
   16a04:	f7e9 fd94 	bl	530 <Fw::Serializable::Serializable()>
        this->e = FATAL;
   16a08:	2301      	movs	r3, #1
    _status = _buffer.deserialize(severity);
   16a0a:	a903      	add	r1, sp, #12
   16a0c:	4630      	mov	r0, r6
      {
   16a0e:	9703      	str	r7, [sp, #12]
        this->e = FATAL;
   16a10:	f88d 3010 	strb.w	r3, [sp, #16]
   16a14:	f7ea fa5e 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   16a18:	4604      	mov	r4, r0
   16a1a:	b148      	cbz	r0, 16a30 <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x6c>
  class LogSeverity :
   16a1c:	a803      	add	r0, sp, #12
   16a1e:	9703      	str	r7, [sp, #12]
   16a20:	f7e9 fd8c 	bl	53c <Fw::Serializable::~Serializable()>
  }
   16a24:	a805      	add	r0, sp, #20
   16a26:	f000 feeb 	bl	17800 <Fw::Time::~Time()>
   16a2a:	4620      	mov	r0, r4
   16a2c:	b02b      	add	sp, #172	; 0xac
   16a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Fw::LogBuffer args;
   16a30:	a809      	add	r0, sp, #36	; 0x24
   16a32:	f7ff fdd1 	bl	165d8 <Fw::LogBuffer::LogBuffer()>
    _status = _buffer.deserialize(args);
   16a36:	a909      	add	r1, sp, #36	; 0x24
   16a38:	4630      	mov	r0, r6
   16a3a:	f7ea fa51 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   16a3e:	4604      	mov	r4, r0
   16a40:	b948      	cbnz	r0, 16a56 <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x92>
    this->m_func(this->m_comp, this->m_portNum, id, timeTag, severity, args);
   16a42:	ab09      	add	r3, sp, #36	; 0x24
   16a44:	9a02      	ldr	r2, [sp, #8]
   16a46:	9301      	str	r3, [sp, #4]
   16a48:	ab03      	add	r3, sp, #12
   16a4a:	9300      	str	r3, [sp, #0]
   16a4c:	ab05      	add	r3, sp, #20
   16a4e:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   16a50:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   16a54:	47b0      	blx	r6
  }
   16a56:	a809      	add	r0, sp, #36	; 0x24
   16a58:	f7ff fda6 	bl	165a8 <Fw::LogBuffer::~LogBuffer()>
   16a5c:	e7de      	b.n	16a1c <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x58>
    FW_ASSERT(this->m_comp != nullptr);
   16a5e:	2168      	movs	r1, #104	; 0x68
   16a60:	4806      	ldr	r0, [pc, #24]	; (16a7c <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0xb8>)
   16a62:	f7ea fdd3 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   16a66:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   16a68:	2b00      	cmp	r3, #0
   16a6a:	d1b7      	bne.n	169dc <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   16a6c:	2169      	movs	r1, #105	; 0x69
   16a6e:	4803      	ldr	r0, [pc, #12]	; (16a7c <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0xb8>)
   16a70:	f7ea fdcc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   16a74:	e7b2      	b.n	169dc <Fw::InputLogPort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   16a76:	bf00      	nop
   16a78:	20002c08 	.word	0x20002c08
   16a7c:	20000758 	.word	0x20000758

00016a80 <Fw::OutputLogPort::init()>:
    Fw::OutputPortBase::init();
   16a80:	f001 b960 	b.w	17d44 <Fw::OutputPortBase::init()>

00016a84 <Fw::LogSeverity::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= FATAL) && (e <= DIAGNOSTIC));
  }

  Fw::SerializeStatus LogSeverity ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   16a84:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   16a86:	7901      	ldrb	r1, [r0, #4]
   16a88:	4618      	mov	r0, r3
   16a8a:	f7e9 be4d 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   16a8e:	bf00      	nop

00016a90 <Fw::LogSeverity::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus LogSeverity ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   16a90:	b510      	push	{r4, lr}
   16a92:	460a      	mov	r2, r1
   16a94:	b082      	sub	sp, #8
   16a96:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   16a98:	a901      	add	r1, sp, #4
   16a9a:	4610      	mov	r0, r2
   16a9c:	f7ea f91e 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   16aa0:	b940      	cbnz	r0, 16ab4 <Fw::LogSeverity::deserialize(Fw::SerializeBufferBase&)+0x24>
      this->e = static_cast<T>(es);
   16aa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   16aa6:	1e53      	subs	r3, r2, #1
      this->e = static_cast<T>(es);
   16aa8:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   16aaa:	2b06      	cmp	r3, #6
   16aac:	bf94      	ite	ls
   16aae:	2000      	movls	r0, #0
   16ab0:	2001      	movhi	r0, #1
   16ab2:	0080      	lsls	r0, r0, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   16ab4:	b002      	add	sp, #8
   16ab6:	bd10      	pop	{r4, pc}

00016ab8 <Fw::LogSeverity::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void LogSeverity ::
    toString(Fw::StringBase& sb) const
  {
   16ab8:	b570      	push	{r4, r5, r6, lr}
   16aba:	b0a2      	sub	sp, #136	; 0x88
   16abc:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   16abe:	4e23      	ldr	r6, [pc, #140]	; (16b4c <Fw::LogSeverity::toString(Fw::StringBase&) const+0x94>)
   16ac0:	460d      	mov	r5, r1
   16ac2:	4668      	mov	r0, sp
   16ac4:	f7ea fbac 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   16ac8:	4921      	ldr	r1, [pc, #132]	; (16b50 <Fw::LogSeverity::toString(Fw::StringBase&) const+0x98>)
   16aca:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   16acc:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   16ace:	f7ea fc0f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   16ad2:	7923      	ldrb	r3, [r4, #4]
   16ad4:	3b01      	subs	r3, #1
   16ad6:	2b06      	cmp	r3, #6
   16ad8:	d833      	bhi.n	16b42 <Fw::LogSeverity::toString(Fw::StringBase&) const+0x8a>
   16ada:	e8df f003 	tbb	[pc, r3]
   16ade:	1914      	.short	0x1914
   16ae0:	2d28231e 	.word	0x2d28231e
   16ae4:	04          	.byte	0x04
   16ae5:	00          	.byte	0x00
   16ae6:	491b      	ldr	r1, [pc, #108]	; (16b54 <Fw::LogSeverity::toString(Fw::StringBase&) const+0x9c>)
   16ae8:	4668      	mov	r0, sp
   16aea:	f7ea fc01 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   16aee:	7923      	ldrb	r3, [r4, #4]
   16af0:	aa01      	add	r2, sp, #4
   16af2:	4919      	ldr	r1, [pc, #100]	; (16b58 <Fw::LogSeverity::toString(Fw::StringBase&) const+0xa0>)
   16af4:	4628      	mov	r0, r5
   16af6:	f7ea fbc9 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   16afa:	4668      	mov	r0, sp
   16afc:	9600      	str	r6, [sp, #0]
   16afe:	f7ea fb99 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   16b02:	b022      	add	sp, #136	; 0x88
   16b04:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   16b06:	4915      	ldr	r1, [pc, #84]	; (16b5c <Fw::LogSeverity::toString(Fw::StringBase&) const+0xa4>)
   16b08:	4668      	mov	r0, sp
   16b0a:	f7ea fbf1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b0e:	e7ee      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
        (void)StringBase::operator=(src);
   16b10:	4913      	ldr	r1, [pc, #76]	; (16b60 <Fw::LogSeverity::toString(Fw::StringBase&) const+0xa8>)
   16b12:	4668      	mov	r0, sp
   16b14:	f7ea fbec 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b18:	e7e9      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
        (void)StringBase::operator=(src);
   16b1a:	4912      	ldr	r1, [pc, #72]	; (16b64 <Fw::LogSeverity::toString(Fw::StringBase&) const+0xac>)
   16b1c:	4668      	mov	r0, sp
   16b1e:	f7ea fbe7 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b22:	e7e4      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
        (void)StringBase::operator=(src);
   16b24:	4910      	ldr	r1, [pc, #64]	; (16b68 <Fw::LogSeverity::toString(Fw::StringBase&) const+0xb0>)
   16b26:	4668      	mov	r0, sp
   16b28:	f7ea fbe2 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b2c:	e7df      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
        (void)StringBase::operator=(src);
   16b2e:	490f      	ldr	r1, [pc, #60]	; (16b6c <Fw::LogSeverity::toString(Fw::StringBase&) const+0xb4>)
   16b30:	4668      	mov	r0, sp
   16b32:	f7ea fbdd 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b36:	e7da      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
        (void)StringBase::operator=(src);
   16b38:	490d      	ldr	r1, [pc, #52]	; (16b70 <Fw::LogSeverity::toString(Fw::StringBase&) const+0xb8>)
   16b3a:	4668      	mov	r0, sp
   16b3c:	f7ea fbd8 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b40:	e7d5      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
        (void)StringBase::operator=(src);
   16b42:	490c      	ldr	r1, [pc, #48]	; (16b74 <Fw::LogSeverity::toString(Fw::StringBase&) const+0xbc>)
   16b44:	4668      	mov	r0, sp
   16b46:	f7ea fbd3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   16b4a:	e7d0      	b.n	16aee <Fw::LogSeverity::toString(Fw::StringBase&) const+0x36>
   16b4c:	200032dc 	.word	0x200032dc
   16b50:	20001d2c 	.word	0x20001d2c
   16b54:	20002660 	.word	0x20002660
   16b58:	20002470 	.word	0x20002470
   16b5c:	200052ec 	.word	0x200052ec
   16b60:	20002628 	.word	0x20002628
   16b64:	20002634 	.word	0x20002634
   16b68:	20002640 	.word	0x20002640
   16b6c:	20002648 	.word	0x20002648
   16b70:	20002654 	.word	0x20002654
   16b74:	20002464 	.word	0x20002464

00016b78 <Fw::LogSeverity::~LogSeverity()>:
   16b78:	4b03      	ldr	r3, [pc, #12]	; (16b88 <Fw::LogSeverity::~LogSeverity()+0x10>)
   16b7a:	b510      	push	{r4, lr}
   16b7c:	4604      	mov	r4, r0
   16b7e:	6003      	str	r3, [r0, #0]
   16b80:	f7e9 fcdc 	bl	53c <Fw::Serializable::~Serializable()>
   16b84:	4620      	mov	r0, r4
   16b86:	bd10      	pop	{r4, pc}
   16b88:	20002c08 	.word	0x20002c08

00016b8c <Fw::LogSeverity::~LogSeverity()>:
   16b8c:	4b05      	ldr	r3, [pc, #20]	; (16ba4 <Fw::LogSeverity::~LogSeverity()+0x18>)
   16b8e:	b510      	push	{r4, lr}
   16b90:	4604      	mov	r4, r0
   16b92:	6003      	str	r3, [r0, #0]
   16b94:	f7e9 fcd2 	bl	53c <Fw::Serializable::~Serializable()>
   16b98:	2108      	movs	r1, #8
   16b9a:	4620      	mov	r0, r4
   16b9c:	f002 f898 	bl	18cd0 <operator delete(void*, unsigned int)>
   16ba0:	4620      	mov	r0, r4
   16ba2:	bd10      	pop	{r4, pc}
   16ba4:	20002c08 	.word	0x20002c08

00016ba8 <Fw::(anonymous namespace)::LogTextPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputLogTextPort::SERIALIZED_SIZE;
        }
   16ba8:	2095      	movs	r0, #149	; 0x95
   16baa:	4770      	bx	lr

00016bac <Fw::(anonymous namespace)::LogTextPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   16bac:	300c      	adds	r0, #12
   16bae:	4770      	bx	lr

00016bb0 <Fw::(anonymous namespace)::LogTextPortBuffer::~LogTextPortBuffer()>:
    class LogTextPortBuffer : public Fw::SerializeBufferBase {
   16bb0:	4b03      	ldr	r3, [pc, #12]	; (16bc0 <Fw::(anonymous namespace)::LogTextPortBuffer::~LogTextPortBuffer()+0x10>)
   16bb2:	b510      	push	{r4, lr}
   16bb4:	4604      	mov	r4, r0
   16bb6:	6003      	str	r3, [r0, #0]
   16bb8:	f7e9 fcca 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   16bbc:	4620      	mov	r0, r4
   16bbe:	bd10      	pop	{r4, pc}
   16bc0:	20002e40 	.word	0x20002e40

00016bc4 <Fw::(anonymous namespace)::LogTextPortBuffer::~LogTextPortBuffer()>:
   16bc4:	4b05      	ldr	r3, [pc, #20]	; (16bdc <Fw::(anonymous namespace)::LogTextPortBuffer::~LogTextPortBuffer()+0x18>)
   16bc6:	b510      	push	{r4, lr}
   16bc8:	4604      	mov	r4, r0
   16bca:	6003      	str	r3, [r0, #0]
   16bcc:	f7e9 fcc0 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   16bd0:	21a4      	movs	r1, #164	; 0xa4
   16bd2:	4620      	mov	r0, r4
   16bd4:	f002 f87c 	bl	18cd0 <operator delete(void*, unsigned int)>
   16bd8:	4620      	mov	r0, r4
   16bda:	bd10      	pop	{r4, pc}
   16bdc:	20002e40 	.word	0x20002e40

00016be0 <Fw::OutputLogTextPort::~OutputLogTextPort()>:
  };

  //! Output LogText port
  //! Text event log port
  //! Use for development and debugging, turn off for flight
  class OutputLogTextPort :
   16be0:	4b03      	ldr	r3, [pc, #12]	; (16bf0 <Fw::OutputLogTextPort::~OutputLogTextPort()+0x10>)
   16be2:	b510      	push	{r4, lr}
   16be4:	4604      	mov	r4, r0
   16be6:	6003      	str	r3, [r0, #0]
   16be8:	f001 f888 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   16bec:	4620      	mov	r0, r4
   16bee:	bd10      	pop	{r4, pc}
   16bf0:	200030d0 	.word	0x200030d0

00016bf4 <Fw::OutputLogTextPort::~OutputLogTextPort()>:
   16bf4:	4b05      	ldr	r3, [pc, #20]	; (16c0c <Fw::OutputLogTextPort::~OutputLogTextPort()+0x18>)
   16bf6:	b510      	push	{r4, lr}
   16bf8:	4604      	mov	r4, r0
   16bfa:	6003      	str	r3, [r0, #0]
   16bfc:	f001 f87e 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   16c00:	216c      	movs	r1, #108	; 0x6c
   16c02:	4620      	mov	r0, r4
   16c04:	f002 f864 	bl	18cd0 <operator delete(void*, unsigned int)>
   16c08:	4620      	mov	r0, r4
   16c0a:	bd10      	pop	{r4, pc}
   16c0c:	200030d0 	.word	0x200030d0

00016c10 <Fw::InputLogTextPort::~InputLogTextPort()>:
  class InputLogTextPort :
   16c10:	4b03      	ldr	r3, [pc, #12]	; (16c20 <Fw::InputLogTextPort::~InputLogTextPort()+0x10>)
   16c12:	b510      	push	{r4, lr}
   16c14:	4604      	mov	r4, r0
   16c16:	6003      	str	r3, [r0, #0]
   16c18:	f001 f852 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   16c1c:	4620      	mov	r0, r4
   16c1e:	bd10      	pop	{r4, pc}
   16c20:	2000305c 	.word	0x2000305c

00016c24 <Fw::InputLogTextPort::~InputLogTextPort()>:
   16c24:	4b05      	ldr	r3, [pc, #20]	; (16c3c <Fw::InputLogTextPort::~InputLogTextPort()+0x18>)
   16c26:	b510      	push	{r4, lr}
   16c28:	4604      	mov	r4, r0
   16c2a:	6003      	str	r3, [r0, #0]
   16c2c:	f001 f848 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   16c30:	2170      	movs	r1, #112	; 0x70
   16c32:	4620      	mov	r0, r4
   16c34:	f002 f84c 	bl	18cd0 <operator delete(void*, unsigned int)>
   16c38:	4620      	mov	r0, r4
   16c3a:	bd10      	pop	{r4, pc}
   16c3c:	2000305c 	.word	0x2000305c

00016c40 <Fw::InputLogTextPort::InputLogTextPort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputLogTextPort ::
   16c40:	b510      	push	{r4, lr}
   16c42:	4604      	mov	r4, r0
    InputLogTextPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   16c44:	f001 f82c 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   16c48:	4a02      	ldr	r2, [pc, #8]	; (16c54 <Fw::InputLogTextPort::InputLogTextPort()+0x14>)
   16c4a:	2300      	movs	r3, #0
  {

  }
   16c4c:	4620      	mov	r0, r4
      m_func(nullptr)
   16c4e:	6022      	str	r2, [r4, #0]
   16c50:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   16c52:	bd10      	pop	{r4, pc}
   16c54:	2000305c 	.word	0x2000305c

00016c58 <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))>:
  void InputLogTextPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   16c58:	b570      	push	{r4, r5, r6, lr}
   16c5a:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   16c5c:	460d      	mov	r5, r1
  {
   16c5e:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   16c60:	b121      	cbz	r1, 16c6c <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   16c62:	b14e      	cbz	r6, 16c78 <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))+0x20>

    this->m_comp = callComp;
   16c64:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   16c66:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   16c68:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   16c6a:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   16c6c:	2143      	movs	r1, #67	; 0x43
   16c6e:	4806      	ldr	r0, [pc, #24]	; (16c88 <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))+0x30>)
   16c70:	f7ea fccc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   16c74:	2e00      	cmp	r6, #0
   16c76:	d1f5      	bne.n	16c64 <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))+0xc>
   16c78:	2144      	movs	r1, #68	; 0x44
   16c7a:	4803      	ldr	r0, [pc, #12]	; (16c88 <Fw::InputLogTextPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&))+0x30>)
   16c7c:	f7ea fcc6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   16c80:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   16c82:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   16c84:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   16c86:	bd70      	pop	{r4, r5, r6, pc}
   16c88:	200009e4 	.word	0x200009e4

00016c8c <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)>:
        FwEventIdType id,
        Fw::Time& timeTag,
        const Fw::LogSeverity& severity,
        Fw::TextLogString& text
    )
  {
   16c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c8e:	4604      	mov	r4, r0
   16c90:	b085      	sub	sp, #20
   16c92:	461d      	mov	r5, r3
   16c94:	460e      	mov	r6, r1
   16c96:	9203      	str	r2, [sp, #12]
#if FW_PORT_TRACING == 1
    this->trace();
   16c98:	f001 f8de 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   16c9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   16c9e:	9b03      	ldr	r3, [sp, #12]
   16ca0:	b152      	cbz	r2, 16cb8 <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x2c>
    FW_ASSERT(this->m_func != nullptr);
   16ca2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   16ca4:	b187      	cbz	r7, 16cc8 <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x3c>

    return this->m_func(this->m_comp, this->m_portNum, id, timeTag, severity, text);
   16ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16ca8:	9500      	str	r5, [sp, #0]
   16caa:	9201      	str	r2, [sp, #4]
   16cac:	4632      	mov	r2, r6
   16cae:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   16cb2:	47b8      	blx	r7
  }
   16cb4:	b005      	add	sp, #20
   16cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_comp != nullptr);
   16cb8:	2157      	movs	r1, #87	; 0x57
   16cba:	4807      	ldr	r0, [pc, #28]	; (16cd8 <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x4c>)
   16cbc:	f7ea fca6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   16cc0:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   16cc2:	9b03      	ldr	r3, [sp, #12]
    FW_ASSERT(this->m_func != nullptr);
   16cc4:	2f00      	cmp	r7, #0
   16cc6:	d1ee      	bne.n	16ca6 <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x1a>
   16cc8:	2158      	movs	r1, #88	; 0x58
   16cca:	4803      	ldr	r0, [pc, #12]	; (16cd8 <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x4c>)
   16ccc:	9303      	str	r3, [sp, #12]
   16cce:	f7ea fc9d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, id, timeTag, severity, text);
   16cd2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   16cd4:	9b03      	ldr	r3, [sp, #12]
   16cd6:	e7e6      	b.n	16ca6 <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)+0x1a>
   16cd8:	200009e4 	.word	0x200009e4

00016cdc <Fw::OutputLogTextPort::OutputLogTextPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputLogTextPort ::
   16cdc:	b510      	push	{r4, lr}
   16cde:	4604      	mov	r4, r0
    OutputLogTextPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   16ce0:	f001 f824 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   16ce4:	4a02      	ldr	r2, [pc, #8]	; (16cf0 <Fw::OutputLogTextPort::OutputLogTextPort()+0x14>)
   16ce6:	2300      	movs	r3, #0
  {

  }
   16ce8:	4620      	mov	r0, r4
      m_port(nullptr)
   16cea:	6022      	str	r2, [r4, #0]
   16cec:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   16cee:	bd10      	pop	{r4, pc}
   16cf0:	200030d0 	.word	0x200030d0

00016cf4 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputLogTextPort ::
    addCallPort(InputLogTextPort* callPort)
  {
   16cf4:	b538      	push	{r3, r4, r5, lr}
   16cf6:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   16cf8:	460d      	mov	r5, r1
   16cfa:	b121      	cbz	r1, 16d06 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   16cfc:	2300      	movs	r3, #0
    this->m_port = callPort;
   16cfe:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   16d00:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   16d02:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   16d04:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   16d06:	219f      	movs	r1, #159	; 0x9f
   16d08:	4801      	ldr	r0, [pc, #4]	; (16d10 <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)+0x1c>)
   16d0a:	f7ea fc7f 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   16d0e:	e7f5      	b.n	16cfc <Fw::OutputLogTextPort::addCallPort(Fw::InputLogTextPort*)+0x8>
   16d10:	200009e4 	.word	0x200009e4

00016d14 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const>:
        FwEventIdType id,
        Fw::Time& timeTag,
        const Fw::LogSeverity& severity,
        Fw::TextLogString& text
    ) const
  {
   16d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16d18:	4604      	mov	r4, r0
   16d1a:	b0ab      	sub	sp, #172	; 0xac
   16d1c:	460f      	mov	r7, r1
   16d1e:	4616      	mov	r6, r2
   16d20:	461d      	mov	r5, r3
   16d22:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
#if FW_PORT_TRACING == 1
    this->trace();
   16d26:	f001 f897 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16d2a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   16d2c:	b148      	cbz	r0, 16d42 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x2e>

    if (this->m_port != nullptr) {
      this->m_port->invoke(id, timeTag, severity, text);
   16d2e:	462b      	mov	r3, r5
   16d30:	4632      	mov	r2, r6
   16d32:	4639      	mov	r1, r7
   16d34:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(id, timeTag, severity, text);
#endif
  }
   16d38:	b02b      	add	sp, #172	; 0xac
   16d3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      this->m_port->invoke(id, timeTag, severity, text);
   16d3e:	f7ff bfa5 	b.w	16c8c <Fw::InputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16d44:	2b00      	cmp	r3, #0
   16d46:	d046      	beq.n	16dd6 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xc2>
    class LogTextPortBuffer : public Fw::SerializeBufferBase {
   16d48:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 16dec <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd8>
   16d4c:	a801      	add	r0, sp, #4
   16d4e:	f7e9 fbf7 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(id);
   16d52:	4639      	mov	r1, r7
   16d54:	a801      	add	r0, sp, #4
    class LogTextPortBuffer : public Fw::SerializeBufferBase {
   16d56:	f8cd 9004 	str.w	r9, [sp, #4]
      _status = _buffer.serialize(id);
   16d5a:	f7e9 fc7f 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16d5e:	b9e0      	cbnz	r0, 16d9a <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x86>
      _status = _buffer.serialize(timeTag);
   16d60:	4631      	mov	r1, r6
   16d62:	a801      	add	r0, sp, #4
   16d64:	f7e9 fecc 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16d68:	bb78      	cbnz	r0, 16dca <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xb6>
      _status = _buffer.serialize(severity);
   16d6a:	4629      	mov	r1, r5
   16d6c:	a801      	add	r0, sp, #4
   16d6e:	f7e9 fec7 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16d72:	bb20      	cbnz	r0, 16dbe <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xaa>
      _status = _buffer.serialize(text);
   16d74:	4641      	mov	r1, r8
   16d76:	a801      	add	r0, sp, #4
   16d78:	f7e9 fec2 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16d7c:	b9c8      	cbnz	r0, 16db2 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x9e>
      _status = this->m_serPort->invokeSerial(_buffer);
   16d7e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   16d80:	a901      	add	r1, sp, #4
   16d82:	6803      	ldr	r3, [r0, #0]
   16d84:	695b      	ldr	r3, [r3, #20]
   16d86:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16d88:	b968      	cbnz	r0, 16da6 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x92>
    class LogTextPortBuffer : public Fw::SerializeBufferBase {
   16d8a:	a801      	add	r0, sp, #4
   16d8c:	f8cd 9004 	str.w	r9, [sp, #4]
   16d90:	f7e9 fbde 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   16d94:	b02b      	add	sp, #172	; 0xac
   16d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16d9a:	4601      	mov	r1, r0
   16d9c:	22c0      	movs	r2, #192	; 0xc0
   16d9e:	4812      	ldr	r0, [pc, #72]	; (16de8 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd4>)
   16da0:	f7ea fc42 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16da4:	e7dc      	b.n	16d60 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x4c>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16da6:	4601      	mov	r1, r0
   16da8:	22cc      	movs	r2, #204	; 0xcc
   16daa:	480f      	ldr	r0, [pc, #60]	; (16de8 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd4>)
   16dac:	f7ea fc3c 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16db0:	e7eb      	b.n	16d8a <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x76>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16db2:	4601      	mov	r1, r0
   16db4:	22c9      	movs	r2, #201	; 0xc9
   16db6:	480c      	ldr	r0, [pc, #48]	; (16de8 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd4>)
   16db8:	f7ea fc36 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16dbc:	e7df      	b.n	16d7e <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x6a>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16dbe:	4601      	mov	r1, r0
   16dc0:	22c6      	movs	r2, #198	; 0xc6
   16dc2:	4809      	ldr	r0, [pc, #36]	; (16de8 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd4>)
   16dc4:	f7ea fc30 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16dc8:	e7d4      	b.n	16d74 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x60>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   16dca:	4601      	mov	r1, r0
   16dcc:	22c3      	movs	r2, #195	; 0xc3
   16dce:	4806      	ldr	r0, [pc, #24]	; (16de8 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd4>)
   16dd0:	f7ea fc2a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   16dd4:	e7c9      	b.n	16d6a <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x56>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   16dd6:	21b6      	movs	r1, #182	; 0xb6
   16dd8:	4803      	ldr	r0, [pc, #12]	; (16de8 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0xd4>)
   16dda:	f7ea fc17 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   16dde:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   16de0:	2800      	cmp	r0, #0
   16de2:	d0b1      	beq.n	16d48 <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x34>
   16de4:	e7a3      	b.n	16d2e <Fw::OutputLogTextPort::invoke(unsigned long, Fw::Time&, Fw::LogSeverity const&, Fw::TextLogString&) const+0x1a>
   16de6:	bf00      	nop
   16de8:	200009e4 	.word	0x200009e4
   16dec:	20002e40 	.word	0x20002e40

00016df0 <Fw::InputLogTextPort::init()>:
    Fw::InputPortBase::init();
   16df0:	f000 bf7e 	b.w	17cf0 <Fw::InputPortBase::init()>

00016df4 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
   16df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16df8:	4605      	mov	r5, r0
   16dfa:	b0ac      	sub	sp, #176	; 0xb0
   16dfc:	460e      	mov	r6, r1
    this->trace();
   16dfe:	f001 f82b 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   16e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   16e04:	2b00      	cmp	r3, #0
   16e06:	d04f      	beq.n	16ea8 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xb4>
    FW_ASSERT(this->m_func != nullptr);
   16e08:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   16e0a:	2b00      	cmp	r3, #0
   16e0c:	d053      	beq.n	16eb6 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xc2>
    _status = _buffer.deserialize(id);
   16e0e:	a903      	add	r1, sp, #12
   16e10:	4630      	mov	r0, r6
   16e12:	f7e9 ff55 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   16e16:	4604      	mov	r4, r0
   16e18:	b118      	cbz	r0, 16e22 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0x2e>
  }
   16e1a:	4620      	mov	r0, r4
   16e1c:	b02c      	add	sp, #176	; 0xb0
   16e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Fw::Time timeTag;
   16e22:	a806      	add	r0, sp, #24
   16e24:	f000 fd44 	bl	178b0 <Fw::Time::Time()>
    _status = _buffer.deserialize(timeTag);
   16e28:	a906      	add	r1, sp, #24
   16e2a:	4630      	mov	r0, r6
   16e2c:	f7ea f852 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   16e30:	4604      	mov	r4, r0
   16e32:	b988      	cbnz	r0, 16e58 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>
      {
   16e34:	a804      	add	r0, sp, #16
   16e36:	4f22      	ldr	r7, [pc, #136]	; (16ec0 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xcc>)
   16e38:	f7e9 fb7a 	bl	530 <Fw::Serializable::Serializable()>
        this->e = FATAL;
   16e3c:	2301      	movs	r3, #1
    _status = _buffer.deserialize(severity);
   16e3e:	a904      	add	r1, sp, #16
   16e40:	4630      	mov	r0, r6
      {
   16e42:	9704      	str	r7, [sp, #16]
        this->e = FATAL;
   16e44:	f88d 3014 	strb.w	r3, [sp, #20]
   16e48:	f7ea f844 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   16e4c:	4604      	mov	r4, r0
   16e4e:	b150      	cbz	r0, 16e66 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0x72>
  class LogSeverity :
   16e50:	a804      	add	r0, sp, #16
   16e52:	9704      	str	r7, [sp, #16]
   16e54:	f7e9 fb72 	bl	53c <Fw::Serializable::~Serializable()>
  }
   16e58:	a806      	add	r0, sp, #24
   16e5a:	f000 fcd1 	bl	17800 <Fw::Time::~Time()>
   16e5e:	4620      	mov	r0, r4
   16e60:	b02c      	add	sp, #176	; 0xb0
   16e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TextLogString() : StringBase() { *this = ""; }
   16e66:	f8df 8064 	ldr.w	r8, [pc, #100]	; 16ecc <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xd8>
   16e6a:	a80a      	add	r0, sp, #40	; 0x28
   16e6c:	f7ea f9d8 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   16e70:	4914      	ldr	r1, [pc, #80]	; (16ec4 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xd0>)
   16e72:	a80a      	add	r0, sp, #40	; 0x28
    TextLogString() : StringBase() { *this = ""; }
   16e74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
        (void)StringBase::operator=(src);
   16e78:	f7ea fa3a 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    _status = _buffer.deserialize(text);
   16e7c:	a90a      	add	r1, sp, #40	; 0x28
   16e7e:	4630      	mov	r0, r6
   16e80:	f7ea f828 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   16e84:	4604      	mov	r4, r0
   16e86:	b948      	cbnz	r0, 16e9c <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xa8>
    this->m_func(this->m_comp, this->m_portNum, id, timeTag, severity, text);
   16e88:	ab0a      	add	r3, sp, #40	; 0x28
   16e8a:	9a03      	ldr	r2, [sp, #12]
   16e8c:	9301      	str	r3, [sp, #4]
   16e8e:	ab04      	add	r3, sp, #16
   16e90:	9300      	str	r3, [sp, #0]
   16e92:	ab06      	add	r3, sp, #24
   16e94:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   16e96:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   16e9a:	47b0      	blx	r6
    ~TextLogString() {}
   16e9c:	a80a      	add	r0, sp, #40	; 0x28
   16e9e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   16ea2:	f7ea f9c7 	bl	1234 <Fw::StringBase::~StringBase()>
   16ea6:	e7d3      	b.n	16e50 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0x5c>
    FW_ASSERT(this->m_comp != nullptr);
   16ea8:	2168      	movs	r1, #104	; 0x68
   16eaa:	4807      	ldr	r0, [pc, #28]	; (16ec8 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xd4>)
   16eac:	f7ea fbae 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   16eb0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	d1ab      	bne.n	16e0e <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0x1a>
   16eb6:	2169      	movs	r1, #105	; 0x69
   16eb8:	4803      	ldr	r0, [pc, #12]	; (16ec8 <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0xd4>)
   16eba:	f7ea fba7 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   16ebe:	e7a6      	b.n	16e0e <Fw::InputLogTextPort::invokeSerial(Fw::SerializeBufferBase&)+0x1a>
   16ec0:	20002c08 	.word	0x20002c08
   16ec4:	20001d2c 	.word	0x20001d2c
   16ec8:	200009e4 	.word	0x200009e4
   16ecc:	20002f60 	.word	0x20002f60

00016ed0 <Fw::OutputLogTextPort::init()>:
    Fw::OutputPortBase::init();
   16ed0:	f000 bf38 	b.w	17d44 <Fw::OutputPortBase::init()>

00016ed4 <Fw::TlmBuffer::getBuffCapacity() const>:
        return *this;
    }

    NATIVE_UINT_TYPE TlmBuffer::getBuffCapacity() const {
        return sizeof(this->m_bufferData);
    }
   16ed4:	2014      	movs	r0, #20
   16ed6:	4770      	bx	lr

00016ed8 <Fw::TlmBuffer::getBuffAddr()>:
        return this->m_bufferData;
    }

    U8* TlmBuffer::getBuffAddr() {
        return this->m_bufferData;
    }
   16ed8:	300c      	adds	r0, #12
   16eda:	4770      	bx	lr

00016edc <Fw::TlmBuffer::~TlmBuffer()>:
    TlmBuffer::~TlmBuffer() {
   16edc:	4b03      	ldr	r3, [pc, #12]	; (16eec <Fw::TlmBuffer::~TlmBuffer()+0x10>)
   16ede:	b510      	push	{r4, lr}
   16ee0:	4604      	mov	r4, r0
   16ee2:	6003      	str	r3, [r0, #0]
   16ee4:	f7e9 fb34 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   16ee8:	4620      	mov	r0, r4
   16eea:	bd10      	pop	{r4, pc}
   16eec:	200033dc 	.word	0x200033dc

00016ef0 <Fw::TlmBuffer::~TlmBuffer()>:
    TlmBuffer::~TlmBuffer() {
   16ef0:	4b05      	ldr	r3, [pc, #20]	; (16f08 <Fw::TlmBuffer::~TlmBuffer()+0x18>)
   16ef2:	b510      	push	{r4, lr}
   16ef4:	4604      	mov	r4, r0
   16ef6:	6003      	str	r3, [r0, #0]
   16ef8:	f7e9 fb2a 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   16efc:	2120      	movs	r1, #32
   16efe:	4620      	mov	r0, r4
   16f00:	f001 fee6 	bl	18cd0 <operator delete(void*, unsigned int)>
   16f04:	4620      	mov	r0, r4
   16f06:	bd10      	pop	{r4, pc}
   16f08:	200033dc 	.word	0x200033dc

00016f0c <Fw::TlmBuffer::TlmBuffer()>:
    TlmBuffer::TlmBuffer() {
   16f0c:	b510      	push	{r4, lr}
   16f0e:	4604      	mov	r4, r0
   16f10:	f7e9 fb16 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
   16f14:	4b01      	ldr	r3, [pc, #4]	; (16f1c <Fw::TlmBuffer::TlmBuffer()+0x10>)
    }
   16f16:	4620      	mov	r0, r4
    TlmBuffer::TlmBuffer() {
   16f18:	6023      	str	r3, [r4, #0]
    }
   16f1a:	bd10      	pop	{r4, pc}
   16f1c:	200033dc 	.word	0x200033dc

00016f20 <Fw::TlmBuffer::operator=(Fw::TlmBuffer const&)>:
        if(this == &other) {
   16f20:	4288      	cmp	r0, r1
    TlmBuffer& TlmBuffer::operator=(const TlmBuffer& other) {
   16f22:	b538      	push	{r3, r4, r5, lr}
   16f24:	4604      	mov	r4, r0
        if(this == &other) {
   16f26:	d00a      	beq.n	16f3e <Fw::TlmBuffer::operator=(Fw::TlmBuffer const&)+0x1e>
        SerializeStatus stat = SerializeBufferBase::setBuff(other.m_bufferData,other.getBuffLength());
   16f28:	460d      	mov	r5, r1
   16f2a:	4608      	mov	r0, r1
   16f2c:	f7ea f86a 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   16f30:	4602      	mov	r2, r0
   16f32:	f105 010c 	add.w	r1, r5, #12
   16f36:	4620      	mov	r0, r4
   16f38:	f7ea f866 	bl	1008 <Fw::SerializeBufferBase::setBuff(unsigned char const*, unsigned long)>
        FW_ASSERT(FW_SERIALIZE_OK == stat,static_cast<NATIVE_INT_TYPE>(stat));
   16f3c:	b908      	cbnz	r0, 16f42 <Fw::TlmBuffer::operator=(Fw::TlmBuffer const&)+0x22>
    }
   16f3e:	4620      	mov	r0, r4
   16f40:	bd38      	pop	{r3, r4, r5, pc}
        FW_ASSERT(FW_SERIALIZE_OK == stat,static_cast<NATIVE_INT_TYPE>(stat));
   16f42:	4601      	mov	r1, r0
   16f44:	221c      	movs	r2, #28
   16f46:	4802      	ldr	r0, [pc, #8]	; (16f50 <Fw::TlmBuffer::operator=(Fw::TlmBuffer const&)+0x30>)
   16f48:	f7ea fb6e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
    }
   16f4c:	4620      	mov	r0, r4
   16f4e:	bd38      	pop	{r3, r4, r5, pc}
   16f50:	20000d58 	.word	0x20000d58

00016f54 <Fw::TlmPacket::TlmPacket()>:
    TlmPacket::TlmPacket() : m_numEntries(0) {
   16f54:	b538      	push	{r3, r4, r5, lr}
   16f56:	4604      	mov	r4, r0
   16f58:	f000 fac6 	bl	174e8 <Fw::ComPacket::ComPacket()>
   16f5c:	4b08      	ldr	r3, [pc, #32]	; (16f80 <Fw::TlmPacket::TlmPacket()+0x2c>)
   16f5e:	4625      	mov	r5, r4
   16f60:	f845 3b08 	str.w	r3, [r5], #8
   16f64:	4628      	mov	r0, r5
   16f66:	f000 fb05 	bl	17574 <Fw::ComBuffer::ComBuffer()>
   16f6a:	2200      	movs	r2, #0
        this->m_type = FW_PACKET_TELEM;
   16f6c:	2301      	movs	r3, #1
        this->m_tlmBuffer.resetSer();
   16f6e:	4628      	mov	r0, r5
    TlmPacket::TlmPacket() : m_numEntries(0) {
   16f70:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
        this->m_type = FW_PACKET_TELEM;
   16f74:	7123      	strb	r3, [r4, #4]
        this->m_tlmBuffer.resetSer();
   16f76:	f7ea f83d 	bl	ff4 <Fw::SerializeBufferBase::resetSer()>
    }
   16f7a:	4620      	mov	r0, r4
   16f7c:	bd38      	pop	{r3, r4, r5, pc}
   16f7e:	bf00      	nop
   16f80:	200033f8 	.word	0x200033f8

00016f84 <Fw::TlmPacket::resetPktSer()>:
    SerializeStatus TlmPacket::resetPktSer() {
   16f84:	b538      	push	{r3, r4, r5, lr}
        this->m_tlmBuffer.resetSer();
   16f86:	f100 0508 	add.w	r5, r0, #8
    SerializeStatus TlmPacket::resetPktSer() {
   16f8a:	4604      	mov	r4, r0
        this->m_tlmBuffer.resetSer();
   16f8c:	4628      	mov	r0, r5
   16f8e:	f7ea f831 	bl	ff4 <Fw::SerializeBufferBase::resetSer()>
        FW_ASSERT(FW_PACKET_TELEM == this->m_type,this->m_type);
   16f92:	7921      	ldrb	r1, [r4, #4]
        this->m_numEntries = 0;
   16f94:	2300      	movs	r3, #0
        FW_ASSERT(FW_PACKET_TELEM == this->m_type,this->m_type);
   16f96:	2901      	cmp	r1, #1
        this->m_numEntries = 0;
   16f98:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        FW_ASSERT(FW_PACKET_TELEM == this->m_type,this->m_type);
   16f9c:	d003      	beq.n	16fa6 <Fw::TlmPacket::resetPktSer()+0x22>
   16f9e:	221b      	movs	r2, #27
   16fa0:	4804      	ldr	r0, [pc, #16]	; (16fb4 <Fw::TlmPacket::resetPktSer()+0x30>)
   16fa2:	f7ea fb41 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
        return this->serializeBase(this->m_tlmBuffer);
   16fa6:	4629      	mov	r1, r5
   16fa8:	4620      	mov	r0, r4
    }
   16faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return this->serializeBase(this->m_tlmBuffer);
   16fae:	f000 bab1 	b.w	17514 <Fw::ComPacket::serializeBase(Fw::SerializeBufferBase&) const>
   16fb2:	bf00      	nop
   16fb4:	20000d70 	.word	0x20000d70

00016fb8 <Fw::TlmPacket::getNumEntries()>:
    }
   16fb8:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   16fbc:	4770      	bx	lr
   16fbe:	bf00      	nop

00016fc0 <Fw::TlmPacket::getBuffer()>:
    }
   16fc0:	3008      	adds	r0, #8
   16fc2:	4770      	bx	lr

00016fc4 <Fw::TlmPacket::~TlmPacket()>:
    TlmPacket::~TlmPacket() {
   16fc4:	4b05      	ldr	r3, [pc, #20]	; (16fdc <Fw::TlmPacket::~TlmPacket()+0x18>)
   16fc6:	b510      	push	{r4, lr}
   16fc8:	4604      	mov	r4, r0
   16fca:	f840 3b08 	str.w	r3, [r0], #8
   16fce:	f000 fab9 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
   16fd2:	4620      	mov	r0, r4
   16fd4:	f000 fa94 	bl	17500 <Fw::ComPacket::~ComPacket()>
    }
   16fd8:	4620      	mov	r0, r4
   16fda:	bd10      	pop	{r4, pc}
   16fdc:	200033f8 	.word	0x200033f8

00016fe0 <Fw::TlmPacket::~TlmPacket()>:
    TlmPacket::~TlmPacket() {
   16fe0:	4b07      	ldr	r3, [pc, #28]	; (17000 <Fw::TlmPacket::~TlmPacket()+0x20>)
   16fe2:	b510      	push	{r4, lr}
   16fe4:	4604      	mov	r4, r0
   16fe6:	f840 3b08 	str.w	r3, [r0], #8
   16fea:	f000 faab 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
   16fee:	4620      	mov	r0, r4
   16ff0:	f000 fa86 	bl	17500 <Fw::ComPacket::~ComPacket()>
    }
   16ff4:	4620      	mov	r0, r4
   16ff6:	2198      	movs	r1, #152	; 0x98
   16ff8:	f001 fe6a 	bl	18cd0 <operator delete(void*, unsigned int)>
   16ffc:	4620      	mov	r0, r4
   16ffe:	bd10      	pop	{r4, pc}
   17000:	200033f8 	.word	0x200033f8

00017004 <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
    SerializeStatus TlmPacket::addValue(FwChanIdType id, Time& timeTag, TlmBuffer& buffer) {
   17004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        NATIVE_UINT_TYPE left = this->m_tlmBuffer.getBuffCapacity()-this->m_tlmBuffer.getBuffLength();
   17008:	f100 0808 	add.w	r8, r0, #8
    SerializeStatus TlmPacket::addValue(FwChanIdType id, Time& timeTag, TlmBuffer& buffer) {
   1700c:	b083      	sub	sp, #12
   1700e:	4606      	mov	r6, r0
   17010:	461d      	mov	r5, r3
        NATIVE_UINT_TYPE left = this->m_tlmBuffer.getBuffCapacity()-this->m_tlmBuffer.getBuffLength();
   17012:	4640      	mov	r0, r8
    SerializeStatus TlmPacket::addValue(FwChanIdType id, Time& timeTag, TlmBuffer& buffer) {
   17014:	4689      	mov	r9, r1
   17016:	4617      	mov	r7, r2
        NATIVE_UINT_TYPE left = this->m_tlmBuffer.getBuffCapacity()-this->m_tlmBuffer.getBuffLength();
   17018:	f000 fa90 	bl	1753c <Fw::ComBuffer::getBuffCapacity() const>
   1701c:	4604      	mov	r4, r0
   1701e:	4640      	mov	r0, r8
   17020:	f7e9 fff0 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   17024:	1a24      	subs	r4, r4, r0
            (sizeof(FwChanIdType) + Time::SERIALIZED_SIZE + buffer.getBuffLength()) > left
   17026:	4628      	mov	r0, r5
   17028:	f7e9 ffec 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   1702c:	300f      	adds	r0, #15
        if (
   1702e:	42a0      	cmp	r0, r4
   17030:	d826      	bhi.n	17080 <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x7c>
        SerializeStatus stat = this->m_tlmBuffer.serialize(id);
   17032:	4649      	mov	r1, r9
   17034:	4640      	mov	r0, r8
   17036:	f7e9 fb11 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        if (stat != Fw::FW_SERIALIZE_OK) {
   1703a:	b110      	cbz	r0, 17042 <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x3e>
    }
   1703c:	b003      	add	sp, #12
   1703e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        stat = this->m_tlmBuffer.serialize(timeTag);
   17042:	4639      	mov	r1, r7
   17044:	4640      	mov	r0, r8
   17046:	f7e9 fd5b 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
        if (stat != Fw::FW_SERIALIZE_OK) {
   1704a:	2800      	cmp	r0, #0
   1704c:	d1f6      	bne.n	1703c <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x38>
        stat = this->m_tlmBuffer.serialize(buffer.getBuffAddr(),buffer.getBuffLength(),true);
   1704e:	682b      	ldr	r3, [r5, #0]
   17050:	4628      	mov	r0, r5
   17052:	68db      	ldr	r3, [r3, #12]
   17054:	4798      	blx	r3
   17056:	4601      	mov	r1, r0
   17058:	4628      	mov	r0, r5
   1705a:	9101      	str	r1, [sp, #4]
   1705c:	f7e9 ffd2 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   17060:	2301      	movs	r3, #1
   17062:	4602      	mov	r2, r0
   17064:	9901      	ldr	r1, [sp, #4]
   17066:	4640      	mov	r0, r8
   17068:	f7e9 fce4 	bl	a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>
        if (stat != Fw::FW_SERIALIZE_OK) {
   1706c:	2800      	cmp	r0, #0
   1706e:	d1e5      	bne.n	1703c <Fw::TlmPacket::addValue(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x38>
        this->m_numEntries++;
   17070:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   17074:	3301      	adds	r3, #1
   17076:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    }
   1707a:	b003      	add	sp, #12
   1707c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return Fw::FW_SERIALIZE_NO_ROOM_LEFT;
   17080:	2002      	movs	r0, #2
    }
   17082:	b003      	add	sp, #12
   17084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017088 <Fw::TlmPacket::serialize(Fw::SerializeBufferBase&) const>:

    SerializeStatus TlmPacket::serialize(SerializeBufferBase& buffer) const {
   17088:	b530      	push	{r4, r5, lr}
   1708a:	460d      	mov	r5, r1
   1708c:	b083      	sub	sp, #12
   1708e:	4604      	mov	r4, r0
        // serialize the number of packets
        SerializeStatus stat = buffer.serialize(this->m_numEntries);
   17090:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
   17094:	4628      	mov	r0, r5
   17096:	f7e9 fae1 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        if (stat != Fw::FW_SERIALIZE_OK) {
   1709a:	b108      	cbz	r0, 170a0 <Fw::TlmPacket::serialize(Fw::SerializeBufferBase&) const+0x18>
            return stat;
        }
        // Serialize the ComBuffer
        return buffer.serialize(this->m_tlmBuffer.getBuffAddr(),m_tlmBuffer.getBuffLength(),true);
    }
   1709c:	b003      	add	sp, #12
   1709e:	bd30      	pop	{r4, r5, pc}
        return buffer.serialize(this->m_tlmBuffer.getBuffAddr(),m_tlmBuffer.getBuffLength(),true);
   170a0:	3408      	adds	r4, #8
   170a2:	4620      	mov	r0, r4
   170a4:	f000 fa4c 	bl	17540 <Fw::ComBuffer::getBuffAddr()>
   170a8:	4601      	mov	r1, r0
   170aa:	4620      	mov	r0, r4
   170ac:	9101      	str	r1, [sp, #4]
   170ae:	f7e9 ffa9 	bl	1004 <Fw::SerializeBufferBase::getBuffLength() const>
   170b2:	2301      	movs	r3, #1
   170b4:	4602      	mov	r2, r0
   170b6:	9901      	ldr	r1, [sp, #4]
   170b8:	4628      	mov	r0, r5
    }
   170ba:	b003      	add	sp, #12
   170bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return buffer.serialize(this->m_tlmBuffer.getBuffAddr(),m_tlmBuffer.getBuffLength(),true);
   170c0:	f7e9 bcb8 	b.w	a34 <Fw::SerializeBufferBase::serialize(unsigned char const*, unsigned long, bool)>

000170c4 <Fw::TlmPacket::deserialize(Fw::SerializeBufferBase&)>:

    SerializeStatus TlmPacket::deserialize(SerializeBufferBase& buffer) {
   170c4:	b570      	push	{r4, r5, r6, lr}
   170c6:	460e      	mov	r6, r1
   170c8:	b082      	sub	sp, #8

        // deserialize the number of packets
        SerializeStatus stat = buffer.deserialize(this->m_numEntries);
   170ca:	f100 0194 	add.w	r1, r0, #148	; 0x94
    SerializeStatus TlmPacket::deserialize(SerializeBufferBase& buffer) {
   170ce:	4605      	mov	r5, r0
        SerializeStatus stat = buffer.deserialize(this->m_numEntries);
   170d0:	4630      	mov	r0, r6
   170d2:	f7e9 fdf5 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (stat != Fw::FW_SERIALIZE_OK) {
   170d6:	4604      	mov	r4, r0
   170d8:	b110      	cbz	r0, 170e0 <Fw::TlmPacket::deserialize(Fw::SerializeBufferBase&)+0x1c>
            // Shouldn't fail
            stat = this->m_tlmBuffer.setBuffLen(size);
            FW_ASSERT(stat == FW_SERIALIZE_OK,static_cast<NATIVE_INT_TYPE>(stat));
        }
        return stat;
    }
   170da:	4620      	mov	r0, r4
   170dc:	b002      	add	sp, #8
   170de:	bd70      	pop	{r4, r5, r6, pc}
        NATIVE_UINT_TYPE size = buffer.getBuffLeft();
   170e0:	4630      	mov	r0, r6
        stat = buffer.deserialize(this->m_tlmBuffer.getBuffAddr(),size,true);
   170e2:	3508      	adds	r5, #8
        NATIVE_UINT_TYPE size = buffer.getBuffLeft();
   170e4:	f7e9 ffe4 	bl	10b0 <Fw::SerializeBufferBase::getBuffLeft() const>
   170e8:	4603      	mov	r3, r0
        stat = buffer.deserialize(this->m_tlmBuffer.getBuffAddr(),size,true);
   170ea:	4628      	mov	r0, r5
        NATIVE_UINT_TYPE size = buffer.getBuffLeft();
   170ec:	9301      	str	r3, [sp, #4]
        stat = buffer.deserialize(this->m_tlmBuffer.getBuffAddr(),size,true);
   170ee:	f000 fa27 	bl	17540 <Fw::ComBuffer::getBuffAddr()>
   170f2:	2301      	movs	r3, #1
   170f4:	4601      	mov	r1, r0
   170f6:	aa01      	add	r2, sp, #4
   170f8:	4630      	mov	r0, r6
   170fa:	f7e9 fedf 	bl	ebc <Fw::SerializeBufferBase::deserialize(unsigned char*, unsigned long&, bool)>
        if (stat == FW_SERIALIZE_OK) {
   170fe:	4604      	mov	r4, r0
   17100:	2800      	cmp	r0, #0
   17102:	d1ea      	bne.n	170da <Fw::TlmPacket::deserialize(Fw::SerializeBufferBase&)+0x16>
            stat = this->m_tlmBuffer.setBuffLen(size);
   17104:	9901      	ldr	r1, [sp, #4]
   17106:	4628      	mov	r0, r5
   17108:	f7e9 ffbc 	bl	1084 <Fw::SerializeBufferBase::setBuffLen(unsigned long)>
            FW_ASSERT(stat == FW_SERIALIZE_OK,static_cast<NATIVE_INT_TYPE>(stat));
   1710c:	4604      	mov	r4, r0
   1710e:	2800      	cmp	r0, #0
   17110:	d0e3      	beq.n	170da <Fw::TlmPacket::deserialize(Fw::SerializeBufferBase&)+0x16>
   17112:	4601      	mov	r1, r0
   17114:	229b      	movs	r2, #155	; 0x9b
   17116:	4802      	ldr	r0, [pc, #8]	; (17120 <Fw::TlmPacket::deserialize(Fw::SerializeBufferBase&)+0x5c>)
   17118:	f7ea fa86 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1711c:	e7dd      	b.n	170da <Fw::TlmPacket::deserialize(Fw::SerializeBufferBase&)+0x16>
   1711e:	bf00      	nop
   17120:	20000d70 	.word	0x20000d70

00017124 <Fw::InputTlmGetPort::~InputTlmGetPort()>:

namespace Fw {

  //! Input TlmGet port
  //! Port for getting telemetry
  class InputTlmGetPort :
   17124:	4b03      	ldr	r3, [pc, #12]	; (17134 <Fw::InputTlmGetPort::~InputTlmGetPort()+0x10>)
   17126:	b510      	push	{r4, lr}
   17128:	4604      	mov	r4, r0
   1712a:	6003      	str	r3, [r0, #0]
   1712c:	f000 fdc8 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   17130:	4620      	mov	r0, r4
   17132:	bd10      	pop	{r4, pc}
   17134:	20003024 	.word	0x20003024

00017138 <Fw::InputTlmGetPort::~InputTlmGetPort()>:
   17138:	4b05      	ldr	r3, [pc, #20]	; (17150 <Fw::InputTlmGetPort::~InputTlmGetPort()+0x18>)
   1713a:	b510      	push	{r4, lr}
   1713c:	4604      	mov	r4, r0
   1713e:	6003      	str	r3, [r0, #0]
   17140:	f000 fdbe 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   17144:	2170      	movs	r1, #112	; 0x70
   17146:	4620      	mov	r0, r4
   17148:	f001 fdc2 	bl	18cd0 <operator delete(void*, unsigned int)>
   1714c:	4620      	mov	r0, r4
   1714e:	bd10      	pop	{r4, pc}
   17150:	20003024 	.word	0x20003024

00017154 <Fw::InputTlmGetPort::InputTlmGetPort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputTlmGetPort ::
   17154:	b510      	push	{r4, lr}
   17156:	4604      	mov	r4, r0
    InputTlmGetPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   17158:	f000 fda2 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   1715c:	4a02      	ldr	r2, [pc, #8]	; (17168 <Fw::InputTlmGetPort::InputTlmGetPort()+0x14>)
   1715e:	2300      	movs	r3, #0
  {

  }
   17160:	4620      	mov	r0, r4
      m_func(nullptr)
   17162:	6022      	str	r2, [r4, #0]
   17164:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   17166:	bd10      	pop	{r4, pc}
   17168:	20003024 	.word	0x20003024

0001716c <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))>:
  void InputTlmGetPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   1716c:	b570      	push	{r4, r5, r6, lr}
   1716e:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   17170:	460d      	mov	r5, r1
  {
   17172:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   17174:	b121      	cbz	r1, 17180 <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   17176:	b14e      	cbz	r6, 1718c <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x20>

    this->m_comp = callComp;
   17178:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   1717a:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   1717c:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   1717e:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   17180:	2143      	movs	r1, #67	; 0x43
   17182:	4806      	ldr	r0, [pc, #24]	; (1719c <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x30>)
   17184:	f7ea fa42 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   17188:	2e00      	cmp	r6, #0
   1718a:	d1f5      	bne.n	17178 <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0xc>
   1718c:	2144      	movs	r1, #68	; 0x44
   1718e:	4803      	ldr	r0, [pc, #12]	; (1719c <Fw::InputTlmGetPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x30>)
   17190:	f7ea fa3c 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   17194:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   17196:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   17198:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   1719a:	bd70      	pop	{r4, r5, r6, pc}
   1719c:	200008e8 	.word	0x200008e8

000171a0 <Fw::InputTlmGetPort::init()>:
    Fw::InputPortBase::init();
   171a0:	f000 bda6 	b.w	17cf0 <Fw::InputPortBase::init()>

000171a4 <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)>:

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputTlmGetPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
   171a4:	b570      	push	{r4, r5, r6, lr}
   171a6:	4605      	mov	r5, r0
   171a8:	b090      	sub	sp, #64	; 0x40
   171aa:	460e      	mov	r6, r1
    Fw::SerializeStatus _status;

#if FW_PORT_TRACING == 1
    this->trace();
   171ac:	f000 fe54 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   171b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   171b2:	2b00      	cmp	r3, #0
   171b4:	d02e      	beq.n	17214 <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x70>
    FW_ASSERT(this->m_func != nullptr);
   171b6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   171b8:	2b00      	cmp	r3, #0
   171ba:	d032      	beq.n	17222 <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x7e>

    FwChanIdType id;
    _status = _buffer.deserialize(id);
   171bc:	a903      	add	r1, sp, #12
   171be:	4630      	mov	r0, r6
   171c0:	f7e9 fd7e 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   171c4:	4604      	mov	r4, r0
   171c6:	b110      	cbz	r0, 171ce <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
    }

    this->m_func(this->m_comp, this->m_portNum, id, timeTag, val);

    return Fw::FW_SERIALIZE_OK;
  }
   171c8:	4620      	mov	r0, r4
   171ca:	b010      	add	sp, #64	; 0x40
   171cc:	bd70      	pop	{r4, r5, r6, pc}
    Fw::Time timeTag;
   171ce:	a804      	add	r0, sp, #16
   171d0:	f000 fb6e 	bl	178b0 <Fw::Time::Time()>
    _status = _buffer.deserialize(timeTag);
   171d4:	a904      	add	r1, sp, #16
   171d6:	4630      	mov	r0, r6
   171d8:	f7e9 fe7c 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   171dc:	4604      	mov	r4, r0
   171de:	b998      	cbnz	r0, 17208 <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>
    Fw::TlmBuffer val;
   171e0:	a808      	add	r0, sp, #32
   171e2:	f7ff fe93 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
    _status = _buffer.deserialize(val);
   171e6:	a908      	add	r1, sp, #32
   171e8:	4630      	mov	r0, r6
   171ea:	f7e9 fe79 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   171ee:	4604      	mov	r4, r0
   171f0:	b938      	cbnz	r0, 17202 <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x5e>
    this->m_func(this->m_comp, this->m_portNum, id, timeTag, val);
   171f2:	ab08      	add	r3, sp, #32
   171f4:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   171f6:	9a03      	ldr	r2, [sp, #12]
   171f8:	9300      	str	r3, [sp, #0]
   171fa:	ab04      	add	r3, sp, #16
   171fc:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   17200:	47b0      	blx	r6
  }
   17202:	a808      	add	r0, sp, #32
   17204:	f7ff fe6a 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
   17208:	a804      	add	r0, sp, #16
   1720a:	f000 faf9 	bl	17800 <Fw::Time::~Time()>
   1720e:	4620      	mov	r0, r4
   17210:	b010      	add	sp, #64	; 0x40
   17212:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
   17214:	2167      	movs	r1, #103	; 0x67
   17216:	4805      	ldr	r0, [pc, #20]	; (1722c <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x88>)
   17218:	f7ea f9f8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   1721c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   1721e:	2b00      	cmp	r3, #0
   17220:	d1cc      	bne.n	171bc <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   17222:	2168      	movs	r1, #104	; 0x68
   17224:	4801      	ldr	r0, [pc, #4]	; (1722c <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x88>)
   17226:	f7ea f9f1 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   1722a:	e7c7      	b.n	171bc <Fw::InputTlmGetPort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   1722c:	200008e8 	.word	0x200008e8

00017230 <Fw::(anonymous namespace)::TlmPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputTlmPort::SERIALIZED_SIZE;
        }
   17230:	2025      	movs	r0, #37	; 0x25
   17232:	4770      	bx	lr

00017234 <Fw::(anonymous namespace)::TlmPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   17234:	300c      	adds	r0, #12
   17236:	4770      	bx	lr

00017238 <Fw::(anonymous namespace)::TlmPortBuffer::~TlmPortBuffer()>:
    class TlmPortBuffer : public Fw::SerializeBufferBase {
   17238:	4b03      	ldr	r3, [pc, #12]	; (17248 <Fw::(anonymous namespace)::TlmPortBuffer::~TlmPortBuffer()+0x10>)
   1723a:	b510      	push	{r4, lr}
   1723c:	4604      	mov	r4, r0
   1723e:	6003      	str	r3, [r0, #0]
   17240:	f7e9 f986 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   17244:	4620      	mov	r0, r4
   17246:	bd10      	pop	{r4, pc}
   17248:	20002dd0 	.word	0x20002dd0

0001724c <Fw::(anonymous namespace)::TlmPortBuffer::~TlmPortBuffer()>:
   1724c:	4b05      	ldr	r3, [pc, #20]	; (17264 <Fw::(anonymous namespace)::TlmPortBuffer::~TlmPortBuffer()+0x18>)
   1724e:	b510      	push	{r4, lr}
   17250:	4604      	mov	r4, r0
   17252:	6003      	str	r3, [r0, #0]
   17254:	f7e9 f97c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   17258:	2134      	movs	r1, #52	; 0x34
   1725a:	4620      	mov	r0, r4
   1725c:	f001 fd38 	bl	18cd0 <operator delete(void*, unsigned int)>
   17260:	4620      	mov	r0, r4
   17262:	bd10      	pop	{r4, pc}
   17264:	20002dd0 	.word	0x20002dd0

00017268 <Fw::OutputTlmPort::~OutputTlmPort()>:

  };

  //! Output Tlm port
  //! Port for sending telemetry
  class OutputTlmPort :
   17268:	4b03      	ldr	r3, [pc, #12]	; (17278 <Fw::OutputTlmPort::~OutputTlmPort()+0x10>)
   1726a:	b510      	push	{r4, lr}
   1726c:	4604      	mov	r4, r0
   1726e:	6003      	str	r3, [r0, #0]
   17270:	f000 fd44 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   17274:	4620      	mov	r0, r4
   17276:	bd10      	pop	{r4, pc}
   17278:	20002f44 	.word	0x20002f44

0001727c <Fw::OutputTlmPort::~OutputTlmPort()>:
   1727c:	4b05      	ldr	r3, [pc, #20]	; (17294 <Fw::OutputTlmPort::~OutputTlmPort()+0x18>)
   1727e:	b510      	push	{r4, lr}
   17280:	4604      	mov	r4, r0
   17282:	6003      	str	r3, [r0, #0]
   17284:	f000 fd3a 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   17288:	216c      	movs	r1, #108	; 0x6c
   1728a:	4620      	mov	r0, r4
   1728c:	f001 fd20 	bl	18cd0 <operator delete(void*, unsigned int)>
   17290:	4620      	mov	r0, r4
   17292:	bd10      	pop	{r4, pc}
   17294:	20002f44 	.word	0x20002f44

00017298 <Fw::InputTlmPort::~InputTlmPort()>:
  class InputTlmPort :
   17298:	4b03      	ldr	r3, [pc, #12]	; (172a8 <Fw::InputTlmPort::~InputTlmPort()+0x10>)
   1729a:	b510      	push	{r4, lr}
   1729c:	4604      	mov	r4, r0
   1729e:	6003      	str	r3, [r0, #0]
   172a0:	f000 fd0e 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   172a4:	4620      	mov	r0, r4
   172a6:	bd10      	pop	{r4, pc}
   172a8:	20002ce4 	.word	0x20002ce4

000172ac <Fw::InputTlmPort::~InputTlmPort()>:
   172ac:	4b05      	ldr	r3, [pc, #20]	; (172c4 <Fw::InputTlmPort::~InputTlmPort()+0x18>)
   172ae:	b510      	push	{r4, lr}
   172b0:	4604      	mov	r4, r0
   172b2:	6003      	str	r3, [r0, #0]
   172b4:	f000 fd04 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   172b8:	2170      	movs	r1, #112	; 0x70
   172ba:	4620      	mov	r0, r4
   172bc:	f001 fd08 	bl	18cd0 <operator delete(void*, unsigned int)>
   172c0:	4620      	mov	r0, r4
   172c2:	bd10      	pop	{r4, pc}
   172c4:	20002ce4 	.word	0x20002ce4

000172c8 <Fw::InputTlmPort::InputTlmPort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputTlmPort ::
   172c8:	b510      	push	{r4, lr}
   172ca:	4604      	mov	r4, r0
    InputTlmPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   172cc:	f000 fce8 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   172d0:	4a02      	ldr	r2, [pc, #8]	; (172dc <Fw::InputTlmPort::InputTlmPort()+0x14>)
   172d2:	2300      	movs	r3, #0
  {

  }
   172d4:	4620      	mov	r0, r4
      m_func(nullptr)
   172d6:	6022      	str	r2, [r4, #0]
   172d8:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   172da:	bd10      	pop	{r4, pc}
   172dc:	20002ce4 	.word	0x20002ce4

000172e0 <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))>:
  void InputTlmPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   172e0:	b570      	push	{r4, r5, r6, lr}
   172e2:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   172e4:	460d      	mov	r5, r1
  {
   172e6:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   172e8:	b121      	cbz	r1, 172f4 <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   172ea:	b14e      	cbz	r6, 17300 <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x20>

    this->m_comp = callComp;
   172ec:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   172ee:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   172f0:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   172f2:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   172f4:	2143      	movs	r1, #67	; 0x43
   172f6:	4806      	ldr	r0, [pc, #24]	; (17310 <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x30>)
   172f8:	f7ea f988 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   172fc:	2e00      	cmp	r6, #0
   172fe:	d1f5      	bne.n	172ec <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0xc>
   17300:	2144      	movs	r1, #68	; 0x44
   17302:	4803      	ldr	r0, [pc, #12]	; (17310 <Fw::InputTlmPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, unsigned long, Fw::Time&, Fw::TlmBuffer&))+0x30>)
   17304:	f7ea f982 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   17308:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   1730a:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   1730c:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   1730e:	bd70      	pop	{r4, r5, r6, pc}
   17310:	20000798 	.word	0x20000798

00017314 <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)>:
    invoke(
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    )
  {
   17314:	b5f0      	push	{r4, r5, r6, r7, lr}
   17316:	4604      	mov	r4, r0
   17318:	b085      	sub	sp, #20
   1731a:	461d      	mov	r5, r3
   1731c:	460e      	mov	r6, r1
   1731e:	9203      	str	r2, [sp, #12]
#if FW_PORT_TRACING == 1
    this->trace();
   17320:	f000 fd9a 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   17324:	6e62      	ldr	r2, [r4, #100]	; 0x64
   17326:	9b03      	ldr	r3, [sp, #12]
   17328:	b142      	cbz	r2, 1733c <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x28>
    FW_ASSERT(this->m_func != nullptr);
   1732a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   1732c:	b177      	cbz	r7, 1734c <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x38>

    return this->m_func(this->m_comp, this->m_portNum, id, timeTag, val);
   1732e:	9500      	str	r5, [sp, #0]
   17330:	4632      	mov	r2, r6
   17332:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   17336:	47b8      	blx	r7
  }
   17338:	b005      	add	sp, #20
   1733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FW_ASSERT(this->m_comp != nullptr);
   1733c:	2156      	movs	r1, #86	; 0x56
   1733e:	4807      	ldr	r0, [pc, #28]	; (1735c <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x48>)
   17340:	f7ea f964 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   17344:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   17346:	9b03      	ldr	r3, [sp, #12]
    FW_ASSERT(this->m_func != nullptr);
   17348:	2f00      	cmp	r7, #0
   1734a:	d1f0      	bne.n	1732e <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x1a>
   1734c:	2157      	movs	r1, #87	; 0x57
   1734e:	4803      	ldr	r0, [pc, #12]	; (1735c <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x48>)
   17350:	9303      	str	r3, [sp, #12]
   17352:	f7ea f95b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, id, timeTag, val);
   17356:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
   17358:	9b03      	ldr	r3, [sp, #12]
   1735a:	e7e8      	b.n	1732e <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)+0x1a>
   1735c:	20000798 	.word	0x20000798

00017360 <Fw::OutputTlmPort::OutputTlmPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputTlmPort ::
   17360:	b510      	push	{r4, lr}
   17362:	4604      	mov	r4, r0
    OutputTlmPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   17364:	f000 fce2 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   17368:	4a02      	ldr	r2, [pc, #8]	; (17374 <Fw::OutputTlmPort::OutputTlmPort()+0x14>)
   1736a:	2300      	movs	r3, #0
  {

  }
   1736c:	4620      	mov	r0, r4
      m_port(nullptr)
   1736e:	6022      	str	r2, [r4, #0]
   17370:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   17372:	bd10      	pop	{r4, pc}
   17374:	20002f44 	.word	0x20002f44

00017378 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputTlmPort ::
    addCallPort(InputTlmPort* callPort)
  {
   17378:	b538      	push	{r3, r4, r5, lr}
   1737a:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   1737c:	460d      	mov	r5, r1
   1737e:	b121      	cbz	r1, 1738a <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   17380:	2300      	movs	r3, #0
    this->m_port = callPort;
   17382:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   17384:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   17386:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   17388:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   1738a:	2198      	movs	r1, #152	; 0x98
   1738c:	4801      	ldr	r0, [pc, #4]	; (17394 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)+0x1c>)
   1738e:	f7ea f93d 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   17392:	e7f5      	b.n	17380 <Fw::OutputTlmPort::addCallPort(Fw::InputTlmPort*)+0x8>
   17394:	20000798 	.word	0x20000798

00017398 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const>:
    invoke(
        FwChanIdType id,
        Fw::Time& timeTag,
        Fw::TlmBuffer& val
    ) const
  {
   17398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1739c:	4604      	mov	r4, r0
   1739e:	b08e      	sub	sp, #56	; 0x38
   173a0:	460e      	mov	r6, r1
   173a2:	4617      	mov	r7, r2
   173a4:	461d      	mov	r5, r3
#if FW_PORT_TRACING == 1
    this->trace();
   173a6:	f000 fd57 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   173aa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   173ac:	b138      	cbz	r0, 173be <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x26>

    if (this->m_port != nullptr) {
      this->m_port->invoke(id, timeTag, val);
   173ae:	462b      	mov	r3, r5
   173b0:	463a      	mov	r2, r7
   173b2:	4631      	mov	r1, r6
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(id, timeTag, val);
#endif
  }
   173b4:	b00e      	add	sp, #56	; 0x38
   173b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      this->m_port->invoke(id, timeTag, val);
   173ba:	f7ff bfab 	b.w	17314 <Fw::InputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   173be:	6e63      	ldr	r3, [r4, #100]	; 0x64
   173c0:	2b00      	cmp	r3, #0
   173c2:	d03b      	beq.n	1743c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xa4>
    class TlmPortBuffer : public Fw::SerializeBufferBase {
   173c4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 17450 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xb8>
   173c8:	a801      	add	r0, sp, #4
   173ca:	f7e9 f8b9 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(id);
   173ce:	4631      	mov	r1, r6
   173d0:	a801      	add	r0, sp, #4
    class TlmPortBuffer : public Fw::SerializeBufferBase {
   173d2:	f8cd 8004 	str.w	r8, [sp, #4]
      _status = _buffer.serialize(id);
   173d6:	f7e9 f941 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   173da:	b9b8      	cbnz	r0, 1740c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x74>
      _status = _buffer.serialize(timeTag);
   173dc:	4639      	mov	r1, r7
   173de:	a801      	add	r0, sp, #4
   173e0:	f7e9 fb8e 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   173e4:	bb20      	cbnz	r0, 17430 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x98>
      _status = _buffer.serialize(val);
   173e6:	4629      	mov	r1, r5
   173e8:	a801      	add	r0, sp, #4
   173ea:	f7e9 fb8f 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   173ee:	b9c8      	cbnz	r0, 17424 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x8c>
      _status = this->m_serPort->invokeSerial(_buffer);
   173f0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   173f2:	a901      	add	r1, sp, #4
   173f4:	6803      	ldr	r3, [r0, #0]
   173f6:	695b      	ldr	r3, [r3, #20]
   173f8:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   173fa:	b968      	cbnz	r0, 17418 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x80>
    class TlmPortBuffer : public Fw::SerializeBufferBase {
   173fc:	a801      	add	r0, sp, #4
   173fe:	f8cd 8004 	str.w	r8, [sp, #4]
   17402:	f7e9 f8a5 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   17406:	b00e      	add	sp, #56	; 0x38
   17408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1740c:	4601      	mov	r1, r0
   1740e:	22b8      	movs	r2, #184	; 0xb8
   17410:	480e      	ldr	r0, [pc, #56]	; (1744c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xb4>)
   17412:	f7ea f909 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   17416:	e7e1      	b.n	173dc <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x44>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17418:	4601      	mov	r1, r0
   1741a:	22c1      	movs	r2, #193	; 0xc1
   1741c:	480b      	ldr	r0, [pc, #44]	; (1744c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xb4>)
   1741e:	f7ea f903 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   17422:	e7eb      	b.n	173fc <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x64>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17424:	4601      	mov	r1, r0
   17426:	22be      	movs	r2, #190	; 0xbe
   17428:	4808      	ldr	r0, [pc, #32]	; (1744c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xb4>)
   1742a:	f7ea f8fd 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1742e:	e7df      	b.n	173f0 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x58>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17430:	4601      	mov	r1, r0
   17432:	22bb      	movs	r2, #187	; 0xbb
   17434:	4805      	ldr	r0, [pc, #20]	; (1744c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xb4>)
   17436:	f7ea f8f7 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1743a:	e7d4      	b.n	173e6 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x4e>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   1743c:	21ae      	movs	r1, #174	; 0xae
   1743e:	4803      	ldr	r0, [pc, #12]	; (1744c <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0xb4>)
   17440:	f7ea f8e4 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   17444:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17446:	2800      	cmp	r0, #0
   17448:	d0bc      	beq.n	173c4 <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x2c>
   1744a:	e7b0      	b.n	173ae <Fw::OutputTlmPort::invoke(unsigned long, Fw::Time&, Fw::TlmBuffer&) const+0x16>
   1744c:	20000798 	.word	0x20000798
   17450:	20002dd0 	.word	0x20002dd0

00017454 <Fw::InputTlmPort::init()>:
    Fw::InputPortBase::init();
   17454:	f000 bc4c 	b.w	17cf0 <Fw::InputPortBase::init()>

00017458 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
   17458:	b570      	push	{r4, r5, r6, lr}
   1745a:	4605      	mov	r5, r0
   1745c:	b090      	sub	sp, #64	; 0x40
   1745e:	460e      	mov	r6, r1
    this->trace();
   17460:	f000 fcfa 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   17464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   17466:	2b00      	cmp	r3, #0
   17468:	d02e      	beq.n	174c8 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x70>
    FW_ASSERT(this->m_func != nullptr);
   1746a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   1746c:	2b00      	cmp	r3, #0
   1746e:	d032      	beq.n	174d6 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x7e>
    _status = _buffer.deserialize(id);
   17470:	a903      	add	r1, sp, #12
   17472:	4630      	mov	r0, r6
   17474:	f7e9 fc24 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   17478:	4604      	mov	r4, r0
   1747a:	b110      	cbz	r0, 17482 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x2a>
  }
   1747c:	4620      	mov	r0, r4
   1747e:	b010      	add	sp, #64	; 0x40
   17480:	bd70      	pop	{r4, r5, r6, pc}
    Fw::Time timeTag;
   17482:	a804      	add	r0, sp, #16
   17484:	f000 fa14 	bl	178b0 <Fw::Time::Time()>
    _status = _buffer.deserialize(timeTag);
   17488:	a904      	add	r1, sp, #16
   1748a:	4630      	mov	r0, r6
   1748c:	f7e9 fd22 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   17490:	4604      	mov	r4, r0
   17492:	b998      	cbnz	r0, 174bc <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x64>
    Fw::TlmBuffer val;
   17494:	a808      	add	r0, sp, #32
   17496:	f7ff fd39 	bl	16f0c <Fw::TlmBuffer::TlmBuffer()>
    _status = _buffer.deserialize(val);
   1749a:	a908      	add	r1, sp, #32
   1749c:	4630      	mov	r0, r6
   1749e:	f7e9 fd1f 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   174a2:	4604      	mov	r4, r0
   174a4:	b938      	cbnz	r0, 174b6 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x5e>
    this->m_func(this->m_comp, this->m_portNum, id, timeTag, val);
   174a6:	ab08      	add	r3, sp, #32
   174a8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   174aa:	9a03      	ldr	r2, [sp, #12]
   174ac:	9300      	str	r3, [sp, #0]
   174ae:	ab04      	add	r3, sp, #16
   174b0:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   174b4:	47b0      	blx	r6
  }
   174b6:	a808      	add	r0, sp, #32
   174b8:	f7ff fd10 	bl	16edc <Fw::TlmBuffer::~TlmBuffer()>
   174bc:	a804      	add	r0, sp, #16
   174be:	f000 f99f 	bl	17800 <Fw::Time::~Time()>
   174c2:	4620      	mov	r0, r4
   174c4:	b010      	add	sp, #64	; 0x40
   174c6:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_comp != nullptr);
   174c8:	2167      	movs	r1, #103	; 0x67
   174ca:	4805      	ldr	r0, [pc, #20]	; (174e0 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x88>)
   174cc:	f7ea f89e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   174d0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   174d2:	2b00      	cmp	r3, #0
   174d4:	d1cc      	bne.n	17470 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   174d6:	2168      	movs	r1, #104	; 0x68
   174d8:	4801      	ldr	r0, [pc, #4]	; (174e0 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x88>)
   174da:	f7ea f897 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   174de:	e7c7      	b.n	17470 <Fw::InputTlmPort::invokeSerial(Fw::SerializeBufferBase&)+0x18>
   174e0:	20000798 	.word	0x20000798

000174e4 <Fw::OutputTlmPort::init()>:
    Fw::OutputPortBase::init();
   174e4:	f000 bc2e 	b.w	17d44 <Fw::OutputPortBase::init()>

000174e8 <Fw::ComPacket::ComPacket()>:

#include <Fw/Com/ComPacket.hpp>

namespace Fw {

    ComPacket::ComPacket() : m_type(FW_PACKET_UNKNOWN) {
   174e8:	b510      	push	{r4, lr}
   174ea:	4604      	mov	r4, r0
   174ec:	f7e9 f820 	bl	530 <Fw::Serializable::Serializable()>
   174f0:	4a02      	ldr	r2, [pc, #8]	; (174fc <Fw::ComPacket::ComPacket()+0x14>)
   174f2:	23ff      	movs	r3, #255	; 0xff
    }
   174f4:	4620      	mov	r0, r4
    ComPacket::ComPacket() : m_type(FW_PACKET_UNKNOWN) {
   174f6:	6022      	str	r2, [r4, #0]
   174f8:	7123      	strb	r3, [r4, #4]
    }
   174fa:	bd10      	pop	{r4, pc}
   174fc:	20003388 	.word	0x20003388

00017500 <Fw::ComPacket::~ComPacket()>:

    ComPacket::~ComPacket() {
   17500:	4b03      	ldr	r3, [pc, #12]	; (17510 <Fw::ComPacket::~ComPacket()+0x10>)
   17502:	b510      	push	{r4, lr}
   17504:	4604      	mov	r4, r0
   17506:	6003      	str	r3, [r0, #0]
   17508:	f7e9 f818 	bl	53c <Fw::Serializable::~Serializable()>
    }
   1750c:	4620      	mov	r0, r4
   1750e:	bd10      	pop	{r4, pc}
   17510:	20003388 	.word	0x20003388

00017514 <Fw::ComPacket::serializeBase(Fw::SerializeBufferBase&) const>:

    SerializeStatus ComPacket::serializeBase(SerializeBufferBase& buffer) const {
   17514:	460b      	mov	r3, r1
        return buffer.serialize(static_cast<FwPacketDescriptorType>(this->m_type));
   17516:	7901      	ldrb	r1, [r0, #4]
   17518:	4618      	mov	r0, r3
   1751a:	f7e9 b89f 	b.w	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
   1751e:	bf00      	nop

00017520 <Fw::ComPacket::deserializeBase(Fw::SerializeBufferBase&)>:
    }

    SerializeStatus ComPacket::deserializeBase(SerializeBufferBase& buffer) {
   17520:	b510      	push	{r4, lr}
   17522:	460a      	mov	r2, r1
   17524:	b082      	sub	sp, #8
   17526:	4604      	mov	r4, r0
        FwPacketDescriptorType serVal;
        SerializeStatus stat = buffer.deserialize(serVal);
   17528:	a901      	add	r1, sp, #4
   1752a:	4610      	mov	r0, r2
   1752c:	f7e9 fbc8 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (FW_SERIALIZE_OK == stat) {
   17530:	b908      	cbnz	r0, 17536 <Fw::ComPacket::deserializeBase(Fw::SerializeBufferBase&)+0x16>
            this->m_type = static_cast<ComPacketType>(serVal);
   17532:	9b01      	ldr	r3, [sp, #4]
   17534:	7123      	strb	r3, [r4, #4]
        }
        return stat;
    }
   17536:	b002      	add	sp, #8
   17538:	bd10      	pop	{r4, pc}
   1753a:	bf00      	nop

0001753c <Fw::ComBuffer::getBuffCapacity() const>:
        return *this;
    }

    NATIVE_UINT_TYPE ComBuffer::getBuffCapacity() const {
        return sizeof(this->m_bufferData);
    }
   1753c:	2080      	movs	r0, #128	; 0x80
   1753e:	4770      	bx	lr

00017540 <Fw::ComBuffer::getBuffAddr()>:
        return this->m_bufferData;
    }

    U8* ComBuffer::getBuffAddr() {
        return this->m_bufferData;
    }
   17540:	300c      	adds	r0, #12
   17542:	4770      	bx	lr

00017544 <Fw::ComBuffer::~ComBuffer()>:
    ComBuffer::~ComBuffer() {
   17544:	4b03      	ldr	r3, [pc, #12]	; (17554 <Fw::ComBuffer::~ComBuffer()+0x10>)
   17546:	b510      	push	{r4, lr}
   17548:	4604      	mov	r4, r0
   1754a:	6003      	str	r3, [r0, #0]
   1754c:	f7e9 f800 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   17550:	4620      	mov	r0, r4
   17552:	bd10      	pop	{r4, pc}
   17554:	2000336c 	.word	0x2000336c

00017558 <Fw::ComBuffer::~ComBuffer()>:
    ComBuffer::~ComBuffer() {
   17558:	4b05      	ldr	r3, [pc, #20]	; (17570 <Fw::ComBuffer::~ComBuffer()+0x18>)
   1755a:	b510      	push	{r4, lr}
   1755c:	4604      	mov	r4, r0
   1755e:	6003      	str	r3, [r0, #0]
   17560:	f7e8 fff6 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
    }
   17564:	218c      	movs	r1, #140	; 0x8c
   17566:	4620      	mov	r0, r4
   17568:	f001 fbb2 	bl	18cd0 <operator delete(void*, unsigned int)>
   1756c:	4620      	mov	r0, r4
   1756e:	bd10      	pop	{r4, pc}
   17570:	2000336c 	.word	0x2000336c

00017574 <Fw::ComBuffer::ComBuffer()>:
    ComBuffer::ComBuffer() {
   17574:	b510      	push	{r4, lr}
   17576:	4604      	mov	r4, r0
   17578:	f7e8 ffe2 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
   1757c:	4b01      	ldr	r3, [pc, #4]	; (17584 <Fw::ComBuffer::ComBuffer()+0x10>)
    }
   1757e:	4620      	mov	r0, r4
    ComBuffer::ComBuffer() {
   17580:	6023      	str	r3, [r4, #0]
    }
   17582:	bd10      	pop	{r4, pc}
   17584:	2000336c 	.word	0x2000336c

00017588 <Fw::(anonymous namespace)::ComPortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputComPort::SERIALIZED_SIZE;
        }
   17588:	2086      	movs	r0, #134	; 0x86
   1758a:	4770      	bx	lr

0001758c <Fw::(anonymous namespace)::ComPortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   1758c:	300c      	adds	r0, #12
   1758e:	4770      	bx	lr

00017590 <Fw::(anonymous namespace)::ComPortBuffer::~ComPortBuffer()>:
    class ComPortBuffer : public Fw::SerializeBufferBase {
   17590:	4b03      	ldr	r3, [pc, #12]	; (175a0 <Fw::(anonymous namespace)::ComPortBuffer::~ComPortBuffer()+0x10>)
   17592:	b510      	push	{r4, lr}
   17594:	4604      	mov	r4, r0
   17596:	6003      	str	r3, [r0, #0]
   17598:	f7e8 ffda 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   1759c:	4620      	mov	r0, r4
   1759e:	bd10      	pop	{r4, pc}
   175a0:	20002d98 	.word	0x20002d98

000175a4 <Fw::(anonymous namespace)::ComPortBuffer::~ComPortBuffer()>:
   175a4:	4b05      	ldr	r3, [pc, #20]	; (175bc <Fw::(anonymous namespace)::ComPortBuffer::~ComPortBuffer()+0x18>)
   175a6:	b510      	push	{r4, lr}
   175a8:	4604      	mov	r4, r0
   175aa:	6003      	str	r3, [r0, #0]
   175ac:	f7e8 ffd0 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   175b0:	2194      	movs	r1, #148	; 0x94
   175b2:	4620      	mov	r0, r4
   175b4:	f001 fb8c 	bl	18cd0 <operator delete(void*, unsigned int)>
   175b8:	4620      	mov	r0, r4
   175ba:	bd10      	pop	{r4, pc}
   175bc:	20002d98 	.word	0x20002d98

000175c0 <Fw::OutputComPort::~OutputComPort()>:

  };

  //! Output Com port
  //! Port for passing communication packet buffers
  class OutputComPort :
   175c0:	4b03      	ldr	r3, [pc, #12]	; (175d0 <Fw::OutputComPort::~OutputComPort()+0x10>)
   175c2:	b510      	push	{r4, lr}
   175c4:	4604      	mov	r4, r0
   175c6:	6003      	str	r3, [r0, #0]
   175c8:	f000 fb98 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   175cc:	4620      	mov	r0, r4
   175ce:	bd10      	pop	{r4, pc}
   175d0:	20002f0c 	.word	0x20002f0c

000175d4 <Fw::OutputComPort::~OutputComPort()>:
   175d4:	4b05      	ldr	r3, [pc, #20]	; (175ec <Fw::OutputComPort::~OutputComPort()+0x18>)
   175d6:	b510      	push	{r4, lr}
   175d8:	4604      	mov	r4, r0
   175da:	6003      	str	r3, [r0, #0]
   175dc:	f000 fb8e 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   175e0:	216c      	movs	r1, #108	; 0x6c
   175e2:	4620      	mov	r0, r4
   175e4:	f001 fb74 	bl	18cd0 <operator delete(void*, unsigned int)>
   175e8:	4620      	mov	r0, r4
   175ea:	bd10      	pop	{r4, pc}
   175ec:	20002f0c 	.word	0x20002f0c

000175f0 <Fw::InputComPort::~InputComPort()>:
  class InputComPort :
   175f0:	4b03      	ldr	r3, [pc, #12]	; (17600 <Fw::InputComPort::~InputComPort()+0x10>)
   175f2:	b510      	push	{r4, lr}
   175f4:	4604      	mov	r4, r0
   175f6:	6003      	str	r3, [r0, #0]
   175f8:	f000 fb62 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   175fc:	4620      	mov	r0, r4
   175fe:	bd10      	pop	{r4, pc}
   17600:	20002ca4 	.word	0x20002ca4

00017604 <Fw::InputComPort::~InputComPort()>:
   17604:	4b05      	ldr	r3, [pc, #20]	; (1761c <Fw::InputComPort::~InputComPort()+0x18>)
   17606:	b510      	push	{r4, lr}
   17608:	4604      	mov	r4, r0
   1760a:	6003      	str	r3, [r0, #0]
   1760c:	f000 fb58 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   17610:	2170      	movs	r1, #112	; 0x70
   17612:	4620      	mov	r0, r4
   17614:	f001 fb5c 	bl	18cd0 <operator delete(void*, unsigned int)>
   17618:	4620      	mov	r0, r4
   1761a:	bd10      	pop	{r4, pc}
   1761c:	20002ca4 	.word	0x20002ca4

00017620 <Fw::InputComPort::InputComPort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputComPort ::
   17620:	b510      	push	{r4, lr}
   17622:	4604      	mov	r4, r0
    InputComPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   17624:	f000 fb3c 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   17628:	4a02      	ldr	r2, [pc, #8]	; (17634 <Fw::InputComPort::InputComPort()+0x14>)
   1762a:	2300      	movs	r3, #0
  {

  }
   1762c:	4620      	mov	r0, r4
      m_func(nullptr)
   1762e:	6022      	str	r2, [r4, #0]
   17630:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   17632:	bd10      	pop	{r4, pc}
   17634:	20002ca4 	.word	0x20002ca4

00017638 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))>:
  void InputComPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   17638:	b570      	push	{r4, r5, r6, lr}
   1763a:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   1763c:	460d      	mov	r5, r1
  {
   1763e:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   17640:	b121      	cbz	r1, 1764c <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   17642:	b14e      	cbz	r6, 17658 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))+0x20>

    this->m_comp = callComp;
   17644:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   17646:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   17648:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   1764a:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   1764c:	2143      	movs	r1, #67	; 0x43
   1764e:	4806      	ldr	r0, [pc, #24]	; (17668 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))+0x30>)
   17650:	f7e9 ffdc 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   17654:	2e00      	cmp	r6, #0
   17656:	d1f5      	bne.n	17644 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))+0xc>
   17658:	2144      	movs	r1, #68	; 0x44
   1765a:	4803      	ldr	r0, [pc, #12]	; (17668 <Fw::InputComPort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::ComBuffer&, unsigned long))+0x30>)
   1765c:	f7e9 ffd6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   17660:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   17662:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   17664:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   17666:	bd70      	pop	{r4, r5, r6, pc}
   17668:	20000718 	.word	0x20000718

0001766c <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)>:
  void InputComPort ::
    invoke(
        Fw::ComBuffer& data,
        U32 context
    )
  {
   1766c:	b570      	push	{r4, r5, r6, lr}
   1766e:	4604      	mov	r4, r0
   17670:	b082      	sub	sp, #8
   17672:	460d      	mov	r5, r1
   17674:	9201      	str	r2, [sp, #4]
#if FW_PORT_TRACING == 1
    this->trace();
   17676:	f000 fbef 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   1767a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1767c:	9b01      	ldr	r3, [sp, #4]
   1767e:	b14a      	cbz	r2, 17694 <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)+0x28>
    FW_ASSERT(this->m_func != nullptr);
   17680:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   17682:	b17e      	cbz	r6, 176a4 <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)+0x38>

    return this->m_func(this->m_comp, this->m_portNum, data, context);
   17684:	462a      	mov	r2, r5
   17686:	46b4      	mov	ip, r6
   17688:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   1768c:	b002      	add	sp, #8
   1768e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return this->m_func(this->m_comp, this->m_portNum, data, context);
   17692:	4760      	bx	ip
    FW_ASSERT(this->m_comp != nullptr);
   17694:	2155      	movs	r1, #85	; 0x55
   17696:	4807      	ldr	r0, [pc, #28]	; (176b4 <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)+0x48>)
   17698:	f7e9 ffb8 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   1769c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   1769e:	9b01      	ldr	r3, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   176a0:	2e00      	cmp	r6, #0
   176a2:	d1ef      	bne.n	17684 <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)+0x18>
   176a4:	2156      	movs	r1, #86	; 0x56
   176a6:	4803      	ldr	r0, [pc, #12]	; (176b4 <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)+0x48>)
   176a8:	9301      	str	r3, [sp, #4]
   176aa:	f7e9 ffaf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, data, context);
   176ae:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   176b0:	9b01      	ldr	r3, [sp, #4]
   176b2:	e7e7      	b.n	17684 <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)+0x18>
   176b4:	20000718 	.word	0x20000718

000176b8 <Fw::OutputComPort::OutputComPort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputComPort ::
   176b8:	b510      	push	{r4, lr}
   176ba:	4604      	mov	r4, r0
    OutputComPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   176bc:	f000 fb36 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   176c0:	4a02      	ldr	r2, [pc, #8]	; (176cc <Fw::OutputComPort::OutputComPort()+0x14>)
   176c2:	2300      	movs	r3, #0
  {

  }
   176c4:	4620      	mov	r0, r4
      m_port(nullptr)
   176c6:	6022      	str	r2, [r4, #0]
   176c8:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   176ca:	bd10      	pop	{r4, pc}
   176cc:	20002f0c 	.word	0x20002f0c

000176d0 <Fw::OutputComPort::addCallPort(Fw::InputComPort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputComPort ::
    addCallPort(InputComPort* callPort)
  {
   176d0:	b538      	push	{r3, r4, r5, lr}
   176d2:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   176d4:	460d      	mov	r5, r1
   176d6:	b121      	cbz	r1, 176e2 <Fw::OutputComPort::addCallPort(Fw::InputComPort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   176d8:	2300      	movs	r3, #0
    this->m_port = callPort;
   176da:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   176dc:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   176de:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   176e0:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   176e2:	2191      	movs	r1, #145	; 0x91
   176e4:	4801      	ldr	r0, [pc, #4]	; (176ec <Fw::OutputComPort::addCallPort(Fw::InputComPort*)+0x1c>)
   176e6:	f7e9 ff91 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   176ea:	e7f5      	b.n	176d8 <Fw::OutputComPort::addCallPort(Fw::InputComPort*)+0x8>
   176ec:	20000718 	.word	0x20000718

000176f0 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const>:
  void OutputComPort ::
    invoke(
        Fw::ComBuffer& data,
        U32 context
    ) const
  {
   176f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   176f2:	4604      	mov	r4, r0
   176f4:	b0a7      	sub	sp, #156	; 0x9c
   176f6:	460e      	mov	r6, r1
   176f8:	4615      	mov	r5, r2
#if FW_PORT_TRACING == 1
    this->trace();
   176fa:	f000 fbad 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   176fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17700:	b130      	cbz	r0, 17710 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x20>

    if (this->m_port != nullptr) {
      this->m_port->invoke(data, context);
   17702:	462a      	mov	r2, r5
   17704:	4631      	mov	r1, r6
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(data, context);
#endif
  }
   17706:	b027      	add	sp, #156	; 0x9c
   17708:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      this->m_port->invoke(data, context);
   1770c:	f7ff bfae 	b.w	1766c <Fw::InputComPort::invoke(Fw::ComBuffer&, unsigned long)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   17710:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17712:	b363      	cbz	r3, 1776e <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x7e>
    class ComPortBuffer : public Fw::SerializeBufferBase {
   17714:	a801      	add	r0, sp, #4
   17716:	4f1a      	ldr	r7, [pc, #104]	; (17780 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x90>)
   17718:	f7e8 ff12 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(data);
   1771c:	4631      	mov	r1, r6
   1771e:	a801      	add	r0, sp, #4
    class ComPortBuffer : public Fw::SerializeBufferBase {
   17720:	9701      	str	r7, [sp, #4]
      _status = _buffer.serialize(data);
   17722:	f7e9 f9f3 	bl	b0c <Fw::SerializeBufferBase::serialize(Fw::SerializeBufferBase const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17726:	b980      	cbnz	r0, 1774a <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x5a>
      _status = _buffer.serialize(context);
   17728:	4629      	mov	r1, r5
   1772a:	a801      	add	r0, sp, #4
   1772c:	f7e8 ff96 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17730:	b9b8      	cbnz	r0, 17762 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x72>
      _status = this->m_serPort->invokeSerial(_buffer);
   17732:	6e60      	ldr	r0, [r4, #100]	; 0x64
   17734:	a901      	add	r1, sp, #4
   17736:	6803      	ldr	r3, [r0, #0]
   17738:	695b      	ldr	r3, [r3, #20]
   1773a:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1773c:	b958      	cbnz	r0, 17756 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x66>
    class ComPortBuffer : public Fw::SerializeBufferBase {
   1773e:	a801      	add	r0, sp, #4
   17740:	9701      	str	r7, [sp, #4]
   17742:	f7e8 ff05 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   17746:	b027      	add	sp, #156	; 0x9c
   17748:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   1774a:	4601      	mov	r1, r0
   1774c:	22b0      	movs	r2, #176	; 0xb0
   1774e:	480d      	ldr	r0, [pc, #52]	; (17784 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x94>)
   17750:	f7e9 ff6a 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   17754:	e7e8      	b.n	17728 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x38>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17756:	4601      	mov	r1, r0
   17758:	22b6      	movs	r2, #182	; 0xb6
   1775a:	480a      	ldr	r0, [pc, #40]	; (17784 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x94>)
   1775c:	f7e9 ff64 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   17760:	e7ed      	b.n	1773e <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x4e>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17762:	4601      	mov	r1, r0
   17764:	22b3      	movs	r2, #179	; 0xb3
   17766:	4807      	ldr	r0, [pc, #28]	; (17784 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x94>)
   17768:	f7e9 ff5e 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   1776c:	e7e1      	b.n	17732 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x42>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   1776e:	21a6      	movs	r1, #166	; 0xa6
   17770:	4804      	ldr	r0, [pc, #16]	; (17784 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x94>)
   17772:	f7e9 ff4b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   17776:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17778:	2800      	cmp	r0, #0
   1777a:	d0cb      	beq.n	17714 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x24>
   1777c:	e7c1      	b.n	17702 <Fw::OutputComPort::invoke(Fw::ComBuffer&, unsigned long) const+0x12>
   1777e:	bf00      	nop
   17780:	20002d98 	.word	0x20002d98
   17784:	20000718 	.word	0x20000718

00017788 <Fw::InputComPort::init()>:
    Fw::InputPortBase::init();
   17788:	f000 bab2 	b.w	17cf0 <Fw::InputPortBase::init()>

0001778c <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
   1778c:	b570      	push	{r4, r5, r6, lr}
   1778e:	4605      	mov	r5, r0
   17790:	b0a4      	sub	sp, #144	; 0x90
   17792:	460e      	mov	r6, r1
    this->trace();
   17794:	f000 fb60 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   17798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1779a:	b343      	cbz	r3, 177ee <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x62>
    FW_ASSERT(this->m_func != nullptr);
   1779c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   1779e:	b30b      	cbz	r3, 177e4 <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x58>
    Fw::ComBuffer data;
   177a0:	a801      	add	r0, sp, #4
   177a2:	f7ff fee7 	bl	17574 <Fw::ComBuffer::ComBuffer()>
    _status = _buffer.deserialize(data);
   177a6:	a901      	add	r1, sp, #4
   177a8:	4630      	mov	r0, r6
   177aa:	f7e9 fb99 	bl	ee0 <Fw::SerializeBufferBase::deserialize(Fw::SerializeBufferBase&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   177ae:	4604      	mov	r4, r0
   177b0:	b128      	cbz	r0, 177be <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x32>
  }
   177b2:	a801      	add	r0, sp, #4
   177b4:	f7ff fec6 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
   177b8:	4620      	mov	r0, r4
   177ba:	b024      	add	sp, #144	; 0x90
   177bc:	bd70      	pop	{r4, r5, r6, pc}
    _status = _buffer.deserialize(context);
   177be:	4669      	mov	r1, sp
   177c0:	4630      	mov	r0, r6
   177c2:	f7e9 fa7d 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   177c6:	4604      	mov	r4, r0
   177c8:	2800      	cmp	r0, #0
   177ca:	d1f2      	bne.n	177b2 <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x26>
    this->m_func(this->m_comp, this->m_portNum, data, context);
   177cc:	9b00      	ldr	r3, [sp, #0]
   177ce:	aa01      	add	r2, sp, #4
   177d0:	6eee      	ldr	r6, [r5, #108]	; 0x6c
   177d2:	e9d5 0119 	ldrd	r0, r1, [r5, #100]	; 0x64
   177d6:	47b0      	blx	r6
  }
   177d8:	a801      	add	r0, sp, #4
   177da:	f7ff feb3 	bl	17544 <Fw::ComBuffer::~ComBuffer()>
   177de:	4620      	mov	r0, r4
   177e0:	b024      	add	sp, #144	; 0x90
   177e2:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(this->m_func != nullptr);
   177e4:	2167      	movs	r1, #103	; 0x67
   177e6:	4804      	ldr	r0, [pc, #16]	; (177f8 <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x6c>)
   177e8:	f7e9 ff10 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   177ec:	e7d8      	b.n	177a0 <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
    FW_ASSERT(this->m_comp != nullptr);
   177ee:	2166      	movs	r1, #102	; 0x66
   177f0:	4801      	ldr	r0, [pc, #4]	; (177f8 <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x6c>)
   177f2:	f7e9 ff0b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   177f6:	e7d1      	b.n	1779c <Fw::InputComPort::invokeSerial(Fw::SerializeBufferBase&)+0x10>
   177f8:	20000718 	.word	0x20000718

000177fc <Fw::OutputComPort::init()>:
    Fw::OutputPortBase::init();
   177fc:	f000 baa2 	b.w	17d44 <Fw::OutputPortBase::init()>

00017800 <Fw::Time::~Time()>:
    const Time ZERO_TIME = Time();

    Time::Time() : m_seconds(0), m_useconds(0), m_timeBase(TB_NONE), m_timeContext(0)  {
    }

    Time::~Time() {
   17800:	4b03      	ldr	r3, [pc, #12]	; (17810 <Fw::Time::~Time()+0x10>)
   17802:	b510      	push	{r4, lr}
   17804:	4604      	mov	r4, r0
   17806:	6003      	str	r3, [r0, #0]
   17808:	f7e8 fe98 	bl	53c <Fw::Serializable::~Serializable()>
    }
   1780c:	4620      	mov	r0, r4
   1780e:	bd10      	pop	{r4, pc}
   17810:	20003288 	.word	0x20003288

00017814 <Fw::Time::~Time()>:
    Time::~Time() {
   17814:	4b05      	ldr	r3, [pc, #20]	; (1782c <Fw::Time::~Time()+0x18>)
   17816:	b510      	push	{r4, lr}
   17818:	4604      	mov	r4, r0
   1781a:	6003      	str	r3, [r0, #0]
   1781c:	f7e8 fe8e 	bl	53c <Fw::Serializable::~Serializable()>
    }
   17820:	2110      	movs	r1, #16
   17822:	4620      	mov	r0, r4
   17824:	f001 fa54 	bl	18cd0 <operator delete(void*, unsigned int)>
   17828:	4620      	mov	r0, r4
   1782a:	bd10      	pop	{r4, pc}
   1782c:	20003288 	.word	0x20003288

00017830 <Fw::Time::serialize(Fw::SerializeBufferBase&) const>:
    bool Time::operator<=(const Time& other) const {
        Time::Comparison c = Time::compare(*this,other);
        return ((LT == c) or (EQ == c));
    }

    SerializeStatus Time::serialize(SerializeBufferBase& buffer) const {
   17830:	b538      	push	{r3, r4, r5, lr}
   17832:	460d      	mov	r5, r1
   17834:	4604      	mov	r4, r0
        // serialize members
        SerializeStatus stat = Fw::FW_SERIALIZE_OK;
#if FW_USE_TIME_BASE
        stat = buffer.serialize(static_cast<FwTimeBaseStoreType>(this->m_timeBase));
   17836:	8981      	ldrh	r1, [r0, #12]
   17838:	4628      	mov	r0, r5
   1783a:	f7e8 fec5 	bl	5c8 <Fw::SerializeBufferBase::serialize(unsigned short)>
        if (stat != FW_SERIALIZE_OK) {
   1783e:	b100      	cbz	r0, 17842 <Fw::Time::serialize(Fw::SerializeBufferBase&) const+0x12>
        if (stat != FW_SERIALIZE_OK) {
            return stat;
        }

        return buffer.serialize(this->m_useconds);
    }
   17840:	bd38      	pop	{r3, r4, r5, pc}
        stat = buffer.serialize(this->m_timeContext);
   17842:	7ba1      	ldrb	r1, [r4, #14]
   17844:	4628      	mov	r0, r5
   17846:	f7e8 fe85 	bl	554 <Fw::SerializeBufferBase::serialize(unsigned char)>
        if (stat != FW_SERIALIZE_OK) {
   1784a:	2800      	cmp	r0, #0
   1784c:	d1f8      	bne.n	17840 <Fw::Time::serialize(Fw::SerializeBufferBase&) const+0x10>
        stat = buffer.serialize(this->m_seconds);
   1784e:	6861      	ldr	r1, [r4, #4]
   17850:	4628      	mov	r0, r5
   17852:	f7e8 ff03 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        if (stat != FW_SERIALIZE_OK) {
   17856:	2800      	cmp	r0, #0
   17858:	d1f2      	bne.n	17840 <Fw::Time::serialize(Fw::SerializeBufferBase&) const+0x10>
        return buffer.serialize(this->m_useconds);
   1785a:	68a1      	ldr	r1, [r4, #8]
   1785c:	4628      	mov	r0, r5
    }
   1785e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return buffer.serialize(this->m_useconds);
   17862:	f7e8 befb 	b.w	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
   17866:	bf00      	nop

00017868 <Fw::Time::deserialize(Fw::SerializeBufferBase&)>:

    SerializeStatus Time::deserialize(SerializeBufferBase& buffer) {
   17868:	b530      	push	{r4, r5, lr}
   1786a:	460c      	mov	r4, r1
   1786c:	b083      	sub	sp, #12
   1786e:	4605      	mov	r5, r0

        SerializeStatus stat = Fw::FW_SERIALIZE_OK;
#if FW_USE_TIME_BASE
        FwTimeBaseStoreType deSer;

        stat = buffer.deserialize(deSer);
   17870:	f10d 0106 	add.w	r1, sp, #6
   17874:	4620      	mov	r0, r4
   17876:	f7e9 f9df 	bl	c38 <Fw::SerializeBufferBase::deserialize(unsigned short&)>
        if (stat != FW_SERIALIZE_OK) {
   1787a:	b108      	cbz	r0, 17880 <Fw::Time::deserialize(Fw::SerializeBufferBase&)+0x18>
        if (stat != FW_SERIALIZE_OK) {
            return stat;
        }

        return buffer.deserialize(this->m_useconds);
    }
   1787c:	b003      	add	sp, #12
   1787e:	bd30      	pop	{r4, r5, pc}
        this->m_timeBase = static_cast<TimeBase>(deSer);
   17880:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        stat = buffer.deserialize(this->m_timeContext);
   17884:	f105 010e 	add.w	r1, r5, #14
   17888:	4620      	mov	r0, r4
        this->m_timeBase = static_cast<TimeBase>(deSer);
   1788a:	81ab      	strh	r3, [r5, #12]
        stat = buffer.deserialize(this->m_timeContext);
   1788c:	f7e9 f9a2 	bl	bd4 <Fw::SerializeBufferBase::deserialize(unsigned char&)>
        if (stat != FW_SERIALIZE_OK) {
   17890:	2800      	cmp	r0, #0
   17892:	d1f3      	bne.n	1787c <Fw::Time::deserialize(Fw::SerializeBufferBase&)+0x14>
        stat = buffer.deserialize(this->m_seconds);
   17894:	1d29      	adds	r1, r5, #4
   17896:	4620      	mov	r0, r4
   17898:	f7e9 fa12 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (stat != FW_SERIALIZE_OK) {
   1789c:	2800      	cmp	r0, #0
   1789e:	d1ed      	bne.n	1787c <Fw::Time::deserialize(Fw::SerializeBufferBase&)+0x14>
        return buffer.deserialize(this->m_useconds);
   178a0:	f105 0108 	add.w	r1, r5, #8
   178a4:	4620      	mov	r0, r4
   178a6:	f7e9 fa0b 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
    }
   178aa:	b003      	add	sp, #12
   178ac:	bd30      	pop	{r4, r5, pc}
   178ae:	bf00      	nop

000178b0 <Fw::Time::Time()>:
    Time::Time() : m_seconds(0), m_useconds(0), m_timeBase(TB_NONE), m_timeContext(0)  {
   178b0:	b510      	push	{r4, lr}
   178b2:	4604      	mov	r4, r0
   178b4:	f7e8 fe3c 	bl	530 <Fw::Serializable::Serializable()>
   178b8:	2300      	movs	r3, #0
   178ba:	4a04      	ldr	r2, [pc, #16]	; (178cc <Fw::Time::Time()+0x1c>)
    }
   178bc:	4620      	mov	r0, r4
    Time::Time() : m_seconds(0), m_useconds(0), m_timeBase(TB_NONE), m_timeContext(0)  {
   178be:	60a3      	str	r3, [r4, #8]
   178c0:	81a3      	strh	r3, [r4, #12]
   178c2:	73a3      	strb	r3, [r4, #14]
   178c4:	e9c4 2300 	strd	r2, r3, [r4]
    }
   178c8:	bd10      	pop	{r4, pc}
   178ca:	bf00      	nop
   178cc:	20003288 	.word	0x20003288

000178d0 <Fw::Time::Time(Fw::Time const&)>:
    Time::Time(const Time& other) : Serializable() {
   178d0:	b538      	push	{r3, r4, r5, lr}
   178d2:	460d      	mov	r5, r1
   178d4:	4604      	mov	r4, r0
   178d6:	f7e8 fe2b 	bl	530 <Fw::Serializable::Serializable()>
   178da:	4906      	ldr	r1, [pc, #24]	; (178f4 <Fw::Time::Time(Fw::Time const&)+0x24>)
        this->set(other.m_timeBase,other.m_timeContext,other.m_seconds,other.m_useconds);
   178dc:	7bab      	ldrb	r3, [r5, #14]
    }
   178de:	4620      	mov	r0, r4
        this->set(other.m_timeBase,other.m_timeContext,other.m_seconds,other.m_useconds);
   178e0:	68aa      	ldr	r2, [r5, #8]
        this->m_timeContext = context;
   178e2:	73a3      	strb	r3, [r4, #14]
        this->set(other.m_timeBase,other.m_timeContext,other.m_seconds,other.m_useconds);
   178e4:	686b      	ldr	r3, [r5, #4]
    Time::Time(const Time& other) : Serializable() {
   178e6:	6021      	str	r1, [r4, #0]
        this->m_seconds = seconds;
   178e8:	6063      	str	r3, [r4, #4]
        this->m_timeBase = timeBase;
   178ea:	89ab      	ldrh	r3, [r5, #12]
        this->m_useconds = useconds;
   178ec:	60a2      	str	r2, [r4, #8]
        this->m_timeBase = timeBase;
   178ee:	81a3      	strh	r3, [r4, #12]
    }
   178f0:	bd38      	pop	{r3, r4, r5, pc}
   178f2:	bf00      	nop
   178f4:	20003288 	.word	0x20003288

000178f8 <Fw::Time::Time(TimeBase, unsigned long, unsigned long)>:
    Time::Time(TimeBase timeBase, U32 seconds, U32 useconds) {
   178f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   178fa:	4604      	mov	r4, r0
   178fc:	4615      	mov	r5, r2
   178fe:	461e      	mov	r6, r3
   17900:	460f      	mov	r7, r1
   17902:	f7e8 fe15 	bl	530 <Fw::Serializable::Serializable()>
   17906:	4a04      	ldr	r2, [pc, #16]	; (17918 <Fw::Time::Time(TimeBase, unsigned long, unsigned long)+0x20>)
        this->m_timeContext = context;
   17908:	2300      	movs	r3, #0
    }
   1790a:	4620      	mov	r0, r4
        this->m_timeBase = timeBase;
   1790c:	81a7      	strh	r7, [r4, #12]
    Time::Time(TimeBase timeBase, U32 seconds, U32 useconds) {
   1790e:	6022      	str	r2, [r4, #0]
        this->m_useconds = useconds;
   17910:	60a6      	str	r6, [r4, #8]
        this->m_timeContext = context;
   17912:	73a3      	strb	r3, [r4, #14]
        this->m_seconds = seconds;
   17914:	6065      	str	r5, [r4, #4]
    }
   17916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17918:	20003288 	.word	0x20003288

0001791c <Fw::Time::set(TimeBase, unsigned long, unsigned long)>:
        this->m_timeBase = timeBase;
   1791c:	8181      	strh	r1, [r0, #12]
        this->m_seconds = seconds;
   1791e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    }
   17922:	4770      	bx	lr

00017924 <Fw::Time::operator=(Fw::Time const&)>:
        this->m_timeBase = other.m_timeBase;
   17924:	898a      	ldrh	r2, [r1, #12]
   17926:	8182      	strh	r2, [r0, #12]
        this->m_timeContext = other.m_timeContext;
   17928:	7b8a      	ldrb	r2, [r1, #14]
    Time& Time::operator=(const Time& other) {
   1792a:	b410      	push	{r4}
        this->m_timeContext = other.m_timeContext;
   1792c:	7382      	strb	r2, [r0, #14]
        this->m_seconds = other.m_seconds;
   1792e:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
   17932:	e9c0 2401 	strd	r2, r4, [r0, #4]
    }
   17936:	f85d 4b04 	ldr.w	r4, [sp], #4
   1793a:	4770      	bx	lr

0001793c <Fw::Time::operator==(Fw::Time const&) const>:
          const Time &time1,
          const Time &time2
      )
    {
#if FW_USE_TIME_BASE
      if (time1.getTimeBase() != time2.getTimeBase()) {
   1793c:	8982      	ldrh	r2, [r0, #12]
   1793e:	898b      	ldrh	r3, [r1, #12]
   17940:	429a      	cmp	r2, r3
   17942:	d110      	bne.n	17966 <Fw::Time::operator==(Fw::Time const&) const+0x2a>
          return INCOMPARABLE;
      }
#endif
#if FW_USE_TIME_CONTEXT
      if (time1.getContext() != time2.getContext()) {
   17944:	7b82      	ldrb	r2, [r0, #14]
   17946:	7b8b      	ldrb	r3, [r1, #14]
   17948:	429a      	cmp	r2, r3
   1794a:	d10c      	bne.n	17966 <Fw::Time::operator==(Fw::Time const&) const+0x2a>
   1794c:	6842      	ldr	r2, [r0, #4]
   1794e:	684b      	ldr	r3, [r1, #4]
      const U32 s1 = time1.getSeconds();
      const U32 s2 = time2.getSeconds();
      const U32 us1 = time1.getUSeconds();
      const U32 us2 = time2.getUSeconds();

      if (s1 < s2) {
   17950:	429a      	cmp	r2, r3
   17952:	d308      	bcc.n	17966 <Fw::Time::operator==(Fw::Time const&) const+0x2a>
        return LT;
      } else if (s1 > s2) {
   17954:	d807      	bhi.n	17966 <Fw::Time::operator==(Fw::Time const&) const+0x2a>
   17956:	6882      	ldr	r2, [r0, #8]
   17958:	688b      	ldr	r3, [r1, #8]
        return GT;
      } else if (us1 < us2) {
   1795a:	429a      	cmp	r2, r3
   1795c:	d303      	bcc.n	17966 <Fw::Time::operator==(Fw::Time const&) const+0x2a>
        return (Time::compare(*this,other) == EQ);
   1795e:	bf94      	ite	ls
   17960:	2001      	movls	r0, #1
   17962:	2000      	movhi	r0, #0
   17964:	4770      	bx	lr
   17966:	2000      	movs	r0, #0
    }
   17968:	4770      	bx	lr
   1796a:	bf00      	nop

0001796c <Fw::Time::getSeconds() const>:
    }
   1796c:	6840      	ldr	r0, [r0, #4]
   1796e:	4770      	bx	lr

00017970 <Fw::Time::getUSeconds() const>:
    }
   17970:	6880      	ldr	r0, [r0, #8]
   17972:	4770      	bx	lr

00017974 <Fw::Time::getTimeBase() const>:
    }
   17974:	8980      	ldrh	r0, [r0, #12]
   17976:	4770      	bx	lr

00017978 <_GLOBAL__sub_I__ZN2Fw9ZERO_TIMEE>:
        os << "(" << val.getTimeBase() << "," << val.getUSeconds() << "," << val.getSeconds() << ")";
        return os;
    }
#endif

}
   17978:	b510      	push	{r4, lr}
    Time::Time() : m_seconds(0), m_useconds(0), m_timeBase(TB_NONE), m_timeContext(0)  {
   1797a:	4c09      	ldr	r4, [pc, #36]	; (179a0 <_GLOBAL__sub_I__ZN2Fw9ZERO_TIMEE+0x28>)
   1797c:	4620      	mov	r0, r4
   1797e:	f7e8 fdd7 	bl	530 <Fw::Serializable::Serializable()>
   17982:	2300      	movs	r3, #0
   17984:	4807      	ldr	r0, [pc, #28]	; (179a4 <_GLOBAL__sub_I__ZN2Fw9ZERO_TIMEE+0x2c>)
   17986:	60a3      	str	r3, [r4, #8]
   17988:	81a3      	strh	r3, [r4, #12]
   1798a:	73a3      	strb	r3, [r4, #14]
    const Time ZERO_TIME = Time();
   1798c:	4a06      	ldr	r2, [pc, #24]	; (179a8 <_GLOBAL__sub_I__ZN2Fw9ZERO_TIMEE+0x30>)
   1798e:	4907      	ldr	r1, [pc, #28]	; (179ac <_GLOBAL__sub_I__ZN2Fw9ZERO_TIMEE+0x34>)
    Time::Time() : m_seconds(0), m_useconds(0), m_timeBase(TB_NONE), m_timeContext(0)  {
   17990:	e9c4 0300 	strd	r0, r3, [r4]
    const Time ZERO_TIME = Time();
   17994:	4620      	mov	r0, r4
}
   17996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    const Time ZERO_TIME = Time();
   1799a:	f002 bcf1 	b.w	1a380 <__aeabi_atexit>
   1799e:	bf00      	nop
   179a0:	2000c9b0 	.word	0x2000c9b0
   179a4:	20003288 	.word	0x20003288
   179a8:	20005a58 	.word	0x20005a58
   179ac:	00017801 	.word	0x00017801

000179b0 <Fw::TimeInterval::deserialize(Fw::SerializeBufferBase&)>:
    SerializeStatus TimeInterval::deserialize(SerializeBufferBase& buffer) {
   179b0:	b538      	push	{r3, r4, r5, lr}
   179b2:	460c      	mov	r4, r1
   179b4:	4605      	mov	r5, r0
        stat = buffer.deserialize(this->m_seconds);
   179b6:	1d01      	adds	r1, r0, #4
   179b8:	4620      	mov	r0, r4
   179ba:	f7e9 f981 	bl	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>
        if (stat != FW_SERIALIZE_OK) {
   179be:	b100      	cbz	r0, 179c2 <Fw::TimeInterval::deserialize(Fw::SerializeBufferBase&)+0x12>
    }
   179c0:	bd38      	pop	{r3, r4, r5, pc}
        return buffer.deserialize(this->m_useconds);
   179c2:	f105 0108 	add.w	r1, r5, #8
   179c6:	4620      	mov	r0, r4
    }
   179c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return buffer.deserialize(this->m_useconds);
   179cc:	f7e9 b978 	b.w	cc0 <Fw::SerializeBufferBase::deserialize(unsigned long&)>

000179d0 <Fw::TimeInterval::~TimeInterval()>:
   179d0:	4b03      	ldr	r3, [pc, #12]	; (179e0 <Fw::TimeInterval::~TimeInterval()+0x10>)
   179d2:	b510      	push	{r4, lr}
   179d4:	4604      	mov	r4, r0
   179d6:	6003      	str	r3, [r0, #0]
   179d8:	f7e8 fdb0 	bl	53c <Fw::Serializable::~Serializable()>
   179dc:	4620      	mov	r0, r4
   179de:	bd10      	pop	{r4, pc}
   179e0:	20002d60 	.word	0x20002d60

000179e4 <Fw::TimeInterval::~TimeInterval()>:
   179e4:	4b05      	ldr	r3, [pc, #20]	; (179fc <Fw::TimeInterval::~TimeInterval()+0x18>)
   179e6:	b510      	push	{r4, lr}
   179e8:	4604      	mov	r4, r0
   179ea:	6003      	str	r3, [r0, #0]
   179ec:	f7e8 fda6 	bl	53c <Fw::Serializable::~Serializable()>
   179f0:	210c      	movs	r1, #12
   179f2:	4620      	mov	r0, r4
   179f4:	f001 f96c 	bl	18cd0 <operator delete(void*, unsigned int)>
   179f8:	4620      	mov	r0, r4
   179fa:	bd10      	pop	{r4, pc}
   179fc:	20002d60 	.word	0x20002d60

00017a00 <Fw::TimeInterval::serialize(Fw::SerializeBufferBase&) const>:
    SerializeStatus TimeInterval::serialize(SerializeBufferBase& buffer) const {
   17a00:	b538      	push	{r3, r4, r5, lr}
   17a02:	460c      	mov	r4, r1
   17a04:	4605      	mov	r5, r0
        stat = buffer.serialize(this->m_seconds);
   17a06:	6841      	ldr	r1, [r0, #4]
   17a08:	4620      	mov	r0, r4
   17a0a:	f7e8 fe27 	bl	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
        if (stat != FW_SERIALIZE_OK) {
   17a0e:	b100      	cbz	r0, 17a12 <Fw::TimeInterval::serialize(Fw::SerializeBufferBase&) const+0x12>
    }
   17a10:	bd38      	pop	{r3, r4, r5, pc}
        return buffer.serialize(this->m_useconds);
   17a12:	68a9      	ldr	r1, [r5, #8]
   17a14:	4620      	mov	r0, r4
    }
   17a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return buffer.serialize(this->m_useconds);
   17a1a:	f7e8 be1f 	b.w	65c <Fw::SerializeBufferBase::serialize(unsigned long)>
   17a1e:	bf00      	nop

00017a20 <Fw::TimeInterval::TimeInterval(Fw::TimeInterval const&)>:
    TimeInterval::TimeInterval(const TimeInterval& other) : Serializable() {
   17a20:	b538      	push	{r3, r4, r5, lr}
   17a22:	460d      	mov	r5, r1
   17a24:	4604      	mov	r4, r0
   17a26:	f7e8 fd83 	bl	530 <Fw::Serializable::Serializable()>
   17a2a:	4904      	ldr	r1, [pc, #16]	; (17a3c <Fw::TimeInterval::TimeInterval(Fw::TimeInterval const&)+0x1c>)
    }
   17a2c:	4620      	mov	r0, r4
        this->m_seconds = seconds;
   17a2e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   17a32:	e9c4 1200 	strd	r1, r2, [r4]
        this->m_useconds = useconds;
   17a36:	60a3      	str	r3, [r4, #8]
    }
   17a38:	bd38      	pop	{r3, r4, r5, pc}
   17a3a:	bf00      	nop
   17a3c:	20002d60 	.word	0x20002d60

00017a40 <Fw::TimeInterval::set(unsigned long, unsigned long)>:
        this->m_useconds = useconds;
   17a40:	e9c0 1201 	strd	r1, r2, [r0, #4]
    }
   17a44:	4770      	bx	lr
   17a46:	bf00      	nop

00017a48 <Fw::TimeInterval::getSeconds() const>:
    }
   17a48:	6840      	ldr	r0, [r0, #4]
   17a4a:	4770      	bx	lr

00017a4c <Fw::TimeInterval::getUSeconds() const>:
    }
   17a4c:	6880      	ldr	r0, [r0, #8]
   17a4e:	4770      	bx	lr

00017a50 <Fw::(anonymous namespace)::TimePortBuffer::getBuffCapacity() const>:

      public:

        Fw::Serializable::SizeType getBuffCapacity() const {
          return InputTimePort::SERIALIZED_SIZE;
        }
   17a50:	200b      	movs	r0, #11
   17a52:	4770      	bx	lr

00017a54 <Fw::(anonymous namespace)::TimePortBuffer::getBuffAddr()>:

        U8* getBuffAddr() {
          return m_buff;
        }
   17a54:	300c      	adds	r0, #12
   17a56:	4770      	bx	lr

00017a58 <Fw::(anonymous namespace)::TimePortBuffer::~TimePortBuffer()>:
    class TimePortBuffer : public Fw::SerializeBufferBase {
   17a58:	4b03      	ldr	r3, [pc, #12]	; (17a68 <Fw::(anonymous namespace)::TimePortBuffer::~TimePortBuffer()+0x10>)
   17a5a:	b510      	push	{r4, lr}
   17a5c:	4604      	mov	r4, r0
   17a5e:	6003      	str	r3, [r0, #0]
   17a60:	f7e8 fd76 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   17a64:	4620      	mov	r0, r4
   17a66:	bd10      	pop	{r4, pc}
   17a68:	20002dec 	.word	0x20002dec

00017a6c <Fw::(anonymous namespace)::TimePortBuffer::~TimePortBuffer()>:
   17a6c:	4b05      	ldr	r3, [pc, #20]	; (17a84 <Fw::(anonymous namespace)::TimePortBuffer::~TimePortBuffer()+0x18>)
   17a6e:	b510      	push	{r4, lr}
   17a70:	4604      	mov	r4, r0
   17a72:	6003      	str	r3, [r0, #0]
   17a74:	f7e8 fd6c 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
   17a78:	2118      	movs	r1, #24
   17a7a:	4620      	mov	r0, r4
   17a7c:	f001 f928 	bl	18cd0 <operator delete(void*, unsigned int)>
   17a80:	4620      	mov	r0, r4
   17a82:	bd10      	pop	{r4, pc}
   17a84:	20002dec 	.word	0x20002dec

00017a88 <Fw::OutputTimePort::~OutputTimePort()>:

  };

  //! Output Time port
  //! Time port
  class OutputTimePort :
   17a88:	4b03      	ldr	r3, [pc, #12]	; (17a98 <Fw::OutputTimePort::~OutputTimePort()+0x10>)
   17a8a:	b510      	push	{r4, lr}
   17a8c:	4604      	mov	r4, r0
   17a8e:	6003      	str	r3, [r0, #0]
   17a90:	f000 f934 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   17a94:	4620      	mov	r0, r4
   17a96:	bd10      	pop	{r4, pc}
   17a98:	20002fe8 	.word	0x20002fe8

00017a9c <Fw::OutputTimePort::~OutputTimePort()>:
   17a9c:	4b05      	ldr	r3, [pc, #20]	; (17ab4 <Fw::OutputTimePort::~OutputTimePort()+0x18>)
   17a9e:	b510      	push	{r4, lr}
   17aa0:	4604      	mov	r4, r0
   17aa2:	6003      	str	r3, [r0, #0]
   17aa4:	f000 f92a 	bl	17cfc <Fw::OutputPortBase::~OutputPortBase()>
   17aa8:	216c      	movs	r1, #108	; 0x6c
   17aaa:	4620      	mov	r0, r4
   17aac:	f001 f910 	bl	18cd0 <operator delete(void*, unsigned int)>
   17ab0:	4620      	mov	r0, r4
   17ab2:	bd10      	pop	{r4, pc}
   17ab4:	20002fe8 	.word	0x20002fe8

00017ab8 <Fw::InputTimePort::~InputTimePort()>:
  class InputTimePort :
   17ab8:	4b03      	ldr	r3, [pc, #12]	; (17ac8 <Fw::InputTimePort::~InputTimePort()+0x10>)
   17aba:	b510      	push	{r4, lr}
   17abc:	4604      	mov	r4, r0
   17abe:	6003      	str	r3, [r0, #0]
   17ac0:	f000 f8fe 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   17ac4:	4620      	mov	r0, r4
   17ac6:	bd10      	pop	{r4, pc}
   17ac8:	20002ed0 	.word	0x20002ed0

00017acc <Fw::InputTimePort::~InputTimePort()>:
   17acc:	4b05      	ldr	r3, [pc, #20]	; (17ae4 <Fw::InputTimePort::~InputTimePort()+0x18>)
   17ace:	b510      	push	{r4, lr}
   17ad0:	4604      	mov	r4, r0
   17ad2:	6003      	str	r3, [r0, #0]
   17ad4:	f000 f8f4 	bl	17cc0 <Fw::InputPortBase::~InputPortBase()>
   17ad8:	2170      	movs	r1, #112	; 0x70
   17ada:	4620      	mov	r0, r4
   17adc:	f001 f8f8 	bl	18cd0 <operator delete(void*, unsigned int)>
   17ae0:	4620      	mov	r0, r4
   17ae2:	bd10      	pop	{r4, pc}
   17ae4:	20002ed0 	.word	0x20002ed0

00017ae8 <Fw::InputTimePort::InputTimePort()>:

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputTimePort ::
   17ae8:	b510      	push	{r4, lr}
   17aea:	4604      	mov	r4, r0
    InputTimePort() :
      Fw::InputPortBase(),
      m_func(nullptr)
   17aec:	f000 f8d8 	bl	17ca0 <Fw::InputPortBase::InputPortBase()>
   17af0:	4a02      	ldr	r2, [pc, #8]	; (17afc <Fw::InputTimePort::InputTimePort()+0x14>)
   17af2:	2300      	movs	r3, #0
  {

  }
   17af4:	4620      	mov	r0, r4
      m_func(nullptr)
   17af6:	6022      	str	r2, [r4, #0]
   17af8:	66e3      	str	r3, [r4, #108]	; 0x6c
  }
   17afa:	bd10      	pop	{r4, pc}
   17afc:	20002ed0 	.word	0x20002ed0

00017b00 <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))>:
  void InputTimePort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
   17b00:	b570      	push	{r4, r5, r6, lr}
   17b02:	4604      	mov	r4, r0
    FW_ASSERT(callComp != nullptr);
   17b04:	460d      	mov	r5, r1
  {
   17b06:	4616      	mov	r6, r2
    FW_ASSERT(callComp != nullptr);
   17b08:	b121      	cbz	r1, 17b14 <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))+0x14>
    FW_ASSERT(funcPtr != nullptr);
   17b0a:	b14e      	cbz	r6, 17b20 <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))+0x20>

    this->m_comp = callComp;
   17b0c:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   17b0e:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   17b10:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   17b12:	bd70      	pop	{r4, r5, r6, pc}
    FW_ASSERT(callComp != nullptr);
   17b14:	2143      	movs	r1, #67	; 0x43
   17b16:	4806      	ldr	r0, [pc, #24]	; (17b30 <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))+0x30>)
   17b18:	f7e9 fd78 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(funcPtr != nullptr);
   17b1c:	2e00      	cmp	r6, #0
   17b1e:	d1f5      	bne.n	17b0c <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))+0xc>
   17b20:	2144      	movs	r1, #68	; 0x44
   17b22:	4803      	ldr	r0, [pc, #12]	; (17b30 <Fw::InputTimePort::addCallComp(Fw::PassiveComponentBase*, void (*)(Fw::PassiveComponentBase*, long, Fw::Time&))+0x30>)
   17b24:	f7e9 fd72 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    this->m_comp = callComp;
   17b28:	6665      	str	r5, [r4, #100]	; 0x64
    this->m_func = funcPtr;
   17b2a:	66e6      	str	r6, [r4, #108]	; 0x6c
    this->m_connObj = callComp;
   17b2c:	65e5      	str	r5, [r4, #92]	; 0x5c
  }
   17b2e:	bd70      	pop	{r4, r5, r6, pc}
   17b30:	2000080c 	.word	0x2000080c

00017b34 <Fw::InputTimePort::invoke(Fw::Time&)>:

  void InputTimePort ::
    invoke(Fw::Time& time)
  {
   17b34:	b510      	push	{r4, lr}
   17b36:	4604      	mov	r4, r0
   17b38:	b082      	sub	sp, #8
   17b3a:	9101      	str	r1, [sp, #4]
#if FW_PORT_TRACING == 1
    this->trace();
   17b3c:	f000 f98c 	bl	17e58 <Fw::PortBase::trace() const>
#endif

    FW_ASSERT(this->m_comp != nullptr);
   17b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17b42:	9a01      	ldr	r2, [sp, #4]
   17b44:	b13b      	cbz	r3, 17b56 <Fw::InputTimePort::invoke(Fw::Time&)+0x22>
    FW_ASSERT(this->m_func != nullptr);
   17b46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   17b48:	b16b      	cbz	r3, 17b66 <Fw::InputTimePort::invoke(Fw::Time&)+0x32>

    return this->m_func(this->m_comp, this->m_portNum, time);
   17b4a:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   17b4e:	b002      	add	sp, #8
   17b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, time);
   17b54:	4718      	bx	r3
    FW_ASSERT(this->m_comp != nullptr);
   17b56:	2152      	movs	r1, #82	; 0x52
   17b58:	4809      	ldr	r0, [pc, #36]	; (17b80 <Fw::InputTimePort::invoke(Fw::Time&)+0x4c>)
   17b5a:	f7e9 fd57 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   17b5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    FW_ASSERT(this->m_comp != nullptr);
   17b60:	9a01      	ldr	r2, [sp, #4]
    FW_ASSERT(this->m_func != nullptr);
   17b62:	2b00      	cmp	r3, #0
   17b64:	d1f1      	bne.n	17b4a <Fw::InputTimePort::invoke(Fw::Time&)+0x16>
   17b66:	2153      	movs	r1, #83	; 0x53
   17b68:	4805      	ldr	r0, [pc, #20]	; (17b80 <Fw::InputTimePort::invoke(Fw::Time&)+0x4c>)
   17b6a:	9201      	str	r2, [sp, #4]
   17b6c:	f7e9 fd4e 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    return this->m_func(this->m_comp, this->m_portNum, time);
   17b70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   17b72:	9a01      	ldr	r2, [sp, #4]
   17b74:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
  }
   17b78:	b002      	add	sp, #8
   17b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->m_func(this->m_comp, this->m_portNum, time);
   17b7e:	4718      	bx	r3
   17b80:	2000080c 	.word	0x2000080c

00017b84 <Fw::OutputTimePort::OutputTimePort()>:

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputTimePort ::
   17b84:	b510      	push	{r4, lr}
   17b86:	4604      	mov	r4, r0
    OutputTimePort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
   17b88:	f000 f8d0 	bl	17d2c <Fw::OutputPortBase::OutputPortBase()>
   17b8c:	4a02      	ldr	r2, [pc, #8]	; (17b98 <Fw::OutputTimePort::OutputTimePort()+0x14>)
   17b8e:	2300      	movs	r3, #0
  {

  }
   17b90:	4620      	mov	r0, r4
      m_port(nullptr)
   17b92:	6022      	str	r2, [r4, #0]
   17b94:	66a3      	str	r3, [r4, #104]	; 0x68
  }
   17b96:	bd10      	pop	{r4, pc}
   17b98:	20002fe8 	.word	0x20002fe8

00017b9c <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)>:
    Fw::OutputPortBase::init();
  }

  void OutputTimePort ::
    addCallPort(InputTimePort* callPort)
  {
   17b9c:	b538      	push	{r3, r4, r5, lr}
   17b9e:	4604      	mov	r4, r0
    FW_ASSERT(callPort != nullptr);
   17ba0:	460d      	mov	r5, r1
   17ba2:	b121      	cbz	r1, 17bae <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)+0x12>

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
   17ba4:	2300      	movs	r3, #0
    this->m_port = callPort;
   17ba6:	66a5      	str	r5, [r4, #104]	; 0x68
    this->m_connObj = callPort;
   17ba8:	65e5      	str	r5, [r4, #92]	; 0x5c
    this->m_serPort = nullptr;
   17baa:	6663      	str	r3, [r4, #100]	; 0x64
#endif
  }
   17bac:	bd38      	pop	{r3, r4, r5, pc}
    FW_ASSERT(callPort != nullptr);
   17bae:	2188      	movs	r1, #136	; 0x88
   17bb0:	4801      	ldr	r0, [pc, #4]	; (17bb8 <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)+0x1c>)
   17bb2:	f7e9 fd2b 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   17bb6:	e7f5      	b.n	17ba4 <Fw::OutputTimePort::addCallPort(Fw::InputTimePort*)+0x8>
   17bb8:	2000080c 	.word	0x2000080c

00017bbc <Fw::OutputTimePort::invoke(Fw::Time&) const>:

  void OutputTimePort ::
    invoke(Fw::Time& time) const
  {
   17bbc:	b570      	push	{r4, r5, r6, lr}
   17bbe:	4604      	mov	r4, r0
   17bc0:	b086      	sub	sp, #24
   17bc2:	460d      	mov	r5, r1
#if FW_PORT_TRACING == 1
    this->trace();
   17bc4:	f000 f948 	bl	17e58 <Fw::PortBase::trace() const>
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   17bc8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17bca:	b128      	cbz	r0, 17bd8 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x1c>

    if (this->m_port != nullptr) {
      this->m_port->invoke(time);
   17bcc:	4629      	mov	r1, r5
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(time);
#endif
  }
   17bce:	b006      	add	sp, #24
   17bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      this->m_port->invoke(time);
   17bd4:	f7ff bfae 	b.w	17b34 <Fw::InputTimePort::invoke(Fw::Time&)>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   17bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17bda:	b30b      	cbz	r3, 17c20 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x64>
    class TimePortBuffer : public Fw::SerializeBufferBase {
   17bdc:	4e14      	ldr	r6, [pc, #80]	; (17c30 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x74>)
   17bde:	4668      	mov	r0, sp
   17be0:	f7e8 fcae 	bl	540 <Fw::SerializeBufferBase::SerializeBufferBase()>
      _status = _buffer.serialize(time);
   17be4:	4629      	mov	r1, r5
   17be6:	4668      	mov	r0, sp
    class TimePortBuffer : public Fw::SerializeBufferBase {
   17be8:	9600      	str	r6, [sp, #0]
      _status = _buffer.serialize(time);
   17bea:	f7e8 ff89 	bl	b00 <Fw::SerializeBufferBase::serialize(Fw::Serializable const&)>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17bee:	b958      	cbnz	r0, 17c08 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x4c>
      _status = this->m_serPort->invokeSerial(_buffer);
   17bf0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   17bf2:	4669      	mov	r1, sp
   17bf4:	6803      	ldr	r3, [r0, #0]
   17bf6:	695b      	ldr	r3, [r3, #20]
   17bf8:	4798      	blx	r3
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17bfa:	b958      	cbnz	r0, 17c14 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x58>
    class TimePortBuffer : public Fw::SerializeBufferBase {
   17bfc:	4668      	mov	r0, sp
   17bfe:	9600      	str	r6, [sp, #0]
   17c00:	f7e8 fca6 	bl	550 <Fw::SerializeBufferBase::~SerializeBufferBase()>
  }
   17c04:	b006      	add	sp, #24
   17c06:	bd70      	pop	{r4, r5, r6, pc}
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17c08:	4601      	mov	r1, r0
   17c0a:	22a4      	movs	r2, #164	; 0xa4
   17c0c:	4809      	ldr	r0, [pc, #36]	; (17c34 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x78>)
   17c0e:	f7e9 fd0b 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   17c12:	e7ed      	b.n	17bf0 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x34>
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
   17c14:	4601      	mov	r1, r0
   17c16:	22a7      	movs	r2, #167	; 0xa7
   17c18:	4806      	ldr	r0, [pc, #24]	; (17c34 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x78>)
   17c1a:	f7e9 fd05 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
   17c1e:	e7ed      	b.n	17bfc <Fw::OutputTimePort::invoke(Fw::Time&) const+0x40>
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));
   17c20:	219a      	movs	r1, #154	; 0x9a
   17c22:	4804      	ldr	r0, [pc, #16]	; (17c34 <Fw::OutputTimePort::invoke(Fw::Time&) const+0x78>)
   17c24:	f7e9 fcf2 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    if (this->m_port != nullptr) {
   17c28:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17c2a:	2800      	cmp	r0, #0
   17c2c:	d0d6      	beq.n	17bdc <Fw::OutputTimePort::invoke(Fw::Time&) const+0x20>
   17c2e:	e7cd      	b.n	17bcc <Fw::OutputTimePort::invoke(Fw::Time&) const+0x10>
   17c30:	20002dec 	.word	0x20002dec
   17c34:	2000080c 	.word	0x2000080c

00017c38 <Fw::InputTimePort::init()>:
    Fw::InputPortBase::init();
   17c38:	f000 b85a 	b.w	17cf0 <Fw::InputPortBase::init()>

00017c3c <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)>:
  {
   17c3c:	b530      	push	{r4, r5, lr}
   17c3e:	4604      	mov	r4, r0
   17c40:	b085      	sub	sp, #20
   17c42:	460d      	mov	r5, r1
    this->trace();
   17c44:	f000 f908 	bl	17e58 <Fw::PortBase::trace() const>
    FW_ASSERT(this->m_comp != nullptr);
   17c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17c4a:	b1ab      	cbz	r3, 17c78 <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x3c>
    FW_ASSERT(this->m_func != nullptr);
   17c4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   17c4e:	b1d3      	cbz	r3, 17c86 <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x4a>
    Fw::Time time;
   17c50:	4668      	mov	r0, sp
   17c52:	f7ff fe2d 	bl	178b0 <Fw::Time::Time()>
    _status = _buffer.deserialize(time);
   17c56:	4628      	mov	r0, r5
   17c58:	4669      	mov	r1, sp
   17c5a:	f7e9 f93b 	bl	ed4 <Fw::SerializeBufferBase::deserialize(Fw::Serializable&)>
    if (_status != Fw::FW_SERIALIZE_OK) {
   17c5e:	4605      	mov	r5, r0
   17c60:	b920      	cbnz	r0, 17c6c <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x30>
    this->m_func(this->m_comp, this->m_portNum, time);
   17c62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   17c64:	466a      	mov	r2, sp
   17c66:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   17c6a:	4798      	blx	r3
  }
   17c6c:	4668      	mov	r0, sp
   17c6e:	f7ff fdc7 	bl	17800 <Fw::Time::~Time()>
   17c72:	4628      	mov	r0, r5
   17c74:	b005      	add	sp, #20
   17c76:	bd30      	pop	{r4, r5, pc}
    FW_ASSERT(this->m_comp != nullptr);
   17c78:	2163      	movs	r1, #99	; 0x63
   17c7a:	4805      	ldr	r0, [pc, #20]	; (17c90 <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x54>)
   17c7c:	f7e9 fcc6 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
    FW_ASSERT(this->m_func != nullptr);
   17c80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   17c82:	2b00      	cmp	r3, #0
   17c84:	d1e4      	bne.n	17c50 <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   17c86:	2164      	movs	r1, #100	; 0x64
   17c88:	4801      	ldr	r0, [pc, #4]	; (17c90 <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x54>)
   17c8a:	f7e9 fcbf 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   17c8e:	e7df      	b.n	17c50 <Fw::InputTimePort::invokeSerial(Fw::SerializeBufferBase&)+0x14>
   17c90:	2000080c 	.word	0x2000080c

00017c94 <Fw::OutputTimePort::init()>:
    Fw::OutputPortBase::init();
   17c94:	f000 b856 	b.w	17d44 <Fw::OutputPortBase::init()>

00017c98 <Fw::InputPortBase::getToStringFormatString()>:
    }

#if FW_OBJECT_TO_STRING == 1
    const char* InputPortBase::getToStringFormatString() {
        return "Input Port: %s %s->(%s)";
    }
   17c98:	4800      	ldr	r0, [pc, #0]	; (17c9c <Fw::InputPortBase::getToStringFormatString()+0x4>)
   17c9a:	4770      	bx	lr
   17c9c:	200007f4 	.word	0x200007f4

00017ca0 <Fw::InputPortBase::InputPortBase()>:
    InputPortBase::InputPortBase() :
   17ca0:	b510      	push	{r4, lr}
   17ca2:	4604      	mov	r4, r0
                    m_portNum(-1) {
   17ca4:	f000 f8c2 	bl	17e2c <Fw::PortBase::PortBase()>
   17ca8:	4904      	ldr	r1, [pc, #16]	; (17cbc <Fw::InputPortBase::InputPortBase()+0x1c>)
                    m_comp(nullptr),
   17caa:	2200      	movs	r2, #0
                    m_portNum(-1) {
   17cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
   17cb0:	4620      	mov	r0, r4
                    m_portNum(-1) {
   17cb2:	6021      	str	r1, [r4, #0]
   17cb4:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
    }
   17cb8:	bd10      	pop	{r4, pc}
   17cba:	bf00      	nop
   17cbc:	20002eb0 	.word	0x20002eb0

00017cc0 <Fw::InputPortBase::~InputPortBase()>:
    InputPortBase::~InputPortBase() {
   17cc0:	4b03      	ldr	r3, [pc, #12]	; (17cd0 <Fw::InputPortBase::~InputPortBase()+0x10>)
   17cc2:	b510      	push	{r4, lr}
   17cc4:	4604      	mov	r4, r0
   17cc6:	6003      	str	r3, [r0, #0]
   17cc8:	f000 f842 	bl	17d50 <Fw::PortBase::~PortBase()>
    }
   17ccc:	4620      	mov	r0, r4
   17cce:	bd10      	pop	{r4, pc}
   17cd0:	20002eb0 	.word	0x20002eb0

00017cd4 <Fw::InputPortBase::setPortNum(long)>:
    void InputPortBase::setPortNum(NATIVE_INT_TYPE portNum) {
   17cd4:	b538      	push	{r3, r4, r5, lr}
        FW_ASSERT(portNum >= 0,portNum);
   17cd6:	1e0c      	subs	r4, r1, #0
    void InputPortBase::setPortNum(NATIVE_INT_TYPE portNum) {
   17cd8:	4605      	mov	r5, r0
        FW_ASSERT(portNum >= 0,portNum);
   17cda:	db01      	blt.n	17ce0 <Fw::InputPortBase::setPortNum(long)+0xc>
        this->m_portNum = portNum;
   17cdc:	66ac      	str	r4, [r5, #104]	; 0x68
    }
   17cde:	bd38      	pop	{r3, r4, r5, pc}
        FW_ASSERT(portNum >= 0,portNum);
   17ce0:	2218      	movs	r2, #24
   17ce2:	4802      	ldr	r0, [pc, #8]	; (17cec <Fw::InputPortBase::setPortNum(long)+0x18>)
   17ce4:	f7e9 fca0 	bl	1628 <Fw::SwAssert(char const*, long, unsigned long)>
        this->m_portNum = portNum;
   17ce8:	66ac      	str	r4, [r5, #104]	; 0x68
    }
   17cea:	bd38      	pop	{r3, r4, r5, pc}
   17cec:	200007d8 	.word	0x200007d8

00017cf0 <Fw::InputPortBase::init()>:
        PortBase::init();
   17cf0:	f000 b846 	b.w	17d80 <Fw::PortBase::init()>

00017cf4 <Fw::OutputPortBase::getToStringFormatString()>:
#endif

#if FW_OBJECT_TO_STRING == 1
    const char* OutputPortBase::getToStringFormatString() {
        return "Output Port: %s %s->(%s)";
    }
   17cf4:	4800      	ldr	r0, [pc, #0]	; (17cf8 <Fw::OutputPortBase::getToStringFormatString()+0x4>)
   17cf6:	4770      	bx	lr
   17cf8:	2000084c 	.word	0x2000084c

00017cfc <Fw::OutputPortBase::~OutputPortBase()>:
    OutputPortBase::~OutputPortBase() {
   17cfc:	4b03      	ldr	r3, [pc, #12]	; (17d0c <Fw::OutputPortBase::~OutputPortBase()+0x10>)
   17cfe:	b510      	push	{r4, lr}
   17d00:	4604      	mov	r4, r0
   17d02:	6003      	str	r3, [r0, #0]
   17d04:	f000 f824 	bl	17d50 <Fw::PortBase::~PortBase()>
    }
   17d08:	4620      	mov	r0, r4
   17d0a:	bd10      	pop	{r4, pc}
   17d0c:	20002fcc 	.word	0x20002fcc

00017d10 <Fw::OutputPortBase::~OutputPortBase()>:
    OutputPortBase::~OutputPortBase() {
   17d10:	4b05      	ldr	r3, [pc, #20]	; (17d28 <Fw::OutputPortBase::~OutputPortBase()+0x18>)
   17d12:	b510      	push	{r4, lr}
   17d14:	4604      	mov	r4, r0
   17d16:	6003      	str	r3, [r0, #0]
   17d18:	f000 f81a 	bl	17d50 <Fw::PortBase::~PortBase()>
    }
   17d1c:	2168      	movs	r1, #104	; 0x68
   17d1e:	4620      	mov	r0, r4
   17d20:	f000 ffd6 	bl	18cd0 <operator delete(void*, unsigned int)>
   17d24:	4620      	mov	r0, r4
   17d26:	bd10      	pop	{r4, pc}
   17d28:	20002fcc 	.word	0x20002fcc

00017d2c <Fw::OutputPortBase::OutputPortBase()>:
    OutputPortBase::OutputPortBase() : PortBase()
   17d2c:	b510      	push	{r4, lr}
   17d2e:	4604      	mov	r4, r0
        ,m_serPort(nullptr)
   17d30:	f000 f87c 	bl	17e2c <Fw::PortBase::PortBase()>
   17d34:	4a02      	ldr	r2, [pc, #8]	; (17d40 <Fw::OutputPortBase::OutputPortBase()+0x14>)
   17d36:	2300      	movs	r3, #0
    }
   17d38:	4620      	mov	r0, r4
        ,m_serPort(nullptr)
   17d3a:	6022      	str	r2, [r4, #0]
   17d3c:	6663      	str	r3, [r4, #100]	; 0x64
    }
   17d3e:	bd10      	pop	{r4, pc}
   17d40:	20002fcc 	.word	0x20002fcc

00017d44 <Fw::OutputPortBase::init()>:
        PortBase::init();
   17d44:	f000 b81c 	b.w	17d80 <Fw::PortBase::init()>

00017d48 <Fw::PortBase::getToStringFormatString()>:
#endif // FW_PORT_TRACING

#if FW_OBJECT_TO_STRING == 1
    const char* PortBase::getToStringFormatString() {
        return "Port: %s %s->(%s)";
    }
   17d48:	4800      	ldr	r0, [pc, #0]	; (17d4c <Fw::PortBase::getToStringFormatString()+0x4>)
   17d4a:	4770      	bx	lr
   17d4c:	20000cec 	.word	0x20000cec

00017d50 <Fw::PortBase::~PortBase()>:
    PortBase::~PortBase() {
   17d50:	4b03      	ldr	r3, [pc, #12]	; (17d60 <Fw::PortBase::~PortBase()+0x10>)
   17d52:	b510      	push	{r4, lr}
   17d54:	4604      	mov	r4, r0
   17d56:	6003      	str	r3, [r0, #0]
   17d58:	f000 f894 	bl	17e84 <Fw::ObjBase::~ObjBase()>
    }
   17d5c:	4620      	mov	r0, r4
   17d5e:	bd10      	pop	{r4, pc}
   17d60:	20003334 	.word	0x20003334

00017d64 <Fw::PortBase::~PortBase()>:
    PortBase::~PortBase() {
   17d64:	4b05      	ldr	r3, [pc, #20]	; (17d7c <Fw::PortBase::~PortBase()+0x18>)
   17d66:	b510      	push	{r4, lr}
   17d68:	4604      	mov	r4, r0
   17d6a:	6003      	str	r3, [r0, #0]
   17d6c:	f000 f88a 	bl	17e84 <Fw::ObjBase::~ObjBase()>
    }
   17d70:	2164      	movs	r1, #100	; 0x64
   17d72:	4620      	mov	r0, r4
   17d74:	f000 ffac 	bl	18cd0 <operator delete(void*, unsigned int)>
   17d78:	4620      	mov	r0, r4
   17d7a:	bd10      	pop	{r4, pc}
   17d7c:	20003334 	.word	0x20003334

00017d80 <Fw::PortBase::init()>:
        ObjBase::init();
   17d80:	f000 b900 	b.w	17f84 <Fw::ObjBase::init()>

00017d84 <Fw::PortBase::toString(char*, long)>:

    void PortBase::toString(char* buffer, NATIVE_INT_TYPE size) {
   17d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        FW_ASSERT(size > 0);
   17d88:	1e16      	subs	r6, r2, #0
    void PortBase::toString(char* buffer, NATIVE_INT_TYPE size) {
   17d8a:	b089      	sub	sp, #36	; 0x24
   17d8c:	4604      	mov	r4, r0
   17d8e:	460f      	mov	r7, r1
        FW_ASSERT(size > 0);
   17d90:	dd2f      	ble.n	17df2 <Fw::PortBase::toString(char*, long)+0x6e>
        // Get the port-custom format string
        const char* formatString = this->getToStringFormatString();
   17d92:	6823      	ldr	r3, [r4, #0]
   17d94:	4a1d      	ldr	r2, [pc, #116]	; (17e0c <Fw::PortBase::toString(char*, long)+0x88>)
   17d96:	691b      	ldr	r3, [r3, #16]
   17d98:	4293      	cmp	r3, r2
   17d9a:	d133      	bne.n	17e04 <Fw::PortBase::toString(char*, long)+0x80>
   17d9c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 17e28 <Fw::PortBase::toString(char*, long)+0xa4>
        return m_connObj == nullptr?false:true;
   17da0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    const char* toChar() const { return this->m_buf; }
   17da2:	f104 0908 	add.w	r9, r4, #8
                this->m_objName.toChar();
#else
                "UNKNOWN";
#endif
        // Get the C/NC for connected or not
        const char* this_is_connected = this->isConnected() ? "C" : "NC";
   17da6:	b308      	cbz	r0, 17dec <Fw::PortBase::toString(char*, long)+0x68>

        // Get the name of the connection object, "UNKNOWN" or "NONE"
        const char* connected_to = this->isConnected() ?
#if FW_OBJECT_NAMES == 1
            this->m_connObj->getObjName()
   17da8:	f000 f8f8 	bl	17f9c <Fw::ObjBase::getObjName()>
        const char* this_is_connected = this->isConnected() ? "C" : "NC";
   17dac:	4b18      	ldr	r3, [pc, #96]	; (17e10 <Fw::PortBase::toString(char*, long)+0x8c>)
            this->m_connObj->getObjName()
   17dae:	4604      	mov	r4, r0
        : StringBase(), m_bufferPtr(bufferPtr), m_bufferSize(bufferSize) {
   17db0:	4d18      	ldr	r5, [pc, #96]	; (17e14 <Fw::PortBase::toString(char*, long)+0x90>)
   17db2:	a805      	add	r0, sp, #20
   17db4:	9303      	str	r3, [sp, #12]
   17db6:	f7e9 fa33 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   17dba:	4917      	ldr	r1, [pc, #92]	; (17e18 <Fw::PortBase::toString(char*, long)+0x94>)
   17dbc:	a805      	add	r0, sp, #20
        : StringBase(), m_bufferPtr(bufferPtr), m_bufferSize(bufferSize) {
   17dbe:	9607      	str	r6, [sp, #28]
   17dc0:	e9cd 5705 	strd	r5, r7, [sp, #20]
        (void)StringBase::operator=(src);
   17dc4:	f7e9 fa94 	bl	12f0 <Fw::StringBase::operator=(char const*)>
#else
            "UNKNOWN"
#endif
            : "None";
        // Format the external string or use "" on error
        if (Fw::ExternalString(buffer, static_cast<Fw::ExternalString::SizeType>(size)).format(
   17dc8:	9400      	str	r4, [sp, #0]
   17dca:	9b03      	ldr	r3, [sp, #12]
   17dcc:	464a      	mov	r2, r9
   17dce:	4641      	mov	r1, r8
   17dd0:	a805      	add	r0, sp, #20
   17dd2:	f7e9 fa5b 	bl	128c <Fw::StringBase::format(char const*, ...)>
   17dd6:	4604      	mov	r4, r0
    ~ExternalString() {}
   17dd8:	a805      	add	r0, sp, #20
   17dda:	9505      	str	r5, [sp, #20]
   17ddc:	f7e9 fa2a 	bl	1234 <Fw::StringBase::~StringBase()>
   17de0:	b10c      	cbz	r4, 17de6 <Fw::PortBase::toString(char*, long)+0x62>
                formatString,
                object_name,
                this_is_connected,
                connected_to) != Fw::FormatStatus::SUCCESS) {
            buffer[0] = 0;
   17de2:	2300      	movs	r3, #0
   17de4:	703b      	strb	r3, [r7, #0]
        }
    }
   17de6:	b009      	add	sp, #36	; 0x24
   17de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        const char* this_is_connected = this->isConnected() ? "C" : "NC";
   17dec:	4b0b      	ldr	r3, [pc, #44]	; (17e1c <Fw::PortBase::toString(char*, long)+0x98>)
        const char* connected_to = this->isConnected() ?
   17dee:	4c0c      	ldr	r4, [pc, #48]	; (17e20 <Fw::PortBase::toString(char*, long)+0x9c>)
   17df0:	e7de      	b.n	17db0 <Fw::PortBase::toString(char*, long)+0x2c>
        FW_ASSERT(size > 0);
   17df2:	2155      	movs	r1, #85	; 0x55
   17df4:	480b      	ldr	r0, [pc, #44]	; (17e24 <Fw::PortBase::toString(char*, long)+0xa0>)
   17df6:	f7e9 fc09 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        const char* formatString = this->getToStringFormatString();
   17dfa:	6823      	ldr	r3, [r4, #0]
   17dfc:	4a03      	ldr	r2, [pc, #12]	; (17e0c <Fw::PortBase::toString(char*, long)+0x88>)
   17dfe:	691b      	ldr	r3, [r3, #16]
   17e00:	4293      	cmp	r3, r2
   17e02:	d0cb      	beq.n	17d9c <Fw::PortBase::toString(char*, long)+0x18>
   17e04:	4620      	mov	r0, r4
   17e06:	4798      	blx	r3
   17e08:	4680      	mov	r8, r0
   17e0a:	e7c9      	b.n	17da0 <Fw::PortBase::toString(char*, long)+0x1c>
   17e0c:	00017d49 	.word	0x00017d49
   17e10:	20000d00 	.word	0x20000d00
   17e14:	20002fa4 	.word	0x20002fa4
   17e18:	20001d2c 	.word	0x20001d2c
   17e1c:	20000d04 	.word	0x20000d04
   17e20:	20000d08 	.word	0x20000d08
   17e24:	20000d10 	.word	0x20000d10
   17e28:	20000cec 	.word	0x20000cec

00017e2c <Fw::PortBase::PortBase()>:
    PortBase::PortBase()
   17e2c:	b510      	push	{r4, lr}
                m_ovr_trace(false)
   17e2e:	2100      	movs	r1, #0
    PortBase::PortBase()
   17e30:	4604      	mov	r4, r0
                m_ovr_trace(false)
   17e32:	f000 f881 	bl	17f38 <Fw::ObjBase::ObjBase(char const*)>
                m_connObj(nullptr)
   17e36:	2300      	movs	r3, #0
                m_ovr_trace(false)
   17e38:	4a03      	ldr	r2, [pc, #12]	; (17e48 <Fw::PortBase::PortBase()+0x1c>)
    }
   17e3a:	4620      	mov	r0, r4
                m_connObj(nullptr)
   17e3c:	65e3      	str	r3, [r4, #92]	; 0x5c
                m_ovr_trace(false)
   17e3e:	6022      	str	r2, [r4, #0]
                ,m_trace(false),
   17e40:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    }
   17e44:	bd10      	pop	{r4, pc}
   17e46:	bf00      	nop
   17e48:	20003334 	.word	0x20003334

00017e4c <Fw::PortBase::isConnected() const>:
        return m_connObj == nullptr?false:true;
   17e4c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    }
   17e4e:	3800      	subs	r0, #0
   17e50:	bf18      	it	ne
   17e52:	2001      	movne	r0, #1
   17e54:	4770      	bx	lr
   17e56:	bf00      	nop

00017e58 <Fw::PortBase::trace() const>:
        if (this->m_ovr_trace) {
   17e58:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
   17e5c:	b13b      	cbz	r3, 17e6e <Fw::PortBase::trace() const+0x16>
            if (this->m_trace) {
   17e5e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
   17e62:	b14b      	cbz	r3, 17e78 <Fw::PortBase::trace() const+0x20>
            Fw::Logger::log("Trace: %s\n", this->m_objName.toChar());
   17e64:	f100 0108 	add.w	r1, r0, #8
   17e68:	4804      	ldr	r0, [pc, #16]	; (17e7c <Fw::PortBase::trace() const+0x24>)
   17e6a:	f7e9 bc2d 	b.w	16c8 <Fw::Logger::log(char const*, ...)>
        } else if (PortBase::s_trace) {
   17e6e:	4b04      	ldr	r3, [pc, #16]	; (17e80 <Fw::PortBase::trace() const+0x28>)
   17e70:	781b      	ldrb	r3, [r3, #0]
   17e72:	2b00      	cmp	r3, #0
   17e74:	d1f6      	bne.n	17e64 <Fw::PortBase::trace() const+0xc>
    }
   17e76:	4770      	bx	lr
   17e78:	4770      	bx	lr
   17e7a:	bf00      	nop
   17e7c:	200023fc 	.word	0x200023fc
   17e80:	2000d391 	.word	0x2000d391

00017e84 <Fw::ObjBase::~ObjBase()>:
            ObjBase::s_objRegistry->regObject(this);
        }
#endif
    }

    ObjBase::~ObjBase() {
   17e84:	4a05      	ldr	r2, [pc, #20]	; (17e9c <Fw::ObjBase::~ObjBase()+0x18>)
    ~ObjectName() {}
   17e86:	4b06      	ldr	r3, [pc, #24]	; (17ea0 <Fw::ObjBase::~ObjBase()+0x1c>)
   17e88:	b510      	push	{r4, lr}
   17e8a:	4604      	mov	r4, r0
   17e8c:	6002      	str	r2, [r0, #0]
   17e8e:	f840 3f04 	str.w	r3, [r0, #4]!
   17e92:	f7e9 f9cf 	bl	1234 <Fw::StringBase::~StringBase()>

    }
   17e96:	4620      	mov	r0, r4
   17e98:	bd10      	pop	{r4, pc}
   17e9a:	bf00      	nop
   17e9c:	20003304 	.word	0x20003304
   17ea0:	20002b80 	.word	0x20002b80

00017ea4 <Fw::ObjBase::~ObjBase()>:
    ObjBase::~ObjBase() {
   17ea4:	4a07      	ldr	r2, [pc, #28]	; (17ec4 <Fw::ObjBase::~ObjBase()+0x20>)
   17ea6:	4b08      	ldr	r3, [pc, #32]	; (17ec8 <Fw::ObjBase::~ObjBase()+0x24>)
   17ea8:	b510      	push	{r4, lr}
   17eaa:	4604      	mov	r4, r0
   17eac:	6002      	str	r2, [r0, #0]
   17eae:	f840 3f04 	str.w	r3, [r0, #4]!
   17eb2:	f7e9 f9bf 	bl	1234 <Fw::StringBase::~StringBase()>
    }
   17eb6:	4620      	mov	r0, r4
   17eb8:	215c      	movs	r1, #92	; 0x5c
   17eba:	f000 ff09 	bl	18cd0 <operator delete(void*, unsigned int)>
   17ebe:	4620      	mov	r0, r4
   17ec0:	bd10      	pop	{r4, pc}
   17ec2:	bf00      	nop
   17ec4:	20003304 	.word	0x20003304
   17ec8:	20002b80 	.word	0x20002b80

00017ecc <Fw::ObjBase::toString(char*, long)>:

    void ObjBase::setObjName(const char* name) {
        this->m_objName = name;
    }
#if FW_OBJECT_TO_STRING == 1
    void ObjBase::toString(char* str, NATIVE_INT_TYPE size) {
   17ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
        FW_ASSERT(size > 0);
   17ece:	1e15      	subs	r5, r2, #0
    void ObjBase::toString(char* str, NATIVE_INT_TYPE size) {
   17ed0:	b085      	sub	sp, #20
   17ed2:	4606      	mov	r6, r0
   17ed4:	460c      	mov	r4, r1
        FW_ASSERT(size > 0);
   17ed6:	dd1b      	ble.n	17f10 <Fw::ObjBase::toString(char*, long)+0x44>
        FW_ASSERT(str != nullptr);
   17ed8:	b304      	cbz	r4, 17f1c <Fw::ObjBase::toString(char*, long)+0x50>
        : StringBase(), m_bufferPtr(bufferPtr), m_bufferSize(bufferSize) {
   17eda:	4f13      	ldr	r7, [pc, #76]	; (17f28 <Fw::ObjBase::toString(char*, long)+0x5c>)
   17edc:	a801      	add	r0, sp, #4
   17ede:	f7e9 f99f 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   17ee2:	4912      	ldr	r1, [pc, #72]	; (17f2c <Fw::ObjBase::toString(char*, long)+0x60>)
   17ee4:	a801      	add	r0, sp, #4
        : StringBase(), m_bufferPtr(bufferPtr), m_bufferSize(bufferSize) {
   17ee6:	9701      	str	r7, [sp, #4]
   17ee8:	e9cd 4502 	strd	r4, r5, [sp, #8]
        (void)StringBase::operator=(src);
   17eec:	f7e9 fa00 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        Fw::FormatStatus formatStatus = Fw::ExternalString(str, static_cast<Fw::ExternalString::SizeType>(size)).format("Obj: %s", this->m_objName.toChar());
   17ef0:	f106 0208 	add.w	r2, r6, #8
   17ef4:	490e      	ldr	r1, [pc, #56]	; (17f30 <Fw::ObjBase::toString(char*, long)+0x64>)
   17ef6:	a801      	add	r0, sp, #4
   17ef8:	f7e9 f9c8 	bl	128c <Fw::StringBase::format(char const*, ...)>
   17efc:	4605      	mov	r5, r0
    ~ExternalString() {}
   17efe:	a801      	add	r0, sp, #4
   17f00:	9701      	str	r7, [sp, #4]
   17f02:	f7e9 f997 	bl	1234 <Fw::StringBase::~StringBase()>
        if (formatStatus != Fw::FormatStatus::SUCCESS) {
   17f06:	b10d      	cbz	r5, 17f0c <Fw::ObjBase::toString(char*, long)+0x40>
            str[0] = 0;
   17f08:	2300      	movs	r3, #0
   17f0a:	7023      	strb	r3, [r4, #0]
        }
    }
   17f0c:	b005      	add	sp, #20
   17f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FW_ASSERT(size > 0);
   17f10:	2130      	movs	r1, #48	; 0x30
   17f12:	4808      	ldr	r0, [pc, #32]	; (17f34 <Fw::ObjBase::toString(char*, long)+0x68>)
   17f14:	f7e9 fb7a 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
        FW_ASSERT(str != nullptr);
   17f18:	2c00      	cmp	r4, #0
   17f1a:	d1de      	bne.n	17eda <Fw::ObjBase::toString(char*, long)+0xe>
   17f1c:	2131      	movs	r1, #49	; 0x31
   17f1e:	4805      	ldr	r0, [pc, #20]	; (17f34 <Fw::ObjBase::toString(char*, long)+0x68>)
   17f20:	f7e9 fb74 	bl	160c <Fw::SwAssert(char const*, unsigned long)>
   17f24:	e7d9      	b.n	17eda <Fw::ObjBase::toString(char*, long)+0xe>
   17f26:	bf00      	nop
   17f28:	20002fa4 	.word	0x20002fa4
   17f2c:	20001d2c 	.word	0x20001d2c
   17f30:	20000cdc 	.word	0x20000cdc
   17f34:	20000cc8 	.word	0x20000cc8

00017f38 <Fw::ObjBase::ObjBase(char const*)>:
    ObjBase::ObjBase(const char* objName) {
   17f38:	b570      	push	{r4, r5, r6, lr}
   17f3a:	4b0e      	ldr	r3, [pc, #56]	; (17f74 <Fw::ObjBase::ObjBase(char const*)+0x3c>)
   17f3c:	4605      	mov	r5, r0
   17f3e:	4604      	mov	r4, r0
   17f40:	460e      	mov	r6, r1
   17f42:	f845 3b04 	str.w	r3, [r5], #4
    ObjectName() : StringBase() { *this = ""; }
   17f46:	4628      	mov	r0, r5
   17f48:	f7e9 f96a 	bl	1220 <Fw::StringBase::StringBase()>
   17f4c:	4b0a      	ldr	r3, [pc, #40]	; (17f78 <Fw::ObjBase::ObjBase(char const*)+0x40>)
        (void)StringBase::operator=(src);
   17f4e:	490b      	ldr	r1, [pc, #44]	; (17f7c <Fw::ObjBase::ObjBase(char const*)+0x44>)
   17f50:	4628      	mov	r0, r5
    ObjectName() : StringBase() { *this = ""; }
   17f52:	6063      	str	r3, [r4, #4]
        (void)StringBase::operator=(src);
   17f54:	f7e9 f9cc 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        if (nullptr == objName) {
   17f58:	b12e      	cbz	r6, 17f66 <Fw::ObjBase::ObjBase(char const*)+0x2e>
   17f5a:	4631      	mov	r1, r6
   17f5c:	4628      	mov	r0, r5
   17f5e:	f7e9 f9c7 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    }
   17f62:	4620      	mov	r0, r4
   17f64:	bd70      	pop	{r4, r5, r6, pc}
   17f66:	4906      	ldr	r1, [pc, #24]	; (17f80 <Fw::ObjBase::ObjBase(char const*)+0x48>)
   17f68:	4628      	mov	r0, r5
   17f6a:	f7e9 f9c1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
   17f6e:	4620      	mov	r0, r4
   17f70:	bd70      	pop	{r4, r5, r6, pc}
   17f72:	bf00      	nop
   17f74:	20003304 	.word	0x20003304
   17f78:	20002b80 	.word	0x20002b80
   17f7c:	20001d2c 	.word	0x20001d2c
   17f80:	20000ce4 	.word	0x20000ce4

00017f84 <Fw::ObjBase::init()>:
        if (ObjBase::s_objRegistry) {
   17f84:	4b04      	ldr	r3, [pc, #16]	; (17f98 <Fw::ObjBase::init()+0x14>)
    void ObjBase::init() {
   17f86:	4601      	mov	r1, r0
        if (ObjBase::s_objRegistry) {
   17f88:	681b      	ldr	r3, [r3, #0]
   17f8a:	b11b      	cbz	r3, 17f94 <Fw::ObjBase::init()+0x10>
            ObjBase::s_objRegistry->regObject(this);
   17f8c:	681a      	ldr	r2, [r3, #0]
   17f8e:	4618      	mov	r0, r3
   17f90:	6813      	ldr	r3, [r2, #0]
   17f92:	4718      	bx	r3
    }
   17f94:	4770      	bx	lr
   17f96:	bf00      	nop
   17f98:	2000c9ac 	.word	0x2000c9ac

00017f9c <Fw::ObjBase::getObjName()>:
    }
   17f9c:	3008      	adds	r0, #8
   17f9e:	4770      	bx	lr

00017fa0 <Fw::ObjBase::setObjName(char const*)>:
   17fa0:	3004      	adds	r0, #4
   17fa2:	f7e9 b9a5 	b.w	12f0 <Fw::StringBase::operator=(char const*)>
   17fa6:	bf00      	nop

00017fa8 <Fw::MallocAllocator::~MallocAllocator()>:

namespace Fw {

MallocAllocator::MallocAllocator() {}

MallocAllocator::~MallocAllocator() {}
   17fa8:	4b03      	ldr	r3, [pc, #12]	; (17fb8 <Fw::MallocAllocator::~MallocAllocator()+0x10>)
   17faa:	b510      	push	{r4, lr}
   17fac:	4604      	mov	r4, r0
   17fae:	6003      	str	r3, [r0, #0]
   17fb0:	f000 f832 	bl	18018 <Fw::MemAllocator::~MemAllocator()>
   17fb4:	4620      	mov	r0, r4
   17fb6:	bd10      	pop	{r4, pc}
   17fb8:	20003044 	.word	0x20003044

00017fbc <Fw::MallocAllocator::~MallocAllocator()>:
   17fbc:	4b05      	ldr	r3, [pc, #20]	; (17fd4 <Fw::MallocAllocator::~MallocAllocator()+0x18>)
   17fbe:	b510      	push	{r4, lr}
   17fc0:	4604      	mov	r4, r0
   17fc2:	6003      	str	r3, [r0, #0]
   17fc4:	f000 f828 	bl	18018 <Fw::MemAllocator::~MemAllocator()>
   17fc8:	2104      	movs	r1, #4
   17fca:	4620      	mov	r0, r4
   17fcc:	f000 fe80 	bl	18cd0 <operator delete(void*, unsigned int)>
   17fd0:	4620      	mov	r0, r4
   17fd2:	bd10      	pop	{r4, pc}
   17fd4:	20003044 	.word	0x20003044

00017fd8 <Fw::MallocAllocator::allocate(unsigned long, unsigned long&, bool&)>:

void* MallocAllocator::allocate(const NATIVE_UINT_TYPE identifier, NATIVE_UINT_TYPE& size, bool& recoverable) {
    // don't use identifier
    // heap memory is never recoverable
    recoverable = false;
   17fd8:	2100      	movs	r1, #0
    void* mem = ::malloc(size);
   17fda:	6810      	ldr	r0, [r2, #0]
void* MallocAllocator::allocate(const NATIVE_UINT_TYPE identifier, NATIVE_UINT_TYPE& size, bool& recoverable) {
   17fdc:	b510      	push	{r4, lr}
    recoverable = false;
   17fde:	7019      	strb	r1, [r3, #0]
void* MallocAllocator::allocate(const NATIVE_UINT_TYPE identifier, NATIVE_UINT_TYPE& size, bool& recoverable) {
   17fe0:	4614      	mov	r4, r2
    void* mem = ::malloc(size);
   17fe2:	f00c fa77 	bl	244d4 <malloc>
    if (nullptr == mem) {
   17fe6:	b100      	cbz	r0, 17fea <Fw::MallocAllocator::allocate(unsigned long, unsigned long&, bool&)+0x12>
        size = 0;  // set to zero if can't get memory
    }
    return mem;
}
   17fe8:	bd10      	pop	{r4, pc}
        size = 0;  // set to zero if can't get memory
   17fea:	6020      	str	r0, [r4, #0]
}
   17fec:	bd10      	pop	{r4, pc}
   17fee:	bf00      	nop

00017ff0 <Fw::MallocAllocator::deallocate(unsigned long, void*)>:

void MallocAllocator::deallocate(const NATIVE_UINT_TYPE identifier, void* ptr) {
    ::free(ptr);
   17ff0:	4610      	mov	r0, r2
   17ff2:	f00c ba77 	b.w	244e4 <free>
   17ff6:	bf00      	nop

00017ff8 <Fw::MallocAllocator::MallocAllocator()>:
MallocAllocator::MallocAllocator() {}
   17ff8:	b510      	push	{r4, lr}
   17ffa:	4604      	mov	r4, r0
   17ffc:	f000 f806 	bl	1800c <Fw::MemAllocator::MemAllocator()>
   18000:	4b01      	ldr	r3, [pc, #4]	; (18008 <Fw::MallocAllocator::MallocAllocator()+0x10>)
   18002:	4620      	mov	r0, r4
   18004:	6023      	str	r3, [r4, #0]
   18006:	bd10      	pop	{r4, pc}
   18008:	20003044 	.word	0x20003044

0001800c <Fw::MemAllocator::MemAllocator()>:

#include <Fw/Types/MemAllocator.hpp>

namespace Fw {

MemAllocator::MemAllocator() {}
   1800c:	4b01      	ldr	r3, [pc, #4]	; (18014 <Fw::MemAllocator::MemAllocator()+0x8>)
   1800e:	6003      	str	r3, [r0, #0]
   18010:	4770      	bx	lr
   18012:	bf00      	nop
   18014:	20002d2c 	.word	0x20002d2c

00018018 <Fw::MemAllocator::~MemAllocator()>:

MemAllocator::~MemAllocator() {}
   18018:	4770      	bx	lr
   1801a:	bf00      	nop

0001801c <Fw::DeserialStatus::serialize(Fw::SerializeBufferBase&) const>:
      || ((e >= BUFFER_EMPTY) && (e <= TYPE_MISMATCH));
  }

  Fw::SerializeStatus DeserialStatus ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   1801c:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   1801e:	7901      	ldrb	r1, [r0, #4]
   18020:	4618      	mov	r0, r3
   18022:	f7e8 bb81 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   18026:	bf00      	nop

00018028 <Fw::DeserialStatus::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus DeserialStatus ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   18028:	b510      	push	{r4, lr}
   1802a:	460a      	mov	r2, r1
   1802c:	b082      	sub	sp, #8
   1802e:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   18030:	a901      	add	r1, sp, #4
   18032:	4610      	mov	r0, r2
   18034:	f7e8 fe52 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   18038:	b960      	cbnz	r0, 18054 <Fw::DeserialStatus::deserialize(Fw::SerializeBufferBase&)+0x2c>
      this->e = static_cast<T>(es);
   1803a:	f89d 2004 	ldrb.w	r2, [sp, #4]
      || ((e >= BUFFER_EMPTY) && (e <= TYPE_MISMATCH));
   1803e:	1ed3      	subs	r3, r2, #3
      this->e = static_cast<T>(es);
   18040:	7122      	strb	r2, [r4, #4]
      || ((e >= BUFFER_EMPTY) && (e <= TYPE_MISMATCH));
   18042:	2a00      	cmp	r2, #0
   18044:	bf18      	it	ne
   18046:	2b03      	cmpne	r3, #3
   18048:	bf94      	ite	ls
   1804a:	2001      	movls	r0, #1
   1804c:	2000      	movhi	r0, #0
      if (!this->isValid()) {
   1804e:	f080 0001 	eor.w	r0, r0, #1
   18052:	0080      	lsls	r0, r0, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   18054:	b002      	add	sp, #8
   18056:	bd10      	pop	{r4, pc}

00018058 <Fw::DeserialStatus::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void DeserialStatus ::
    toString(Fw::StringBase& sb) const
  {
   18058:	b570      	push	{r4, r5, r6, lr}
   1805a:	b0a2      	sub	sp, #136	; 0x88
   1805c:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   1805e:	4e1e      	ldr	r6, [pc, #120]	; (180d8 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x80>)
   18060:	460d      	mov	r5, r1
   18062:	4668      	mov	r0, sp
   18064:	f7e9 f8dc 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   18068:	491c      	ldr	r1, [pc, #112]	; (180dc <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x84>)
   1806a:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   1806c:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   1806e:	f7e9 f93f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   18072:	7923      	ldrb	r3, [r4, #4]
   18074:	2b06      	cmp	r3, #6
   18076:	d815      	bhi.n	180a4 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x4c>
   18078:	e8df f003 	tbb	[pc, r3]
   1807c:	1e141419 	.word	0x1e141419
   18080:	2823      	.short	0x2823
   18082:	04          	.byte	0x04
   18083:	00          	.byte	0x00
   18084:	4916      	ldr	r1, [pc, #88]	; (180e0 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x88>)
   18086:	4668      	mov	r0, sp
   18088:	f7e9 f932 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   1808c:	7923      	ldrb	r3, [r4, #4]
   1808e:	aa01      	add	r2, sp, #4
   18090:	4914      	ldr	r1, [pc, #80]	; (180e4 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x8c>)
   18092:	4628      	mov	r0, r5
   18094:	f7e9 f8fa 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   18098:	4668      	mov	r0, sp
   1809a:	9600      	str	r6, [sp, #0]
   1809c:	f7e9 f8ca 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   180a0:	b022      	add	sp, #136	; 0x88
   180a2:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   180a4:	4910      	ldr	r1, [pc, #64]	; (180e8 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x90>)
   180a6:	4668      	mov	r0, sp
   180a8:	f7e9 f922 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   180ac:	e7ee      	b.n	1808c <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x34>
        (void)StringBase::operator=(src);
   180ae:	490f      	ldr	r1, [pc, #60]	; (180ec <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x94>)
   180b0:	4668      	mov	r0, sp
   180b2:	f7e9 f91d 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   180b6:	e7e9      	b.n	1808c <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x34>
        (void)StringBase::operator=(src);
   180b8:	490d      	ldr	r1, [pc, #52]	; (180f0 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x98>)
   180ba:	4668      	mov	r0, sp
   180bc:	f7e9 f918 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   180c0:	e7e4      	b.n	1808c <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x34>
        (void)StringBase::operator=(src);
   180c2:	490c      	ldr	r1, [pc, #48]	; (180f4 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x9c>)
   180c4:	4668      	mov	r0, sp
   180c6:	f7e9 f913 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   180ca:	e7df      	b.n	1808c <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x34>
        (void)StringBase::operator=(src);
   180cc:	490a      	ldr	r1, [pc, #40]	; (180f8 <Fw::DeserialStatus::toString(Fw::StringBase&) const+0xa0>)
   180ce:	4668      	mov	r0, sp
   180d0:	f7e9 f90e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   180d4:	e7da      	b.n	1808c <Fw::DeserialStatus::toString(Fw::StringBase&) const+0x34>
   180d6:	bf00      	nop
   180d8:	200032dc 	.word	0x200032dc
   180dc:	20001d2c 	.word	0x20001d2c
   180e0:	200023a0 	.word	0x200023a0
   180e4:	20002470 	.word	0x20002470
   180e8:	20002464 	.word	0x20002464
   180ec:	20002328 	.word	0x20002328
   180f0:	20002380 	.word	0x20002380
   180f4:	20002350 	.word	0x20002350
   180f8:	20002390 	.word	0x20002390

000180fc <Fw::DeserialStatus::~DeserialStatus()>:
   180fc:	4b03      	ldr	r3, [pc, #12]	; (1810c <Fw::DeserialStatus::~DeserialStatus()+0x10>)
   180fe:	b510      	push	{r4, lr}
   18100:	4604      	mov	r4, r0
   18102:	6003      	str	r3, [r0, #0]
   18104:	f7e8 fa1a 	bl	53c <Fw::Serializable::~Serializable()>
   18108:	4620      	mov	r0, r4
   1810a:	bd10      	pop	{r4, pc}
   1810c:	20002f88 	.word	0x20002f88

00018110 <Fw::DeserialStatus::~DeserialStatus()>:
   18110:	4b05      	ldr	r3, [pc, #20]	; (18128 <Fw::DeserialStatus::~DeserialStatus()+0x18>)
   18112:	b510      	push	{r4, lr}
   18114:	4604      	mov	r4, r0
   18116:	6003      	str	r3, [r0, #0]
   18118:	f7e8 fa10 	bl	53c <Fw::Serializable::~Serializable()>
   1811c:	2108      	movs	r1, #8
   1811e:	4620      	mov	r0, r4
   18120:	f000 fdd6 	bl	18cd0 <operator delete(void*, unsigned int)>
   18124:	4620      	mov	r0, r4
   18126:	bd10      	pop	{r4, pc}
   18128:	20002f88 	.word	0x20002f88

0001812c <Fw::Logic::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= LOW) && (e <= HIGH));
  }

  Fw::SerializeStatus Logic ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   1812c:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   1812e:	7901      	ldrb	r1, [r0, #4]
   18130:	4618      	mov	r0, r3
   18132:	f7e8 baf9 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   18136:	bf00      	nop

00018138 <Fw::Logic::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus Logic ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   18138:	b510      	push	{r4, lr}
   1813a:	460a      	mov	r2, r1
   1813c:	b082      	sub	sp, #8
   1813e:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   18140:	a901      	add	r1, sp, #4
   18142:	4610      	mov	r0, r2
   18144:	f7e8 fdca 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   18148:	b938      	cbnz	r0, 1815a <Fw::Logic::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
   1814a:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   1814e:	2a01      	cmp	r2, #1
      this->e = static_cast<T>(es);
   18150:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   18152:	bf94      	ite	ls
   18154:	2300      	movls	r3, #0
   18156:	2301      	movhi	r3, #1
   18158:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   1815a:	b002      	add	sp, #8
   1815c:	bd10      	pop	{r4, pc}
   1815e:	bf00      	nop

00018160 <Fw::Logic::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void Logic ::
    toString(Fw::StringBase& sb) const
  {
   18160:	b570      	push	{r4, r5, r6, lr}
   18162:	b0a2      	sub	sp, #136	; 0x88
   18164:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   18166:	4e14      	ldr	r6, [pc, #80]	; (181b8 <Fw::Logic::toString(Fw::StringBase&) const+0x58>)
   18168:	460d      	mov	r5, r1
   1816a:	4668      	mov	r0, sp
   1816c:	f7e9 f858 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   18170:	4912      	ldr	r1, [pc, #72]	; (181bc <Fw::Logic::toString(Fw::StringBase&) const+0x5c>)
   18172:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   18174:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   18176:	f7e9 f8bb 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   1817a:	7923      	ldrb	r3, [r4, #4]
   1817c:	b18b      	cbz	r3, 181a2 <Fw::Logic::toString(Fw::StringBase&) const+0x42>
   1817e:	2b01      	cmp	r3, #1
   18180:	d014      	beq.n	181ac <Fw::Logic::toString(Fw::StringBase&) const+0x4c>
   18182:	490f      	ldr	r1, [pc, #60]	; (181c0 <Fw::Logic::toString(Fw::StringBase&) const+0x60>)
   18184:	4668      	mov	r0, sp
   18186:	f7e9 f8b3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   1818a:	7923      	ldrb	r3, [r4, #4]
   1818c:	aa01      	add	r2, sp, #4
   1818e:	490d      	ldr	r1, [pc, #52]	; (181c4 <Fw::Logic::toString(Fw::StringBase&) const+0x64>)
   18190:	4628      	mov	r0, r5
   18192:	f7e9 f87b 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   18196:	4668      	mov	r0, sp
   18198:	9600      	str	r6, [sp, #0]
   1819a:	f7e9 f84b 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   1819e:	b022      	add	sp, #136	; 0x88
   181a0:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   181a2:	4909      	ldr	r1, [pc, #36]	; (181c8 <Fw::Logic::toString(Fw::StringBase&) const+0x68>)
   181a4:	4668      	mov	r0, sp
   181a6:	f7e9 f8a3 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   181aa:	e7ee      	b.n	1818a <Fw::Logic::toString(Fw::StringBase&) const+0x2a>
        (void)StringBase::operator=(src);
   181ac:	4907      	ldr	r1, [pc, #28]	; (181cc <Fw::Logic::toString(Fw::StringBase&) const+0x6c>)
   181ae:	4668      	mov	r0, sp
   181b0:	f7e9 f89e 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   181b4:	e7e9      	b.n	1818a <Fw::Logic::toString(Fw::StringBase&) const+0x2a>
   181b6:	bf00      	nop
   181b8:	200032dc 	.word	0x200032dc
   181bc:	20001d2c 	.word	0x20001d2c
   181c0:	20002464 	.word	0x20002464
   181c4:	20002470 	.word	0x20002470
   181c8:	200023b8 	.word	0x200023b8
   181cc:	200023bc 	.word	0x200023bc

000181d0 <Fw::Logic::~Logic()>:
   181d0:	4b03      	ldr	r3, [pc, #12]	; (181e0 <Fw::Logic::~Logic()+0x10>)
   181d2:	b510      	push	{r4, lr}
   181d4:	4604      	mov	r4, r0
   181d6:	6003      	str	r3, [r0, #0]
   181d8:	f7e8 f9b0 	bl	53c <Fw::Serializable::~Serializable()>
   181dc:	4620      	mov	r0, r4
   181de:	bd10      	pop	{r4, pc}
   181e0:	200032a4 	.word	0x200032a4

000181e4 <Fw::Logic::~Logic()>:
   181e4:	4b05      	ldr	r3, [pc, #20]	; (181fc <Fw::Logic::~Logic()+0x18>)
   181e6:	b510      	push	{r4, lr}
   181e8:	4604      	mov	r4, r0
   181ea:	6003      	str	r3, [r0, #0]
   181ec:	f7e8 f9a6 	bl	53c <Fw::Serializable::~Serializable()>
   181f0:	2108      	movs	r1, #8
   181f2:	4620      	mov	r0, r4
   181f4:	f000 fd6c 	bl	18cd0 <operator delete(void*, unsigned int)>
   181f8:	4620      	mov	r0, r4
   181fa:	bd10      	pop	{r4, pc}
   181fc:	200032a4 	.word	0x200032a4

00018200 <Fw::Logic::operator=(Fw::Logic::T)>:
    this->e = e1;
   18200:	7101      	strb	r1, [r0, #4]
  }
   18202:	4770      	bx	lr

00018204 <Fw::On::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= OFF) && (e <= ON));
  }

  Fw::SerializeStatus On ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   18204:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   18206:	7901      	ldrb	r1, [r0, #4]
   18208:	4618      	mov	r0, r3
   1820a:	f7e8 ba8d 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   1820e:	bf00      	nop

00018210 <Fw::On::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus On ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   18210:	b510      	push	{r4, lr}
   18212:	460a      	mov	r2, r1
   18214:	b082      	sub	sp, #8
   18216:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   18218:	a901      	add	r1, sp, #4
   1821a:	4610      	mov	r0, r2
   1821c:	f7e8 fd5e 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   18220:	b938      	cbnz	r0, 18232 <Fw::On::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
   18222:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   18226:	2a01      	cmp	r2, #1
      this->e = static_cast<T>(es);
   18228:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   1822a:	bf94      	ite	ls
   1822c:	2300      	movls	r3, #0
   1822e:	2301      	movhi	r3, #1
   18230:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   18232:	b002      	add	sp, #8
   18234:	bd10      	pop	{r4, pc}
   18236:	bf00      	nop

00018238 <Fw::On::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void On ::
    toString(Fw::StringBase& sb) const
  {
   18238:	b570      	push	{r4, r5, r6, lr}
   1823a:	b0a2      	sub	sp, #136	; 0x88
   1823c:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   1823e:	4e14      	ldr	r6, [pc, #80]	; (18290 <Fw::On::toString(Fw::StringBase&) const+0x58>)
   18240:	460d      	mov	r5, r1
   18242:	4668      	mov	r0, sp
   18244:	f7e8 ffec 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   18248:	4912      	ldr	r1, [pc, #72]	; (18294 <Fw::On::toString(Fw::StringBase&) const+0x5c>)
   1824a:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   1824c:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   1824e:	f7e9 f84f 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   18252:	7923      	ldrb	r3, [r4, #4]
   18254:	b18b      	cbz	r3, 1827a <Fw::On::toString(Fw::StringBase&) const+0x42>
   18256:	2b01      	cmp	r3, #1
   18258:	d014      	beq.n	18284 <Fw::On::toString(Fw::StringBase&) const+0x4c>
   1825a:	490f      	ldr	r1, [pc, #60]	; (18298 <Fw::On::toString(Fw::StringBase&) const+0x60>)
   1825c:	4668      	mov	r0, sp
   1825e:	f7e9 f847 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   18262:	7923      	ldrb	r3, [r4, #4]
   18264:	aa01      	add	r2, sp, #4
   18266:	490d      	ldr	r1, [pc, #52]	; (1829c <Fw::On::toString(Fw::StringBase&) const+0x64>)
   18268:	4628      	mov	r0, r5
   1826a:	f7e9 f80f 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   1826e:	4668      	mov	r0, sp
   18270:	9600      	str	r6, [sp, #0]
   18272:	f7e8 ffdf 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   18276:	b022      	add	sp, #136	; 0x88
   18278:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   1827a:	4909      	ldr	r1, [pc, #36]	; (182a0 <Fw::On::toString(Fw::StringBase&) const+0x68>)
   1827c:	4668      	mov	r0, sp
   1827e:	f7e9 f837 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   18282:	e7ee      	b.n	18262 <Fw::On::toString(Fw::StringBase&) const+0x2a>
        (void)StringBase::operator=(src);
   18284:	4907      	ldr	r1, [pc, #28]	; (182a4 <Fw::On::toString(Fw::StringBase&) const+0x6c>)
   18286:	4668      	mov	r0, sp
   18288:	f7e9 f832 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   1828c:	e7e9      	b.n	18262 <Fw::On::toString(Fw::StringBase&) const+0x2a>
   1828e:	bf00      	nop
   18290:	200032dc 	.word	0x200032dc
   18294:	20001d2c 	.word	0x20001d2c
   18298:	20002464 	.word	0x20002464
   1829c:	20002470 	.word	0x20002470
   182a0:	200023b0 	.word	0x200023b0
   182a4:	200023b4 	.word	0x200023b4

000182a8 <Fw::On::~On()>:
   182a8:	4b03      	ldr	r3, [pc, #12]	; (182b8 <Fw::On::~On()+0x10>)
   182aa:	b510      	push	{r4, lr}
   182ac:	4604      	mov	r4, r0
   182ae:	6003      	str	r3, [r0, #0]
   182b0:	f7e8 f944 	bl	53c <Fw::Serializable::~Serializable()>
   182b4:	4620      	mov	r0, r4
   182b6:	bd10      	pop	{r4, pc}
   182b8:	2000326c 	.word	0x2000326c

000182bc <Fw::On::~On()>:
   182bc:	4b05      	ldr	r3, [pc, #20]	; (182d4 <Fw::On::~On()+0x18>)
   182be:	b510      	push	{r4, lr}
   182c0:	4604      	mov	r4, r0
   182c2:	6003      	str	r3, [r0, #0]
   182c4:	f7e8 f93a 	bl	53c <Fw::Serializable::~Serializable()>
   182c8:	2108      	movs	r1, #8
   182ca:	4620      	mov	r0, r4
   182cc:	f000 fd00 	bl	18cd0 <operator delete(void*, unsigned int)>
   182d0:	4620      	mov	r0, r4
   182d2:	bd10      	pop	{r4, pc}
   182d4:	2000326c 	.word	0x2000326c

000182d8 <Fw::On::operator=(Fw::On const&)>:
    this->e = obj.e;
   182d8:	790b      	ldrb	r3, [r1, #4]
   182da:	7103      	strb	r3, [r0, #4]
  }
   182dc:	4770      	bx	lr
   182de:	bf00      	nop

000182e0 <Fw::On::operator=(Fw::On::T)>:
    this->e = e1;
   182e0:	7101      	strb	r1, [r0, #4]
  }
   182e2:	4770      	bx	lr

000182e4 <Fw::On::isValid() const>:
    return ((e >= OFF) && (e <= ON));
   182e4:	7900      	ldrb	r0, [r0, #4]
  }
   182e6:	2801      	cmp	r0, #1
   182e8:	bf8c      	ite	hi
   182ea:	2000      	movhi	r0, #0
   182ec:	2001      	movls	r0, #1
   182ee:	4770      	bx	lr

000182f0 <Fw::Success::serialize(Fw::SerializeBufferBase&) const>:
    return ((e >= FAILURE) && (e <= SUCCESS));
  }

  Fw::SerializeStatus Success ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
   182f0:	460b      	mov	r3, r1
    const Fw::SerializeStatus status = buffer.serialize(
   182f2:	7901      	ldrb	r1, [r0, #4]
   182f4:	4618      	mov	r0, r3
   182f6:	f7e8 ba17 	b.w	728 <Fw::SerializeBufferBase::serialize(long)>
   182fa:	bf00      	nop

000182fc <Fw::Success::deserialize(Fw::SerializeBufferBase&)>:
    return status;
  }

  Fw::SerializeStatus Success ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
   182fc:	b510      	push	{r4, lr}
   182fe:	460a      	mov	r2, r1
   18300:	b082      	sub	sp, #8
   18302:	4604      	mov	r4, r0
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
   18304:	a901      	add	r1, sp, #4
   18306:	4610      	mov	r0, r2
   18308:	f7e8 fce8 	bl	cdc <Fw::SerializeBufferBase::deserialize(long&)>
    if (status == Fw::FW_SERIALIZE_OK) {
   1830c:	b938      	cbnz	r0, 1831e <Fw::Success::deserialize(Fw::SerializeBufferBase&)+0x22>
      this->e = static_cast<T>(es);
   1830e:	f89d 2004 	ldrb.w	r2, [sp, #4]
      if (!this->isValid()) {
   18312:	2a01      	cmp	r2, #1
      this->e = static_cast<T>(es);
   18314:	7122      	strb	r2, [r4, #4]
      if (!this->isValid()) {
   18316:	bf94      	ite	ls
   18318:	2300      	movls	r3, #0
   1831a:	2301      	movhi	r3, #1
   1831c:	0098      	lsls	r0, r3, #2
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }
   1831e:	b002      	add	sp, #8
   18320:	bd10      	pop	{r4, pc}
   18322:	bf00      	nop

00018324 <Fw::Success::toString(Fw::StringBase&) const>:

#if FW_SERIALIZABLE_TO_STRING

  void Success ::
    toString(Fw::StringBase& sb) const
  {
   18324:	b570      	push	{r4, r5, r6, lr}
   18326:	b0a2      	sub	sp, #136	; 0x88
   18328:	4604      	mov	r4, r0
    String() : StringBase() { *this = ""; }
   1832a:	4e14      	ldr	r6, [pc, #80]	; (1837c <Fw::Success::toString(Fw::StringBase&) const+0x58>)
   1832c:	460d      	mov	r5, r1
   1832e:	4668      	mov	r0, sp
   18330:	f7e8 ff76 	bl	1220 <Fw::StringBase::StringBase()>
        (void)StringBase::operator=(src);
   18334:	4912      	ldr	r1, [pc, #72]	; (18380 <Fw::Success::toString(Fw::StringBase&) const+0x5c>)
   18336:	4668      	mov	r0, sp
    String() : StringBase() { *this = ""; }
   18338:	9600      	str	r6, [sp, #0]
        (void)StringBase::operator=(src);
   1833a:	f7e8 ffd9 	bl	12f0 <Fw::StringBase::operator=(char const*)>
    Fw::String s;
    switch (e) {
   1833e:	7923      	ldrb	r3, [r4, #4]
   18340:	b18b      	cbz	r3, 18366 <Fw::Success::toString(Fw::StringBase&) const+0x42>
   18342:	2b01      	cmp	r3, #1
   18344:	d014      	beq.n	18370 <Fw::Success::toString(Fw::StringBase&) const+0x4c>
   18346:	490f      	ldr	r1, [pc, #60]	; (18384 <Fw::Success::toString(Fw::StringBase&) const+0x60>)
   18348:	4668      	mov	r0, sp
   1834a:	f7e8 ffd1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
   1834e:	7923      	ldrb	r3, [r4, #4]
   18350:	aa01      	add	r2, sp, #4
   18352:	490d      	ldr	r1, [pc, #52]	; (18388 <Fw::Success::toString(Fw::StringBase&) const+0x64>)
   18354:	4628      	mov	r0, r5
   18356:	f7e8 ff99 	bl	128c <Fw::StringBase::format(char const*, ...)>
    ~String() {}
   1835a:	4668      	mov	r0, sp
   1835c:	9600      	str	r6, [sp, #0]
   1835e:	f7e8 ff69 	bl	1234 <Fw::StringBase::~StringBase()>
  }
   18362:	b022      	add	sp, #136	; 0x88
   18364:	bd70      	pop	{r4, r5, r6, pc}
        (void)StringBase::operator=(src);
   18366:	4909      	ldr	r1, [pc, #36]	; (1838c <Fw::Success::toString(Fw::StringBase&) const+0x68>)
   18368:	4668      	mov	r0, sp
   1836a:	f7e8 ffc1 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   1836e:	e7ee      	b.n	1834e <Fw::Success::toString(Fw::StringBase&) const+0x2a>
        (void)StringBase::operator=(src);
   18370:	4907      	ldr	r1, [pc, #28]	; (18390 <Fw::Success::toString(Fw::StringBase&) const+0x6c>)
   18372:	4668      	mov	r0, sp
   18374:	f7e8 ffbc 	bl	12f0 <Fw::StringBase::operator=(char const*)>
        return *this;
   18378:	e7e9      	b.n	1834e <Fw::Success::toString(Fw::StringBase&) const+0x2a>
   1837a:	bf00      	nop
   1837c:	200032dc 	.word	0x200032dc
   18380:	20001d2c 	.word	0x20001d2c
   18384:	20002464 	.word	0x20002464
   18388:	20002470 	.word	0x20002470
   1838c:	200023ec 	.word	0x200023ec
   18390:	200023f4 	.word	0x200023f4

00018394 <Fw::Success::~Success()>:
   18394:	4b03      	ldr	r3, [pc, #12]	; (183a4 <Fw::Success::~Success()+0x10>)
   18396:	b510      	push	{r4, lr}
   18398:	4604      	mov	r4, r0
   1839a:	6003      	str	r3, [r0, #0]
   1839c:	f7e8 f8ce 	bl	53c <Fw::Serializable::~Serializable()>
   183a0:	4620      	mov	r0, r4
   183a2:	bd10      	pop	{r4, pc}
   183a4:	20003318 	.word	0x20003318

000183a8 <Fw::Success::~Success()>:
   183a8:	4b05      	ldr	r3, [pc, #20]	; (183c0 <Fw::Success::~Success()+0x18>)
   183aa:	b510      	push	{r4, lr}
   183ac:	4604      	mov	r4, r0
   183ae:	6003      	str	r3, [r0, #0]
   183b0:	f7e8 f8c4 	bl	53c <Fw::Serializable::~Serializable()>
   183b4:	2108      	movs	r1, #8
   183b6:	4620      	mov	r0, r4
   183b8:	f000 fc8a 	bl	18cd0 <operator delete(void*, unsigned int)>
   183bc:	4620      	mov	r0, r4
   183be:	bd10      	pop	{r4, pc}
   183c0:	20003318 	.word	0x20003318

000183c4 <_write>:

#ifdef FPRIME_ARUDINO_SYNTHETIC_WRITE
extern "C" {
#include <stdlib.h>
int _write( int handle, char *buf, int count) {
    char output[static_cast<unsigned int>(count + 1)];
   183c4:	f102 0308 	add.w	r3, r2, #8
    for (int i = 0; i < count; i++) {
   183c8:	2a00      	cmp	r2, #0
    char output[static_cast<unsigned int>(count + 1)];
   183ca:	f023 0307 	bic.w	r3, r3, #7
int _write( int handle, char *buf, int count) {
   183ce:	b5b0      	push	{r4, r5, r7, lr}
   183d0:	af00      	add	r7, sp, #0
    char output[static_cast<unsigned int>(count + 1)];
   183d2:	ebad 0d03 	sub.w	sp, sp, r3
int _write( int handle, char *buf, int count) {
   183d6:	4614      	mov	r4, r2
    char output[static_cast<unsigned int>(count + 1)];
   183d8:	466d      	mov	r5, sp
    for (int i = 0; i < count; i++) {
   183da:	dd02      	ble.n	183e2 <_write+0x1e>
        output[i] = buf[i];
   183dc:	4668      	mov	r0, sp
   183de:	f000 fbdb 	bl	18b98 <memcpy>
    }
    output[count] = '\0';
   183e2:	2300      	movs	r3, #0
    Fw::Logger::log(output);
   183e4:	4628      	mov	r0, r5
    output[count] = '\0';
   183e6:	552b      	strb	r3, [r5, r4]
    Fw::Logger::log(output);
   183e8:	f7e9 f96e 	bl	16c8 <Fw::Logger::log(char const*, ...)>
    return count;
}
   183ec:	4620      	mov	r0, r4
   183ee:	46bd      	mov	sp, r7
   183f0:	bdb0      	pop	{r4, r5, r7, pc}
   183f2:	bf00      	nop

000183f4 <operator new[](unsigned int, std::nothrow_t const&)>:
   183f4:	f00c b86e 	b.w	244d4 <malloc>

000183f8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
   183f8:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   183fa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   183fe:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   18400:	4c0c      	ldr	r4, [pc, #48]	; (18434 <EventResponder::runFromInterrupt()+0x3c>)
   18402:	6820      	ldr	r0, [r4, #0]
		if (first) {
   18404:	b180      	cbz	r0, 18428 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   18406:	4e0c      	ldr	r6, [pc, #48]	; (18438 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
   18408:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
   1840a:	6943      	ldr	r3, [r0, #20]
   1840c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
   1840e:	b173      	cbz	r3, 1842e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   18410:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   18412:	b902      	cbnz	r2, 18416 <EventResponder::runFromInterrupt()+0x1e>
   18414:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
   18416:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
   18418:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   1841a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1841c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   18420:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   18422:	6820      	ldr	r0, [r4, #0]
		if (first) {
   18424:	2800      	cmp	r0, #0
   18426:	d1f0      	bne.n	1840a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
   18428:	b902      	cbnz	r2, 1842c <EventResponder::runFromInterrupt()+0x34>
   1842a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
   1842c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
   1842e:	6033      	str	r3, [r6, #0]
   18430:	e7ef      	b.n	18412 <EventResponder::runFromInterrupt()+0x1a>
   18432:	bf00      	nop
   18434:	2000c980 	.word	0x2000c980
   18438:	2000c97c 	.word	0x2000c97c

0001843c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
   1843c:	f7ff bfdc 	b.w	183f8 <EventResponder::runFromInterrupt()>

00018440 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   18440:	4904      	ldr	r1, [pc, #16]	; (18454 <systick_isr+0x14>)
	systick_millis_count++;
   18442:	4a05      	ldr	r2, [pc, #20]	; (18458 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
   18444:	6849      	ldr	r1, [r1, #4]
   18446:	4b05      	ldr	r3, [pc, #20]	; (1845c <systick_isr+0x1c>)
   18448:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
   1844a:	6813      	ldr	r3, [r2, #0]
   1844c:	3301      	adds	r3, #1
   1844e:	6013      	str	r3, [r2, #0]
}
   18450:	4770      	bx	lr
   18452:	bf00      	nop
   18454:	e0001000 	.word	0xe0001000
   18458:	2000d36c 	.word	0x2000d36c
   1845c:	2000d368 	.word	0x2000d368

00018460 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
   18460:	4770      	bx	lr
   18462:	bf00      	nop

00018464 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   18464:	4770      	bx	lr
   18466:	bf00      	nop

00018468 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   18468:	4770      	bx	lr
   1846a:	bf00      	nop

0001846c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
   1846c:	4770      	bx	lr
   1846e:	bf00      	nop

00018470 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   18470:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   18472:	4c1a      	ldr	r4, [pc, #104]	; (184dc <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   18474:	4d1a      	ldr	r5, [pc, #104]	; (184e0 <pit_isr()+0x70>)
   18476:	6823      	ldr	r3, [r4, #0]
   18478:	42ab      	cmp	r3, r5
   1847a:	d002      	beq.n	18482 <pit_isr()+0x12>
   1847c:	4a19      	ldr	r2, [pc, #100]	; (184e4 <pit_isr()+0x74>)
   1847e:	68d1      	ldr	r1, [r2, #12]
   18480:	bb29      	cbnz	r1, 184ce <pit_isr()+0x5e>
   18482:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   18484:	42ab      	cmp	r3, r5
   18486:	d002      	beq.n	1848e <pit_isr()+0x1e>
   18488:	4a16      	ldr	r2, [pc, #88]	; (184e4 <pit_isr()+0x74>)
   1848a:	69d1      	ldr	r1, [r2, #28]
   1848c:	b9c9      	cbnz	r1, 184c2 <pit_isr()+0x52>
   1848e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   18490:	42ab      	cmp	r3, r5
   18492:	d002      	beq.n	1849a <pit_isr()+0x2a>
   18494:	4a13      	ldr	r2, [pc, #76]	; (184e4 <pit_isr()+0x74>)
   18496:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   18498:	b969      	cbnz	r1, 184b6 <pit_isr()+0x46>
   1849a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   1849c:	42ab      	cmp	r3, r5
   1849e:	d009      	beq.n	184b4 <pit_isr()+0x44>
   184a0:	4a10      	ldr	r2, [pc, #64]	; (184e4 <pit_isr()+0x74>)
   184a2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   184a4:	b131      	cbz	r1, 184b4 <pit_isr()+0x44>
   184a6:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	480f      	ldr	r0, [pc, #60]	; (184e8 <pit_isr()+0x78>)
   184ac:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
   184ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   184b2:	4718      	bx	r3
   184b4:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   184b6:	2101      	movs	r1, #1
   184b8:	681b      	ldr	r3, [r3, #0]
   184ba:	480c      	ldr	r0, [pc, #48]	; (184ec <pit_isr()+0x7c>)
   184bc:	62d1      	str	r1, [r2, #44]	; 0x2c
   184be:	4798      	blx	r3
        );
   184c0:	e7eb      	b.n	1849a <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   184c2:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   184c4:	681b      	ldr	r3, [r3, #0]
   184c6:	480a      	ldr	r0, [pc, #40]	; (184f0 <pit_isr()+0x80>)
   184c8:	61d1      	str	r1, [r2, #28]
   184ca:	4798      	blx	r3
        );
   184cc:	e7df      	b.n	1848e <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   184ce:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   184d0:	681b      	ldr	r3, [r3, #0]
   184d2:	f104 0008 	add.w	r0, r4, #8
   184d6:	60d1      	str	r1, [r2, #12]
   184d8:	4798      	blx	r3
        );
   184da:	e7d2      	b.n	18482 <pit_isr()+0x12>
   184dc:	200066c0 	.word	0x200066c0
   184e0:	20001dc8 	.word	0x20001dc8
   184e4:	40084100 	.word	0x40084100
   184e8:	20006710 	.word	0x20006710
   184ec:	200066f8 	.word	0x200066f8
   184f0:	200066e0 	.word	0x200066e0

000184f4 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   184f4:	b538      	push	{r3, r4, r5, lr}
   184f6:	4c06      	ldr	r4, [pc, #24]	; (18510 <__tcf_0+0x1c>)
   184f8:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   184fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18500:	4620      	mov	r0, r4
   18502:	3c18      	subs	r4, #24
   18504:	68db      	ldr	r3, [r3, #12]
   18506:	4798      	blx	r3
   18508:	42ac      	cmp	r4, r5
   1850a:	d1f7      	bne.n	184fc <__tcf_0+0x8>
   1850c:	bd38      	pop	{r3, r4, r5, pc}
   1850e:	bf00      	nop
   18510:	20006710 	.word	0x20006710

00018514 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
   18514:	6803      	ldr	r3, [r0, #0]
{
   18516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1851a:	4604      	mov	r4, r0
   1851c:	b088      	sub	sp, #32
   1851e:	4617      	mov	r7, r2
	if (channel) {
   18520:	2b00      	cmp	r3, #0
   18522:	d04b      	beq.n	185bc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
   18524:	2200      	movs	r2, #0
   18526:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
   18528:	2201      	movs	r2, #1
   1852a:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
   1852c:	4d30      	ldr	r5, [pc, #192]	; (185f0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
   1852e:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   18530:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 18614 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
   18534:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
   18536:	f851 3b08 	ldr.w	r3, [r1], #8
   1853a:	112d      	asrs	r5, r5, #4
   1853c:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
   1853e:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   18540:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
   18544:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   18546:	00f6      	lsls	r6, r6, #3
   18548:	f106 0008 	add.w	r0, r6, #8
   1854c:	f858 3006 	ldr.w	r3, [r8, r6]
   18550:	4440      	add	r0, r8
   18552:	68db      	ldr	r3, [r3, #12]
   18554:	9001      	str	r0, [sp, #4]
   18556:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
   18558:	4a26      	ldr	r2, [pc, #152]	; (185f4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
   1855a:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
   1855c:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
   18560:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
   18562:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
   18566:	689b      	ldr	r3, [r3, #8]
   18568:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1856a:	9b02      	ldr	r3, [sp, #8]
   1856c:	a804      	add	r0, sp, #16
   1856e:	68db      	ldr	r3, [r3, #12]
   18570:	4798      	blx	r3
	channel->LDVAL = cycles;
   18572:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
   18574:	2203      	movs	r2, #3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   18576:	4820      	ldr	r0, [pc, #128]	; (185f8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
   18578:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
   1857a:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   1857c:	4a1f      	ldr	r2, [pc, #124]	; (185fc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
   1857e:	7923      	ldrb	r3, [r4, #4]
   18580:	4c1f      	ldr	r4, [pc, #124]	; (18600 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
   18582:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   18584:	7813      	ldrb	r3, [r2, #0]
   18586:	7851      	ldrb	r1, [r2, #1]
   18588:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
   1858c:	428b      	cmp	r3, r1
   1858e:	bf28      	it	cs
   18590:	460b      	movcs	r3, r1
   18592:	7891      	ldrb	r1, [r2, #2]
   18594:	78d2      	ldrb	r2, [r2, #3]
   18596:	428b      	cmp	r3, r1
   18598:	bf28      	it	cs
   1859a:	460b      	movcs	r3, r1
   1859c:	4293      	cmp	r3, r2
   1859e:	bf28      	it	cs
   185a0:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   185a2:	4c18      	ldr	r4, [pc, #96]	; (18604 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   185a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   185a8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
   185ac:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   185ae:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
   185b2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
   185b6:	b008      	add	sp, #32
   185b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   185bc:	4a12      	ldr	r2, [pc, #72]	; (18608 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
   185be:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   185c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   185c4:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
   185c6:	2201      	movs	r2, #1
   185c8:	4b10      	ldr	r3, [pc, #64]	; (1860c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
   185ca:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   185cc:	4a10      	ldr	r2, [pc, #64]	; (18610 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
   185ce:	4613      	mov	r3, r2
   185d0:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   185d2:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
   185d4:	6898      	ldr	r0, [r3, #8]
   185d6:	2800      	cmp	r0, #0
   185d8:	d0a8      	beq.n	1852c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   185da:	3310      	adds	r3, #16
   185dc:	4293      	cmp	r3, r2
   185de:	6023      	str	r3, [r4, #0]
   185e0:	d1f8      	bne.n	185d4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
   185e2:	2300      	movs	r3, #0
				return false;
   185e4:	4618      	mov	r0, r3
				channel = NULL;
   185e6:	6023      	str	r3, [r4, #0]
}
   185e8:	b008      	add	sp, #32
   185ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185ee:	bf00      	nop
   185f0:	bff7bf00 	.word	0xbff7bf00
   185f4:	20001dc8 	.word	0x20001dc8
   185f8:	20006400 	.word	0x20006400
   185fc:	20005a44 	.word	0x20005a44
   18600:	00018471 	.word	0x00018471
   18604:	e000e400 	.word	0xe000e400
   18608:	400fc000 	.word	0x400fc000
   1860c:	40084000 	.word	0x40084000
   18610:	40084100 	.word	0x40084100
   18614:	200066c0 	.word	0x200066c0

00018618 <IntervalTimer::end()>:
void IntervalTimer::end() {
   18618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
   1861a:	6803      	ldr	r3, [r0, #0]
   1861c:	b343      	cbz	r3, 18670 <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
   1861e:	4c15      	ldr	r4, [pc, #84]	; (18674 <IntervalTimer::end()+0x5c>)
   18620:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   18622:	4e15      	ldr	r6, [pc, #84]	; (18678 <IntervalTimer::end()+0x60>)
   18624:	441c      	add	r4, r3
   18626:	1124      	asrs	r4, r4, #4
   18628:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1862c:	00ed      	lsls	r5, r5, #3
   1862e:	5973      	ldr	r3, [r6, r5]
   18630:	f105 0008 	add.w	r0, r5, #8
   18634:	68db      	ldr	r3, [r3, #12]
   18636:	4430      	add	r0, r6
   18638:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   1863a:	4b10      	ldr	r3, [pc, #64]	; (1867c <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
   1863c:	2100      	movs	r1, #0
		channel->TFLG = 1;
   1863e:	2201      	movs	r2, #1
   18640:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
   18642:	683b      	ldr	r3, [r7, #0]
   18644:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
   18646:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
   18648:	23ff      	movs	r3, #255	; 0xff
   1864a:	4a0d      	ldr	r2, [pc, #52]	; (18680 <IntervalTimer::end()+0x68>)
   1864c:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   1864e:	7813      	ldrb	r3, [r2, #0]
   18650:	7850      	ldrb	r0, [r2, #1]
   18652:	7894      	ldrb	r4, [r2, #2]
   18654:	4283      	cmp	r3, r0
   18656:	bf28      	it	cs
   18658:	4603      	movcs	r3, r0
   1865a:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   1865c:	4a09      	ldr	r2, [pc, #36]	; (18684 <IntervalTimer::end()+0x6c>)
   1865e:	42a3      	cmp	r3, r4
   18660:	bf28      	it	cs
   18662:	4623      	movcs	r3, r4
   18664:	4283      	cmp	r3, r0
   18666:	bf28      	it	cs
   18668:	4603      	movcs	r3, r0
   1866a:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
   1866e:	6039      	str	r1, [r7, #0]
}
   18670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18672:	bf00      	nop
   18674:	bff7bf00 	.word	0xbff7bf00
   18678:	200066c0 	.word	0x200066c0
   1867c:	20001dc8 	.word	0x20001dc8
   18680:	20005a44 	.word	0x20005a44
   18684:	e000e400 	.word	0xe000e400

00018688 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
   18688:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
   1868a:	4b06      	ldr	r3, [pc, #24]	; (186a4 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   1868c:	2000      	movs	r0, #0
   1868e:	4c06      	ldr	r4, [pc, #24]	; (186a8 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
   18690:	4a06      	ldr	r2, [pc, #24]	; (186ac <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
   18692:	601c      	str	r4, [r3, #0]
   18694:	619c      	str	r4, [r3, #24]
   18696:	631c      	str	r4, [r3, #48]	; 0x30
   18698:	649c      	str	r4, [r3, #72]	; 0x48
   1869a:	4905      	ldr	r1, [pc, #20]	; (186b0 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
   1869c:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   186a0:	f001 be6e 	b.w	1a380 <__aeabi_atexit>
   186a4:	200066c0 	.word	0x200066c0
   186a8:	20001dc8 	.word	0x20001dc8
   186ac:	20005a58 	.word	0x20005a58
   186b0:	000184f5 	.word	0x000184f5

000186b4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   186b4:	49a2      	ldr	r1, [pc, #648]	; (18940 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   186b6:	4ba3      	ldr	r3, [pc, #652]	; (18944 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
   186b8:	4288      	cmp	r0, r1
{
   186ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
   186be:	4ca2      	ldr	r4, [pc, #648]	; (18948 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   186c0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   186c2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   186c4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
   186c8:	d91b      	bls.n	18702 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   186ca:	4ba0      	ldr	r3, [pc, #640]	; (1894c <set_arm_clock+0x298>)
   186cc:	4298      	cmp	r0, r3
   186ce:	f240 8102 	bls.w	188d6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   186d2:	1ac3      	subs	r3, r0, r3
   186d4:	499e      	ldr	r1, [pc, #632]	; (18950 <set_arm_clock+0x29c>)
   186d6:	0a1b      	lsrs	r3, r3, #8
   186d8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   186dc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   186e0:	09db      	lsrs	r3, r3, #7
   186e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   186e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   186ea:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   186ee:	428b      	cmp	r3, r1
   186f0:	bf28      	it	cs
   186f2:	460b      	movcs	r3, r1
   186f4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
   186f8:	4b96      	ldr	r3, [pc, #600]	; (18954 <set_arm_clock+0x2a0>)
   186fa:	fba3 3707 	umull	r3, r7, r3, r7
   186fe:	08ff      	lsrs	r7, r7, #3
   18700:	e004      	b.n	1870c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
   18702:	4f95      	ldr	r7, [pc, #596]	; (18958 <set_arm_clock+0x2a4>)
   18704:	42b8      	cmp	r0, r7
   18706:	bf8c      	ite	hi
   18708:	270e      	movhi	r7, #14
   1870a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   1870c:	498d      	ldr	r1, [pc, #564]	; (18944 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   1870e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   18712:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   18716:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   18718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1871c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   18720:	d20c      	bcs.n	1873c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   18722:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   18726:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   1872a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
   1872e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   18732:	680b      	ldr	r3, [r1, #0]
   18734:	2b00      	cmp	r3, #0
   18736:	dafc      	bge.n	18732 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   18738:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   1873c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
   18740:	d124      	bne.n	1878c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   18742:	4986      	ldr	r1, [pc, #536]	; (1895c <set_arm_clock+0x2a8>)
   18744:	690c      	ldr	r4, [r1, #16]
   18746:	4986      	ldr	r1, [pc, #536]	; (18960 <set_arm_clock+0x2ac>)
   18748:	43a1      	bics	r1, r4
   1874a:	f000 80ea 	beq.w	18922 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   1874e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
   18752:	4634      	mov	r4, r6
   18754:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   18758:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
   1875c:	d004      	beq.n	18768 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   1875e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   18762:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
   18764:	4b77      	ldr	r3, [pc, #476]	; (18944 <set_arm_clock+0x290>)
   18766:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   18768:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   1876c:	d007      	beq.n	1877e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   1876e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
   18772:	4974      	ldr	r1, [pc, #464]	; (18944 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   18774:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
   18776:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   18778:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1877a:	071a      	lsls	r2, r3, #28
   1877c:	d4fc      	bmi.n	18778 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   1877e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   18782:	4a70      	ldr	r2, [pc, #448]	; (18944 <set_arm_clock+0x290>)
   18784:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   18786:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18788:	069b      	lsls	r3, r3, #26
   1878a:	d4fc      	bmi.n	18786 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
   1878c:	4c75      	ldr	r4, [pc, #468]	; (18964 <set_arm_clock+0x2b0>)
   1878e:	42a0      	cmp	r0, r4
   18790:	f200 80ce 	bhi.w	18930 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
   18794:	f04f 0c01 	mov.w	ip, #1
   18798:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
   1879a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
   1879c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
   187a0:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
   187a4:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   187a8:	42a2      	cmp	r2, r4
   187aa:	d818      	bhi.n	187de <set_arm_clock+0x12a>
		if (div_arm < 8) {
   187ac:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
   187b0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
   187b4:	f040 808d 	bne.w	188d2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
   187b8:	f1bc 0f04 	cmp.w	ip, #4
   187bc:	f200 8091 	bhi.w	188e2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
   187c0:	180a      	adds	r2, r1, r0
   187c2:	42a2      	cmp	r2, r4
   187c4:	f200 80a4 	bhi.w	18910 <set_arm_clock+0x25c>
   187c8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
   187cc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
   187ce:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   187d2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
   187d6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   187da:	42a2      	cmp	r2, r4
   187dc:	d9e6      	bls.n	187ac <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   187de:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   187e2:	028c      	lsls	r4, r1, #10
   187e4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   187e8:	485f      	ldr	r0, [pc, #380]	; (18968 <set_arm_clock+0x2b4>)
   187ea:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
   187ec:	4a5f      	ldr	r2, [pc, #380]	; (1896c <set_arm_clock+0x2b8>)
   187ee:	4290      	cmp	r0, r2
   187f0:	d97f      	bls.n	188f2 <set_arm_clock+0x23e>
   187f2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 18998 <set_arm_clock+0x2e4>
   187f6:	226c      	movs	r2, #108	; 0x6c
   187f8:	485d      	ldr	r0, [pc, #372]	; (18970 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   187fa:	4d58      	ldr	r5, [pc, #352]	; (1895c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
   187fc:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   18800:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
   18804:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   18808:	f8df c190 	ldr.w	ip, [pc, #400]	; 1899c <set_arm_clock+0x2e8>
   1880c:	ea0e 0c0c 	and.w	ip, lr, ip
   18810:	45d4      	cmp	ip, sl
   18812:	d009      	beq.n	18828 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   18814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   18818:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   1881c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   18820:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   18822:	682a      	ldr	r2, [r5, #0]
   18824:	2a00      	cmp	r2, #0
   18826:	dafc      	bge.n	18822 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   18828:	4a46      	ldr	r2, [pc, #280]	; (18944 <set_arm_clock+0x290>)
   1882a:	6915      	ldr	r5, [r2, #16]
   1882c:	f005 0507 	and.w	r5, r5, #7
   18830:	429d      	cmp	r5, r3
   18832:	d003      	beq.n	1883c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   18834:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   18836:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18838:	03dd      	lsls	r5, r3, #15
   1883a:	d4fc      	bmi.n	18836 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1883c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   18840:	d009      	beq.n	18856 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   18842:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   18846:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
   1884a:	4a3e      	ldr	r2, [pc, #248]	; (18944 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   1884c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
   1884e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   18850:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18852:	0799      	lsls	r1, r3, #30
   18854:	d4fc      	bmi.n	18850 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   18856:	4947      	ldr	r1, [pc, #284]	; (18974 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
   18858:	4a47      	ldr	r2, [pc, #284]	; (18978 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1885a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   1885c:	4291      	cmp	r1, r2
   1885e:	d83c      	bhi.n	188da <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   18860:	4b46      	ldr	r3, [pc, #280]	; (1897c <set_arm_clock+0x2c8>)
   18862:	09c9      	lsrs	r1, r1, #7
   18864:	fba3 3101 	umull	r3, r1, r3, r1
   18868:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   1886a:	1e4b      	subs	r3, r1, #1
   1886c:	021b      	lsls	r3, r3, #8
   1886e:	ea86 0203 	eor.w	r2, r6, r3
   18872:	f412 7f40 	tst.w	r2, #768	; 0x300
   18876:	d006      	beq.n	18886 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   18878:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   1887c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
   18880:	4a30      	ldr	r2, [pc, #192]	; (18944 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   18882:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
   18884:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   18886:	4a2f      	ldr	r2, [pc, #188]	; (18944 <set_arm_clock+0x290>)
   18888:	6953      	ldr	r3, [r2, #20]
   1888a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1888e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   18890:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18892:	069b      	lsls	r3, r3, #26
   18894:	d4fc      	bmi.n	18890 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   18896:	4b3a      	ldr	r3, [pc, #232]	; (18980 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   18898:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1889a:	fba3 2300 	umull	r2, r3, r3, r0
   1889e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   188a2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
   188a6:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   188aa:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
   188ae:	4a35      	ldr	r2, [pc, #212]	; (18984 <set_arm_clock+0x2d0>)
   188b0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   188b2:	4a35      	ldr	r2, [pc, #212]	; (18988 <set_arm_clock+0x2d4>)
   188b4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   188b6:	4a35      	ldr	r2, [pc, #212]	; (1898c <set_arm_clock+0x2d8>)
   188b8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   188ba:	d208      	bcs.n	188ce <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   188bc:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   188c0:	4a21      	ldr	r2, [pc, #132]	; (18948 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   188c2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
   188c6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   188c8:	6813      	ldr	r3, [r2, #0]
   188ca:	2b00      	cmp	r3, #0
   188cc:	dafc      	bge.n	188c8 <set_arm_clock+0x214>
	}

	return frequency;
}
   188ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   188d2:	4673      	mov	r3, lr
   188d4:	e762      	b.n	1879c <set_arm_clock+0xe8>
   188d6:	2712      	movs	r7, #18
   188d8:	e718      	b.n	1870c <set_arm_clock+0x58>
   188da:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
   188de:	2104      	movs	r1, #4
   188e0:	e7c5      	b.n	1886e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   188e2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   188e6:	4820      	ldr	r0, [pc, #128]	; (18968 <set_arm_clock+0x2b4>)
   188e8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   188ea:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   188ec:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   188ee:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   188f2:	4a27      	ldr	r2, [pc, #156]	; (18990 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   188f4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 189a0 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   188f8:	fba2 2000 	umull	r2, r0, r2, r0
   188fc:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
   188fe:	4825      	ldr	r0, [pc, #148]	; (18994 <set_arm_clock+0x2e0>)
   18900:	2a36      	cmp	r2, #54	; 0x36
   18902:	bf38      	it	cc
   18904:	2236      	movcc	r2, #54	; 0x36
   18906:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   1890a:	ea42 0a0a 	orr.w	sl, r2, sl
   1890e:	e774      	b.n	187fa <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   18910:	ea4f 248c 	mov.w	r4, ip, lsl #10
   18914:	2300      	movs	r3, #0
   18916:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
   1891a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
   1891e:	46ac      	mov	ip, r5
   18920:	e762      	b.n	187e8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   18922:	461d      	mov	r5, r3
   18924:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
   18928:	4611      	mov	r1, r2
   1892a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   1892e:	e713      	b.n	18758 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
   18930:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
   18932:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   18936:	4602      	mov	r2, r0
   18938:	4631      	mov	r1, r6
   1893a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
   1893c:	46e6      	mov	lr, ip
   1893e:	e753      	b.n	187e8 <set_arm_clock+0x134>
   18940:	1f78a400 	.word	0x1f78a400
   18944:	400fc000 	.word	0x400fc000
   18948:	40080000 	.word	0x40080000
   1894c:	23c34600 	.word	0x23c34600
   18950:	004cb223 	.word	0x004cb223
   18954:	51eb851f 	.word	0x51eb851f
   18958:	016e3600 	.word	0x016e3600
   1895c:	400d8000 	.word	0x400d8000
   18960:	80003040 	.word	0x80003040
   18964:	269fb1ff 	.word	0x269fb1ff
   18968:	005b8d80 	.word	0x005b8d80
   1896c:	4df67eff 	.word	0x4df67eff
   18970:	4d3f6400 	.word	0x4d3f6400
   18974:	08f0d17f 	.word	0x08f0d17f
   18978:	2cb4177f 	.word	0x2cb4177f
   1897c:	00e5109f 	.word	0x00e5109f
   18980:	431bde83 	.word	0x431bde83
   18984:	20005a24 	.word	0x20005a24
   18988:	20005a20 	.word	0x20005a20
   1898c:	2000d364 	.word	0x2000d364
   18990:	165e9f81 	.word	0x165e9f81
   18994:	00b71b00 	.word	0x00b71b00
   18998:	8000206c 	.word	0x8000206c
   1899c:	8001307f 	.word	0x8001307f
   189a0:	80002000 	.word	0x80002000

000189a4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   189a4:	b900      	cbnz	r0, 189a8 <delay+0x4>
   189a6:	4770      	bx	lr
{
   189a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   189ac:	2101      	movs	r1, #1
   189ae:	4681      	mov	r9, r0
   189b0:	4c21      	ldr	r4, [pc, #132]	; (18a38 <delay+0x94>)
   189b2:	4d22      	ldr	r5, [pc, #136]	; (18a3c <delay+0x98>)
   189b4:	4e22      	ldr	r6, [pc, #136]	; (18a40 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   189b6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   189ba:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   189bc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   189be:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   189c2:	2b00      	cmp	r3, #0
   189c4:	d1f7      	bne.n	189b6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   189c6:	491f      	ldr	r1, [pc, #124]	; (18a44 <delay+0xa0>)
   189c8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   189ca:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   189ce:	f8df a078 	ldr.w	sl, [pc, #120]	; 18a48 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
   189d2:	1a1b      	subs	r3, r3, r0
   189d4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
   189d6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   189da:	f8da 2000 	ldr.w	r2, [sl]
   189de:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
   189e2:	455a      	cmp	r2, fp
   189e4:	bf94      	ite	ls
   189e6:	4490      	addls	r8, r2
   189e8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   189ea:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
   189ee:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   189f0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   189f2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   189f6:	2b00      	cmp	r3, #0
   189f8:	d1f7      	bne.n	189ea <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   189fa:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   189fc:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
   18a00:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
   18a02:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   18a06:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
   18a0a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
   18a0e:	bf94      	ite	ls
   18a10:	4462      	addls	r2, ip
   18a12:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
   18a16:	eba2 0208 	sub.w	r2, r2, r8
   18a1a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   18a1e:	d306      	bcc.n	18a2e <delay+0x8a>
			if (--msec == 0) return;
   18a20:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
   18a24:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
   18a28:	d1df      	bne.n	189ea <delay+0x46>
}
   18a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
   18a2e:	f001 fad7 	bl	19fe0 <yield>
		while ((micros() - start) >= 1000) {
   18a32:	4904      	ldr	r1, [pc, #16]	; (18a44 <delay+0xa0>)
   18a34:	e7d9      	b.n	189ea <delay+0x46>
   18a36:	bf00      	nop
   18a38:	2000d370 	.word	0x2000d370
   18a3c:	2000d36c 	.word	0x2000d36c
   18a40:	2000d368 	.word	0x2000d368
   18a44:	e0001000 	.word	0xe0001000
   18a48:	2000d364 	.word	0x2000d364

00018a4c <micros>:
{
   18a4c:	b430      	push	{r4, r5}
   18a4e:	4b0f      	ldr	r3, [pc, #60]	; (18a8c <micros+0x40>)
   18a50:	f04f 0c01 	mov.w	ip, #1
   18a54:	4d0e      	ldr	r5, [pc, #56]	; (18a90 <micros+0x44>)
   18a56:	4c0f      	ldr	r4, [pc, #60]	; (18a94 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   18a58:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   18a5c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   18a5e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   18a60:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   18a64:	2a00      	cmp	r2, #0
   18a66:	d1f7      	bne.n	18a58 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   18a68:	4b0b      	ldr	r3, [pc, #44]	; (18a98 <micros+0x4c>)
   18a6a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   18a6c:	4a0b      	ldr	r2, [pc, #44]	; (18a9c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
   18a6e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
   18a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   18a74:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
   18a76:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   18a7a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
   18a7e:	bc30      	pop	{r4, r5}
   18a80:	428a      	cmp	r2, r1
   18a82:	bf94      	ite	ls
   18a84:	1880      	addls	r0, r0, r2
   18a86:	1840      	addhi	r0, r0, r1
   18a88:	4770      	bx	lr
   18a8a:	bf00      	nop
   18a8c:	2000d370 	.word	0x2000d370
   18a90:	2000d36c 	.word	0x2000d36c
   18a94:	2000d368 	.word	0x2000d368
   18a98:	e0001000 	.word	0xe0001000
   18a9c:	2000d364 	.word	0x2000d364

00018aa0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   18aa0:	2836      	cmp	r0, #54	; 0x36
   18aa2:	d816      	bhi.n	18ad2 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
   18aa4:	0102      	lsls	r2, r0, #4
   18aa6:	4b10      	ldr	r3, [pc, #64]	; (18ae8 <digitalWrite+0x48>)
   18aa8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   18aac:	589b      	ldr	r3, [r3, r2]
{
   18aae:	b410      	push	{r4}
	mask = p->mask;
   18ab0:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
   18ab2:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
   18ab4:	4214      	tst	r4, r2
   18ab6:	d005      	beq.n	18ac4 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
   18ab8:	b961      	cbnz	r1, 18ad4 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   18aba:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
   18abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   18ac2:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   18ac4:	6883      	ldr	r3, [r0, #8]
		if (val) {
   18ac6:	b151      	cbz	r1, 18ade <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   18ac8:	4a08      	ldr	r2, [pc, #32]	; (18aec <digitalWrite+0x4c>)
}
   18aca:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   18ace:	601a      	str	r2, [r3, #0]
}
   18ad0:	4770      	bx	lr
   18ad2:	4770      	bx	lr
   18ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
   18ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   18adc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   18ade:	4a04      	ldr	r2, [pc, #16]	; (18af0 <digitalWrite+0x50>)
}
   18ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   18ae4:	601a      	str	r2, [r3, #0]
}
   18ae6:	4770      	bx	lr
   18ae8:	20004e98 	.word	0x20004e98
   18aec:	0001f038 	.word	0x0001f038
   18af0:	00013038 	.word	0x00013038

00018af4 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
   18af4:	2836      	cmp	r0, #54	; 0x36
   18af6:	d80b      	bhi.n	18b10 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   18af8:	4b06      	ldr	r3, [pc, #24]	; (18b14 <digitalRead+0x20>)
   18afa:	0102      	lsls	r2, r0, #4
   18afc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   18b00:	589a      	ldr	r2, [r3, r2]
   18b02:	68c3      	ldr	r3, [r0, #12]
   18b04:	6892      	ldr	r2, [r2, #8]
   18b06:	421a      	tst	r2, r3
   18b08:	bf14      	ite	ne
   18b0a:	2001      	movne	r0, #1
   18b0c:	2000      	moveq	r0, #0
   18b0e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   18b10:	2000      	movs	r0, #0
}
   18b12:	4770      	bx	lr
   18b14:	20004e98 	.word	0x20004e98

00018b18 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
   18b18:	2836      	cmp	r0, #54	; 0x36
   18b1a:	d829      	bhi.n	18b70 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
   18b1c:	4b16      	ldr	r3, [pc, #88]	; (18b78 <pinMode+0x60>)
   18b1e:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   18b20:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
   18b22:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   18b26:	589a      	ldr	r2, [r3, r2]
{
   18b28:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   18b2a:	6853      	ldr	r3, [r2, #4]
   18b2c:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   18b2e:	d00e      	beq.n	18b4e <pinMode+0x36>
   18b30:	2904      	cmp	r1, #4
   18b32:	d00c      	beq.n	18b4e <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   18b34:	ea23 0304 	bic.w	r3, r3, r4
   18b38:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   18b3a:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
   18b3c:	b1a9      	cbz	r1, 18b6a <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
   18b3e:	2902      	cmp	r1, #2
   18b40:	d017      	beq.n	18b72 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
   18b42:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   18b44:	bf0c      	ite	eq
   18b46:	4a0d      	ldreq	r2, [pc, #52]	; (18b7c <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   18b48:	4a0d      	ldrne	r2, [pc, #52]	; (18b80 <pinMode+0x68>)
   18b4a:	601a      	str	r2, [r3, #0]
   18b4c:	e007      	b.n	18b5e <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   18b4e:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
   18b50:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
   18b52:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   18b54:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
   18b56:	d008      	beq.n	18b6a <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   18b58:	f640 0238 	movw	r2, #2104	; 0x838
   18b5c:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
   18b5e:	6843      	ldr	r3, [r0, #4]
   18b60:	2215      	movs	r2, #21
}
   18b62:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
   18b66:	601a      	str	r2, [r3, #0]
}
   18b68:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
   18b6a:	2238      	movs	r2, #56	; 0x38
   18b6c:	601a      	str	r2, [r3, #0]
   18b6e:	e7f6      	b.n	18b5e <pinMode+0x46>
   18b70:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   18b72:	4a04      	ldr	r2, [pc, #16]	; (18b84 <pinMode+0x6c>)
   18b74:	601a      	str	r2, [r3, #0]
   18b76:	e7f2      	b.n	18b5e <pinMode+0x46>
   18b78:	20004e98 	.word	0x20004e98
   18b7c:	00013038 	.word	0x00013038
   18b80:	00010038 	.word	0x00010038
   18b84:	0001f038 	.word	0x0001f038

00018b88 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   18b88:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   18b8a:	f7e7 fa6d 	bl	68 <setup>
	while (1) {
		loop();
   18b8e:	f7e7 fab5 	bl	fc <loop>
		yield();
   18b92:	f001 fa25 	bl	19fe0 <yield>
	while (1) {
   18b96:	e7fa      	b.n	18b8e <main+0x6>

00018b98 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   18b98:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   18b9a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   18b9e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   18ba2:	d16d      	bne.n	18c80 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   18ba4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   18ba6:	d341      	bcc.n	18c2c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   18ba8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bac:	f840 3b04 	str.w	r3, [r0], #4
   18bb0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bb4:	f840 3b04 	str.w	r3, [r0], #4
   18bb8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bbc:	f840 3b04 	str.w	r3, [r0], #4
   18bc0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bc4:	f840 3b04 	str.w	r3, [r0], #4
   18bc8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bcc:	f840 3b04 	str.w	r3, [r0], #4
   18bd0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bd4:	f840 3b04 	str.w	r3, [r0], #4
   18bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bdc:	f840 3b04 	str.w	r3, [r0], #4
   18be0:	f851 3b04 	ldr.w	r3, [r1], #4
   18be4:	f840 3b04 	str.w	r3, [r0], #4
   18be8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bec:	f840 3b04 	str.w	r3, [r0], #4
   18bf0:	f851 3b04 	ldr.w	r3, [r1], #4
   18bf4:	f840 3b04 	str.w	r3, [r0], #4
   18bf8:	f851 3b04 	ldr.w	r3, [r1], #4
   18bfc:	f840 3b04 	str.w	r3, [r0], #4
   18c00:	f851 3b04 	ldr.w	r3, [r1], #4
   18c04:	f840 3b04 	str.w	r3, [r0], #4
   18c08:	f851 3b04 	ldr.w	r3, [r1], #4
   18c0c:	f840 3b04 	str.w	r3, [r0], #4
   18c10:	f851 3b04 	ldr.w	r3, [r1], #4
   18c14:	f840 3b04 	str.w	r3, [r0], #4
   18c18:	f851 3b04 	ldr.w	r3, [r1], #4
   18c1c:	f840 3b04 	str.w	r3, [r0], #4
   18c20:	f851 3b04 	ldr.w	r3, [r1], #4
   18c24:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   18c28:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   18c2a:	d2bd      	bcs.n	18ba8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   18c2c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   18c2e:	d311      	bcc.n	18c54 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   18c30:	f851 3b04 	ldr.w	r3, [r1], #4
   18c34:	f840 3b04 	str.w	r3, [r0], #4
   18c38:	f851 3b04 	ldr.w	r3, [r1], #4
   18c3c:	f840 3b04 	str.w	r3, [r0], #4
   18c40:	f851 3b04 	ldr.w	r3, [r1], #4
   18c44:	f840 3b04 	str.w	r3, [r0], #4
   18c48:	f851 3b04 	ldr.w	r3, [r1], #4
   18c4c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   18c50:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   18c52:	d2ed      	bcs.n	18c30 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   18c54:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   18c56:	d305      	bcc.n	18c64 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   18c58:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   18c5c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   18c60:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   18c62:	d2f9      	bcs.n	18c58 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   18c64:	3204      	adds	r2, #4
	beq	.Ldone
   18c66:	d008      	beq.n	18c7a <memcpy+0xe2>

	lsls	r2, r2, #31
   18c68:	07d2      	lsls	r2, r2, #31
	itt ne
   18c6a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   18c6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   18c70:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   18c74:	d301      	bcc.n	18c7a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   18c76:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   18c78:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   18c7a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   18c7c:	4770      	bx	lr
   18c7e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   18c80:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   18c82:	d313      	bcc.n	18cac <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   18c84:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   18c86:	d08d      	beq.n	18ba4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   18c88:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   18c8c:	d08a      	beq.n	18ba4 <memcpy+0xc>

	rsb	r3, #4
   18c8e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   18c92:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   18c94:	07db      	lsls	r3, r3, #31
	itt ne
   18c96:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   18c98:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   18c9c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   18ca0:	d380      	bcc.n	18ba4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   18ca2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   18ca6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   18caa:	e77b      	b.n	18ba4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   18cac:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   18cae:	d3d9      	bcc.n	18c64 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   18cb0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   18cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   18cb6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   18cba:	d2f9      	bcs.n	18cb0 <memcpy+0x118>

	ldrb	r3, [r1]
   18cbc:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   18cbe:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   18cc0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   18cc2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   18cc4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   18cc6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   18cc8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   18cca:	4770      	bx	lr

00018ccc <operator delete[](void*)>:
   18ccc:	f00b bc0a 	b.w	244e4 <free>

00018cd0 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
   18cd0:	f00b bc08 	b.w	244e4 <free>

00018cd4 <unused_interrupt_vector>:
	__disable_irq();
   18cd4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   18cd6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   18cda:	4c52      	ldr	r4, [pc, #328]	; (18e24 <unused_interrupt_vector+0x150>)
   18cdc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
   18ce0:	f01e 0f04 	tst.w	lr, #4
   18ce4:	bf0c      	ite	eq
   18ce6:	f3ef 8208 	mrseq	r2, MSP
   18cea:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
   18cee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
   18cf2:	4e4d      	ldr	r6, [pc, #308]	; (18e28 <unused_interrupt_vector+0x154>)
	while (p < end) {
   18cf4:	4d4d      	ldr	r5, [pc, #308]	; (18e2c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
   18cf6:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
   18cfa:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   18cfe:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
   18d02:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
   18d06:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   18d0a:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
   18d0e:	6993      	ldr	r3, [r2, #24]
   18d10:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   18d14:	69d3      	ldr	r3, [r2, #28]
   18d16:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   18d1a:	f000 f8d1 	bl	18ec0 <tempmonGetTemp>
   18d1e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   18d22:	f001 fab3 	bl	1a28c <rtc_get>
	info->len = sizeof(*info) / 4;
   18d26:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
   18d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
   18d2c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   18d30:	460b      	mov	r3, r1
   18d32:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   18d36:	493e      	ldr	r1, [pc, #248]	; (18e30 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
   18d38:	1d30      	adds	r0, r6, #4
   18d3a:	405a      	eors	r2, r3
   18d3c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   18d3e:	f002 0301 	and.w	r3, r2, #1
   18d42:	3c01      	subs	r4, #1
   18d44:	fb01 f303 	mul.w	r3, r1, r3
   18d48:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   18d4c:	d1f7      	bne.n	18d3e <unused_interrupt_vector+0x6a>
	while (p < end) {
   18d4e:	42a8      	cmp	r0, r5
   18d50:	d002      	beq.n	18d58 <unused_interrupt_vector+0x84>
		crc ^= *p++;
   18d52:	6873      	ldr	r3, [r6, #4]
   18d54:	4606      	mov	r6, r0
   18d56:	e7ef      	b.n	18d38 <unused_interrupt_vector+0x64>
	info->crc = crc;
   18d58:	4b32      	ldr	r3, [pc, #200]	; (18e24 <unused_interrupt_vector+0x150>)
   18d5a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
   18d5e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   18d62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18d66:	4930      	ldr	r1, [pc, #192]	; (18e28 <unused_interrupt_vector+0x154>)
   18d68:	4a32      	ldr	r2, [pc, #200]	; (18e34 <unused_interrupt_vector+0x160>)
   18d6a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
   18d6e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
   18d72:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18d76:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   18d7a:	4a2f      	ldr	r2, [pc, #188]	; (18e38 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
   18d7c:	2502      	movs	r5, #2
   18d7e:	482f      	ldr	r0, [pc, #188]	; (18e3c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   18d80:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18d82:	492f      	ldr	r1, [pc, #188]	; (18e40 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   18d84:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   18d88:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   18d8a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   18d8c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18d8e:	482d      	ldr	r0, [pc, #180]	; (18e44 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   18d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   18d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18d98:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18d9a:	680b      	ldr	r3, [r1, #0]
   18d9c:	4283      	cmp	r3, r0
   18d9e:	d83d      	bhi.n	18e1c <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
   18da0:	4d26      	ldr	r5, [pc, #152]	; (18e3c <unused_interrupt_vector+0x168>)
   18da2:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
   18da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
   18dac:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   18dae:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
   18db0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   18db4:	4924      	ldr	r1, [pc, #144]	; (18e48 <unused_interrupt_vector+0x174>)
   18db6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   18dba:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   18dbe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   18dc2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   18dc6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   18dca:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   18dce:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
   18dd2:	e001      	b.n	18dd8 <unused_interrupt_vector+0x104>
		usb_isr();
   18dd4:	f000 f966 	bl	190a4 <usb_isr>
		if (PIT_TFLG0) {
   18dd8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   18ddc:	2b00      	cmp	r3, #0
   18dde:	d0f9      	beq.n	18dd4 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
   18de0:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
   18de2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   18de6:	2c4f      	cmp	r4, #79	; 0x4f
   18de8:	d9f4      	bls.n	18dd4 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   18dea:	4b18      	ldr	r3, [pc, #96]	; (18e4c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
   18dec:	2002      	movs	r0, #2
   18dee:	4918      	ldr	r1, [pc, #96]	; (18e50 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   18df0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
   18df4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   18df8:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   18dfa:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   18dfe:	b93b      	cbnz	r3, 18e10 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
   18e00:	4814      	ldr	r0, [pc, #80]	; (18e54 <unused_interrupt_vector+0x180>)
   18e02:	4915      	ldr	r1, [pc, #84]	; (18e58 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   18e04:	4a0d      	ldr	r2, [pc, #52]	; (18e3c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
   18e06:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   18e08:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   18e0c:	2b00      	cmp	r3, #0
   18e0e:	d0fa      	beq.n	18e06 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
   18e10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18e14:	4a11      	ldr	r2, [pc, #68]	; (18e5c <unused_interrupt_vector+0x188>)
   18e16:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   18e1a:	e7fe      	b.n	18e1a <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18e1c:	f7ff fc4a 	bl	186b4 <set_arm_clock>
   18e20:	e7be      	b.n	18da0 <unused_interrupt_vector+0xcc>
   18e22:	bf00      	nop
   18e24:	2027ff00 	.word	0x2027ff00
   18e28:	2027ff80 	.word	0x2027ff80
   18e2c:	2027ffa8 	.word	0x2027ffa8
   18e30:	edb88320 	.word	0xedb88320
   18e34:	2027ffa0 	.word	0x2027ffa0
   18e38:	400fc000 	.word	0x400fc000
   18e3c:	40084000 	.word	0x40084000
   18e40:	20005a24 	.word	0x20005a24
   18e44:	0bcd3d80 	.word	0x0bcd3d80
   18e48:	00249f00 	.word	0x00249f00
   18e4c:	400d9000 	.word	0x400d9000
   18e50:	402e0000 	.word	0x402e0000
   18e54:	400f8000 	.word	0x400f8000
   18e58:	0bad00f1 	.word	0x0bad00f1
   18e5c:	05fa0004 	.word	0x05fa0004

00018e60 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
   18e60:	490a      	ldr	r1, [pc, #40]	; (18e8c <_sbrk+0x2c>)
   18e62:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
   18e64:	b138      	cbz	r0, 18e76 <_sbrk+0x16>
{
   18e66:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
   18e68:	1813      	adds	r3, r2, r0
   18e6a:	4809      	ldr	r0, [pc, #36]	; (18e90 <_sbrk+0x30>)
   18e6c:	4283      	cmp	r3, r0
   18e6e:	d804      	bhi.n	18e7a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   18e70:	4610      	mov	r0, r2
                __brkval = prev + incr;
   18e72:	600b      	str	r3, [r1, #0]
}
   18e74:	bd08      	pop	{r3, pc}
   18e76:	4610      	mov	r0, r2
   18e78:	4770      	bx	lr
                        errno = ENOMEM;
   18e7a:	f009 fd4b 	bl	22914 <__errno>
   18e7e:	230c      	movs	r3, #12
                        return (void *)-1;
   18e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
   18e84:	6003      	str	r3, [r0, #0]
}
   18e86:	4610      	mov	r0, r2
   18e88:	bd08      	pop	{r3, pc}
   18e8a:	bf00      	nop
   18e8c:	20005a54 	.word	0x20005a54
   18e90:	20280000 	.word	0x20280000

00018e94 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   18e94:	2000      	movs	r0, #0
   18e96:	4770      	bx	lr

00018e98 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   18e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e9c:	4770      	bx	lr
   18e9e:	bf00      	nop

00018ea0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   18ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
   18ea4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   18ea6:	604b      	str	r3, [r1, #4]
}
   18ea8:	4770      	bx	lr
   18eaa:	bf00      	nop

00018eac <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   18eac:	2001      	movs	r0, #1
   18eae:	4770      	bx	lr

00018eb0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   18eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18eb4:	4770      	bx	lr
   18eb6:	bf00      	nop

00018eb8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   18eb8:	bf30      	wfi
   18eba:	e7fd      	b.n	18eb8 <abort>

00018ebc <Panic_Temp_isr>:
  unused_interrupt_vector();
   18ebc:	f7ff bf0a 	b.w	18cd4 <unused_interrupt_vector>

00018ec0 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   18ec0:	4a12      	ldr	r2, [pc, #72]	; (18f0c <tempmonGetTemp+0x4c>)
   18ec2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   18ec6:	075b      	lsls	r3, r3, #29
   18ec8:	d5fb      	bpl.n	18ec2 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   18eca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   18ece:	4810      	ldr	r0, [pc, #64]	; (18f10 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   18ed0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   18ed4:	490f      	ldr	r1, [pc, #60]	; (18f14 <tempmonGetTemp+0x54>)
   18ed6:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   18eda:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   18ede:	ed91 6a00 	vldr	s12, [r1]
   18ee2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   18ee6:	4a0c      	ldr	r2, [pc, #48]	; (18f18 <tempmonGetTemp+0x58>)
   18ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   18eec:	4b0b      	ldr	r3, [pc, #44]	; (18f1c <tempmonGetTemp+0x5c>)
   18eee:	edd2 6a00 	vldr	s13, [r2]
   18ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   18ef6:	ed93 7a00 	vldr	s14, [r3]
   18efa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   18efe:	ee67 7a86 	vmul.f32	s15, s15, s12
   18f02:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   18f06:	ee37 0a40 	vsub.f32	s0, s14, s0
   18f0a:	4770      	bx	lr
   18f0c:	400d8100 	.word	0x400d8100
   18f10:	2000d354 	.word	0x2000d354
   18f14:	2000d35c 	.word	0x2000d35c
   18f18:	2000d360 	.word	0x2000d360
   18f1c:	2000d358 	.word	0x2000d358

00018f20 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   18f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   18f22:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
   18f24:	b11b      	cbz	r3, 18f2e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   18f26:	6853      	ldr	r3, [r2, #4]
   18f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   18f2c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   18f2e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   18f30:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   18f32:	b33c      	cbz	r4, 18f84 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   18f34:	4b1a      	ldr	r3, [pc, #104]	; (18fa0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
   18f36:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   18f38:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   18f3c:	420c      	tst	r4, r1
   18f3e:	d11d      	bne.n	18f7c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   18f40:	4e18      	ldr	r6, [pc, #96]	; (18fa4 <schedule_transfer+0x84>)
   18f42:	6877      	ldr	r7, [r6, #4]
   18f44:	e004      	b.n	18f50 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   18f46:	6874      	ldr	r4, [r6, #4]
   18f48:	1be4      	subs	r4, r4, r7
   18f4a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   18f4e:	d20b      	bcs.n	18f68 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   18f50:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   18f54:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   18f58:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   18f5c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   18f60:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   18f64:	0464      	lsls	r4, r4, #17
   18f66:	d5ee      	bpl.n	18f46 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   18f68:	400d      	ands	r5, r1
   18f6a:	d107      	bne.n	18f7c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
   18f6c:	4c0c      	ldr	r4, [pc, #48]	; (18fa0 <schedule_transfer+0x80>)
		endpoint->status = 0;
   18f6e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
   18f72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   18f76:	430b      	orrs	r3, r1
   18f78:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
   18f7c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   18f7e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   18f80:	bcf0      	pop	{r4, r5, r6, r7}
   18f82:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
   18f84:	4d06      	ldr	r5, [pc, #24]	; (18fa0 <schedule_transfer+0x80>)
	endpoint->status = 0;
   18f86:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
   18f8a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   18f8e:	430b      	orrs	r3, r1
   18f90:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   18f94:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
   18f96:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   18f98:	b662      	cpsie	i
}
   18f9a:	bcf0      	pop	{r4, r5, r6, r7}
   18f9c:	4770      	bx	lr
   18f9e:	bf00      	nop
   18fa0:	402e0000 	.word	0x402e0000
   18fa4:	e0001000 	.word	0xe0001000

00018fa8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   18fa8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   18faa:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   18fac:	b19d      	cbz	r5, 18fd6 <run_callbacks+0x2e>
   18fae:	4606      	mov	r6, r0
   18fb0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
   18fb2:	2400      	movs	r4, #0
   18fb4:	e003      	b.n	18fbe <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   18fb6:	6812      	ldr	r2, [r2, #0]
		count++;
   18fb8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
   18fba:	2a01      	cmp	r2, #1
   18fbc:	d00c      	beq.n	18fd8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
   18fbe:	6853      	ldr	r3, [r2, #4]
   18fc0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   18fc4:	d0f7      	beq.n	18fb6 <run_callbacks+0xe>
			ep->first_transfer = t;
   18fc6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   18fc8:	b12c      	cbz	r4, 18fd6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
   18fca:	4628      	mov	r0, r5
		ep->callback_function(first);
   18fcc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
   18fce:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   18fd0:	4798      	blx	r3
	while (count) {
   18fd2:	3c01      	subs	r4, #1
   18fd4:	d1f9      	bne.n	18fca <run_callbacks+0x22>
		first = next;
		count--;
	}
}
   18fd6:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
   18fd8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
   18fdc:	e7f4      	b.n	18fc8 <run_callbacks+0x20>
   18fde:	bf00      	nop

00018fe0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   18fe0:	b430      	push	{r4, r5}
	if (len > 0) {
   18fe2:	b9d9      	cbnz	r1, 1901c <endpoint0_transmit.constprop.0+0x3c>
   18fe4:	4c1f      	ldr	r4, [pc, #124]	; (19064 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
   18fe6:	4b20      	ldr	r3, [pc, #128]	; (19068 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
   18fe8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   18fea:	4a20      	ldr	r2, [pc, #128]	; (1906c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
   18fec:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   18fee:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
   18ff2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   18ff4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
   18ff6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   18ffa:	2480      	movs	r4, #128	; 0x80
   18ffc:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   18ffe:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   19002:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   19006:	481a      	ldr	r0, [pc, #104]	; (19070 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
   19008:	432b      	orrs	r3, r5
   1900a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   1900e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
   19010:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   19014:	2b00      	cmp	r3, #0
   19016:	d1fb      	bne.n	19010 <endpoint0_transmit.constprop.0+0x30>
}
   19018:	bc30      	pop	{r4, r5}
   1901a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1901c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
   1901e:	4b15      	ldr	r3, [pc, #84]	; (19074 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   19020:	4c10      	ldr	r4, [pc, #64]	; (19064 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
   19022:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   19024:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   19028:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
   1902a:	4a10      	ldr	r2, [pc, #64]	; (1906c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1902c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1902e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   19032:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   19034:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   19036:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   1903a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1903c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1903e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   19042:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   19046:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
   19048:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
   1904a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
   1904c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   1904e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   19052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19056:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   1905a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   1905e:	2b00      	cmp	r3, #0
   19060:	d1fb      	bne.n	1905a <endpoint0_transmit.constprop.0+0x7a>
   19062:	e7c0      	b.n	18fe6 <endpoint0_transmit.constprop.0+0x6>
   19064:	20000000 	.word	0x20000000
   19068:	20006720 	.word	0x20006720
   1906c:	402e0000 	.word	0x402e0000
   19070:	2000d298 	.word	0x2000d298
   19074:	20006740 	.word	0x20006740

00019078 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   19078:	4908      	ldr	r1, [pc, #32]	; (1909c <usb_stop_sof_interrupts+0x24>)
   1907a:	2201      	movs	r2, #1
   1907c:	780b      	ldrb	r3, [r1, #0]
   1907e:	fa02 f000 	lsl.w	r0, r2, r0
   19082:	ea23 0000 	bic.w	r0, r3, r0
   19086:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
   19088:	b930      	cbnz	r0, 19098 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   1908a:	4a05      	ldr	r2, [pc, #20]	; (190a0 <usb_stop_sof_interrupts+0x28>)
   1908c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   19090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19094:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   19098:	4770      	bx	lr
   1909a:	bf00      	nop
   1909c:	2000d398 	.word	0x2000d398
   190a0:	402e0000 	.word	0x402e0000

000190a4 <usb_isr>:
{
   190a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
   190a8:	4c97      	ldr	r4, [pc, #604]	; (19308 <usb_isr+0x264>)
{
   190aa:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
   190ac:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   190b0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
   190b2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   190b6:	d553      	bpl.n	19160 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   190b8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   190bc:	2a00      	cmp	r2, #0
   190be:	d04a      	beq.n	19156 <usb_isr+0xb2>
   190c0:	4e92      	ldr	r6, [pc, #584]	; (1930c <usb_isr+0x268>)
   190c2:	f8df a260 	ldr.w	sl, [pc, #608]	; 19324 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
   190c6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1933c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   190ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 19340 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   190ce:	f8df 8274 	ldr.w	r8, [pc, #628]	; 19344 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
   190d2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
   190d6:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
   190da:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   190de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   190e2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   190e6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   190ea:	049d      	lsls	r5, r3, #18
   190ec:	d5f5      	bpl.n	190da <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   190ee:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   190f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   190f6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   190fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   190fe:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   19102:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
   19106:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
   1910a:	d1fa      	bne.n	19102 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
   1910c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
   1910e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
   19110:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
   19114:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   19118:	f000 81cf 	beq.w	194ba <usb_isr+0x416>
   1911c:	f200 80db 	bhi.w	192d6 <usb_isr+0x232>
   19120:	f240 3102 	movw	r1, #770	; 0x302
   19124:	428b      	cmp	r3, r1
   19126:	f000 81e7 	beq.w	194f8 <usb_isr+0x454>
   1912a:	f200 809a 	bhi.w	19262 <usb_isr+0x1be>
   1912e:	2b82      	cmp	r3, #130	; 0x82
   19130:	f000 81cb 	beq.w	194ca <usb_isr+0x426>
   19134:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   19138:	f040 808a 	bne.w	19250 <usb_isr+0x1ac>
		if (endpoint > 7) break;
   1913c:	f010 0f78 	tst.w	r0, #120	; 0x78
   19140:	b283      	uxth	r3, r0
   19142:	f000 8203 	beq.w	1954c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   19146:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1914a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   1914e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   19152:	2a00      	cmp	r2, #0
   19154:	d1bd      	bne.n	190d2 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   19156:	4a6c      	ldr	r2, [pc, #432]	; (19308 <usb_isr+0x264>)
   19158:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   1915c:	2b00      	cmp	r3, #0
   1915e:	d142      	bne.n	191e6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
   19160:	067e      	lsls	r6, r7, #25
   19162:	d516      	bpl.n	19192 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   19164:	4b68      	ldr	r3, [pc, #416]	; (19308 <usb_isr+0x264>)
   19166:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   1916a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   1916e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   19172:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   19176:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   1917a:	2c00      	cmp	r4, #0
   1917c:	d1fb      	bne.n	19176 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   1917e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19182:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   19186:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   1918a:	f000 fd2d 	bl	19be8 <usb_serial_reset>
		endpointN_notify_mask = 0;
   1918e:	4b60      	ldr	r3, [pc, #384]	; (19310 <usb_isr+0x26c>)
   19190:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   19192:	01fc      	lsls	r4, r7, #7
   19194:	d503      	bpl.n	1919e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   19196:	4b5f      	ldr	r3, [pc, #380]	; (19314 <usb_isr+0x270>)
   19198:	681b      	ldr	r3, [r3, #0]
   1919a:	b103      	cbz	r3, 1919e <usb_isr+0xfa>
   1919c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   1919e:	01b8      	lsls	r0, r7, #6
   191a0:	d503      	bpl.n	191aa <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   191a2:	4b5d      	ldr	r3, [pc, #372]	; (19318 <usb_isr+0x274>)
   191a4:	681b      	ldr	r3, [r3, #0]
   191a6:	b103      	cbz	r3, 191aa <usb_isr+0x106>
   191a8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   191aa:	0779      	lsls	r1, r7, #29
   191ac:	d508      	bpl.n	191c0 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   191ae:	4b56      	ldr	r3, [pc, #344]	; (19308 <usb_isr+0x264>)
   191b0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   191b4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   191b8:	d047      	beq.n	1924a <usb_isr+0x1a6>
			usb_high_speed = 1;
   191ba:	4b58      	ldr	r3, [pc, #352]	; (1931c <usb_isr+0x278>)
   191bc:	2201      	movs	r2, #1
   191be:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   191c0:	4b51      	ldr	r3, [pc, #324]	; (19308 <usb_isr+0x264>)
   191c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   191c6:	061a      	lsls	r2, r3, #24
   191c8:	d50a      	bpl.n	191e0 <usb_isr+0x13c>
   191ca:	063b      	lsls	r3, r7, #24
   191cc:	d508      	bpl.n	191e0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
   191ce:	4a54      	ldr	r2, [pc, #336]	; (19320 <usb_isr+0x27c>)
   191d0:	7813      	ldrb	r3, [r2, #0]
   191d2:	b12b      	cbz	r3, 191e0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
   191d4:	3b01      	subs	r3, #1
   191d6:	b2db      	uxtb	r3, r3
   191d8:	7013      	strb	r3, [r2, #0]
   191da:	2b00      	cmp	r3, #0
   191dc:	f000 8272 	beq.w	196c4 <usb_isr+0x620>
}
   191e0:	b003      	add	sp, #12
   191e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
   191e6:	494f      	ldr	r1, [pc, #316]	; (19324 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
   191e8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   191ec:	6808      	ldr	r0, [r1, #0]
   191ee:	4203      	tst	r3, r0
   191f0:	f040 81d1 	bne.w	19596 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
   191f4:	4a46      	ldr	r2, [pc, #280]	; (19310 <usb_isr+0x26c>)
   191f6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
   191f8:	401c      	ands	r4, r3
   191fa:	d0b1      	beq.n	19160 <usb_isr+0xbc>
				while (tx) {
   191fc:	ea5f 4814 	movs.w	r8, r4, lsr #16
   19200:	d010      	beq.n	19224 <usb_isr+0x180>
   19202:	4e42      	ldr	r6, [pc, #264]	; (1930c <usb_isr+0x268>)
					tx &= ~(1<<p);
   19204:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
   19208:	fa98 f5a8 	rbit	r5, r8
   1920c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   19210:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
   19214:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   19218:	3040      	adds	r0, #64	; 0x40
   1921a:	f7ff fec5 	bl	18fa8 <run_callbacks>
				while (tx) {
   1921e:	ea38 0805 	bics.w	r8, r8, r5
   19222:	d1f1      	bne.n	19208 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
   19224:	b2a4      	uxth	r4, r4
				while(rx) {
   19226:	2c00      	cmp	r4, #0
   19228:	d09a      	beq.n	19160 <usb_isr+0xbc>
   1922a:	4e38      	ldr	r6, [pc, #224]	; (1930c <usb_isr+0x268>)
					rx &= ~(1<<p);
   1922c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
   19230:	fa94 f5a4 	rbit	r5, r4
   19234:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
   19238:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
   1923c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
   19240:	f7ff feb2 	bl	18fa8 <run_callbacks>
				while(rx) {
   19244:	43ac      	bics	r4, r5
   19246:	d1f3      	bne.n	19230 <usb_isr+0x18c>
   19248:	e78a      	b.n	19160 <usb_isr+0xbc>
			usb_high_speed = 0;
   1924a:	4a34      	ldr	r2, [pc, #208]	; (1931c <usb_isr+0x278>)
   1924c:	7013      	strb	r3, [r2, #0]
   1924e:	e7b7      	b.n	191c0 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
   19250:	2b80      	cmp	r3, #128	; 0x80
   19252:	f47f af78 	bne.w	19146 <usb_isr+0xa2>
		reply_buffer[0] = 0;
   19256:	4834      	ldr	r0, [pc, #208]	; (19328 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
   19258:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
   1925a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   1925c:	f7ff fec0 	bl	18fe0 <endpoint0_transmit.constprop.0>
		return;
   19260:	e775      	b.n	1914e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
   19262:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   19266:	f000 810b 	beq.w	19480 <usb_isr+0x3dc>
   1926a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
   1926e:	2b01      	cmp	r3, #1
   19270:	f63f af69 	bhi.w	19146 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   19274:	4b2d      	ldr	r3, [pc, #180]	; (1932c <usb_isr+0x288>)
   19276:	685d      	ldr	r5, [r3, #4]
   19278:	2d00      	cmp	r5, #0
   1927a:	f43f af64 	beq.w	19146 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1927e:	fa1f fc8c 	uxth.w	ip, ip
   19282:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   19286:	e004      	b.n	19292 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   19288:	691d      	ldr	r5, [r3, #16]
   1928a:	330c      	adds	r3, #12
   1928c:	2d00      	cmp	r5, #0
   1928e:	f43f af5a 	beq.w	19146 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   19292:	881a      	ldrh	r2, [r3, #0]
   19294:	4572      	cmp	r2, lr
   19296:	d1f7      	bne.n	19288 <usb_isr+0x1e4>
   19298:	885a      	ldrh	r2, [r3, #2]
   1929a:	4562      	cmp	r2, ip
   1929c:	d1f4      	bne.n	19288 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
   1929e:	ea4f 221e 	mov.w	r2, lr, lsr #8
   192a2:	2a03      	cmp	r2, #3
   192a4:	f000 81a5 	beq.w	195f2 <usb_isr+0x54e>
					datalen = list->length;
   192a8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   192aa:	0c00      	lsrs	r0, r0, #16
   192ac:	4282      	cmp	r2, r0
   192ae:	bf28      	it	cs
   192b0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
   192b2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   192b6:	f040 81a1 	bne.w	195fc <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
   192ba:	4b18      	ldr	r3, [pc, #96]	; (1931c <usb_isr+0x278>)
   192bc:	491c      	ldr	r1, [pc, #112]	; (19330 <usb_isr+0x28c>)
   192be:	7818      	ldrb	r0, [r3, #0]
   192c0:	4b1c      	ldr	r3, [pc, #112]	; (19334 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
   192c2:	9201      	str	r2, [sp, #4]
   192c4:	2800      	cmp	r0, #0
   192c6:	bf18      	it	ne
   192c8:	4619      	movne	r1, r3
   192ca:	481b      	ldr	r0, [pc, #108]	; (19338 <usb_isr+0x294>)
   192cc:	f7ff fc64 	bl	18b98 <memcpy>
   192d0:	4d19      	ldr	r5, [pc, #100]	; (19338 <usb_isr+0x294>)
   192d2:	9a01      	ldr	r2, [sp, #4]
   192d4:	e1e1      	b.n	1969a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
   192d6:	f242 2121 	movw	r1, #8737	; 0x2221
   192da:	428b      	cmp	r3, r1
   192dc:	d07c      	beq.n	193d8 <usb_isr+0x334>
   192de:	d933      	bls.n	19348 <usb_isr+0x2a4>
   192e0:	f242 3121 	movw	r1, #8993	; 0x2321
   192e4:	428b      	cmp	r3, r1
   192e6:	f000 8081 	beq.w	193ec <usb_isr+0x348>
   192ea:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
   192ee:	428b      	cmp	r3, r1
   192f0:	f47f af29 	bne.w	19146 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
   192f4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
   192f8:	b283      	uxth	r3, r0
   192fa:	f47f af24 	bne.w	19146 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
   192fe:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
   19302:	f363 0c0f 	bfi	ip, r3, #0, #16
   19306:	e7b5      	b.n	19274 <usb_isr+0x1d0>
   19308:	402e0000 	.word	0x402e0000
   1930c:	20000000 	.word	0x20000000
   19310:	2000d29c 	.word	0x2000d29c
   19314:	2000d380 	.word	0x2000d380
   19318:	2000d384 	.word	0x2000d384
   1931c:	2000d39e 	.word	0x2000d39e
   19320:	2000d39f 	.word	0x2000d39f
   19324:	2000d298 	.word	0x2000d298
   19328:	2000d31c 	.word	0x2000d31c
   1932c:	20005858 	.word	0x20005858
   19330:	60001ed4 	.word	0x60001ed4
   19334:	60001f38 	.word	0x60001f38
   19338:	20200000 	.word	0x20200000
   1933c:	2000d290 	.word	0x2000d290
   19340:	b8c6cf5d 	.word	0xb8c6cf5d
   19344:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
   19348:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   1934c:	d066      	beq.n	1941c <usb_isr+0x378>
   1934e:	f242 0121 	movw	r1, #8225	; 0x2021
   19352:	428b      	cmp	r3, r1
   19354:	f47f aef7 	bne.w	19146 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
   19358:	0c03      	lsrs	r3, r0, #16
   1935a:	2b07      	cmp	r3, #7
   1935c:	f47f aef3 	bne.w	19146 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
   19360:	4bb2      	ldr	r3, [pc, #712]	; (1962c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
   19362:	49b3      	ldr	r1, [pc, #716]	; (19630 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
   19364:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   19366:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
   19368:	49b2      	ldr	r1, [pc, #712]	; (19634 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   1936a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   1936c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
   19370:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
   19374:	2201      	movs	r2, #1
   19376:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   19378:	4aaf      	ldr	r2, [pc, #700]	; (19638 <usb_isr+0x594>)
   1937a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1937c:	4aaf      	ldr	r2, [pc, #700]	; (1963c <usb_isr+0x598>)
   1937e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
   19380:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   19384:	f041 0101 	orr.w	r1, r1, #1
   19388:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1938c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   19390:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   19394:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   19396:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
   19398:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1939c:	2b00      	cmp	r3, #0
   1939e:	d1fb      	bne.n	19398 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
   193a0:	4aa7      	ldr	r2, [pc, #668]	; (19640 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   193a2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   193a4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
   193a6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   193a8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   193aa:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   193ac:	f248 0380 	movw	r3, #32896	; 0x8080
   193b0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   193b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   193b6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   193ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   193be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   193c2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   193c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   193ca:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
   193ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   193d2:	2b00      	cmp	r3, #0
   193d4:	d1fb      	bne.n	193ce <usb_isr+0x32a>
   193d6:	e6ba      	b.n	1914e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   193d8:	b280      	uxth	r0, r0
   193da:	b938      	cbnz	r0, 193ec <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   193dc:	4b99      	ldr	r3, [pc, #612]	; (19644 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
   193de:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   193e2:	6819      	ldr	r1, [r3, #0]
   193e4:	4b98      	ldr	r3, [pc, #608]	; (19648 <usb_isr+0x5a4>)
   193e6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   193e8:	4b98      	ldr	r3, [pc, #608]	; (1964c <usb_isr+0x5a8>)
   193ea:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
   193ec:	4b94      	ldr	r3, [pc, #592]	; (19640 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
   193ee:	2200      	movs	r2, #0
   193f0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
   193f2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   193f4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   193f6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   193f8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   193fa:	2280      	movs	r2, #128	; 0x80
   193fc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   193fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19402:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19406:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1940a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1940e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   19412:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19416:	2b00      	cmp	r3, #0
   19418:	d1fb      	bne.n	19412 <usb_isr+0x36e>
   1941a:	e698      	b.n	1914e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
   1941c:	f3c2 4207 	ubfx	r2, r2, #16, #8
   19420:	4b8b      	ldr	r3, [pc, #556]	; (19650 <usb_isr+0x5ac>)
   19422:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   19424:	4b8b      	ldr	r3, [pc, #556]	; (19654 <usb_isr+0x5b0>)
   19426:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   1942a:	4b8b      	ldr	r3, [pc, #556]	; (19658 <usb_isr+0x5b4>)
   1942c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   19430:	4b8a      	ldr	r3, [pc, #552]	; (1965c <usb_isr+0x5b8>)
   19432:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
   19436:	f000 fbd9 	bl	19bec <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
   1943a:	2280      	movs	r2, #128	; 0x80
   1943c:	4629      	mov	r1, r5
   1943e:	4888      	ldr	r0, [pc, #544]	; (19660 <usb_isr+0x5bc>)
   19440:	f00b fbd4 	bl	24bec <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   19444:	4b87      	ldr	r3, [pc, #540]	; (19664 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19446:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   19448:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   1944c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
   19450:	4b7b      	ldr	r3, [pc, #492]	; (19640 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   19452:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19454:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
   19456:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19458:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
   1945a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1945c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1945e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19462:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19466:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1946a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1946e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   19472:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
   19476:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1947a:	2b00      	cmp	r3, #0
   1947c:	d1fb      	bne.n	19476 <usb_isr+0x3d2>
   1947e:	e666      	b.n	1914e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
   19480:	4b6f      	ldr	r3, [pc, #444]	; (19640 <usb_isr+0x59c>)
   19482:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
   19484:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   19486:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19488:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
   1948a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1948c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1948e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   19490:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19494:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19498:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1949c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   194a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   194a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   194a8:	2b00      	cmp	r3, #0
   194aa:	d1fb      	bne.n	194a4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   194ac:	0c13      	lsrs	r3, r2, #16
   194ae:	065b      	lsls	r3, r3, #25
   194b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   194b4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
   194b8:	e649      	b.n	1914e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
   194ba:	4b65      	ldr	r3, [pc, #404]	; (19650 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
   194bc:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
   194be:	486a      	ldr	r0, [pc, #424]	; (19668 <usb_isr+0x5c4>)
   194c0:	781b      	ldrb	r3, [r3, #0]
   194c2:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   194c4:	f7ff fd8c 	bl	18fe0 <endpoint0_transmit.constprop.0>
		return;
   194c8:	e641      	b.n	1914e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   194ca:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
   194cc:	f010 0078 	ands.w	r0, r0, #120	; 0x78
   194d0:	f47f ae39 	bne.w	19146 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   194d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   194d8:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
   194dc:	4a62      	ldr	r2, [pc, #392]	; (19668 <usb_isr+0x5c4>)
   194de:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   194e0:	0618      	lsls	r0, r3, #24
   194e2:	f100 809e 	bmi.w	19622 <usb_isr+0x57e>
   194e6:	07cb      	lsls	r3, r1, #31
   194e8:	d501      	bpl.n	194ee <usb_isr+0x44a>
			reply_buffer[0] = 1;
   194ea:	2301      	movs	r3, #1
   194ec:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   194ee:	2102      	movs	r1, #2
   194f0:	485d      	ldr	r0, [pc, #372]	; (19668 <usb_isr+0x5c4>)
   194f2:	f7ff fd75 	bl	18fe0 <endpoint0_transmit.constprop.0>
		return;
   194f6:	e62a      	b.n	1914e <usb_isr+0xaa>
		if (endpoint > 7) break;
   194f8:	f010 0f78 	tst.w	r0, #120	; 0x78
   194fc:	b283      	uxth	r3, r0
   194fe:	f47f ae22 	bne.w	19146 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   19502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   19506:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   1950a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   1950e:	bf14      	ite	ne
   19510:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   19514:	f043 0301 	orreq.w	r3, r3, #1
   19518:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   1951c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   1951e:	4b48      	ldr	r3, [pc, #288]	; (19640 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   19520:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   19522:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   19524:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19526:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   19528:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1952a:	2280      	movs	r2, #128	; 0x80
   1952c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1952e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19532:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19536:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1953a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1953e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   19542:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19546:	2b00      	cmp	r3, #0
   19548:	d1fb      	bne.n	19542 <usb_isr+0x49e>
   1954a:	e600      	b.n	1914e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   1954c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   19550:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   19554:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   19558:	bf14      	ite	ne
   1955a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   1955e:	f023 0301 	biceq.w	r3, r3, #1
   19562:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   19566:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   19568:	4b35      	ldr	r3, [pc, #212]	; (19640 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1956a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1956c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1956e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19570:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   19572:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19574:	2280      	movs	r2, #128	; 0x80
   19576:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   19578:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1957c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19580:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19588:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1958c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19590:	2b00      	cmp	r3, #0
   19592:	d1fb      	bne.n	1958c <usb_isr+0x4e8>
   19594:	e5db      	b.n	1914e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
   19596:	2000      	movs	r0, #0
   19598:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   1959a:	4926      	ldr	r1, [pc, #152]	; (19634 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   1959c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   1959e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   195a0:	f242 0121 	movw	r1, #8225	; 0x2021
   195a4:	428c      	cmp	r4, r1
   195a6:	f47f ae25 	bne.w	191f4 <usb_isr+0x150>
   195aa:	b280      	uxth	r0, r0
   195ac:	2800      	cmp	r0, #0
   195ae:	f47f ae21 	bne.w	191f4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   195b2:	492e      	ldr	r1, [pc, #184]	; (1966c <usb_isr+0x5c8>)
   195b4:	4c2e      	ldr	r4, [pc, #184]	; (19670 <usb_isr+0x5cc>)
   195b6:	c903      	ldmia	r1, {r0, r1}
   195b8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
   195ba:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   195bc:	ea4f 4111 	mov.w	r1, r1, lsr #16
   195c0:	6020      	str	r0, [r4, #0]
   195c2:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
   195c4:	f47f ae16 	bne.w	191f4 <usb_isr+0x150>
	__disable_irq();
   195c8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   195ca:	482a      	ldr	r0, [pc, #168]	; (19674 <usb_isr+0x5d0>)
   195cc:	7801      	ldrb	r1, [r0, #0]
   195ce:	f041 0108 	orr.w	r1, r1, #8
   195d2:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   195d4:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   195d8:	060d      	lsls	r5, r1, #24
   195da:	d405      	bmi.n	195e8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   195dc:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   195de:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   195e0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   195e4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
   195e8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   195ea:	4a23      	ldr	r2, [pc, #140]	; (19678 <usb_isr+0x5d4>)
   195ec:	2150      	movs	r1, #80	; 0x50
   195ee:	7011      	strb	r1, [r2, #0]
   195f0:	e600      	b.n	191f4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
   195f2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
   195f4:	782a      	ldrb	r2, [r5, #0]
   195f6:	4282      	cmp	r2, r0
   195f8:	bf28      	it	cs
   195fa:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
   195fc:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   19600:	d144      	bne.n	1968c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
   19602:	4b1e      	ldr	r3, [pc, #120]	; (1967c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   19604:	4d1e      	ldr	r5, [pc, #120]	; (19680 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
   19606:	7818      	ldrb	r0, [r3, #0]
   19608:	491e      	ldr	r1, [pc, #120]	; (19684 <usb_isr+0x5e0>)
   1960a:	4b1f      	ldr	r3, [pc, #124]	; (19688 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1960c:	9201      	str	r2, [sp, #4]
   1960e:	2800      	cmp	r0, #0
   19610:	bf18      	it	ne
   19612:	4619      	movne	r1, r3
   19614:	4628      	mov	r0, r5
   19616:	f7ff fabf 	bl	18b98 <memcpy>
					usb_descriptor_buffer[1] = 7;
   1961a:	2307      	movs	r3, #7
   1961c:	706b      	strb	r3, [r5, #1]
   1961e:	9a01      	ldr	r2, [sp, #4]
   19620:	e03b      	b.n	1969a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   19622:	03c9      	lsls	r1, r1, #15
   19624:	f53f af61 	bmi.w	194ea <usb_isr+0x446>
   19628:	e761      	b.n	194ee <usb_isr+0x44a>
   1962a:	bf00      	nop
   1962c:	20006740 	.word	0x20006740
   19630:	2000e290 	.word	0x2000e290
   19634:	2000ba08 	.word	0x2000ba08
   19638:	00070080 	.word	0x00070080
   1963c:	2000f290 	.word	0x2000f290
   19640:	20006720 	.word	0x20006720
   19644:	2000d36c 	.word	0x2000d36c
   19648:	2000d37c 	.word	0x2000d37c
   1964c:	2000d39c 	.word	0x2000d39c
   19650:	2000d39d 	.word	0x2000d39d
   19654:	00cc0002 	.word	0x00cc0002
   19658:	000200c8 	.word	0x000200c8
   1965c:	00c80002 	.word	0x00c80002
   19660:	20000080 	.word	0x20000080
   19664:	74d59319 	.word	0x74d59319
   19668:	2000d31c 	.word	0x2000d31c
   1966c:	2000d290 	.word	0x2000d290
   19670:	2000d374 	.word	0x2000d374
   19674:	2000d398 	.word	0x2000d398
   19678:	2000d39f 	.word	0x2000d39f
   1967c:	2000d39e 	.word	0x2000d39e
   19680:	20200000 	.word	0x20200000
   19684:	60001f38 	.word	0x60001f38
   19688:	60001ed4 	.word	0x60001ed4
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   1968c:	4629      	mov	r1, r5
   1968e:	4d10      	ldr	r5, [pc, #64]	; (196d0 <usb_isr+0x62c>)
   19690:	9201      	str	r2, [sp, #4]
   19692:	4628      	mov	r0, r5
   19694:	f7ff fa80 	bl	18b98 <memcpy>
   19698:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1969a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1969e:	4415      	add	r5, r2
	asm("dsb");
   196a0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   196a4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   196a8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
   196ac:	3320      	adds	r3, #32
	} while (location < end_addr);
   196ae:	429d      	cmp	r5, r3
   196b0:	d8fa      	bhi.n	196a8 <usb_isr+0x604>
	asm("dsb");
   196b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
   196b6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   196ba:	4805      	ldr	r0, [pc, #20]	; (196d0 <usb_isr+0x62c>)
   196bc:	4611      	mov	r1, r2
   196be:	f7ff fc8f 	bl	18fe0 <endpoint0_transmit.constprop.0>
				return;
   196c2:	e544      	b.n	1914e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   196c4:	2003      	movs	r0, #3
   196c6:	f7ff fcd7 	bl	19078 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   196ca:	f00f fac9 	bl	28c60 <___reboot_Teensyduino__veneer>
   196ce:	bf00      	nop
   196d0:	20200000 	.word	0x20200000

000196d4 <usb_config_rx>:
{
   196d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196d8:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   196da:	1e83      	subs	r3, r0, #2
   196dc:	2b02      	cmp	r3, #2
   196de:	d901      	bls.n	196e4 <usb_config_rx+0x10>
}
   196e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   196e4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 19734 <usb_config_rx+0x60>
   196e8:	4615      	mov	r5, r2
   196ea:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
   196ec:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   196ee:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   196f2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   196f4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   196f8:	2100      	movs	r1, #0
   196fa:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   196fe:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
   19700:	f00b fa74 	bl	24bec <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   19704:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
   19708:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1970a:	0952      	lsrs	r2, r2, #5
   1970c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
   19710:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
   19714:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   19718:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
   1971c:	2f00      	cmp	r7, #0
   1971e:	d0df      	beq.n	196e0 <usb_config_rx+0xc>
   19720:	4a03      	ldr	r2, [pc, #12]	; (19730 <usb_config_rx+0x5c>)
   19722:	40b3      	lsls	r3, r6
   19724:	6811      	ldr	r1, [r2, #0]
   19726:	430b      	orrs	r3, r1
   19728:	6013      	str	r3, [r2, #0]
}
   1972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1972e:	bf00      	nop
   19730:	2000d29c 	.word	0x2000d29c
   19734:	20000000 	.word	0x20000000

00019738 <usb_config_tx>:
{
   19738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1973c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   1973e:	1e81      	subs	r1, r0, #2
   19740:	2902      	cmp	r1, #2
   19742:	d901      	bls.n	19748 <usb_config_tx+0x10>
}
   19744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   19748:	01c7      	lsls	r7, r0, #7
   1974a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 19798 <usb_config_tx+0x60>
   1974e:	4692      	mov	sl, r2
   19750:	4604      	mov	r4, r0
   19752:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
   19754:	223c      	movs	r2, #60	; 0x3c
   19756:	2100      	movs	r1, #0
   19758:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1975a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1975e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
   19760:	f108 0004 	add.w	r0, r8, #4
   19764:	f00b fa42 	bl	24bec <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   19768:	faba f28a 	clz	r2, sl
   1976c:	0952      	lsrs	r2, r2, #5
   1976e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
   19772:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
   19776:	2201      	movs	r2, #1
	qh->callback_function = callback;
   19778:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   1977c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   19780:	2e00      	cmp	r6, #0
   19782:	d0df      	beq.n	19744 <usb_config_tx+0xc>
   19784:	4b03      	ldr	r3, [pc, #12]	; (19794 <usb_config_tx+0x5c>)
   19786:	3410      	adds	r4, #16
   19788:	6819      	ldr	r1, [r3, #0]
   1978a:	40a2      	lsls	r2, r4
   1978c:	430a      	orrs	r2, r1
   1978e:	601a      	str	r2, [r3, #0]
}
   19790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19794:	2000d29c 	.word	0x2000d29c
   19798:	20000000 	.word	0x20000000

0001979c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
   1979c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
   1979e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
   197a0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
   197a2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
   197a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
   197aa:	b410      	push	{r4}
	transfer->next = 1;
   197ac:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
   197ae:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
   197b0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
   197b4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
   197b6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
   197ba:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
   197be:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
   197c0:	6181      	str	r1, [r0, #24]
}
   197c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
   197c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
   197ca:	4770      	bx	lr

000197cc <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   197cc:	1e83      	subs	r3, r0, #2
{
   197ce:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   197d0:	2b02      	cmp	r3, #2
   197d2:	d900      	bls.n	197d6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   197d4:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   197d6:	4b06      	ldr	r3, [pc, #24]	; (197f0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
   197d8:	f100 0110 	add.w	r1, r0, #16
   197dc:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   197e0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   197e4:	fa0c f101 	lsl.w	r1, ip, r1
   197e8:	3040      	adds	r0, #64	; 0x40
   197ea:	f7ff bb99 	b.w	18f20 <schedule_transfer>
   197ee:	bf00      	nop
   197f0:	20000000 	.word	0x20000000

000197f4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   197f4:	1e83      	subs	r3, r0, #2
{
   197f6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   197f8:	2b02      	cmp	r3, #2
   197fa:	d900      	bls.n	197fe <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   197fc:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
   197fe:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
   19800:	4b02      	ldr	r3, [pc, #8]	; (1980c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
   19802:	4081      	lsls	r1, r0
   19804:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   19808:	f7ff bb8a 	b.w	18f20 <schedule_transfer>
   1980c:	20000000 	.word	0x20000000

00019810 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   19810:	6840      	ldr	r0, [r0, #4]
#endif
}
   19812:	4770      	bx	lr

00019814 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   19814:	4a12      	ldr	r2, [pc, #72]	; (19860 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   19816:	4b13      	ldr	r3, [pc, #76]	; (19864 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   19818:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
   1981c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
   19820:	4298      	cmp	r0, r3
{
   19822:	b510      	push	{r4, lr}
   19824:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
   19826:	d202      	bcs.n	1982e <usb_init_serialnumber+0x1a>
   19828:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1982c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   1982e:	4c0e      	ldr	r4, [pc, #56]	; (19868 <usb_init_serialnumber+0x54>)
   19830:	a901      	add	r1, sp, #4
   19832:	220a      	movs	r2, #10
   19834:	f000 fc40 	bl	1a0b8 <ultoa>
	for (i=0; i<10; i++) {
   19838:	a901      	add	r1, sp, #4
   1983a:	2300      	movs	r3, #0
   1983c:	4620      	mov	r0, r4
		char c = buf[i];
   1983e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   19842:	3301      	adds	r3, #1
		if (!c) break;
   19844:	b13a      	cbz	r2, 19856 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
   19846:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   19848:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   1984c:	d1f7      	bne.n	1983e <usb_init_serialnumber+0x2a>
   1984e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   19850:	7023      	strb	r3, [r4, #0]
}
   19852:	b004      	add	sp, #16
   19854:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   19856:	005b      	lsls	r3, r3, #1
   19858:	b2db      	uxtb	r3, r3
   1985a:	7023      	strb	r3, [r4, #0]
}
   1985c:	b004      	add	sp, #16
   1985e:	bd10      	pop	{r4, pc}
   19860:	401f4400 	.word	0x401f4400
   19864:	00989680 	.word	0x00989680
   19868:	20006038 	.word	0x20006038

0001986c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   1986c:	f000 badc 	b.w	19e28 <usb_serial_flush_input>

00019870 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   19870:	f000 baac 	b.w	19dcc <usb_serial_peekchar>

00019874 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   19874:	f000 bb6a 	b.w	19f4c <usb_serial_flush_output>

00019878 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   19878:	f000 bb40 	b.w	19efc <usb_serial_write_buffer_free>

0001987c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   1987c:	4608      	mov	r0, r1
   1987e:	4611      	mov	r1, r2
   19880:	f000 bb30 	b.w	19ee4 <usb_serial_write>

00019884 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   19884:	4608      	mov	r0, r1
   19886:	f000 bb17 	b.w	19eb8 <usb_serial_putchar>
   1988a:	bf00      	nop

0001988c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   1988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   1988e:	4c14      	ldr	r4, [pc, #80]	; (198e0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19890:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   19894:	4e13      	ldr	r6, [pc, #76]	; (198e4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   1989a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   1989e:	4f12      	ldr	r7, [pc, #72]	; (198e8 <rx_queue_transfer+0x5c>)
   198a0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   198a4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   198a6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   198aa:	4621      	mov	r1, r4
   198ac:	883a      	ldrh	r2, [r7, #0]
   198ae:	4630      	mov	r0, r6
   198b0:	f7ff ff74 	bl	1979c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   198b4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   198b6:	4423      	add	r3, r4
	asm("dsb");
   198b8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   198bc:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   198c0:	3420      	adds	r4, #32
	} while (location < end_addr);
   198c2:	42a3      	cmp	r3, r4
   198c4:	d8fa      	bhi.n	198bc <rx_queue_transfer+0x30>
	asm("dsb");
   198c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
   198ca:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   198ce:	2003      	movs	r0, #3
   198d0:	4631      	mov	r1, r6
   198d2:	f7ff ff8f 	bl	197f4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   198d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   198da:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   198de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198e0:	20200080 	.word	0x20200080
   198e4:	20006760 	.word	0x20006760
   198e8:	2000d388 	.word	0x2000d388

000198ec <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   198ec:	4b24      	ldr	r3, [pc, #144]	; (19980 <rx_event+0x94>)
{
   198ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   198f2:	881c      	ldrh	r4, [r3, #0]
   198f4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
   198f6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   198f8:	f3c3 430e 	ubfx	r3, r3, #16, #15
   198fc:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   198fe:	2c00      	cmp	r4, #0
   19900:	dd24      	ble.n	1994c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
   19902:	4920      	ldr	r1, [pc, #128]	; (19984 <rx_event+0x98>)
		if (head != rx_tail) {
   19904:	4820      	ldr	r0, [pc, #128]	; (19988 <rx_event+0x9c>)
		uint32_t head = rx_head;
   19906:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
   19908:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
   1990a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
   1990c:	4e1f      	ldr	r6, [pc, #124]	; (1998c <rx_event+0xa0>)
		if (head != rx_tail) {
   1990e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
   19910:	481f      	ldr	r0, [pc, #124]	; (19990 <rx_event+0xa4>)
		if (head != rx_tail) {
   19912:	d007      	beq.n	19924 <rx_event+0x38>
			uint32_t ii = rx_list[head];
   19914:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
   19918:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   1991c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
   19920:	4294      	cmp	r4, r2
   19922:	d918      	bls.n	19956 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   19924:	3301      	adds	r3, #1
		rx_index[i] = 0;
   19926:	2200      	movs	r2, #0
		rx_count[i] = len;
   19928:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   1992c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
   1992e:	4e19      	ldr	r6, [pc, #100]	; (19994 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
   19930:	bf88      	it	hi
   19932:	4613      	movhi	r3, r2
		rx_index[i] = 0;
   19934:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
   19938:	bf98      	it	ls
   1993a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
   1993c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
   1993e:	4b16      	ldr	r3, [pc, #88]	; (19998 <rx_event+0xac>)
		rx_head = head;
   19940:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   19942:	681a      	ldr	r2, [r3, #0]
   19944:	4414      	add	r4, r2
   19946:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   19948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
   1994c:	4628      	mov	r0, r5
}
   1994e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
   19952:	f7ff bf9b 	b.w	1988c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   19956:	eb07 2048 	add.w	r0, r7, r8, lsl #9
   1995a:	4910      	ldr	r1, [pc, #64]	; (1999c <rx_event+0xb0>)
   1995c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
   1995e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   19960:	4408      	add	r0, r1
   19962:	eb01 2145 	add.w	r1, r1, r5, lsl #9
   19966:	f7ff f917 	bl	18b98 <memcpy>
				rx_available += len;
   1996a:	4a0b      	ldr	r2, [pc, #44]	; (19998 <rx_event+0xac>)
				rx_queue_transfer(i);
   1996c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
   1996e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
   19972:	6813      	ldr	r3, [r2, #0]
   19974:	4423      	add	r3, r4
}
   19976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
   1997a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   1997c:	f7ff bf86 	b.w	1988c <rx_queue_transfer>
   19980:	2000d388 	.word	0x2000d388
   19984:	2000d396 	.word	0x2000d396
   19988:	2000d397 	.word	0x2000d397
   1998c:	2000d328 	.word	0x2000d328
   19990:	2000d348 	.word	0x2000d348
   19994:	2000d338 	.word	0x2000d338
   19998:	2000d324 	.word	0x2000d324
   1999c:	20200080 	.word	0x20200080

000199a0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   199a0:	4b1d      	ldr	r3, [pc, #116]	; (19a18 <usb_serial_flush_callback+0x78>)
   199a2:	781a      	ldrb	r2, [r3, #0]
   199a4:	2a00      	cmp	r2, #0
   199a6:	d136      	bne.n	19a16 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
   199a8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   199ac:	4a1b      	ldr	r2, [pc, #108]	; (19a1c <usb_serial_flush_callback+0x7c>)
   199ae:	7812      	ldrb	r2, [r2, #0]
   199b0:	b38a      	cbz	r2, 19a16 <usb_serial_flush_callback+0x76>
{
   199b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
   199b6:	4d1a      	ldr	r5, [pc, #104]	; (19a20 <usb_serial_flush_callback+0x80>)
   199b8:	882a      	ldrh	r2, [r5, #0]
   199ba:	b352      	cbz	r2, 19a12 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
   199bc:	4e19      	ldr	r6, [pc, #100]	; (19a24 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
   199be:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   199c2:	4f19      	ldr	r7, [pc, #100]	; (19a28 <usb_serial_flush_callback+0x88>)
   199c4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   199c6:	4c19      	ldr	r4, [pc, #100]	; (19a2c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   199c8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   199cc:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   199d0:	4642      	mov	r2, r8
   199d2:	4638      	mov	r0, r7
   199d4:	4621      	mov	r1, r4
   199d6:	f7ff fee1 	bl	1979c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   199da:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
   199de:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   199e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   199e6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   199ea:	3420      	adds	r4, #32
	} while (location < end_addr);
   199ec:	42a2      	cmp	r2, r4
   199ee:	d8fa      	bhi.n	199e6 <usb_serial_flush_callback+0x46>
	asm("dsb");
   199f0:	f3bf 8f4f 	dsb	sy
	asm("isb");
   199f4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   199f8:	2004      	movs	r0, #4
   199fa:	4639      	mov	r1, r7
   199fc:	f7ff fee6 	bl	197cc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   19a00:	7833      	ldrb	r3, [r6, #0]
   19a02:	3301      	adds	r3, #1
   19a04:	b2db      	uxtb	r3, r3
   19a06:	2b03      	cmp	r3, #3
   19a08:	bf88      	it	hi
   19a0a:	2300      	movhi	r3, #0
   19a0c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   19a0e:	2300      	movs	r3, #0
   19a10:	802b      	strh	r3, [r5, #0]
}
   19a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a16:	4770      	bx	lr
   19a18:	2000d39b 	.word	0x2000d39b
   19a1c:	2000d39d 	.word	0x2000d39d
   19a20:	2000d38a 	.word	0x2000d38a
   19a24:	2000d39a 	.word	0x2000d39a
   19a28:	20006860 	.word	0x20006860
   19a2c:	20201080 	.word	0x20201080

00019a30 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
   19a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a34:	b085      	sub	sp, #20
	while (size > 0) {
   19a36:	e9cd 1001 	strd	r1, r0, [sp, #4]
   19a3a:	2900      	cmp	r1, #0
   19a3c:	f000 80bf 	beq.w	19bbe <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
   19a40:	2300      	movs	r3, #0
   19a42:	4c60      	ldr	r4, [pc, #384]	; (19bc4 <usb_serial_write.part.0+0x194>)
   19a44:	f8df 8198 	ldr.w	r8, [pc, #408]	; 19be0 <usb_serial_write.part.0+0x1b0>
   19a48:	f8df a198 	ldr.w	sl, [pc, #408]	; 19be4 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
   19a4c:	4f5e      	ldr	r7, [pc, #376]	; (19bc8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
   19a4e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
   19a50:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
   19a52:	4a5e      	ldr	r2, [pc, #376]	; (19bcc <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
   19a54:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   19a56:	4b5e      	ldr	r3, [pc, #376]	; (19bd0 <usb_serial_write.part.0+0x1a0>)
   19a58:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
   19a5a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
   19a5e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
   19a62:	2b00      	cmp	r3, #0
   19a64:	f040 80a7 	bne.w	19bb6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
   19a68:	461e      	mov	r6, r3
		int waiting=0;
   19a6a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
   19a6c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
   19a6e:	4648      	mov	r0, r9
   19a70:	f7ff fece 	bl	19810 <usb_transfer_status>
			if (!(status & 0x80)) {
   19a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   19a78:	f000 808c 	beq.w	19b94 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
   19a7c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
   19a80:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
   19a84:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
   19a88:	b905      	cbnz	r5, 19a8c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
   19a8a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
   19a8c:	2b00      	cmp	r3, #0
   19a8e:	d17d      	bne.n	19b8c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   19a90:	683b      	ldr	r3, [r7, #0]
   19a92:	1b9b      	subs	r3, r3, r6
   19a94:	2b78      	cmp	r3, #120	; 0x78
   19a96:	f200 8087 	bhi.w	19ba8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
   19a9a:	4b4e      	ldr	r3, [pc, #312]	; (19bd4 <usb_serial_write.part.0+0x1a4>)
   19a9c:	781b      	ldrb	r3, [r3, #0]
   19a9e:	2b00      	cmp	r3, #0
   19aa0:	d074      	beq.n	19b8c <usb_serial_write.part.0+0x15c>
			yield();
   19aa2:	f000 fa9d 	bl	19fe0 <yield>
			tx_noautoflush = 1;
   19aa6:	2201      	movs	r2, #1
		while (!tx_available) {
   19aa8:	f8b8 3000 	ldrh.w	r3, [r8]
   19aac:	4615      	mov	r5, r2
			tx_noautoflush = 1;
   19aae:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
   19ab0:	2b00      	cmp	r3, #0
   19ab2:	d0dc      	beq.n	19a6e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19ab4:	4a46      	ldr	r2, [pc, #280]	; (19bd0 <usb_serial_write.part.0+0x1a0>)
   19ab6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   19aba:	7811      	ldrb	r1, [r2, #0]
   19abc:	461a      	mov	r2, r3
   19abe:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
   19ac2:	4d45      	ldr	r5, [pc, #276]	; (19bd8 <usb_serial_write.part.0+0x1a8>)
   19ac4:	02c9      	lsls	r1, r1, #11
   19ac6:	4428      	add	r0, r5
		if (size >= tx_available) {
   19ac8:	9d01      	ldr	r5, [sp, #4]
   19aca:	4295      	cmp	r5, r2
   19acc:	d217      	bcs.n	19afe <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
   19ace:	9303      	str	r3, [sp, #12]
   19ad0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   19ad4:	462a      	mov	r2, r5
   19ad6:	f7ff f85f 	bl	18b98 <memcpy>
			tx_available -= size;
   19ada:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   19adc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
   19ae0:	1b5b      	subs	r3, r3, r5
   19ae2:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   19ae6:	4b3d      	ldr	r3, [pc, #244]	; (19bdc <usb_serial_write.part.0+0x1ac>)
   19ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
   19aec:	f3bf 8f4f 	dsb	sy
			sent += size;
   19af0:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
   19af2:	2300      	movs	r3, #0
			sent += size;
   19af4:	4428      	add	r0, r5
		tx_noautoflush = 0;
   19af6:	7023      	strb	r3, [r4, #0]
}
   19af8:	b005      	add	sp, #20
   19afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   19afe:	4b36      	ldr	r3, [pc, #216]	; (19bd8 <usb_serial_write.part.0+0x1a8>)
   19b00:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
   19b02:	9902      	ldr	r1, [sp, #8]
   19b04:	f7ff f848 	bl	18b98 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   19b08:	2300      	movs	r3, #0
   19b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19b0e:	4629      	mov	r1, r5
   19b10:	4648      	mov	r0, r9
   19b12:	f7ff fe43 	bl	1979c <usb_prepare_transfer>
	asm("dsb");
   19b16:	f3bf 8f4f 	dsb	sy
   19b1a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   19b1e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
   19b22:	4293      	cmp	r3, r2
   19b24:	bf34      	ite	cc
   19b26:	2301      	movcc	r3, #1
   19b28:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
   19b2a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   19b2e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   19b32:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
   19b36:	3520      	adds	r5, #32
	} while (location < end_addr);
   19b38:	42ab      	cmp	r3, r5
   19b3a:	d1fa      	bne.n	19b32 <usb_serial_write.part.0+0x102>
	asm("dsb");
   19b3c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   19b40:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   19b44:	2004      	movs	r0, #4
   19b46:	4649      	mov	r1, r9
   19b48:	f7ff fe40 	bl	197cc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   19b4c:	4a20      	ldr	r2, [pc, #128]	; (19bd0 <usb_serial_write.part.0+0x1a0>)
   19b4e:	7813      	ldrb	r3, [r2, #0]
   19b50:	3301      	adds	r3, #1
   19b52:	b2db      	uxtb	r3, r3
   19b54:	2b03      	cmp	r3, #3
   19b56:	bf84      	itt	hi
   19b58:	2300      	movhi	r3, #0
   19b5a:	4a1d      	ldrhi	r2, [pc, #116]	; (19bd0 <usb_serial_write.part.0+0x1a0>)
   19b5c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   19b5e:	f8b8 3000 	ldrh.w	r3, [r8]
   19b62:	9a01      	ldr	r2, [sp, #4]
   19b64:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
   19b66:	9a00      	ldr	r2, [sp, #0]
   19b68:	441a      	add	r2, r3
			size -= tx_available;
   19b6a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
   19b6c:	9200      	str	r2, [sp, #0]
			data += tx_available;
   19b6e:	9a02      	ldr	r2, [sp, #8]
   19b70:	441a      	add	r2, r3
			tx_available = 0;
   19b72:	2300      	movs	r3, #0
			data += tx_available;
   19b74:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
   19b76:	4a19      	ldr	r2, [pc, #100]	; (19bdc <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
   19b78:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
   19b7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
   19b80:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   19b84:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   19b86:	2900      	cmp	r1, #0
   19b88:	f47f af62 	bne.w	19a50 <usb_serial_write.part.0+0x20>
	return sent;
   19b8c:	9800      	ldr	r0, [sp, #0]
}
   19b8e:	b005      	add	sp, #20
   19b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
   19b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19b98:	4b0d      	ldr	r3, [pc, #52]	; (19bd0 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
   19b9a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19b9e:	7819      	ldrb	r1, [r3, #0]
				break;
   19ba0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
   19ba2:	f8a8 2000 	strh.w	r2, [r8]
				break;
   19ba6:	e78a      	b.n	19abe <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
   19ba8:	2301      	movs	r3, #1
				return sent;
   19baa:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
   19bac:	f88a 3000 	strb.w	r3, [sl]
}
   19bb0:	b005      	add	sp, #20
   19bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19bb6:	461a      	mov	r2, r3
   19bb8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   19bbc:	e77f      	b.n	19abe <usb_serial_write.part.0+0x8e>
	while (size > 0) {
   19bbe:	9801      	ldr	r0, [sp, #4]
	return sent;
   19bc0:	e7e5      	b.n	19b8e <usb_serial_write.part.0+0x15e>
   19bc2:	bf00      	nop
   19bc4:	2000d39b 	.word	0x2000d39b
   19bc8:	2000d36c 	.word	0x2000d36c
   19bcc:	20006860 	.word	0x20006860
   19bd0:	2000d39a 	.word	0x2000d39a
   19bd4:	2000d39d 	.word	0x2000d39d
   19bd8:	20201080 	.word	0x20201080
   19bdc:	402e0000 	.word	0x402e0000
   19be0:	2000d38a 	.word	0x2000d38a
   19be4:	2000d399 	.word	0x2000d399

00019be8 <usb_serial_reset>:
}
   19be8:	4770      	bx	lr
   19bea:	bf00      	nop

00019bec <usb_serial_configure>:
	if (usb_high_speed) {
   19bec:	4b2d      	ldr	r3, [pc, #180]	; (19ca4 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   19bee:	2100      	movs	r1, #0
   19bf0:	2280      	movs	r2, #128	; 0x80
   19bf2:	482d      	ldr	r0, [pc, #180]	; (19ca8 <usb_serial_configure+0xbc>)
{
   19bf4:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   19bf6:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
   19bf8:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
   19bfa:	4d2c      	ldr	r5, [pc, #176]	; (19cac <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
   19bfc:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
   19bfe:	4e2c      	ldr	r6, [pc, #176]	; (19cb0 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
   19c00:	bf0c      	ite	eq
   19c02:	2340      	moveq	r3, #64	; 0x40
   19c04:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   19c08:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   19c0a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   19c0c:	f00a ffee 	bl	24bec <memset>
	tx_head = 0;
   19c10:	4a28      	ldr	r2, [pc, #160]	; (19cb4 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   19c12:	4621      	mov	r1, r4
	tx_available = 0;
   19c14:	4b28      	ldr	r3, [pc, #160]	; (19cb8 <usb_serial_configure+0xcc>)
	tx_head = 0;
   19c16:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   19c18:	f44f 7280 	mov.w	r2, #256	; 0x100
   19c1c:	4827      	ldr	r0, [pc, #156]	; (19cbc <usb_serial_configure+0xd0>)
	tx_available = 0;
   19c1e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   19c20:	f00a ffe4 	bl	24bec <memset>
	memset(rx_count, 0, sizeof(rx_count));
   19c24:	4a26      	ldr	r2, [pc, #152]	; (19cc0 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19c26:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
   19c28:	4b26      	ldr	r3, [pc, #152]	; (19cc4 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19c2a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
   19c2c:	e9c2 4400 	strd	r4, r4, [r2]
   19c30:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
   19c34:	4a24      	ldr	r2, [pc, #144]	; (19cc8 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
   19c36:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   19c3a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
   19c3c:	4a23      	ldr	r2, [pc, #140]	; (19ccc <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
   19c3e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
   19c42:	4b23      	ldr	r3, [pc, #140]	; (19cd0 <usb_serial_configure+0xe4>)
   19c44:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19c46:	4623      	mov	r3, r4
	rx_available = 0;
   19c48:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19c4a:	4622      	mov	r2, r4
   19c4c:	f7ff fd74 	bl	19738 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   19c50:	4622      	mov	r2, r4
   19c52:	8831      	ldrh	r1, [r6, #0]
   19c54:	2003      	movs	r0, #3
   19c56:	4b1f      	ldr	r3, [pc, #124]	; (19cd4 <usb_serial_configure+0xe8>)
   19c58:	f7ff fd3c 	bl	196d4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   19c5c:	4623      	mov	r3, r4
   19c5e:	2201      	movs	r2, #1
   19c60:	8829      	ldrh	r1, [r5, #0]
   19c62:	2004      	movs	r0, #4
   19c64:	f7ff fd68 	bl	19738 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   19c68:	4620      	mov	r0, r4
   19c6a:	3401      	adds	r4, #1
   19c6c:	f7ff fe0e 	bl	1988c <rx_queue_transfer>
   19c70:	2c08      	cmp	r4, #8
   19c72:	d1f9      	bne.n	19c68 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
   19c74:	4b18      	ldr	r3, [pc, #96]	; (19cd8 <usb_serial_configure+0xec>)
   19c76:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
   19c78:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
   19c7a:	4818      	ldr	r0, [pc, #96]	; (19cdc <usb_serial_configure+0xf0>)
   19c7c:	4c18      	ldr	r4, [pc, #96]	; (19ce0 <usb_serial_configure+0xf4>)
   19c7e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   19c80:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   19c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   19c88:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   19c8c:	4915      	ldr	r1, [pc, #84]	; (19ce4 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
   19c8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   19c92:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   19c96:	b121      	cbz	r1, 19ca2 <usb_serial_configure+0xb6>
   19c98:	4a13      	ldr	r2, [pc, #76]	; (19ce8 <usb_serial_configure+0xfc>)
   19c9a:	7813      	ldrb	r3, [r2, #0]
   19c9c:	f043 0301 	orr.w	r3, r3, #1
   19ca0:	7013      	strb	r3, [r2, #0]
}
   19ca2:	bd70      	pop	{r4, r5, r6, pc}
   19ca4:	2000d39e 	.word	0x2000d39e
   19ca8:	20006860 	.word	0x20006860
   19cac:	2000d38c 	.word	0x2000d38c
   19cb0:	2000d388 	.word	0x2000d388
   19cb4:	2000d39a 	.word	0x2000d39a
   19cb8:	2000d38a 	.word	0x2000d38a
   19cbc:	20006760 	.word	0x20006760
   19cc0:	2000d328 	.word	0x2000d328
   19cc4:	2000d338 	.word	0x2000d338
   19cc8:	2000d396 	.word	0x2000d396
   19ccc:	2000d324 	.word	0x2000d324
   19cd0:	2000d397 	.word	0x2000d397
   19cd4:	000198ed 	.word	0x000198ed
   19cd8:	402e0000 	.word	0x402e0000
   19cdc:	2000d380 	.word	0x2000d380
   19ce0:	000199a1 	.word	0x000199a1
   19ce4:	00000000 	.word	0x00000000
   19ce8:	2000d3a0 	.word	0x2000d3a0

00019cec <usb_serial_read>:
{
   19cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19cf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
   19cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 19dc4 <usb_serial_read+0xd8>
{
   19cfc:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19cfe:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
   19d02:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
   19d04:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
   19d08:	2900      	cmp	r1, #0
   19d0a:	d04f      	beq.n	19dac <usb_serial_read+0xc0>
   19d0c:	4680      	mov	r8, r0
   19d0e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   19d10:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
   19d12:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19dc8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
   19d16:	4b26      	ldr	r3, [pc, #152]	; (19db0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
   19d18:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19d1c:	4925      	ldr	r1, [pc, #148]	; (19db4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
   19d1e:	781b      	ldrb	r3, [r3, #0]
   19d20:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
   19d22:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
   19d26:	d03f      	beq.n	19da8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
   19d28:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
   19d2a:	4b23      	ldr	r3, [pc, #140]	; (19db8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19d2c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
   19d2e:	bf28      	it	cs
   19d30:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   19d32:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
   19d34:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19d38:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
   19d3c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
   19d3e:	4b1f      	ldr	r3, [pc, #124]	; (19dbc <usb_serial_read+0xd0>)
   19d40:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   19d44:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
   19d48:	42aa      	cmp	r2, r5
   19d4a:	d21c      	bcs.n	19d86 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   19d4c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
   19d50:	4918      	ldr	r1, [pc, #96]	; (19db4 <usb_serial_read+0xc8>)
			rx_available -= len;
   19d52:	4c1b      	ldr	r4, [pc, #108]	; (19dc0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   19d54:	4461      	add	r1, ip
   19d56:	9201      	str	r2, [sp, #4]
   19d58:	f7fe ff1e 	bl	18b98 <memcpy>
			rx_available -= len;
   19d5c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
   19d5e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
   19d62:	4658      	mov	r0, fp
			rx_index[i] += len;
   19d64:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
   19d66:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
   19d6a:	442a      	add	r2, r5
			rx_available -= len;
   19d6c:	4439      	add	r1, r7
			rx_index[i] += len;
   19d6e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
   19d72:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   19d74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19d7c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   19d80:	b003      	add	sp, #12
   19d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19d86:	462a      	mov	r2, r5
			count += avail;
   19d88:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19d8a:	f7fe ff05 	bl	18b98 <memcpy>
			rx_available -= avail;
   19d8e:	490c      	ldr	r1, [pc, #48]	; (19dc0 <usb_serial_read+0xd4>)
			rx_tail = tail;
   19d90:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
   19d92:	4630      	mov	r0, r6
			rx_available -= avail;
   19d94:	680a      	ldr	r2, [r1, #0]
			p += avail;
   19d96:	44a8      	add	r8, r5
			rx_available -= avail;
   19d98:	1b52      	subs	r2, r2, r5
   19d9a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
   19d9c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
   19da0:	f7ff fd74 	bl	1988c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   19da4:	45bb      	cmp	fp, r7
   19da6:	d8b6      	bhi.n	19d16 <usb_serial_read+0x2a>
	return count;
   19da8:	4638      	mov	r0, r7
   19daa:	e7e3      	b.n	19d74 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
   19dac:	4608      	mov	r0, r1
   19dae:	e7e1      	b.n	19d74 <usb_serial_read+0x88>
   19db0:	2000d396 	.word	0x2000d396
   19db4:	20200080 	.word	0x20200080
   19db8:	2000d348 	.word	0x2000d348
   19dbc:	2000d328 	.word	0x2000d328
   19dc0:	2000d324 	.word	0x2000d324
   19dc4:	2000d397 	.word	0x2000d397
   19dc8:	2000d338 	.word	0x2000d338

00019dcc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
   19dcc:	4b0b      	ldr	r3, [pc, #44]	; (19dfc <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
   19dce:	4a0c      	ldr	r2, [pc, #48]	; (19e00 <usb_serial_peekchar+0x34>)
   19dd0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   19dd2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   19dd4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   19dd6:	428a      	cmp	r2, r1
   19dd8:	d00d      	beq.n	19df6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   19dda:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   19ddc:	4809      	ldr	r0, [pc, #36]	; (19e04 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   19dde:	4a0a      	ldr	r2, [pc, #40]	; (19e08 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   19de0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   19de2:	490a      	ldr	r1, [pc, #40]	; (19e0c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   19de4:	bf28      	it	cs
   19de6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   19de8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   19dea:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   19dee:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   19df2:	5c58      	ldrb	r0, [r3, r1]
   19df4:	4770      	bx	lr
	if (tail == rx_head) return -1;
   19df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19dfa:	4770      	bx	lr
   19dfc:	2000d396 	.word	0x2000d396
   19e00:	2000d397 	.word	0x2000d397
   19e04:	2000d348 	.word	0x2000d348
   19e08:	20200080 	.word	0x20200080
   19e0c:	2000d338 	.word	0x2000d338

00019e10 <usb_serial_available>:
	uint32_t n = rx_available;
   19e10:	4b04      	ldr	r3, [pc, #16]	; (19e24 <usb_serial_available+0x14>)
{
   19e12:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   19e14:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   19e16:	b10c      	cbz	r4, 19e1c <usb_serial_available+0xc>
}
   19e18:	4620      	mov	r0, r4
   19e1a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   19e1c:	f000 f8e0 	bl	19fe0 <yield>
}
   19e20:	4620      	mov	r0, r4
   19e22:	bd10      	pop	{r4, pc}
   19e24:	2000d324 	.word	0x2000d324

00019e28 <usb_serial_flush_input>:
{
   19e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   19e2c:	4e14      	ldr	r6, [pc, #80]	; (19e80 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   19e2e:	4d15      	ldr	r5, [pc, #84]	; (19e84 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   19e30:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   19e32:	782a      	ldrb	r2, [r5, #0]
   19e34:	4293      	cmp	r3, r2
   19e36:	d021      	beq.n	19e7c <usb_serial_flush_input+0x54>
   19e38:	b2dc      	uxtb	r4, r3
   19e3a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 19e8c <usb_serial_flush_input+0x64>
   19e3e:	f8df b050 	ldr.w	fp, [pc, #80]	; 19e90 <usb_serial_flush_input+0x68>
   19e42:	f8df 8050 	ldr.w	r8, [pc, #80]	; 19e94 <usb_serial_flush_input+0x6c>
   19e46:	4f10      	ldr	r7, [pc, #64]	; (19e88 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   19e48:	3401      	adds	r4, #1
   19e4a:	2c08      	cmp	r4, #8
		rx_tail = tail;
   19e4c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   19e50:	d901      	bls.n	19e56 <usb_serial_flush_input+0x2e>
   19e52:	2400      	movs	r4, #0
   19e54:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   19e56:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   19e5a:	f8db 3000 	ldr.w	r3, [fp]
   19e5e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   19e62:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   19e66:	1a52      	subs	r2, r2, r1
   19e68:	1a9b      	subs	r3, r3, r2
   19e6a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   19e6e:	f7ff fd0d 	bl	1988c <rx_queue_transfer>
		rx_tail = tail;
   19e72:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   19e76:	782b      	ldrb	r3, [r5, #0]
   19e78:	42a3      	cmp	r3, r4
   19e7a:	d1e5      	bne.n	19e48 <usb_serial_flush_input+0x20>
}
   19e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e80:	2000d397 	.word	0x2000d397
   19e84:	2000d396 	.word	0x2000d396
   19e88:	2000d338 	.word	0x2000d338
   19e8c:	2000d348 	.word	0x2000d348
   19e90:	2000d324 	.word	0x2000d324
   19e94:	2000d328 	.word	0x2000d328

00019e98 <usb_serial_getchar>:
{
   19e98:	b500      	push	{lr}
   19e9a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   19e9c:	2101      	movs	r1, #1
   19e9e:	f10d 0007 	add.w	r0, sp, #7
   19ea2:	f7ff ff23 	bl	19cec <usb_serial_read>
   19ea6:	b120      	cbz	r0, 19eb2 <usb_serial_getchar+0x1a>
   19ea8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   19eac:	b003      	add	sp, #12
   19eae:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   19eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19eb6:	e7f9      	b.n	19eac <usb_serial_getchar+0x14>

00019eb8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   19eb8:	4b09      	ldr	r3, [pc, #36]	; (19ee0 <usb_serial_putchar+0x28>)
{
   19eba:	b500      	push	{lr}
   19ebc:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   19ebe:	781b      	ldrb	r3, [r3, #0]
{
   19ec0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   19ec4:	b13b      	cbz	r3, 19ed6 <usb_serial_putchar+0x1e>
   19ec6:	2101      	movs	r1, #1
   19ec8:	f10d 0007 	add.w	r0, sp, #7
   19ecc:	f7ff fdb0 	bl	19a30 <usb_serial_write.part.0>
}
   19ed0:	b003      	add	sp, #12
   19ed2:	f85d fb04 	ldr.w	pc, [sp], #4
   19ed6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   19eda:	b003      	add	sp, #12
   19edc:	f85d fb04 	ldr.w	pc, [sp], #4
   19ee0:	2000d39d 	.word	0x2000d39d

00019ee4 <usb_serial_write>:
	if (!usb_configuration) return 0;
   19ee4:	4b04      	ldr	r3, [pc, #16]	; (19ef8 <usb_serial_write+0x14>)
   19ee6:	781b      	ldrb	r3, [r3, #0]
   19ee8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   19eec:	b10b      	cbz	r3, 19ef2 <usb_serial_write+0xe>
   19eee:	f7ff bd9f 	b.w	19a30 <usb_serial_write.part.0>
}
   19ef2:	4610      	mov	r0, r2
   19ef4:	4770      	bx	lr
   19ef6:	bf00      	nop
   19ef8:	2000d39d 	.word	0x2000d39d

00019efc <usb_serial_write_buffer_free>:
{
   19efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   19f00:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   19f02:	f8df 8044 	ldr.w	r8, [pc, #68]	; 19f48 <usb_serial_write_buffer_free+0x4c>
   19f06:	2301      	movs	r3, #1
   19f08:	4d0d      	ldr	r5, [pc, #52]	; (19f40 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   19f0a:	4627      	mov	r7, r4
   19f0c:	4e0d      	ldr	r6, [pc, #52]	; (19f44 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   19f0e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   19f12:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   19f14:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   19f16:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   19f18:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   19f1a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   19f1e:	d005      	beq.n	19f2c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   19f20:	f7ff fc76 	bl	19810 <usb_transfer_status>
   19f24:	0603      	lsls	r3, r0, #24
   19f26:	bf58      	it	pl
   19f28:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   19f2c:	2c04      	cmp	r4, #4
   19f2e:	d1f0      	bne.n	19f12 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   19f30:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   19f34:	2300      	movs	r3, #0
}
   19f36:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   19f38:	f888 3000 	strb.w	r3, [r8]
}
   19f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f40:	20006860 	.word	0x20006860
   19f44:	2000d39a 	.word	0x2000d39a
   19f48:	2000d39b 	.word	0x2000d39b

00019f4c <usb_serial_flush_output>:
{
   19f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   19f50:	4b1d      	ldr	r3, [pc, #116]	; (19fc8 <usb_serial_flush_output+0x7c>)
   19f52:	781b      	ldrb	r3, [r3, #0]
   19f54:	b113      	cbz	r3, 19f5c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   19f56:	4d1d      	ldr	r5, [pc, #116]	; (19fcc <usb_serial_flush_output+0x80>)
   19f58:	882a      	ldrh	r2, [r5, #0]
   19f5a:	b90a      	cbnz	r2, 19f60 <usb_serial_flush_output+0x14>
}
   19f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   19f60:	4e1b      	ldr	r6, [pc, #108]	; (19fd0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   19f62:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   19f66:	491b      	ldr	r1, [pc, #108]	; (19fd4 <usb_serial_flush_output+0x88>)
   19f68:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   19f6a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   19f6c:	4c1a      	ldr	r4, [pc, #104]	; (19fd8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   19f6e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   19f72:	4f1a      	ldr	r7, [pc, #104]	; (19fdc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   19f74:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   19f78:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   19f7a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   19f7c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   19f7e:	4621      	mov	r1, r4
   19f80:	2300      	movs	r3, #0
   19f82:	f7ff fc0b 	bl	1979c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   19f86:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   19f8a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   19f8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19f92:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   19f96:	3420      	adds	r4, #32
	} while (location < end_addr);
   19f98:	42a2      	cmp	r2, r4
   19f9a:	d8fa      	bhi.n	19f92 <usb_serial_flush_output+0x46>
	asm("dsb");
   19f9c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   19fa0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   19fa4:	2004      	movs	r0, #4
   19fa6:	4641      	mov	r1, r8
   19fa8:	f7ff fc10 	bl	197cc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   19fac:	7833      	ldrb	r3, [r6, #0]
   19fae:	3301      	adds	r3, #1
   19fb0:	b2db      	uxtb	r3, r3
   19fb2:	2b03      	cmp	r3, #3
   19fb4:	bf88      	it	hi
   19fb6:	2300      	movhi	r3, #0
   19fb8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   19fba:	2300      	movs	r3, #0
   19fbc:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   19fbe:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   19fc2:	703b      	strb	r3, [r7, #0]
}
   19fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19fc8:	2000d39d 	.word	0x2000d39d
   19fcc:	2000d38a 	.word	0x2000d38a
   19fd0:	2000d39a 	.word	0x2000d39a
   19fd4:	20006860 	.word	0x20006860
   19fd8:	20201080 	.word	0x20201080
   19fdc:	2000d39b 	.word	0x2000d39b

00019fe0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   19fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   19fe4:	4b2d      	ldr	r3, [pc, #180]	; (1a09c <yield+0xbc>)
   19fe6:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   19fe8:	b166      	cbz	r6, 1a004 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   19fea:	4f2d      	ldr	r7, [pc, #180]	; (1a0a0 <yield+0xc0>)
   19fec:	783b      	ldrb	r3, [r7, #0]
   19fee:	b94b      	cbnz	r3, 1a004 <yield+0x24>
	running = 1;
   19ff0:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   19ff2:	07f1      	lsls	r1, r6, #31
	running = 1;
   19ff4:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   19ff6:	d443      	bmi.n	1a080 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   19ff8:	07b2      	lsls	r2, r6, #30
   19ffa:	d426      	bmi.n	1a04a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   19ffc:	2300      	movs	r3, #0
   19ffe:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   1a000:	0773      	lsls	r3, r6, #29
   1a002:	d401      	bmi.n	1a008 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   1a004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   1a008:	4b26      	ldr	r3, [pc, #152]	; (1a0a4 <yield+0xc4>)
   1a00a:	681a      	ldr	r2, [r3, #0]
   1a00c:	2a00      	cmp	r2, #0
   1a00e:	d0f9      	beq.n	1a004 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   1a010:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   1a014:	2a00      	cmp	r2, #0
   1a016:	d1f5      	bne.n	1a004 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1a018:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   1a01c:	b672      	cpsid	i
		EventResponder *first = firstYield;
   1a01e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   1a020:	2800      	cmp	r0, #0
   1a022:	d034      	beq.n	1a08e <yield+0xae>
		if (runningFromYield) {
   1a024:	4c20      	ldr	r4, [pc, #128]	; (1a0a8 <yield+0xc8>)
   1a026:	7821      	ldrb	r1, [r4, #0]
   1a028:	2900      	cmp	r1, #0
   1a02a:	d130      	bne.n	1a08e <yield+0xae>
		runningFromYield = true;
   1a02c:	2201      	movs	r2, #1
   1a02e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   1a030:	6942      	ldr	r2, [r0, #20]
   1a032:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   1a034:	2a00      	cmp	r2, #0
   1a036:	d02e      	beq.n	1a096 <yield+0xb6>
			firstYield->_prev = nullptr;
   1a038:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   1a03a:	b905      	cbnz	r5, 1a03e <yield+0x5e>
   1a03c:	b662      	cpsie	i
		first->_triggered = false;
   1a03e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   1a040:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   1a042:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   1a044:	4798      	blx	r3
		runningFromYield = false;
   1a046:	7025      	strb	r5, [r4, #0]
   1a048:	e7dc      	b.n	1a004 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1a04a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1a0b0 <yield+0xd0>
   1a04e:	f898 3000 	ldrb.w	r3, [r8]
   1a052:	2b00      	cmp	r3, #0
   1a054:	d0d2      	beq.n	19ffc <yield+0x1c>
   1a056:	2500      	movs	r5, #0
   1a058:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1a0b4 <yield+0xd4>
   1a05c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   1a05e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1a062:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   1a064:	6823      	ldr	r3, [r4, #0]
   1a066:	4620      	mov	r0, r4
   1a068:	691b      	ldr	r3, [r3, #16]
   1a06a:	4798      	blx	r3
   1a06c:	b110      	cbz	r0, 1a074 <yield+0x94>
   1a06e:	6963      	ldr	r3, [r4, #20]
   1a070:	689b      	ldr	r3, [r3, #8]
   1a072:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1a074:	f898 2000 	ldrb.w	r2, [r8]
   1a078:	b2eb      	uxtb	r3, r5
   1a07a:	429a      	cmp	r2, r3
   1a07c:	d8ef      	bhi.n	1a05e <yield+0x7e>
   1a07e:	e7bd      	b.n	19ffc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   1a080:	f7ff fec6 	bl	19e10 <usb_serial_available>
		if (Serial.available()) serialEvent();
   1a084:	2800      	cmp	r0, #0
   1a086:	d0b7      	beq.n	19ff8 <yield+0x18>
   1a088:	f3af 8000 	nop.w
   1a08c:	e7b4      	b.n	19ff8 <yield+0x18>
		if (doit) __enable_irq();
   1a08e:	2d00      	cmp	r5, #0
   1a090:	d1b8      	bne.n	1a004 <yield+0x24>
   1a092:	b662      	cpsie	i
   1a094:	e7b6      	b.n	1a004 <yield+0x24>
			lastYield = nullptr;
   1a096:	4b05      	ldr	r3, [pc, #20]	; (1a0ac <yield+0xcc>)
   1a098:	601a      	str	r2, [r3, #0]
   1a09a:	e7ce      	b.n	1a03a <yield+0x5a>
   1a09c:	2000d3a0 	.word	0x2000d3a0
   1a0a0:	2000d392 	.word	0x2000d392
   1a0a4:	2000c978 	.word	0x2000c978
   1a0a8:	2000d38f 	.word	0x2000d38f
   1a0ac:	2000c984 	.word	0x2000c984
   1a0b0:	2000d390 	.word	0x2000d390
   1a0b4:	2000c988 	.word	0x2000c988

0001a0b8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
   1a0b8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
   1a0bc:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
   1a0be:	4666      	mov	r6, ip
	int i=0, j;
   1a0c0:	2400      	movs	r4, #0
   1a0c2:	e000      	b.n	1a0c6 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   1a0c4:	3401      	adds	r4, #1
		digit = val % radix;
   1a0c6:	fbb0 f5f2 	udiv	r5, r0, r2
   1a0ca:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1a0ce:	2b09      	cmp	r3, #9
   1a0d0:	f103 0e37 	add.w	lr, r3, #55	; 0x37
   1a0d4:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1a0d8:	fa5f fe8e 	uxtb.w	lr, lr
   1a0dc:	bf98      	it	ls
   1a0de:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
   1a0e2:	4290      	cmp	r0, r2
		val /= radix;
   1a0e4:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1a0e6:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
   1a0ea:	d2eb      	bcs.n	1a0c4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
   1a0ec:	1c63      	adds	r3, r4, #1
   1a0ee:	2200      	movs	r2, #0
   1a0f0:	18c8      	adds	r0, r1, r3
   1a0f2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
   1a0f4:	b17c      	cbz	r4, 1a116 <ultoa+0x5e>
		t = buf[j];
   1a0f6:	4662      	mov	r2, ip
   1a0f8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
   1a0fc:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
   1a100:	eba1 030c 	sub.w	r3, r1, ip
   1a104:	3202      	adds	r2, #2
		buf[j] = buf[i];
   1a106:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
   1a10a:	3b01      	subs	r3, #1
   1a10c:	1a52      	subs	r2, r2, r1
		buf[i] = t;
   1a10e:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
   1a110:	4423      	add	r3, r4
   1a112:	429a      	cmp	r2, r3
   1a114:	dbef      	blt.n	1a0f6 <ultoa+0x3e>
	}
	return buf;
}
   1a116:	4608      	mov	r0, r1
   1a118:	bd70      	pop	{r4, r5, r6, pc}
   1a11a:	bf00      	nop

0001a11c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   1a11c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   1a11e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   1a120:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   1a124:	4619      	mov	r1, r3
{
   1a126:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1a128:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1a12c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1a130:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1a134:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   1a138:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   1a13c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   1a13e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   1a142:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1a146:	b29b      	uxth	r3, r3
   1a148:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   1a14c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1a150:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   1a154:	3101      	adds	r1, #1
   1a156:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   1a15a:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1a15c:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1a15e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   1a162:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   1a164:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   1a166:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   1a168:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   1a16a:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   1a16e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   1a170:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   1a172:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   1a174:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   1a176:	d1eb      	bne.n	1a150 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1a178:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1a17c:	b29b      	uxth	r3, r3
   1a17e:	f043 030f 	orr.w	r3, r3, #15
   1a182:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   1a186:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1a18a:	b29b      	uxth	r3, r3
   1a18c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   1a190:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   1a194:	bd10      	pop	{r4, pc}
   1a196:	bf00      	nop

0001a198 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1a198:	4b37      	ldr	r3, [pc, #220]	; (1a278 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1a19a:	4a38      	ldr	r2, [pc, #224]	; (1a27c <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1a19c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   1a19e:	4838      	ldr	r0, [pc, #224]	; (1a280 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1a1a0:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   1a1a4:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1a1a6:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1a1a8:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1a1ac:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1a1b0:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1a1b4:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1a1b8:	430a      	orrs	r2, r1
   1a1ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   1a1be:	f7ff ffad 	bl	1a11c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   1a1c2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1a1c6:	f7ff ffa9 	bl	1a11c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   1a1ca:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1a1ce:	f7ff ffa5 	bl	1a11c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   1a1d2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1a1d6:	f7ff ffa1 	bl	1a11c <flexpwm_init>
	for (i=0; i < 4; i++) {
   1a1da:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1a1dc:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1a1e0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   1a1e4:	4611      	mov	r1, r2
   1a1e6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1a1ea:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1a1ee:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1a1f0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1a1f2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1a1f4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1a1f6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1a1fa:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1a1fc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1a1fe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1a202:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1a204:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1a206:	d1ee      	bne.n	1a1e6 <pwm_init+0x4e>
   1a208:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1a20a:	481e      	ldr	r0, [pc, #120]	; (1a284 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1a20c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1a210:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   1a214:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1a216:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1a21a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   1a21e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1a222:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1a226:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1a228:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1a22a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1a22c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1a22e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1a232:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1a234:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1a236:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1a23a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1a23c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1a23e:	d1ee      	bne.n	1a21e <pwm_init+0x86>
   1a240:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1a242:	4811      	ldr	r0, [pc, #68]	; (1a288 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1a244:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1a246:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   1a24a:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1a24c:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1a250:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   1a254:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1a258:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1a25c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1a25e:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1a260:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1a262:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1a264:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1a266:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1a268:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1a26a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1a26e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1a270:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   1a274:	d1ee      	bne.n	1a254 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   1a276:	bd70      	pop	{r4, r5, r6, pc}
   1a278:	400fc000 	.word	0x400fc000
   1a27c:	fc030000 	.word	0xfc030000
   1a280:	403dc000 	.word	0x403dc000
   1a284:	401e0000 	.word	0x401e0000
   1a288:	401e4000 	.word	0x401e4000

0001a28c <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
   1a28c:	4a07      	ldr	r2, [pc, #28]	; (1a2ac <rtc_get+0x20>)
   1a28e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   1a290:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
   1a292:	4619      	mov	r1, r3
   1a294:	4684      	mov	ip, r0
   1a296:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   1a298:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   1a29a:	4299      	cmp	r1, r3
   1a29c:	d1f9      	bne.n	1a292 <rtc_get+0x6>
   1a29e:	4584      	cmp	ip, r0
   1a2a0:	d1f7      	bne.n	1a292 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
   1a2a2:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
   1a2a4:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   1a2a8:	4770      	bx	lr
   1a2aa:	bf00      	nop
   1a2ac:	400d4000 	.word	0x400d4000

0001a2b0 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   1a2b0:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   1a2b2:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   1a2b6:	b15b      	cbz	r3, 1a2d0 <sm_align_pool+0x20>
   1a2b8:	b1ba      	cbz	r2, 1a2ea <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   1a2ba:	4b0f      	ldr	r3, [pc, #60]	; (1a2f8 <sm_align_pool+0x48>)
   1a2bc:	fba3 1302 	umull	r1, r3, r3, r2
   1a2c0:	08db      	lsrs	r3, r3, #3
   1a2c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a2c6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   1a2ca:	d10a      	bne.n	1a2e2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   1a2cc:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   1a2ce:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   1a2d0:	4b09      	ldr	r3, [pc, #36]	; (1a2f8 <sm_align_pool+0x48>)
   1a2d2:	fba3 1302 	umull	r1, r3, r3, r2
   1a2d6:	08db      	lsrs	r3, r3, #3
   1a2d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   1a2dc:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   1a2e0:	d001      	beq.n	1a2e6 <sm_align_pool+0x36>
   1a2e2:	1ad2      	subs	r2, r2, r3
   1a2e4:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   1a2e6:	2af0      	cmp	r2, #240	; 0xf0
   1a2e8:	d8f0      	bhi.n	1a2cc <sm_align_pool+0x1c>
		errno = ENOSPC;
   1a2ea:	f008 fb13 	bl	22914 <__errno>
   1a2ee:	221c      	movs	r2, #28
   1a2f0:	4603      	mov	r3, r0
   1a2f2:	2000      	movs	r0, #0
   1a2f4:	601a      	str	r2, [r3, #0]
}
   1a2f6:	bd08      	pop	{r3, pc}
   1a2f8:	aaaaaaab 	.word	0xaaaaaaab

0001a2fc <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   1a2fc:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   1a2fe:	4604      	mov	r4, r0
   1a300:	b338      	cbz	r0, 1a352 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   1a302:	b119      	cbz	r1, 1a30c <sm_set_pool+0x10>
   1a304:	fab2 f682 	clz	r6, r2
   1a308:	0976      	lsrs	r6, r6, #5
   1a30a:	b9a2      	cbnz	r2, 1a336 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   1a30c:	6820      	ldr	r0, [r4, #0]
   1a30e:	b300      	cbz	r0, 1a352 <sm_set_pool+0x56>
   1a310:	6862      	ldr	r2, [r4, #4]
   1a312:	b1f2      	cbz	r2, 1a352 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   1a314:	4b18      	ldr	r3, [pc, #96]	; (1a378 <sm_set_pool+0x7c>)
   1a316:	4919      	ldr	r1, [pc, #100]	; (1a37c <sm_set_pool+0x80>)
   1a318:	fb02 f303 	mul.w	r3, r2, r3
   1a31c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   1a320:	d317      	bcc.n	1a352 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   1a322:	68a3      	ldr	r3, [r4, #8]
   1a324:	b9e3      	cbnz	r3, 1a360 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   1a326:	2200      	movs	r2, #0
			return 1;
   1a328:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   1a32a:	6022      	str	r2, [r4, #0]
   1a32c:	6062      	str	r2, [r4, #4]
   1a32e:	60a2      	str	r2, [r4, #8]
   1a330:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   1a332:	4618      	mov	r0, r3
   1a334:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   1a336:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   1a338:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   1a33a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   1a33e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   1a340:	f7ff ffb6 	bl	1a2b0 <sm_align_pool>
   1a344:	4603      	mov	r3, r0
   1a346:	2800      	cmp	r0, #0
   1a348:	d0f3      	beq.n	1a332 <sm_set_pool+0x36>
	if (do_zero) {
   1a34a:	b96d      	cbnz	r5, 1a368 <sm_set_pool+0x6c>
	return 1;
   1a34c:	2301      	movs	r3, #1
}
   1a34e:	4618      	mov	r0, r3
   1a350:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   1a352:	f008 fadf 	bl	22914 <__errno>
   1a356:	2216      	movs	r2, #22
		return 0;
   1a358:	2300      	movs	r3, #0
		errno = EINVAL;
   1a35a:	6002      	str	r2, [r0, #0]
}
   1a35c:	4618      	mov	r0, r3
   1a35e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   1a360:	2100      	movs	r1, #0
   1a362:	f00a fc43 	bl	24bec <memset>
   1a366:	e7de      	b.n	1a326 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   1a368:	6862      	ldr	r2, [r4, #4]
   1a36a:	4631      	mov	r1, r6
   1a36c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   1a36e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   1a370:	f00a fc3c 	bl	24bec <memset>
	return 1;
   1a374:	2301      	movs	r3, #1
   1a376:	e7dc      	b.n	1a332 <sm_set_pool+0x36>
   1a378:	aaaaaaab 	.word	0xaaaaaaab
   1a37c:	15555555 	.word	0x15555555

0001a380 <__aeabi_atexit>:
   1a380:	4603      	mov	r3, r0
   1a382:	4608      	mov	r0, r1
   1a384:	4619      	mov	r1, r3
   1a386:	f00a bc83 	b.w	24c90 <__cxa_atexit>
   1a38a:	bf00      	nop

0001a38c <__cxa_pure_virtual>:
   1a38c:	b508      	push	{r3, lr}
   1a38e:	4903      	ldr	r1, [pc, #12]	; (1a39c <__cxa_pure_virtual+0x10>)
   1a390:	221b      	movs	r2, #27
   1a392:	2002      	movs	r0, #2
   1a394:	f008 f818 	bl	223c8 <write>
   1a398:	f000 f814 	bl	1a3c4 <std::terminate()>
   1a39c:	20004178 	.word	0x20004178

0001a3a0 <__cxa_deleted_virtual>:
   1a3a0:	b508      	push	{r3, lr}
   1a3a2:	4903      	ldr	r1, [pc, #12]	; (1a3b0 <__cxa_deleted_virtual+0x10>)
   1a3a4:	221e      	movs	r2, #30
   1a3a6:	2002      	movs	r0, #2
   1a3a8:	f008 f80e 	bl	223c8 <write>
   1a3ac:	f000 f80a 	bl	1a3c4 <std::terminate()>
   1a3b0:	20004158 	.word	0x20004158

0001a3b4 <__cxxabiv1::__terminate(void (*)())>:
   1a3b4:	b508      	push	{r3, lr}
   1a3b6:	4780      	blx	r0
   1a3b8:	f7fe fd7e 	bl	18eb8 <abort>
   1a3bc:	f006 f942 	bl	20644 <__cxa_begin_catch>
   1a3c0:	f7fe fd7a 	bl	18eb8 <abort>

0001a3c4 <std::terminate()>:
   1a3c4:	b508      	push	{r3, lr}
   1a3c6:	4b03      	ldr	r3, [pc, #12]	; (1a3d4 <std::terminate()+0x10>)
   1a3c8:	6818      	ldr	r0, [r3, #0]
   1a3ca:	f3bf 8f5b 	dmb	ish
   1a3ce:	f7ff fff1 	bl	1a3b4 <__cxxabiv1::__terminate(void (*)())>
   1a3d2:	bf00      	nop
   1a3d4:	20005a3c 	.word	0x20005a3c

0001a3d8 <__cxxabiv1::__unexpected(void (*)())>:
   1a3d8:	b508      	push	{r3, lr}
   1a3da:	4780      	blx	r0
   1a3dc:	f7ff fff2 	bl	1a3c4 <std::terminate()>

0001a3e0 <std::unexpected()>:
   1a3e0:	b508      	push	{r3, lr}
   1a3e2:	4b03      	ldr	r3, [pc, #12]	; (1a3f0 <std::unexpected()+0x10>)
   1a3e4:	6818      	ldr	r0, [r3, #0]
   1a3e6:	f3bf 8f5b 	dmb	ish
   1a3ea:	f7ff fff5 	bl	1a3d8 <__cxxabiv1::__unexpected(void (*)())>
   1a3ee:	bf00      	nop
   1a3f0:	20005a40 	.word	0x20005a40

0001a3f4 <std::get_terminate()>:
   1a3f4:	4b02      	ldr	r3, [pc, #8]	; (1a400 <std::get_terminate()+0xc>)
   1a3f6:	6818      	ldr	r0, [r3, #0]
   1a3f8:	f3bf 8f5b 	dmb	ish
   1a3fc:	4770      	bx	lr
   1a3fe:	bf00      	nop
   1a400:	20005a3c 	.word	0x20005a3c

0001a404 <std::get_unexpected()>:
   1a404:	4b02      	ldr	r3, [pc, #8]	; (1a410 <std::get_unexpected()+0xc>)
   1a406:	6818      	ldr	r0, [r3, #0]
   1a408:	f3bf 8f5b 	dmb	ish
   1a40c:	4770      	bx	lr
   1a40e:	bf00      	nop
   1a410:	20005a40 	.word	0x20005a40

0001a414 <__gnu_cxx::__verbose_terminate_handler()>:
   1a414:	b570      	push	{r4, r5, r6, lr}
   1a416:	4b3b      	ldr	r3, [pc, #236]	; (1a504 <__gnu_cxx::__verbose_terminate_handler()+0xf0>)
   1a418:	781a      	ldrb	r2, [r3, #0]
   1a41a:	b082      	sub	sp, #8
   1a41c:	2a00      	cmp	r2, #0
   1a41e:	d141      	bne.n	1a4a4 <__gnu_cxx::__verbose_terminate_handler()+0x90>
   1a420:	2401      	movs	r4, #1
   1a422:	701c      	strb	r4, [r3, #0]
   1a424:	f006 fd64 	bl	20ef0 <__cxa_current_exception_type>
   1a428:	2800      	cmp	r0, #0
   1a42a:	d031      	beq.n	1a490 <__gnu_cxx::__verbose_terminate_handler()+0x7c>
   1a42c:	6844      	ldr	r4, [r0, #4]
   1a42e:	4d36      	ldr	r5, [pc, #216]	; (1a508 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1a430:	7823      	ldrb	r3, [r4, #0]
   1a432:	2b2a      	cmp	r3, #42	; 0x2a
   1a434:	bf08      	it	eq
   1a436:	3401      	addeq	r4, #1
   1a438:	2200      	movs	r2, #0
   1a43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a43e:	4611      	mov	r1, r2
   1a440:	ab01      	add	r3, sp, #4
   1a442:	9001      	str	r0, [sp, #4]
   1a444:	4620      	mov	r0, r4
   1a446:	f005 ffd3 	bl	203f0 <__cxa_demangle>
   1a44a:	682b      	ldr	r3, [r5, #0]
   1a44c:	2230      	movs	r2, #48	; 0x30
   1a44e:	68db      	ldr	r3, [r3, #12]
   1a450:	4606      	mov	r6, r0
   1a452:	2101      	movs	r1, #1
   1a454:	482d      	ldr	r0, [pc, #180]	; (1a50c <__gnu_cxx::__verbose_terminate_handler()+0xf8>)
   1a456:	f008 fa4d 	bl	228f4 <fwrite>
   1a45a:	9b01      	ldr	r3, [sp, #4]
   1a45c:	b193      	cbz	r3, 1a484 <__gnu_cxx::__verbose_terminate_handler()+0x70>
   1a45e:	682b      	ldr	r3, [r5, #0]
   1a460:	4620      	mov	r0, r4
   1a462:	68d9      	ldr	r1, [r3, #12]
   1a464:	f008 f834 	bl	224d0 <fputs>
   1a468:	682b      	ldr	r3, [r5, #0]
   1a46a:	4829      	ldr	r0, [pc, #164]	; (1a510 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
   1a46c:	68db      	ldr	r3, [r3, #12]
   1a46e:	2202      	movs	r2, #2
   1a470:	2101      	movs	r1, #1
   1a472:	f008 fa3f 	bl	228f4 <fwrite>
   1a476:	9b01      	ldr	r3, [sp, #4]
   1a478:	b913      	cbnz	r3, 1a480 <__gnu_cxx::__verbose_terminate_handler()+0x6c>
   1a47a:	4630      	mov	r0, r6
   1a47c:	f00a f832 	bl	244e4 <free>
   1a480:	f006 fcfe 	bl	20e80 <__cxa_rethrow>
   1a484:	682b      	ldr	r3, [r5, #0]
   1a486:	4630      	mov	r0, r6
   1a488:	68d9      	ldr	r1, [r3, #12]
   1a48a:	f008 f821 	bl	224d0 <fputs>
   1a48e:	e7eb      	b.n	1a468 <__gnu_cxx::__verbose_terminate_handler()+0x54>
   1a490:	4b1d      	ldr	r3, [pc, #116]	; (1a508 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1a492:	4820      	ldr	r0, [pc, #128]	; (1a514 <__gnu_cxx::__verbose_terminate_handler()+0x100>)
   1a494:	681b      	ldr	r3, [r3, #0]
   1a496:	222d      	movs	r2, #45	; 0x2d
   1a498:	68db      	ldr	r3, [r3, #12]
   1a49a:	4621      	mov	r1, r4
   1a49c:	f008 fa2a 	bl	228f4 <fwrite>
   1a4a0:	f7fe fd0a 	bl	18eb8 <abort>
   1a4a4:	4b18      	ldr	r3, [pc, #96]	; (1a508 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1a4a6:	481c      	ldr	r0, [pc, #112]	; (1a518 <__gnu_cxx::__verbose_terminate_handler()+0x104>)
   1a4a8:	681b      	ldr	r3, [r3, #0]
   1a4aa:	221d      	movs	r2, #29
   1a4ac:	68db      	ldr	r3, [r3, #12]
   1a4ae:	2101      	movs	r1, #1
   1a4b0:	f008 fa20 	bl	228f4 <fwrite>
   1a4b4:	f7fe fd00 	bl	18eb8 <abort>
   1a4b8:	2901      	cmp	r1, #1
   1a4ba:	460c      	mov	r4, r1
   1a4bc:	d119      	bne.n	1a4f2 <__gnu_cxx::__verbose_terminate_handler()+0xde>
   1a4be:	f006 f8c1 	bl	20644 <__cxa_begin_catch>
   1a4c2:	6803      	ldr	r3, [r0, #0]
   1a4c4:	689b      	ldr	r3, [r3, #8]
   1a4c6:	4798      	blx	r3
   1a4c8:	682b      	ldr	r3, [r5, #0]
   1a4ca:	4621      	mov	r1, r4
   1a4cc:	68db      	ldr	r3, [r3, #12]
   1a4ce:	4604      	mov	r4, r0
   1a4d0:	220b      	movs	r2, #11
   1a4d2:	4812      	ldr	r0, [pc, #72]	; (1a51c <__gnu_cxx::__verbose_terminate_handler()+0x108>)
   1a4d4:	f008 fa0e 	bl	228f4 <fwrite>
   1a4d8:	682b      	ldr	r3, [r5, #0]
   1a4da:	4620      	mov	r0, r4
   1a4dc:	68d9      	ldr	r1, [r3, #12]
   1a4de:	f007 fff7 	bl	224d0 <fputs>
   1a4e2:	682b      	ldr	r3, [r5, #0]
   1a4e4:	200a      	movs	r0, #10
   1a4e6:	68d9      	ldr	r1, [r3, #12]
   1a4e8:	f007 ff7c 	bl	223e4 <fputc>
   1a4ec:	f006 f8e8 	bl	206c0 <__cxa_end_catch>
   1a4f0:	e7d6      	b.n	1a4a0 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
   1a4f2:	f006 f8a7 	bl	20644 <__cxa_begin_catch>
   1a4f6:	f006 f8e3 	bl	206c0 <__cxa_end_catch>
   1a4fa:	e7d1      	b.n	1a4a0 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
   1a4fc:	f006 f8e0 	bl	206c0 <__cxa_end_catch>
   1a500:	f005 ffd8 	bl	204b4 <__cxa_end_cleanup>
   1a504:	2000d393 	.word	0x2000d393
   1a508:	20005fe4 	.word	0x20005fe4
   1a50c:	2000221c 	.word	0x2000221c
   1a510:	20002250 	.word	0x20002250
   1a514:	20002254 	.word	0x20002254
   1a518:	200021fc 	.word	0x200021fc
   1a51c:	20002284 	.word	0x20002284

0001a520 <d_make_comp>:
   1a520:	2931      	cmp	r1, #49	; 0x31
   1a522:	b570      	push	{r4, r5, r6, lr}
   1a524:	4686      	mov	lr, r0
   1a526:	d845      	bhi.n	1a5b4 <d_make_comp+0x94>
   1a528:	2928      	cmp	r1, #40	; 0x28
   1a52a:	d82a      	bhi.n	1a582 <d_make_comp+0x62>
   1a52c:	290a      	cmp	r1, #10
   1a52e:	d920      	bls.n	1a572 <d_make_comp+0x52>
   1a530:	f1a1 0c0b 	sub.w	ip, r1, #11
   1a534:	4c32      	ldr	r4, [pc, #200]	; (1a600 <d_make_comp+0xe0>)
   1a536:	fa5f fc8c 	uxtb.w	ip, ip
   1a53a:	2001      	movs	r0, #1
   1a53c:	fa00 f00c 	lsl.w	r0, r0, ip
   1a540:	4004      	ands	r4, r0
   1a542:	2c00      	cmp	r4, #0
   1a544:	d04d      	beq.n	1a5e2 <d_make_comp+0xc2>
   1a546:	b1d2      	cbz	r2, 1a57e <d_make_comp+0x5e>
   1a548:	e9de 4005 	ldrd	r4, r0, [lr, #20]
   1a54c:	4284      	cmp	r4, r0
   1a54e:	da16      	bge.n	1a57e <d_make_comp+0x5e>
   1a550:	f8de 5010 	ldr.w	r5, [lr, #16]
   1a554:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   1a558:	eb05 008c 	add.w	r0, r5, ip, lsl #2
   1a55c:	3401      	adds	r4, #1
   1a55e:	2600      	movs	r6, #0
   1a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1a564:	f8ce 4014 	str.w	r4, [lr, #20]
   1a568:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
   1a56c:	e9c0 2303 	strd	r2, r3, [r0, #12]
   1a570:	bd70      	pop	{r4, r5, r6, pc}
   1a572:	2904      	cmp	r1, #4
   1a574:	d930      	bls.n	1a5d8 <d_make_comp+0xb8>
   1a576:	f1a1 0009 	sub.w	r0, r1, #9
   1a57a:	2801      	cmp	r0, #1
   1a57c:	d9e3      	bls.n	1a546 <d_make_comp+0x26>
   1a57e:	2000      	movs	r0, #0
   1a580:	bd70      	pop	{r4, r5, r6, pc}
   1a582:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
   1a586:	2808      	cmp	r0, #8
   1a588:	d8f9      	bhi.n	1a57e <d_make_comp+0x5e>
   1a58a:	a401      	add	r4, pc, #4	; (adr r4, 1a590 <d_make_comp+0x70>)
   1a58c:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
   1a590:	0001a549 	.word	0x0001a549
   1a594:	0001a5dd 	.word	0x0001a5dd
   1a598:	0001a5d9 	.word	0x0001a5d9
   1a59c:	0001a57f 	.word	0x0001a57f
   1a5a0:	0001a5d9 	.word	0x0001a5d9
   1a5a4:	0001a549 	.word	0x0001a549
   1a5a8:	0001a549 	.word	0x0001a549
   1a5ac:	0001a547 	.word	0x0001a547
   1a5b0:	0001a5dd 	.word	0x0001a5dd
   1a5b4:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
   1a5b8:	b2c0      	uxtb	r0, r0
   1a5ba:	281d      	cmp	r0, #29
   1a5bc:	d8df      	bhi.n	1a57e <d_make_comp+0x5e>
   1a5be:	4c11      	ldr	r4, [pc, #68]	; (1a604 <d_make_comp+0xe4>)
   1a5c0:	f04f 0c01 	mov.w	ip, #1
   1a5c4:	fa0c fc00 	lsl.w	ip, ip, r0
   1a5c8:	ea0c 0404 	and.w	r4, ip, r4
   1a5cc:	2c00      	cmp	r4, #0
   1a5ce:	d1ba      	bne.n	1a546 <d_make_comp+0x26>
   1a5d0:	480d      	ldr	r0, [pc, #52]	; (1a608 <d_make_comp+0xe8>)
   1a5d2:	ea0c 0000 	and.w	r0, ip, r0
   1a5d6:	b170      	cbz	r0, 1a5f6 <d_make_comp+0xd6>
   1a5d8:	2a00      	cmp	r2, #0
   1a5da:	d0d0      	beq.n	1a57e <d_make_comp+0x5e>
   1a5dc:	2b00      	cmp	r3, #0
   1a5de:	d1b3      	bne.n	1a548 <d_make_comp+0x28>
   1a5e0:	e7cd      	b.n	1a57e <d_make_comp+0x5e>
   1a5e2:	f410 1f7f 	tst.w	r0, #4177920	; 0x3fc000
   1a5e6:	d1af      	bne.n	1a548 <d_make_comp+0x28>
   1a5e8:	4c08      	ldr	r4, [pc, #32]	; (1a60c <d_make_comp+0xec>)
   1a5ea:	4004      	ands	r4, r0
   1a5ec:	2c00      	cmp	r4, #0
   1a5ee:	d0c6      	beq.n	1a57e <d_make_comp+0x5e>
   1a5f0:	2a00      	cmp	r2, #0
   1a5f2:	d1f3      	bne.n	1a5dc <d_make_comp+0xbc>
   1a5f4:	e7c3      	b.n	1a57e <d_make_comp+0x5e>
   1a5f6:	f01c 5c50 	ands.w	ip, ip, #872415232	; 0x34000000
   1a5fa:	d0c0      	beq.n	1a57e <d_make_comp+0x5e>
   1a5fc:	e7a4      	b.n	1a548 <d_make_comp+0x28>
   1a5fe:	bf00      	nop
   1a600:	2f801ffe 	.word	0x2f801ffe
   1a604:	01c71107 	.word	0x01c71107
   1a608:	0a002ef8 	.word	0x0a002ef8
   1a60c:	00400001 	.word	0x00400001

0001a610 <d_number>:
   1a610:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a612:	68c2      	ldr	r2, [r0, #12]
   1a614:	7811      	ldrb	r1, [r2, #0]
   1a616:	296e      	cmp	r1, #110	; 0x6e
   1a618:	4686      	mov	lr, r0
   1a61a:	d025      	beq.n	1a668 <d_number+0x58>
   1a61c:	3930      	subs	r1, #48	; 0x30
   1a61e:	b2cb      	uxtb	r3, r1
   1a620:	2b09      	cmp	r3, #9
   1a622:	d82b      	bhi.n	1a67c <d_number+0x6c>
   1a624:	2600      	movs	r6, #0
   1a626:	4d16      	ldr	r5, [pc, #88]	; (1a680 <d_number+0x70>)
   1a628:	2000      	movs	r0, #0
   1a62a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1a62e:	e002      	b.n	1a636 <d_number+0x26>
   1a630:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
   1a634:	dc15      	bgt.n	1a662 <d_number+0x52>
   1a636:	3201      	adds	r2, #1
   1a638:	f8ce 200c 	str.w	r2, [lr, #12]
   1a63c:	7813      	ldrb	r3, [r2, #0]
   1a63e:	3b30      	subs	r3, #48	; 0x30
   1a640:	fa5f fc83 	uxtb.w	ip, r3
   1a644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a648:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   1a64c:	f1bc 0f09 	cmp.w	ip, #9
   1a650:	4619      	mov	r1, r3
   1a652:	eba4 0303 	sub.w	r3, r4, r3
   1a656:	fba5 7303 	umull	r7, r3, r5, r3
   1a65a:	d9e9      	bls.n	1a630 <d_number+0x20>
   1a65c:	b106      	cbz	r6, 1a660 <d_number+0x50>
   1a65e:	4240      	negs	r0, r0
   1a660:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a666:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a668:	1c53      	adds	r3, r2, #1
   1a66a:	60c3      	str	r3, [r0, #12]
   1a66c:	7851      	ldrb	r1, [r2, #1]
   1a66e:	3930      	subs	r1, #48	; 0x30
   1a670:	b2ca      	uxtb	r2, r1
   1a672:	2a09      	cmp	r2, #9
   1a674:	d802      	bhi.n	1a67c <d_number+0x6c>
   1a676:	461a      	mov	r2, r3
   1a678:	2601      	movs	r6, #1
   1a67a:	e7d4      	b.n	1a626 <d_number+0x16>
   1a67c:	2000      	movs	r0, #0
   1a67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a680:	cccccccd 	.word	0xcccccccd

0001a684 <d_call_offset>:
   1a684:	b510      	push	{r4, lr}
   1a686:	4604      	mov	r4, r0
   1a688:	b929      	cbnz	r1, 1a696 <d_call_offset+0x12>
   1a68a:	68c3      	ldr	r3, [r0, #12]
   1a68c:	781a      	ldrb	r2, [r3, #0]
   1a68e:	b16a      	cbz	r2, 1a6ac <d_call_offset+0x28>
   1a690:	1c5a      	adds	r2, r3, #1
   1a692:	60c2      	str	r2, [r0, #12]
   1a694:	7819      	ldrb	r1, [r3, #0]
   1a696:	2968      	cmp	r1, #104	; 0x68
   1a698:	d00c      	beq.n	1a6b4 <d_call_offset+0x30>
   1a69a:	2976      	cmp	r1, #118	; 0x76
   1a69c:	d106      	bne.n	1a6ac <d_call_offset+0x28>
   1a69e:	4620      	mov	r0, r4
   1a6a0:	f7ff ffb6 	bl	1a610 <d_number>
   1a6a4:	68e3      	ldr	r3, [r4, #12]
   1a6a6:	781a      	ldrb	r2, [r3, #0]
   1a6a8:	2a5f      	cmp	r2, #95	; 0x5f
   1a6aa:	d001      	beq.n	1a6b0 <d_call_offset+0x2c>
   1a6ac:	2000      	movs	r0, #0
   1a6ae:	bd10      	pop	{r4, pc}
   1a6b0:	3301      	adds	r3, #1
   1a6b2:	60e3      	str	r3, [r4, #12]
   1a6b4:	4620      	mov	r0, r4
   1a6b6:	f7ff ffab 	bl	1a610 <d_number>
   1a6ba:	68e3      	ldr	r3, [r4, #12]
   1a6bc:	781a      	ldrb	r2, [r3, #0]
   1a6be:	2a5f      	cmp	r2, #95	; 0x5f
   1a6c0:	d1f4      	bne.n	1a6ac <d_call_offset+0x28>
   1a6c2:	3301      	adds	r3, #1
   1a6c4:	60e3      	str	r3, [r4, #12]
   1a6c6:	2001      	movs	r0, #1
   1a6c8:	bd10      	pop	{r4, pc}
   1a6ca:	bf00      	nop

0001a6cc <d_ref_qualifier>:
   1a6cc:	b410      	push	{r4}
   1a6ce:	68c3      	ldr	r3, [r0, #12]
   1a6d0:	460a      	mov	r2, r1
   1a6d2:	7819      	ldrb	r1, [r3, #0]
   1a6d4:	2952      	cmp	r1, #82	; 0x52
   1a6d6:	d010      	beq.n	1a6fa <d_ref_qualifier+0x2e>
   1a6d8:	294f      	cmp	r1, #79	; 0x4f
   1a6da:	d003      	beq.n	1a6e4 <d_ref_qualifier+0x18>
   1a6dc:	4610      	mov	r0, r2
   1a6de:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a6e2:	4770      	bx	lr
   1a6e4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1a6e6:	2120      	movs	r1, #32
   1a6e8:	3403      	adds	r4, #3
   1a6ea:	3301      	adds	r3, #1
   1a6ec:	62c4      	str	r4, [r0, #44]	; 0x2c
   1a6ee:	60c3      	str	r3, [r0, #12]
   1a6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	f7ff bf13 	b.w	1a520 <d_make_comp>
   1a6fa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1a6fc:	211f      	movs	r1, #31
   1a6fe:	3402      	adds	r4, #2
   1a700:	e7f3      	b.n	1a6ea <d_ref_qualifier+0x1e>
   1a702:	bf00      	nop

0001a704 <d_count_templates_scopes>:
   1a704:	2900      	cmp	r1, #0
   1a706:	d066      	beq.n	1a7d6 <d_count_templates_scopes+0xd2>
   1a708:	b538      	push	{r3, r4, r5, lr}
   1a70a:	4605      	mov	r5, r0
   1a70c:	460c      	mov	r4, r1
   1a70e:	68a3      	ldr	r3, [r4, #8]
   1a710:	2b01      	cmp	r3, #1
   1a712:	dc39      	bgt.n	1a788 <d_count_templates_scopes+0x84>
   1a714:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
   1a718:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1a71c:	f103 0301 	add.w	r3, r3, #1
   1a720:	dc32      	bgt.n	1a788 <d_count_templates_scopes+0x84>
   1a722:	7822      	ldrb	r2, [r4, #0]
   1a724:	60a3      	str	r3, [r4, #8]
   1a726:	1e53      	subs	r3, r2, #1
   1a728:	2b50      	cmp	r3, #80	; 0x50
   1a72a:	d82d      	bhi.n	1a788 <d_count_templates_scopes+0x84>
   1a72c:	e8df f003 	tbb	[pc, r3]
   1a730:	4c313131 	.word	0x4c313131
   1a734:	2d2d2c2c 	.word	0x2d2d2c2c
   1a738:	31313131 	.word	0x31313131
   1a73c:	31313131 	.word	0x31313131
   1a740:	31313131 	.word	0x31313131
   1a744:	2c313131 	.word	0x2c313131
   1a748:	31313131 	.word	0x31313131
   1a74c:	31313131 	.word	0x31313131
   1a750:	42423131 	.word	0x42423131
   1a754:	312c3131 	.word	0x312c3131
   1a758:	29313131 	.word	0x29313131
   1a75c:	31313131 	.word	0x31313131
   1a760:	312d2c31 	.word	0x312d2c31
   1a764:	31313131 	.word	0x31313131
   1a768:	31313131 	.word	0x31313131
   1a76c:	31313131 	.word	0x31313131
   1a770:	312c2c31 	.word	0x312c2c31
   1a774:	29292929 	.word	0x29292929
   1a778:	3131312c 	.word	0x3131312c
   1a77c:	31313131 	.word	0x31313131
   1a780:	31          	.byte	0x31
   1a781:	00          	.byte	0x00
   1a782:	68e4      	ldr	r4, [r4, #12]
   1a784:	2c00      	cmp	r4, #0
   1a786:	d1c2      	bne.n	1a70e <d_count_templates_scopes+0xa>
   1a788:	bd38      	pop	{r3, r4, r5, pc}
   1a78a:	6924      	ldr	r4, [r4, #16]
   1a78c:	2c00      	cmp	r4, #0
   1a78e:	d1be      	bne.n	1a70e <d_count_templates_scopes+0xa>
   1a790:	e7fa      	b.n	1a788 <d_count_templates_scopes+0x84>
   1a792:	68e1      	ldr	r1, [r4, #12]
   1a794:	1c43      	adds	r3, r0, #1
   1a796:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1a79a:	4628      	mov	r0, r5
   1a79c:	f7ff ffb2 	bl	1a704 <d_count_templates_scopes>
   1a7a0:	6921      	ldr	r1, [r4, #16]
   1a7a2:	4628      	mov	r0, r5
   1a7a4:	f7ff ffae 	bl	1a704 <d_count_templates_scopes>
   1a7a8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   1a7ac:	3b01      	subs	r3, #1
   1a7ae:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1a7b2:	bd38      	pop	{r3, r4, r5, pc}
   1a7b4:	68e1      	ldr	r1, [r4, #12]
   1a7b6:	780b      	ldrb	r3, [r1, #0]
   1a7b8:	2b05      	cmp	r3, #5
   1a7ba:	d1eb      	bne.n	1a794 <d_count_templates_scopes+0x90>
   1a7bc:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   1a7c0:	3301      	adds	r3, #1
   1a7c2:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
   1a7c6:	e7e5      	b.n	1a794 <d_count_templates_scopes+0x90>
   1a7c8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1a7cc:	68e1      	ldr	r1, [r4, #12]
   1a7ce:	3301      	adds	r3, #1
   1a7d0:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   1a7d4:	e7de      	b.n	1a794 <d_count_templates_scopes+0x90>
   1a7d6:	4770      	bx	lr

0001a7d8 <d_pack_length>:
   1a7d8:	4603      	mov	r3, r0
   1a7da:	b148      	cbz	r0, 1a7f0 <d_pack_length+0x18>
   1a7dc:	2300      	movs	r3, #0
   1a7de:	e004      	b.n	1a7ea <d_pack_length+0x12>
   1a7e0:	68c2      	ldr	r2, [r0, #12]
   1a7e2:	b12a      	cbz	r2, 1a7f0 <d_pack_length+0x18>
   1a7e4:	6900      	ldr	r0, [r0, #16]
   1a7e6:	3301      	adds	r3, #1
   1a7e8:	b110      	cbz	r0, 1a7f0 <d_pack_length+0x18>
   1a7ea:	7802      	ldrb	r2, [r0, #0]
   1a7ec:	2a2f      	cmp	r2, #47	; 0x2f
   1a7ee:	d0f7      	beq.n	1a7e0 <d_pack_length+0x8>
   1a7f0:	4618      	mov	r0, r3
   1a7f2:	4770      	bx	lr

0001a7f4 <d_discriminator>:
   1a7f4:	68c3      	ldr	r3, [r0, #12]
   1a7f6:	781a      	ldrb	r2, [r3, #0]
   1a7f8:	2a5f      	cmp	r2, #95	; 0x5f
   1a7fa:	d001      	beq.n	1a800 <d_discriminator+0xc>
   1a7fc:	2001      	movs	r0, #1
   1a7fe:	4770      	bx	lr
   1a800:	b510      	push	{r4, lr}
   1a802:	1c5a      	adds	r2, r3, #1
   1a804:	60c2      	str	r2, [r0, #12]
   1a806:	785a      	ldrb	r2, [r3, #1]
   1a808:	2a5f      	cmp	r2, #95	; 0x5f
   1a80a:	4604      	mov	r4, r0
   1a80c:	d004      	beq.n	1a818 <d_discriminator+0x24>
   1a80e:	f7ff feff 	bl	1a610 <d_number>
   1a812:	43c0      	mvns	r0, r0
   1a814:	0fc0      	lsrs	r0, r0, #31
   1a816:	bd10      	pop	{r4, pc}
   1a818:	3302      	adds	r3, #2
   1a81a:	60c3      	str	r3, [r0, #12]
   1a81c:	f7ff fef8 	bl	1a610 <d_number>
   1a820:	2800      	cmp	r0, #0
   1a822:	db09      	blt.n	1a838 <d_discriminator+0x44>
   1a824:	2809      	cmp	r0, #9
   1a826:	dd05      	ble.n	1a834 <d_discriminator+0x40>
   1a828:	68e3      	ldr	r3, [r4, #12]
   1a82a:	781a      	ldrb	r2, [r3, #0]
   1a82c:	2a5f      	cmp	r2, #95	; 0x5f
   1a82e:	d103      	bne.n	1a838 <d_discriminator+0x44>
   1a830:	3301      	adds	r3, #1
   1a832:	60e3      	str	r3, [r4, #12]
   1a834:	2001      	movs	r0, #1
   1a836:	bd10      	pop	{r4, pc}
   1a838:	2000      	movs	r0, #0
   1a83a:	bd10      	pop	{r4, pc}

0001a83c <d_index_template_argument.part.0>:
   1a83c:	b920      	cbnz	r0, 1a848 <d_index_template_argument.part.0+0xc>
   1a83e:	e009      	b.n	1a854 <d_index_template_argument.part.0+0x18>
   1a840:	b139      	cbz	r1, 1a852 <d_index_template_argument.part.0+0x16>
   1a842:	6900      	ldr	r0, [r0, #16]
   1a844:	3901      	subs	r1, #1
   1a846:	b130      	cbz	r0, 1a856 <d_index_template_argument.part.0+0x1a>
   1a848:	7803      	ldrb	r3, [r0, #0]
   1a84a:	2b2f      	cmp	r3, #47	; 0x2f
   1a84c:	d0f8      	beq.n	1a840 <d_index_template_argument.part.0+0x4>
   1a84e:	2000      	movs	r0, #0
   1a850:	4770      	bx	lr
   1a852:	68c0      	ldr	r0, [r0, #12]
   1a854:	4770      	bx	lr
   1a856:	4770      	bx	lr

0001a858 <d_growable_string_callback_adapter>:
   1a858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a85a:	4614      	mov	r4, r2
   1a85c:	6852      	ldr	r2, [r2, #4]
   1a85e:	68a5      	ldr	r5, [r4, #8]
   1a860:	1c4b      	adds	r3, r1, #1
   1a862:	4413      	add	r3, r2
   1a864:	42ab      	cmp	r3, r5
   1a866:	b083      	sub	sp, #12
   1a868:	460e      	mov	r6, r1
   1a86a:	4607      	mov	r7, r0
   1a86c:	d811      	bhi.n	1a892 <d_growable_string_callback_adapter+0x3a>
   1a86e:	68e5      	ldr	r5, [r4, #12]
   1a870:	b96d      	cbnz	r5, 1a88e <d_growable_string_callback_adapter+0x36>
   1a872:	6863      	ldr	r3, [r4, #4]
   1a874:	6820      	ldr	r0, [r4, #0]
   1a876:	4632      	mov	r2, r6
   1a878:	4418      	add	r0, r3
   1a87a:	4639      	mov	r1, r7
   1a87c:	f7fe f98c 	bl	18b98 <memcpy>
   1a880:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a884:	4433      	add	r3, r6
   1a886:	549d      	strb	r5, [r3, r2]
   1a888:	6863      	ldr	r3, [r4, #4]
   1a88a:	4433      	add	r3, r6
   1a88c:	6063      	str	r3, [r4, #4]
   1a88e:	b003      	add	sp, #12
   1a890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a892:	68e2      	ldr	r2, [r4, #12]
   1a894:	2a00      	cmp	r2, #0
   1a896:	d1fa      	bne.n	1a88e <d_growable_string_callback_adapter+0x36>
   1a898:	b155      	cbz	r5, 1a8b0 <d_growable_string_callback_adapter+0x58>
   1a89a:	006d      	lsls	r5, r5, #1
   1a89c:	42ab      	cmp	r3, r5
   1a89e:	d8fc      	bhi.n	1a89a <d_growable_string_callback_adapter+0x42>
   1a8a0:	6820      	ldr	r0, [r4, #0]
   1a8a2:	4629      	mov	r1, r5
   1a8a4:	f00b f8dc 	bl	25a60 <realloc>
   1a8a8:	b138      	cbz	r0, 1a8ba <d_growable_string_callback_adapter+0x62>
   1a8aa:	6020      	str	r0, [r4, #0]
   1a8ac:	60a5      	str	r5, [r4, #8]
   1a8ae:	e7de      	b.n	1a86e <d_growable_string_callback_adapter+0x16>
   1a8b0:	2b02      	cmp	r3, #2
   1a8b2:	f04f 0502 	mov.w	r5, #2
   1a8b6:	d8f0      	bhi.n	1a89a <d_growable_string_callback_adapter+0x42>
   1a8b8:	e7f2      	b.n	1a8a0 <d_growable_string_callback_adapter+0x48>
   1a8ba:	9001      	str	r0, [sp, #4]
   1a8bc:	6820      	ldr	r0, [r4, #0]
   1a8be:	f009 fe11 	bl	244e4 <free>
   1a8c2:	9b01      	ldr	r3, [sp, #4]
   1a8c4:	2201      	movs	r2, #1
   1a8c6:	e9c4 3300 	strd	r3, r3, [r4]
   1a8ca:	e9c4 3202 	strd	r3, r2, [r4, #8]
   1a8ce:	e7de      	b.n	1a88e <d_growable_string_callback_adapter+0x36>

0001a8d0 <next_is_type_qual.isra.0>:
   1a8d0:	7803      	ldrb	r3, [r0, #0]
   1a8d2:	2b72      	cmp	r3, #114	; 0x72
   1a8d4:	d007      	beq.n	1a8e6 <next_is_type_qual.isra.0+0x16>
   1a8d6:	2b56      	cmp	r3, #86	; 0x56
   1a8d8:	d005      	beq.n	1a8e6 <next_is_type_qual.isra.0+0x16>
   1a8da:	2b4b      	cmp	r3, #75	; 0x4b
   1a8dc:	d003      	beq.n	1a8e6 <next_is_type_qual.isra.0+0x16>
   1a8de:	2b44      	cmp	r3, #68	; 0x44
   1a8e0:	d003      	beq.n	1a8ea <next_is_type_qual.isra.0+0x1a>
   1a8e2:	2000      	movs	r0, #0
   1a8e4:	4770      	bx	lr
   1a8e6:	2001      	movs	r0, #1
   1a8e8:	4770      	bx	lr
   1a8ea:	7840      	ldrb	r0, [r0, #1]
   1a8ec:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   1a8f0:	2b4f      	cmp	r3, #79	; 0x4f
   1a8f2:	d0f8      	beq.n	1a8e6 <next_is_type_qual.isra.0+0x16>
   1a8f4:	3877      	subs	r0, #119	; 0x77
   1a8f6:	2801      	cmp	r0, #1
   1a8f8:	bf8c      	ite	hi
   1a8fa:	2000      	movhi	r0, #0
   1a8fc:	2001      	movls	r0, #1
   1a8fe:	4770      	bx	lr

0001a900 <d_append_char>:
   1a900:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a904:	2bff      	cmp	r3, #255	; 0xff
   1a906:	b570      	push	{r4, r5, r6, lr}
   1a908:	4604      	mov	r4, r0
   1a90a:	460d      	mov	r5, r1
   1a90c:	d006      	beq.n	1a91c <d_append_char+0x1c>
   1a90e:	1c5a      	adds	r2, r3, #1
   1a910:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a914:	54e5      	strb	r5, [r4, r3]
   1a916:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1a91a:	bd70      	pop	{r4, r5, r6, pc}
   1a91c:	2600      	movs	r6, #0
   1a91e:	4619      	mov	r1, r3
   1a920:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a924:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1a928:	4798      	blx	r3
   1a92a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a92e:	2201      	movs	r2, #1
   1a930:	4413      	add	r3, r2
   1a932:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a936:	4633      	mov	r3, r6
   1a938:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a93c:	54e5      	strb	r5, [r4, r3]
   1a93e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1a942:	bd70      	pop	{r4, r5, r6, pc}

0001a944 <d_lookup_template_argument>:
   1a944:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1a948:	b19b      	cbz	r3, 1a972 <d_lookup_template_argument+0x2e>
   1a94a:	68ca      	ldr	r2, [r1, #12]
   1a94c:	685b      	ldr	r3, [r3, #4]
   1a94e:	2a00      	cmp	r2, #0
   1a950:	691b      	ldr	r3, [r3, #16]
   1a952:	db09      	blt.n	1a968 <d_lookup_template_argument+0x24>
   1a954:	b923      	cbnz	r3, 1a960 <d_lookup_template_argument+0x1c>
   1a956:	e007      	b.n	1a968 <d_lookup_template_argument+0x24>
   1a958:	b142      	cbz	r2, 1a96c <d_lookup_template_argument+0x28>
   1a95a:	691b      	ldr	r3, [r3, #16]
   1a95c:	3a01      	subs	r2, #1
   1a95e:	b11b      	cbz	r3, 1a968 <d_lookup_template_argument+0x24>
   1a960:	7819      	ldrb	r1, [r3, #0]
   1a962:	292f      	cmp	r1, #47	; 0x2f
   1a964:	d0f8      	beq.n	1a958 <d_lookup_template_argument+0x14>
   1a966:	2300      	movs	r3, #0
   1a968:	4618      	mov	r0, r3
   1a96a:	4770      	bx	lr
   1a96c:	68db      	ldr	r3, [r3, #12]
   1a96e:	4618      	mov	r0, r3
   1a970:	4770      	bx	lr
   1a972:	2201      	movs	r2, #1
   1a974:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1a978:	e7f6      	b.n	1a968 <d_lookup_template_argument+0x24>
   1a97a:	bf00      	nop

0001a97c <d_find_pack>:
   1a97c:	2900      	cmp	r1, #0
   1a97e:	d040      	beq.n	1aa02 <d_find_pack+0x86>
   1a980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a984:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1aa0c <d_find_pack+0x90>
   1a988:	4f1f      	ldr	r7, [pc, #124]	; (1aa08 <d_find_pack+0x8c>)
   1a98a:	4605      	mov	r5, r0
   1a98c:	460c      	mov	r4, r1
   1a98e:	2601      	movs	r6, #1
   1a990:	7823      	ldrb	r3, [r4, #0]
   1a992:	2b08      	cmp	r3, #8
   1a994:	d813      	bhi.n	1a9be <d_find_pack+0x42>
   1a996:	2b08      	cmp	r3, #8
   1a998:	d81e      	bhi.n	1a9d8 <d_find_pack+0x5c>
   1a99a:	e8df f003 	tbb	[pc, r3]
   1a99e:	1d0d      	.short	0x1d0d
   1a9a0:	271d1d1d 	.word	0x271d1d1d
   1a9a4:	230d      	.short	0x230d
   1a9a6:	23          	.byte	0x23
   1a9a7:	00          	.byte	0x00
   1a9a8:	2b17      	cmp	r3, #23
   1a9aa:	d915      	bls.n	1a9d8 <d_find_pack+0x5c>
   1a9ac:	3b18      	subs	r3, #24
   1a9ae:	b2db      	uxtb	r3, r3
   1a9b0:	fa27 f303 	lsr.w	r3, r7, r3
   1a9b4:	07db      	lsls	r3, r3, #31
   1a9b6:	d50f      	bpl.n	1a9d8 <d_find_pack+0x5c>
   1a9b8:	2000      	movs	r0, #0
   1a9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9be:	2b2c      	cmp	r3, #44	; 0x2c
   1a9c0:	d9f2      	bls.n	1a9a8 <d_find_pack+0x2c>
   1a9c2:	3b32      	subs	r3, #50	; 0x32
   1a9c4:	b2db      	uxtb	r3, r3
   1a9c6:	2b1b      	cmp	r3, #27
   1a9c8:	d806      	bhi.n	1a9d8 <d_find_pack+0x5c>
   1a9ca:	fa06 f203 	lsl.w	r2, r6, r3
   1a9ce:	ea12 0f08 	tst.w	r2, r8
   1a9d2:	d1f1      	bne.n	1a9b8 <d_find_pack+0x3c>
   1a9d4:	2b01      	cmp	r3, #1
   1a9d6:	d005      	beq.n	1a9e4 <d_find_pack+0x68>
   1a9d8:	68e1      	ldr	r1, [r4, #12]
   1a9da:	4628      	mov	r0, r5
   1a9dc:	f7ff ffce 	bl	1a97c <d_find_pack>
   1a9e0:	2800      	cmp	r0, #0
   1a9e2:	d1ea      	bne.n	1a9ba <d_find_pack+0x3e>
   1a9e4:	6924      	ldr	r4, [r4, #16]
   1a9e6:	2c00      	cmp	r4, #0
   1a9e8:	d1d2      	bne.n	1a990 <d_find_pack+0x14>
   1a9ea:	e7e5      	b.n	1a9b8 <d_find_pack+0x3c>
   1a9ec:	4621      	mov	r1, r4
   1a9ee:	4628      	mov	r0, r5
   1a9f0:	f7ff ffa8 	bl	1a944 <d_lookup_template_argument>
   1a9f4:	2800      	cmp	r0, #0
   1a9f6:	d0df      	beq.n	1a9b8 <d_find_pack+0x3c>
   1a9f8:	7803      	ldrb	r3, [r0, #0]
   1a9fa:	2b2f      	cmp	r3, #47	; 0x2f
   1a9fc:	d1dc      	bne.n	1a9b8 <d_find_pack+0x3c>
   1a9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa02:	2000      	movs	r0, #0
   1aa04:	4770      	bx	lr
   1aa06:	bf00      	nop
   1aa08:	00108001 	.word	0x00108001
   1aa0c:	0ce30001 	.word	0x0ce30001

0001aa10 <d_append_string>:
   1aa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa14:	4604      	mov	r4, r0
   1aa16:	4608      	mov	r0, r1
   1aa18:	460d      	mov	r5, r1
   1aa1a:	f00c f931 	bl	26c80 <strlen>
   1aa1e:	b340      	cbz	r0, 1aa72 <d_append_string+0x62>
   1aa20:	3d01      	subs	r5, #1
   1aa22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1aa26:	182f      	adds	r7, r5, r0
   1aa28:	f04f 0800 	mov.w	r8, #0
   1aa2c:	e009      	b.n	1aa42 <d_append_string+0x32>
   1aa2e:	460b      	mov	r3, r1
   1aa30:	42bd      	cmp	r5, r7
   1aa32:	f101 0101 	add.w	r1, r1, #1
   1aa36:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aa3a:	54e6      	strb	r6, [r4, r3]
   1aa3c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1aa40:	d017      	beq.n	1aa72 <d_append_string+0x62>
   1aa42:	29ff      	cmp	r1, #255	; 0xff
   1aa44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1aa48:	d1f1      	bne.n	1aa2e <d_append_string+0x1e>
   1aa4a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1aa4e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1aa52:	4620      	mov	r0, r4
   1aa54:	4798      	blx	r3
   1aa56:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1aa5a:	2101      	movs	r1, #1
   1aa5c:	440b      	add	r3, r1
   1aa5e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1aa62:	2300      	movs	r3, #0
   1aa64:	42bd      	cmp	r5, r7
   1aa66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aa6a:	54e6      	strb	r6, [r4, r3]
   1aa6c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1aa70:	d1e7      	bne.n	1aa42 <d_append_string+0x32>
   1aa72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa76:	bf00      	nop

0001aa78 <d_template_param>:
   1aa78:	b538      	push	{r3, r4, r5, lr}
   1aa7a:	68c3      	ldr	r3, [r0, #12]
   1aa7c:	781a      	ldrb	r2, [r3, #0]
   1aa7e:	2a54      	cmp	r2, #84	; 0x54
   1aa80:	d124      	bne.n	1aacc <d_template_param+0x54>
   1aa82:	1c5a      	adds	r2, r3, #1
   1aa84:	60c2      	str	r2, [r0, #12]
   1aa86:	785a      	ldrb	r2, [r3, #1]
   1aa88:	2a5f      	cmp	r2, #95	; 0x5f
   1aa8a:	4604      	mov	r4, r0
   1aa8c:	d020      	beq.n	1aad0 <d_template_param+0x58>
   1aa8e:	2a6e      	cmp	r2, #110	; 0x6e
   1aa90:	d01c      	beq.n	1aacc <d_template_param+0x54>
   1aa92:	f7ff fdbd 	bl	1a610 <d_number>
   1aa96:	1c41      	adds	r1, r0, #1
   1aa98:	d418      	bmi.n	1aacc <d_template_param+0x54>
   1aa9a:	68e3      	ldr	r3, [r4, #12]
   1aa9c:	781a      	ldrb	r2, [r3, #0]
   1aa9e:	2a5f      	cmp	r2, #95	; 0x5f
   1aaa0:	d114      	bne.n	1aacc <d_template_param+0x54>
   1aaa2:	3301      	adds	r3, #1
   1aaa4:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1aaa8:	4282      	cmp	r2, r0
   1aaaa:	60e3      	str	r3, [r4, #12]
   1aaac:	da0e      	bge.n	1aacc <d_template_param+0x54>
   1aaae:	6923      	ldr	r3, [r4, #16]
   1aab0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1aab4:	eb03 008c 	add.w	r0, r3, ip, lsl #2
   1aab8:	3201      	adds	r2, #1
   1aaba:	2500      	movs	r5, #0
   1aabc:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1aac0:	6162      	str	r2, [r4, #20]
   1aac2:	2205      	movs	r2, #5
   1aac4:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
   1aac8:	60c1      	str	r1, [r0, #12]
   1aaca:	bd38      	pop	{r3, r4, r5, pc}
   1aacc:	2000      	movs	r0, #0
   1aace:	bd38      	pop	{r3, r4, r5, pc}
   1aad0:	3302      	adds	r3, #2
   1aad2:	2100      	movs	r1, #0
   1aad4:	e7e6      	b.n	1aaa4 <d_template_param+0x2c>
   1aad6:	bf00      	nop

0001aad8 <d_append_num>:
   1aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aadc:	b088      	sub	sp, #32
   1aade:	460a      	mov	r2, r1
   1aae0:	4604      	mov	r4, r0
   1aae2:	491a      	ldr	r1, [pc, #104]	; (1ab4c <d_append_num+0x74>)
   1aae4:	a801      	add	r0, sp, #4
   1aae6:	f007 fcff 	bl	224e8 <sprintf>
   1aaea:	a801      	add	r0, sp, #4
   1aaec:	f00c f8c8 	bl	26c80 <strlen>
   1aaf0:	b340      	cbz	r0, 1ab44 <d_append_num+0x6c>
   1aaf2:	ad01      	add	r5, sp, #4
   1aaf4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1aaf8:	182f      	adds	r7, r5, r0
   1aafa:	f04f 0800 	mov.w	r8, #0
   1aafe:	e009      	b.n	1ab14 <d_append_num+0x3c>
   1ab00:	460b      	mov	r3, r1
   1ab02:	42bd      	cmp	r5, r7
   1ab04:	f101 0101 	add.w	r1, r1, #1
   1ab08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ab0c:	54e6      	strb	r6, [r4, r3]
   1ab0e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ab12:	d017      	beq.n	1ab44 <d_append_num+0x6c>
   1ab14:	29ff      	cmp	r1, #255	; 0xff
   1ab16:	f815 6b01 	ldrb.w	r6, [r5], #1
   1ab1a:	d1f1      	bne.n	1ab00 <d_append_num+0x28>
   1ab1c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ab20:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ab24:	4620      	mov	r0, r4
   1ab26:	4798      	blx	r3
   1ab28:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ab2c:	2101      	movs	r1, #1
   1ab2e:	440b      	add	r3, r1
   1ab30:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ab34:	2300      	movs	r3, #0
   1ab36:	42bd      	cmp	r5, r7
   1ab38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ab3c:	54e6      	strb	r6, [r4, r3]
   1ab3e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ab42:	d1e7      	bne.n	1ab14 <d_append_num+0x3c>
   1ab44:	b008      	add	sp, #32
   1ab46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab4a:	bf00      	nop
   1ab4c:	20004b0c 	.word	0x20004b0c

0001ab50 <d_source_name>:
   1ab50:	b570      	push	{r4, r5, r6, lr}
   1ab52:	4604      	mov	r4, r0
   1ab54:	f7ff fd5c 	bl	1a610 <d_number>
   1ab58:	1e05      	subs	r5, r0, #0
   1ab5a:	dd46      	ble.n	1abea <d_source_name+0x9a>
   1ab5c:	68e6      	ldr	r6, [r4, #12]
   1ab5e:	6863      	ldr	r3, [r4, #4]
   1ab60:	1b9b      	subs	r3, r3, r6
   1ab62:	429d      	cmp	r5, r3
   1ab64:	dc3e      	bgt.n	1abe4 <d_source_name+0x94>
   1ab66:	68a2      	ldr	r2, [r4, #8]
   1ab68:	1973      	adds	r3, r6, r5
   1ab6a:	0752      	lsls	r2, r2, #29
   1ab6c:	60e3      	str	r3, [r4, #12]
   1ab6e:	d504      	bpl.n	1ab7a <d_source_name+0x2a>
   1ab70:	5d72      	ldrb	r2, [r6, r5]
   1ab72:	2a24      	cmp	r2, #36	; 0x24
   1ab74:	bf04      	itt	eq
   1ab76:	3301      	addeq	r3, #1
   1ab78:	60e3      	streq	r3, [r4, #12]
   1ab7a:	2d09      	cmp	r5, #9
   1ab7c:	dd22      	ble.n	1abc4 <d_source_name+0x74>
   1ab7e:	492a      	ldr	r1, [pc, #168]	; (1ac28 <d_source_name+0xd8>)
   1ab80:	2208      	movs	r2, #8
   1ab82:	4630      	mov	r0, r6
   1ab84:	f009 ff66 	bl	24a54 <memcmp>
   1ab88:	b930      	cbnz	r0, 1ab98 <d_source_name+0x48>
   1ab8a:	7a33      	ldrb	r3, [r6, #8]
   1ab8c:	2b2e      	cmp	r3, #46	; 0x2e
   1ab8e:	d02e      	beq.n	1abee <d_source_name+0x9e>
   1ab90:	2b5f      	cmp	r3, #95	; 0x5f
   1ab92:	d02c      	beq.n	1abee <d_source_name+0x9e>
   1ab94:	2b24      	cmp	r3, #36	; 0x24
   1ab96:	d02a      	beq.n	1abee <d_source_name+0x9e>
   1ab98:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ab9c:	4293      	cmp	r3, r2
   1ab9e:	da21      	bge.n	1abe4 <d_source_name+0x94>
   1aba0:	6920      	ldr	r0, [r4, #16]
   1aba2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1aba6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1abaa:	3301      	adds	r3, #1
   1abac:	2200      	movs	r2, #0
   1abae:	e9c0 2201 	strd	r2, r2, [r0, #4]
   1abb2:	6163      	str	r3, [r4, #20]
   1abb4:	2300      	movs	r3, #0
   1abb6:	7003      	strb	r3, [r0, #0]
   1abb8:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1abbc:	e9c0 6503 	strd	r6, r5, [r0, #12]
   1abc0:	62a0      	str	r0, [r4, #40]	; 0x28
   1abc2:	bd70      	pop	{r4, r5, r6, pc}
   1abc4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1abc8:	4293      	cmp	r3, r2
   1abca:	da0b      	bge.n	1abe4 <d_source_name+0x94>
   1abcc:	6920      	ldr	r0, [r4, #16]
   1abce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1abd2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1abd6:	3301      	adds	r3, #1
   1abd8:	2200      	movs	r2, #0
   1abda:	e9c0 2201 	strd	r2, r2, [r0, #4]
   1abde:	6163      	str	r3, [r4, #20]
   1abe0:	2e00      	cmp	r6, #0
   1abe2:	d1e7      	bne.n	1abb4 <d_source_name+0x64>
   1abe4:	2000      	movs	r0, #0
   1abe6:	62a0      	str	r0, [r4, #40]	; 0x28
   1abe8:	bd70      	pop	{r4, r5, r6, pc}
   1abea:	2000      	movs	r0, #0
   1abec:	bd70      	pop	{r4, r5, r6, pc}
   1abee:	7a73      	ldrb	r3, [r6, #9]
   1abf0:	2b4e      	cmp	r3, #78	; 0x4e
   1abf2:	d1d1      	bne.n	1ab98 <d_source_name+0x48>
   1abf4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1abf6:	6963      	ldr	r3, [r4, #20]
   1abf8:	69a1      	ldr	r1, [r4, #24]
   1abfa:	3216      	adds	r2, #22
   1abfc:	1b52      	subs	r2, r2, r5
   1abfe:	428b      	cmp	r3, r1
   1ac00:	62e2      	str	r2, [r4, #44]	; 0x2c
   1ac02:	daef      	bge.n	1abe4 <d_source_name+0x94>
   1ac04:	6922      	ldr	r2, [r4, #16]
   1ac06:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1ac0a:	0081      	lsls	r1, r0, #2
   1ac0c:	3301      	adds	r3, #1
   1ac0e:	6163      	str	r3, [r4, #20]
   1ac10:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1ac14:	2300      	movs	r3, #0
   1ac16:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1ac1a:	5453      	strb	r3, [r2, r1]
   1ac1c:	4a03      	ldr	r2, [pc, #12]	; (1ac2c <d_source_name+0xdc>)
   1ac1e:	2315      	movs	r3, #21
   1ac20:	e9c0 2303 	strd	r2, r3, [r0, #12]
   1ac24:	e7df      	b.n	1abe6 <d_source_name+0x96>
   1ac26:	bf00      	nop
   1ac28:	20004e5c 	.word	0x20004e5c
   1ac2c:	20004e68 	.word	0x20004e68

0001ac30 <d_substitution>:
   1ac30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac34:	68c3      	ldr	r3, [r0, #12]
   1ac36:	781a      	ldrb	r2, [r3, #0]
   1ac38:	2a53      	cmp	r2, #83	; 0x53
   1ac3a:	d131      	bne.n	1aca0 <d_substitution+0x70>
   1ac3c:	1c5a      	adds	r2, r3, #1
   1ac3e:	60c2      	str	r2, [r0, #12]
   1ac40:	785a      	ldrb	r2, [r3, #1]
   1ac42:	4604      	mov	r4, r0
   1ac44:	b3a2      	cbz	r2, 1acb0 <d_substitution+0x80>
   1ac46:	1c9a      	adds	r2, r3, #2
   1ac48:	60c2      	str	r2, [r0, #12]
   1ac4a:	785a      	ldrb	r2, [r3, #1]
   1ac4c:	2a5f      	cmp	r2, #95	; 0x5f
   1ac4e:	d044      	beq.n	1acda <d_substitution+0xaa>
   1ac50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1ac54:	b2d8      	uxtb	r0, r3
   1ac56:	2809      	cmp	r0, #9
   1ac58:	d826      	bhi.n	1aca8 <d_substitution+0x78>
   1ac5a:	2100      	movs	r1, #0
   1ac5c:	e00d      	b.n	1ac7a <d_substitution+0x4a>
   1ac5e:	3b30      	subs	r3, #48	; 0x30
   1ac60:	4299      	cmp	r1, r3
   1ac62:	d81d      	bhi.n	1aca0 <d_substitution+0x70>
   1ac64:	68e0      	ldr	r0, [r4, #12]
   1ac66:	7802      	ldrb	r2, [r0, #0]
   1ac68:	4619      	mov	r1, r3
   1ac6a:	1c45      	adds	r5, r0, #1
   1ac6c:	b11a      	cbz	r2, 1ac76 <d_substitution+0x46>
   1ac6e:	60e5      	str	r5, [r4, #12]
   1ac70:	7802      	ldrb	r2, [r0, #0]
   1ac72:	2a5f      	cmp	r2, #95	; 0x5f
   1ac74:	d03b      	beq.n	1acee <d_substitution+0xbe>
   1ac76:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1ac7a:	b2d8      	uxtb	r0, r3
   1ac7c:	2809      	cmp	r0, #9
   1ac7e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1ac82:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
   1ac86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1ac8a:	d9e8      	bls.n	1ac5e <d_substitution+0x2e>
   1ac8c:	f1bc 0f19 	cmp.w	ip, #25
   1ac90:	d806      	bhi.n	1aca0 <d_substitution+0x70>
   1ac92:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1ac96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1ac9a:	3b37      	subs	r3, #55	; 0x37
   1ac9c:	4299      	cmp	r1, r3
   1ac9e:	d9e1      	bls.n	1ac64 <d_substitution+0x34>
   1aca0:	2500      	movs	r5, #0
   1aca2:	4628      	mov	r0, r5
   1aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aca8:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   1acac:	2819      	cmp	r0, #25
   1acae:	d9d4      	bls.n	1ac5a <d_substitution+0x2a>
   1acb0:	68a3      	ldr	r3, [r4, #8]
   1acb2:	f003 0308 	and.w	r3, r3, #8
   1acb6:	2b00      	cmp	r3, #0
   1acb8:	bf14      	ite	ne
   1acba:	2501      	movne	r5, #1
   1acbc:	2500      	moveq	r5, #0
   1acbe:	d100      	bne.n	1acc2 <d_substitution+0x92>
   1acc0:	b9b9      	cbnz	r1, 1acf2 <d_substitution+0xc2>
   1acc2:	4b3f      	ldr	r3, [pc, #252]	; (1adc0 <d_substitution+0x190>)
   1acc4:	2174      	movs	r1, #116	; 0x74
   1acc6:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
   1acca:	e001      	b.n	1acd0 <d_substitution+0xa0>
   1accc:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
   1acd0:	4291      	cmp	r1, r2
   1acd2:	d015      	beq.n	1ad00 <d_substitution+0xd0>
   1acd4:	4283      	cmp	r3, r0
   1acd6:	d1f9      	bne.n	1accc <d_substitution+0x9c>
   1acd8:	e7e2      	b.n	1aca0 <d_substitution+0x70>
   1acda:	2300      	movs	r3, #0
   1acdc:	6a22      	ldr	r2, [r4, #32]
   1acde:	429a      	cmp	r2, r3
   1ace0:	d9de      	bls.n	1aca0 <d_substitution+0x70>
   1ace2:	69e2      	ldr	r2, [r4, #28]
   1ace4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1ace8:	4628      	mov	r0, r5
   1acea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1acee:	3301      	adds	r3, #1
   1acf0:	e7f4      	b.n	1acdc <d_substitution+0xac>
   1acf2:	68e3      	ldr	r3, [r4, #12]
   1acf4:	781b      	ldrb	r3, [r3, #0]
   1acf6:	3b43      	subs	r3, #67	; 0x43
   1acf8:	2b01      	cmp	r3, #1
   1acfa:	bf98      	it	ls
   1acfc:	460d      	movls	r5, r1
   1acfe:	e7e0      	b.n	1acc2 <d_substitution+0x92>
   1ad00:	695e      	ldr	r6, [r3, #20]
   1ad02:	2e00      	cmp	r6, #0
   1ad04:	d054      	beq.n	1adb0 <d_substitution+0x180>
   1ad06:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1ad0a:	4282      	cmp	r2, r0
   1ad0c:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1ad10:	da53      	bge.n	1adba <d_substitution+0x18a>
   1ad12:	6927      	ldr	r7, [r4, #16]
   1ad14:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1ad18:	eb07 018c 	add.w	r1, r7, ip, lsl #2
   1ad1c:	f04f 0e00 	mov.w	lr, #0
   1ad20:	e9c1 ee01 	strd	lr, lr, [r1, #4]
   1ad24:	3201      	adds	r2, #1
   1ad26:	f04f 0e18 	mov.w	lr, #24
   1ad2a:	6162      	str	r2, [r4, #20]
   1ad2c:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
   1ad30:	e9c1 6803 	strd	r6, r8, [r1, #12]
   1ad34:	62a1      	str	r1, [r4, #40]	; 0x28
   1ad36:	2d00      	cmp	r5, #0
   1ad38:	d037      	beq.n	1adaa <d_substitution+0x17a>
   1ad3a:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
   1ad3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ad40:	4282      	cmp	r2, r0
   1ad42:	440b      	add	r3, r1
   1ad44:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ad46:	da36      	bge.n	1adb6 <d_substitution+0x186>
   1ad48:	6923      	ldr	r3, [r4, #16]
   1ad4a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1ad4e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   1ad52:	3201      	adds	r2, #1
   1ad54:	2600      	movs	r6, #0
   1ad56:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1ad5a:	6162      	str	r2, [r4, #20]
   1ad5c:	2218      	movs	r2, #24
   1ad5e:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
   1ad62:	e9c5 7103 	strd	r7, r1, [r5, #12]
   1ad66:	68e3      	ldr	r3, [r4, #12]
   1ad68:	781a      	ldrb	r2, [r3, #0]
   1ad6a:	2a42      	cmp	r2, #66	; 0x42
   1ad6c:	d199      	bne.n	1aca2 <d_substitution+0x72>
   1ad6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1ad70:	3301      	adds	r3, #1
   1ad72:	60e3      	str	r3, [r4, #12]
   1ad74:	4620      	mov	r0, r4
   1ad76:	f7ff feeb 	bl	1ab50 <d_source_name>
   1ad7a:	462a      	mov	r2, r5
   1ad7c:	4603      	mov	r3, r0
   1ad7e:	214d      	movs	r1, #77	; 0x4d
   1ad80:	4620      	mov	r0, r4
   1ad82:	f7ff fbcd 	bl	1a520 <d_make_comp>
   1ad86:	68e3      	ldr	r3, [r4, #12]
   1ad88:	781a      	ldrb	r2, [r3, #0]
   1ad8a:	2a42      	cmp	r2, #66	; 0x42
   1ad8c:	4605      	mov	r5, r0
   1ad8e:	d0ef      	beq.n	1ad70 <d_substitution+0x140>
   1ad90:	62a6      	str	r6, [r4, #40]	; 0x28
   1ad92:	2800      	cmp	r0, #0
   1ad94:	d084      	beq.n	1aca0 <d_substitution+0x70>
   1ad96:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1ad9a:	4293      	cmp	r3, r2
   1ad9c:	da80      	bge.n	1aca0 <d_substitution+0x70>
   1ad9e:	69e1      	ldr	r1, [r4, #28]
   1ada0:	1c5a      	adds	r2, r3, #1
   1ada2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1ada6:	6222      	str	r2, [r4, #32]
   1ada8:	e77b      	b.n	1aca2 <d_substitution+0x72>
   1adaa:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
   1adae:	e7c6      	b.n	1ad3e <d_substitution+0x10e>
   1adb0:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1adb4:	e7bf      	b.n	1ad36 <d_substitution+0x106>
   1adb6:	2500      	movs	r5, #0
   1adb8:	e7d5      	b.n	1ad66 <d_substitution+0x136>
   1adba:	2100      	movs	r1, #0
   1adbc:	e7ba      	b.n	1ad34 <d_substitution+0x104>
   1adbe:	bf00      	nop
   1adc0:	20005228 	.word	0x20005228

0001adc4 <d_type>:
   1adc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1adc8:	68c2      	ldr	r2, [r0, #12]
   1adca:	b083      	sub	sp, #12
   1adcc:	4604      	mov	r4, r0
   1adce:	4610      	mov	r0, r2
   1add0:	f7ff fd7e 	bl	1a8d0 <next_is_type_qual.isra.0>
   1add4:	2800      	cmp	r0, #0
   1add6:	d166      	bne.n	1aea6 <d_type+0xe2>
   1add8:	7813      	ldrb	r3, [r2, #0]
   1adda:	2b5a      	cmp	r3, #90	; 0x5a
   1addc:	d831      	bhi.n	1ae42 <d_type+0x7e>
   1adde:	2b2f      	cmp	r3, #47	; 0x2f
   1ade0:	d95c      	bls.n	1ae9c <d_type+0xd8>
   1ade2:	3b30      	subs	r3, #48	; 0x30
   1ade4:	2b2a      	cmp	r3, #42	; 0x2a
   1ade6:	d859      	bhi.n	1ae9c <d_type+0xd8>
   1ade8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1adec:	008c008c 	.word	0x008c008c
   1adf0:	008c008c 	.word	0x008c008c
   1adf4:	008c008c 	.word	0x008c008c
   1adf8:	008c008c 	.word	0x008c008c
   1adfc:	008c008c 	.word	0x008c008c
   1ae00:	00580058 	.word	0x00580058
   1ae04:	00580058 	.word	0x00580058
   1ae08:	00580058 	.word	0x00580058
   1ae0c:	01d60058 	.word	0x01d60058
   1ae10:	00d90058 	.word	0x00d90058
   1ae14:	005800ed 	.word	0x005800ed
   1ae18:	016000e7 	.word	0x016000e7
   1ae1c:	00580058 	.word	0x00580058
   1ae20:	00580058 	.word	0x00580058
   1ae24:	02180058 	.word	0x02180058
   1ae28:	00cb008c 	.word	0x00cb008c
   1ae2c:	005800bd 	.word	0x005800bd
   1ae30:	019500af 	.word	0x019500af
   1ae34:	01be016e 	.word	0x01be016e
   1ae38:	00580058 	.word	0x00580058
   1ae3c:	00580058 	.word	0x00580058
   1ae40:	008c      	.short	0x008c
   1ae42:	3b61      	subs	r3, #97	; 0x61
   1ae44:	fa5f fc83 	uxtb.w	ip, r3
   1ae48:	f1bc 0f19 	cmp.w	ip, #25
   1ae4c:	d826      	bhi.n	1ae9c <d_type+0xd8>
   1ae4e:	4dc4      	ldr	r5, [pc, #784]	; (1b160 <d_type+0x39c>)
   1ae50:	2101      	movs	r1, #1
   1ae52:	fa01 f10c 	lsl.w	r1, r1, ip
   1ae56:	400d      	ands	r5, r1
   1ae58:	b1ed      	cbz	r5, 1ae96 <d_type+0xd2>
   1ae5a:	49c2      	ldr	r1, [pc, #776]	; (1b164 <d_type+0x3a0>)
   1ae5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1ae60:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1ae64:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
   1ae68:	42ab      	cmp	r3, r5
   1ae6a:	f280 83c5 	bge.w	1b5f8 <d_type+0x834>
   1ae6e:	6926      	ldr	r6, [r4, #16]
   1ae70:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1ae74:	eb06 058c 	add.w	r5, r6, ip, lsl #2
   1ae78:	3301      	adds	r3, #1
   1ae7a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ae7e:	6163      	str	r3, [r4, #20]
   1ae80:	2327      	movs	r3, #39	; 0x27
   1ae82:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
   1ae86:	60e9      	str	r1, [r5, #12]
   1ae88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ae8a:	6849      	ldr	r1, [r1, #4]
   1ae8c:	3201      	adds	r2, #1
   1ae8e:	440b      	add	r3, r1
   1ae90:	60e2      	str	r2, [r4, #12]
   1ae92:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ae94:	e003      	b.n	1ae9e <d_type+0xda>
   1ae96:	f1bc 0f14 	cmp.w	ip, #20
   1ae9a:	d048      	beq.n	1af2e <d_type+0x16a>
   1ae9c:	2500      	movs	r5, #0
   1ae9e:	4628      	mov	r0, r5
   1aea0:	b003      	add	sp, #12
   1aea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aea6:	2200      	movs	r2, #0
   1aea8:	a901      	add	r1, sp, #4
   1aeaa:	4620      	mov	r0, r4
   1aeac:	f001 fab4 	bl	1c418 <d_cv_qualifiers>
   1aeb0:	4605      	mov	r5, r0
   1aeb2:	2800      	cmp	r0, #0
   1aeb4:	d0f2      	beq.n	1ae9c <d_type+0xd8>
   1aeb6:	68e3      	ldr	r3, [r4, #12]
   1aeb8:	781b      	ldrb	r3, [r3, #0]
   1aeba:	2b46      	cmp	r3, #70	; 0x46
   1aebc:	4620      	mov	r0, r4
   1aebe:	d01e      	beq.n	1aefe <d_type+0x13a>
   1aec0:	f7ff ff80 	bl	1adc4 <d_type>
   1aec4:	6028      	str	r0, [r5, #0]
   1aec6:	2800      	cmp	r0, #0
   1aec8:	d0e8      	beq.n	1ae9c <d_type+0xd8>
   1aeca:	7803      	ldrb	r3, [r0, #0]
   1aecc:	3b1f      	subs	r3, #31
   1aece:	2b01      	cmp	r3, #1
   1aed0:	d805      	bhi.n	1aede <d_type+0x11a>
   1aed2:	9a01      	ldr	r2, [sp, #4]
   1aed4:	68c3      	ldr	r3, [r0, #12]
   1aed6:	60c2      	str	r2, [r0, #12]
   1aed8:	682a      	ldr	r2, [r5, #0]
   1aeda:	9201      	str	r2, [sp, #4]
   1aedc:	602b      	str	r3, [r5, #0]
   1aede:	9d01      	ldr	r5, [sp, #4]
   1aee0:	2d00      	cmp	r5, #0
   1aee2:	d0db      	beq.n	1ae9c <d_type+0xd8>
   1aee4:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1aee8:	4293      	cmp	r3, r2
   1aeea:	dad7      	bge.n	1ae9c <d_type+0xd8>
   1aeec:	69e1      	ldr	r1, [r4, #28]
   1aeee:	1c5a      	adds	r2, r3, #1
   1aef0:	4628      	mov	r0, r5
   1aef2:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1aef6:	6222      	str	r2, [r4, #32]
   1aef8:	b003      	add	sp, #12
   1aefa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aefe:	f000 fbfd 	bl	1b6fc <d_function_type>
   1af02:	e7df      	b.n	1aec4 <d_type+0x100>
   1af04:	4620      	mov	r0, r4
   1af06:	f001 fd6b 	bl	1c9e0 <d_name>
   1af0a:	4605      	mov	r5, r0
   1af0c:	9001      	str	r0, [sp, #4]
   1af0e:	2d00      	cmp	r5, #0
   1af10:	d0c4      	beq.n	1ae9c <d_type+0xd8>
   1af12:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1af16:	4293      	cmp	r3, r2
   1af18:	dac0      	bge.n	1ae9c <d_type+0xd8>
   1af1a:	69e1      	ldr	r1, [r4, #28]
   1af1c:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1af20:	9d01      	ldr	r5, [sp, #4]
   1af22:	1c5a      	adds	r2, r3, #1
   1af24:	4628      	mov	r0, r5
   1af26:	6222      	str	r2, [r4, #32]
   1af28:	b003      	add	sp, #12
   1af2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1af2e:	3201      	adds	r2, #1
   1af30:	60e2      	str	r2, [r4, #12]
   1af32:	4620      	mov	r0, r4
   1af34:	f7ff fe0c 	bl	1ab50 <d_source_name>
   1af38:	462b      	mov	r3, r5
   1af3a:	4602      	mov	r2, r0
   1af3c:	2128      	movs	r1, #40	; 0x28
   1af3e:	4620      	mov	r0, r4
   1af40:	f7ff faee 	bl	1a520 <d_make_comp>
   1af44:	4605      	mov	r5, r0
   1af46:	9001      	str	r0, [sp, #4]
   1af48:	e7e1      	b.n	1af0e <d_type+0x14a>
   1af4a:	3201      	adds	r2, #1
   1af4c:	60e2      	str	r2, [r4, #12]
   1af4e:	4620      	mov	r0, r4
   1af50:	f7ff ff38 	bl	1adc4 <d_type>
   1af54:	2300      	movs	r3, #0
   1af56:	4602      	mov	r2, r0
   1af58:	2123      	movs	r1, #35	; 0x23
   1af5a:	4620      	mov	r0, r4
   1af5c:	f7ff fae0 	bl	1a520 <d_make_comp>
   1af60:	4605      	mov	r5, r0
   1af62:	9001      	str	r0, [sp, #4]
   1af64:	e7d3      	b.n	1af0e <d_type+0x14a>
   1af66:	3201      	adds	r2, #1
   1af68:	60e2      	str	r2, [r4, #12]
   1af6a:	4620      	mov	r0, r4
   1af6c:	f7ff ff2a 	bl	1adc4 <d_type>
   1af70:	2300      	movs	r3, #0
   1af72:	4602      	mov	r2, r0
   1af74:	2122      	movs	r1, #34	; 0x22
   1af76:	4620      	mov	r0, r4
   1af78:	f7ff fad2 	bl	1a520 <d_make_comp>
   1af7c:	4605      	mov	r5, r0
   1af7e:	9001      	str	r0, [sp, #4]
   1af80:	e7c5      	b.n	1af0e <d_type+0x14a>
   1af82:	3201      	adds	r2, #1
   1af84:	60e2      	str	r2, [r4, #12]
   1af86:	4620      	mov	r0, r4
   1af88:	f7ff ff1c 	bl	1adc4 <d_type>
   1af8c:	2300      	movs	r3, #0
   1af8e:	4602      	mov	r2, r0
   1af90:	2124      	movs	r1, #36	; 0x24
   1af92:	4620      	mov	r0, r4
   1af94:	f7ff fac4 	bl	1a520 <d_make_comp>
   1af98:	4605      	mov	r5, r0
   1af9a:	9001      	str	r0, [sp, #4]
   1af9c:	e7b7      	b.n	1af0e <d_type+0x14a>
   1af9e:	3201      	adds	r2, #1
   1afa0:	60e2      	str	r2, [r4, #12]
   1afa2:	4620      	mov	r0, r4
   1afa4:	f7ff ff0e 	bl	1adc4 <d_type>
   1afa8:	2300      	movs	r3, #0
   1afaa:	4602      	mov	r2, r0
   1afac:	2125      	movs	r1, #37	; 0x25
   1afae:	4620      	mov	r0, r4
   1afb0:	f7ff fab6 	bl	1a520 <d_make_comp>
   1afb4:	4605      	mov	r5, r0
   1afb6:	9001      	str	r0, [sp, #4]
   1afb8:	e7a9      	b.n	1af0e <d_type+0x14a>
   1afba:	4620      	mov	r0, r4
   1afbc:	f000 fb9e 	bl	1b6fc <d_function_type>
   1afc0:	4605      	mov	r5, r0
   1afc2:	9001      	str	r0, [sp, #4]
   1afc4:	e7a3      	b.n	1af0e <d_type+0x14a>
   1afc6:	1c53      	adds	r3, r2, #1
   1afc8:	60e3      	str	r3, [r4, #12]
   1afca:	7853      	ldrb	r3, [r2, #1]
   1afcc:	2b00      	cmp	r3, #0
   1afce:	f43f af65 	beq.w	1ae9c <d_type+0xd8>
   1afd2:	1c93      	adds	r3, r2, #2
   1afd4:	60e3      	str	r3, [r4, #12]
   1afd6:	7853      	ldrb	r3, [r2, #1]
   1afd8:	3b46      	subs	r3, #70	; 0x46
   1afda:	2b30      	cmp	r3, #48	; 0x30
   1afdc:	f63f af5e 	bhi.w	1ae9c <d_type+0xd8>
   1afe0:	a101      	add	r1, pc, #4	; (adr r1, 1afe8 <d_type+0x224>)
   1afe2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1afe6:	bf00      	nop
   1afe8:	0001b289 	.word	0x0001b289
   1afec:	0001ae9d 	.word	0x0001ae9d
   1aff0:	0001ae9d 	.word	0x0001ae9d
   1aff4:	0001ae9d 	.word	0x0001ae9d
   1aff8:	0001ae9d 	.word	0x0001ae9d
   1affc:	0001ae9d 	.word	0x0001ae9d
   1b000:	0001ae9d 	.word	0x0001ae9d
   1b004:	0001ae9d 	.word	0x0001ae9d
   1b008:	0001ae9d 	.word	0x0001ae9d
   1b00c:	0001ae9d 	.word	0x0001ae9d
   1b010:	0001ae9d 	.word	0x0001ae9d
   1b014:	0001ae9d 	.word	0x0001ae9d
   1b018:	0001ae9d 	.word	0x0001ae9d
   1b01c:	0001ae9d 	.word	0x0001ae9d
   1b020:	0001b24d 	.word	0x0001b24d
   1b024:	0001ae9d 	.word	0x0001ae9d
   1b028:	0001ae9d 	.word	0x0001ae9d
   1b02c:	0001ae9d 	.word	0x0001ae9d
   1b030:	0001ae9d 	.word	0x0001ae9d
   1b034:	0001ae9d 	.word	0x0001ae9d
   1b038:	0001ae9d 	.word	0x0001ae9d
   1b03c:	0001ae9d 	.word	0x0001ae9d
   1b040:	0001ae9d 	.word	0x0001ae9d
   1b044:	0001ae9d 	.word	0x0001ae9d
   1b048:	0001ae9d 	.word	0x0001ae9d
   1b04c:	0001ae9d 	.word	0x0001ae9d
   1b050:	0001ae9d 	.word	0x0001ae9d
   1b054:	0001b321 	.word	0x0001b321
   1b058:	0001ae9d 	.word	0x0001ae9d
   1b05c:	0001b2f5 	.word	0x0001b2f5
   1b060:	0001b50f 	.word	0x0001b50f
   1b064:	0001b4df 	.word	0x0001b4df
   1b068:	0001b37d 	.word	0x0001b37d
   1b06c:	0001ae9d 	.word	0x0001ae9d
   1b070:	0001b34d 	.word	0x0001b34d
   1b074:	0001b4af 	.word	0x0001b4af
   1b078:	0001ae9d 	.word	0x0001ae9d
   1b07c:	0001ae9d 	.word	0x0001ae9d
   1b080:	0001ae9d 	.word	0x0001ae9d
   1b084:	0001ae9d 	.word	0x0001ae9d
   1b088:	0001b47f 	.word	0x0001b47f
   1b08c:	0001ae9d 	.word	0x0001ae9d
   1b090:	0001b467 	.word	0x0001b467
   1b094:	0001ae9d 	.word	0x0001ae9d
   1b098:	0001ae9d 	.word	0x0001ae9d
   1b09c:	0001b437 	.word	0x0001b437
   1b0a0:	0001b24d 	.word	0x0001b24d
   1b0a4:	0001b407 	.word	0x0001b407
   1b0a8:	0001b3ad 	.word	0x0001b3ad
   1b0ac:	3201      	adds	r2, #1
   1b0ae:	60e2      	str	r2, [r4, #12]
   1b0b0:	4620      	mov	r0, r4
   1b0b2:	f7ff fe87 	bl	1adc4 <d_type>
   1b0b6:	2300      	movs	r3, #0
   1b0b8:	4602      	mov	r2, r0
   1b0ba:	2126      	movs	r1, #38	; 0x26
   1b0bc:	4620      	mov	r0, r4
   1b0be:	f7ff fa2f 	bl	1a520 <d_make_comp>
   1b0c2:	4605      	mov	r5, r0
   1b0c4:	9001      	str	r0, [sp, #4]
   1b0c6:	e722      	b.n	1af0e <d_type+0x14a>
   1b0c8:	4620      	mov	r0, r4
   1b0ca:	f7ff fcd5 	bl	1aa78 <d_template_param>
   1b0ce:	68e6      	ldr	r6, [r4, #12]
   1b0d0:	9001      	str	r0, [sp, #4]
   1b0d2:	7833      	ldrb	r3, [r6, #0]
   1b0d4:	2b49      	cmp	r3, #73	; 0x49
   1b0d6:	4605      	mov	r5, r0
   1b0d8:	f47f af19 	bne.w	1af0e <d_type+0x14a>
   1b0dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	f040 8257 	bne.w	1b592 <d_type+0x7ce>
   1b0e4:	2800      	cmp	r0, #0
   1b0e6:	f43f aed9 	beq.w	1ae9c <d_type+0xd8>
   1b0ea:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1b0ee:	428a      	cmp	r2, r1
   1b0f0:	f6bf aed4 	bge.w	1ae9c <d_type+0xd8>
   1b0f4:	69e1      	ldr	r1, [r4, #28]
   1b0f6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1b0fa:	3201      	adds	r2, #1
   1b0fc:	6222      	str	r2, [r4, #32]
   1b0fe:	7832      	ldrb	r2, [r6, #0]
   1b100:	3a49      	subs	r2, #73	; 0x49
   1b102:	2a01      	cmp	r2, #1
   1b104:	d805      	bhi.n	1b112 <d_type+0x34e>
   1b106:	3601      	adds	r6, #1
   1b108:	60e6      	str	r6, [r4, #12]
   1b10a:	4620      	mov	r0, r4
   1b10c:	f000 fe0c 	bl	1bd28 <d_template_args_1>
   1b110:	4603      	mov	r3, r0
   1b112:	462a      	mov	r2, r5
   1b114:	e01c      	b.n	1b150 <d_type+0x38c>
   1b116:	7853      	ldrb	r3, [r2, #1]
   1b118:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1b11c:	2a09      	cmp	r2, #9
   1b11e:	d905      	bls.n	1b12c <d_type+0x368>
   1b120:	2b5f      	cmp	r3, #95	; 0x5f
   1b122:	d003      	beq.n	1b12c <d_type+0x368>
   1b124:	3b41      	subs	r3, #65	; 0x41
   1b126:	2b19      	cmp	r3, #25
   1b128:	f200 8226 	bhi.w	1b578 <d_type+0x7b4>
   1b12c:	2100      	movs	r1, #0
   1b12e:	4620      	mov	r0, r4
   1b130:	f7ff fd7e 	bl	1ac30 <d_substitution>
   1b134:	68e3      	ldr	r3, [r4, #12]
   1b136:	9001      	str	r0, [sp, #4]
   1b138:	781a      	ldrb	r2, [r3, #0]
   1b13a:	2a49      	cmp	r2, #73	; 0x49
   1b13c:	4605      	mov	r5, r0
   1b13e:	f47f aeae 	bne.w	1ae9e <d_type+0xda>
   1b142:	3301      	adds	r3, #1
   1b144:	60e3      	str	r3, [r4, #12]
   1b146:	4620      	mov	r0, r4
   1b148:	f000 fdee 	bl	1bd28 <d_template_args_1>
   1b14c:	462a      	mov	r2, r5
   1b14e:	4603      	mov	r3, r0
   1b150:	2104      	movs	r1, #4
   1b152:	4620      	mov	r0, r4
   1b154:	f7ff f9e4 	bl	1a520 <d_make_comp>
   1b158:	4605      	mov	r5, r0
   1b15a:	9001      	str	r0, [sp, #4]
   1b15c:	e6d7      	b.n	1af0e <d_type+0x14a>
   1b15e:	bf00      	nop
   1b160:	03ec7bff 	.word	0x03ec7bff
   1b164:	200043d4 	.word	0x200043d4
   1b168:	3201      	adds	r2, #1
   1b16a:	60e2      	str	r2, [r4, #12]
   1b16c:	4620      	mov	r0, r4
   1b16e:	f7ff fcef 	bl	1ab50 <d_source_name>
   1b172:	68e3      	ldr	r3, [r4, #12]
   1b174:	9001      	str	r0, [sp, #4]
   1b176:	781a      	ldrb	r2, [r3, #0]
   1b178:	2a49      	cmp	r2, #73	; 0x49
   1b17a:	4605      	mov	r5, r0
   1b17c:	f000 81e1 	beq.w	1b542 <d_type+0x77e>
   1b180:	4620      	mov	r0, r4
   1b182:	f7ff fe1f 	bl	1adc4 <d_type>
   1b186:	462b      	mov	r3, r5
   1b188:	4602      	mov	r2, r0
   1b18a:	2121      	movs	r1, #33	; 0x21
   1b18c:	4620      	mov	r0, r4
   1b18e:	f7ff f9c7 	bl	1a520 <d_make_comp>
   1b192:	4605      	mov	r5, r0
   1b194:	9001      	str	r0, [sp, #4]
   1b196:	e6ba      	b.n	1af0e <d_type+0x14a>
   1b198:	1c55      	adds	r5, r2, #1
   1b19a:	60e5      	str	r5, [r4, #12]
   1b19c:	7853      	ldrb	r3, [r2, #1]
   1b19e:	2b5f      	cmp	r3, #95	; 0x5f
   1b1a0:	f000 81cd 	beq.w	1b53e <d_type+0x77a>
   1b1a4:	3b30      	subs	r3, #48	; 0x30
   1b1a6:	2b09      	cmp	r3, #9
   1b1a8:	f200 81d8 	bhi.w	1b55c <d_type+0x798>
   1b1ac:	462b      	mov	r3, r5
   1b1ae:	469c      	mov	ip, r3
   1b1b0:	3301      	adds	r3, #1
   1b1b2:	60e3      	str	r3, [r4, #12]
   1b1b4:	7819      	ldrb	r1, [r3, #0]
   1b1b6:	3930      	subs	r1, #48	; 0x30
   1b1b8:	2909      	cmp	r1, #9
   1b1ba:	d9f8      	bls.n	1b1ae <d_type+0x3ea>
   1b1bc:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
   1b1c0:	4281      	cmp	r1, r0
   1b1c2:	ebac 0202 	sub.w	r2, ip, r2
   1b1c6:	f6bf ae69 	bge.w	1ae9c <d_type+0xd8>
   1b1ca:	6927      	ldr	r7, [r4, #16]
   1b1cc:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   1b1d0:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   1b1d4:	ea4f 0e80 	mov.w	lr, r0, lsl #2
   1b1d8:	2000      	movs	r0, #0
   1b1da:	3101      	adds	r1, #1
   1b1dc:	4282      	cmp	r2, r0
   1b1de:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1b1e2:	6161      	str	r1, [r4, #20]
   1b1e4:	f77f ae5a 	ble.w	1ae9c <d_type+0xd8>
   1b1e8:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1b1ec:	f807 000e 	strb.w	r0, [r7, lr]
   1b1f0:	e9c6 5203 	strd	r5, r2, [r6, #12]
   1b1f4:	f89c 2001 	ldrb.w	r2, [ip, #1]
   1b1f8:	461d      	mov	r5, r3
   1b1fa:	2a5f      	cmp	r2, #95	; 0x5f
   1b1fc:	f47f ae4e 	bne.w	1ae9c <d_type+0xd8>
   1b200:	3501      	adds	r5, #1
   1b202:	60e5      	str	r5, [r4, #12]
   1b204:	4620      	mov	r0, r4
   1b206:	f7ff fddd 	bl	1adc4 <d_type>
   1b20a:	4632      	mov	r2, r6
   1b20c:	4603      	mov	r3, r0
   1b20e:	212a      	movs	r1, #42	; 0x2a
   1b210:	4620      	mov	r0, r4
   1b212:	f7ff f985 	bl	1a520 <d_make_comp>
   1b216:	4605      	mov	r5, r0
   1b218:	9001      	str	r0, [sp, #4]
   1b21a:	e678      	b.n	1af0e <d_type+0x14a>
   1b21c:	3201      	adds	r2, #1
   1b21e:	60e2      	str	r2, [r4, #12]
   1b220:	4620      	mov	r0, r4
   1b222:	f7ff fdcf 	bl	1adc4 <d_type>
   1b226:	4605      	mov	r5, r0
   1b228:	2800      	cmp	r0, #0
   1b22a:	f43f ae37 	beq.w	1ae9c <d_type+0xd8>
   1b22e:	4620      	mov	r0, r4
   1b230:	f7ff fdc8 	bl	1adc4 <d_type>
   1b234:	4603      	mov	r3, r0
   1b236:	2800      	cmp	r0, #0
   1b238:	f43f ae30 	beq.w	1ae9c <d_type+0xd8>
   1b23c:	462a      	mov	r2, r5
   1b23e:	212b      	movs	r1, #43	; 0x2b
   1b240:	4620      	mov	r0, r4
   1b242:	f7ff f96d 	bl	1a520 <d_make_comp>
   1b246:	4605      	mov	r5, r0
   1b248:	9001      	str	r0, [sp, #4]
   1b24a:	e660      	b.n	1af0e <d_type+0x14a>
   1b24c:	2301      	movs	r3, #1
   1b24e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b250:	6323      	str	r3, [r4, #48]	; 0x30
   1b252:	4620      	mov	r0, r4
   1b254:	f000 fe30 	bl	1beb8 <d_expression_1>
   1b258:	6325      	str	r5, [r4, #48]	; 0x30
   1b25a:	4602      	mov	r2, r0
   1b25c:	2300      	movs	r3, #0
   1b25e:	2144      	movs	r1, #68	; 0x44
   1b260:	4620      	mov	r0, r4
   1b262:	f7ff f95d 	bl	1a520 <d_make_comp>
   1b266:	4605      	mov	r5, r0
   1b268:	9001      	str	r0, [sp, #4]
   1b26a:	2800      	cmp	r0, #0
   1b26c:	f43f ae16 	beq.w	1ae9c <d_type+0xd8>
   1b270:	68e3      	ldr	r3, [r4, #12]
   1b272:	781a      	ldrb	r2, [r3, #0]
   1b274:	2a00      	cmp	r2, #0
   1b276:	f43f ae11 	beq.w	1ae9c <d_type+0xd8>
   1b27a:	1c5a      	adds	r2, r3, #1
   1b27c:	60e2      	str	r2, [r4, #12]
   1b27e:	781b      	ldrb	r3, [r3, #0]
   1b280:	2b45      	cmp	r3, #69	; 0x45
   1b282:	f47f ae0b 	bne.w	1ae9c <d_type+0xd8>
   1b286:	e644      	b.n	1af12 <d_type+0x14e>
   1b288:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   1b28c:	428b      	cmp	r3, r1
   1b28e:	f280 81b5 	bge.w	1b5fc <d_type+0x838>
   1b292:	6921      	ldr	r1, [r4, #16]
   1b294:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1b298:	eb01 0580 	add.w	r5, r1, r0, lsl #2
   1b29c:	3301      	adds	r3, #1
   1b29e:	2600      	movs	r6, #0
   1b2a0:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b2a4:	6163      	str	r3, [r4, #20]
   1b2a6:	232c      	movs	r3, #44	; 0x2c
   1b2a8:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
   1b2ac:	7893      	ldrb	r3, [r2, #2]
   1b2ae:	9501      	str	r5, [sp, #4]
   1b2b0:	3b30      	subs	r3, #48	; 0x30
   1b2b2:	b2db      	uxtb	r3, r3
   1b2b4:	2b09      	cmp	r3, #9
   1b2b6:	bf94      	ite	ls
   1b2b8:	2301      	movls	r3, #1
   1b2ba:	4633      	movhi	r3, r6
   1b2bc:	822b      	strh	r3, [r5, #16]
   1b2be:	d802      	bhi.n	1b2c6 <d_type+0x502>
   1b2c0:	4620      	mov	r0, r4
   1b2c2:	f7ff f9a5 	bl	1a610 <d_number>
   1b2c6:	4620      	mov	r0, r4
   1b2c8:	f7ff fd7c 	bl	1adc4 <d_type>
   1b2cc:	60e8      	str	r0, [r5, #12]
   1b2ce:	2800      	cmp	r0, #0
   1b2d0:	f43f ade4 	beq.w	1ae9c <d_type+0xd8>
   1b2d4:	4620      	mov	r0, r4
   1b2d6:	f7ff f99b 	bl	1a610 <d_number>
   1b2da:	68e2      	ldr	r2, [r4, #12]
   1b2dc:	7813      	ldrb	r3, [r2, #0]
   1b2de:	b113      	cbz	r3, 1b2e6 <d_type+0x522>
   1b2e0:	1c53      	adds	r3, r2, #1
   1b2e2:	60e3      	str	r3, [r4, #12]
   1b2e4:	7813      	ldrb	r3, [r2, #0]
   1b2e6:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   1b2ea:	fab3 f383 	clz	r3, r3
   1b2ee:	095b      	lsrs	r3, r3, #5
   1b2f0:	826b      	strh	r3, [r5, #18]
   1b2f2:	e5d4      	b.n	1ae9e <d_type+0xda>
   1b2f4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b2f8:	4293      	cmp	r3, r2
   1b2fa:	f6bf adcf 	bge.w	1ae9c <d_type+0xd8>
   1b2fe:	6922      	ldr	r2, [r4, #16]
   1b300:	49c0      	ldr	r1, [pc, #768]	; (1b604 <d_type+0x840>)
   1b302:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b306:	00a8      	lsls	r0, r5, #2
   1b308:	3301      	adds	r3, #1
   1b30a:	6163      	str	r3, [r4, #20]
   1b30c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1b310:	2300      	movs	r3, #0
   1b312:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1b316:	5413      	strb	r3, [r2, r0]
   1b318:	230e      	movs	r3, #14
   1b31a:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1b31e:	e5be      	b.n	1ae9e <d_type+0xda>
   1b320:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b324:	4293      	cmp	r3, r2
   1b326:	f6bf adb9 	bge.w	1ae9c <d_type+0xd8>
   1b32a:	6922      	ldr	r2, [r4, #16]
   1b32c:	49b6      	ldr	r1, [pc, #728]	; (1b608 <d_type+0x844>)
   1b32e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b332:	00a8      	lsls	r0, r5, #2
   1b334:	3301      	adds	r3, #1
   1b336:	6163      	str	r3, [r4, #20]
   1b338:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1b33c:	2300      	movs	r3, #0
   1b33e:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1b342:	5413      	strb	r3, [r2, r0]
   1b344:	2304      	movs	r3, #4
   1b346:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1b34a:	e5a8      	b.n	1ae9e <d_type+0xda>
   1b34c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b350:	4293      	cmp	r3, r2
   1b352:	f280 816b 	bge.w	1b62c <d_type+0x868>
   1b356:	6922      	ldr	r2, [r4, #16]
   1b358:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b35c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b360:	3301      	adds	r3, #1
   1b362:	2000      	movs	r0, #0
   1b364:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b368:	6163      	str	r3, [r4, #20]
   1b36a:	2327      	movs	r3, #39	; 0x27
   1b36c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b372:	4aa6      	ldr	r2, [pc, #664]	; (1b60c <d_type+0x848>)
   1b374:	60ea      	str	r2, [r5, #12]
   1b376:	3304      	adds	r3, #4
   1b378:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b37a:	e590      	b.n	1ae9e <d_type+0xda>
   1b37c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b380:	4293      	cmp	r3, r2
   1b382:	f280 8153 	bge.w	1b62c <d_type+0x868>
   1b386:	6922      	ldr	r2, [r4, #16]
   1b388:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b38c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b390:	3301      	adds	r3, #1
   1b392:	2000      	movs	r0, #0
   1b394:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b398:	6163      	str	r3, [r4, #20]
   1b39a:	2327      	movs	r3, #39	; 0x27
   1b39c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b3a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b3a2:	4a9b      	ldr	r2, [pc, #620]	; (1b610 <d_type+0x84c>)
   1b3a4:	60ea      	str	r2, [r5, #12]
   1b3a6:	3309      	adds	r3, #9
   1b3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b3aa:	e578      	b.n	1ae9e <d_type+0xda>
   1b3ac:	7893      	ldrb	r3, [r2, #2]
   1b3ae:	2b5f      	cmp	r3, #95	; 0x5f
   1b3b0:	f000 8114 	beq.w	1b5dc <d_type+0x818>
   1b3b4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b3b8:	4293      	cmp	r3, r2
   1b3ba:	f6bf ad6f 	bge.w	1ae9c <d_type+0xd8>
   1b3be:	6922      	ldr	r2, [r4, #16]
   1b3c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b3c4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b3c8:	3301      	adds	r3, #1
   1b3ca:	2000      	movs	r0, #0
   1b3cc:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b3d0:	6163      	str	r3, [r4, #20]
   1b3d2:	2343      	movs	r3, #67	; 0x43
   1b3d4:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b3d8:	4620      	mov	r0, r4
   1b3da:	f7ff f919 	bl	1a610 <d_number>
   1b3de:	60e8      	str	r0, [r5, #12]
   1b3e0:	68e3      	ldr	r3, [r4, #12]
   1b3e2:	781a      	ldrb	r2, [r3, #0]
   1b3e4:	2a5f      	cmp	r2, #95	; 0x5f
   1b3e6:	f47f ad59 	bne.w	1ae9c <d_type+0xd8>
   1b3ea:	3301      	adds	r3, #1
   1b3ec:	60e3      	str	r3, [r4, #12]
   1b3ee:	4620      	mov	r0, r4
   1b3f0:	f7ff fce8 	bl	1adc4 <d_type>
   1b3f4:	462a      	mov	r2, r5
   1b3f6:	4603      	mov	r3, r0
   1b3f8:	212d      	movs	r1, #45	; 0x2d
   1b3fa:	4620      	mov	r0, r4
   1b3fc:	f7ff f890 	bl	1a520 <d_make_comp>
   1b400:	4605      	mov	r5, r0
   1b402:	9001      	str	r0, [sp, #4]
   1b404:	e583      	b.n	1af0e <d_type+0x14a>
   1b406:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b40a:	4293      	cmp	r3, r2
   1b40c:	f280 810e 	bge.w	1b62c <d_type+0x868>
   1b410:	6922      	ldr	r2, [r4, #16]
   1b412:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b416:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b41a:	3301      	adds	r3, #1
   1b41c:	2000      	movs	r0, #0
   1b41e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b422:	6163      	str	r3, [r4, #20]
   1b424:	2327      	movs	r3, #39	; 0x27
   1b426:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b42a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b42c:	4a79      	ldr	r2, [pc, #484]	; (1b614 <d_type+0x850>)
   1b42e:	60ea      	str	r2, [r5, #12]
   1b430:	3307      	adds	r3, #7
   1b432:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b434:	e533      	b.n	1ae9e <d_type+0xda>
   1b436:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b43a:	4293      	cmp	r3, r2
   1b43c:	f280 80f6 	bge.w	1b62c <d_type+0x868>
   1b440:	6922      	ldr	r2, [r4, #16]
   1b442:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b446:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b44a:	3301      	adds	r3, #1
   1b44c:	2000      	movs	r0, #0
   1b44e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b452:	6163      	str	r3, [r4, #20]
   1b454:	2327      	movs	r3, #39	; 0x27
   1b456:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b45a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b45c:	4a6e      	ldr	r2, [pc, #440]	; (1b618 <d_type+0x854>)
   1b45e:	60ea      	str	r2, [r5, #12]
   1b460:	3308      	adds	r3, #8
   1b462:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b464:	e51b      	b.n	1ae9e <d_type+0xda>
   1b466:	4620      	mov	r0, r4
   1b468:	f7ff fcac 	bl	1adc4 <d_type>
   1b46c:	2300      	movs	r3, #0
   1b46e:	4602      	mov	r2, r0
   1b470:	214c      	movs	r1, #76	; 0x4c
   1b472:	4620      	mov	r0, r4
   1b474:	f7ff f854 	bl	1a520 <d_make_comp>
   1b478:	4605      	mov	r5, r0
   1b47a:	9001      	str	r0, [sp, #4]
   1b47c:	e547      	b.n	1af0e <d_type+0x14a>
   1b47e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b482:	4293      	cmp	r3, r2
   1b484:	f280 80d2 	bge.w	1b62c <d_type+0x868>
   1b488:	6922      	ldr	r2, [r4, #16]
   1b48a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b48e:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b492:	3301      	adds	r3, #1
   1b494:	2000      	movs	r0, #0
   1b496:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b49a:	6163      	str	r3, [r4, #20]
   1b49c:	2327      	movs	r3, #39	; 0x27
   1b49e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b4a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b4a4:	4a5d      	ldr	r2, [pc, #372]	; (1b61c <d_type+0x858>)
   1b4a6:	60ea      	str	r2, [r5, #12]
   1b4a8:	3311      	adds	r3, #17
   1b4aa:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b4ac:	e4f7      	b.n	1ae9e <d_type+0xda>
   1b4ae:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b4b2:	4293      	cmp	r3, r2
   1b4b4:	f280 80ba 	bge.w	1b62c <d_type+0x868>
   1b4b8:	6922      	ldr	r2, [r4, #16]
   1b4ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b4be:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b4c2:	3301      	adds	r3, #1
   1b4c4:	2000      	movs	r0, #0
   1b4c6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b4ca:	6163      	str	r3, [r4, #20]
   1b4cc:	2327      	movs	r3, #39	; 0x27
   1b4ce:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b4d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b4d4:	4a52      	ldr	r2, [pc, #328]	; (1b620 <d_type+0x85c>)
   1b4d6:	60ea      	str	r2, [r5, #12]
   1b4d8:	3308      	adds	r3, #8
   1b4da:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b4dc:	e4df      	b.n	1ae9e <d_type+0xda>
   1b4de:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b4e2:	4293      	cmp	r3, r2
   1b4e4:	f280 80a2 	bge.w	1b62c <d_type+0x868>
   1b4e8:	6922      	ldr	r2, [r4, #16]
   1b4ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b4ee:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b4f2:	3301      	adds	r3, #1
   1b4f4:	2000      	movs	r0, #0
   1b4f6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b4fa:	6163      	str	r3, [r4, #20]
   1b4fc:	2327      	movs	r3, #39	; 0x27
   1b4fe:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b504:	4a47      	ldr	r2, [pc, #284]	; (1b624 <d_type+0x860>)
   1b506:	60ea      	str	r2, [r5, #12]
   1b508:	330a      	adds	r3, #10
   1b50a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b50c:	e4c7      	b.n	1ae9e <d_type+0xda>
   1b50e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b512:	4293      	cmp	r3, r2
   1b514:	f280 808a 	bge.w	1b62c <d_type+0x868>
   1b518:	6922      	ldr	r2, [r4, #16]
   1b51a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b51e:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b522:	3301      	adds	r3, #1
   1b524:	2000      	movs	r0, #0
   1b526:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b52a:	6163      	str	r3, [r4, #20]
   1b52c:	2327      	movs	r3, #39	; 0x27
   1b52e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b534:	4a3c      	ldr	r2, [pc, #240]	; (1b628 <d_type+0x864>)
   1b536:	60ea      	str	r2, [r5, #12]
   1b538:	3309      	adds	r3, #9
   1b53a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b53c:	e4af      	b.n	1ae9e <d_type+0xda>
   1b53e:	2600      	movs	r6, #0
   1b540:	e65e      	b.n	1b200 <d_type+0x43c>
   1b542:	3301      	adds	r3, #1
   1b544:	60e3      	str	r3, [r4, #12]
   1b546:	4620      	mov	r0, r4
   1b548:	f000 fbee 	bl	1bd28 <d_template_args_1>
   1b54c:	462a      	mov	r2, r5
   1b54e:	4603      	mov	r3, r0
   1b550:	2104      	movs	r1, #4
   1b552:	4620      	mov	r0, r4
   1b554:	f7fe ffe4 	bl	1a520 <d_make_comp>
   1b558:	4605      	mov	r5, r0
   1b55a:	e611      	b.n	1b180 <d_type+0x3bc>
   1b55c:	2301      	movs	r3, #1
   1b55e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b560:	6323      	str	r3, [r4, #48]	; 0x30
   1b562:	4620      	mov	r0, r4
   1b564:	f000 fca8 	bl	1beb8 <d_expression_1>
   1b568:	6325      	str	r5, [r4, #48]	; 0x30
   1b56a:	4606      	mov	r6, r0
   1b56c:	2800      	cmp	r0, #0
   1b56e:	f43f ac95 	beq.w	1ae9c <d_type+0xd8>
   1b572:	68e5      	ldr	r5, [r4, #12]
   1b574:	782a      	ldrb	r2, [r5, #0]
   1b576:	e640      	b.n	1b1fa <d_type+0x436>
   1b578:	4620      	mov	r0, r4
   1b57a:	f001 fa31 	bl	1c9e0 <d_name>
   1b57e:	4605      	mov	r5, r0
   1b580:	9001      	str	r0, [sp, #4]
   1b582:	2800      	cmp	r0, #0
   1b584:	f43f ac8a 	beq.w	1ae9c <d_type+0xd8>
   1b588:	7803      	ldrb	r3, [r0, #0]
   1b58a:	2b18      	cmp	r3, #24
   1b58c:	f47f acc1 	bne.w	1af12 <d_type+0x14e>
   1b590:	e485      	b.n	1ae9e <d_type+0xda>
   1b592:	1c73      	adds	r3, r6, #1
   1b594:	60e3      	str	r3, [r4, #12]
   1b596:	4620      	mov	r0, r4
   1b598:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1b59c:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1b5a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1b5a2:	f000 fbc1 	bl	1bd28 <d_template_args_1>
   1b5a6:	68e3      	ldr	r3, [r4, #12]
   1b5a8:	781b      	ldrb	r3, [r3, #0]
   1b5aa:	2b49      	cmp	r3, #73	; 0x49
   1b5ac:	d006      	beq.n	1b5bc <d_type+0x7f8>
   1b5ae:	60e6      	str	r6, [r4, #12]
   1b5b0:	f8c4 9014 	str.w	r9, [r4, #20]
   1b5b4:	f8c4 8020 	str.w	r8, [r4, #32]
   1b5b8:	62e7      	str	r7, [r4, #44]	; 0x2c
   1b5ba:	e4a8      	b.n	1af0e <d_type+0x14a>
   1b5bc:	2d00      	cmp	r5, #0
   1b5be:	f43f ac6d 	beq.w	1ae9c <d_type+0xd8>
   1b5c2:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   1b5c6:	4299      	cmp	r1, r3
   1b5c8:	f6bf ac68 	bge.w	1ae9c <d_type+0xd8>
   1b5cc:	69e2      	ldr	r2, [r4, #28]
   1b5ce:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1b5d2:	3101      	adds	r1, #1
   1b5d4:	4603      	mov	r3, r0
   1b5d6:	462a      	mov	r2, r5
   1b5d8:	6221      	str	r1, [r4, #32]
   1b5da:	e5b9      	b.n	1b150 <d_type+0x38c>
   1b5dc:	3203      	adds	r2, #3
   1b5de:	2301      	movs	r3, #1
   1b5e0:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b5e2:	60e2      	str	r2, [r4, #12]
   1b5e4:	6323      	str	r3, [r4, #48]	; 0x30
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	f000 fc66 	bl	1beb8 <d_expression_1>
   1b5ec:	6325      	str	r5, [r4, #48]	; 0x30
   1b5ee:	4605      	mov	r5, r0
   1b5f0:	2800      	cmp	r0, #0
   1b5f2:	f47f aef5 	bne.w	1b3e0 <d_type+0x61c>
   1b5f6:	e451      	b.n	1ae9c <d_type+0xd8>
   1b5f8:	68c3      	ldr	r3, [r0, #12]
   1b5fa:	deff      	udf	#255	; 0xff
   1b5fc:	2300      	movs	r3, #0
   1b5fe:	701b      	strb	r3, [r3, #0]
   1b600:	deff      	udf	#255	; 0xff
   1b602:	bf00      	nop
   1b604:	20004e88 	.word	0x20004e88
   1b608:	20004e80 	.word	0x20004e80
   1b60c:	20004618 	.word	0x20004618
   1b610:	200045dc 	.word	0x200045dc
   1b614:	2000462c 	.word	0x2000462c
   1b618:	20004640 	.word	0x20004640
   1b61c:	20004668 	.word	0x20004668
   1b620:	20004654 	.word	0x20004654
   1b624:	20004604 	.word	0x20004604
   1b628:	200045f0 	.word	0x200045f0
   1b62c:	2300      	movs	r3, #0
   1b62e:	68db      	ldr	r3, [r3, #12]
   1b630:	deff      	udf	#255	; 0xff
   1b632:	bf00      	nop

0001b634 <d_parmlist>:
   1b634:	b530      	push	{r4, r5, lr}
   1b636:	68c2      	ldr	r2, [r0, #12]
   1b638:	b083      	sub	sp, #12
   1b63a:	2300      	movs	r3, #0
   1b63c:	9301      	str	r3, [sp, #4]
   1b63e:	7813      	ldrb	r3, [r2, #0]
   1b640:	2b00      	cmp	r3, #0
   1b642:	d034      	beq.n	1b6ae <d_parmlist+0x7a>
   1b644:	4604      	mov	r4, r0
   1b646:	ad01      	add	r5, sp, #4
   1b648:	2b4f      	cmp	r3, #79	; 0x4f
   1b64a:	d00c      	beq.n	1b666 <d_parmlist+0x32>
   1b64c:	d809      	bhi.n	1b662 <d_parmlist+0x2e>
   1b64e:	2b2e      	cmp	r3, #46	; 0x2e
   1b650:	d001      	beq.n	1b656 <d_parmlist+0x22>
   1b652:	2b45      	cmp	r3, #69	; 0x45
   1b654:	d10a      	bne.n	1b66c <d_parmlist+0x38>
   1b656:	9801      	ldr	r0, [sp, #4]
   1b658:	b348      	cbz	r0, 1b6ae <d_parmlist+0x7a>
   1b65a:	6903      	ldr	r3, [r0, #16]
   1b65c:	b1cb      	cbz	r3, 1b692 <d_parmlist+0x5e>
   1b65e:	b003      	add	sp, #12
   1b660:	bd30      	pop	{r4, r5, pc}
   1b662:	2b52      	cmp	r3, #82	; 0x52
   1b664:	d102      	bne.n	1b66c <d_parmlist+0x38>
   1b666:	7853      	ldrb	r3, [r2, #1]
   1b668:	2b45      	cmp	r3, #69	; 0x45
   1b66a:	d0f4      	beq.n	1b656 <d_parmlist+0x22>
   1b66c:	4620      	mov	r0, r4
   1b66e:	f7ff fba9 	bl	1adc4 <d_type>
   1b672:	4602      	mov	r2, r0
   1b674:	2300      	movs	r3, #0
   1b676:	212e      	movs	r1, #46	; 0x2e
   1b678:	4620      	mov	r0, r4
   1b67a:	b1c2      	cbz	r2, 1b6ae <d_parmlist+0x7a>
   1b67c:	f7fe ff50 	bl	1a520 <d_make_comp>
   1b680:	6028      	str	r0, [r5, #0]
   1b682:	b1a0      	cbz	r0, 1b6ae <d_parmlist+0x7a>
   1b684:	68e2      	ldr	r2, [r4, #12]
   1b686:	7813      	ldrb	r3, [r2, #0]
   1b688:	f100 0510 	add.w	r5, r0, #16
   1b68c:	2b00      	cmp	r3, #0
   1b68e:	d1db      	bne.n	1b648 <d_parmlist+0x14>
   1b690:	e7e1      	b.n	1b656 <d_parmlist+0x22>
   1b692:	68c2      	ldr	r2, [r0, #12]
   1b694:	7811      	ldrb	r1, [r2, #0]
   1b696:	2927      	cmp	r1, #39	; 0x27
   1b698:	d1e1      	bne.n	1b65e <d_parmlist+0x2a>
   1b69a:	68d2      	ldr	r2, [r2, #12]
   1b69c:	7c11      	ldrb	r1, [r2, #16]
   1b69e:	2909      	cmp	r1, #9
   1b6a0:	d1dd      	bne.n	1b65e <d_parmlist+0x2a>
   1b6a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1b6a4:	6852      	ldr	r2, [r2, #4]
   1b6a6:	1a89      	subs	r1, r1, r2
   1b6a8:	62e1      	str	r1, [r4, #44]	; 0x2c
   1b6aa:	60c3      	str	r3, [r0, #12]
   1b6ac:	e7d7      	b.n	1b65e <d_parmlist+0x2a>
   1b6ae:	2000      	movs	r0, #0
   1b6b0:	b003      	add	sp, #12
   1b6b2:	bd30      	pop	{r4, r5, pc}

0001b6b4 <d_bare_function_type>:
   1b6b4:	b570      	push	{r4, r5, r6, lr}
   1b6b6:	68c3      	ldr	r3, [r0, #12]
   1b6b8:	781a      	ldrb	r2, [r3, #0]
   1b6ba:	2a4a      	cmp	r2, #74	; 0x4a
   1b6bc:	4605      	mov	r5, r0
   1b6be:	d01a      	beq.n	1b6f6 <d_bare_function_type+0x42>
   1b6c0:	b181      	cbz	r1, 1b6e4 <d_bare_function_type+0x30>
   1b6c2:	4628      	mov	r0, r5
   1b6c4:	f7ff fb7e 	bl	1adc4 <d_type>
   1b6c8:	4604      	mov	r4, r0
   1b6ca:	b190      	cbz	r0, 1b6f2 <d_bare_function_type+0x3e>
   1b6cc:	4628      	mov	r0, r5
   1b6ce:	f7ff ffb1 	bl	1b634 <d_parmlist>
   1b6d2:	4603      	mov	r3, r0
   1b6d4:	b168      	cbz	r0, 1b6f2 <d_bare_function_type+0x3e>
   1b6d6:	4622      	mov	r2, r4
   1b6d8:	4628      	mov	r0, r5
   1b6da:	2129      	movs	r1, #41	; 0x29
   1b6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b6e0:	f7fe bf1e 	b.w	1a520 <d_make_comp>
   1b6e4:	4628      	mov	r0, r5
   1b6e6:	460c      	mov	r4, r1
   1b6e8:	f7ff ffa4 	bl	1b634 <d_parmlist>
   1b6ec:	4603      	mov	r3, r0
   1b6ee:	2800      	cmp	r0, #0
   1b6f0:	d1f1      	bne.n	1b6d6 <d_bare_function_type+0x22>
   1b6f2:	2000      	movs	r0, #0
   1b6f4:	bd70      	pop	{r4, r5, r6, pc}
   1b6f6:	3301      	adds	r3, #1
   1b6f8:	60c3      	str	r3, [r0, #12]
   1b6fa:	e7e2      	b.n	1b6c2 <d_bare_function_type+0xe>

0001b6fc <d_function_type>:
   1b6fc:	b510      	push	{r4, lr}
   1b6fe:	4604      	mov	r4, r0
   1b700:	6880      	ldr	r0, [r0, #8]
   1b702:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
   1b706:	d10b      	bne.n	1b720 <d_function_type+0x24>
   1b708:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1b70a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1b70e:	d806      	bhi.n	1b71e <d_function_type+0x22>
   1b710:	1c51      	adds	r1, r2, #1
   1b712:	68e3      	ldr	r3, [r4, #12]
   1b714:	63e1      	str	r1, [r4, #60]	; 0x3c
   1b716:	7819      	ldrb	r1, [r3, #0]
   1b718:	2946      	cmp	r1, #70	; 0x46
   1b71a:	d007      	beq.n	1b72c <d_function_type+0x30>
   1b71c:	63e2      	str	r2, [r4, #60]	; 0x3c
   1b71e:	bd10      	pop	{r4, pc}
   1b720:	68e3      	ldr	r3, [r4, #12]
   1b722:	781a      	ldrb	r2, [r3, #0]
   1b724:	2a46      	cmp	r2, #70	; 0x46
   1b726:	d001      	beq.n	1b72c <d_function_type+0x30>
   1b728:	2000      	movs	r0, #0
   1b72a:	bd10      	pop	{r4, pc}
   1b72c:	1c5a      	adds	r2, r3, #1
   1b72e:	60e2      	str	r2, [r4, #12]
   1b730:	785a      	ldrb	r2, [r3, #1]
   1b732:	2a59      	cmp	r2, #89	; 0x59
   1b734:	bf04      	itt	eq
   1b736:	3302      	addeq	r3, #2
   1b738:	60e3      	streq	r3, [r4, #12]
   1b73a:	2101      	movs	r1, #1
   1b73c:	4620      	mov	r0, r4
   1b73e:	f7ff ffb9 	bl	1b6b4 <d_bare_function_type>
   1b742:	4601      	mov	r1, r0
   1b744:	4620      	mov	r0, r4
   1b746:	f7fe ffc1 	bl	1a6cc <d_ref_qualifier>
   1b74a:	68e3      	ldr	r3, [r4, #12]
   1b74c:	781a      	ldrb	r2, [r3, #0]
   1b74e:	2a45      	cmp	r2, #69	; 0x45
   1b750:	bf04      	itt	eq
   1b752:	3301      	addeq	r3, #1
   1b754:	60e3      	streq	r3, [r4, #12]
   1b756:	68a3      	ldr	r3, [r4, #8]
   1b758:	bf18      	it	ne
   1b75a:	2000      	movne	r0, #0
   1b75c:	035b      	lsls	r3, r3, #13
   1b75e:	d4de      	bmi.n	1b71e <d_function_type+0x22>
   1b760:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1b762:	3a01      	subs	r2, #1
   1b764:	e7da      	b.n	1b71c <d_function_type+0x20>
   1b766:	bf00      	nop

0001b768 <d_operator_name>:
   1b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b76a:	68c3      	ldr	r3, [r0, #12]
   1b76c:	781f      	ldrb	r7, [r3, #0]
   1b76e:	4606      	mov	r6, r0
   1b770:	bb77      	cbnz	r7, 1b7d0 <d_operator_name+0x68>
   1b772:	f04f 0e00 	mov.w	lr, #0
   1b776:	4d3d      	ldr	r5, [pc, #244]	; (1b86c <d_operator_name+0x104>)
   1b778:	2148      	movs	r1, #72	; 0x48
   1b77a:	2200      	movs	r2, #0
   1b77c:	1a8b      	subs	r3, r1, r2
   1b77e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1b782:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1b786:	0118      	lsls	r0, r3, #4
   1b788:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
   1b78c:	582c      	ldr	r4, [r5, r0]
   1b78e:	7820      	ldrb	r0, [r4, #0]
   1b790:	42b8      	cmp	r0, r7
   1b792:	d006      	beq.n	1b7a2 <d_operator_name+0x3a>
   1b794:	bf94      	ite	ls
   1b796:	1c5a      	addls	r2, r3, #1
   1b798:	4619      	movhi	r1, r3
   1b79a:	428a      	cmp	r2, r1
   1b79c:	d1ee      	bne.n	1b77c <d_operator_name+0x14>
   1b79e:	2000      	movs	r0, #0
   1b7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7a2:	7860      	ldrb	r0, [r4, #1]
   1b7a4:	4570      	cmp	r0, lr
   1b7a6:	d1f5      	bne.n	1b794 <d_operator_name+0x2c>
   1b7a8:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
   1b7ac:	4293      	cmp	r3, r2
   1b7ae:	daf6      	bge.n	1b79e <d_operator_name+0x36>
   1b7b0:	6932      	ldr	r2, [r6, #16]
   1b7b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b7b6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   1b7ba:	3301      	adds	r3, #1
   1b7bc:	2400      	movs	r4, #0
   1b7be:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1b7c2:	6173      	str	r3, [r6, #20]
   1b7c4:	2332      	movs	r3, #50	; 0x32
   1b7c6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b7ca:	f8c0 c00c 	str.w	ip, [r0, #12]
   1b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7d0:	1c5a      	adds	r2, r3, #1
   1b7d2:	60c2      	str	r2, [r0, #12]
   1b7d4:	f893 e001 	ldrb.w	lr, [r3, #1]
   1b7d8:	781f      	ldrb	r7, [r3, #0]
   1b7da:	f1be 0f00 	cmp.w	lr, #0
   1b7de:	d102      	bne.n	1b7e6 <d_operator_name+0x7e>
   1b7e0:	2f76      	cmp	r7, #118	; 0x76
   1b7e2:	d0c8      	beq.n	1b776 <d_operator_name+0xe>
   1b7e4:	e7c5      	b.n	1b772 <d_operator_name+0xa>
   1b7e6:	1c9a      	adds	r2, r3, #2
   1b7e8:	60c2      	str	r2, [r0, #12]
   1b7ea:	2f76      	cmp	r7, #118	; 0x76
   1b7ec:	f893 e001 	ldrb.w	lr, [r3, #1]
   1b7f0:	d11f      	bne.n	1b832 <d_operator_name+0xca>
   1b7f2:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
   1b7f6:	b2e3      	uxtb	r3, r4
   1b7f8:	2b09      	cmp	r3, #9
   1b7fa:	d8bc      	bhi.n	1b776 <d_operator_name+0xe>
   1b7fc:	f7ff f9a8 	bl	1ab50 <d_source_name>
   1b800:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   1b804:	428b      	cmp	r3, r1
   1b806:	4602      	mov	r2, r0
   1b808:	dac9      	bge.n	1b79e <d_operator_name+0x36>
   1b80a:	6937      	ldr	r7, [r6, #16]
   1b80c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b810:	eb07 0081 	add.w	r0, r7, r1, lsl #2
   1b814:	3301      	adds	r3, #1
   1b816:	2500      	movs	r5, #0
   1b818:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1b81c:	0089      	lsls	r1, r1, #2
   1b81e:	6173      	str	r3, [r6, #20]
   1b820:	2a00      	cmp	r2, #0
   1b822:	d0bc      	beq.n	1b79e <d_operator_name+0x36>
   1b824:	2333      	movs	r3, #51	; 0x33
   1b826:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1b82a:	547b      	strb	r3, [r7, r1]
   1b82c:	e9c0 4203 	strd	r4, r2, [r0, #12]
   1b830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b832:	2f63      	cmp	r7, #99	; 0x63
   1b834:	d19f      	bne.n	1b776 <d_operator_name+0xe>
   1b836:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   1b83a:	d19c      	bne.n	1b776 <d_operator_name+0xe>
   1b83c:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
   1b840:	fab3 f383 	clz	r3, r3
   1b844:	095b      	lsrs	r3, r3, #5
   1b846:	6343      	str	r3, [r0, #52]	; 0x34
   1b848:	f7ff fabc 	bl	1adc4 <d_type>
   1b84c:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1b84e:	4602      	mov	r2, r0
   1b850:	b133      	cbz	r3, 1b860 <d_operator_name+0xf8>
   1b852:	2300      	movs	r3, #0
   1b854:	2135      	movs	r1, #53	; 0x35
   1b856:	4630      	mov	r0, r6
   1b858:	f7fe fe62 	bl	1a520 <d_make_comp>
   1b85c:	6374      	str	r4, [r6, #52]	; 0x34
   1b85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b860:	2134      	movs	r1, #52	; 0x34
   1b862:	4630      	mov	r0, r6
   1b864:	f7fe fe5c 	bl	1a520 <d_make_comp>
   1b868:	e7f8      	b.n	1b85c <d_operator_name+0xf4>
   1b86a:	bf00      	nop
   1b86c:	2000467c 	.word	0x2000467c

0001b870 <d_unqualified_name>:
   1b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b872:	68c3      	ldr	r3, [r0, #12]
   1b874:	781a      	ldrb	r2, [r3, #0]
   1b876:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1b87a:	2909      	cmp	r1, #9
   1b87c:	4604      	mov	r4, r0
   1b87e:	d965      	bls.n	1b94c <d_unqualified_name+0xdc>
   1b880:	2a55      	cmp	r2, #85	; 0x55
   1b882:	d06c      	beq.n	1b95e <d_unqualified_name+0xee>
   1b884:	d838      	bhi.n	1b8f8 <d_unqualified_name+0x88>
   1b886:	2a44      	cmp	r2, #68	; 0x44
   1b888:	d90f      	bls.n	1b8aa <d_unqualified_name+0x3a>
   1b88a:	2a4c      	cmp	r2, #76	; 0x4c
   1b88c:	d10a      	bne.n	1b8a4 <d_unqualified_name+0x34>
   1b88e:	3301      	adds	r3, #1
   1b890:	60c3      	str	r3, [r0, #12]
   1b892:	f7ff f95d 	bl	1ab50 <d_source_name>
   1b896:	4605      	mov	r5, r0
   1b898:	b120      	cbz	r0, 1b8a4 <d_unqualified_name+0x34>
   1b89a:	4620      	mov	r0, r4
   1b89c:	f7fe ffaa 	bl	1a7f4 <d_discriminator>
   1b8a0:	2800      	cmp	r0, #0
   1b8a2:	d13b      	bne.n	1b91c <d_unqualified_name+0xac>
   1b8a4:	2500      	movs	r5, #0
   1b8a6:	4628      	mov	r0, r5
   1b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8aa:	2a42      	cmp	r2, #66	; 0x42
   1b8ac:	d9fa      	bls.n	1b8a4 <d_unqualified_name+0x34>
   1b8ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1b8b0:	b141      	cbz	r1, 1b8c4 <d_unqualified_name+0x54>
   1b8b2:	7808      	ldrb	r0, [r1, #0]
   1b8b4:	2800      	cmp	r0, #0
   1b8b6:	f040 8091 	bne.w	1b9dc <d_unqualified_name+0x16c>
   1b8ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b8bc:	6908      	ldr	r0, [r1, #16]
   1b8be:	4402      	add	r2, r0
   1b8c0:	62e2      	str	r2, [r4, #44]	; 0x2c
   1b8c2:	781a      	ldrb	r2, [r3, #0]
   1b8c4:	2a43      	cmp	r2, #67	; 0x43
   1b8c6:	f000 80c8 	beq.w	1ba5a <d_unqualified_name+0x1ea>
   1b8ca:	2a44      	cmp	r2, #68	; 0x44
   1b8cc:	f040 8084 	bne.w	1b9d8 <d_unqualified_name+0x168>
   1b8d0:	785a      	ldrb	r2, [r3, #1]
   1b8d2:	3a30      	subs	r2, #48	; 0x30
   1b8d4:	2a05      	cmp	r2, #5
   1b8d6:	d8e5      	bhi.n	1b8a4 <d_unqualified_name+0x34>
   1b8d8:	a001      	add	r0, pc, #4	; (adr r0, 1b8e0 <d_unqualified_name+0x70>)
   1b8da:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1b8de:	bf00      	nop
   1b8e0:	0001b9eb 	.word	0x0001b9eb
   1b8e4:	0001ba43 	.word	0x0001ba43
   1b8e8:	0001ba31 	.word	0x0001ba31
   1b8ec:	0001b8a5 	.word	0x0001b8a5
   1b8f0:	0001ba3d 	.word	0x0001ba3d
   1b8f4:	0001ba37 	.word	0x0001ba37
   1b8f8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1b8fc:	2919      	cmp	r1, #25
   1b8fe:	d8d1      	bhi.n	1b8a4 <d_unqualified_name+0x34>
   1b900:	2a6f      	cmp	r2, #111	; 0x6f
   1b902:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1b904:	f000 80a0 	beq.w	1ba48 <d_unqualified_name+0x1d8>
   1b908:	4620      	mov	r0, r4
   1b90a:	f7ff ff2d 	bl	1b768 <d_operator_name>
   1b90e:	6325      	str	r5, [r4, #48]	; 0x30
   1b910:	4605      	mov	r5, r0
   1b912:	b118      	cbz	r0, 1b91c <d_unqualified_name+0xac>
   1b914:	7803      	ldrb	r3, [r0, #0]
   1b916:	2b32      	cmp	r3, #50	; 0x32
   1b918:	f000 80c6 	beq.w	1baa8 <d_unqualified_name+0x238>
   1b91c:	68e3      	ldr	r3, [r4, #12]
   1b91e:	781a      	ldrb	r2, [r3, #0]
   1b920:	2a42      	cmp	r2, #66	; 0x42
   1b922:	d1c0      	bne.n	1b8a6 <d_unqualified_name+0x36>
   1b924:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b926:	3301      	adds	r3, #1
   1b928:	60e3      	str	r3, [r4, #12]
   1b92a:	4620      	mov	r0, r4
   1b92c:	f7ff f910 	bl	1ab50 <d_source_name>
   1b930:	462a      	mov	r2, r5
   1b932:	4603      	mov	r3, r0
   1b934:	214d      	movs	r1, #77	; 0x4d
   1b936:	4620      	mov	r0, r4
   1b938:	f7fe fdf2 	bl	1a520 <d_make_comp>
   1b93c:	68e3      	ldr	r3, [r4, #12]
   1b93e:	781a      	ldrb	r2, [r3, #0]
   1b940:	2a42      	cmp	r2, #66	; 0x42
   1b942:	4605      	mov	r5, r0
   1b944:	d0ef      	beq.n	1b926 <d_unqualified_name+0xb6>
   1b946:	62a6      	str	r6, [r4, #40]	; 0x28
   1b948:	4628      	mov	r0, r5
   1b94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b94c:	f7ff f900 	bl	1ab50 <d_source_name>
   1b950:	68e3      	ldr	r3, [r4, #12]
   1b952:	781a      	ldrb	r2, [r3, #0]
   1b954:	4605      	mov	r5, r0
   1b956:	2a42      	cmp	r2, #66	; 0x42
   1b958:	d0e4      	beq.n	1b924 <d_unqualified_name+0xb4>
   1b95a:	4628      	mov	r0, r5
   1b95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b95e:	785a      	ldrb	r2, [r3, #1]
   1b960:	2a6c      	cmp	r2, #108	; 0x6c
   1b962:	f000 80c1 	beq.w	1bae8 <d_unqualified_name+0x278>
   1b966:	2a74      	cmp	r2, #116	; 0x74
   1b968:	d19c      	bne.n	1b8a4 <d_unqualified_name+0x34>
   1b96a:	1c59      	adds	r1, r3, #1
   1b96c:	60c1      	str	r1, [r0, #12]
   1b96e:	785a      	ldrb	r2, [r3, #1]
   1b970:	2a74      	cmp	r2, #116	; 0x74
   1b972:	d137      	bne.n	1b9e4 <d_unqualified_name+0x174>
   1b974:	1c9a      	adds	r2, r3, #2
   1b976:	60c2      	str	r2, [r0, #12]
   1b978:	789a      	ldrb	r2, [r3, #2]
   1b97a:	2a5f      	cmp	r2, #95	; 0x5f
   1b97c:	f000 8108 	beq.w	1bb90 <d_unqualified_name+0x320>
   1b980:	2a6e      	cmp	r2, #110	; 0x6e
   1b982:	d08f      	beq.n	1b8a4 <d_unqualified_name+0x34>
   1b984:	f7fe fe44 	bl	1a610 <d_number>
   1b988:	3001      	adds	r0, #1
   1b98a:	68e3      	ldr	r3, [r4, #12]
   1b98c:	f100 80fd 	bmi.w	1bb8a <d_unqualified_name+0x31a>
   1b990:	781a      	ldrb	r2, [r3, #0]
   1b992:	2a5f      	cmp	r2, #95	; 0x5f
   1b994:	d120      	bne.n	1b9d8 <d_unqualified_name+0x168>
   1b996:	3301      	adds	r3, #1
   1b998:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   1b99c:	428a      	cmp	r2, r1
   1b99e:	60e3      	str	r3, [r4, #12]
   1b9a0:	f280 8100 	bge.w	1bba4 <d_unqualified_name+0x334>
   1b9a4:	6926      	ldr	r6, [r4, #16]
   1b9a6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   1b9aa:	eb06 0587 	add.w	r5, r6, r7, lsl #2
   1b9ae:	3201      	adds	r2, #1
   1b9b0:	2100      	movs	r1, #0
   1b9b2:	e9c5 1101 	strd	r1, r1, [r5, #4]
   1b9b6:	6162      	str	r2, [r4, #20]
   1b9b8:	2249      	movs	r2, #73	; 0x49
   1b9ba:	f806 2027 	strb.w	r2, [r6, r7, lsl #2]
   1b9be:	60e8      	str	r0, [r5, #12]
   1b9c0:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   1b9c4:	4282      	cmp	r2, r0
   1b9c6:	f280 80ea 	bge.w	1bb9e <d_unqualified_name+0x32e>
   1b9ca:	69e1      	ldr	r1, [r4, #28]
   1b9cc:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   1b9d0:	3201      	adds	r2, #1
   1b9d2:	6222      	str	r2, [r4, #32]
   1b9d4:	781a      	ldrb	r2, [r3, #0]
   1b9d6:	e7be      	b.n	1b956 <d_unqualified_name+0xe6>
   1b9d8:	2500      	movs	r5, #0
   1b9da:	e7bc      	b.n	1b956 <d_unqualified_name+0xe6>
   1b9dc:	2818      	cmp	r0, #24
   1b9de:	f47f af71 	bne.w	1b8c4 <d_unqualified_name+0x54>
   1b9e2:	e76a      	b.n	1b8ba <d_unqualified_name+0x4a>
   1b9e4:	460b      	mov	r3, r1
   1b9e6:	2500      	movs	r5, #0
   1b9e8:	e7b5      	b.n	1b956 <d_unqualified_name+0xe6>
   1b9ea:	f04f 0e01 	mov.w	lr, #1
   1b9ee:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1b9f2:	1c9f      	adds	r7, r3, #2
   1b9f4:	4282      	cmp	r2, r0
   1b9f6:	60e7      	str	r7, [r4, #12]
   1b9f8:	f280 80c2 	bge.w	1bb80 <d_unqualified_name+0x310>
   1b9fc:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1ba00:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1ba04:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
   1ba08:	3201      	adds	r2, #1
   1ba0a:	2600      	movs	r6, #0
   1ba0c:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1ba10:	0080      	lsls	r0, r0, #2
   1ba12:	6162      	str	r2, [r4, #20]
   1ba14:	2900      	cmp	r1, #0
   1ba16:	f000 80b3 	beq.w	1bb80 <d_unqualified_name+0x310>
   1ba1a:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1ba1e:	2208      	movs	r2, #8
   1ba20:	f80c 2000 	strb.w	r2, [ip, r0]
   1ba24:	f885 e00c 	strb.w	lr, [r5, #12]
   1ba28:	6129      	str	r1, [r5, #16]
   1ba2a:	789a      	ldrb	r2, [r3, #2]
   1ba2c:	463b      	mov	r3, r7
   1ba2e:	e792      	b.n	1b956 <d_unqualified_name+0xe6>
   1ba30:	f04f 0e03 	mov.w	lr, #3
   1ba34:	e7db      	b.n	1b9ee <d_unqualified_name+0x17e>
   1ba36:	f04f 0e05 	mov.w	lr, #5
   1ba3a:	e7d8      	b.n	1b9ee <d_unqualified_name+0x17e>
   1ba3c:	f04f 0e04 	mov.w	lr, #4
   1ba40:	e7d5      	b.n	1b9ee <d_unqualified_name+0x17e>
   1ba42:	f04f 0e02 	mov.w	lr, #2
   1ba46:	e7d2      	b.n	1b9ee <d_unqualified_name+0x17e>
   1ba48:	785a      	ldrb	r2, [r3, #1]
   1ba4a:	2a6e      	cmp	r2, #110	; 0x6e
   1ba4c:	f47f af5c 	bne.w	1b908 <d_unqualified_name+0x98>
   1ba50:	3302      	adds	r3, #2
   1ba52:	2200      	movs	r2, #0
   1ba54:	60c3      	str	r3, [r0, #12]
   1ba56:	6302      	str	r2, [r0, #48]	; 0x30
   1ba58:	e756      	b.n	1b908 <d_unqualified_name+0x98>
   1ba5a:	785a      	ldrb	r2, [r3, #1]
   1ba5c:	2a49      	cmp	r2, #73	; 0x49
   1ba5e:	d07f      	beq.n	1bb60 <d_unqualified_name+0x2f0>
   1ba60:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
   1ba64:	2804      	cmp	r0, #4
   1ba66:	f63f af1d 	bhi.w	1b8a4 <d_unqualified_name+0x34>
   1ba6a:	3a30      	subs	r2, #48	; 0x30
   1ba6c:	3302      	adds	r3, #2
   1ba6e:	b2d6      	uxtb	r6, r2
   1ba70:	60e3      	str	r3, [r4, #12]
   1ba72:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ba76:	4293      	cmp	r3, r2
   1ba78:	f280 8086 	bge.w	1bb88 <d_unqualified_name+0x318>
   1ba7c:	6927      	ldr	r7, [r4, #16]
   1ba7e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1ba82:	eb07 0582 	add.w	r5, r7, r2, lsl #2
   1ba86:	3301      	adds	r3, #1
   1ba88:	2000      	movs	r0, #0
   1ba8a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ba8e:	0092      	lsls	r2, r2, #2
   1ba90:	6163      	str	r3, [r4, #20]
   1ba92:	2900      	cmp	r1, #0
   1ba94:	d078      	beq.n	1bb88 <d_unqualified_name+0x318>
   1ba96:	2307      	movs	r3, #7
   1ba98:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ba9c:	54bb      	strb	r3, [r7, r2]
   1ba9e:	68e3      	ldr	r3, [r4, #12]
   1baa0:	732e      	strb	r6, [r5, #12]
   1baa2:	6129      	str	r1, [r5, #16]
   1baa4:	781a      	ldrb	r2, [r3, #0]
   1baa6:	e756      	b.n	1b956 <d_unqualified_name+0xe6>
   1baa8:	68c2      	ldr	r2, [r0, #12]
   1baaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1baac:	6891      	ldr	r1, [r2, #8]
   1baae:	6812      	ldr	r2, [r2, #0]
   1bab0:	3307      	adds	r3, #7
   1bab2:	440b      	add	r3, r1
   1bab4:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bab6:	7813      	ldrb	r3, [r2, #0]
   1bab8:	2b6c      	cmp	r3, #108	; 0x6c
   1baba:	f47f af2f 	bne.w	1b91c <d_unqualified_name+0xac>
   1babe:	7853      	ldrb	r3, [r2, #1]
   1bac0:	2b69      	cmp	r3, #105	; 0x69
   1bac2:	f47f af2b 	bne.w	1b91c <d_unqualified_name+0xac>
   1bac6:	7893      	ldrb	r3, [r2, #2]
   1bac8:	2b00      	cmp	r3, #0
   1baca:	f47f af27 	bne.w	1b91c <d_unqualified_name+0xac>
   1bace:	4620      	mov	r0, r4
   1bad0:	f7ff f83e 	bl	1ab50 <d_source_name>
   1bad4:	462a      	mov	r2, r5
   1bad6:	4603      	mov	r3, r0
   1bad8:	2137      	movs	r1, #55	; 0x37
   1bada:	4620      	mov	r0, r4
   1badc:	f7fe fd20 	bl	1a520 <d_make_comp>
   1bae0:	68e3      	ldr	r3, [r4, #12]
   1bae2:	4605      	mov	r5, r0
   1bae4:	781a      	ldrb	r2, [r3, #0]
   1bae6:	e736      	b.n	1b956 <d_unqualified_name+0xe6>
   1bae8:	1c59      	adds	r1, r3, #1
   1baea:	60c1      	str	r1, [r0, #12]
   1baec:	785a      	ldrb	r2, [r3, #1]
   1baee:	2a6c      	cmp	r2, #108	; 0x6c
   1baf0:	f47f af78 	bne.w	1b9e4 <d_unqualified_name+0x174>
   1baf4:	3302      	adds	r3, #2
   1baf6:	60c3      	str	r3, [r0, #12]
   1baf8:	f7ff fd9c 	bl	1b634 <d_parmlist>
   1bafc:	68e3      	ldr	r3, [r4, #12]
   1bafe:	4606      	mov	r6, r0
   1bb00:	2800      	cmp	r0, #0
   1bb02:	d042      	beq.n	1bb8a <d_unqualified_name+0x31a>
   1bb04:	781a      	ldrb	r2, [r3, #0]
   1bb06:	2a45      	cmp	r2, #69	; 0x45
   1bb08:	f47f af66 	bne.w	1b9d8 <d_unqualified_name+0x168>
   1bb0c:	1c5a      	adds	r2, r3, #1
   1bb0e:	60e2      	str	r2, [r4, #12]
   1bb10:	785a      	ldrb	r2, [r3, #1]
   1bb12:	2a5f      	cmp	r2, #95	; 0x5f
   1bb14:	d049      	beq.n	1bbaa <d_unqualified_name+0x33a>
   1bb16:	2a6e      	cmp	r2, #110	; 0x6e
   1bb18:	f43f aec4 	beq.w	1b8a4 <d_unqualified_name+0x34>
   1bb1c:	4620      	mov	r0, r4
   1bb1e:	f7fe fd77 	bl	1a610 <d_number>
   1bb22:	3001      	adds	r0, #1
   1bb24:	68e3      	ldr	r3, [r4, #12]
   1bb26:	d430      	bmi.n	1bb8a <d_unqualified_name+0x31a>
   1bb28:	781a      	ldrb	r2, [r3, #0]
   1bb2a:	2a5f      	cmp	r2, #95	; 0x5f
   1bb2c:	f47f af54 	bne.w	1b9d8 <d_unqualified_name+0x168>
   1bb30:	3301      	adds	r3, #1
   1bb32:	6962      	ldr	r2, [r4, #20]
   1bb34:	69a1      	ldr	r1, [r4, #24]
   1bb36:	60e3      	str	r3, [r4, #12]
   1bb38:	428a      	cmp	r2, r1
   1bb3a:	da33      	bge.n	1bba4 <d_unqualified_name+0x334>
   1bb3c:	6921      	ldr	r1, [r4, #16]
   1bb3e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   1bb42:	eb01 0587 	add.w	r5, r1, r7, lsl #2
   1bb46:	3201      	adds	r2, #1
   1bb48:	f04f 0c00 	mov.w	ip, #0
   1bb4c:	e9c5 cc01 	strd	ip, ip, [r5, #4]
   1bb50:	6162      	str	r2, [r4, #20]
   1bb52:	2247      	movs	r2, #71	; 0x47
   1bb54:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
   1bb58:	e9c5 6003 	strd	r6, r0, [r5, #12]
   1bb5c:	781a      	ldrb	r2, [r3, #0]
   1bb5e:	e6fa      	b.n	1b956 <d_unqualified_name+0xe6>
   1bb60:	1c59      	adds	r1, r3, #1
   1bb62:	60e1      	str	r1, [r4, #12]
   1bb64:	789a      	ldrb	r2, [r3, #2]
   1bb66:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
   1bb6a:	2804      	cmp	r0, #4
   1bb6c:	d813      	bhi.n	1bb96 <d_unqualified_name+0x326>
   1bb6e:	3303      	adds	r3, #3
   1bb70:	3a30      	subs	r2, #48	; 0x30
   1bb72:	60e3      	str	r3, [r4, #12]
   1bb74:	4620      	mov	r0, r4
   1bb76:	b2d6      	uxtb	r6, r2
   1bb78:	f7ff f924 	bl	1adc4 <d_type>
   1bb7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1bb7e:	e778      	b.n	1ba72 <d_unqualified_name+0x202>
   1bb80:	789a      	ldrb	r2, [r3, #2]
   1bb82:	2500      	movs	r5, #0
   1bb84:	463b      	mov	r3, r7
   1bb86:	e6e6      	b.n	1b956 <d_unqualified_name+0xe6>
   1bb88:	68e3      	ldr	r3, [r4, #12]
   1bb8a:	781a      	ldrb	r2, [r3, #0]
   1bb8c:	2500      	movs	r5, #0
   1bb8e:	e6e2      	b.n	1b956 <d_unqualified_name+0xe6>
   1bb90:	3303      	adds	r3, #3
   1bb92:	2000      	movs	r0, #0
   1bb94:	e700      	b.n	1b998 <d_unqualified_name+0x128>
   1bb96:	785a      	ldrb	r2, [r3, #1]
   1bb98:	2500      	movs	r5, #0
   1bb9a:	460b      	mov	r3, r1
   1bb9c:	e6db      	b.n	1b956 <d_unqualified_name+0xe6>
   1bb9e:	781a      	ldrb	r2, [r3, #0]
   1bba0:	460d      	mov	r5, r1
   1bba2:	e6d8      	b.n	1b956 <d_unqualified_name+0xe6>
   1bba4:	781a      	ldrb	r2, [r3, #0]
   1bba6:	2500      	movs	r5, #0
   1bba8:	e6d5      	b.n	1b956 <d_unqualified_name+0xe6>
   1bbaa:	3302      	adds	r3, #2
   1bbac:	2000      	movs	r0, #0
   1bbae:	e7c0      	b.n	1bb32 <d_unqualified_name+0x2c2>

0001bbb0 <d_expr_primary>:
   1bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbb2:	68c2      	ldr	r2, [r0, #12]
   1bbb4:	7813      	ldrb	r3, [r2, #0]
   1bbb6:	2b4c      	cmp	r3, #76	; 0x4c
   1bbb8:	d132      	bne.n	1bc20 <d_expr_primary+0x70>
   1bbba:	1c53      	adds	r3, r2, #1
   1bbbc:	60c3      	str	r3, [r0, #12]
   1bbbe:	7851      	ldrb	r1, [r2, #1]
   1bbc0:	295f      	cmp	r1, #95	; 0x5f
   1bbc2:	4604      	mov	r4, r0
   1bbc4:	d051      	beq.n	1bc6a <d_expr_primary+0xba>
   1bbc6:	295a      	cmp	r1, #90	; 0x5a
   1bbc8:	d113      	bne.n	1bbf2 <d_expr_primary+0x42>
   1bbca:	1c5a      	adds	r2, r3, #1
   1bbcc:	60e2      	str	r2, [r4, #12]
   1bbce:	785b      	ldrb	r3, [r3, #1]
   1bbd0:	2b47      	cmp	r3, #71	; 0x47
   1bbd2:	d043      	beq.n	1bc5c <d_expr_primary+0xac>
   1bbd4:	2b54      	cmp	r3, #84	; 0x54
   1bbd6:	d041      	beq.n	1bc5c <d_expr_primary+0xac>
   1bbd8:	2100      	movs	r1, #0
   1bbda:	4620      	mov	r0, r4
   1bbdc:	f001 f84e 	bl	1cc7c <d_encoding.part.0>
   1bbe0:	68e3      	ldr	r3, [r4, #12]
   1bbe2:	781a      	ldrb	r2, [r3, #0]
   1bbe4:	4606      	mov	r6, r0
   1bbe6:	2a45      	cmp	r2, #69	; 0x45
   1bbe8:	d11a      	bne.n	1bc20 <d_expr_primary+0x70>
   1bbea:	3301      	adds	r3, #1
   1bbec:	60e3      	str	r3, [r4, #12]
   1bbee:	4630      	mov	r0, r6
   1bbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbf2:	f7ff f8e7 	bl	1adc4 <d_type>
   1bbf6:	4606      	mov	r6, r0
   1bbf8:	b190      	cbz	r0, 1bc20 <d_expr_primary+0x70>
   1bbfa:	7803      	ldrb	r3, [r0, #0]
   1bbfc:	2b27      	cmp	r3, #39	; 0x27
   1bbfe:	d012      	beq.n	1bc26 <d_expr_primary+0x76>
   1bc00:	68e2      	ldr	r2, [r4, #12]
   1bc02:	7815      	ldrb	r5, [r2, #0]
   1bc04:	2d6e      	cmp	r5, #110	; 0x6e
   1bc06:	d023      	beq.n	1bc50 <d_expr_primary+0xa0>
   1bc08:	213d      	movs	r1, #61	; 0x3d
   1bc0a:	2d45      	cmp	r5, #69	; 0x45
   1bc0c:	d059      	beq.n	1bcc2 <d_expr_primary+0x112>
   1bc0e:	4613      	mov	r3, r2
   1bc10:	e003      	b.n	1bc1a <d_expr_primary+0x6a>
   1bc12:	60e3      	str	r3, [r4, #12]
   1bc14:	781d      	ldrb	r5, [r3, #0]
   1bc16:	2d45      	cmp	r5, #69	; 0x45
   1bc18:	d02f      	beq.n	1bc7a <d_expr_primary+0xca>
   1bc1a:	3301      	adds	r3, #1
   1bc1c:	2d00      	cmp	r5, #0
   1bc1e:	d1f8      	bne.n	1bc12 <d_expr_primary+0x62>
   1bc20:	2600      	movs	r6, #0
   1bc22:	4630      	mov	r0, r6
   1bc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc26:	68c3      	ldr	r3, [r0, #12]
   1bc28:	7c1a      	ldrb	r2, [r3, #16]
   1bc2a:	b11a      	cbz	r2, 1bc34 <d_expr_primary+0x84>
   1bc2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bc2e:	6859      	ldr	r1, [r3, #4]
   1bc30:	1a52      	subs	r2, r2, r1
   1bc32:	62e2      	str	r2, [r4, #44]	; 0x2c
   1bc34:	4925      	ldr	r1, [pc, #148]	; (1bccc <d_expr_primary+0x11c>)
   1bc36:	6818      	ldr	r0, [r3, #0]
   1bc38:	f009 f896 	bl	24d68 <strcmp>
   1bc3c:	2800      	cmp	r0, #0
   1bc3e:	d1df      	bne.n	1bc00 <d_expr_primary+0x50>
   1bc40:	68e2      	ldr	r2, [r4, #12]
   1bc42:	7815      	ldrb	r5, [r2, #0]
   1bc44:	2d45      	cmp	r5, #69	; 0x45
   1bc46:	d03e      	beq.n	1bcc6 <d_expr_primary+0x116>
   1bc48:	2d6e      	cmp	r5, #110	; 0x6e
   1bc4a:	d001      	beq.n	1bc50 <d_expr_primary+0xa0>
   1bc4c:	213d      	movs	r1, #61	; 0x3d
   1bc4e:	e7de      	b.n	1bc0e <d_expr_primary+0x5e>
   1bc50:	1c53      	adds	r3, r2, #1
   1bc52:	60e3      	str	r3, [r4, #12]
   1bc54:	7855      	ldrb	r5, [r2, #1]
   1bc56:	213e      	movs	r1, #62	; 0x3e
   1bc58:	461a      	mov	r2, r3
   1bc5a:	e7d6      	b.n	1bc0a <d_expr_primary+0x5a>
   1bc5c:	4620      	mov	r0, r4
   1bc5e:	f000 fc85 	bl	1c56c <d_special_name>
   1bc62:	68e3      	ldr	r3, [r4, #12]
   1bc64:	4606      	mov	r6, r0
   1bc66:	781a      	ldrb	r2, [r3, #0]
   1bc68:	e7bd      	b.n	1bbe6 <d_expr_primary+0x36>
   1bc6a:	1c93      	adds	r3, r2, #2
   1bc6c:	60c3      	str	r3, [r0, #12]
   1bc6e:	7892      	ldrb	r2, [r2, #2]
   1bc70:	2a5a      	cmp	r2, #90	; 0x5a
   1bc72:	bf18      	it	ne
   1bc74:	2600      	movne	r6, #0
   1bc76:	d1b6      	bne.n	1bbe6 <d_expr_primary+0x36>
   1bc78:	e7a7      	b.n	1bbca <d_expr_primary+0x1a>
   1bc7a:	1a9d      	subs	r5, r3, r2
   1bc7c:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1bc80:	4298      	cmp	r0, r3
   1bc82:	da1c      	bge.n	1bcbe <d_expr_primary+0x10e>
   1bc84:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1bc88:	eb00 0780 	add.w	r7, r0, r0, lsl #2
   1bc8c:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
   1bc90:	ea4f 0c87 	mov.w	ip, r7, lsl #2
   1bc94:	2700      	movs	r7, #0
   1bc96:	3001      	adds	r0, #1
   1bc98:	42bd      	cmp	r5, r7
   1bc9a:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1bc9e:	6160      	str	r0, [r4, #20]
   1bca0:	dd0d      	ble.n	1bcbe <d_expr_primary+0x10e>
   1bca2:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1bca6:	f80e 700c 	strb.w	r7, [lr, ip]
   1bcaa:	e9c3 2503 	strd	r2, r5, [r3, #12]
   1bcae:	4632      	mov	r2, r6
   1bcb0:	4620      	mov	r0, r4
   1bcb2:	f7fe fc35 	bl	1a520 <d_make_comp>
   1bcb6:	68e3      	ldr	r3, [r4, #12]
   1bcb8:	4606      	mov	r6, r0
   1bcba:	781a      	ldrb	r2, [r3, #0]
   1bcbc:	e793      	b.n	1bbe6 <d_expr_primary+0x36>
   1bcbe:	2300      	movs	r3, #0
   1bcc0:	e7f5      	b.n	1bcae <d_expr_primary+0xfe>
   1bcc2:	2500      	movs	r5, #0
   1bcc4:	e7da      	b.n	1bc7c <d_expr_primary+0xcc>
   1bcc6:	3201      	adds	r2, #1
   1bcc8:	60e2      	str	r2, [r4, #12]
   1bcca:	e7aa      	b.n	1bc22 <d_expr_primary+0x72>
   1bccc:	20004b10 	.word	0x20004b10

0001bcd0 <d_template_arg>:
   1bcd0:	b538      	push	{r3, r4, r5, lr}
   1bcd2:	68c2      	ldr	r2, [r0, #12]
   1bcd4:	7813      	ldrb	r3, [r2, #0]
   1bcd6:	2b4c      	cmp	r3, #76	; 0x4c
   1bcd8:	d020      	beq.n	1bd1c <d_template_arg+0x4c>
   1bcda:	4604      	mov	r4, r0
   1bcdc:	d808      	bhi.n	1bcf0 <d_template_arg+0x20>
   1bcde:	3b49      	subs	r3, #73	; 0x49
   1bce0:	2b01      	cmp	r3, #1
   1bce2:	d816      	bhi.n	1bd12 <d_template_arg+0x42>
   1bce4:	3201      	adds	r2, #1
   1bce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bcea:	60c2      	str	r2, [r0, #12]
   1bcec:	f000 b81c 	b.w	1bd28 <d_template_args_1>
   1bcf0:	2b58      	cmp	r3, #88	; 0x58
   1bcf2:	d10e      	bne.n	1bd12 <d_template_arg+0x42>
   1bcf4:	3201      	adds	r2, #1
   1bcf6:	2301      	movs	r3, #1
   1bcf8:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1bcfa:	60c2      	str	r2, [r0, #12]
   1bcfc:	6303      	str	r3, [r0, #48]	; 0x30
   1bcfe:	f000 f8db 	bl	1beb8 <d_expression_1>
   1bd02:	68e3      	ldr	r3, [r4, #12]
   1bd04:	6325      	str	r5, [r4, #48]	; 0x30
   1bd06:	781a      	ldrb	r2, [r3, #0]
   1bd08:	2a45      	cmp	r2, #69	; 0x45
   1bd0a:	d10b      	bne.n	1bd24 <d_template_arg+0x54>
   1bd0c:	3301      	adds	r3, #1
   1bd0e:	60e3      	str	r3, [r4, #12]
   1bd10:	bd38      	pop	{r3, r4, r5, pc}
   1bd12:	4620      	mov	r0, r4
   1bd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bd18:	f7ff b854 	b.w	1adc4 <d_type>
   1bd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bd20:	f7ff bf46 	b.w	1bbb0 <d_expr_primary>
   1bd24:	2000      	movs	r0, #0
   1bd26:	bd38      	pop	{r3, r4, r5, pc}

0001bd28 <d_template_args_1>:
   1bd28:	b570      	push	{r4, r5, r6, lr}
   1bd2a:	68c3      	ldr	r3, [r0, #12]
   1bd2c:	6a86      	ldr	r6, [r0, #40]	; 0x28
   1bd2e:	781a      	ldrb	r2, [r3, #0]
   1bd30:	2a45      	cmp	r2, #69	; 0x45
   1bd32:	b082      	sub	sp, #8
   1bd34:	4604      	mov	r4, r0
   1bd36:	d01f      	beq.n	1bd78 <d_template_args_1+0x50>
   1bd38:	2300      	movs	r3, #0
   1bd3a:	9301      	str	r3, [sp, #4]
   1bd3c:	ad01      	add	r5, sp, #4
   1bd3e:	e009      	b.n	1bd54 <d_template_args_1+0x2c>
   1bd40:	f7fe fbee 	bl	1a520 <d_make_comp>
   1bd44:	6028      	str	r0, [r5, #0]
   1bd46:	f100 0510 	add.w	r5, r0, #16
   1bd4a:	b160      	cbz	r0, 1bd66 <d_template_args_1+0x3e>
   1bd4c:	68e3      	ldr	r3, [r4, #12]
   1bd4e:	781a      	ldrb	r2, [r3, #0]
   1bd50:	2a45      	cmp	r2, #69	; 0x45
   1bd52:	d00b      	beq.n	1bd6c <d_template_args_1+0x44>
   1bd54:	4620      	mov	r0, r4
   1bd56:	f7ff ffbb 	bl	1bcd0 <d_template_arg>
   1bd5a:	4602      	mov	r2, r0
   1bd5c:	2300      	movs	r3, #0
   1bd5e:	212f      	movs	r1, #47	; 0x2f
   1bd60:	4620      	mov	r0, r4
   1bd62:	2a00      	cmp	r2, #0
   1bd64:	d1ec      	bne.n	1bd40 <d_template_args_1+0x18>
   1bd66:	2000      	movs	r0, #0
   1bd68:	b002      	add	sp, #8
   1bd6a:	bd70      	pop	{r4, r5, r6, pc}
   1bd6c:	9801      	ldr	r0, [sp, #4]
   1bd6e:	62a6      	str	r6, [r4, #40]	; 0x28
   1bd70:	3301      	adds	r3, #1
   1bd72:	60e3      	str	r3, [r4, #12]
   1bd74:	b002      	add	sp, #8
   1bd76:	bd70      	pop	{r4, r5, r6, pc}
   1bd78:	1c5a      	adds	r2, r3, #1
   1bd7a:	2300      	movs	r3, #0
   1bd7c:	60c2      	str	r2, [r0, #12]
   1bd7e:	212f      	movs	r1, #47	; 0x2f
   1bd80:	461a      	mov	r2, r3
   1bd82:	b002      	add	sp, #8
   1bd84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bd88:	f7fe bbca 	b.w	1a520 <d_make_comp>

0001bd8c <d_prefix>:
   1bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd8e:	68c2      	ldr	r2, [r0, #12]
   1bd90:	7814      	ldrb	r4, [r2, #0]
   1bd92:	b394      	cbz	r4, 1bdfa <d_prefix+0x6e>
   1bd94:	4606      	mov	r6, r0
   1bd96:	460f      	mov	r7, r1
   1bd98:	2500      	movs	r5, #0
   1bd9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1bd9e:	2b4a      	cmp	r3, #74	; 0x4a
   1bda0:	d82b      	bhi.n	1bdfa <d_prefix+0x6e>
   1bda2:	e8df f003 	tbb	[pc, r3]
   1bda6:	2d2d      	.short	0x2d2d
   1bda8:	2d2d2d2d 	.word	0x2d2d2d2d
   1bdac:	2d2d2d2d 	.word	0x2d2d2d2d
   1bdb0:	2a2a2a2a 	.word	0x2a2a2a2a
   1bdb4:	2a2a2a2a 	.word	0x2a2a2a2a
   1bdb8:	2b772d2a 	.word	0x2b772d2a
   1bdbc:	682a2a2a 	.word	0x682a2a2a
   1bdc0:	5f2d2a2a 	.word	0x5f2d2a2a
   1bdc4:	2a2a2a2a 	.word	0x2a2a2a2a
   1bdc8:	2d4b532a 	.word	0x2d4b532a
   1bdcc:	2a2a2a2a 	.word	0x2a2a2a2a
   1bdd0:	2a2a2a2a 	.word	0x2a2a2a2a
   1bdd4:	2d2a2a2a 	.word	0x2d2a2a2a
   1bdd8:	2d2d2d2d 	.word	0x2d2d2d2d
   1bddc:	2d2d2d2d 	.word	0x2d2d2d2d
   1bde0:	2d2d2d2d 	.word	0x2d2d2d2d
   1bde4:	2d2d2d2d 	.word	0x2d2d2d2d
   1bde8:	2d2d2d2d 	.word	0x2d2d2d2d
   1bdec:	2d2d2d2d 	.word	0x2d2d2d2d
   1bdf0:	2d          	.byte	0x2d
   1bdf1:	00          	.byte	0x00
   1bdf2:	68f2      	ldr	r2, [r6, #12]
   1bdf4:	7814      	ldrb	r4, [r2, #0]
   1bdf6:	2c00      	cmp	r4, #0
   1bdf8:	d1cf      	bne.n	1bd9a <d_prefix+0xe>
   1bdfa:	2500      	movs	r5, #0
   1bdfc:	4628      	mov	r0, r5
   1bdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be00:	4630      	mov	r0, r6
   1be02:	f7ff fd35 	bl	1b870 <d_unqualified_name>
   1be06:	4603      	mov	r3, r0
   1be08:	2d00      	cmp	r5, #0
   1be0a:	d14e      	bne.n	1beaa <d_prefix+0x11e>
   1be0c:	4605      	mov	r5, r0
   1be0e:	2c53      	cmp	r4, #83	; 0x53
   1be10:	d0ef      	beq.n	1bdf2 <d_prefix+0x66>
   1be12:	68f2      	ldr	r2, [r6, #12]
   1be14:	7814      	ldrb	r4, [r2, #0]
   1be16:	2c45      	cmp	r4, #69	; 0x45
   1be18:	d0f0      	beq.n	1bdfc <d_prefix+0x70>
   1be1a:	2f00      	cmp	r7, #0
   1be1c:	d0eb      	beq.n	1bdf6 <d_prefix+0x6a>
   1be1e:	2d00      	cmp	r5, #0
   1be20:	d0eb      	beq.n	1bdfa <d_prefix+0x6e>
   1be22:	e9d6 3108 	ldrd	r3, r1, [r6, #32]
   1be26:	428b      	cmp	r3, r1
   1be28:	dae7      	bge.n	1bdfa <d_prefix+0x6e>
   1be2a:	69f1      	ldr	r1, [r6, #28]
   1be2c:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1be30:	3301      	adds	r3, #1
   1be32:	6233      	str	r3, [r6, #32]
   1be34:	7814      	ldrb	r4, [r2, #0]
   1be36:	2c00      	cmp	r4, #0
   1be38:	d1af      	bne.n	1bd9a <d_prefix+0xe>
   1be3a:	e7de      	b.n	1bdfa <d_prefix+0x6e>
   1be3c:	4630      	mov	r0, r6
   1be3e:	f7fe fe1b 	bl	1aa78 <d_template_param>
   1be42:	4603      	mov	r3, r0
   1be44:	2d00      	cmp	r5, #0
   1be46:	d130      	bne.n	1beaa <d_prefix+0x11e>
   1be48:	461d      	mov	r5, r3
   1be4a:	e7e2      	b.n	1be12 <d_prefix+0x86>
   1be4c:	2101      	movs	r1, #1
   1be4e:	4630      	mov	r0, r6
   1be50:	f7fe feee 	bl	1ac30 <d_substitution>
   1be54:	4603      	mov	r3, r0
   1be56:	bb45      	cbnz	r5, 1beaa <d_prefix+0x11e>
   1be58:	68f2      	ldr	r2, [r6, #12]
   1be5a:	7814      	ldrb	r4, [r2, #0]
   1be5c:	461d      	mov	r5, r3
   1be5e:	2c00      	cmp	r4, #0
   1be60:	d19b      	bne.n	1bd9a <d_prefix+0xe>
   1be62:	e7ca      	b.n	1bdfa <d_prefix+0x6e>
   1be64:	2d00      	cmp	r5, #0
   1be66:	d0c8      	beq.n	1bdfa <d_prefix+0x6e>
   1be68:	1c53      	adds	r3, r2, #1
   1be6a:	60f3      	str	r3, [r6, #12]
   1be6c:	7854      	ldrb	r4, [r2, #1]
   1be6e:	461a      	mov	r2, r3
   1be70:	2c00      	cmp	r4, #0
   1be72:	d192      	bne.n	1bd9a <d_prefix+0xe>
   1be74:	e7c1      	b.n	1bdfa <d_prefix+0x6e>
   1be76:	2d00      	cmp	r5, #0
   1be78:	d0bf      	beq.n	1bdfa <d_prefix+0x6e>
   1be7a:	3201      	adds	r2, #1
   1be7c:	60f2      	str	r2, [r6, #12]
   1be7e:	4630      	mov	r0, r6
   1be80:	f7ff ff52 	bl	1bd28 <d_template_args_1>
   1be84:	2104      	movs	r1, #4
   1be86:	4603      	mov	r3, r0
   1be88:	462a      	mov	r2, r5
   1be8a:	4630      	mov	r0, r6
   1be8c:	f7fe fb48 	bl	1a520 <d_make_comp>
   1be90:	4605      	mov	r5, r0
   1be92:	e7bc      	b.n	1be0e <d_prefix+0x82>
   1be94:	7853      	ldrb	r3, [r2, #1]
   1be96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1be9a:	2b54      	cmp	r3, #84	; 0x54
   1be9c:	4630      	mov	r0, r6
   1be9e:	d006      	beq.n	1beae <d_prefix+0x122>
   1bea0:	f7ff fce6 	bl	1b870 <d_unqualified_name>
   1bea4:	4603      	mov	r3, r0
   1bea6:	2d00      	cmp	r5, #0
   1bea8:	d0ce      	beq.n	1be48 <d_prefix+0xbc>
   1beaa:	2101      	movs	r1, #1
   1beac:	e7ec      	b.n	1be88 <d_prefix+0xfc>
   1beae:	f7fe ff89 	bl	1adc4 <d_type>
   1beb2:	4603      	mov	r3, r0
   1beb4:	e7c6      	b.n	1be44 <d_prefix+0xb8>
   1beb6:	bf00      	nop

0001beb8 <d_expression_1>:
   1beb8:	68c2      	ldr	r2, [r0, #12]
   1beba:	7813      	ldrb	r3, [r2, #0]
   1bebc:	2b4c      	cmp	r3, #76	; 0x4c
   1bebe:	f000 8089 	beq.w	1bfd4 <d_expression_1+0x11c>
   1bec2:	2b54      	cmp	r3, #84	; 0x54
   1bec4:	f000 8088 	beq.w	1bfd8 <d_expression_1+0x120>
   1bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beca:	2b73      	cmp	r3, #115	; 0x73
   1becc:	b083      	sub	sp, #12
   1bece:	4604      	mov	r4, r0
   1bed0:	d05a      	beq.n	1bf88 <d_expression_1+0xd0>
   1bed2:	2b66      	cmp	r3, #102	; 0x66
   1bed4:	d028      	beq.n	1bf28 <d_expression_1+0x70>
   1bed6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1beda:	2909      	cmp	r1, #9
   1bedc:	d80c      	bhi.n	1bef8 <d_expression_1+0x40>
   1bede:	4620      	mov	r0, r4
   1bee0:	f7ff fcc6 	bl	1b870 <d_unqualified_name>
   1bee4:	4605      	mov	r5, r0
   1bee6:	2800      	cmp	r0, #0
   1bee8:	d070      	beq.n	1bfcc <d_expression_1+0x114>
   1beea:	68e3      	ldr	r3, [r4, #12]
   1beec:	781a      	ldrb	r2, [r3, #0]
   1beee:	2a49      	cmp	r2, #73	; 0x49
   1bef0:	d074      	beq.n	1bfdc <d_expression_1+0x124>
   1bef2:	4628      	mov	r0, r5
   1bef4:	b003      	add	sp, #12
   1bef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bef8:	2b6f      	cmp	r3, #111	; 0x6f
   1befa:	d061      	beq.n	1bfc0 <d_expression_1+0x108>
   1befc:	2b69      	cmp	r3, #105	; 0x69
   1befe:	d17b      	bne.n	1bff8 <d_expression_1+0x140>
   1bf00:	7853      	ldrb	r3, [r2, #1]
   1bf02:	2b6c      	cmp	r3, #108	; 0x6c
   1bf04:	d147      	bne.n	1bf96 <d_expression_1+0xde>
   1bf06:	3202      	adds	r2, #2
   1bf08:	60e2      	str	r2, [r4, #12]
   1bf0a:	2500      	movs	r5, #0
   1bf0c:	7811      	ldrb	r1, [r2, #0]
   1bf0e:	2900      	cmp	r1, #0
   1bf10:	d05c      	beq.n	1bfcc <d_expression_1+0x114>
   1bf12:	7853      	ldrb	r3, [r2, #1]
   1bf14:	2b00      	cmp	r3, #0
   1bf16:	d059      	beq.n	1bfcc <d_expression_1+0x114>
   1bf18:	2145      	movs	r1, #69	; 0x45
   1bf1a:	4620      	mov	r0, r4
   1bf1c:	f000 fa42 	bl	1c3a4 <d_exprlist>
   1bf20:	462a      	mov	r2, r5
   1bf22:	4603      	mov	r3, r0
   1bf24:	2131      	movs	r1, #49	; 0x31
   1bf26:	e061      	b.n	1bfec <d_expression_1+0x134>
   1bf28:	7853      	ldrb	r3, [r2, #1]
   1bf2a:	2b70      	cmp	r3, #112	; 0x70
   1bf2c:	d133      	bne.n	1bf96 <d_expression_1+0xde>
   1bf2e:	1c93      	adds	r3, r2, #2
   1bf30:	60c3      	str	r3, [r0, #12]
   1bf32:	7893      	ldrb	r3, [r2, #2]
   1bf34:	2b54      	cmp	r3, #84	; 0x54
   1bf36:	f000 8148 	beq.w	1c1ca <d_expression_1+0x312>
   1bf3a:	2b5f      	cmp	r3, #95	; 0x5f
   1bf3c:	f000 8086 	beq.w	1c04c <d_expression_1+0x194>
   1bf40:	2b6e      	cmp	r3, #110	; 0x6e
   1bf42:	d043      	beq.n	1bfcc <d_expression_1+0x114>
   1bf44:	f7fe fb64 	bl	1a610 <d_number>
   1bf48:	1c41      	adds	r1, r0, #1
   1bf4a:	d43f      	bmi.n	1bfcc <d_expression_1+0x114>
   1bf4c:	68e3      	ldr	r3, [r4, #12]
   1bf4e:	781a      	ldrb	r2, [r3, #0]
   1bf50:	2a5f      	cmp	r2, #95	; 0x5f
   1bf52:	d13b      	bne.n	1bfcc <d_expression_1+0x114>
   1bf54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1bf58:	3301      	adds	r3, #1
   1bf5a:	4291      	cmp	r1, r2
   1bf5c:	60e3      	str	r3, [r4, #12]
   1bf5e:	d035      	beq.n	1bfcc <d_expression_1+0x114>
   1bf60:	3002      	adds	r0, #2
   1bf62:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1bf66:	4293      	cmp	r3, r2
   1bf68:	da30      	bge.n	1bfcc <d_expression_1+0x114>
   1bf6a:	6922      	ldr	r2, [r4, #16]
   1bf6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1bf70:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1bf74:	3301      	adds	r3, #1
   1bf76:	2600      	movs	r6, #0
   1bf78:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1bf7c:	6163      	str	r3, [r4, #20]
   1bf7e:	2306      	movs	r3, #6
   1bf80:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1bf84:	60e8      	str	r0, [r5, #12]
   1bf86:	e7b4      	b.n	1bef2 <d_expression_1+0x3a>
   1bf88:	7853      	ldrb	r3, [r2, #1]
   1bf8a:	2b72      	cmp	r3, #114	; 0x72
   1bf8c:	f000 80f8 	beq.w	1c180 <d_expression_1+0x2c8>
   1bf90:	2b70      	cmp	r3, #112	; 0x70
   1bf92:	f000 8112 	beq.w	1c1ba <d_expression_1+0x302>
   1bf96:	4620      	mov	r0, r4
   1bf98:	f7ff fbe6 	bl	1b768 <d_operator_name>
   1bf9c:	4605      	mov	r5, r0
   1bf9e:	b1a8      	cbz	r0, 1bfcc <d_expression_1+0x114>
   1bfa0:	7803      	ldrb	r3, [r0, #0]
   1bfa2:	2b32      	cmp	r3, #50	; 0x32
   1bfa4:	d035      	beq.n	1c012 <d_expression_1+0x15a>
   1bfa6:	2b34      	cmp	r3, #52	; 0x34
   1bfa8:	f000 819b 	beq.w	1c2e2 <d_expression_1+0x42a>
   1bfac:	d80e      	bhi.n	1bfcc <d_expression_1+0x114>
   1bfae:	2b33      	cmp	r3, #51	; 0x33
   1bfb0:	d10c      	bne.n	1bfcc <d_expression_1+0x114>
   1bfb2:	68c3      	ldr	r3, [r0, #12]
   1bfb4:	2b03      	cmp	r3, #3
   1bfb6:	d809      	bhi.n	1bfcc <d_expression_1+0x114>
   1bfb8:	e8df f003 	tbb	[pc, r3]
   1bfbc:	0808ce6d 	.word	0x0808ce6d
   1bfc0:	7853      	ldrb	r3, [r2, #1]
   1bfc2:	2b6e      	cmp	r3, #110	; 0x6e
   1bfc4:	d1e7      	bne.n	1bf96 <d_expression_1+0xde>
   1bfc6:	3202      	adds	r2, #2
   1bfc8:	60c2      	str	r2, [r0, #12]
   1bfca:	e788      	b.n	1bede <d_expression_1+0x26>
   1bfcc:	2500      	movs	r5, #0
   1bfce:	4628      	mov	r0, r5
   1bfd0:	b003      	add	sp, #12
   1bfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bfd4:	f7ff bdec 	b.w	1bbb0 <d_expr_primary>
   1bfd8:	f7fe bd4e 	b.w	1aa78 <d_template_param>
   1bfdc:	3301      	adds	r3, #1
   1bfde:	60e3      	str	r3, [r4, #12]
   1bfe0:	4620      	mov	r0, r4
   1bfe2:	f7ff fea1 	bl	1bd28 <d_template_args_1>
   1bfe6:	462a      	mov	r2, r5
   1bfe8:	4603      	mov	r3, r0
   1bfea:	2104      	movs	r1, #4
   1bfec:	4620      	mov	r0, r4
   1bfee:	b003      	add	sp, #12
   1bff0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1bff4:	f7fe ba94 	b.w	1a520 <d_make_comp>
   1bff8:	2b74      	cmp	r3, #116	; 0x74
   1bffa:	f040 80b2 	bne.w	1c162 <d_expression_1+0x2aa>
   1bffe:	7853      	ldrb	r3, [r2, #1]
   1c000:	2b6c      	cmp	r3, #108	; 0x6c
   1c002:	d1c8      	bne.n	1bf96 <d_expression_1+0xde>
   1c004:	3202      	adds	r2, #2
   1c006:	60e2      	str	r2, [r4, #12]
   1c008:	f7fe fedc 	bl	1adc4 <d_type>
   1c00c:	68e2      	ldr	r2, [r4, #12]
   1c00e:	4605      	mov	r5, r0
   1c010:	e77c      	b.n	1bf0c <d_expression_1+0x54>
   1c012:	68c1      	ldr	r1, [r0, #12]
   1c014:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c016:	688a      	ldr	r2, [r1, #8]
   1c018:	680e      	ldr	r6, [r1, #0]
   1c01a:	3a02      	subs	r2, #2
   1c01c:	4413      	add	r3, r2
   1c01e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c020:	7833      	ldrb	r3, [r6, #0]
   1c022:	2b73      	cmp	r3, #115	; 0x73
   1c024:	d10b      	bne.n	1c03e <d_expression_1+0x186>
   1c026:	7872      	ldrb	r2, [r6, #1]
   1c028:	2a74      	cmp	r2, #116	; 0x74
   1c02a:	d108      	bne.n	1c03e <d_expression_1+0x186>
   1c02c:	78b2      	ldrb	r2, [r6, #2]
   1c02e:	b932      	cbnz	r2, 1c03e <d_expression_1+0x186>
   1c030:	4620      	mov	r0, r4
   1c032:	f7fe fec7 	bl	1adc4 <d_type>
   1c036:	462a      	mov	r2, r5
   1c038:	4603      	mov	r3, r0
   1c03a:	2137      	movs	r1, #55	; 0x37
   1c03c:	e7d6      	b.n	1bfec <d_expression_1+0x134>
   1c03e:	68cf      	ldr	r7, [r1, #12]
   1c040:	2f03      	cmp	r7, #3
   1c042:	d8c3      	bhi.n	1bfcc <d_expression_1+0x114>
   1c044:	e8df f007 	tbb	[pc, r7]
   1c048:	2b540627 	.word	0x2b540627
   1c04c:	3203      	adds	r2, #3
   1c04e:	60c2      	str	r2, [r0, #12]
   1c050:	2001      	movs	r0, #1
   1c052:	e786      	b.n	1bf62 <d_expression_1+0xaa>
   1c054:	7832      	ldrb	r2, [r6, #0]
   1c056:	2a70      	cmp	r2, #112	; 0x70
   1c058:	f000 80c0 	beq.w	1c1dc <d_expression_1+0x324>
   1c05c:	2a6d      	cmp	r2, #109	; 0x6d
   1c05e:	f000 80bd 	beq.w	1c1dc <d_expression_1+0x324>
   1c062:	2700      	movs	r7, #0
   1c064:	2b73      	cmp	r3, #115	; 0x73
   1c066:	f040 80b4 	bne.w	1c1d2 <d_expression_1+0x31a>
   1c06a:	7873      	ldrb	r3, [r6, #1]
   1c06c:	2b50      	cmp	r3, #80	; 0x50
   1c06e:	f040 80b0 	bne.w	1c1d2 <d_expression_1+0x31a>
   1c072:	78b3      	ldrb	r3, [r6, #2]
   1c074:	2b00      	cmp	r3, #0
   1c076:	f040 80ac 	bne.w	1c1d2 <d_expression_1+0x31a>
   1c07a:	4620      	mov	r0, r4
   1c07c:	f7ff fe54 	bl	1bd28 <d_template_args_1>
   1c080:	4603      	mov	r3, r0
   1c082:	b12f      	cbz	r7, 1c090 <d_expression_1+0x1d8>
   1c084:	461a      	mov	r2, r3
   1c086:	2139      	movs	r1, #57	; 0x39
   1c088:	4620      	mov	r0, r4
   1c08a:	f7fe fa49 	bl	1a520 <d_make_comp>
   1c08e:	4603      	mov	r3, r0
   1c090:	462a      	mov	r2, r5
   1c092:	2137      	movs	r1, #55	; 0x37
   1c094:	e7aa      	b.n	1bfec <d_expression_1+0x134>
   1c096:	2300      	movs	r3, #0
   1c098:	462a      	mov	r2, r5
   1c09a:	2136      	movs	r1, #54	; 0x36
   1c09c:	e7a6      	b.n	1bfec <d_expression_1+0x134>
   1c09e:	2b71      	cmp	r3, #113	; 0x71
   1c0a0:	f040 80c4 	bne.w	1c22c <d_expression_1+0x374>
   1c0a4:	7872      	ldrb	r2, [r6, #1]
   1c0a6:	2a75      	cmp	r2, #117	; 0x75
   1c0a8:	f040 80c0 	bne.w	1c22c <d_expression_1+0x374>
   1c0ac:	78b2      	ldrb	r2, [r6, #2]
   1c0ae:	2a00      	cmp	r2, #0
   1c0b0:	f040 80bc 	bne.w	1c22c <d_expression_1+0x374>
   1c0b4:	4620      	mov	r0, r4
   1c0b6:	f7ff feff 	bl	1beb8 <d_expression_1>
   1c0ba:	4606      	mov	r6, r0
   1c0bc:	4620      	mov	r0, r4
   1c0be:	f7ff fefb 	bl	1beb8 <d_expression_1>
   1c0c2:	4607      	mov	r7, r0
   1c0c4:	4620      	mov	r0, r4
   1c0c6:	f7ff fef7 	bl	1beb8 <d_expression_1>
   1c0ca:	4603      	mov	r3, r0
   1c0cc:	2800      	cmp	r0, #0
   1c0ce:	f43f af7d 	beq.w	1bfcc <d_expression_1+0x114>
   1c0d2:	463a      	mov	r2, r7
   1c0d4:	213c      	movs	r1, #60	; 0x3c
   1c0d6:	4620      	mov	r0, r4
   1c0d8:	f7fe fa22 	bl	1a520 <d_make_comp>
   1c0dc:	4632      	mov	r2, r6
   1c0de:	4603      	mov	r3, r0
   1c0e0:	213b      	movs	r1, #59	; 0x3b
   1c0e2:	4620      	mov	r0, r4
   1c0e4:	f7fe fa1c 	bl	1a520 <d_make_comp>
   1c0e8:	462a      	mov	r2, r5
   1c0ea:	4603      	mov	r3, r0
   1c0ec:	213a      	movs	r1, #58	; 0x3a
   1c0ee:	e77d      	b.n	1bfec <d_expression_1+0x134>
   1c0f0:	68eb      	ldr	r3, [r5, #12]
   1c0f2:	681b      	ldr	r3, [r3, #0]
   1c0f4:	785a      	ldrb	r2, [r3, #1]
   1c0f6:	2a63      	cmp	r2, #99	; 0x63
   1c0f8:	f000 810e 	beq.w	1c318 <d_expression_1+0x460>
   1c0fc:	7833      	ldrb	r3, [r6, #0]
   1c0fe:	2b66      	cmp	r3, #102	; 0x66
   1c100:	f000 8133 	beq.w	1c36a <d_expression_1+0x4b2>
   1c104:	2b64      	cmp	r3, #100	; 0x64
   1c106:	f040 8127 	bne.w	1c358 <d_expression_1+0x4a0>
   1c10a:	7873      	ldrb	r3, [r6, #1]
   1c10c:	2b69      	cmp	r3, #105	; 0x69
   1c10e:	f040 8123 	bne.w	1c358 <d_expression_1+0x4a0>
   1c112:	78b3      	ldrb	r3, [r6, #2]
   1c114:	2b00      	cmp	r3, #0
   1c116:	f040 811f 	bne.w	1c358 <d_expression_1+0x4a0>
   1c11a:	4620      	mov	r0, r4
   1c11c:	f7ff fba8 	bl	1b870 <d_unqualified_name>
   1c120:	4607      	mov	r7, r0
   1c122:	7833      	ldrb	r3, [r6, #0]
   1c124:	2b63      	cmp	r3, #99	; 0x63
   1c126:	f040 80b4 	bne.w	1c292 <d_expression_1+0x3da>
   1c12a:	7872      	ldrb	r2, [r6, #1]
   1c12c:	2a6c      	cmp	r2, #108	; 0x6c
   1c12e:	f040 80b0 	bne.w	1c292 <d_expression_1+0x3da>
   1c132:	78b2      	ldrb	r2, [r6, #2]
   1c134:	2a00      	cmp	r2, #0
   1c136:	f040 80ac 	bne.w	1c292 <d_expression_1+0x3da>
   1c13a:	2145      	movs	r1, #69	; 0x45
   1c13c:	4620      	mov	r0, r4
   1c13e:	f000 f931 	bl	1c3a4 <d_exprlist>
   1c142:	4602      	mov	r2, r0
   1c144:	4613      	mov	r3, r2
   1c146:	2139      	movs	r1, #57	; 0x39
   1c148:	463a      	mov	r2, r7
   1c14a:	4620      	mov	r0, r4
   1c14c:	f7fe f9e8 	bl	1a520 <d_make_comp>
   1c150:	462a      	mov	r2, r5
   1c152:	4603      	mov	r3, r0
   1c154:	2138      	movs	r1, #56	; 0x38
   1c156:	e749      	b.n	1bfec <d_expression_1+0x134>
   1c158:	4620      	mov	r0, r4
   1c15a:	f7ff fead 	bl	1beb8 <d_expression_1>
   1c15e:	4603      	mov	r3, r0
   1c160:	e796      	b.n	1c090 <d_expression_1+0x1d8>
   1c162:	2b75      	cmp	r3, #117	; 0x75
   1c164:	f47f af17 	bne.w	1bf96 <d_expression_1+0xde>
   1c168:	3201      	adds	r2, #1
   1c16a:	60c2      	str	r2, [r0, #12]
   1c16c:	f7fe fcf0 	bl	1ab50 <d_source_name>
   1c170:	9001      	str	r0, [sp, #4]
   1c172:	4620      	mov	r0, r4
   1c174:	f7ff fdd8 	bl	1bd28 <d_template_args_1>
   1c178:	9a01      	ldr	r2, [sp, #4]
   1c17a:	4603      	mov	r3, r0
   1c17c:	213f      	movs	r1, #63	; 0x3f
   1c17e:	e735      	b.n	1bfec <d_expression_1+0x134>
   1c180:	1c93      	adds	r3, r2, #2
   1c182:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1c184:	60c3      	str	r3, [r0, #12]
   1c186:	7893      	ldrb	r3, [r2, #2]
   1c188:	b131      	cbz	r1, 1c198 <d_expression_1+0x2e0>
   1c18a:	2b55      	cmp	r3, #85	; 0x55
   1c18c:	d84a      	bhi.n	1c224 <d_expression_1+0x36c>
   1c18e:	2b42      	cmp	r3, #66	; 0x42
   1c190:	d832      	bhi.n	1c1f8 <d_expression_1+0x340>
   1c192:	3b30      	subs	r3, #48	; 0x30
   1c194:	2b09      	cmp	r3, #9
   1c196:	d936      	bls.n	1c206 <d_expression_1+0x34e>
   1c198:	4620      	mov	r0, r4
   1c19a:	f7fe fe13 	bl	1adc4 <d_type>
   1c19e:	4605      	mov	r5, r0
   1c1a0:	4620      	mov	r0, r4
   1c1a2:	f7ff fb65 	bl	1b870 <d_unqualified_name>
   1c1a6:	68e3      	ldr	r3, [r4, #12]
   1c1a8:	7819      	ldrb	r1, [r3, #0]
   1c1aa:	2949      	cmp	r1, #73	; 0x49
   1c1ac:	4602      	mov	r2, r0
   1c1ae:	f000 80a5 	beq.w	1c2fc <d_expression_1+0x444>
   1c1b2:	4613      	mov	r3, r2
   1c1b4:	2101      	movs	r1, #1
   1c1b6:	462a      	mov	r2, r5
   1c1b8:	e718      	b.n	1bfec <d_expression_1+0x134>
   1c1ba:	3202      	adds	r2, #2
   1c1bc:	60c2      	str	r2, [r0, #12]
   1c1be:	f7ff fe7b 	bl	1beb8 <d_expression_1>
   1c1c2:	2300      	movs	r3, #0
   1c1c4:	4602      	mov	r2, r0
   1c1c6:	214c      	movs	r1, #76	; 0x4c
   1c1c8:	e710      	b.n	1bfec <d_expression_1+0x134>
   1c1ca:	3203      	adds	r2, #3
   1c1cc:	60c2      	str	r2, [r0, #12]
   1c1ce:	2000      	movs	r0, #0
   1c1d0:	e6c7      	b.n	1bf62 <d_expression_1+0xaa>
   1c1d2:	4620      	mov	r0, r4
   1c1d4:	f7ff fe70 	bl	1beb8 <d_expression_1>
   1c1d8:	4603      	mov	r3, r0
   1c1da:	e752      	b.n	1c082 <d_expression_1+0x1ca>
   1c1dc:	7871      	ldrb	r1, [r6, #1]
   1c1de:	4291      	cmp	r1, r2
   1c1e0:	f47f af3f 	bne.w	1c062 <d_expression_1+0x1aa>
   1c1e4:	68e2      	ldr	r2, [r4, #12]
   1c1e6:	7811      	ldrb	r1, [r2, #0]
   1c1e8:	295f      	cmp	r1, #95	; 0x5f
   1c1ea:	f47f af3b 	bne.w	1c064 <d_expression_1+0x1ac>
   1c1ee:	3201      	adds	r2, #1
   1c1f0:	60e2      	str	r2, [r4, #12]
   1c1f2:	7833      	ldrb	r3, [r6, #0]
   1c1f4:	2700      	movs	r7, #0
   1c1f6:	e735      	b.n	1c064 <d_expression_1+0x1ac>
   1c1f8:	4a68      	ldr	r2, [pc, #416]	; (1c39c <d_expression_1+0x4e4>)
   1c1fa:	3b43      	subs	r3, #67	; 0x43
   1c1fc:	b2db      	uxtb	r3, r3
   1c1fe:	fa22 f303 	lsr.w	r3, r2, r3
   1c202:	07db      	lsls	r3, r3, #31
   1c204:	d5c8      	bpl.n	1c198 <d_expression_1+0x2e0>
   1c206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c20a:	63a3      	str	r3, [r4, #56]	; 0x38
   1c20c:	2100      	movs	r1, #0
   1c20e:	4620      	mov	r0, r4
   1c210:	f7ff fdbc 	bl	1bd8c <d_prefix>
   1c214:	68e3      	ldr	r3, [r4, #12]
   1c216:	781a      	ldrb	r2, [r3, #0]
   1c218:	2a45      	cmp	r2, #69	; 0x45
   1c21a:	4605      	mov	r5, r0
   1c21c:	d1c0      	bne.n	1c1a0 <d_expression_1+0x2e8>
   1c21e:	3301      	adds	r3, #1
   1c220:	60e3      	str	r3, [r4, #12]
   1c222:	e7bd      	b.n	1c1a0 <d_expression_1+0x2e8>
   1c224:	3b61      	subs	r3, #97	; 0x61
   1c226:	2b19      	cmp	r3, #25
   1c228:	d8b6      	bhi.n	1c198 <d_expression_1+0x2e0>
   1c22a:	e7ec      	b.n	1c206 <d_expression_1+0x34e>
   1c22c:	2b64      	cmp	r3, #100	; 0x64
   1c22e:	d106      	bne.n	1c23e <d_expression_1+0x386>
   1c230:	7873      	ldrb	r3, [r6, #1]
   1c232:	2b58      	cmp	r3, #88	; 0x58
   1c234:	d103      	bne.n	1c23e <d_expression_1+0x386>
   1c236:	78b3      	ldrb	r3, [r6, #2]
   1c238:	2b00      	cmp	r3, #0
   1c23a:	f43f af3b 	beq.w	1c0b4 <d_expression_1+0x1fc>
   1c23e:	7833      	ldrb	r3, [r6, #0]
   1c240:	2b66      	cmp	r3, #102	; 0x66
   1c242:	f000 8097 	beq.w	1c374 <d_expression_1+0x4bc>
   1c246:	2b6e      	cmp	r3, #110	; 0x6e
   1c248:	f47f aec0 	bne.w	1bfcc <d_expression_1+0x114>
   1c24c:	7873      	ldrb	r3, [r6, #1]
   1c24e:	2b77      	cmp	r3, #119	; 0x77
   1c250:	d002      	beq.n	1c258 <d_expression_1+0x3a0>
   1c252:	2b61      	cmp	r3, #97	; 0x61
   1c254:	f47f aeba 	bne.w	1bfcc <d_expression_1+0x114>
   1c258:	215f      	movs	r1, #95	; 0x5f
   1c25a:	4620      	mov	r0, r4
   1c25c:	f000 f8a2 	bl	1c3a4 <d_exprlist>
   1c260:	4606      	mov	r6, r0
   1c262:	4620      	mov	r0, r4
   1c264:	f7fe fdae 	bl	1adc4 <d_type>
   1c268:	68e3      	ldr	r3, [r4, #12]
   1c26a:	781a      	ldrb	r2, [r3, #0]
   1c26c:	2a45      	cmp	r2, #69	; 0x45
   1c26e:	4607      	mov	r7, r0
   1c270:	f000 8090 	beq.w	1c394 <d_expression_1+0x4dc>
   1c274:	2a70      	cmp	r2, #112	; 0x70
   1c276:	f000 8081 	beq.w	1c37c <d_expression_1+0x4c4>
   1c27a:	2a69      	cmp	r2, #105	; 0x69
   1c27c:	f47f aea6 	bne.w	1bfcc <d_expression_1+0x114>
   1c280:	785b      	ldrb	r3, [r3, #1]
   1c282:	2b6c      	cmp	r3, #108	; 0x6c
   1c284:	f47f aea2 	bne.w	1bfcc <d_expression_1+0x114>
   1c288:	4620      	mov	r0, r4
   1c28a:	f7ff fe15 	bl	1beb8 <d_expression_1>
   1c28e:	4603      	mov	r3, r0
   1c290:	e71f      	b.n	1c0d2 <d_expression_1+0x21a>
   1c292:	2b64      	cmp	r3, #100	; 0x64
   1c294:	d153      	bne.n	1c33e <d_expression_1+0x486>
   1c296:	7872      	ldrb	r2, [r6, #1]
   1c298:	2a74      	cmp	r2, #116	; 0x74
   1c29a:	d150      	bne.n	1c33e <d_expression_1+0x486>
   1c29c:	78b2      	ldrb	r2, [r6, #2]
   1c29e:	2a00      	cmp	r2, #0
   1c2a0:	d14d      	bne.n	1c33e <d_expression_1+0x486>
   1c2a2:	68e3      	ldr	r3, [r4, #12]
   1c2a4:	781a      	ldrb	r2, [r3, #0]
   1c2a6:	2a67      	cmp	r2, #103	; 0x67
   1c2a8:	d05b      	beq.n	1c362 <d_expression_1+0x4aa>
   1c2aa:	2a73      	cmp	r2, #115	; 0x73
   1c2ac:	d102      	bne.n	1c2b4 <d_expression_1+0x3fc>
   1c2ae:	785b      	ldrb	r3, [r3, #1]
   1c2b0:	2b72      	cmp	r3, #114	; 0x72
   1c2b2:	d04c      	beq.n	1c34e <d_expression_1+0x496>
   1c2b4:	4620      	mov	r0, r4
   1c2b6:	f7ff fadb 	bl	1b870 <d_unqualified_name>
   1c2ba:	68e3      	ldr	r3, [r4, #12]
   1c2bc:	7819      	ldrb	r1, [r3, #0]
   1c2be:	2949      	cmp	r1, #73	; 0x49
   1c2c0:	4602      	mov	r2, r0
   1c2c2:	f47f af3f 	bne.w	1c144 <d_expression_1+0x28c>
   1c2c6:	3301      	adds	r3, #1
   1c2c8:	60e3      	str	r3, [r4, #12]
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	9201      	str	r2, [sp, #4]
   1c2ce:	f7ff fd2b 	bl	1bd28 <d_template_args_1>
   1c2d2:	9a01      	ldr	r2, [sp, #4]
   1c2d4:	4603      	mov	r3, r0
   1c2d6:	2104      	movs	r1, #4
   1c2d8:	4620      	mov	r0, r4
   1c2da:	f7fe f921 	bl	1a520 <d_make_comp>
   1c2de:	4602      	mov	r2, r0
   1c2e0:	e730      	b.n	1c144 <d_expression_1+0x28c>
   1c2e2:	68e3      	ldr	r3, [r4, #12]
   1c2e4:	781a      	ldrb	r2, [r3, #0]
   1c2e6:	2a5f      	cmp	r2, #95	; 0x5f
   1c2e8:	f47f af36 	bne.w	1c158 <d_expression_1+0x2a0>
   1c2ec:	3301      	adds	r3, #1
   1c2ee:	60e3      	str	r3, [r4, #12]
   1c2f0:	2145      	movs	r1, #69	; 0x45
   1c2f2:	4620      	mov	r0, r4
   1c2f4:	f000 f856 	bl	1c3a4 <d_exprlist>
   1c2f8:	4603      	mov	r3, r0
   1c2fa:	e6c9      	b.n	1c090 <d_expression_1+0x1d8>
   1c2fc:	3301      	adds	r3, #1
   1c2fe:	60e3      	str	r3, [r4, #12]
   1c300:	4620      	mov	r0, r4
   1c302:	9201      	str	r2, [sp, #4]
   1c304:	f7ff fd10 	bl	1bd28 <d_template_args_1>
   1c308:	9a01      	ldr	r2, [sp, #4]
   1c30a:	4603      	mov	r3, r0
   1c30c:	2104      	movs	r1, #4
   1c30e:	4620      	mov	r0, r4
   1c310:	f7fe f906 	bl	1a520 <d_make_comp>
   1c314:	4602      	mov	r2, r0
   1c316:	e74c      	b.n	1c1b2 <d_expression_1+0x2fa>
   1c318:	781b      	ldrb	r3, [r3, #0]
   1c31a:	2b73      	cmp	r3, #115	; 0x73
   1c31c:	d00a      	beq.n	1c334 <d_expression_1+0x47c>
   1c31e:	3b63      	subs	r3, #99	; 0x63
   1c320:	b2db      	uxtb	r3, r3
   1c322:	2b0f      	cmp	r3, #15
   1c324:	f63f aeea 	bhi.w	1c0fc <d_expression_1+0x244>
   1c328:	4a1d      	ldr	r2, [pc, #116]	; (1c3a0 <d_expression_1+0x4e8>)
   1c32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c32e:	2b00      	cmp	r3, #0
   1c330:	f43f aee4 	beq.w	1c0fc <d_expression_1+0x244>
   1c334:	4620      	mov	r0, r4
   1c336:	f7fe fd45 	bl	1adc4 <d_type>
   1c33a:	4607      	mov	r7, r0
   1c33c:	e6f1      	b.n	1c122 <d_expression_1+0x26a>
   1c33e:	2b70      	cmp	r3, #112	; 0x70
   1c340:	d105      	bne.n	1c34e <d_expression_1+0x496>
   1c342:	7873      	ldrb	r3, [r6, #1]
   1c344:	2b74      	cmp	r3, #116	; 0x74
   1c346:	d102      	bne.n	1c34e <d_expression_1+0x496>
   1c348:	78b3      	ldrb	r3, [r6, #2]
   1c34a:	2b00      	cmp	r3, #0
   1c34c:	d0a9      	beq.n	1c2a2 <d_expression_1+0x3ea>
   1c34e:	4620      	mov	r0, r4
   1c350:	f7ff fdb2 	bl	1beb8 <d_expression_1>
   1c354:	4602      	mov	r2, r0
   1c356:	e6f5      	b.n	1c144 <d_expression_1+0x28c>
   1c358:	4620      	mov	r0, r4
   1c35a:	f7ff fdad 	bl	1beb8 <d_expression_1>
   1c35e:	4607      	mov	r7, r0
   1c360:	e6df      	b.n	1c122 <d_expression_1+0x26a>
   1c362:	785b      	ldrb	r3, [r3, #1]
   1c364:	2b73      	cmp	r3, #115	; 0x73
   1c366:	d1a5      	bne.n	1c2b4 <d_expression_1+0x3fc>
   1c368:	e7f1      	b.n	1c34e <d_expression_1+0x496>
   1c36a:	4620      	mov	r0, r4
   1c36c:	f7ff f9fc 	bl	1b768 <d_operator_name>
   1c370:	4607      	mov	r7, r0
   1c372:	e6d6      	b.n	1c122 <d_expression_1+0x26a>
   1c374:	4620      	mov	r0, r4
   1c376:	f7ff f9f7 	bl	1b768 <d_operator_name>
   1c37a:	e69e      	b.n	1c0ba <d_expression_1+0x202>
   1c37c:	785a      	ldrb	r2, [r3, #1]
   1c37e:	2a69      	cmp	r2, #105	; 0x69
   1c380:	f47f ae24 	bne.w	1bfcc <d_expression_1+0x114>
   1c384:	3302      	adds	r3, #2
   1c386:	60e3      	str	r3, [r4, #12]
   1c388:	2145      	movs	r1, #69	; 0x45
   1c38a:	4620      	mov	r0, r4
   1c38c:	f000 f80a 	bl	1c3a4 <d_exprlist>
   1c390:	4603      	mov	r3, r0
   1c392:	e69e      	b.n	1c0d2 <d_expression_1+0x21a>
   1c394:	3301      	adds	r3, #1
   1c396:	60e3      	str	r3, [r4, #12]
   1c398:	2300      	movs	r3, #0
   1c39a:	e69a      	b.n	1c0d2 <d_expression_1+0x21a>
   1c39c:	00040201 	.word	0x00040201
   1c3a0:	20000370 	.word	0x20000370

0001c3a4 <d_exprlist>:
   1c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3a8:	68c2      	ldr	r2, [r0, #12]
   1c3aa:	460e      	mov	r6, r1
   1c3ac:	7811      	ldrb	r1, [r2, #0]
   1c3ae:	b082      	sub	sp, #8
   1c3b0:	2300      	movs	r3, #0
   1c3b2:	42b1      	cmp	r1, r6
   1c3b4:	4604      	mov	r4, r0
   1c3b6:	9301      	str	r3, [sp, #4]
   1c3b8:	d024      	beq.n	1c404 <d_exprlist+0x60>
   1c3ba:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   1c3be:	ad01      	add	r5, sp, #4
   1c3c0:	2701      	movs	r7, #1
   1c3c2:	e009      	b.n	1c3d8 <d_exprlist+0x34>
   1c3c4:	f7fe f8ac 	bl	1a520 <d_make_comp>
   1c3c8:	6028      	str	r0, [r5, #0]
   1c3ca:	f100 0510 	add.w	r5, r0, #16
   1c3ce:	b178      	cbz	r0, 1c3f0 <d_exprlist+0x4c>
   1c3d0:	68e3      	ldr	r3, [r4, #12]
   1c3d2:	781a      	ldrb	r2, [r3, #0]
   1c3d4:	42b2      	cmp	r2, r6
   1c3d6:	d00f      	beq.n	1c3f8 <d_exprlist+0x54>
   1c3d8:	6327      	str	r7, [r4, #48]	; 0x30
   1c3da:	4620      	mov	r0, r4
   1c3dc:	f7ff fd6c 	bl	1beb8 <d_expression_1>
   1c3e0:	4602      	mov	r2, r0
   1c3e2:	2300      	movs	r3, #0
   1c3e4:	212e      	movs	r1, #46	; 0x2e
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   1c3ec:	2a00      	cmp	r2, #0
   1c3ee:	d1e9      	bne.n	1c3c4 <d_exprlist+0x20>
   1c3f0:	2000      	movs	r0, #0
   1c3f2:	b002      	add	sp, #8
   1c3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3f8:	9801      	ldr	r0, [sp, #4]
   1c3fa:	3301      	adds	r3, #1
   1c3fc:	60e3      	str	r3, [r4, #12]
   1c3fe:	b002      	add	sp, #8
   1c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c404:	3201      	adds	r2, #1
   1c406:	60c2      	str	r2, [r0, #12]
   1c408:	212e      	movs	r1, #46	; 0x2e
   1c40a:	461a      	mov	r2, r3
   1c40c:	b002      	add	sp, #8
   1c40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c412:	f7fe b885 	b.w	1a520 <d_make_comp>
   1c416:	bf00      	nop

0001c418 <d_cv_qualifiers>:
   1c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c41c:	460f      	mov	r7, r1
   1c41e:	68c1      	ldr	r1, [r0, #12]
   1c420:	f1b2 0900 	subs.w	r9, r2, #0
   1c424:	b083      	sub	sp, #12
   1c426:	780a      	ldrb	r2, [r1, #0]
   1c428:	4604      	mov	r4, r0
   1c42a:	bf15      	itete	ne
   1c42c:	f04f 0a1e 	movne.w	sl, #30
   1c430:	f04f 0a1b 	moveq.w	sl, #27
   1c434:	f04f 081d 	movne.w	r8, #29
   1c438:	f04f 081a 	moveq.w	r8, #26
   1c43c:	bf14      	ite	ne
   1c43e:	261c      	movne	r6, #28
   1c440:	2619      	moveq	r6, #25
   1c442:	463d      	mov	r5, r7
   1c444:	f04f 0b01 	mov.w	fp, #1
   1c448:	e01b      	b.n	1c482 <d_cv_qualifiers+0x6a>
   1c44a:	2a56      	cmp	r2, #86	; 0x56
   1c44c:	d033      	beq.n	1c4b6 <d_cv_qualifiers+0x9e>
   1c44e:	2a4b      	cmp	r2, #75	; 0x4b
   1c450:	d037      	beq.n	1c4c2 <d_cv_qualifiers+0xaa>
   1c452:	784b      	ldrb	r3, [r1, #1]
   1c454:	b353      	cbz	r3, 1c4ac <d_cv_qualifiers+0x94>
   1c456:	1c8b      	adds	r3, r1, #2
   1c458:	60e3      	str	r3, [r4, #12]
   1c45a:	784b      	ldrb	r3, [r1, #1]
   1c45c:	2b78      	cmp	r3, #120	; 0x78
   1c45e:	d04f      	beq.n	1c500 <d_cv_qualifiers+0xe8>
   1c460:	2b6f      	cmp	r3, #111	; 0x6f
   1c462:	d134      	bne.n	1c4ce <d_cv_qualifiers+0xb6>
   1c464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c466:	3309      	adds	r3, #9
   1c468:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c46a:	2150      	movs	r1, #80	; 0x50
   1c46c:	2300      	movs	r3, #0
   1c46e:	2200      	movs	r2, #0
   1c470:	4620      	mov	r0, r4
   1c472:	f7fe f855 	bl	1a520 <d_make_comp>
   1c476:	6028      	str	r0, [r5, #0]
   1c478:	b1c0      	cbz	r0, 1c4ac <d_cv_qualifiers+0x94>
   1c47a:	68e1      	ldr	r1, [r4, #12]
   1c47c:	780a      	ldrb	r2, [r1, #0]
   1c47e:	f100 050c 	add.w	r5, r0, #12
   1c482:	4608      	mov	r0, r1
   1c484:	f7fe fa24 	bl	1a8d0 <next_is_type_qual.isra.0>
   1c488:	2800      	cmp	r0, #0
   1c48a:	d03f      	beq.n	1c50c <d_cv_qualifiers+0xf4>
   1c48c:	1c4b      	adds	r3, r1, #1
   1c48e:	2a72      	cmp	r2, #114	; 0x72
   1c490:	60e3      	str	r3, [r4, #12]
   1c492:	d1da      	bne.n	1c44a <d_cv_qualifiers+0x32>
   1c494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c496:	3309      	adds	r3, #9
   1c498:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c49a:	4631      	mov	r1, r6
   1c49c:	2300      	movs	r3, #0
   1c49e:	2200      	movs	r2, #0
   1c4a0:	4620      	mov	r0, r4
   1c4a2:	f7fe f83d 	bl	1a520 <d_make_comp>
   1c4a6:	6028      	str	r0, [r5, #0]
   1c4a8:	2800      	cmp	r0, #0
   1c4aa:	d1e6      	bne.n	1c47a <d_cv_qualifiers+0x62>
   1c4ac:	2500      	movs	r5, #0
   1c4ae:	4628      	mov	r0, r5
   1c4b0:	b003      	add	sp, #12
   1c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c4b8:	3309      	adds	r3, #9
   1c4ba:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c4bc:	4641      	mov	r1, r8
   1c4be:	2300      	movs	r3, #0
   1c4c0:	e7d5      	b.n	1c46e <d_cv_qualifiers+0x56>
   1c4c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c4c4:	3306      	adds	r3, #6
   1c4c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c4c8:	4651      	mov	r1, sl
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	e7cf      	b.n	1c46e <d_cv_qualifiers+0x56>
   1c4ce:	2b4f      	cmp	r3, #79	; 0x4f
   1c4d0:	d138      	bne.n	1c544 <d_cv_qualifiers+0x12c>
   1c4d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c4d4:	3309      	adds	r3, #9
   1c4d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c4d8:	4620      	mov	r0, r4
   1c4da:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c4dc:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
   1c4e0:	9301      	str	r3, [sp, #4]
   1c4e2:	f7ff fce9 	bl	1beb8 <d_expression_1>
   1c4e6:	9b01      	ldr	r3, [sp, #4]
   1c4e8:	6323      	str	r3, [r4, #48]	; 0x30
   1c4ea:	4603      	mov	r3, r0
   1c4ec:	2800      	cmp	r0, #0
   1c4ee:	d0dd      	beq.n	1c4ac <d_cv_qualifiers+0x94>
   1c4f0:	68e2      	ldr	r2, [r4, #12]
   1c4f2:	7811      	ldrb	r1, [r2, #0]
   1c4f4:	2945      	cmp	r1, #69	; 0x45
   1c4f6:	d1d9      	bne.n	1c4ac <d_cv_qualifiers+0x94>
   1c4f8:	3201      	adds	r2, #1
   1c4fa:	60e2      	str	r2, [r4, #12]
   1c4fc:	2150      	movs	r1, #80	; 0x50
   1c4fe:	e7b6      	b.n	1c46e <d_cv_qualifiers+0x56>
   1c500:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c502:	3311      	adds	r3, #17
   1c504:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c506:	214e      	movs	r1, #78	; 0x4e
   1c508:	2300      	movs	r3, #0
   1c50a:	e7b0      	b.n	1c46e <d_cv_qualifiers+0x56>
   1c50c:	f1b9 0f00 	cmp.w	r9, #0
   1c510:	d1cd      	bne.n	1c4ae <d_cv_qualifiers+0x96>
   1c512:	2a46      	cmp	r2, #70	; 0x46
   1c514:	d1cb      	bne.n	1c4ae <d_cv_qualifiers+0x96>
   1c516:	42bd      	cmp	r5, r7
   1c518:	d0c9      	beq.n	1c4ae <d_cv_qualifiers+0x96>
   1c51a:	201d      	movs	r0, #29
   1c51c:	211e      	movs	r1, #30
   1c51e:	221c      	movs	r2, #28
   1c520:	e004      	b.n	1c52c <d_cv_qualifiers+0x114>
   1c522:	2b19      	cmp	r3, #25
   1c524:	d00c      	beq.n	1c540 <d_cv_qualifiers+0x128>
   1c526:	370c      	adds	r7, #12
   1c528:	42bd      	cmp	r5, r7
   1c52a:	d0c0      	beq.n	1c4ae <d_cv_qualifiers+0x96>
   1c52c:	683f      	ldr	r7, [r7, #0]
   1c52e:	783b      	ldrb	r3, [r7, #0]
   1c530:	2b1a      	cmp	r3, #26
   1c532:	d003      	beq.n	1c53c <d_cv_qualifiers+0x124>
   1c534:	2b1b      	cmp	r3, #27
   1c536:	d1f4      	bne.n	1c522 <d_cv_qualifiers+0x10a>
   1c538:	7039      	strb	r1, [r7, #0]
   1c53a:	e7f4      	b.n	1c526 <d_cv_qualifiers+0x10e>
   1c53c:	7038      	strb	r0, [r7, #0]
   1c53e:	e7f2      	b.n	1c526 <d_cv_qualifiers+0x10e>
   1c540:	703a      	strb	r2, [r7, #0]
   1c542:	e7f0      	b.n	1c526 <d_cv_qualifiers+0x10e>
   1c544:	2b77      	cmp	r3, #119	; 0x77
   1c546:	d1b1      	bne.n	1c4ac <d_cv_qualifiers+0x94>
   1c548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c54a:	3306      	adds	r3, #6
   1c54c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c54e:	4620      	mov	r0, r4
   1c550:	f7ff f870 	bl	1b634 <d_parmlist>
   1c554:	4603      	mov	r3, r0
   1c556:	2800      	cmp	r0, #0
   1c558:	d0a8      	beq.n	1c4ac <d_cv_qualifiers+0x94>
   1c55a:	68e2      	ldr	r2, [r4, #12]
   1c55c:	7811      	ldrb	r1, [r2, #0]
   1c55e:	2945      	cmp	r1, #69	; 0x45
   1c560:	d1a4      	bne.n	1c4ac <d_cv_qualifiers+0x94>
   1c562:	3201      	adds	r2, #1
   1c564:	60e2      	str	r2, [r4, #12]
   1c566:	2151      	movs	r1, #81	; 0x51
   1c568:	e781      	b.n	1c46e <d_cv_qualifiers+0x56>
   1c56a:	bf00      	nop

0001c56c <d_special_name>:
   1c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c570:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c572:	68c3      	ldr	r3, [r0, #12]
   1c574:	f101 0214 	add.w	r2, r1, #20
   1c578:	62c2      	str	r2, [r0, #44]	; 0x2c
   1c57a:	781a      	ldrb	r2, [r3, #0]
   1c57c:	2a54      	cmp	r2, #84	; 0x54
   1c57e:	b082      	sub	sp, #8
   1c580:	4604      	mov	r4, r0
   1c582:	d075      	beq.n	1c670 <d_special_name+0x104>
   1c584:	2a47      	cmp	r2, #71	; 0x47
   1c586:	d128      	bne.n	1c5da <d_special_name+0x6e>
   1c588:	1c5a      	adds	r2, r3, #1
   1c58a:	60c2      	str	r2, [r0, #12]
   1c58c:	785a      	ldrb	r2, [r3, #1]
   1c58e:	b322      	cbz	r2, 1c5da <d_special_name+0x6e>
   1c590:	1c9a      	adds	r2, r3, #2
   1c592:	60c2      	str	r2, [r0, #12]
   1c594:	785a      	ldrb	r2, [r3, #1]
   1c596:	2a56      	cmp	r2, #86	; 0x56
   1c598:	d823      	bhi.n	1c5e2 <d_special_name+0x76>
   1c59a:	2a40      	cmp	r2, #64	; 0x40
   1c59c:	d91d      	bls.n	1c5da <d_special_name+0x6e>
   1c59e:	3a41      	subs	r2, #65	; 0x41
   1c5a0:	2a15      	cmp	r2, #21
   1c5a2:	d81a      	bhi.n	1c5da <d_special_name+0x6e>
   1c5a4:	e8df f012 	tbh	[pc, r2, lsl #1]
   1c5a8:	0019011d 	.word	0x0019011d
   1c5ac:	00190019 	.word	0x00190019
   1c5b0:	00190019 	.word	0x00190019
   1c5b4:	00190019 	.word	0x00190019
   1c5b8:	00190019 	.word	0x00190019
   1c5bc:	00190019 	.word	0x00190019
   1c5c0:	00190019 	.word	0x00190019
   1c5c4:	00190019 	.word	0x00190019
   1c5c8:	00ff0019 	.word	0x00ff0019
   1c5cc:	00e90019 	.word	0x00e90019
   1c5d0:	00de0019 	.word	0x00de0019
   1c5d4:	68e3      	ldr	r3, [r4, #12]
   1c5d6:	3302      	adds	r3, #2
   1c5d8:	60e3      	str	r3, [r4, #12]
   1c5da:	2000      	movs	r0, #0
   1c5dc:	b002      	add	sp, #8
   1c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c5e2:	2a72      	cmp	r2, #114	; 0x72
   1c5e4:	d1f9      	bne.n	1c5da <d_special_name+0x6e>
   1c5e6:	f7fe f813 	bl	1a610 <d_number>
   1c5ea:	2801      	cmp	r0, #1
   1c5ec:	ddf5      	ble.n	1c5da <d_special_name+0x6e>
   1c5ee:	68e3      	ldr	r3, [r4, #12]
   1c5f0:	781a      	ldrb	r2, [r3, #0]
   1c5f2:	2a00      	cmp	r2, #0
   1c5f4:	d0f1      	beq.n	1c5da <d_special_name+0x6e>
   1c5f6:	1c5e      	adds	r6, r3, #1
   1c5f8:	60e6      	str	r6, [r4, #12]
   1c5fa:	781b      	ldrb	r3, [r3, #0]
   1c5fc:	2b5f      	cmp	r3, #95	; 0x5f
   1c5fe:	d1ec      	bne.n	1c5da <d_special_name+0x6e>
   1c600:	2200      	movs	r2, #0
   1c602:	1e45      	subs	r5, r0, #1
   1c604:	4617      	mov	r7, r2
   1c606:	f04f 0842 	mov.w	r8, #66	; 0x42
   1c60a:	7833      	ldrb	r3, [r6, #0]
   1c60c:	2b00      	cmp	r3, #0
   1c60e:	d0e4      	beq.n	1c5da <d_special_name+0x6e>
   1c610:	2b24      	cmp	r3, #36	; 0x24
   1c612:	f040 819f 	bne.w	1c954 <d_special_name+0x3e8>
   1c616:	7873      	ldrb	r3, [r6, #1]
   1c618:	2b53      	cmp	r3, #83	; 0x53
   1c61a:	f000 81bf 	beq.w	1c99c <d_special_name+0x430>
   1c61e:	2b5f      	cmp	r3, #95	; 0x5f
   1c620:	f000 81ba 	beq.w	1c998 <d_special_name+0x42c>
   1c624:	2b24      	cmp	r3, #36	; 0x24
   1c626:	d1d8      	bne.n	1c5da <d_special_name+0x6e>
   1c628:	4619      	mov	r1, r3
   1c62a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1c62e:	4298      	cmp	r0, r3
   1c630:	dad0      	bge.n	1c5d4 <d_special_name+0x68>
   1c632:	6926      	ldr	r6, [r4, #16]
   1c634:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   1c638:	eb06 038c 	add.w	r3, r6, ip, lsl #2
   1c63c:	3001      	adds	r0, #1
   1c63e:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1c642:	6160      	str	r0, [r4, #20]
   1c644:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
   1c648:	68e6      	ldr	r6, [r4, #12]
   1c64a:	60d9      	str	r1, [r3, #12]
   1c64c:	3d02      	subs	r5, #2
   1c64e:	3602      	adds	r6, #2
   1c650:	60e6      	str	r6, [r4, #12]
   1c652:	2a00      	cmp	r2, #0
   1c654:	f000 819e 	beq.w	1c994 <d_special_name+0x428>
   1c658:	2141      	movs	r1, #65	; 0x41
   1c65a:	4620      	mov	r0, r4
   1c65c:	f7fd ff60 	bl	1a520 <d_make_comp>
   1c660:	4602      	mov	r2, r0
   1c662:	2800      	cmp	r0, #0
   1c664:	d0b9      	beq.n	1c5da <d_special_name+0x6e>
   1c666:	2d00      	cmp	r5, #0
   1c668:	dccf      	bgt.n	1c60a <d_special_name+0x9e>
   1c66a:	2300      	movs	r3, #0
   1c66c:	2140      	movs	r1, #64	; 0x40
   1c66e:	e07e      	b.n	1c76e <d_special_name+0x202>
   1c670:	1c5a      	adds	r2, r3, #1
   1c672:	60c2      	str	r2, [r0, #12]
   1c674:	785a      	ldrb	r2, [r3, #1]
   1c676:	2a00      	cmp	r2, #0
   1c678:	d0af      	beq.n	1c5da <d_special_name+0x6e>
   1c67a:	1c9a      	adds	r2, r3, #2
   1c67c:	60c2      	str	r2, [r0, #12]
   1c67e:	785b      	ldrb	r3, [r3, #1]
   1c680:	3b41      	subs	r3, #65	; 0x41
   1c682:	2b35      	cmp	r3, #53	; 0x35
   1c684:	d8a9      	bhi.n	1c5da <d_special_name+0x6e>
   1c686:	a201      	add	r2, pc, #4	; (adr r2, 1c68c <d_special_name+0x120>)
   1c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c68c:	0001c853 	.word	0x0001c853
   1c690:	0001c5db 	.word	0x0001c5db
   1c694:	0001c81f 	.word	0x0001c81f
   1c698:	0001c5db 	.word	0x0001c5db
   1c69c:	0001c5db 	.word	0x0001c5db
   1c6a0:	0001c85f 	.word	0x0001c85f
   1c6a4:	0001c5db 	.word	0x0001c5db
   1c6a8:	0001c8c3 	.word	0x0001c8c3
   1c6ac:	0001c93d 	.word	0x0001c93d
   1c6b0:	0001c931 	.word	0x0001c931
   1c6b4:	0001c5db 	.word	0x0001c5db
   1c6b8:	0001c5db 	.word	0x0001c5db
   1c6bc:	0001c5db 	.word	0x0001c5db
   1c6c0:	0001c5db 	.word	0x0001c5db
   1c6c4:	0001c5db 	.word	0x0001c5db
   1c6c8:	0001c5db 	.word	0x0001c5db
   1c6cc:	0001c5db 	.word	0x0001c5db
   1c6d0:	0001c5db 	.word	0x0001c5db
   1c6d4:	0001c949 	.word	0x0001c949
   1c6d8:	0001c8cf 	.word	0x0001c8cf
   1c6dc:	0001c5db 	.word	0x0001c5db
   1c6e0:	0001c8df 	.word	0x0001c8df
   1c6e4:	0001c8ef 	.word	0x0001c8ef
   1c6e8:	0001c5db 	.word	0x0001c5db
   1c6ec:	0001c5db 	.word	0x0001c5db
   1c6f0:	0001c5db 	.word	0x0001c5db
   1c6f4:	0001c5db 	.word	0x0001c5db
   1c6f8:	0001c5db 	.word	0x0001c5db
   1c6fc:	0001c5db 	.word	0x0001c5db
   1c700:	0001c5db 	.word	0x0001c5db
   1c704:	0001c5db 	.word	0x0001c5db
   1c708:	0001c5db 	.word	0x0001c5db
   1c70c:	0001c5db 	.word	0x0001c5db
   1c710:	0001c5db 	.word	0x0001c5db
   1c714:	0001c8fb 	.word	0x0001c8fb
   1c718:	0001c5db 	.word	0x0001c5db
   1c71c:	0001c5db 	.word	0x0001c5db
   1c720:	0001c5db 	.word	0x0001c5db
   1c724:	0001c5db 	.word	0x0001c5db
   1c728:	0001c86b 	.word	0x0001c86b
   1c72c:	0001c5db 	.word	0x0001c5db
   1c730:	0001c5db 	.word	0x0001c5db
   1c734:	0001c5db 	.word	0x0001c5db
   1c738:	0001c5db 	.word	0x0001c5db
   1c73c:	0001c5db 	.word	0x0001c5db
   1c740:	0001c5db 	.word	0x0001c5db
   1c744:	0001c5db 	.word	0x0001c5db
   1c748:	0001c5db 	.word	0x0001c5db
   1c74c:	0001c5db 	.word	0x0001c5db
   1c750:	0001c5db 	.word	0x0001c5db
   1c754:	0001c5db 	.word	0x0001c5db
   1c758:	0001c5db 	.word	0x0001c5db
   1c75c:	0001c5db 	.word	0x0001c5db
   1c760:	0001c897 	.word	0x0001c897
   1c764:	f000 f93c 	bl	1c9e0 <d_name>
   1c768:	2300      	movs	r3, #0
   1c76a:	4602      	mov	r2, r0
   1c76c:	2113      	movs	r1, #19
   1c76e:	4620      	mov	r0, r4
   1c770:	b002      	add	sp, #8
   1c772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c776:	f7fd bed3 	b.w	1a520 <d_make_comp>
   1c77a:	789a      	ldrb	r2, [r3, #2]
   1c77c:	2a00      	cmp	r2, #0
   1c77e:	f000 810f 	beq.w	1c9a0 <d_special_name+0x434>
   1c782:	1cda      	adds	r2, r3, #3
   1c784:	60c2      	str	r2, [r0, #12]
   1c786:	789a      	ldrb	r2, [r3, #2]
   1c788:	78db      	ldrb	r3, [r3, #3]
   1c78a:	2a6e      	cmp	r2, #110	; 0x6e
   1c78c:	d03a      	beq.n	1c804 <d_special_name+0x298>
   1c78e:	2b47      	cmp	r3, #71	; 0x47
   1c790:	d002      	beq.n	1c798 <d_special_name+0x22c>
   1c792:	2b54      	cmp	r3, #84	; 0x54
   1c794:	f040 8104 	bne.w	1c9a0 <d_special_name+0x434>
   1c798:	4620      	mov	r0, r4
   1c79a:	f7ff fee7 	bl	1c56c <d_special_name>
   1c79e:	4602      	mov	r2, r0
   1c7a0:	2300      	movs	r3, #0
   1c7a2:	214a      	movs	r1, #74	; 0x4a
   1c7a4:	e7e3      	b.n	1c76e <d_special_name+0x202>
   1c7a6:	f000 f91b 	bl	1c9e0 <d_name>
   1c7aa:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
   1c7ae:	4299      	cmp	r1, r3
   1c7b0:	4602      	mov	r2, r0
   1c7b2:	f280 80ff 	bge.w	1c9b4 <d_special_name+0x448>
   1c7b6:	9001      	str	r0, [sp, #4]
   1c7b8:	6920      	ldr	r0, [r4, #16]
   1c7ba:	eb01 0681 	add.w	r6, r1, r1, lsl #2
   1c7be:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1c7c2:	2300      	movs	r3, #0
   1c7c4:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1c7c8:	3101      	adds	r1, #1
   1c7ca:	2343      	movs	r3, #67	; 0x43
   1c7cc:	6161      	str	r1, [r4, #20]
   1c7ce:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
   1c7d2:	4620      	mov	r0, r4
   1c7d4:	f7fd ff1c 	bl	1a610 <d_number>
   1c7d8:	9a01      	ldr	r2, [sp, #4]
   1c7da:	60e8      	str	r0, [r5, #12]
   1c7dc:	462b      	mov	r3, r5
   1c7de:	2116      	movs	r1, #22
   1c7e0:	e7c5      	b.n	1c76e <d_special_name+0x202>
   1c7e2:	789b      	ldrb	r3, [r3, #2]
   1c7e4:	2b47      	cmp	r3, #71	; 0x47
   1c7e6:	d001      	beq.n	1c7ec <d_special_name+0x280>
   1c7e8:	2b54      	cmp	r3, #84	; 0x54
   1c7ea:	d106      	bne.n	1c7fa <d_special_name+0x28e>
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	f7ff febd 	bl	1c56c <d_special_name>
   1c7f2:	4602      	mov	r2, r0
   1c7f4:	2300      	movs	r3, #0
   1c7f6:	2117      	movs	r1, #23
   1c7f8:	e7b9      	b.n	1c76e <d_special_name+0x202>
   1c7fa:	2100      	movs	r1, #0
   1c7fc:	f000 fa3e 	bl	1cc7c <d_encoding.part.0>
   1c800:	4602      	mov	r2, r0
   1c802:	e7f7      	b.n	1c7f4 <d_special_name+0x288>
   1c804:	2b47      	cmp	r3, #71	; 0x47
   1c806:	f000 80e1 	beq.w	1c9cc <d_special_name+0x460>
   1c80a:	2b54      	cmp	r3, #84	; 0x54
   1c80c:	f000 80de 	beq.w	1c9cc <d_special_name+0x460>
   1c810:	2100      	movs	r1, #0
   1c812:	f000 fa33 	bl	1cc7c <d_encoding.part.0>
   1c816:	4602      	mov	r2, r0
   1c818:	2300      	movs	r3, #0
   1c81a:	214b      	movs	r1, #75	; 0x4b
   1c81c:	e7a7      	b.n	1c76e <d_special_name+0x202>
   1c81e:	f7fe fad1 	bl	1adc4 <d_type>
   1c822:	4605      	mov	r5, r0
   1c824:	4620      	mov	r0, r4
   1c826:	f7fd fef3 	bl	1a610 <d_number>
   1c82a:	2800      	cmp	r0, #0
   1c82c:	f6ff aed5 	blt.w	1c5da <d_special_name+0x6e>
   1c830:	68e3      	ldr	r3, [r4, #12]
   1c832:	781a      	ldrb	r2, [r3, #0]
   1c834:	2a5f      	cmp	r2, #95	; 0x5f
   1c836:	f47f aed0 	bne.w	1c5da <d_special_name+0x6e>
   1c83a:	3301      	adds	r3, #1
   1c83c:	60e3      	str	r3, [r4, #12]
   1c83e:	4620      	mov	r0, r4
   1c840:	f7fe fac0 	bl	1adc4 <d_type>
   1c844:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1c846:	3105      	adds	r1, #5
   1c848:	62e1      	str	r1, [r4, #44]	; 0x2c
   1c84a:	4602      	mov	r2, r0
   1c84c:	462b      	mov	r3, r5
   1c84e:	210b      	movs	r1, #11
   1c850:	e78d      	b.n	1c76e <d_special_name+0x202>
   1c852:	f7ff fa3d 	bl	1bcd0 <d_template_arg>
   1c856:	2300      	movs	r3, #0
   1c858:	4602      	mov	r2, r0
   1c85a:	2130      	movs	r1, #48	; 0x30
   1c85c:	e787      	b.n	1c76e <d_special_name+0x202>
   1c85e:	f7fe fab1 	bl	1adc4 <d_type>
   1c862:	2300      	movs	r3, #0
   1c864:	4602      	mov	r2, r0
   1c866:	210e      	movs	r1, #14
   1c868:	e781      	b.n	1c76e <d_special_name+0x202>
   1c86a:	2168      	movs	r1, #104	; 0x68
   1c86c:	f7fd ff0a 	bl	1a684 <d_call_offset>
   1c870:	2800      	cmp	r0, #0
   1c872:	f43f aeb2 	beq.w	1c5da <d_special_name+0x6e>
   1c876:	68e3      	ldr	r3, [r4, #12]
   1c878:	781b      	ldrb	r3, [r3, #0]
   1c87a:	2b47      	cmp	r3, #71	; 0x47
   1c87c:	f000 80a1 	beq.w	1c9c2 <d_special_name+0x456>
   1c880:	2b54      	cmp	r3, #84	; 0x54
   1c882:	f000 809e 	beq.w	1c9c2 <d_special_name+0x456>
   1c886:	2100      	movs	r1, #0
   1c888:	4620      	mov	r0, r4
   1c88a:	f000 f9f7 	bl	1cc7c <d_encoding.part.0>
   1c88e:	4602      	mov	r2, r0
   1c890:	2300      	movs	r3, #0
   1c892:	210f      	movs	r1, #15
   1c894:	e76b      	b.n	1c76e <d_special_name+0x202>
   1c896:	2176      	movs	r1, #118	; 0x76
   1c898:	f7fd fef4 	bl	1a684 <d_call_offset>
   1c89c:	2800      	cmp	r0, #0
   1c89e:	f43f ae9c 	beq.w	1c5da <d_special_name+0x6e>
   1c8a2:	68e3      	ldr	r3, [r4, #12]
   1c8a4:	781b      	ldrb	r3, [r3, #0]
   1c8a6:	2b47      	cmp	r3, #71	; 0x47
   1c8a8:	f000 8086 	beq.w	1c9b8 <d_special_name+0x44c>
   1c8ac:	2b54      	cmp	r3, #84	; 0x54
   1c8ae:	f000 8083 	beq.w	1c9b8 <d_special_name+0x44c>
   1c8b2:	2100      	movs	r1, #0
   1c8b4:	4620      	mov	r0, r4
   1c8b6:	f000 f9e1 	bl	1cc7c <d_encoding.part.0>
   1c8ba:	4602      	mov	r2, r0
   1c8bc:	2300      	movs	r3, #0
   1c8be:	2110      	movs	r1, #16
   1c8c0:	e755      	b.n	1c76e <d_special_name+0x202>
   1c8c2:	f000 f88d 	bl	1c9e0 <d_name>
   1c8c6:	2300      	movs	r3, #0
   1c8c8:	4602      	mov	r2, r0
   1c8ca:	2114      	movs	r1, #20
   1c8cc:	e74f      	b.n	1c76e <d_special_name+0x202>
   1c8ce:	310a      	adds	r1, #10
   1c8d0:	62c1      	str	r1, [r0, #44]	; 0x2c
   1c8d2:	f7fe fa77 	bl	1adc4 <d_type>
   1c8d6:	2300      	movs	r3, #0
   1c8d8:	4602      	mov	r2, r0
   1c8da:	210a      	movs	r1, #10
   1c8dc:	e747      	b.n	1c76e <d_special_name+0x202>
   1c8de:	310f      	adds	r1, #15
   1c8e0:	62c1      	str	r1, [r0, #44]	; 0x2c
   1c8e2:	f7fe fa6f 	bl	1adc4 <d_type>
   1c8e6:	2300      	movs	r3, #0
   1c8e8:	4602      	mov	r2, r0
   1c8ea:	2109      	movs	r1, #9
   1c8ec:	e73f      	b.n	1c76e <d_special_name+0x202>
   1c8ee:	f000 f877 	bl	1c9e0 <d_name>
   1c8f2:	2300      	movs	r3, #0
   1c8f4:	4602      	mov	r2, r0
   1c8f6:	2115      	movs	r1, #21
   1c8f8:	e739      	b.n	1c76e <d_special_name+0x202>
   1c8fa:	2100      	movs	r1, #0
   1c8fc:	f7fd fec2 	bl	1a684 <d_call_offset>
   1c900:	2800      	cmp	r0, #0
   1c902:	f43f ae6a 	beq.w	1c5da <d_special_name+0x6e>
   1c906:	2100      	movs	r1, #0
   1c908:	4620      	mov	r0, r4
   1c90a:	f7fd febb 	bl	1a684 <d_call_offset>
   1c90e:	2800      	cmp	r0, #0
   1c910:	f43f ae63 	beq.w	1c5da <d_special_name+0x6e>
   1c914:	68e3      	ldr	r3, [r4, #12]
   1c916:	781b      	ldrb	r3, [r3, #0]
   1c918:	2b47      	cmp	r3, #71	; 0x47
   1c91a:	d05c      	beq.n	1c9d6 <d_special_name+0x46a>
   1c91c:	2b54      	cmp	r3, #84	; 0x54
   1c91e:	d05a      	beq.n	1c9d6 <d_special_name+0x46a>
   1c920:	2100      	movs	r1, #0
   1c922:	4620      	mov	r0, r4
   1c924:	f000 f9aa 	bl	1cc7c <d_encoding.part.0>
   1c928:	4602      	mov	r2, r0
   1c92a:	2300      	movs	r3, #0
   1c92c:	2111      	movs	r1, #17
   1c92e:	e71e      	b.n	1c76e <d_special_name+0x202>
   1c930:	f7fe fa48 	bl	1adc4 <d_type>
   1c934:	2300      	movs	r3, #0
   1c936:	4602      	mov	r2, r0
   1c938:	2112      	movs	r1, #18
   1c93a:	e718      	b.n	1c76e <d_special_name+0x202>
   1c93c:	f7fe fa42 	bl	1adc4 <d_type>
   1c940:	2300      	movs	r3, #0
   1c942:	4602      	mov	r2, r0
   1c944:	210c      	movs	r1, #12
   1c946:	e712      	b.n	1c76e <d_special_name+0x202>
   1c948:	f7fe fa3c 	bl	1adc4 <d_type>
   1c94c:	2300      	movs	r3, #0
   1c94e:	4602      	mov	r2, r0
   1c950:	210d      	movs	r1, #13
   1c952:	e70c      	b.n	1c76e <d_special_name+0x202>
   1c954:	46b4      	mov	ip, r6
   1c956:	2100      	movs	r1, #0
   1c958:	e004      	b.n	1c964 <d_special_name+0x3f8>
   1c95a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   1c95e:	b123      	cbz	r3, 1c96a <d_special_name+0x3fe>
   1c960:	2b24      	cmp	r3, #36	; 0x24
   1c962:	d002      	beq.n	1c96a <d_special_name+0x3fe>
   1c964:	3101      	adds	r1, #1
   1c966:	42a9      	cmp	r1, r5
   1c968:	dbf7      	blt.n	1c95a <d_special_name+0x3ee>
   1c96a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
   1c96e:	4283      	cmp	r3, r0
   1c970:	da1c      	bge.n	1c9ac <d_special_name+0x440>
   1c972:	6920      	ldr	r0, [r4, #16]
   1c974:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1c978:	3301      	adds	r3, #1
   1c97a:	6163      	str	r3, [r4, #20]
   1c97c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1c980:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1c984:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
   1c988:	e9c3 6103 	strd	r6, r1, [r3, #12]
   1c98c:	68e6      	ldr	r6, [r4, #12]
   1c98e:	1a6d      	subs	r5, r5, r1
   1c990:	440e      	add	r6, r1
   1c992:	e65d      	b.n	1c650 <d_special_name+0xe4>
   1c994:	461a      	mov	r2, r3
   1c996:	e666      	b.n	1c666 <d_special_name+0xfa>
   1c998:	212e      	movs	r1, #46	; 0x2e
   1c99a:	e646      	b.n	1c62a <d_special_name+0xbe>
   1c99c:	212f      	movs	r1, #47	; 0x2f
   1c99e:	e644      	b.n	1c62a <d_special_name+0xbe>
   1c9a0:	2100      	movs	r1, #0
   1c9a2:	4620      	mov	r0, r4
   1c9a4:	f000 f96a 	bl	1cc7c <d_encoding.part.0>
   1c9a8:	4602      	mov	r2, r0
   1c9aa:	e6f9      	b.n	1c7a0 <d_special_name+0x234>
   1c9ac:	68e3      	ldr	r3, [r4, #12]
   1c9ae:	440b      	add	r3, r1
   1c9b0:	60e3      	str	r3, [r4, #12]
   1c9b2:	e612      	b.n	1c5da <d_special_name+0x6e>
   1c9b4:	2500      	movs	r5, #0
   1c9b6:	e711      	b.n	1c7dc <d_special_name+0x270>
   1c9b8:	4620      	mov	r0, r4
   1c9ba:	f7ff fdd7 	bl	1c56c <d_special_name>
   1c9be:	4602      	mov	r2, r0
   1c9c0:	e77c      	b.n	1c8bc <d_special_name+0x350>
   1c9c2:	4620      	mov	r0, r4
   1c9c4:	f7ff fdd2 	bl	1c56c <d_special_name>
   1c9c8:	4602      	mov	r2, r0
   1c9ca:	e761      	b.n	1c890 <d_special_name+0x324>
   1c9cc:	4620      	mov	r0, r4
   1c9ce:	f7ff fdcd 	bl	1c56c <d_special_name>
   1c9d2:	4602      	mov	r2, r0
   1c9d4:	e720      	b.n	1c818 <d_special_name+0x2ac>
   1c9d6:	4620      	mov	r0, r4
   1c9d8:	f7ff fdc8 	bl	1c56c <d_special_name>
   1c9dc:	4602      	mov	r2, r0
   1c9de:	e7a4      	b.n	1c92a <d_special_name+0x3be>

0001c9e0 <d_name>:
   1c9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9e2:	68c2      	ldr	r2, [r0, #12]
   1c9e4:	7813      	ldrb	r3, [r2, #0]
   1c9e6:	3b4e      	subs	r3, #78	; 0x4e
   1c9e8:	b083      	sub	sp, #12
   1c9ea:	4604      	mov	r4, r0
   1c9ec:	2b0c      	cmp	r3, #12
   1c9ee:	d808      	bhi.n	1ca02 <d_name+0x22>
   1c9f0:	e8df f003 	tbb	[pc, r3]
   1c9f4:	07070731 	.word	0x07070731
   1c9f8:	12071707 	.word	0x12071707
   1c9fc:	07070707 	.word	0x07070707
   1ca00:	55          	.byte	0x55
   1ca01:	00          	.byte	0x00
   1ca02:	f7fe ff35 	bl	1b870 <d_unqualified_name>
   1ca06:	68e3      	ldr	r3, [r4, #12]
   1ca08:	781a      	ldrb	r2, [r3, #0]
   1ca0a:	2a49      	cmp	r2, #73	; 0x49
   1ca0c:	4605      	mov	r5, r0
   1ca0e:	f000 80d2 	beq.w	1cbb6 <d_name+0x1d6>
   1ca12:	4628      	mov	r0, r5
   1ca14:	b003      	add	sp, #12
   1ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca18:	b003      	add	sp, #12
   1ca1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ca1e:	f7fe bf27 	b.w	1b870 <d_unqualified_name>
   1ca22:	7853      	ldrb	r3, [r2, #1]
   1ca24:	2b74      	cmp	r3, #116	; 0x74
   1ca26:	f000 808e 	beq.w	1cb46 <d_name+0x166>
   1ca2a:	2100      	movs	r1, #0
   1ca2c:	f7fe f900 	bl	1ac30 <d_substitution>
   1ca30:	68e3      	ldr	r3, [r4, #12]
   1ca32:	781a      	ldrb	r2, [r3, #0]
   1ca34:	2a49      	cmp	r2, #73	; 0x49
   1ca36:	4605      	mov	r5, r0
   1ca38:	d1eb      	bne.n	1ca12 <d_name+0x32>
   1ca3a:	3301      	adds	r3, #1
   1ca3c:	60e3      	str	r3, [r4, #12]
   1ca3e:	4620      	mov	r0, r4
   1ca40:	f7ff f972 	bl	1bd28 <d_template_args_1>
   1ca44:	4603      	mov	r3, r0
   1ca46:	462a      	mov	r2, r5
   1ca48:	2104      	movs	r1, #4
   1ca4a:	4620      	mov	r0, r4
   1ca4c:	b003      	add	sp, #12
   1ca4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ca52:	f7fd bd65 	b.w	1a520 <d_make_comp>
   1ca56:	3201      	adds	r2, #1
   1ca58:	60c2      	str	r2, [r0, #12]
   1ca5a:	a901      	add	r1, sp, #4
   1ca5c:	2201      	movs	r2, #1
   1ca5e:	f7ff fcdb 	bl	1c418 <d_cv_qualifiers>
   1ca62:	4605      	mov	r5, r0
   1ca64:	2800      	cmp	r0, #0
   1ca66:	f000 80b7 	beq.w	1cbd8 <d_name+0x1f8>
   1ca6a:	2100      	movs	r1, #0
   1ca6c:	4620      	mov	r0, r4
   1ca6e:	f7fd fe2d 	bl	1a6cc <d_ref_qualifier>
   1ca72:	2101      	movs	r1, #1
   1ca74:	4606      	mov	r6, r0
   1ca76:	4620      	mov	r0, r4
   1ca78:	f7ff f988 	bl	1bd8c <d_prefix>
   1ca7c:	6028      	str	r0, [r5, #0]
   1ca7e:	2800      	cmp	r0, #0
   1ca80:	f000 80aa 	beq.w	1cbd8 <d_name+0x1f8>
   1ca84:	b116      	cbz	r6, 1ca8c <d_name+0xac>
   1ca86:	9b01      	ldr	r3, [sp, #4]
   1ca88:	60f3      	str	r3, [r6, #12]
   1ca8a:	9601      	str	r6, [sp, #4]
   1ca8c:	68e3      	ldr	r3, [r4, #12]
   1ca8e:	781a      	ldrb	r2, [r3, #0]
   1ca90:	2a45      	cmp	r2, #69	; 0x45
   1ca92:	f040 80a1 	bne.w	1cbd8 <d_name+0x1f8>
   1ca96:	3301      	adds	r3, #1
   1ca98:	9d01      	ldr	r5, [sp, #4]
   1ca9a:	60e3      	str	r3, [r4, #12]
   1ca9c:	e7b9      	b.n	1ca12 <d_name+0x32>
   1ca9e:	1c53      	adds	r3, r2, #1
   1caa0:	60c3      	str	r3, [r0, #12]
   1caa2:	7853      	ldrb	r3, [r2, #1]
   1caa4:	2b47      	cmp	r3, #71	; 0x47
   1caa6:	d002      	beq.n	1caae <d_name+0xce>
   1caa8:	2b54      	cmp	r3, #84	; 0x54
   1caaa:	f040 8099 	bne.w	1cbe0 <d_name+0x200>
   1caae:	4620      	mov	r0, r4
   1cab0:	f7ff fd5c 	bl	1c56c <d_special_name>
   1cab4:	4605      	mov	r5, r0
   1cab6:	2d00      	cmp	r5, #0
   1cab8:	f000 808e 	beq.w	1cbd8 <d_name+0x1f8>
   1cabc:	68e3      	ldr	r3, [r4, #12]
   1cabe:	781a      	ldrb	r2, [r3, #0]
   1cac0:	2a45      	cmp	r2, #69	; 0x45
   1cac2:	f040 8089 	bne.w	1cbd8 <d_name+0x1f8>
   1cac6:	1c5a      	adds	r2, r3, #1
   1cac8:	60e2      	str	r2, [r4, #12]
   1caca:	785a      	ldrb	r2, [r3, #1]
   1cacc:	2a73      	cmp	r2, #115	; 0x73
   1cace:	f000 80ad 	beq.w	1cc2c <d_name+0x24c>
   1cad2:	2a64      	cmp	r2, #100	; 0x64
   1cad4:	f000 8089 	beq.w	1cbea <d_name+0x20a>
   1cad8:	4620      	mov	r0, r4
   1cada:	f7ff ff81 	bl	1c9e0 <d_name>
   1cade:	4603      	mov	r3, r0
   1cae0:	b328      	cbz	r0, 1cb2e <d_name+0x14e>
   1cae2:	7802      	ldrb	r2, [r0, #0]
   1cae4:	2a47      	cmp	r2, #71	; 0x47
   1cae6:	d022      	beq.n	1cb2e <d_name+0x14e>
   1cae8:	2a49      	cmp	r2, #73	; 0x49
   1caea:	d020      	beq.n	1cb2e <d_name+0x14e>
   1caec:	461f      	mov	r7, r3
   1caee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1caf2:	4620      	mov	r0, r4
   1caf4:	f7fd fe7e 	bl	1a7f4 <d_discriminator>
   1caf8:	2800      	cmp	r0, #0
   1cafa:	d06d      	beq.n	1cbd8 <d_name+0x1f8>
   1cafc:	1c73      	adds	r3, r6, #1
   1cafe:	bf08      	it	eq
   1cb00:	463b      	moveq	r3, r7
   1cb02:	d014      	beq.n	1cb2e <d_name+0x14e>
   1cb04:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1cb08:	429a      	cmp	r2, r3
   1cb0a:	f280 80b0 	bge.w	1cc6e <d_name+0x28e>
   1cb0e:	6921      	ldr	r1, [r4, #16]
   1cb10:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1cb14:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   1cb18:	3201      	adds	r2, #1
   1cb1a:	f04f 0c00 	mov.w	ip, #0
   1cb1e:	e9c3 cc01 	strd	ip, ip, [r3, #4]
   1cb22:	6162      	str	r2, [r4, #20]
   1cb24:	2248      	movs	r2, #72	; 0x48
   1cb26:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
   1cb2a:	e9c3 7603 	strd	r7, r6, [r3, #12]
   1cb2e:	782a      	ldrb	r2, [r5, #0]
   1cb30:	2a03      	cmp	r2, #3
   1cb32:	d105      	bne.n	1cb40 <d_name+0x160>
   1cb34:	692a      	ldr	r2, [r5, #16]
   1cb36:	7811      	ldrb	r1, [r2, #0]
   1cb38:	2929      	cmp	r1, #41	; 0x29
   1cb3a:	bf04      	itt	eq
   1cb3c:	2100      	moveq	r1, #0
   1cb3e:	60d1      	streq	r1, [r2, #12]
   1cb40:	462a      	mov	r2, r5
   1cb42:	2102      	movs	r1, #2
   1cb44:	e781      	b.n	1ca4a <d_name+0x6a>
   1cb46:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
   1cb4a:	3202      	adds	r2, #2
   1cb4c:	428b      	cmp	r3, r1
   1cb4e:	60c2      	str	r2, [r0, #12]
   1cb50:	f280 8088 	bge.w	1cc64 <d_name+0x284>
   1cb54:	6902      	ldr	r2, [r0, #16]
   1cb56:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1cb5a:	00a9      	lsls	r1, r5, #2
   1cb5c:	3301      	adds	r3, #1
   1cb5e:	6143      	str	r3, [r0, #20]
   1cb60:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1cb64:	2300      	movs	r3, #0
   1cb66:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1cb6a:	5453      	strb	r3, [r2, r1]
   1cb6c:	4a41      	ldr	r2, [pc, #260]	; (1cc74 <d_name+0x294>)
   1cb6e:	2303      	movs	r3, #3
   1cb70:	e9c5 2303 	strd	r2, r3, [r5, #12]
   1cb74:	4620      	mov	r0, r4
   1cb76:	f7fe fe7b 	bl	1b870 <d_unqualified_name>
   1cb7a:	462a      	mov	r2, r5
   1cb7c:	4603      	mov	r3, r0
   1cb7e:	2101      	movs	r1, #1
   1cb80:	4620      	mov	r0, r4
   1cb82:	f7fd fccd 	bl	1a520 <d_make_comp>
   1cb86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1cb88:	68e3      	ldr	r3, [r4, #12]
   1cb8a:	3203      	adds	r2, #3
   1cb8c:	62e2      	str	r2, [r4, #44]	; 0x2c
   1cb8e:	781a      	ldrb	r2, [r3, #0]
   1cb90:	2a49      	cmp	r2, #73	; 0x49
   1cb92:	4605      	mov	r5, r0
   1cb94:	f47f af3d 	bne.w	1ca12 <d_name+0x32>
   1cb98:	b1f0      	cbz	r0, 1cbd8 <d_name+0x1f8>
   1cb9a:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1cb9e:	428a      	cmp	r2, r1
   1cba0:	da1a      	bge.n	1cbd8 <d_name+0x1f8>
   1cba2:	69e1      	ldr	r1, [r4, #28]
   1cba4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1cba8:	3201      	adds	r2, #1
   1cbaa:	6222      	str	r2, [r4, #32]
   1cbac:	781a      	ldrb	r2, [r3, #0]
   1cbae:	3a49      	subs	r2, #73	; 0x49
   1cbb0:	2a01      	cmp	r2, #1
   1cbb2:	d80f      	bhi.n	1cbd4 <d_name+0x1f4>
   1cbb4:	e741      	b.n	1ca3a <d_name+0x5a>
   1cbb6:	b178      	cbz	r0, 1cbd8 <d_name+0x1f8>
   1cbb8:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1cbbc:	428a      	cmp	r2, r1
   1cbbe:	da0b      	bge.n	1cbd8 <d_name+0x1f8>
   1cbc0:	69e1      	ldr	r1, [r4, #28]
   1cbc2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1cbc6:	3201      	adds	r2, #1
   1cbc8:	6222      	str	r2, [r4, #32]
   1cbca:	781a      	ldrb	r2, [r3, #0]
   1cbcc:	3a49      	subs	r2, #73	; 0x49
   1cbce:	2a01      	cmp	r2, #1
   1cbd0:	f67f af33 	bls.w	1ca3a <d_name+0x5a>
   1cbd4:	2300      	movs	r3, #0
   1cbd6:	e736      	b.n	1ca46 <d_name+0x66>
   1cbd8:	2500      	movs	r5, #0
   1cbda:	4628      	mov	r0, r5
   1cbdc:	b003      	add	sp, #12
   1cbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cbe0:	2100      	movs	r1, #0
   1cbe2:	f000 f84b 	bl	1cc7c <d_encoding.part.0>
   1cbe6:	4605      	mov	r5, r0
   1cbe8:	e765      	b.n	1cab6 <d_name+0xd6>
   1cbea:	1c9a      	adds	r2, r3, #2
   1cbec:	60e2      	str	r2, [r4, #12]
   1cbee:	789a      	ldrb	r2, [r3, #2]
   1cbf0:	2a5f      	cmp	r2, #95	; 0x5f
   1cbf2:	d039      	beq.n	1cc68 <d_name+0x288>
   1cbf4:	2a6e      	cmp	r2, #110	; 0x6e
   1cbf6:	d0ef      	beq.n	1cbd8 <d_name+0x1f8>
   1cbf8:	4620      	mov	r0, r4
   1cbfa:	f7fd fd09 	bl	1a610 <d_number>
   1cbfe:	1c46      	adds	r6, r0, #1
   1cc00:	d4ea      	bmi.n	1cbd8 <d_name+0x1f8>
   1cc02:	68e3      	ldr	r3, [r4, #12]
   1cc04:	781a      	ldrb	r2, [r3, #0]
   1cc06:	2a5f      	cmp	r2, #95	; 0x5f
   1cc08:	d1e6      	bne.n	1cbd8 <d_name+0x1f8>
   1cc0a:	3301      	adds	r3, #1
   1cc0c:	60e3      	str	r3, [r4, #12]
   1cc0e:	4620      	mov	r0, r4
   1cc10:	f7ff fee6 	bl	1c9e0 <d_name>
   1cc14:	4607      	mov	r7, r0
   1cc16:	2800      	cmp	r0, #0
   1cc18:	f43f af74 	beq.w	1cb04 <d_name+0x124>
   1cc1c:	783b      	ldrb	r3, [r7, #0]
   1cc1e:	2b47      	cmp	r3, #71	; 0x47
   1cc20:	f43f af70 	beq.w	1cb04 <d_name+0x124>
   1cc24:	2b49      	cmp	r3, #73	; 0x49
   1cc26:	f43f af6d 	beq.w	1cb04 <d_name+0x124>
   1cc2a:	e762      	b.n	1caf2 <d_name+0x112>
   1cc2c:	3302      	adds	r3, #2
   1cc2e:	60e3      	str	r3, [r4, #12]
   1cc30:	4620      	mov	r0, r4
   1cc32:	f7fd fddf 	bl	1a7f4 <d_discriminator>
   1cc36:	2800      	cmp	r0, #0
   1cc38:	d0ce      	beq.n	1cbd8 <d_name+0x1f8>
   1cc3a:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1cc3e:	429a      	cmp	r2, r3
   1cc40:	da15      	bge.n	1cc6e <d_name+0x28e>
   1cc42:	6921      	ldr	r1, [r4, #16]
   1cc44:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1cc48:	0098      	lsls	r0, r3, #2
   1cc4a:	3201      	adds	r2, #1
   1cc4c:	6162      	str	r2, [r4, #20]
   1cc4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1cc52:	2200      	movs	r2, #0
   1cc54:	e9c3 2201 	strd	r2, r2, [r3, #4]
   1cc58:	540a      	strb	r2, [r1, r0]
   1cc5a:	4907      	ldr	r1, [pc, #28]	; (1cc78 <d_name+0x298>)
   1cc5c:	220e      	movs	r2, #14
   1cc5e:	e9c3 1203 	strd	r1, r2, [r3, #12]
   1cc62:	e764      	b.n	1cb2e <d_name+0x14e>
   1cc64:	2500      	movs	r5, #0
   1cc66:	e785      	b.n	1cb74 <d_name+0x194>
   1cc68:	3303      	adds	r3, #3
   1cc6a:	2600      	movs	r6, #0
   1cc6c:	e7ce      	b.n	1cc0c <d_name+0x22c>
   1cc6e:	2300      	movs	r3, #0
   1cc70:	e75d      	b.n	1cb2e <d_name+0x14e>
   1cc72:	bf00      	nop
   1cc74:	20004b4c 	.word	0x20004b4c
   1cc78:	20004b3c 	.word	0x20004b3c

0001cc7c <d_encoding.part.0>:
   1cc7c:	b570      	push	{r4, r5, r6, lr}
   1cc7e:	4605      	mov	r5, r0
   1cc80:	460e      	mov	r6, r1
   1cc82:	f7ff fead 	bl	1c9e0 <d_name>
   1cc86:	b300      	cbz	r0, 1ccca <d_encoding.part.0+0x4e>
   1cc88:	4604      	mov	r4, r0
   1cc8a:	b30e      	cbz	r6, 1ccd0 <d_encoding.part.0+0x54>
   1cc8c:	68ab      	ldr	r3, [r5, #8]
   1cc8e:	07db      	lsls	r3, r3, #31
   1cc90:	d41e      	bmi.n	1ccd0 <d_encoding.part.0+0x54>
   1cc92:	7823      	ldrb	r3, [r4, #0]
   1cc94:	2b4e      	cmp	r3, #78	; 0x4e
   1cc96:	f1a3 011c 	sub.w	r1, r3, #28
   1cc9a:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1cc9e:	d03a      	beq.n	1cd16 <d_encoding.part.0+0x9a>
   1cca0:	d837      	bhi.n	1cd12 <d_encoding.part.0+0x96>
   1cca2:	2904      	cmp	r1, #4
   1cca4:	d937      	bls.n	1cd16 <d_encoding.part.0+0x9a>
   1cca6:	2b02      	cmp	r3, #2
   1cca8:	d110      	bne.n	1cccc <d_encoding.part.0+0x50>
   1ccaa:	6923      	ldr	r3, [r4, #16]
   1ccac:	b16b      	cbz	r3, 1ccca <d_encoding.part.0+0x4e>
   1ccae:	781a      	ldrb	r2, [r3, #0]
   1ccb0:	2a4e      	cmp	r2, #78	; 0x4e
   1ccb2:	f1a2 001c 	sub.w	r0, r2, #28
   1ccb6:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
   1ccba:	d002      	beq.n	1ccc2 <d_encoding.part.0+0x46>
   1ccbc:	d83d      	bhi.n	1cd3a <d_encoding.part.0+0xbe>
   1ccbe:	2804      	cmp	r0, #4
   1ccc0:	d804      	bhi.n	1cccc <d_encoding.part.0+0x50>
   1ccc2:	68db      	ldr	r3, [r3, #12]
   1ccc4:	6123      	str	r3, [r4, #16]
   1ccc6:	2b00      	cmp	r3, #0
   1ccc8:	d1f1      	bne.n	1ccae <d_encoding.part.0+0x32>
   1ccca:	2400      	movs	r4, #0
   1cccc:	4620      	mov	r0, r4
   1ccce:	bd70      	pop	{r4, r5, r6, pc}
   1ccd0:	68eb      	ldr	r3, [r5, #12]
   1ccd2:	781b      	ldrb	r3, [r3, #0]
   1ccd4:	2b00      	cmp	r3, #0
   1ccd6:	d0f9      	beq.n	1cccc <d_encoding.part.0+0x50>
   1ccd8:	2b45      	cmp	r3, #69	; 0x45
   1ccda:	d0f7      	beq.n	1cccc <d_encoding.part.0+0x50>
   1ccdc:	4621      	mov	r1, r4
   1ccde:	780b      	ldrb	r3, [r1, #0]
   1cce0:	2b04      	cmp	r3, #4
   1cce2:	d02d      	beq.n	1cd40 <d_encoding.part.0+0xc4>
   1cce4:	d81e      	bhi.n	1cd24 <d_encoding.part.0+0xa8>
   1cce6:	2b02      	cmp	r3, #2
   1cce8:	d11a      	bne.n	1cd20 <d_encoding.part.0+0xa4>
   1ccea:	6909      	ldr	r1, [r1, #16]
   1ccec:	2900      	cmp	r1, #0
   1ccee:	d1f6      	bne.n	1ccde <d_encoding.part.0+0x62>
   1ccf0:	4628      	mov	r0, r5
   1ccf2:	f7fe fcdf 	bl	1b6b4 <d_bare_function_type>
   1ccf6:	2800      	cmp	r0, #0
   1ccf8:	d0e7      	beq.n	1ccca <d_encoding.part.0+0x4e>
   1ccfa:	b916      	cbnz	r6, 1cd02 <d_encoding.part.0+0x86>
   1ccfc:	7823      	ldrb	r3, [r4, #0]
   1ccfe:	2b02      	cmp	r3, #2
   1cd00:	d032      	beq.n	1cd68 <d_encoding.part.0+0xec>
   1cd02:	4603      	mov	r3, r0
   1cd04:	4622      	mov	r2, r4
   1cd06:	4628      	mov	r0, r5
   1cd08:	2103      	movs	r1, #3
   1cd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cd0e:	f7fd bc07 	b.w	1a520 <d_make_comp>
   1cd12:	2a01      	cmp	r2, #1
   1cd14:	d8da      	bhi.n	1cccc <d_encoding.part.0+0x50>
   1cd16:	68e4      	ldr	r4, [r4, #12]
   1cd18:	e7bb      	b.n	1cc92 <d_encoding.part.0+0x16>
   1cd1a:	3b1c      	subs	r3, #28
   1cd1c:	2b04      	cmp	r3, #4
   1cd1e:	d908      	bls.n	1cd32 <d_encoding.part.0+0xb6>
   1cd20:	2100      	movs	r1, #0
   1cd22:	e7e5      	b.n	1ccf0 <d_encoding.part.0+0x74>
   1cd24:	2b4e      	cmp	r3, #78	; 0x4e
   1cd26:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1cd2a:	d002      	beq.n	1cd32 <d_encoding.part.0+0xb6>
   1cd2c:	d9f5      	bls.n	1cd1a <d_encoding.part.0+0x9e>
   1cd2e:	2a01      	cmp	r2, #1
   1cd30:	d8f6      	bhi.n	1cd20 <d_encoding.part.0+0xa4>
   1cd32:	68c9      	ldr	r1, [r1, #12]
   1cd34:	2900      	cmp	r1, #0
   1cd36:	d1d2      	bne.n	1ccde <d_encoding.part.0+0x62>
   1cd38:	e7da      	b.n	1ccf0 <d_encoding.part.0+0x74>
   1cd3a:	2901      	cmp	r1, #1
   1cd3c:	d8c6      	bhi.n	1cccc <d_encoding.part.0+0x50>
   1cd3e:	e7c0      	b.n	1ccc2 <d_encoding.part.0+0x46>
   1cd40:	68cb      	ldr	r3, [r1, #12]
   1cd42:	b15b      	cbz	r3, 1cd5c <d_encoding.part.0+0xe0>
   1cd44:	7819      	ldrb	r1, [r3, #0]
   1cd46:	2908      	cmp	r1, #8
   1cd48:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   1cd4c:	d808      	bhi.n	1cd60 <d_encoding.part.0+0xe4>
   1cd4e:	2906      	cmp	r1, #6
   1cd50:	d8e6      	bhi.n	1cd20 <d_encoding.part.0+0xa4>
   1cd52:	2a01      	cmp	r2, #1
   1cd54:	d802      	bhi.n	1cd5c <d_encoding.part.0+0xe0>
   1cd56:	691b      	ldr	r3, [r3, #16]
   1cd58:	2b00      	cmp	r3, #0
   1cd5a:	d1f3      	bne.n	1cd44 <d_encoding.part.0+0xc8>
   1cd5c:	2101      	movs	r1, #1
   1cd5e:	e7c7      	b.n	1ccf0 <d_encoding.part.0+0x74>
   1cd60:	3935      	subs	r1, #53	; 0x35
   1cd62:	bf18      	it	ne
   1cd64:	2101      	movne	r1, #1
   1cd66:	e7c3      	b.n	1ccf0 <d_encoding.part.0+0x74>
   1cd68:	7803      	ldrb	r3, [r0, #0]
   1cd6a:	2b29      	cmp	r3, #41	; 0x29
   1cd6c:	bf08      	it	eq
   1cd6e:	60c6      	streq	r6, [r0, #12]
   1cd70:	e7c7      	b.n	1cd02 <d_encoding.part.0+0x86>
   1cd72:	bf00      	nop

0001cd74 <d_print_comp_inner>:
   1cd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd78:	4604      	mov	r4, r0
   1cd7a:	b095      	sub	sp, #84	; 0x54
   1cd7c:	2a00      	cmp	r2, #0
   1cd7e:	d066      	beq.n	1ce4e <d_print_comp_inner+0xda>
   1cd80:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
   1cd84:	2d00      	cmp	r5, #0
   1cd86:	d165      	bne.n	1ce54 <d_print_comp_inner+0xe0>
   1cd88:	7817      	ldrb	r7, [r2, #0]
   1cd8a:	4616      	mov	r6, r2
   1cd8c:	2f51      	cmp	r7, #81	; 0x51
   1cd8e:	d85e      	bhi.n	1ce4e <d_print_comp_inner+0xda>
   1cd90:	e8df f017 	tbh	[pc, r7, lsl #1]
   1cd94:	011b095c 	.word	0x011b095c
   1cd98:	04ee011b 	.word	0x04ee011b
   1cd9c:	02de0898 	.word	0x02de0898
   1cda0:	0097044a 	.word	0x0097044a
   1cda4:	08f9008b 	.word	0x08f9008b
   1cda8:	03a608d2 	.word	0x03a608d2
   1cdac:	019101b8 	.word	0x019101b8
   1cdb0:	0747016a 	.word	0x0747016a
   1cdb4:	06f90720 	.word	0x06f90720
   1cdb8:	07bc07e3 	.word	0x07bc07e3
   1cdbc:	076e0795 	.word	0x076e0795
   1cdc0:	0423037f 	.word	0x0423037f
   1cdc4:	009903f8 	.word	0x009903f8
   1cdc8:	00990099 	.word	0x00990099
   1cdcc:	00630063 	.word	0x00630063
   1cdd0:	00630063 	.word	0x00630063
   1cdd4:	00630063 	.word	0x00630063
   1cdd8:	00c50063 	.word	0x00c50063
   1cddc:	006300c5 	.word	0x006300c5
   1cde0:	09870063 	.word	0x09870063
   1cde4:	04c80083 	.word	0x04c80083
   1cde8:	00af068d 	.word	0x00af068d
   1cdec:	00af066b 	.word	0x00af066b
   1cdf0:	00e600e6 	.word	0x00e600e6
   1cdf4:	03340358 	.word	0x03340358
   1cdf8:	0831030a 	.word	0x0831030a
   1cdfc:	080a005d 	.word	0x080a005d
   1ce00:	06460663 	.word	0x06460663
   1ce04:	005d05eb 	.word	0x005d05eb
   1ce08:	005d0920 	.word	0x005d0920
   1ce0c:	012a005d 	.word	0x012a005d
   1ce10:	0455012a 	.word	0x0455012a
   1ce14:	0858085e 	.word	0x0858085e
   1ce18:	047804ba 	.word	0x047804ba
   1ce1c:	05c4054f 	.word	0x05c4054f
   1ce20:	0576059d 	.word	0x0576059d
   1ce24:	02a4005d 	.word	0x02a4005d
   1ce28:	0256027d 	.word	0x0256027d
   1ce2c:	01df020a 	.word	0x01df020a
   1ce30:	03cd0063 	.word	0x03cd0063
   1ce34:	00630063 	.word	0x00630063
   1ce38:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1ce3c:	2900      	cmp	r1, #0
   1ce3e:	f2c1 8425 	blt.w	1e68c <d_print_comp_inner+0x1918>
   1ce42:	f7fd fcfb 	bl	1a83c <d_index_template_argument.part.0>
   1ce46:	4602      	mov	r2, r0
   1ce48:	2800      	cmp	r0, #0
   1ce4a:	f041 841f 	bne.w	1e68c <d_print_comp_inner+0x1918>
   1ce4e:	2301      	movs	r3, #1
   1ce50:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1ce54:	b015      	add	sp, #84	; 0x54
   1ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce5a:	2200      	movs	r2, #0
   1ce5c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1ce60:	9304      	str	r3, [sp, #16]
   1ce62:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1ce66:	9307      	str	r3, [sp, #28]
   1ce68:	ab04      	add	r3, sp, #16
   1ce6a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1ce6e:	2300      	movs	r3, #0
   1ce70:	9605      	str	r6, [sp, #20]
   1ce72:	9306      	str	r3, [sp, #24]
   1ce74:	2a00      	cmp	r2, #0
   1ce76:	f001 87e6 	beq.w	1ee46 <d_print_comp_inner+0x20d2>
   1ce7a:	2111      	movs	r1, #17
   1ce7c:	4620      	mov	r0, r4
   1ce7e:	f001 fff3 	bl	1ee68 <d_print_comp>
   1ce82:	9b06      	ldr	r3, [sp, #24]
   1ce84:	2b00      	cmp	r3, #0
   1ce86:	f001 82e9 	beq.w	1e45c <d_print_comp_inner+0x16e8>
   1ce8a:	9b04      	ldr	r3, [sp, #16]
   1ce8c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1ce90:	2d00      	cmp	r5, #0
   1ce92:	d0df      	beq.n	1ce54 <d_print_comp_inner+0xe0>
   1ce94:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
   1ce98:	e7dc      	b.n	1ce54 <d_print_comp_inner+0xe0>
   1ce9a:	68f2      	ldr	r2, [r6, #12]
   1ce9c:	2111      	movs	r1, #17
   1ce9e:	4620      	mov	r0, r4
   1cea0:	b015      	add	sp, #84	; 0x54
   1cea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cea6:	f001 bfdf 	b.w	1ee68 <d_print_comp>
   1ceaa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ceae:	29ff      	cmp	r1, #255	; 0xff
   1ceb0:	f001 855f 	beq.w	1e972 <d_print_comp_inner+0x1bfe>
   1ceb4:	1c4a      	adds	r2, r1, #1
   1ceb6:	237e      	movs	r3, #126	; 0x7e
   1ceb8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1cebc:	5463      	strb	r3, [r4, r1]
   1cebe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1cec2:	6932      	ldr	r2, [r6, #16]
   1cec4:	e7ea      	b.n	1ce9c <d_print_comp_inner+0x128>
   1cec6:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1ceca:	f1bc 0f00 	cmp.w	ip, #0
   1cece:	d00e      	beq.n	1ceee <d_print_comp_inner+0x17a>
   1ced0:	4663      	mov	r3, ip
   1ced2:	6899      	ldr	r1, [r3, #8]
   1ced4:	b941      	cbnz	r1, 1cee8 <d_print_comp_inner+0x174>
   1ced6:	685a      	ldr	r2, [r3, #4]
   1ced8:	7812      	ldrb	r2, [r2, #0]
   1ceda:	f1a2 0019 	sub.w	r0, r2, #25
   1cede:	2802      	cmp	r0, #2
   1cee0:	f201 84ef 	bhi.w	1e8c2 <d_print_comp_inner+0x1b4e>
   1cee4:	4297      	cmp	r7, r2
   1cee6:	d0d8      	beq.n	1ce9a <d_print_comp_inner+0x126>
   1cee8:	681b      	ldr	r3, [r3, #0]
   1ceea:	2b00      	cmp	r3, #0
   1ceec:	d1f1      	bne.n	1ced2 <d_print_comp_inner+0x15e>
   1ceee:	68f2      	ldr	r2, [r6, #12]
   1cef0:	e02b      	b.n	1cf4a <d_print_comp_inner+0x1d6>
   1cef2:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
   1cef6:	aa04      	add	r2, sp, #16
   1cef8:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1cefc:	2200      	movs	r2, #0
   1cefe:	e9cd 1604 	strd	r1, r6, [sp, #16]
   1cf02:	9206      	str	r2, [sp, #24]
   1cf04:	2111      	movs	r1, #17
   1cf06:	6932      	ldr	r2, [r6, #16]
   1cf08:	9307      	str	r3, [sp, #28]
   1cf0a:	f001 ffad 	bl	1ee68 <d_print_comp>
   1cf0e:	9b06      	ldr	r3, [sp, #24]
   1cf10:	2b00      	cmp	r3, #0
   1cf12:	f001 84c3 	beq.w	1e89c <d_print_comp_inner+0x1b28>
   1cf16:	9b04      	ldr	r3, [sp, #16]
   1cf18:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1cf1c:	e79a      	b.n	1ce54 <d_print_comp_inner+0xe0>
   1cf1e:	68d2      	ldr	r2, [r2, #12]
   1cf20:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   1cf24:	7813      	ldrb	r3, [r2, #0]
   1cf26:	2d00      	cmp	r5, #0
   1cf28:	f041 8370 	bne.w	1e60c <d_print_comp_inner+0x1898>
   1cf2c:	2b05      	cmp	r3, #5
   1cf2e:	f001 85d2 	beq.w	1ead6 <d_print_comp_inner+0x1d62>
   1cf32:	4610      	mov	r0, r2
   1cf34:	2b23      	cmp	r3, #35	; 0x23
   1cf36:	f001 82d8 	beq.w	1e4ea <d_print_comp_inner+0x1776>
   1cf3a:	429f      	cmp	r7, r3
   1cf3c:	f001 82d5 	beq.w	1e4ea <d_print_comp_inner+0x1776>
   1cf40:	2b24      	cmp	r3, #36	; 0x24
   1cf42:	f001 860a 	beq.w	1eb5a <d_print_comp_inner+0x1de6>
   1cf46:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1cf4a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1cf4e:	9307      	str	r3, [sp, #28]
   1cf50:	ab04      	add	r3, sp, #16
   1cf52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1cf56:	2300      	movs	r3, #0
   1cf58:	e9cd c604 	strd	ip, r6, [sp, #16]
   1cf5c:	9306      	str	r3, [sp, #24]
   1cf5e:	e78c      	b.n	1ce7a <d_print_comp_inner+0x106>
   1cf60:	68d2      	ldr	r2, [r2, #12]
   1cf62:	b112      	cbz	r2, 1cf6a <d_print_comp_inner+0x1f6>
   1cf64:	2111      	movs	r1, #17
   1cf66:	f001 ff7f 	bl	1ee68 <d_print_comp>
   1cf6a:	6933      	ldr	r3, [r6, #16]
   1cf6c:	2b00      	cmp	r3, #0
   1cf6e:	f43f af71 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1cf72:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   1cf76:	2dfd      	cmp	r5, #253	; 0xfd
   1cf78:	f201 84a7 	bhi.w	1e8ca <d_print_comp_inner+0x1b56>
   1cf7c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 1d304 <d_print_comp_inner+0x590>
   1cf80:	272c      	movs	r7, #44	; 0x2c
   1cf82:	f108 0a01 	add.w	sl, r8, #1
   1cf86:	f04f 0900 	mov.w	r9, #0
   1cf8a:	4629      	mov	r1, r5
   1cf8c:	e00b      	b.n	1cfa6 <d_print_comp_inner+0x232>
   1cf8e:	460b      	mov	r3, r1
   1cf90:	3101      	adds	r1, #1
   1cf92:	45d0      	cmp	r8, sl
   1cf94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cf98:	54e7      	strb	r7, [r4, r3]
   1cf9a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1cf9e:	f001 8264 	beq.w	1e46a <d_print_comp_inner+0x16f6>
   1cfa2:	f818 7f01 	ldrb.w	r7, [r8, #1]!
   1cfa6:	29ff      	cmp	r1, #255	; 0xff
   1cfa8:	d1f1      	bne.n	1cf8e <d_print_comp_inner+0x21a>
   1cfaa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cfae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cfb2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1cfb6:	4620      	mov	r0, r4
   1cfb8:	4798      	blx	r3
   1cfba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cfbe:	3301      	adds	r3, #1
   1cfc0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cfc4:	2101      	movs	r1, #1
   1cfc6:	2300      	movs	r3, #0
   1cfc8:	e7e3      	b.n	1cf92 <d_print_comp_inner+0x21e>
   1cfca:	68d2      	ldr	r2, [r2, #12]
   1cfcc:	2111      	movs	r1, #17
   1cfce:	f001 ff4b 	bl	1ee68 <d_print_comp>
   1cfd2:	49c7      	ldr	r1, [pc, #796]	; (1d2f0 <d_print_comp_inner+0x57c>)
   1cfd4:	4620      	mov	r0, r4
   1cfd6:	f7fd fd1b 	bl	1aa10 <d_append_string>
   1cfda:	6937      	ldr	r7, [r6, #16]
   1cfdc:	783b      	ldrb	r3, [r7, #0]
   1cfde:	2b48      	cmp	r3, #72	; 0x48
   1cfe0:	f001 808b 	beq.w	1e0fa <d_print_comp_inner+0x1386>
   1cfe4:	463a      	mov	r2, r7
   1cfe6:	e759      	b.n	1ce9c <d_print_comp_inner+0x128>
   1cfe8:	68d2      	ldr	r2, [r2, #12]
   1cfea:	7813      	ldrb	r3, [r2, #0]
   1cfec:	2b27      	cmp	r3, #39	; 0x27
   1cfee:	f041 835a 	bne.w	1e6a6 <d_print_comp_inner+0x1932>
   1cff2:	68d3      	ldr	r3, [r2, #12]
   1cff4:	7c1d      	ldrb	r5, [r3, #16]
   1cff6:	2d06      	cmp	r5, #6
   1cff8:	f201 827d 	bhi.w	1e4f6 <d_print_comp_inner+0x1782>
   1cffc:	2d00      	cmp	r5, #0
   1cffe:	f041 851c 	bne.w	1ea3a <d_print_comp_inner+0x1cc6>
   1d002:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d006:	29ff      	cmp	r1, #255	; 0xff
   1d008:	f001 84f0 	beq.w	1e9ec <d_print_comp_inner+0x1c78>
   1d00c:	1c4b      	adds	r3, r1, #1
   1d00e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d012:	2328      	movs	r3, #40	; 0x28
   1d014:	5463      	strb	r3, [r4, r1]
   1d016:	4620      	mov	r0, r4
   1d018:	2111      	movs	r1, #17
   1d01a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d01e:	f001 ff23 	bl	1ee68 <d_print_comp>
   1d022:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d026:	29ff      	cmp	r1, #255	; 0xff
   1d028:	f001 84f7 	beq.w	1ea1a <d_print_comp_inner+0x1ca6>
   1d02c:	1c4b      	adds	r3, r1, #1
   1d02e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d032:	2329      	movs	r3, #41	; 0x29
   1d034:	5463      	strb	r3, [r4, r1]
   1d036:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d03a:	7833      	ldrb	r3, [r6, #0]
   1d03c:	2b3e      	cmp	r3, #62	; 0x3e
   1d03e:	f001 84e6 	beq.w	1ea0e <d_print_comp_inner+0x1c9a>
   1d042:	2d08      	cmp	r5, #8
   1d044:	f47f af3d 	bne.w	1cec2 <d_print_comp_inner+0x14e>
   1d048:	215b      	movs	r1, #91	; 0x5b
   1d04a:	4620      	mov	r0, r4
   1d04c:	f7fd fc58 	bl	1a900 <d_append_char>
   1d050:	2111      	movs	r1, #17
   1d052:	6932      	ldr	r2, [r6, #16]
   1d054:	4620      	mov	r0, r4
   1d056:	f001 ff07 	bl	1ee68 <d_print_comp>
   1d05a:	215d      	movs	r1, #93	; 0x5d
   1d05c:	4620      	mov	r0, r4
   1d05e:	b015      	add	sp, #84	; 0x54
   1d060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d064:	f7fd bc4c 	b.w	1a900 <d_append_char>
   1d068:	4fa2      	ldr	r7, [pc, #648]	; (1d2f4 <d_print_comp_inner+0x580>)
   1d06a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d06e:	f107 090f 	add.w	r9, r7, #15
   1d072:	2574      	movs	r5, #116	; 0x74
   1d074:	f04f 0800 	mov.w	r8, #0
   1d078:	e00b      	b.n	1d092 <d_print_comp_inner+0x31e>
   1d07a:	460b      	mov	r3, r1
   1d07c:	3101      	adds	r1, #1
   1d07e:	454f      	cmp	r7, r9
   1d080:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d084:	54e5      	strb	r5, [r4, r3]
   1d086:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d08a:	f43f af06 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d08e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d092:	29ff      	cmp	r1, #255	; 0xff
   1d094:	d1f1      	bne.n	1d07a <d_print_comp_inner+0x306>
   1d096:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d09a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d09e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d0a2:	4620      	mov	r0, r4
   1d0a4:	4798      	blx	r3
   1d0a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d0aa:	3301      	adds	r3, #1
   1d0ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d0b0:	2101      	movs	r1, #1
   1d0b2:	2300      	movs	r3, #0
   1d0b4:	e7e3      	b.n	1d07e <d_print_comp_inner+0x30a>
   1d0b6:	4f90      	ldr	r7, [pc, #576]	; (1d2f8 <d_print_comp_inner+0x584>)
   1d0b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d0bc:	f107 0911 	add.w	r9, r7, #17
   1d0c0:	2574      	movs	r5, #116	; 0x74
   1d0c2:	f04f 0800 	mov.w	r8, #0
   1d0c6:	e00b      	b.n	1d0e0 <d_print_comp_inner+0x36c>
   1d0c8:	460b      	mov	r3, r1
   1d0ca:	3101      	adds	r1, #1
   1d0cc:	45b9      	cmp	r9, r7
   1d0ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d0d2:	54e5      	strb	r5, [r4, r3]
   1d0d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d0d8:	f43f aedf 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d0dc:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d0e0:	29ff      	cmp	r1, #255	; 0xff
   1d0e2:	d1f1      	bne.n	1d0c8 <d_print_comp_inner+0x354>
   1d0e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d0e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d0ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d0f0:	4620      	mov	r0, r4
   1d0f2:	4798      	blx	r3
   1d0f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d0f8:	3301      	adds	r3, #1
   1d0fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d0fe:	2101      	movs	r1, #1
   1d100:	2300      	movs	r3, #0
   1d102:	e7e3      	b.n	1d0cc <d_print_comp_inner+0x358>
   1d104:	4f7d      	ldr	r7, [pc, #500]	; (1d2fc <d_print_comp_inner+0x588>)
   1d106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d10a:	f107 090c 	add.w	r9, r7, #12
   1d10e:	2574      	movs	r5, #116	; 0x74
   1d110:	f04f 0800 	mov.w	r8, #0
   1d114:	e00b      	b.n	1d12e <d_print_comp_inner+0x3ba>
   1d116:	460b      	mov	r3, r1
   1d118:	3101      	adds	r1, #1
   1d11a:	454f      	cmp	r7, r9
   1d11c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d120:	54e5      	strb	r5, [r4, r3]
   1d122:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d126:	f43f aeb8 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d12a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d12e:	29ff      	cmp	r1, #255	; 0xff
   1d130:	d1f1      	bne.n	1d116 <d_print_comp_inner+0x3a2>
   1d132:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d136:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d13a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d13e:	4620      	mov	r0, r4
   1d140:	4798      	blx	r3
   1d142:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d146:	3301      	adds	r3, #1
   1d148:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d14c:	2101      	movs	r1, #1
   1d14e:	2300      	movs	r3, #0
   1d150:	e7e3      	b.n	1d11a <d_print_comp_inner+0x3a6>
   1d152:	4f6b      	ldr	r7, [pc, #428]	; (1d300 <d_print_comp_inner+0x58c>)
   1d154:	68d2      	ldr	r2, [r2, #12]
   1d156:	2111      	movs	r1, #17
   1d158:	f001 fe86 	bl	1ee68 <d_print_comp>
   1d15c:	f107 0904 	add.w	r9, r7, #4
   1d160:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d164:	255b      	movs	r5, #91	; 0x5b
   1d166:	f04f 0800 	mov.w	r8, #0
   1d16a:	e00b      	b.n	1d184 <d_print_comp_inner+0x410>
   1d16c:	460b      	mov	r3, r1
   1d16e:	3101      	adds	r1, #1
   1d170:	45b9      	cmp	r9, r7
   1d172:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d176:	54e5      	strb	r5, [r4, r3]
   1d178:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d17c:	f000 87f3 	beq.w	1e166 <d_print_comp_inner+0x13f2>
   1d180:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d184:	29ff      	cmp	r1, #255	; 0xff
   1d186:	d1f1      	bne.n	1d16c <d_print_comp_inner+0x3f8>
   1d188:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d18c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d190:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d194:	4620      	mov	r0, r4
   1d196:	4798      	blx	r3
   1d198:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d19c:	3301      	adds	r3, #1
   1d19e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d1a2:	2101      	movs	r1, #1
   1d1a4:	2300      	movs	r3, #0
   1d1a6:	e7e3      	b.n	1d170 <d_print_comp_inner+0x3fc>
   1d1a8:	f8d2 a00c 	ldr.w	sl, [r2, #12]
   1d1ac:	4651      	mov	r1, sl
   1d1ae:	f7fd fbe5 	bl	1a97c <d_find_pack>
   1d1b2:	f04f 0800 	mov.w	r8, #0
   1d1b6:	b910      	cbnz	r0, 1d1be <d_print_comp_inner+0x44a>
   1d1b8:	f001 bd20 	b.w	1ebfc <d_print_comp_inner+0x1e88>
   1d1bc:	46c8      	mov	r8, r9
   1d1be:	7803      	ldrb	r3, [r0, #0]
   1d1c0:	2b2f      	cmp	r3, #47	; 0x2f
   1d1c2:	f108 0901 	add.w	r9, r8, #1
   1d1c6:	f041 8187 	bne.w	1e4d8 <d_print_comp_inner+0x1764>
   1d1ca:	68c3      	ldr	r3, [r0, #12]
   1d1cc:	2b00      	cmp	r3, #0
   1d1ce:	f001 8183 	beq.w	1e4d8 <d_print_comp_inner+0x1764>
   1d1d2:	6900      	ldr	r0, [r0, #16]
   1d1d4:	2800      	cmp	r0, #0
   1d1d6:	d1f1      	bne.n	1d1bc <d_print_comp_inner+0x448>
   1d1d8:	e003      	b.n	1d1e2 <d_print_comp_inner+0x46e>
   1d1da:	3501      	adds	r5, #1
   1d1dc:	454d      	cmp	r5, r9
   1d1de:	f6bf ae39 	bge.w	1ce54 <d_print_comp_inner+0xe0>
   1d1e2:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1d1e6:	4652      	mov	r2, sl
   1d1e8:	2111      	movs	r1, #17
   1d1ea:	4620      	mov	r0, r4
   1d1ec:	f001 fe3c 	bl	1ee68 <d_print_comp>
   1d1f0:	45a8      	cmp	r8, r5
   1d1f2:	ddf2      	ble.n	1d1da <d_print_comp_inner+0x466>
   1d1f4:	4f43      	ldr	r7, [pc, #268]	; (1d304 <d_print_comp_inner+0x590>)
   1d1f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d1fa:	f107 0b01 	add.w	fp, r7, #1
   1d1fe:	262c      	movs	r6, #44	; 0x2c
   1d200:	e00a      	b.n	1d218 <d_print_comp_inner+0x4a4>
   1d202:	460b      	mov	r3, r1
   1d204:	3101      	adds	r1, #1
   1d206:	45bb      	cmp	fp, r7
   1d208:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d20c:	54e6      	strb	r6, [r4, r3]
   1d20e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d212:	d0e2      	beq.n	1d1da <d_print_comp_inner+0x466>
   1d214:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1d218:	29ff      	cmp	r1, #255	; 0xff
   1d21a:	d1f2      	bne.n	1d202 <d_print_comp_inner+0x48e>
   1d21c:	f04f 0200 	mov.w	r2, #0
   1d220:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d224:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1d228:	4620      	mov	r0, r4
   1d22a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d22e:	4798      	blx	r3
   1d230:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d234:	3301      	adds	r3, #1
   1d236:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d23a:	2101      	movs	r1, #1
   1d23c:	2300      	movs	r3, #0
   1d23e:	e7e2      	b.n	1d206 <d_print_comp_inner+0x492>
   1d240:	4f31      	ldr	r7, [pc, #196]	; (1d308 <d_print_comp_inner+0x594>)
   1d242:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d246:	f107 0919 	add.w	r9, r7, #25
   1d24a:	256e      	movs	r5, #110	; 0x6e
   1d24c:	f04f 0800 	mov.w	r8, #0
   1d250:	e00b      	b.n	1d26a <d_print_comp_inner+0x4f6>
   1d252:	460b      	mov	r3, r1
   1d254:	3101      	adds	r1, #1
   1d256:	45b9      	cmp	r9, r7
   1d258:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d25c:	54e5      	strb	r5, [r4, r3]
   1d25e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d262:	f43f ae1a 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d266:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d26a:	29ff      	cmp	r1, #255	; 0xff
   1d26c:	d1f1      	bne.n	1d252 <d_print_comp_inner+0x4de>
   1d26e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d272:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d276:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d27a:	4620      	mov	r0, r4
   1d27c:	4798      	blx	r3
   1d27e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d282:	3301      	adds	r3, #1
   1d284:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d288:	2101      	movs	r1, #1
   1d28a:	2300      	movs	r3, #0
   1d28c:	e7e3      	b.n	1d256 <d_print_comp_inner+0x4e2>
   1d28e:	4f1f      	ldr	r7, [pc, #124]	; (1d30c <d_print_comp_inner+0x598>)
   1d290:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d294:	f107 0915 	add.w	r9, r7, #21
   1d298:	2574      	movs	r5, #116	; 0x74
   1d29a:	f04f 0800 	mov.w	r8, #0
   1d29e:	e00b      	b.n	1d2b8 <d_print_comp_inner+0x544>
   1d2a0:	460b      	mov	r3, r1
   1d2a2:	3101      	adds	r1, #1
   1d2a4:	45b9      	cmp	r9, r7
   1d2a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d2aa:	54e5      	strb	r5, [r4, r3]
   1d2ac:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d2b0:	f43f adf3 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d2b4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d2b8:	29ff      	cmp	r1, #255	; 0xff
   1d2ba:	d1f1      	bne.n	1d2a0 <d_print_comp_inner+0x52c>
   1d2bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d2c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d2c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d2c8:	4620      	mov	r0, r4
   1d2ca:	4798      	blx	r3
   1d2cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d2d0:	3301      	adds	r3, #1
   1d2d2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d2d6:	2101      	movs	r1, #1
   1d2d8:	2300      	movs	r3, #0
   1d2da:	e7e3      	b.n	1d2a4 <d_print_comp_inner+0x530>
   1d2dc:	4f0c      	ldr	r7, [pc, #48]	; (1d310 <d_print_comp_inner+0x59c>)
   1d2de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d2e2:	f107 090d 	add.w	r9, r7, #13
   1d2e6:	257b      	movs	r5, #123	; 0x7b
   1d2e8:	f04f 0800 	mov.w	r8, #0
   1d2ec:	e01e      	b.n	1d32c <d_print_comp_inner+0x5b8>
   1d2ee:	bf00      	nop
   1d2f0:	20004b58 	.word	0x20004b58
   1d2f4:	20004bf8 	.word	0x20004bf8
   1d2f8:	20004be4 	.word	0x20004be4
   1d2fc:	20004bd4 	.word	0x20004bd4
   1d300:	20004b50 	.word	0x20004b50
   1d304:	20004cf8 	.word	0x20004cf8
   1d308:	20004cc4 	.word	0x20004cc4
   1d30c:	20004cc8 	.word	0x20004cc8
   1d310:	20004dcc 	.word	0x20004dcc
   1d314:	460b      	mov	r3, r1
   1d316:	3101      	adds	r1, #1
   1d318:	454f      	cmp	r7, r9
   1d31a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d31e:	54e5      	strb	r5, [r4, r3]
   1d320:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d324:	f000 8739 	beq.w	1e19a <d_print_comp_inner+0x1426>
   1d328:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d32c:	29ff      	cmp	r1, #255	; 0xff
   1d32e:	d1f1      	bne.n	1d314 <d_print_comp_inner+0x5a0>
   1d330:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d334:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d338:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d33c:	4620      	mov	r0, r4
   1d33e:	4798      	blx	r3
   1d340:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d344:	3301      	adds	r3, #1
   1d346:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d34a:	2101      	movs	r1, #1
   1d34c:	2300      	movs	r3, #0
   1d34e:	e7e3      	b.n	1d318 <d_print_comp_inner+0x5a4>
   1d350:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1d354:	2b00      	cmp	r3, #0
   1d356:	f001 818e 	beq.w	1e676 <d_print_comp_inner+0x1902>
   1d35a:	4fd3      	ldr	r7, [pc, #844]	; (1d6a8 <d_print_comp_inner+0x934>)
   1d35c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d360:	f107 0904 	add.w	r9, r7, #4
   1d364:	2561      	movs	r5, #97	; 0x61
   1d366:	f04f 0800 	mov.w	r8, #0
   1d36a:	e00b      	b.n	1d384 <d_print_comp_inner+0x610>
   1d36c:	460b      	mov	r3, r1
   1d36e:	3101      	adds	r1, #1
   1d370:	45b9      	cmp	r9, r7
   1d372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d376:	54e5      	strb	r5, [r4, r3]
   1d378:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d37c:	f001 814a 	beq.w	1e614 <d_print_comp_inner+0x18a0>
   1d380:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d384:	29ff      	cmp	r1, #255	; 0xff
   1d386:	d1f1      	bne.n	1d36c <d_print_comp_inner+0x5f8>
   1d388:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d38c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d390:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d394:	4620      	mov	r0, r4
   1d396:	4798      	blx	r3
   1d398:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d39c:	3301      	adds	r3, #1
   1d39e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d3a2:	2101      	movs	r1, #1
   1d3a4:	2300      	movs	r3, #0
   1d3a6:	e7e3      	b.n	1d370 <d_print_comp_inner+0x5fc>
   1d3a8:	68d7      	ldr	r7, [r2, #12]
   1d3aa:	4ec0      	ldr	r6, [pc, #768]	; (1d6ac <d_print_comp_inner+0x938>)
   1d3ac:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1d3b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d3b4:	f106 0a07 	add.w	sl, r6, #7
   1d3b8:	256f      	movs	r5, #111	; 0x6f
   1d3ba:	f04f 0900 	mov.w	r9, #0
   1d3be:	e00b      	b.n	1d3d8 <d_print_comp_inner+0x664>
   1d3c0:	460b      	mov	r3, r1
   1d3c2:	3101      	adds	r1, #1
   1d3c4:	45b2      	cmp	sl, r6
   1d3c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d3ca:	54e5      	strb	r5, [r4, r3]
   1d3cc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d3d0:	f000 8726 	beq.w	1e220 <d_print_comp_inner+0x14ac>
   1d3d4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1d3d8:	29ff      	cmp	r1, #255	; 0xff
   1d3da:	d1f1      	bne.n	1d3c0 <d_print_comp_inner+0x64c>
   1d3dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d3e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d3e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1d3e8:	4620      	mov	r0, r4
   1d3ea:	4798      	blx	r3
   1d3ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d3f0:	3301      	adds	r3, #1
   1d3f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d3f6:	2101      	movs	r1, #1
   1d3f8:	2300      	movs	r3, #0
   1d3fa:	e7e3      	b.n	1d3c4 <d_print_comp_inner+0x650>
   1d3fc:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
   1d400:	b112      	cbz	r2, 1d408 <d_print_comp_inner+0x694>
   1d402:	2111      	movs	r1, #17
   1d404:	f001 fd30 	bl	1ee68 <d_print_comp>
   1d408:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d40c:	29ff      	cmp	r1, #255	; 0xff
   1d40e:	f001 826d 	beq.w	1e8ec <d_print_comp_inner+0x1b78>
   1d412:	1c4a      	adds	r2, r1, #1
   1d414:	237b      	movs	r3, #123	; 0x7b
   1d416:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d41a:	4620      	mov	r0, r4
   1d41c:	5463      	strb	r3, [r4, r1]
   1d41e:	462a      	mov	r2, r5
   1d420:	2111      	movs	r1, #17
   1d422:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d426:	f001 fd1f 	bl	1ee68 <d_print_comp>
   1d42a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d42e:	29ff      	cmp	r1, #255	; 0xff
   1d430:	f000 86e6 	beq.w	1e200 <d_print_comp_inner+0x148c>
   1d434:	1c4a      	adds	r2, r1, #1
   1d436:	237d      	movs	r3, #125	; 0x7d
   1d438:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d43c:	5463      	strb	r3, [r4, r1]
   1d43e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d442:	e507      	b.n	1ce54 <d_print_comp_inner+0xe0>
   1d444:	4f9a      	ldr	r7, [pc, #616]	; (1d6b0 <d_print_comp_inner+0x93c>)
   1d446:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d44a:	f107 091d 	add.w	r9, r7, #29
   1d44e:	2574      	movs	r5, #116	; 0x74
   1d450:	f04f 0800 	mov.w	r8, #0
   1d454:	e00b      	b.n	1d46e <d_print_comp_inner+0x6fa>
   1d456:	460b      	mov	r3, r1
   1d458:	3101      	adds	r1, #1
   1d45a:	45b9      	cmp	r9, r7
   1d45c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d460:	54e5      	strb	r5, [r4, r3]
   1d462:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d466:	f43f ad18 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d46a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d46e:	29ff      	cmp	r1, #255	; 0xff
   1d470:	d1f1      	bne.n	1d456 <d_print_comp_inner+0x6e2>
   1d472:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d47a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d47e:	4620      	mov	r0, r4
   1d480:	4798      	blx	r3
   1d482:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d486:	3301      	adds	r3, #1
   1d488:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d48c:	2101      	movs	r1, #1
   1d48e:	2300      	movs	r3, #0
   1d490:	e7e3      	b.n	1d45a <d_print_comp_inner+0x6e6>
   1d492:	4f88      	ldr	r7, [pc, #544]	; (1d6b4 <d_print_comp_inner+0x940>)
   1d494:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d498:	f107 0914 	add.w	r9, r7, #20
   1d49c:	2572      	movs	r5, #114	; 0x72
   1d49e:	f04f 0800 	mov.w	r8, #0
   1d4a2:	e00b      	b.n	1d4bc <d_print_comp_inner+0x748>
   1d4a4:	460b      	mov	r3, r1
   1d4a6:	3101      	adds	r1, #1
   1d4a8:	45b9      	cmp	r9, r7
   1d4aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d4ae:	54e5      	strb	r5, [r4, r3]
   1d4b0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d4b4:	f000 86f4 	beq.w	1e2a0 <d_print_comp_inner+0x152c>
   1d4b8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d4bc:	29ff      	cmp	r1, #255	; 0xff
   1d4be:	d1f1      	bne.n	1d4a4 <d_print_comp_inner+0x730>
   1d4c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d4c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d4c8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d4cc:	4620      	mov	r0, r4
   1d4ce:	4798      	blx	r3
   1d4d0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d4d4:	3301      	adds	r3, #1
   1d4d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d4da:	2101      	movs	r1, #1
   1d4dc:	2300      	movs	r3, #0
   1d4de:	e7e3      	b.n	1d4a8 <d_print_comp_inner+0x734>
   1d4e0:	4f75      	ldr	r7, [pc, #468]	; (1d6b8 <d_print_comp_inner+0x944>)
   1d4e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d4e6:	f107 0917 	add.w	r9, r7, #23
   1d4ea:	2563      	movs	r5, #99	; 0x63
   1d4ec:	f04f 0800 	mov.w	r8, #0
   1d4f0:	e00b      	b.n	1d50a <d_print_comp_inner+0x796>
   1d4f2:	460b      	mov	r3, r1
   1d4f4:	3101      	adds	r1, #1
   1d4f6:	454f      	cmp	r7, r9
   1d4f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d4fc:	54e5      	strb	r5, [r4, r3]
   1d4fe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d502:	f000 877c 	beq.w	1e3fe <d_print_comp_inner+0x168a>
   1d506:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d50a:	29ff      	cmp	r1, #255	; 0xff
   1d50c:	d1f1      	bne.n	1d4f2 <d_print_comp_inner+0x77e>
   1d50e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d512:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d516:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d51a:	4620      	mov	r0, r4
   1d51c:	4798      	blx	r3
   1d51e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d522:	3301      	adds	r3, #1
   1d524:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d528:	2101      	movs	r1, #1
   1d52a:	2300      	movs	r3, #0
   1d52c:	e7e3      	b.n	1d4f6 <d_print_comp_inner+0x782>
   1d52e:	4f63      	ldr	r7, [pc, #396]	; (1d6bc <d_print_comp_inner+0x948>)
   1d530:	68d2      	ldr	r2, [r2, #12]
   1d532:	2111      	movs	r1, #17
   1d534:	f001 fc98 	bl	1ee68 <d_print_comp>
   1d538:	f107 0907 	add.w	r9, r7, #7
   1d53c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d540:	2520      	movs	r5, #32
   1d542:	f04f 0800 	mov.w	r8, #0
   1d546:	e00b      	b.n	1d560 <d_print_comp_inner+0x7ec>
   1d548:	460b      	mov	r3, r1
   1d54a:	3101      	adds	r1, #1
   1d54c:	45b9      	cmp	r9, r7
   1d54e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d552:	54e5      	strb	r5, [r4, r3]
   1d554:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d558:	f000 8605 	beq.w	1e166 <d_print_comp_inner+0x13f2>
   1d55c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d560:	29ff      	cmp	r1, #255	; 0xff
   1d562:	d1f1      	bne.n	1d548 <d_print_comp_inner+0x7d4>
   1d564:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d568:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d56c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d570:	4620      	mov	r0, r4
   1d572:	4798      	blx	r3
   1d574:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d578:	3301      	adds	r3, #1
   1d57a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d57e:	2101      	movs	r1, #1
   1d580:	2300      	movs	r3, #0
   1d582:	e7e3      	b.n	1d54c <d_print_comp_inner+0x7d8>
   1d584:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   1d588:	2b00      	cmp	r3, #0
   1d58a:	f43f ac63 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1d58e:	442b      	add	r3, r5
   1d590:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d594:	3d01      	subs	r5, #1
   1d596:	1e5f      	subs	r7, r3, #1
   1d598:	f04f 0800 	mov.w	r8, #0
   1d59c:	e009      	b.n	1d5b2 <d_print_comp_inner+0x83e>
   1d59e:	460b      	mov	r3, r1
   1d5a0:	3101      	adds	r1, #1
   1d5a2:	42af      	cmp	r7, r5
   1d5a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d5a8:	54e6      	strb	r6, [r4, r3]
   1d5aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d5ae:	f43f ac51 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1d5b2:	29ff      	cmp	r1, #255	; 0xff
   1d5b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d5b8:	d1f1      	bne.n	1d59e <d_print_comp_inner+0x82a>
   1d5ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d5be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d5c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d5c6:	4620      	mov	r0, r4
   1d5c8:	4798      	blx	r3
   1d5ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d5ce:	3301      	adds	r3, #1
   1d5d0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d5d4:	2101      	movs	r1, #1
   1d5d6:	2300      	movs	r3, #0
   1d5d8:	e7e3      	b.n	1d5a2 <d_print_comp_inner+0x82e>
   1d5da:	4f39      	ldr	r7, [pc, #228]	; (1d6c0 <d_print_comp_inner+0x94c>)
   1d5dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d5e0:	f107 0910 	add.w	r9, r7, #16
   1d5e4:	2568      	movs	r5, #104	; 0x68
   1d5e6:	f04f 0800 	mov.w	r8, #0
   1d5ea:	e00b      	b.n	1d604 <d_print_comp_inner+0x890>
   1d5ec:	460b      	mov	r3, r1
   1d5ee:	3101      	adds	r1, #1
   1d5f0:	45b9      	cmp	r9, r7
   1d5f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d5f6:	54e5      	strb	r5, [r4, r3]
   1d5f8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d5fc:	f43f ac4d 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d600:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d604:	29ff      	cmp	r1, #255	; 0xff
   1d606:	d1f1      	bne.n	1d5ec <d_print_comp_inner+0x878>
   1d608:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d60c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d610:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d614:	4620      	mov	r0, r4
   1d616:	4798      	blx	r3
   1d618:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d61c:	3301      	adds	r3, #1
   1d61e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d622:	2101      	movs	r1, #1
   1d624:	2300      	movs	r3, #0
   1d626:	e7e3      	b.n	1d5f0 <d_print_comp_inner+0x87c>
   1d628:	68d5      	ldr	r5, [r2, #12]
   1d62a:	2d00      	cmp	r5, #0
   1d62c:	f040 87a1 	bne.w	1e572 <d_print_comp_inner+0x17fe>
   1d630:	4924      	ldr	r1, [pc, #144]	; (1d6c4 <d_print_comp_inner+0x950>)
   1d632:	4620      	mov	r0, r4
   1d634:	b015      	add	sp, #84	; 0x54
   1d636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d63a:	f7fd b9e9 	b.w	1aa10 <d_append_string>
   1d63e:	2111      	movs	r1, #17
   1d640:	68d2      	ldr	r2, [r2, #12]
   1d642:	f001 fc11 	bl	1ee68 <d_print_comp>
   1d646:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d64a:	29ff      	cmp	r1, #255	; 0xff
   1d64c:	f001 816e 	beq.w	1e92c <d_print_comp_inner+0x1bb8>
   1d650:	1c4a      	adds	r2, r1, #1
   1d652:	2328      	movs	r3, #40	; 0x28
   1d654:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d658:	5463      	strb	r3, [r4, r1]
   1d65a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d65e:	6932      	ldr	r2, [r6, #16]
   1d660:	2111      	movs	r1, #17
   1d662:	4620      	mov	r0, r4
   1d664:	f001 fc00 	bl	1ee68 <d_print_comp>
   1d668:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d66c:	29ff      	cmp	r1, #255	; 0xff
   1d66e:	f001 802c 	beq.w	1e6ca <d_print_comp_inner+0x1956>
   1d672:	1c4a      	adds	r2, r1, #1
   1d674:	2329      	movs	r3, #41	; 0x29
   1d676:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d67a:	5463      	strb	r3, [r4, r1]
   1d67c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d680:	f7ff bbe8 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1d684:	68d2      	ldr	r2, [r2, #12]
   1d686:	4910      	ldr	r1, [pc, #64]	; (1d6c8 <d_print_comp_inner+0x954>)
   1d688:	a804      	add	r0, sp, #16
   1d68a:	f004 ff2d 	bl	224e8 <sprintf>
   1d68e:	a804      	add	r0, sp, #16
   1d690:	f009 faf6 	bl	26c80 <strlen>
   1d694:	2800      	cmp	r0, #0
   1d696:	f43f abdd 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1d69a:	ad04      	add	r5, sp, #16
   1d69c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d6a0:	182f      	adds	r7, r5, r0
   1d6a2:	f04f 0800 	mov.w	r8, #0
   1d6a6:	e01b      	b.n	1d6e0 <d_print_comp_inner+0x96c>
   1d6a8:	20004b70 	.word	0x20004b70
   1d6ac:	20004cfc 	.word	0x20004cfc
   1d6b0:	20004b78 	.word	0x20004b78
   1d6b4:	20004c98 	.word	0x20004c98
   1d6b8:	20004bb0 	.word	0x20004bb0
   1d6bc:	20004ddc 	.word	0x20004ddc
   1d6c0:	20004cb0 	.word	0x20004cb0
   1d6c4:	20004d6c 	.word	0x20004d6c
   1d6c8:	20004b0c 	.word	0x20004b0c
   1d6cc:	460b      	mov	r3, r1
   1d6ce:	3101      	adds	r1, #1
   1d6d0:	42af      	cmp	r7, r5
   1d6d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d6d6:	54e6      	strb	r6, [r4, r3]
   1d6d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d6dc:	f43f abba 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1d6e0:	29ff      	cmp	r1, #255	; 0xff
   1d6e2:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d6e6:	d1f1      	bne.n	1d6cc <d_print_comp_inner+0x958>
   1d6e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d6ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d6f0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d6f4:	4620      	mov	r0, r4
   1d6f6:	4798      	blx	r3
   1d6f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d6fc:	3301      	adds	r3, #1
   1d6fe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d702:	2101      	movs	r1, #1
   1d704:	2300      	movs	r3, #0
   1d706:	e7e3      	b.n	1d6d0 <d_print_comp_inner+0x95c>
   1d708:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d70c:	7b15      	ldrb	r5, [r2, #12]
   1d70e:	29ff      	cmp	r1, #255	; 0xff
   1d710:	f001 811e 	beq.w	1e950 <d_print_comp_inner+0x1bdc>
   1d714:	1c4b      	adds	r3, r1, #1
   1d716:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d71a:	5465      	strb	r5, [r4, r1]
   1d71c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d720:	f7ff bb98 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1d724:	68d2      	ldr	r2, [r2, #12]
   1d726:	b1ca      	cbz	r2, 1d75c <d_print_comp_inner+0x9e8>
   1d728:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1d72c:	ab04      	add	r3, sp, #16
   1d72e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1d732:	2300      	movs	r3, #0
   1d734:	e9cd 1604 	strd	r1, r6, [sp, #16]
   1d738:	9306      	str	r3, [sp, #24]
   1d73a:	2111      	movs	r1, #17
   1d73c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1d740:	9307      	str	r3, [sp, #28]
   1d742:	f001 fb91 	bl	1ee68 <d_print_comp>
   1d746:	9b06      	ldr	r3, [sp, #24]
   1d748:	9a04      	ldr	r2, [sp, #16]
   1d74a:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1d74e:	2b00      	cmp	r3, #0
   1d750:	f47f ab80 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1d754:	2120      	movs	r1, #32
   1d756:	4620      	mov	r0, r4
   1d758:	f7fd f8d2 	bl	1a900 <d_append_char>
   1d75c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1d760:	4632      	mov	r2, r6
   1d762:	2111      	movs	r1, #17
   1d764:	4620      	mov	r0, r4
   1d766:	b015      	add	sp, #84	; 0x54
   1d768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d76c:	f001 bec6 	b.w	1f4fc <d_print_function_type>
   1d770:	68d7      	ldr	r7, [r2, #12]
   1d772:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1d776:	2200      	movs	r2, #0
   1d778:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1d77c:	2f00      	cmp	r7, #0
   1d77e:	f43f ab66 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1d782:	f10d 0810 	add.w	r8, sp, #16
   1d786:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   1d78a:	4643      	mov	r3, r8
   1d78c:	4611      	mov	r1, r2
   1d78e:	4696      	mov	lr, r2
   1d790:	e9c3 2700 	strd	r2, r7, [r3]
   1d794:	e9c3 ec02 	strd	lr, ip, [r3, #8]
   1d798:	783a      	ldrb	r2, [r7, #0]
   1d79a:	2a4e      	cmp	r2, #78	; 0x4e
   1d79c:	469a      	mov	sl, r3
   1d79e:	f1a2 0b1c 	sub.w	fp, r2, #28
   1d7a2:	f1a2 0050 	sub.w	r0, r2, #80	; 0x50
   1d7a6:	f101 0501 	add.w	r5, r1, #1
   1d7aa:	f000 8688 	beq.w	1e4be <d_print_comp_inner+0x174a>
   1d7ae:	f200 84ed 	bhi.w	1e18c <d_print_comp_inner+0x1418>
   1d7b2:	f1bb 0f04 	cmp.w	fp, #4
   1d7b6:	f240 8682 	bls.w	1e4be <d_print_comp_inner+0x174a>
   1d7ba:	2a02      	cmp	r2, #2
   1d7bc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d7c0:	d114      	bne.n	1d7ec <d_print_comp_inner+0xa78>
   1d7c2:	693f      	ldr	r7, [r7, #16]
   1d7c4:	783a      	ldrb	r2, [r7, #0]
   1d7c6:	2a48      	cmp	r2, #72	; 0x48
   1d7c8:	f001 8250 	beq.w	1ec6c <d_print_comp_inner+0x1ef8>
   1d7cc:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   1d7d0:	f04f 0a00 	mov.w	sl, #0
   1d7d4:	2a4e      	cmp	r2, #78	; 0x4e
   1d7d6:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
   1d7da:	f1a2 001c 	sub.w	r0, r2, #28
   1d7de:	f000 8787 	beq.w	1e6f0 <d_print_comp_inner+0x197c>
   1d7e2:	f200 8782 	bhi.w	1e6ea <d_print_comp_inner+0x1976>
   1d7e6:	2804      	cmp	r0, #4
   1d7e8:	f240 8782 	bls.w	1e6f0 <d_print_comp_inner+0x197c>
   1d7ec:	2a04      	cmp	r2, #4
   1d7ee:	d104      	bne.n	1d7fa <d_print_comp_inner+0xa86>
   1d7f0:	e9cd c702 	strd	ip, r7, [sp, #8]
   1d7f4:	ab02      	add	r3, sp, #8
   1d7f6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d7fa:	6932      	ldr	r2, [r6, #16]
   1d7fc:	2111      	movs	r1, #17
   1d7fe:	4620      	mov	r0, r4
   1d800:	f001 fb32 	bl	1ee68 <d_print_comp>
   1d804:	783b      	ldrb	r3, [r7, #0]
   1d806:	2b04      	cmp	r3, #4
   1d808:	d102      	bne.n	1d810 <d_print_comp_inner+0xa9c>
   1d80a:	9b02      	ldr	r3, [sp, #8]
   1d80c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d810:	eb08 1805 	add.w	r8, r8, r5, lsl #4
   1d814:	2720      	movs	r7, #32
   1d816:	f858 6c08 	ldr.w	r6, [r8, #-8]
   1d81a:	3d01      	subs	r5, #1
   1d81c:	2e00      	cmp	r6, #0
   1d81e:	f000 863b 	beq.w	1e498 <d_print_comp_inner+0x1724>
   1d822:	f1a8 0810 	sub.w	r8, r8, #16
   1d826:	2d00      	cmp	r5, #0
   1d828:	d1f5      	bne.n	1d816 <d_print_comp_inner+0xaa2>
   1d82a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1d82e:	f7ff bb11 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1d832:	4fab      	ldr	r7, [pc, #684]	; (1dae0 <d_print_comp_inner+0xd6c>)
   1d834:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d838:	f107 0909 	add.w	r9, r7, #9
   1d83c:	2564      	movs	r5, #100	; 0x64
   1d83e:	f04f 0800 	mov.w	r8, #0
   1d842:	e00b      	b.n	1d85c <d_print_comp_inner+0xae8>
   1d844:	460b      	mov	r3, r1
   1d846:	3101      	adds	r1, #1
   1d848:	454f      	cmp	r7, r9
   1d84a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d84e:	54e5      	strb	r5, [r4, r3]
   1d850:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d854:	f000 85ff 	beq.w	1e456 <d_print_comp_inner+0x16e2>
   1d858:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d85c:	29ff      	cmp	r1, #255	; 0xff
   1d85e:	d1f1      	bne.n	1d844 <d_print_comp_inner+0xad0>
   1d860:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d868:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d86c:	4620      	mov	r0, r4
   1d86e:	4798      	blx	r3
   1d870:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d874:	3301      	adds	r3, #1
   1d876:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d87a:	2101      	movs	r1, #1
   1d87c:	2300      	movs	r3, #0
   1d87e:	e7e3      	b.n	1d848 <d_print_comp_inner+0xad4>
   1d880:	4f98      	ldr	r7, [pc, #608]	; (1dae4 <d_print_comp_inner+0xd70>)
   1d882:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d886:	f107 0907 	add.w	r9, r7, #7
   1d88a:	257b      	movs	r5, #123	; 0x7b
   1d88c:	f04f 0800 	mov.w	r8, #0
   1d890:	e00b      	b.n	1d8aa <d_print_comp_inner+0xb36>
   1d892:	460b      	mov	r3, r1
   1d894:	3101      	adds	r1, #1
   1d896:	454f      	cmp	r7, r9
   1d898:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d89c:	54e5      	strb	r5, [r4, r3]
   1d89e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d8a2:	f000 8546 	beq.w	1e332 <d_print_comp_inner+0x15be>
   1d8a6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d8aa:	29ff      	cmp	r1, #255	; 0xff
   1d8ac:	d1f1      	bne.n	1d892 <d_print_comp_inner+0xb1e>
   1d8ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d8b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d8b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d8ba:	4620      	mov	r0, r4
   1d8bc:	4798      	blx	r3
   1d8be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d8c2:	3301      	adds	r3, #1
   1d8c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d8c8:	2101      	movs	r1, #1
   1d8ca:	2300      	movs	r3, #0
   1d8cc:	e7e3      	b.n	1d896 <d_print_comp_inner+0xb22>
   1d8ce:	4f86      	ldr	r7, [pc, #536]	; (1dae8 <d_print_comp_inner+0xd74>)
   1d8d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d8d4:	f107 091b 	add.w	r9, r7, #27
   1d8d8:	2567      	movs	r5, #103	; 0x67
   1d8da:	f04f 0800 	mov.w	r8, #0
   1d8de:	e00b      	b.n	1d8f8 <d_print_comp_inner+0xb84>
   1d8e0:	460b      	mov	r3, r1
   1d8e2:	3101      	adds	r1, #1
   1d8e4:	45b9      	cmp	r9, r7
   1d8e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d8ea:	54e5      	strb	r5, [r4, r3]
   1d8ec:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d8f0:	f43f aad3 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d8f4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d8f8:	29ff      	cmp	r1, #255	; 0xff
   1d8fa:	d1f1      	bne.n	1d8e0 <d_print_comp_inner+0xb6c>
   1d8fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d900:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d904:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d908:	4620      	mov	r0, r4
   1d90a:	4798      	blx	r3
   1d90c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d910:	3301      	adds	r3, #1
   1d912:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d916:	2101      	movs	r1, #1
   1d918:	2300      	movs	r3, #0
   1d91a:	e7e3      	b.n	1d8e4 <d_print_comp_inner+0xb70>
   1d91c:	4f73      	ldr	r7, [pc, #460]	; (1daec <d_print_comp_inner+0xd78>)
   1d91e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d922:	f107 091c 	add.w	r9, r7, #28
   1d926:	2567      	movs	r5, #103	; 0x67
   1d928:	f04f 0800 	mov.w	r8, #0
   1d92c:	e00b      	b.n	1d946 <d_print_comp_inner+0xbd2>
   1d92e:	460b      	mov	r3, r1
   1d930:	3101      	adds	r1, #1
   1d932:	45b9      	cmp	r9, r7
   1d934:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d938:	54e5      	strb	r5, [r4, r3]
   1d93a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d93e:	f43f aaac 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1d942:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d946:	29ff      	cmp	r1, #255	; 0xff
   1d948:	d1f1      	bne.n	1d92e <d_print_comp_inner+0xbba>
   1d94a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d94e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d952:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d956:	4620      	mov	r0, r4
   1d958:	4798      	blx	r3
   1d95a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d95e:	3301      	adds	r3, #1
   1d960:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d964:	2101      	movs	r1, #1
   1d966:	2300      	movs	r3, #0
   1d968:	e7e3      	b.n	1d932 <d_print_comp_inner+0xbbe>
   1d96a:	6913      	ldr	r3, [r2, #16]
   1d96c:	781b      	ldrb	r3, [r3, #0]
   1d96e:	2b39      	cmp	r3, #57	; 0x39
   1d970:	f47f aa6d 	bne.w	1ce4e <d_print_comp_inner+0xda>
   1d974:	68d2      	ldr	r2, [r2, #12]
   1d976:	68d3      	ldr	r3, [r2, #12]
   1d978:	681b      	ldr	r3, [r3, #0]
   1d97a:	7859      	ldrb	r1, [r3, #1]
   1d97c:	2963      	cmp	r1, #99	; 0x63
   1d97e:	f001 8081 	beq.w	1ea84 <d_print_comp_inner+0x1d10>
   1d982:	4632      	mov	r2, r6
   1d984:	2111      	movs	r1, #17
   1d986:	4620      	mov	r0, r4
   1d988:	f002 fb16 	bl	1ffb8 <d_maybe_print_fold_expression>
   1d98c:	2800      	cmp	r0, #0
   1d98e:	f47f aa61 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1d992:	4632      	mov	r2, r6
   1d994:	2111      	movs	r1, #17
   1d996:	4620      	mov	r0, r4
   1d998:	f002 fc38 	bl	2020c <d_maybe_print_designated_init>
   1d99c:	2800      	cmp	r0, #0
   1d99e:	f47f aa59 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1d9a2:	68f3      	ldr	r3, [r6, #12]
   1d9a4:	781a      	ldrb	r2, [r3, #0]
   1d9a6:	2a32      	cmp	r2, #50	; 0x32
   1d9a8:	f001 81dd 	beq.w	1ed66 <d_print_comp_inner+0x1ff2>
   1d9ac:	68db      	ldr	r3, [r3, #12]
   1d9ae:	4950      	ldr	r1, [pc, #320]	; (1daf0 <d_print_comp_inner+0xd7c>)
   1d9b0:	6818      	ldr	r0, [r3, #0]
   1d9b2:	f007 f9d9 	bl	24d68 <strcmp>
   1d9b6:	6933      	ldr	r3, [r6, #16]
   1d9b8:	b920      	cbnz	r0, 1d9c4 <d_print_comp_inner+0xc50>
   1d9ba:	68da      	ldr	r2, [r3, #12]
   1d9bc:	7811      	ldrb	r1, [r2, #0]
   1d9be:	2903      	cmp	r1, #3
   1d9c0:	f001 8200 	beq.w	1edc4 <d_print_comp_inner+0x2050>
   1d9c4:	68da      	ldr	r2, [r3, #12]
   1d9c6:	2111      	movs	r1, #17
   1d9c8:	4620      	mov	r0, r4
   1d9ca:	f002 fa87 	bl	1fedc <d_print_subexpr>
   1d9ce:	68f5      	ldr	r5, [r6, #12]
   1d9d0:	4948      	ldr	r1, [pc, #288]	; (1daf4 <d_print_comp_inner+0xd80>)
   1d9d2:	68eb      	ldr	r3, [r5, #12]
   1d9d4:	681f      	ldr	r7, [r3, #0]
   1d9d6:	4638      	mov	r0, r7
   1d9d8:	f007 f9c6 	bl	24d68 <strcmp>
   1d9dc:	2800      	cmp	r0, #0
   1d9de:	f001 81e1 	beq.w	1eda4 <d_print_comp_inner+0x2030>
   1d9e2:	4943      	ldr	r1, [pc, #268]	; (1daf0 <d_print_comp_inner+0xd7c>)
   1d9e4:	4638      	mov	r0, r7
   1d9e6:	f007 f9bf 	bl	24d68 <strcmp>
   1d9ea:	2800      	cmp	r0, #0
   1d9ec:	f041 81f8 	bne.w	1ede0 <d_print_comp_inner+0x206c>
   1d9f0:	6933      	ldr	r3, [r6, #16]
   1d9f2:	2111      	movs	r1, #17
   1d9f4:	691a      	ldr	r2, [r3, #16]
   1d9f6:	4620      	mov	r0, r4
   1d9f8:	f002 fa70 	bl	1fedc <d_print_subexpr>
   1d9fc:	68f3      	ldr	r3, [r6, #12]
   1d9fe:	781a      	ldrb	r2, [r3, #0]
   1da00:	2a32      	cmp	r2, #50	; 0x32
   1da02:	f47f aa27 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1da06:	68db      	ldr	r3, [r3, #12]
   1da08:	689a      	ldr	r2, [r3, #8]
   1da0a:	2a01      	cmp	r2, #1
   1da0c:	f47f aa22 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1da10:	685b      	ldr	r3, [r3, #4]
   1da12:	781b      	ldrb	r3, [r3, #0]
   1da14:	2b3e      	cmp	r3, #62	; 0x3e
   1da16:	f47f aa1d 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1da1a:	2129      	movs	r1, #41	; 0x29
   1da1c:	f7ff bb1e 	b.w	1d05c <d_print_comp_inner+0x2e8>
   1da20:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
   1da24:	783b      	ldrb	r3, [r7, #0]
   1da26:	2b32      	cmp	r3, #50	; 0x32
   1da28:	f000 86b1 	beq.w	1e78e <d_print_comp_inner+0x1a1a>
   1da2c:	2b34      	cmp	r3, #52	; 0x34
   1da2e:	f041 820d 	bne.w	1ee4c <d_print_comp_inner+0x20d8>
   1da32:	2128      	movs	r1, #40	; 0x28
   1da34:	f7fc ff64 	bl	1a900 <d_append_char>
   1da38:	4620      	mov	r0, r4
   1da3a:	2111      	movs	r1, #17
   1da3c:	68fa      	ldr	r2, [r7, #12]
   1da3e:	f001 fa13 	bl	1ee68 <d_print_comp>
   1da42:	2129      	movs	r1, #41	; 0x29
   1da44:	4620      	mov	r0, r4
   1da46:	f7fc ff5b 	bl	1a900 <d_append_char>
   1da4a:	462a      	mov	r2, r5
   1da4c:	2111      	movs	r1, #17
   1da4e:	4620      	mov	r0, r4
   1da50:	b015      	add	sp, #84	; 0x54
   1da52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da56:	f002 ba41 	b.w	1fedc <d_print_subexpr>
   1da5a:	68d2      	ldr	r2, [r2, #12]
   1da5c:	2111      	movs	r1, #17
   1da5e:	4620      	mov	r0, r4
   1da60:	b015      	add	sp, #84	; 0x54
   1da62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da66:	f002 b83d 	b.w	1fae4 <d_print_expr_op>
   1da6a:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
   1da6e:	2b00      	cmp	r3, #0
   1da70:	f040 871b 	bne.w	1e8aa <d_print_comp_inner+0x1b36>
   1da74:	68f2      	ldr	r2, [r6, #12]
   1da76:	4b20      	ldr	r3, [pc, #128]	; (1daf8 <d_print_comp_inner+0xd84>)
   1da78:	68d1      	ldr	r1, [r2, #12]
   1da7a:	4299      	cmp	r1, r3
   1da7c:	d00f      	beq.n	1da9e <d_print_comp_inner+0xd2a>
   1da7e:	2111      	movs	r1, #17
   1da80:	4620      	mov	r0, r4
   1da82:	f001 f9f1 	bl	1ee68 <d_print_comp>
   1da86:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1da8a:	29ff      	cmp	r1, #255	; 0xff
   1da8c:	f001 80be 	beq.w	1ec0c <d_print_comp_inner+0x1e98>
   1da90:	2320      	movs	r3, #32
   1da92:	1c4a      	adds	r2, r1, #1
   1da94:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1da98:	5463      	strb	r3, [r4, r1]
   1da9a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1da9e:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   1daa2:	f1b8 0f00 	cmp.w	r8, #0
   1daa6:	f000 8540 	beq.w	1e52a <d_print_comp_inner+0x17b6>
   1daaa:	4914      	ldr	r1, [pc, #80]	; (1dafc <d_print_comp_inner+0xd88>)
   1daac:	e5c1      	b.n	1d632 <d_print_comp_inner+0x8be>
   1daae:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1dab2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1dab6:	9307      	str	r3, [sp, #28]
   1dab8:	f10d 0810 	add.w	r8, sp, #16
   1dabc:	2300      	movs	r3, #0
   1dabe:	46e1      	mov	r9, ip
   1dac0:	f8cd c010 	str.w	ip, [sp, #16]
   1dac4:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
   1dac8:	9205      	str	r2, [sp, #20]
   1daca:	9306      	str	r3, [sp, #24]
   1dacc:	f1bc 0f00 	cmp.w	ip, #0
   1dad0:	f001 813d 	beq.w	1ed4e <d_print_comp_inner+0x1fda>
   1dad4:	2701      	movs	r7, #1
   1dad6:	4665      	mov	r5, ip
   1dad8:	46be      	mov	lr, r7
   1dada:	4694      	mov	ip, r2
   1dadc:	4646      	mov	r6, r8
   1dade:	e028      	b.n	1db32 <d_print_comp_inner+0xdbe>
   1dae0:	20004d5c 	.word	0x20004d5c
   1dae4:	20004dbc 	.word	0x20004dbc
   1dae8:	20004d9c 	.word	0x20004d9c
   1daec:	20004d7c 	.word	0x20004d7c
   1daf0:	20004d18 	.word	0x20004d18
   1daf4:	20004d1c 	.word	0x20004d1c
   1daf8:	20004474 	.word	0x20004474
   1dafc:	20004ce8 	.word	0x20004ce8
   1db00:	68ab      	ldr	r3, [r5, #8]
   1db02:	b9a3      	cbnz	r3, 1db2e <d_print_comp_inner+0xdba>
   1db04:	2f03      	cmp	r7, #3
   1db06:	f63f a9a2 	bhi.w	1ce4e <d_print_comp_inner+0xda>
   1db0a:	ab14      	add	r3, sp, #80	; 0x50
   1db0c:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
   1db10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1db14:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   1db18:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1db1c:	f84b 6c40 	str.w	r6, [fp, #-64]
   1db20:	eb08 1607 	add.w	r6, r8, r7, lsl #4
   1db24:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
   1db28:	3701      	adds	r7, #1
   1db2a:	f8c5 e008 	str.w	lr, [r5, #8]
   1db2e:	682d      	ldr	r5, [r5, #0]
   1db30:	b125      	cbz	r5, 1db3c <d_print_comp_inner+0xdc8>
   1db32:	686b      	ldr	r3, [r5, #4]
   1db34:	781b      	ldrb	r3, [r3, #0]
   1db36:	3b19      	subs	r3, #25
   1db38:	2b02      	cmp	r3, #2
   1db3a:	d9e1      	bls.n	1db00 <d_print_comp_inner+0xd8c>
   1db3c:	f8dc 2010 	ldr.w	r2, [ip, #16]
   1db40:	2111      	movs	r1, #17
   1db42:	4620      	mov	r0, r4
   1db44:	4666      	mov	r6, ip
   1db46:	f001 f98f 	bl	1ee68 <d_print_comp>
   1db4a:	9b06      	ldr	r3, [sp, #24]
   1db4c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1db50:	2b00      	cmp	r3, #0
   1db52:	f47f a97f 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1db56:	2f01      	cmp	r7, #1
   1db58:	d00c      	beq.n	1db74 <d_print_comp_inner+0xe00>
   1db5a:	eb08 1807 	add.w	r8, r8, r7, lsl #4
   1db5e:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1db62:	3f01      	subs	r7, #1
   1db64:	2111      	movs	r1, #17
   1db66:	4620      	mov	r0, r4
   1db68:	f001 f9ac 	bl	1eec4 <d_print_mod>
   1db6c:	2f01      	cmp	r7, #1
   1db6e:	f1a8 0810 	sub.w	r8, r8, #16
   1db72:	d1f4      	bne.n	1db5e <d_print_comp_inner+0xdea>
   1db74:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1db78:	4632      	mov	r2, r6
   1db7a:	2111      	movs	r1, #17
   1db7c:	4620      	mov	r0, r4
   1db7e:	f001 fecd 	bl	1f91c <d_print_array_type>
   1db82:	f7ff b967 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1db86:	4fc6      	ldr	r7, [pc, #792]	; (1dea0 <d_print_comp_inner+0x112c>)
   1db88:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1db8c:	f107 0919 	add.w	r9, r7, #25
   1db90:	2563      	movs	r5, #99	; 0x63
   1db92:	f04f 0800 	mov.w	r8, #0
   1db96:	e00b      	b.n	1dbb0 <d_print_comp_inner+0xe3c>
   1db98:	460b      	mov	r3, r1
   1db9a:	3101      	adds	r1, #1
   1db9c:	45b9      	cmp	r9, r7
   1db9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dba2:	54e5      	strb	r5, [r4, r3]
   1dba4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dba8:	f43f a977 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dbac:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dbb0:	29ff      	cmp	r1, #255	; 0xff
   1dbb2:	d1f1      	bne.n	1db98 <d_print_comp_inner+0xe24>
   1dbb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dbb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dbbc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dbc0:	4620      	mov	r0, r4
   1dbc2:	4798      	blx	r3
   1dbc4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dbc8:	3301      	adds	r3, #1
   1dbca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dbce:	2101      	movs	r1, #1
   1dbd0:	2300      	movs	r3, #0
   1dbd2:	e7e3      	b.n	1db9c <d_print_comp_inner+0xe28>
   1dbd4:	4fb3      	ldr	r7, [pc, #716]	; (1dea4 <d_print_comp_inner+0x1130>)
   1dbd6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dbda:	f107 0910 	add.w	r9, r7, #16
   1dbde:	2576      	movs	r5, #118	; 0x76
   1dbe0:	f04f 0800 	mov.w	r8, #0
   1dbe4:	e00b      	b.n	1dbfe <d_print_comp_inner+0xe8a>
   1dbe6:	460b      	mov	r3, r1
   1dbe8:	3101      	adds	r1, #1
   1dbea:	45b9      	cmp	r9, r7
   1dbec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dbf0:	54e5      	strb	r5, [r4, r3]
   1dbf2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dbf6:	f43f a950 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dbfa:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dbfe:	29ff      	cmp	r1, #255	; 0xff
   1dc00:	d1f1      	bne.n	1dbe6 <d_print_comp_inner+0xe72>
   1dc02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dc06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dc0a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dc0e:	4620      	mov	r0, r4
   1dc10:	4798      	blx	r3
   1dc12:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc16:	3301      	adds	r3, #1
   1dc18:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dc1c:	2101      	movs	r1, #1
   1dc1e:	2300      	movs	r3, #0
   1dc20:	e7e3      	b.n	1dbea <d_print_comp_inner+0xe76>
   1dc22:	4fa1      	ldr	r7, [pc, #644]	; (1dea8 <d_print_comp_inner+0x1134>)
   1dc24:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dc28:	f107 0914 	add.w	r9, r7, #20
   1dc2c:	256e      	movs	r5, #110	; 0x6e
   1dc2e:	f04f 0800 	mov.w	r8, #0
   1dc32:	e00b      	b.n	1dc4c <d_print_comp_inner+0xed8>
   1dc34:	460b      	mov	r3, r1
   1dc36:	3101      	adds	r1, #1
   1dc38:	45b9      	cmp	r9, r7
   1dc3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dc3e:	54e5      	strb	r5, [r4, r3]
   1dc40:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dc44:	f43f a929 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dc48:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dc4c:	29ff      	cmp	r1, #255	; 0xff
   1dc4e:	d1f1      	bne.n	1dc34 <d_print_comp_inner+0xec0>
   1dc50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dc54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dc58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dc5c:	4620      	mov	r0, r4
   1dc5e:	4798      	blx	r3
   1dc60:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc64:	3301      	adds	r3, #1
   1dc66:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dc6a:	2101      	movs	r1, #1
   1dc6c:	2300      	movs	r3, #0
   1dc6e:	e7e3      	b.n	1dc38 <d_print_comp_inner+0xec4>
   1dc70:	4f8e      	ldr	r7, [pc, #568]	; (1deac <d_print_comp_inner+0x1138>)
   1dc72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dc76:	f107 0918 	add.w	r9, r7, #24
   1dc7a:	2554      	movs	r5, #84	; 0x54
   1dc7c:	f04f 0800 	mov.w	r8, #0
   1dc80:	e00b      	b.n	1dc9a <d_print_comp_inner+0xf26>
   1dc82:	460b      	mov	r3, r1
   1dc84:	3101      	adds	r1, #1
   1dc86:	45b9      	cmp	r9, r7
   1dc88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dc8c:	54e5      	strb	r5, [r4, r3]
   1dc8e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dc92:	f43f a902 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dc96:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dc9a:	29ff      	cmp	r1, #255	; 0xff
   1dc9c:	d1f1      	bne.n	1dc82 <d_print_comp_inner+0xf0e>
   1dc9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dca2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dca6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dcaa:	4620      	mov	r0, r4
   1dcac:	4798      	blx	r3
   1dcae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dcb2:	3301      	adds	r3, #1
   1dcb4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dcb8:	2101      	movs	r1, #1
   1dcba:	2300      	movs	r3, #0
   1dcbc:	e7e3      	b.n	1dc86 <d_print_comp_inner+0xf12>
   1dcbe:	4f7c      	ldr	r7, [pc, #496]	; (1deb0 <d_print_comp_inner+0x113c>)
   1dcc0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dcc4:	f107 0915 	add.w	r9, r7, #21
   1dcc8:	2554      	movs	r5, #84	; 0x54
   1dcca:	f04f 0800 	mov.w	r8, #0
   1dcce:	e00b      	b.n	1dce8 <d_print_comp_inner+0xf74>
   1dcd0:	460b      	mov	r3, r1
   1dcd2:	3101      	adds	r1, #1
   1dcd4:	45b9      	cmp	r9, r7
   1dcd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dcda:	54e5      	strb	r5, [r4, r3]
   1dcdc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dce0:	f43f a8db 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dce4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dce8:	29ff      	cmp	r1, #255	; 0xff
   1dcea:	d1f1      	bne.n	1dcd0 <d_print_comp_inner+0xf5c>
   1dcec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dcf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dcf4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dcf8:	4620      	mov	r0, r4
   1dcfa:	4798      	blx	r3
   1dcfc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd00:	3301      	adds	r3, #1
   1dd02:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd06:	2101      	movs	r1, #1
   1dd08:	2300      	movs	r3, #0
   1dd0a:	e7e3      	b.n	1dcd4 <d_print_comp_inner+0xf60>
   1dd0c:	4f69      	ldr	r7, [pc, #420]	; (1deb4 <d_print_comp_inner+0x1140>)
   1dd0e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dd12:	f107 0912 	add.w	r9, r7, #18
   1dd16:	2567      	movs	r5, #103	; 0x67
   1dd18:	f04f 0800 	mov.w	r8, #0
   1dd1c:	e00b      	b.n	1dd36 <d_print_comp_inner+0xfc2>
   1dd1e:	460b      	mov	r3, r1
   1dd20:	3101      	adds	r1, #1
   1dd22:	45b9      	cmp	r9, r7
   1dd24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dd28:	54e5      	strb	r5, [r4, r3]
   1dd2a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dd2e:	f43f a8b4 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dd32:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dd36:	29ff      	cmp	r1, #255	; 0xff
   1dd38:	d1f1      	bne.n	1dd1e <d_print_comp_inner+0xfaa>
   1dd3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dd3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dd42:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dd46:	4620      	mov	r0, r4
   1dd48:	4798      	blx	r3
   1dd4a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd4e:	3301      	adds	r3, #1
   1dd50:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd54:	2101      	movs	r1, #1
   1dd56:	2300      	movs	r3, #0
   1dd58:	e7e3      	b.n	1dd22 <d_print_comp_inner+0xfae>
   1dd5a:	4f57      	ldr	r7, [pc, #348]	; (1deb8 <d_print_comp_inner+0x1144>)
   1dd5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dd60:	f107 090e 	add.w	r9, r7, #14
   1dd64:	256a      	movs	r5, #106	; 0x6a
   1dd66:	f04f 0800 	mov.w	r8, #0
   1dd6a:	e00b      	b.n	1dd84 <d_print_comp_inner+0x1010>
   1dd6c:	460b      	mov	r3, r1
   1dd6e:	3101      	adds	r1, #1
   1dd70:	45b9      	cmp	r9, r7
   1dd72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dd76:	54e5      	strb	r5, [r4, r3]
   1dd78:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dd7c:	f43f a88d 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dd80:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dd84:	29ff      	cmp	r1, #255	; 0xff
   1dd86:	d1f1      	bne.n	1dd6c <d_print_comp_inner+0xff8>
   1dd88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dd8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dd90:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dd94:	4620      	mov	r0, r4
   1dd96:	4798      	blx	r3
   1dd98:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd9c:	3301      	adds	r3, #1
   1dd9e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dda2:	2101      	movs	r1, #1
   1dda4:	2300      	movs	r3, #0
   1dda6:	e7e3      	b.n	1dd70 <d_print_comp_inner+0xffc>
   1dda8:	4f44      	ldr	r7, [pc, #272]	; (1debc <d_print_comp_inner+0x1148>)
   1ddaa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ddae:	f107 0908 	add.w	r9, r7, #8
   1ddb2:	256f      	movs	r5, #111	; 0x6f
   1ddb4:	f04f 0800 	mov.w	r8, #0
   1ddb8:	e00b      	b.n	1ddd2 <d_print_comp_inner+0x105e>
   1ddba:	460b      	mov	r3, r1
   1ddbc:	3101      	adds	r1, #1
   1ddbe:	45b9      	cmp	r9, r7
   1ddc0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ddc4:	54e5      	strb	r5, [r4, r3]
   1ddc6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ddca:	f000 8295 	beq.w	1e2f8 <d_print_comp_inner+0x1584>
   1ddce:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ddd2:	29ff      	cmp	r1, #255	; 0xff
   1ddd4:	d1f1      	bne.n	1ddba <d_print_comp_inner+0x1046>
   1ddd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ddda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ddde:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dde2:	4620      	mov	r0, r4
   1dde4:	4798      	blx	r3
   1dde6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ddea:	3301      	adds	r3, #1
   1ddec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ddf0:	2101      	movs	r1, #1
   1ddf2:	2300      	movs	r3, #0
   1ddf4:	e7e3      	b.n	1ddbe <d_print_comp_inner+0x104a>
   1ddf6:	4f31      	ldr	r7, [pc, #196]	; (1debc <d_print_comp_inner+0x1148>)
   1ddf8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ddfc:	f107 0908 	add.w	r9, r7, #8
   1de00:	256f      	movs	r5, #111	; 0x6f
   1de02:	f04f 0800 	mov.w	r8, #0
   1de06:	e00b      	b.n	1de20 <d_print_comp_inner+0x10ac>
   1de08:	460b      	mov	r3, r1
   1de0a:	3101      	adds	r1, #1
   1de0c:	45b9      	cmp	r9, r7
   1de0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1de12:	54e5      	strb	r5, [r4, r3]
   1de14:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1de18:	f43f a853 	beq.w	1cec2 <d_print_comp_inner+0x14e>
   1de1c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1de20:	29ff      	cmp	r1, #255	; 0xff
   1de22:	d1f1      	bne.n	1de08 <d_print_comp_inner+0x1094>
   1de24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1de28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1de2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1de30:	4620      	mov	r0, r4
   1de32:	4798      	blx	r3
   1de34:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1de38:	3301      	adds	r3, #1
   1de3a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1de3e:	2101      	movs	r1, #1
   1de40:	2300      	movs	r3, #0
   1de42:	e7e3      	b.n	1de0c <d_print_comp_inner+0x1098>
   1de44:	68d2      	ldr	r2, [r2, #12]
   1de46:	2111      	movs	r1, #17
   1de48:	f001 f80e 	bl	1ee68 <d_print_comp>
   1de4c:	f7ff b839 	b.w	1cec2 <d_print_comp_inner+0x14e>
   1de50:	4f1b      	ldr	r7, [pc, #108]	; (1dec0 <d_print_comp_inner+0x114c>)
   1de52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1de56:	f107 090d 	add.w	r9, r7, #13
   1de5a:	256a      	movs	r5, #106	; 0x6a
   1de5c:	f04f 0800 	mov.w	r8, #0
   1de60:	e00b      	b.n	1de7a <d_print_comp_inner+0x1106>
   1de62:	460b      	mov	r3, r1
   1de64:	3101      	adds	r1, #1
   1de66:	45b9      	cmp	r9, r7
   1de68:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1de6c:	54e5      	strb	r5, [r4, r3]
   1de6e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1de72:	f43f a812 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1de76:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1de7a:	29ff      	cmp	r1, #255	; 0xff
   1de7c:	d1f1      	bne.n	1de62 <d_print_comp_inner+0x10ee>
   1de7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1de82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1de86:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1de8a:	4620      	mov	r0, r4
   1de8c:	4798      	blx	r3
   1de8e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1de92:	3301      	adds	r3, #1
   1de94:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1de98:	2101      	movs	r1, #1
   1de9a:	2300      	movs	r3, #0
   1de9c:	e7e3      	b.n	1de66 <d_print_comp_inner+0x10f2>
   1de9e:	bf00      	nop
   1dea0:	20004c24 	.word	0x20004c24
   1dea4:	20004c10 	.word	0x20004c10
   1dea8:	20004c0c 	.word	0x20004c0c
   1deac:	20004c7c 	.word	0x20004c7c
   1deb0:	20004c64 	.word	0x20004c64
   1deb4:	20004c50 	.word	0x20004c50
   1deb8:	20004c40 	.word	0x20004c40
   1debc:	20004d08 	.word	0x20004d08
   1dec0:	20004d4c 	.word	0x20004d4c
   1dec4:	2300      	movs	r3, #0
   1dec6:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
   1deca:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
   1dece:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1ded2:	2111      	movs	r1, #17
   1ded4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1ded8:	68d2      	ldr	r2, [r2, #12]
   1deda:	f000 ffc5 	bl	1ee68 <d_print_comp>
   1dede:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1dee2:	2b3c      	cmp	r3, #60	; 0x3c
   1dee4:	f000 857c 	beq.w	1e9e0 <d_print_comp_inner+0x1c6c>
   1dee8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1deec:	29ff      	cmp	r1, #255	; 0xff
   1deee:	f000 8567 	beq.w	1e9c0 <d_print_comp_inner+0x1c4c>
   1def2:	1c4b      	adds	r3, r1, #1
   1def4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1def8:	233c      	movs	r3, #60	; 0x3c
   1defa:	5463      	strb	r3, [r4, r1]
   1defc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1df00:	6932      	ldr	r2, [r6, #16]
   1df02:	2111      	movs	r1, #17
   1df04:	4620      	mov	r0, r4
   1df06:	f000 ffaf 	bl	1ee68 <d_print_comp>
   1df0a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1df0e:	2b3e      	cmp	r3, #62	; 0x3e
   1df10:	f000 8550 	beq.w	1e9b4 <d_print_comp_inner+0x1c40>
   1df14:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1df18:	29ff      	cmp	r1, #255	; 0xff
   1df1a:	f000 853b 	beq.w	1e994 <d_print_comp_inner+0x1c20>
   1df1e:	1c4b      	adds	r3, r1, #1
   1df20:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1df24:	233e      	movs	r3, #62	; 0x3e
   1df26:	5463      	strb	r3, [r4, r1]
   1df28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1df2c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1df30:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
   1df34:	f7fe bf8e 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1df38:	4fc4      	ldr	r7, [pc, #784]	; (1e24c <d_print_comp_inner+0x14d8>)
   1df3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1df3e:	f107 0907 	add.w	r9, r7, #7
   1df42:	2556      	movs	r5, #86	; 0x56
   1df44:	f04f 0800 	mov.w	r8, #0
   1df48:	e00b      	b.n	1df62 <d_print_comp_inner+0x11ee>
   1df4a:	460b      	mov	r3, r1
   1df4c:	3101      	adds	r1, #1
   1df4e:	454f      	cmp	r7, r9
   1df50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1df54:	54e5      	strb	r5, [r4, r3]
   1df56:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1df5a:	f43e af9e 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1df5e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1df62:	29ff      	cmp	r1, #255	; 0xff
   1df64:	d1f1      	bne.n	1df4a <d_print_comp_inner+0x11d6>
   1df66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1df6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1df6e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1df72:	4620      	mov	r0, r4
   1df74:	4798      	blx	r3
   1df76:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1df7a:	3301      	adds	r3, #1
   1df7c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1df80:	2101      	movs	r1, #1
   1df82:	2300      	movs	r3, #0
   1df84:	e7e3      	b.n	1df4e <d_print_comp_inner+0x11da>
   1df86:	4fb2      	ldr	r7, [pc, #712]	; (1e250 <d_print_comp_inner+0x14dc>)
   1df88:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1df8c:	f107 090a 	add.w	r9, r7, #10
   1df90:	2576      	movs	r5, #118	; 0x76
   1df92:	f04f 0800 	mov.w	r8, #0
   1df96:	e00b      	b.n	1dfb0 <d_print_comp_inner+0x123c>
   1df98:	460b      	mov	r3, r1
   1df9a:	3101      	adds	r1, #1
   1df9c:	45b9      	cmp	r9, r7
   1df9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dfa2:	54e5      	strb	r5, [r4, r3]
   1dfa4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dfa8:	f43e af77 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1dfac:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dfb0:	29ff      	cmp	r1, #255	; 0xff
   1dfb2:	d1f1      	bne.n	1df98 <d_print_comp_inner+0x1224>
   1dfb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dfb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dfbc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	4798      	blx	r3
   1dfc4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dfc8:	3301      	adds	r3, #1
   1dfca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dfce:	2101      	movs	r1, #1
   1dfd0:	2300      	movs	r3, #0
   1dfd2:	e7e3      	b.n	1df9c <d_print_comp_inner+0x1228>
   1dfd4:	6913      	ldr	r3, [r2, #16]
   1dfd6:	781a      	ldrb	r2, [r3, #0]
   1dfd8:	2a3b      	cmp	r2, #59	; 0x3b
   1dfda:	f47e af38 	bne.w	1ce4e <d_print_comp_inner+0xda>
   1dfde:	691b      	ldr	r3, [r3, #16]
   1dfe0:	781b      	ldrb	r3, [r3, #0]
   1dfe2:	2b3c      	cmp	r3, #60	; 0x3c
   1dfe4:	f47e af33 	bne.w	1ce4e <d_print_comp_inner+0xda>
   1dfe8:	4632      	mov	r2, r6
   1dfea:	2111      	movs	r1, #17
   1dfec:	f001 ffe4 	bl	1ffb8 <d_maybe_print_fold_expression>
   1dff0:	2800      	cmp	r0, #0
   1dff2:	f47e af2f 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1dff6:	4632      	mov	r2, r6
   1dff8:	2111      	movs	r1, #17
   1dffa:	4620      	mov	r0, r4
   1dffc:	f002 f906 	bl	2020c <d_maybe_print_designated_init>
   1e000:	2800      	cmp	r0, #0
   1e002:	f47e af27 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1e006:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
   1e00a:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
   1e00e:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1e012:	4990      	ldr	r1, [pc, #576]	; (1e254 <d_print_comp_inner+0x14e0>)
   1e014:	6810      	ldr	r0, [r2, #0]
   1e016:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
   1e01a:	f006 fea5 	bl	24d68 <strcmp>
   1e01e:	2800      	cmp	r0, #0
   1e020:	f040 86e5 	bne.w	1edee <d_print_comp_inner+0x207a>
   1e024:	4632      	mov	r2, r6
   1e026:	4620      	mov	r0, r4
   1e028:	2111      	movs	r1, #17
   1e02a:	f001 ff57 	bl	1fedc <d_print_subexpr>
   1e02e:	4642      	mov	r2, r8
   1e030:	4620      	mov	r0, r4
   1e032:	2111      	movs	r1, #17
   1e034:	f001 fd56 	bl	1fae4 <d_print_expr_op>
   1e038:	4620      	mov	r0, r4
   1e03a:	463a      	mov	r2, r7
   1e03c:	2111      	movs	r1, #17
   1e03e:	f001 ff4d 	bl	1fedc <d_print_subexpr>
   1e042:	4985      	ldr	r1, [pc, #532]	; (1e258 <d_print_comp_inner+0x14e4>)
   1e044:	4620      	mov	r0, r4
   1e046:	f7fc fce3 	bl	1aa10 <d_append_string>
   1e04a:	e4fe      	b.n	1da4a <d_print_comp_inner+0xcd6>
   1e04c:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   1e050:	2b00      	cmp	r3, #0
   1e052:	f43e aeff 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e056:	442b      	add	r3, r5
   1e058:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e05c:	3d01      	subs	r5, #1
   1e05e:	1e5f      	subs	r7, r3, #1
   1e060:	f04f 0800 	mov.w	r8, #0
   1e064:	e009      	b.n	1e07a <d_print_comp_inner+0x1306>
   1e066:	460b      	mov	r3, r1
   1e068:	3101      	adds	r1, #1
   1e06a:	42af      	cmp	r7, r5
   1e06c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e070:	54e6      	strb	r6, [r4, r3]
   1e072:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e076:	f43e aeed 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e07a:	29ff      	cmp	r1, #255	; 0xff
   1e07c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e080:	d1f1      	bne.n	1e066 <d_print_comp_inner+0x12f2>
   1e082:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e086:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e08a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e08e:	4620      	mov	r0, r4
   1e090:	4798      	blx	r3
   1e092:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e096:	3301      	adds	r3, #1
   1e098:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e09c:	2101      	movs	r1, #1
   1e09e:	2300      	movs	r3, #0
   1e0a0:	e7e3      	b.n	1e06a <d_print_comp_inner+0x12f6>
   1e0a2:	68d2      	ldr	r2, [r2, #12]
   1e0a4:	e9d2 5300 	ldrd	r5, r3, [r2]
   1e0a8:	2b00      	cmp	r3, #0
   1e0aa:	f43e aed3 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e0ae:	442b      	add	r3, r5
   1e0b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e0b4:	3d01      	subs	r5, #1
   1e0b6:	1e5f      	subs	r7, r3, #1
   1e0b8:	f04f 0800 	mov.w	r8, #0
   1e0bc:	e009      	b.n	1e0d2 <d_print_comp_inner+0x135e>
   1e0be:	460b      	mov	r3, r1
   1e0c0:	3101      	adds	r1, #1
   1e0c2:	42af      	cmp	r7, r5
   1e0c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e0c8:	54e6      	strb	r6, [r4, r3]
   1e0ca:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e0ce:	f43e aec1 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e0d2:	29ff      	cmp	r1, #255	; 0xff
   1e0d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e0d8:	d1f1      	bne.n	1e0be <d_print_comp_inner+0x134a>
   1e0da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e0de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e0e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	4798      	blx	r3
   1e0ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e0ee:	3301      	adds	r3, #1
   1e0f0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e0f4:	2101      	movs	r1, #1
   1e0f6:	2300      	movs	r3, #0
   1e0f8:	e7e3      	b.n	1e0c2 <d_print_comp_inner+0x134e>
   1e0fa:	4958      	ldr	r1, [pc, #352]	; (1e25c <d_print_comp_inner+0x14e8>)
   1e0fc:	4620      	mov	r0, r4
   1e0fe:	f7fc fc87 	bl	1aa10 <d_append_string>
   1e102:	693a      	ldr	r2, [r7, #16]
   1e104:	4956      	ldr	r1, [pc, #344]	; (1e260 <d_print_comp_inner+0x14ec>)
   1e106:	3201      	adds	r2, #1
   1e108:	a804      	add	r0, sp, #16
   1e10a:	f004 f9ed 	bl	224e8 <sprintf>
   1e10e:	a804      	add	r0, sp, #16
   1e110:	f008 fdb6 	bl	26c80 <strlen>
   1e114:	2800      	cmp	r0, #0
   1e116:	f000 83fb 	beq.w	1e910 <d_print_comp_inner+0x1b9c>
   1e11a:	ad04      	add	r5, sp, #16
   1e11c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e120:	eb05 0900 	add.w	r9, r5, r0
   1e124:	f04f 0800 	mov.w	r8, #0
   1e128:	e009      	b.n	1e13e <d_print_comp_inner+0x13ca>
   1e12a:	460b      	mov	r3, r1
   1e12c:	3101      	adds	r1, #1
   1e12e:	45a9      	cmp	r9, r5
   1e130:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e134:	54e6      	strb	r6, [r4, r3]
   1e136:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e13a:	f000 83e9 	beq.w	1e910 <d_print_comp_inner+0x1b9c>
   1e13e:	29ff      	cmp	r1, #255	; 0xff
   1e140:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e144:	d1f1      	bne.n	1e12a <d_print_comp_inner+0x13b6>
   1e146:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e14a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e14e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e152:	4620      	mov	r0, r4
   1e154:	4798      	blx	r3
   1e156:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e15a:	3301      	adds	r3, #1
   1e15c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e160:	2101      	movs	r1, #1
   1e162:	2300      	movs	r3, #0
   1e164:	e7e3      	b.n	1e12e <d_print_comp_inner+0x13ba>
   1e166:	2111      	movs	r1, #17
   1e168:	6932      	ldr	r2, [r6, #16]
   1e16a:	4620      	mov	r0, r4
   1e16c:	f000 fe7c 	bl	1ee68 <d_print_comp>
   1e170:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e174:	29ff      	cmp	r1, #255	; 0xff
   1e176:	f000 8299 	beq.w	1e6ac <d_print_comp_inner+0x1938>
   1e17a:	1c4a      	adds	r2, r1, #1
   1e17c:	235d      	movs	r3, #93	; 0x5d
   1e17e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e182:	5463      	strb	r3, [r4, r1]
   1e184:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e188:	f7fe be64 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e18c:	2801      	cmp	r0, #1
   1e18e:	f240 8196 	bls.w	1e4be <d_print_comp_inner+0x174a>
   1e192:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1e196:	f7ff bb30 	b.w	1d7fa <d_print_comp_inner+0xa86>
   1e19a:	68f2      	ldr	r2, [r6, #12]
   1e19c:	4930      	ldr	r1, [pc, #192]	; (1e260 <d_print_comp_inner+0x14ec>)
   1e19e:	3201      	adds	r2, #1
   1e1a0:	a804      	add	r0, sp, #16
   1e1a2:	f004 f9a1 	bl	224e8 <sprintf>
   1e1a6:	a804      	add	r0, sp, #16
   1e1a8:	f008 fd6a 	bl	26c80 <strlen>
   1e1ac:	b318      	cbz	r0, 1e1f6 <d_print_comp_inner+0x1482>
   1e1ae:	ad04      	add	r5, sp, #16
   1e1b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e1b4:	182f      	adds	r7, r5, r0
   1e1b6:	f04f 0800 	mov.w	r8, #0
   1e1ba:	e008      	b.n	1e1ce <d_print_comp_inner+0x145a>
   1e1bc:	460b      	mov	r3, r1
   1e1be:	3101      	adds	r1, #1
   1e1c0:	42af      	cmp	r7, r5
   1e1c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e1c6:	54e6      	strb	r6, [r4, r3]
   1e1c8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e1cc:	d015      	beq.n	1e1fa <d_print_comp_inner+0x1486>
   1e1ce:	29ff      	cmp	r1, #255	; 0xff
   1e1d0:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e1d4:	d1f2      	bne.n	1e1bc <d_print_comp_inner+0x1448>
   1e1d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e1da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e1de:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e1e2:	4620      	mov	r0, r4
   1e1e4:	4798      	blx	r3
   1e1e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e1ea:	3301      	adds	r3, #1
   1e1ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e1f0:	2101      	movs	r1, #1
   1e1f2:	2300      	movs	r3, #0
   1e1f4:	e7e4      	b.n	1e1c0 <d_print_comp_inner+0x144c>
   1e1f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e1fa:	29ff      	cmp	r1, #255	; 0xff
   1e1fc:	f47f a91a 	bne.w	1d434 <d_print_comp_inner+0x6c0>
   1e200:	2500      	movs	r5, #0
   1e202:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e206:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e20a:	4620      	mov	r0, r4
   1e20c:	4798      	blx	r3
   1e20e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e212:	2201      	movs	r2, #1
   1e214:	4413      	add	r3, r2
   1e216:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e21a:	4629      	mov	r1, r5
   1e21c:	f7ff b90b 	b.w	1d436 <d_print_comp_inner+0x6c2>
   1e220:	687d      	ldr	r5, [r7, #4]
   1e222:	782b      	ldrb	r3, [r5, #0]
   1e224:	3b61      	subs	r3, #97	; 0x61
   1e226:	2b19      	cmp	r3, #25
   1e228:	f240 832d 	bls.w	1e886 <d_print_comp_inner+0x1b12>
   1e22c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1e230:	5deb      	ldrb	r3, [r5, r7]
   1e232:	2b20      	cmp	r3, #32
   1e234:	bf18      	it	ne
   1e236:	4647      	movne	r7, r8
   1e238:	2f00      	cmp	r7, #0
   1e23a:	f43e ae0b 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e23e:	3d01      	subs	r5, #1
   1e240:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e244:	442f      	add	r7, r5
   1e246:	f04f 0800 	mov.w	r8, #0
   1e24a:	e015      	b.n	1e278 <d_print_comp_inner+0x1504>
   1e24c:	20004ba4 	.word	0x20004ba4
   1e250:	20004b98 	.word	0x20004b98
   1e254:	20004d20 	.word	0x20004d20
   1e258:	20004d24 	.word	0x20004d24
   1e25c:	20004b5c 	.word	0x20004b5c
   1e260:	20004b0c 	.word	0x20004b0c
   1e264:	460b      	mov	r3, r1
   1e266:	3101      	adds	r1, #1
   1e268:	42af      	cmp	r7, r5
   1e26a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e26e:	54e6      	strb	r6, [r4, r3]
   1e270:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e274:	f43e adee 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e278:	29ff      	cmp	r1, #255	; 0xff
   1e27a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e27e:	d1f1      	bne.n	1e264 <d_print_comp_inner+0x14f0>
   1e280:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e284:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e288:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e28c:	4620      	mov	r0, r4
   1e28e:	4798      	blx	r3
   1e290:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e294:	3301      	adds	r3, #1
   1e296:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e29a:	2101      	movs	r1, #1
   1e29c:	2300      	movs	r3, #0
   1e29e:	e7e3      	b.n	1e268 <d_print_comp_inner+0x14f4>
   1e2a0:	4fcc      	ldr	r7, [pc, #816]	; (1e5d4 <d_print_comp_inner+0x1860>)
   1e2a2:	6932      	ldr	r2, [r6, #16]
   1e2a4:	2111      	movs	r1, #17
   1e2a6:	4620      	mov	r0, r4
   1e2a8:	f000 fdde 	bl	1ee68 <d_print_comp>
   1e2ac:	f107 0904 	add.w	r9, r7, #4
   1e2b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e2b4:	2520      	movs	r5, #32
   1e2b6:	f04f 0800 	mov.w	r8, #0
   1e2ba:	e00b      	b.n	1e2d4 <d_print_comp_inner+0x1560>
   1e2bc:	460b      	mov	r3, r1
   1e2be:	3101      	adds	r1, #1
   1e2c0:	45b9      	cmp	r9, r7
   1e2c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e2c6:	54e5      	strb	r5, [r4, r3]
   1e2c8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e2cc:	f43e ade5 	beq.w	1ce9a <d_print_comp_inner+0x126>
   1e2d0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e2d4:	29ff      	cmp	r1, #255	; 0xff
   1e2d6:	d1f1      	bne.n	1e2bc <d_print_comp_inner+0x1548>
   1e2d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e2dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e2e0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	4798      	blx	r3
   1e2e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e2ec:	3301      	adds	r3, #1
   1e2ee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e2f2:	2101      	movs	r1, #1
   1e2f4:	2300      	movs	r3, #0
   1e2f6:	e7e3      	b.n	1e2c0 <d_print_comp_inner+0x154c>
   1e2f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1e2fc:	b133      	cbz	r3, 1e30c <d_print_comp_inner+0x1598>
   1e2fe:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   1e302:	9104      	str	r1, [sp, #16]
   1e304:	aa04      	add	r2, sp, #16
   1e306:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   1e30a:	9305      	str	r3, [sp, #20]
   1e30c:	68f2      	ldr	r2, [r6, #12]
   1e30e:	7813      	ldrb	r3, [r2, #0]
   1e310:	2b04      	cmp	r3, #4
   1e312:	f000 8207 	beq.w	1e724 <d_print_comp_inner+0x19b0>
   1e316:	2111      	movs	r1, #17
   1e318:	4620      	mov	r0, r4
   1e31a:	f000 fda5 	bl	1ee68 <d_print_comp>
   1e31e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1e322:	2b00      	cmp	r3, #0
   1e324:	f43e ad96 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e328:	9b04      	ldr	r3, [sp, #16]
   1e32a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e32e:	f7fe bd91 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e332:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1e336:	68f2      	ldr	r2, [r6, #12]
   1e338:	4fa7      	ldr	r7, [pc, #668]	; (1e5d8 <d_print_comp_inner+0x1864>)
   1e33a:	3301      	adds	r3, #1
   1e33c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1e340:	2111      	movs	r1, #17
   1e342:	4620      	mov	r0, r4
   1e344:	f000 fd90 	bl	1ee68 <d_print_comp>
   1e348:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1e34c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e350:	3b01      	subs	r3, #1
   1e352:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1e356:	f107 0901 	add.w	r9, r7, #1
   1e35a:	2529      	movs	r5, #41	; 0x29
   1e35c:	f04f 0800 	mov.w	r8, #0
   1e360:	e00a      	b.n	1e378 <d_print_comp_inner+0x1604>
   1e362:	460b      	mov	r3, r1
   1e364:	3101      	adds	r1, #1
   1e366:	454f      	cmp	r7, r9
   1e368:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e36c:	54e5      	strb	r5, [r4, r3]
   1e36e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e372:	d013      	beq.n	1e39c <d_print_comp_inner+0x1628>
   1e374:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e378:	29ff      	cmp	r1, #255	; 0xff
   1e37a:	d1f2      	bne.n	1e362 <d_print_comp_inner+0x15ee>
   1e37c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e380:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e384:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e388:	4620      	mov	r0, r4
   1e38a:	4798      	blx	r3
   1e38c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e390:	3301      	adds	r3, #1
   1e392:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e396:	2101      	movs	r1, #1
   1e398:	2300      	movs	r3, #0
   1e39a:	e7e4      	b.n	1e366 <d_print_comp_inner+0x15f2>
   1e39c:	6932      	ldr	r2, [r6, #16]
   1e39e:	498f      	ldr	r1, [pc, #572]	; (1e5dc <d_print_comp_inner+0x1868>)
   1e3a0:	3201      	adds	r2, #1
   1e3a2:	a804      	add	r0, sp, #16
   1e3a4:	f004 f8a0 	bl	224e8 <sprintf>
   1e3a8:	a804      	add	r0, sp, #16
   1e3aa:	f008 fc69 	bl	26c80 <strlen>
   1e3ae:	2800      	cmp	r0, #0
   1e3b0:	f43f af21 	beq.w	1e1f6 <d_print_comp_inner+0x1482>
   1e3b4:	ad04      	add	r5, sp, #16
   1e3b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e3ba:	182f      	adds	r7, r5, r0
   1e3bc:	f04f 0800 	mov.w	r8, #0
   1e3c0:	e009      	b.n	1e3d6 <d_print_comp_inner+0x1662>
   1e3c2:	460b      	mov	r3, r1
   1e3c4:	3101      	adds	r1, #1
   1e3c6:	42bd      	cmp	r5, r7
   1e3c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e3cc:	54e6      	strb	r6, [r4, r3]
   1e3ce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e3d2:	f43f af12 	beq.w	1e1fa <d_print_comp_inner+0x1486>
   1e3d6:	29ff      	cmp	r1, #255	; 0xff
   1e3d8:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e3dc:	d1f1      	bne.n	1e3c2 <d_print_comp_inner+0x164e>
   1e3de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e3e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e3e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e3ea:	4620      	mov	r0, r4
   1e3ec:	4798      	blx	r3
   1e3ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e3f2:	3301      	adds	r3, #1
   1e3f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e3f8:	2101      	movs	r1, #1
   1e3fa:	2300      	movs	r3, #0
   1e3fc:	e7e3      	b.n	1e3c6 <d_print_comp_inner+0x1652>
   1e3fe:	4f78      	ldr	r7, [pc, #480]	; (1e5e0 <d_print_comp_inner+0x186c>)
   1e400:	68f2      	ldr	r2, [r6, #12]
   1e402:	2111      	movs	r1, #17
   1e404:	4620      	mov	r0, r4
   1e406:	f000 fd2f 	bl	1ee68 <d_print_comp>
   1e40a:	f107 0903 	add.w	r9, r7, #3
   1e40e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e412:	252d      	movs	r5, #45	; 0x2d
   1e414:	f04f 0800 	mov.w	r8, #0
   1e418:	e00b      	b.n	1e432 <d_print_comp_inner+0x16be>
   1e41a:	460b      	mov	r3, r1
   1e41c:	3101      	adds	r1, #1
   1e41e:	45b9      	cmp	r9, r7
   1e420:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e424:	54e5      	strb	r5, [r4, r3]
   1e426:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e42a:	f43e ad4a 	beq.w	1cec2 <d_print_comp_inner+0x14e>
   1e42e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e432:	29ff      	cmp	r1, #255	; 0xff
   1e434:	d1f1      	bne.n	1e41a <d_print_comp_inner+0x16a6>
   1e436:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e43a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e43e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e442:	4620      	mov	r0, r4
   1e444:	4798      	blx	r3
   1e446:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e44a:	3301      	adds	r3, #1
   1e44c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e450:	2101      	movs	r1, #1
   1e452:	2300      	movs	r3, #0
   1e454:	e7e3      	b.n	1e41e <d_print_comp_inner+0x16aa>
   1e456:	68f2      	ldr	r2, [r6, #12]
   1e458:	f7ff b902 	b.w	1d660 <d_print_comp_inner+0x8ec>
   1e45c:	4632      	mov	r2, r6
   1e45e:	2111      	movs	r1, #17
   1e460:	4620      	mov	r0, r4
   1e462:	f000 fd2f 	bl	1eec4 <d_print_mod>
   1e466:	f7fe bd10 	b.w	1ce8a <d_print_comp_inner+0x116>
   1e46a:	6932      	ldr	r2, [r6, #16]
   1e46c:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
   1e470:	460d      	mov	r5, r1
   1e472:	4620      	mov	r0, r4
   1e474:	2111      	movs	r1, #17
   1e476:	f000 fcf7 	bl	1ee68 <d_print_comp>
   1e47a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e47e:	42b3      	cmp	r3, r6
   1e480:	f47e ace8 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1e484:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1e488:	429d      	cmp	r5, r3
   1e48a:	f47e ace3 	bne.w	1ce54 <d_print_comp_inner+0xe0>
   1e48e:	3d02      	subs	r5, #2
   1e490:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1e494:	f7fe bcde 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e498:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e49c:	29ff      	cmp	r1, #255	; 0xff
   1e49e:	f000 835f 	beq.w	1eb60 <d_print_comp_inner+0x1dec>
   1e4a2:	1c4b      	adds	r3, r1, #1
   1e4a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e4a8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1e4ac:	5467      	strb	r7, [r4, r1]
   1e4ae:	4620      	mov	r0, r4
   1e4b0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1e4b4:	2111      	movs	r1, #17
   1e4b6:	f000 fd05 	bl	1eec4 <d_print_mod>
   1e4ba:	f7ff b9b2 	b.w	1d822 <d_print_comp_inner+0xaae>
   1e4be:	68ff      	ldr	r7, [r7, #12]
   1e4c0:	4652      	mov	r2, sl
   1e4c2:	2f00      	cmp	r7, #0
   1e4c4:	f000 84ac 	beq.w	1ee20 <d_print_comp_inner+0x20ac>
   1e4c8:	2d04      	cmp	r5, #4
   1e4ca:	f103 0310 	add.w	r3, r3, #16
   1e4ce:	f000 81f1 	beq.w	1e8b4 <d_print_comp_inner+0x1b40>
   1e4d2:	4629      	mov	r1, r5
   1e4d4:	f7ff b95c 	b.w	1d790 <d_print_comp_inner+0xa1c>
   1e4d8:	f1b8 0f00 	cmp.w	r8, #0
   1e4dc:	f43e acba 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e4e0:	46c1      	mov	r9, r8
   1e4e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1e4e6:	f7fe be7c 	b.w	1d1e2 <d_print_comp_inner+0x46e>
   1e4ea:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1e4ee:	68c2      	ldr	r2, [r0, #12]
   1e4f0:	4606      	mov	r6, r0
   1e4f2:	f7fe bd2a 	b.w	1cf4a <d_print_comp_inner+0x1d6>
   1e4f6:	2d07      	cmp	r5, #7
   1e4f8:	f47e ad83 	bne.w	1d002 <d_print_comp_inner+0x28e>
   1e4fc:	6933      	ldr	r3, [r6, #16]
   1e4fe:	7819      	ldrb	r1, [r3, #0]
   1e500:	2900      	cmp	r1, #0
   1e502:	f47e ad7e 	bne.w	1d002 <d_print_comp_inner+0x28e>
   1e506:	6919      	ldr	r1, [r3, #16]
   1e508:	2901      	cmp	r1, #1
   1e50a:	f47e ad7a 	bne.w	1d002 <d_print_comp_inner+0x28e>
   1e50e:	2f3d      	cmp	r7, #61	; 0x3d
   1e510:	f47e ad77 	bne.w	1d002 <d_print_comp_inner+0x28e>
   1e514:	68db      	ldr	r3, [r3, #12]
   1e516:	781b      	ldrb	r3, [r3, #0]
   1e518:	2b30      	cmp	r3, #48	; 0x30
   1e51a:	f000 849d 	beq.w	1ee58 <d_print_comp_inner+0x20e4>
   1e51e:	2b31      	cmp	r3, #49	; 0x31
   1e520:	f47e ad6f 	bne.w	1d002 <d_print_comp_inner+0x28e>
   1e524:	492f      	ldr	r1, [pc, #188]	; (1e5e4 <d_print_comp_inner+0x1870>)
   1e526:	f7ff b884 	b.w	1d632 <d_print_comp_inner+0x8be>
   1e52a:	4e2f      	ldr	r6, [pc, #188]	; (1e5e8 <d_print_comp_inner+0x1874>)
   1e52c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e530:	1d77      	adds	r7, r6, #5
   1e532:	255f      	movs	r5, #95	; 0x5f
   1e534:	e00b      	b.n	1e54e <d_print_comp_inner+0x17da>
   1e536:	460b      	mov	r3, r1
   1e538:	3101      	adds	r1, #1
   1e53a:	42b7      	cmp	r7, r6
   1e53c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e540:	54e5      	strb	r5, [r4, r3]
   1e542:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e546:	f43e ac85 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e54a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e54e:	29ff      	cmp	r1, #255	; 0xff
   1e550:	d1f1      	bne.n	1e536 <d_print_comp_inner+0x17c2>
   1e552:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e556:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e55a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e55e:	4620      	mov	r0, r4
   1e560:	4798      	blx	r3
   1e562:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e566:	3301      	adds	r3, #1
   1e568:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e56c:	2101      	movs	r1, #1
   1e56e:	2300      	movs	r3, #0
   1e570:	e7e3      	b.n	1e53a <d_print_comp_inner+0x17c6>
   1e572:	491e      	ldr	r1, [pc, #120]	; (1e5ec <d_print_comp_inner+0x1878>)
   1e574:	f7fc fa4c 	bl	1aa10 <d_append_string>
   1e578:	4918      	ldr	r1, [pc, #96]	; (1e5dc <d_print_comp_inner+0x1868>)
   1e57a:	462a      	mov	r2, r5
   1e57c:	a804      	add	r0, sp, #16
   1e57e:	f003 ffb3 	bl	224e8 <sprintf>
   1e582:	a804      	add	r0, sp, #16
   1e584:	f008 fb7c 	bl	26c80 <strlen>
   1e588:	b390      	cbz	r0, 1e5f0 <d_print_comp_inner+0x187c>
   1e58a:	ad04      	add	r5, sp, #16
   1e58c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e590:	182f      	adds	r7, r5, r0
   1e592:	f04f 0800 	mov.w	r8, #0
   1e596:	e008      	b.n	1e5aa <d_print_comp_inner+0x1836>
   1e598:	460b      	mov	r3, r1
   1e59a:	3101      	adds	r1, #1
   1e59c:	42bd      	cmp	r5, r7
   1e59e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e5a2:	54e6      	strb	r6, [r4, r3]
   1e5a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e5a8:	d024      	beq.n	1e5f4 <d_print_comp_inner+0x1880>
   1e5aa:	29ff      	cmp	r1, #255	; 0xff
   1e5ac:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e5b0:	d1f2      	bne.n	1e598 <d_print_comp_inner+0x1824>
   1e5b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e5b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e5ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e5be:	4620      	mov	r0, r4
   1e5c0:	4798      	blx	r3
   1e5c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e5c6:	3301      	adds	r3, #1
   1e5c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e5cc:	2101      	movs	r1, #1
   1e5ce:	2300      	movs	r3, #0
   1e5d0:	e7e4      	b.n	1e59c <d_print_comp_inner+0x1828>
   1e5d2:	bf00      	nop
   1e5d4:	20004c90 	.word	0x20004c90
   1e5d8:	20004dc8 	.word	0x20004dc8
   1e5dc:	20004b0c 	.word	0x20004b0c
   1e5e0:	20004bcc 	.word	0x20004bcc
   1e5e4:	20004d44 	.word	0x20004d44
   1e5e8:	20004cf0 	.word	0x20004cf0
   1e5ec:	20004d74 	.word	0x20004d74
   1e5f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e5f4:	29ff      	cmp	r1, #255	; 0xff
   1e5f6:	f000 82f3 	beq.w	1ebe0 <d_print_comp_inner+0x1e6c>
   1e5fa:	237d      	movs	r3, #125	; 0x7d
   1e5fc:	1c4a      	adds	r2, r1, #1
   1e5fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e602:	5463      	strb	r3, [r4, r1]
   1e604:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e608:	f7fe bc24 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e60c:	4610      	mov	r0, r2
   1e60e:	2500      	movs	r5, #0
   1e610:	f7fe bc90 	b.w	1cf34 <d_print_comp_inner+0x1c0>
   1e614:	68f2      	ldr	r2, [r6, #12]
   1e616:	49c2      	ldr	r1, [pc, #776]	; (1e920 <d_print_comp_inner+0x1bac>)
   1e618:	3201      	adds	r2, #1
   1e61a:	a804      	add	r0, sp, #16
   1e61c:	f003 ff64 	bl	224e8 <sprintf>
   1e620:	a804      	add	r0, sp, #16
   1e622:	f008 fb2d 	bl	26c80 <strlen>
   1e626:	2800      	cmp	r0, #0
   1e628:	f43e ac14 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e62c:	ad04      	add	r5, sp, #16
   1e62e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e632:	182f      	adds	r7, r5, r0
   1e634:	f04f 0800 	mov.w	r8, #0
   1e638:	e009      	b.n	1e64e <d_print_comp_inner+0x18da>
   1e63a:	460b      	mov	r3, r1
   1e63c:	3101      	adds	r1, #1
   1e63e:	42bd      	cmp	r5, r7
   1e640:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e644:	54e6      	strb	r6, [r4, r3]
   1e646:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e64a:	f43e ac03 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1e64e:	29ff      	cmp	r1, #255	; 0xff
   1e650:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e654:	d1f1      	bne.n	1e63a <d_print_comp_inner+0x18c6>
   1e656:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e65a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e65e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e662:	4620      	mov	r0, r4
   1e664:	4798      	blx	r3
   1e666:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e66a:	3301      	adds	r3, #1
   1e66c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e670:	2101      	movs	r1, #1
   1e672:	2300      	movs	r3, #0
   1e674:	e7e3      	b.n	1e63e <d_print_comp_inner+0x18ca>
   1e676:	4611      	mov	r1, r2
   1e678:	f7fc f964 	bl	1a944 <d_lookup_template_argument>
   1e67c:	4602      	mov	r2, r0
   1e67e:	2800      	cmp	r0, #0
   1e680:	f43e abe5 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1e684:	7803      	ldrb	r3, [r0, #0]
   1e686:	2b2f      	cmp	r3, #47	; 0x2f
   1e688:	f43e abd6 	beq.w	1ce38 <d_print_comp_inner+0xc4>
   1e68c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   1e690:	682b      	ldr	r3, [r5, #0]
   1e692:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e696:	2111      	movs	r1, #17
   1e698:	4620      	mov	r0, r4
   1e69a:	f000 fbe5 	bl	1ee68 <d_print_comp>
   1e69e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1e6a2:	f7fe bbd7 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e6a6:	2500      	movs	r5, #0
   1e6a8:	f7fe bcab 	b.w	1d002 <d_print_comp_inner+0x28e>
   1e6ac:	2500      	movs	r5, #0
   1e6ae:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e6b2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	4798      	blx	r3
   1e6ba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e6be:	2201      	movs	r2, #1
   1e6c0:	4413      	add	r3, r2
   1e6c2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e6c6:	4629      	mov	r1, r5
   1e6c8:	e558      	b.n	1e17c <d_print_comp_inner+0x1408>
   1e6ca:	2500      	movs	r5, #0
   1e6cc:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e6d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e6d4:	4620      	mov	r0, r4
   1e6d6:	4798      	blx	r3
   1e6d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e6dc:	2201      	movs	r2, #1
   1e6de:	4413      	add	r3, r2
   1e6e0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e6e4:	4629      	mov	r1, r5
   1e6e6:	f7fe bfc5 	b.w	1d674 <d_print_comp_inner+0x900>
   1e6ea:	2b01      	cmp	r3, #1
   1e6ec:	f63f a885 	bhi.w	1d7fa <d_print_comp_inner+0xa86>
   1e6f0:	2d04      	cmp	r5, #4
   1e6f2:	f43e abac 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1e6f6:	468e      	mov	lr, r1
   1e6f8:	f101 0b10 	add.w	fp, r1, #16
   1e6fc:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   1e6fe:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   1e702:	e9ce 7a01 	strd	r7, sl, [lr, #4]
   1e706:	68ff      	ldr	r7, [r7, #12]
   1e708:	f8ce e010 	str.w	lr, [lr, #16]
   1e70c:	3501      	adds	r5, #1
   1e70e:	f8ce c00c 	str.w	ip, [lr, #12]
   1e712:	4659      	mov	r1, fp
   1e714:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
   1e718:	2f00      	cmp	r7, #0
   1e71a:	f43e ab98 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1e71e:	783a      	ldrb	r2, [r7, #0]
   1e720:	f7ff b858 	b.w	1d7d4 <d_print_comp_inner+0xa60>
   1e724:	68d2      	ldr	r2, [r2, #12]
   1e726:	2111      	movs	r1, #17
   1e728:	4620      	mov	r0, r4
   1e72a:	f000 fb9d 	bl	1ee68 <d_print_comp>
   1e72e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1e732:	b113      	cbz	r3, 1e73a <d_print_comp_inner+0x19c6>
   1e734:	9b04      	ldr	r3, [sp, #16]
   1e736:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e73a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1e73e:	2b3c      	cmp	r3, #60	; 0x3c
   1e740:	f000 82be 	beq.w	1ecc0 <d_print_comp_inner+0x1f4c>
   1e744:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e748:	29ff      	cmp	r1, #255	; 0xff
   1e74a:	f000 82a9 	beq.w	1eca0 <d_print_comp_inner+0x1f2c>
   1e74e:	1c4a      	adds	r2, r1, #1
   1e750:	233c      	movs	r3, #60	; 0x3c
   1e752:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e756:	5463      	strb	r3, [r4, r1]
   1e758:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e75c:	68f3      	ldr	r3, [r6, #12]
   1e75e:	2111      	movs	r1, #17
   1e760:	691a      	ldr	r2, [r3, #16]
   1e762:	4620      	mov	r0, r4
   1e764:	f000 fb80 	bl	1ee68 <d_print_comp>
   1e768:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1e76c:	2b3e      	cmp	r3, #62	; 0x3e
   1e76e:	f000 8292 	beq.w	1ec96 <d_print_comp_inner+0x1f22>
   1e772:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e776:	29ff      	cmp	r1, #255	; 0xff
   1e778:	f000 827f 	beq.w	1ec7a <d_print_comp_inner+0x1f06>
   1e77c:	233e      	movs	r3, #62	; 0x3e
   1e77e:	1c4a      	adds	r2, r1, #1
   1e780:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e784:	5463      	strb	r3, [r4, r1]
   1e786:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e78a:	f7fe bb63 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e78e:	68fb      	ldr	r3, [r7, #12]
   1e790:	681e      	ldr	r6, [r3, #0]
   1e792:	7833      	ldrb	r3, [r6, #0]
   1e794:	2b61      	cmp	r3, #97	; 0x61
   1e796:	f040 8092 	bne.w	1e8be <d_print_comp_inner+0x1b4a>
   1e79a:	7872      	ldrb	r2, [r6, #1]
   1e79c:	2a64      	cmp	r2, #100	; 0x64
   1e79e:	f040 808e 	bne.w	1e8be <d_print_comp_inner+0x1b4a>
   1e7a2:	78b2      	ldrb	r2, [r6, #2]
   1e7a4:	2a00      	cmp	r2, #0
   1e7a6:	f040 808a 	bne.w	1e8be <d_print_comp_inner+0x1b4a>
   1e7aa:	782a      	ldrb	r2, [r5, #0]
   1e7ac:	2a03      	cmp	r2, #3
   1e7ae:	f000 828c 	beq.w	1ecca <d_print_comp_inner+0x1f56>
   1e7b2:	2a39      	cmp	r2, #57	; 0x39
   1e7b4:	f000 8294 	beq.w	1ece0 <d_print_comp_inner+0x1f6c>
   1e7b8:	2b73      	cmp	r3, #115	; 0x73
   1e7ba:	d111      	bne.n	1e7e0 <d_print_comp_inner+0x1a6c>
   1e7bc:	7872      	ldrb	r2, [r6, #1]
   1e7be:	2a5a      	cmp	r2, #90	; 0x5a
   1e7c0:	d135      	bne.n	1e82e <d_print_comp_inner+0x1aba>
   1e7c2:	78b2      	ldrb	r2, [r6, #2]
   1e7c4:	bb9a      	cbnz	r2, 1e82e <d_print_comp_inner+0x1aba>
   1e7c6:	4629      	mov	r1, r5
   1e7c8:	4620      	mov	r0, r4
   1e7ca:	f7fc f8d7 	bl	1a97c <d_find_pack>
   1e7ce:	f7fc f803 	bl	1a7d8 <d_pack_length>
   1e7d2:	4601      	mov	r1, r0
   1e7d4:	4620      	mov	r0, r4
   1e7d6:	b015      	add	sp, #84	; 0x54
   1e7d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7dc:	f7fc b97c 	b.w	1aad8 <d_append_num>
   1e7e0:	463a      	mov	r2, r7
   1e7e2:	2111      	movs	r1, #17
   1e7e4:	4620      	mov	r0, r4
   1e7e6:	f001 f97d 	bl	1fae4 <d_print_expr_op>
   1e7ea:	7833      	ldrb	r3, [r6, #0]
   1e7ec:	2b67      	cmp	r3, #103	; 0x67
   1e7ee:	d107      	bne.n	1e800 <d_print_comp_inner+0x1a8c>
   1e7f0:	7872      	ldrb	r2, [r6, #1]
   1e7f2:	2a73      	cmp	r2, #115	; 0x73
   1e7f4:	d104      	bne.n	1e800 <d_print_comp_inner+0x1a8c>
   1e7f6:	78b2      	ldrb	r2, [r6, #2]
   1e7f8:	b912      	cbnz	r2, 1e800 <d_print_comp_inner+0x1a8c>
   1e7fa:	462a      	mov	r2, r5
   1e7fc:	f7fe bb4e 	b.w	1ce9c <d_print_comp_inner+0x128>
   1e800:	2b73      	cmp	r3, #115	; 0x73
   1e802:	f47f a922 	bne.w	1da4a <d_print_comp_inner+0xcd6>
   1e806:	7873      	ldrb	r3, [r6, #1]
   1e808:	2b74      	cmp	r3, #116	; 0x74
   1e80a:	f47f a91e 	bne.w	1da4a <d_print_comp_inner+0xcd6>
   1e80e:	78b3      	ldrb	r3, [r6, #2]
   1e810:	2b00      	cmp	r3, #0
   1e812:	f47f a91a 	bne.w	1da4a <d_print_comp_inner+0xcd6>
   1e816:	2128      	movs	r1, #40	; 0x28
   1e818:	4620      	mov	r0, r4
   1e81a:	f7fc f871 	bl	1a900 <d_append_char>
   1e81e:	2111      	movs	r1, #17
   1e820:	462a      	mov	r2, r5
   1e822:	4620      	mov	r0, r4
   1e824:	f000 fb20 	bl	1ee68 <d_print_comp>
   1e828:	2129      	movs	r1, #41	; 0x29
   1e82a:	f7fe bc17 	b.w	1d05c <d_print_comp_inner+0x2e8>
   1e82e:	2b73      	cmp	r3, #115	; 0x73
   1e830:	d1d6      	bne.n	1e7e0 <d_print_comp_inner+0x1a6c>
   1e832:	7873      	ldrb	r3, [r6, #1]
   1e834:	2b50      	cmp	r3, #80	; 0x50
   1e836:	d1d3      	bne.n	1e7e0 <d_print_comp_inner+0x1a6c>
   1e838:	78b3      	ldrb	r3, [r6, #2]
   1e83a:	2b00      	cmp	r3, #0
   1e83c:	d1d0      	bne.n	1e7e0 <d_print_comp_inner+0x1a6c>
   1e83e:	461e      	mov	r6, r3
   1e840:	e004      	b.n	1e84c <d_print_comp_inner+0x1ad8>
   1e842:	3601      	adds	r6, #1
   1e844:	692d      	ldr	r5, [r5, #16]
   1e846:	2d00      	cmp	r5, #0
   1e848:	f000 819a 	beq.w	1eb80 <d_print_comp_inner+0x1e0c>
   1e84c:	782b      	ldrb	r3, [r5, #0]
   1e84e:	2b2f      	cmp	r3, #47	; 0x2f
   1e850:	f040 8196 	bne.w	1eb80 <d_print_comp_inner+0x1e0c>
   1e854:	68eb      	ldr	r3, [r5, #12]
   1e856:	2b00      	cmp	r3, #0
   1e858:	f000 8192 	beq.w	1eb80 <d_print_comp_inner+0x1e0c>
   1e85c:	781a      	ldrb	r2, [r3, #0]
   1e85e:	2a4c      	cmp	r2, #76	; 0x4c
   1e860:	d1ef      	bne.n	1e842 <d_print_comp_inner+0x1ace>
   1e862:	68d9      	ldr	r1, [r3, #12]
   1e864:	4620      	mov	r0, r4
   1e866:	f7fc f889 	bl	1a97c <d_find_pack>
   1e86a:	4603      	mov	r3, r0
   1e86c:	b148      	cbz	r0, 1e882 <d_print_comp_inner+0x1b0e>
   1e86e:	2300      	movs	r3, #0
   1e870:	e004      	b.n	1e87c <d_print_comp_inner+0x1b08>
   1e872:	68c2      	ldr	r2, [r0, #12]
   1e874:	b12a      	cbz	r2, 1e882 <d_print_comp_inner+0x1b0e>
   1e876:	6900      	ldr	r0, [r0, #16]
   1e878:	3301      	adds	r3, #1
   1e87a:	b110      	cbz	r0, 1e882 <d_print_comp_inner+0x1b0e>
   1e87c:	7802      	ldrb	r2, [r0, #0]
   1e87e:	2a2f      	cmp	r2, #47	; 0x2f
   1e880:	d0f7      	beq.n	1e872 <d_print_comp_inner+0x1afe>
   1e882:	441e      	add	r6, r3
   1e884:	e7de      	b.n	1e844 <d_print_comp_inner+0x1ad0>
   1e886:	29ff      	cmp	r1, #255	; 0xff
   1e888:	f000 81d1 	beq.w	1ec2e <d_print_comp_inner+0x1eba>
   1e88c:	1c4b      	adds	r3, r1, #1
   1e88e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e892:	2320      	movs	r3, #32
   1e894:	5463      	strb	r3, [r4, r1]
   1e896:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e89a:	e4c7      	b.n	1e22c <d_print_comp_inner+0x14b8>
   1e89c:	4632      	mov	r2, r6
   1e89e:	2111      	movs	r1, #17
   1e8a0:	4620      	mov	r0, r4
   1e8a2:	f000 fb0f 	bl	1eec4 <d_print_mod>
   1e8a6:	f7fe bb36 	b.w	1cf16 <d_print_comp_inner+0x1a2>
   1e8aa:	491e      	ldr	r1, [pc, #120]	; (1e924 <d_print_comp_inner+0x1bb0>)
   1e8ac:	f7fc f8b0 	bl	1aa10 <d_append_string>
   1e8b0:	f7ff b8e0 	b.w	1da74 <d_print_comp_inner+0xd00>
   1e8b4:	2301      	movs	r3, #1
   1e8b6:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
   1e8ba:	f7fe bacb 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1e8be:	782a      	ldrb	r2, [r5, #0]
   1e8c0:	e777      	b.n	1e7b2 <d_print_comp_inner+0x1a3e>
   1e8c2:	68f2      	ldr	r2, [r6, #12]
   1e8c4:	460d      	mov	r5, r1
   1e8c6:	f7fe bb40 	b.w	1cf4a <d_print_comp_inner+0x1d6>
   1e8ca:	2700      	movs	r7, #0
   1e8cc:	5567      	strb	r7, [r4, r5]
   1e8ce:	4629      	mov	r1, r5
   1e8d0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e8d4:	4620      	mov	r0, r4
   1e8d6:	4798      	blx	r3
   1e8d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e8dc:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1e8e0:	3301      	adds	r3, #1
   1e8e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e8e6:	463d      	mov	r5, r7
   1e8e8:	f7fe bb48 	b.w	1cf7c <d_print_comp_inner+0x208>
   1e8ec:	2600      	movs	r6, #0
   1e8ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e8f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e8f6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1e8fa:	4620      	mov	r0, r4
   1e8fc:	4798      	blx	r3
   1e8fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e902:	2201      	movs	r2, #1
   1e904:	4413      	add	r3, r2
   1e906:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e90a:	4631      	mov	r1, r6
   1e90c:	f7fe bd82 	b.w	1d414 <d_print_comp_inner+0x6a0>
   1e910:	4905      	ldr	r1, [pc, #20]	; (1e928 <d_print_comp_inner+0x1bb4>)
   1e912:	4620      	mov	r0, r4
   1e914:	f7fc f87c 	bl	1aa10 <d_append_string>
   1e918:	68ff      	ldr	r7, [r7, #12]
   1e91a:	463a      	mov	r2, r7
   1e91c:	f7fe babe 	b.w	1ce9c <d_print_comp_inner+0x128>
   1e920:	20004b0c 	.word	0x20004b0c
   1e924:	20004ce0 	.word	0x20004ce0
   1e928:	20004b6c 	.word	0x20004b6c
   1e92c:	2500      	movs	r5, #0
   1e92e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e932:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e936:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e93a:	4620      	mov	r0, r4
   1e93c:	4798      	blx	r3
   1e93e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e942:	2201      	movs	r2, #1
   1e944:	4413      	add	r3, r2
   1e946:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e94a:	4629      	mov	r1, r5
   1e94c:	f7fe be81 	b.w	1d652 <d_print_comp_inner+0x8de>
   1e950:	2600      	movs	r6, #0
   1e952:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1e956:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1e95a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1e95e:	4798      	blx	r3
   1e960:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1e964:	2301      	movs	r3, #1
   1e966:	441a      	add	r2, r3
   1e968:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1e96c:	4631      	mov	r1, r6
   1e96e:	f7fe bed2 	b.w	1d716 <d_print_comp_inner+0x9a2>
   1e972:	2500      	movs	r5, #0
   1e974:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1e978:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1e97c:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1e980:	4798      	blx	r3
   1e982:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e986:	2201      	movs	r2, #1
   1e988:	4413      	add	r3, r2
   1e98a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e98e:	4629      	mov	r1, r5
   1e990:	f7fe ba91 	b.w	1ceb6 <d_print_comp_inner+0x142>
   1e994:	2500      	movs	r5, #0
   1e996:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e99a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e99e:	4620      	mov	r0, r4
   1e9a0:	4798      	blx	r3
   1e9a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e9a6:	3301      	adds	r3, #1
   1e9a8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e9ac:	4629      	mov	r1, r5
   1e9ae:	2301      	movs	r3, #1
   1e9b0:	f7ff bab6 	b.w	1df20 <d_print_comp_inner+0x11ac>
   1e9b4:	2120      	movs	r1, #32
   1e9b6:	4620      	mov	r0, r4
   1e9b8:	f7fb ffa2 	bl	1a900 <d_append_char>
   1e9bc:	f7ff baaa 	b.w	1df14 <d_print_comp_inner+0x11a0>
   1e9c0:	2500      	movs	r5, #0
   1e9c2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e9c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e9ca:	4620      	mov	r0, r4
   1e9cc:	4798      	blx	r3
   1e9ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e9d2:	3301      	adds	r3, #1
   1e9d4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e9d8:	4629      	mov	r1, r5
   1e9da:	2301      	movs	r3, #1
   1e9dc:	f7ff ba8a 	b.w	1def4 <d_print_comp_inner+0x1180>
   1e9e0:	2120      	movs	r1, #32
   1e9e2:	4620      	mov	r0, r4
   1e9e4:	f7fb ff8c 	bl	1a900 <d_append_char>
   1e9e8:	f7ff ba7e 	b.w	1dee8 <d_print_comp_inner+0x1174>
   1e9ec:	2700      	movs	r7, #0
   1e9ee:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e9f2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1e9f6:	4620      	mov	r0, r4
   1e9f8:	4798      	blx	r3
   1e9fa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e9fe:	68f2      	ldr	r2, [r6, #12]
   1ea00:	3301      	adds	r3, #1
   1ea02:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea06:	4639      	mov	r1, r7
   1ea08:	2301      	movs	r3, #1
   1ea0a:	f7fe bb00 	b.w	1d00e <d_print_comp_inner+0x29a>
   1ea0e:	212d      	movs	r1, #45	; 0x2d
   1ea10:	4620      	mov	r0, r4
   1ea12:	f7fb ff75 	bl	1a900 <d_append_char>
   1ea16:	f7fe bb14 	b.w	1d042 <d_print_comp_inner+0x2ce>
   1ea1a:	2700      	movs	r7, #0
   1ea1c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ea20:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1ea24:	4620      	mov	r0, r4
   1ea26:	4798      	blx	r3
   1ea28:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea2c:	3301      	adds	r3, #1
   1ea2e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea32:	4639      	mov	r1, r7
   1ea34:	2301      	movs	r3, #1
   1ea36:	f7fe bafa 	b.w	1d02e <d_print_comp_inner+0x2ba>
   1ea3a:	6933      	ldr	r3, [r6, #16]
   1ea3c:	781b      	ldrb	r3, [r3, #0]
   1ea3e:	2b00      	cmp	r3, #0
   1ea40:	f47e aadf 	bne.w	1d002 <d_print_comp_inner+0x28e>
   1ea44:	2f3e      	cmp	r7, #62	; 0x3e
   1ea46:	f000 81f6 	beq.w	1ee36 <d_print_comp_inner+0x20c2>
   1ea4a:	6932      	ldr	r2, [r6, #16]
   1ea4c:	2111      	movs	r1, #17
   1ea4e:	4620      	mov	r0, r4
   1ea50:	3d02      	subs	r5, #2
   1ea52:	f000 fa09 	bl	1ee68 <d_print_comp>
   1ea56:	2d04      	cmp	r5, #4
   1ea58:	f63e a9fc 	bhi.w	1ce54 <d_print_comp_inner+0xe0>
   1ea5c:	e8df f005 	tbb	[pc, r5]
   1ea60:	06090c0f 	.word	0x06090c0f
   1ea64:	03          	.byte	0x03
   1ea65:	00          	.byte	0x00
   1ea66:	49c8      	ldr	r1, [pc, #800]	; (1ed88 <d_print_comp_inner+0x2014>)
   1ea68:	f7fe bde3 	b.w	1d632 <d_print_comp_inner+0x8be>
   1ea6c:	49c7      	ldr	r1, [pc, #796]	; (1ed8c <d_print_comp_inner+0x2018>)
   1ea6e:	f7fe bde0 	b.w	1d632 <d_print_comp_inner+0x8be>
   1ea72:	49c7      	ldr	r1, [pc, #796]	; (1ed90 <d_print_comp_inner+0x201c>)
   1ea74:	f7fe bddd 	b.w	1d632 <d_print_comp_inner+0x8be>
   1ea78:	216c      	movs	r1, #108	; 0x6c
   1ea7a:	f7fe baef 	b.w	1d05c <d_print_comp_inner+0x2e8>
   1ea7e:	2175      	movs	r1, #117	; 0x75
   1ea80:	f7fe baec 	b.w	1d05c <d_print_comp_inner+0x2e8>
   1ea84:	781b      	ldrb	r3, [r3, #0]
   1ea86:	2b73      	cmp	r3, #115	; 0x73
   1ea88:	d00a      	beq.n	1eaa0 <d_print_comp_inner+0x1d2c>
   1ea8a:	3b63      	subs	r3, #99	; 0x63
   1ea8c:	b2db      	uxtb	r3, r3
   1ea8e:	2b0f      	cmp	r3, #15
   1ea90:	f63e af77 	bhi.w	1d982 <d_print_comp_inner+0xc0e>
   1ea94:	49bf      	ldr	r1, [pc, #764]	; (1ed94 <d_print_comp_inner+0x2020>)
   1ea96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1ea9a:	2b00      	cmp	r3, #0
   1ea9c:	f43e af71 	beq.w	1d982 <d_print_comp_inner+0xc0e>
   1eaa0:	2111      	movs	r1, #17
   1eaa2:	4620      	mov	r0, r4
   1eaa4:	f001 f81e 	bl	1fae4 <d_print_expr_op>
   1eaa8:	213c      	movs	r1, #60	; 0x3c
   1eaaa:	4620      	mov	r0, r4
   1eaac:	f7fb ff28 	bl	1a900 <d_append_char>
   1eab0:	6933      	ldr	r3, [r6, #16]
   1eab2:	2111      	movs	r1, #17
   1eab4:	68da      	ldr	r2, [r3, #12]
   1eab6:	4620      	mov	r0, r4
   1eab8:	f000 f9d6 	bl	1ee68 <d_print_comp>
   1eabc:	49b6      	ldr	r1, [pc, #728]	; (1ed98 <d_print_comp_inner+0x2024>)
   1eabe:	4620      	mov	r0, r4
   1eac0:	f7fb ffa6 	bl	1aa10 <d_append_string>
   1eac4:	6933      	ldr	r3, [r6, #16]
   1eac6:	2111      	movs	r1, #17
   1eac8:	691a      	ldr	r2, [r3, #16]
   1eaca:	4620      	mov	r0, r4
   1eacc:	f000 f9cc 	bl	1ee68 <d_print_comp>
   1ead0:	2129      	movs	r1, #41	; 0x29
   1ead2:	f7fe bac3 	b.w	1d05c <d_print_comp_inner+0x2e8>
   1ead6:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
   1eada:	f1bc 0f00 	cmp.w	ip, #0
   1eade:	f340 8107 	ble.w	1ecf0 <d_print_comp_inner+0x1f7c>
   1eae2:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   1eae6:	462b      	mov	r3, r5
   1eae8:	4670      	mov	r0, lr
   1eaea:	e004      	b.n	1eaf6 <d_print_comp_inner+0x1d82>
   1eaec:	4563      	cmp	r3, ip
   1eaee:	f100 0008 	add.w	r0, r0, #8
   1eaf2:	f000 80fd 	beq.w	1ecf0 <d_print_comp_inner+0x1f7c>
   1eaf6:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
   1eafa:	428a      	cmp	r2, r1
   1eafc:	f103 0301 	add.w	r3, r3, #1
   1eb00:	d1f4      	bne.n	1eaec <d_print_comp_inner+0x1d78>
   1eb02:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
   1eb06:	4663      	mov	r3, ip
   1eb08:	f1bc 0f00 	cmp.w	ip, #0
   1eb0c:	d104      	bne.n	1eb18 <d_print_comp_inner+0x1da4>
   1eb0e:	e09d      	b.n	1ec4c <d_print_comp_inner+0x1ed8>
   1eb10:	685b      	ldr	r3, [r3, #4]
   1eb12:	2b00      	cmp	r3, #0
   1eb14:	f000 809a 	beq.w	1ec4c <d_print_comp_inner+0x1ed8>
   1eb18:	6819      	ldr	r1, [r3, #0]
   1eb1a:	4291      	cmp	r1, r2
   1eb1c:	d003      	beq.n	1eb26 <d_print_comp_inner+0x1db2>
   1eb1e:	42b1      	cmp	r1, r6
   1eb20:	d1f6      	bne.n	1eb10 <d_print_comp_inner+0x1d9c>
   1eb22:	459c      	cmp	ip, r3
   1eb24:	d0f4      	beq.n	1eb10 <d_print_comp_inner+0x1d9c>
   1eb26:	4611      	mov	r1, r2
   1eb28:	4620      	mov	r0, r4
   1eb2a:	9201      	str	r2, [sp, #4]
   1eb2c:	f7fb ff0a 	bl	1a944 <d_lookup_template_argument>
   1eb30:	9a01      	ldr	r2, [sp, #4]
   1eb32:	2800      	cmp	r0, #0
   1eb34:	f43e a98b 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1eb38:	7803      	ldrb	r3, [r0, #0]
   1eb3a:	2b2f      	cmp	r3, #47	; 0x2f
   1eb3c:	f47e a9fa 	bne.w	1cf34 <d_print_comp_inner+0x1c0>
   1eb40:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1eb44:	2900      	cmp	r1, #0
   1eb46:	f6fe a9fe 	blt.w	1cf46 <d_print_comp_inner+0x1d2>
   1eb4a:	f7fb fe77 	bl	1a83c <d_index_template_argument.part.0>
   1eb4e:	2800      	cmp	r0, #0
   1eb50:	f000 816a 	beq.w	1ee28 <d_print_comp_inner+0x20b4>
   1eb54:	7803      	ldrb	r3, [r0, #0]
   1eb56:	f7fe b9ed 	b.w	1cf34 <d_print_comp_inner+0x1c0>
   1eb5a:	68c2      	ldr	r2, [r0, #12]
   1eb5c:	f7fe b97e 	b.w	1ce5c <d_print_comp_inner+0xe8>
   1eb60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eb64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1eb68:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1eb6c:	4620      	mov	r0, r4
   1eb6e:	4798      	blx	r3
   1eb70:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1eb74:	3301      	adds	r3, #1
   1eb76:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1eb7a:	4631      	mov	r1, r6
   1eb7c:	2301      	movs	r3, #1
   1eb7e:	e491      	b.n	1e4a4 <d_print_comp_inner+0x1730>
   1eb80:	4986      	ldr	r1, [pc, #536]	; (1ed9c <d_print_comp_inner+0x2028>)
   1eb82:	4632      	mov	r2, r6
   1eb84:	a804      	add	r0, sp, #16
   1eb86:	f003 fcaf 	bl	224e8 <sprintf>
   1eb8a:	a804      	add	r0, sp, #16
   1eb8c:	f008 f878 	bl	26c80 <strlen>
   1eb90:	2800      	cmp	r0, #0
   1eb92:	f43e a95f 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1eb96:	ad04      	add	r5, sp, #16
   1eb98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1eb9c:	182f      	adds	r7, r5, r0
   1eb9e:	f04f 0800 	mov.w	r8, #0
   1eba2:	e009      	b.n	1ebb8 <d_print_comp_inner+0x1e44>
   1eba4:	460b      	mov	r3, r1
   1eba6:	3101      	adds	r1, #1
   1eba8:	42af      	cmp	r7, r5
   1ebaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ebae:	54e6      	strb	r6, [r4, r3]
   1ebb0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ebb4:	f43e a94e 	beq.w	1ce54 <d_print_comp_inner+0xe0>
   1ebb8:	29ff      	cmp	r1, #255	; 0xff
   1ebba:	f815 6b01 	ldrb.w	r6, [r5], #1
   1ebbe:	d1f1      	bne.n	1eba4 <d_print_comp_inner+0x1e30>
   1ebc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ebc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ebc8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ebcc:	4620      	mov	r0, r4
   1ebce:	4798      	blx	r3
   1ebd0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebd4:	3301      	adds	r3, #1
   1ebd6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebda:	2101      	movs	r1, #1
   1ebdc:	2300      	movs	r3, #0
   1ebde:	e7e3      	b.n	1eba8 <d_print_comp_inner+0x1e34>
   1ebe0:	2500      	movs	r5, #0
   1ebe2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ebe6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ebea:	4620      	mov	r0, r4
   1ebec:	4798      	blx	r3
   1ebee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebf2:	3301      	adds	r3, #1
   1ebf4:	4629      	mov	r1, r5
   1ebf6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebfa:	e4fe      	b.n	1e5fa <d_print_comp_inner+0x1886>
   1ebfc:	2111      	movs	r1, #17
   1ebfe:	4620      	mov	r0, r4
   1ec00:	4652      	mov	r2, sl
   1ec02:	f001 f96b 	bl	1fedc <d_print_subexpr>
   1ec06:	4966      	ldr	r1, [pc, #408]	; (1eda0 <d_print_comp_inner+0x202c>)
   1ec08:	f7fe bd13 	b.w	1d632 <d_print_comp_inner+0x8be>
   1ec0c:	2500      	movs	r5, #0
   1ec0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ec12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ec16:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ec1a:	4620      	mov	r0, r4
   1ec1c:	4798      	blx	r3
   1ec1e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec22:	3301      	adds	r3, #1
   1ec24:	4629      	mov	r1, r5
   1ec26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec2a:	f7fe bf31 	b.w	1da90 <d_print_comp_inner+0xd1c>
   1ec2e:	2600      	movs	r6, #0
   1ec30:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ec34:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1ec38:	4620      	mov	r0, r4
   1ec3a:	4798      	blx	r3
   1ec3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec40:	687d      	ldr	r5, [r7, #4]
   1ec42:	3301      	adds	r3, #1
   1ec44:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec48:	4631      	mov	r1, r6
   1ec4a:	e61f      	b.n	1e88c <d_print_comp_inner+0x1b18>
   1ec4c:	6843      	ldr	r3, [r0, #4]
   1ec4e:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
   1ec52:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ec56:	4611      	mov	r1, r2
   1ec58:	4620      	mov	r0, r4
   1ec5a:	9201      	str	r2, [sp, #4]
   1ec5c:	f7fb fe72 	bl	1a944 <d_lookup_template_argument>
   1ec60:	9a01      	ldr	r2, [sp, #4]
   1ec62:	2800      	cmp	r0, #0
   1ec64:	f000 80e3 	beq.w	1ee2e <d_print_comp_inner+0x20ba>
   1ec68:	2501      	movs	r5, #1
   1ec6a:	e765      	b.n	1eb38 <d_print_comp_inner+0x1dc4>
   1ec6c:	68ff      	ldr	r7, [r7, #12]
   1ec6e:	2f00      	cmp	r7, #0
   1ec70:	f43e a8ed 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1ec74:	783a      	ldrb	r2, [r7, #0]
   1ec76:	f7fe bda9 	b.w	1d7cc <d_print_comp_inner+0xa58>
   1ec7a:	2500      	movs	r5, #0
   1ec7c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ec80:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ec84:	4620      	mov	r0, r4
   1ec86:	4798      	blx	r3
   1ec88:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec8c:	3301      	adds	r3, #1
   1ec8e:	4629      	mov	r1, r5
   1ec90:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec94:	e572      	b.n	1e77c <d_print_comp_inner+0x1a08>
   1ec96:	2120      	movs	r1, #32
   1ec98:	4620      	mov	r0, r4
   1ec9a:	f7fb fe31 	bl	1a900 <d_append_char>
   1ec9e:	e568      	b.n	1e772 <d_print_comp_inner+0x19fe>
   1eca0:	2500      	movs	r5, #0
   1eca2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eca6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ecaa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ecae:	4620      	mov	r0, r4
   1ecb0:	4798      	blx	r3
   1ecb2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ecb6:	3301      	adds	r3, #1
   1ecb8:	4629      	mov	r1, r5
   1ecba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ecbe:	e546      	b.n	1e74e <d_print_comp_inner+0x19da>
   1ecc0:	2120      	movs	r1, #32
   1ecc2:	4620      	mov	r0, r4
   1ecc4:	f7fb fe1c 	bl	1a900 <d_append_char>
   1ecc8:	e53c      	b.n	1e744 <d_print_comp_inner+0x19d0>
   1ecca:	68ea      	ldr	r2, [r5, #12]
   1eccc:	7811      	ldrb	r1, [r2, #0]
   1ecce:	2901      	cmp	r1, #1
   1ecd0:	f47f ad72 	bne.w	1e7b8 <d_print_comp_inner+0x1a44>
   1ecd4:	6929      	ldr	r1, [r5, #16]
   1ecd6:	7809      	ldrb	r1, [r1, #0]
   1ecd8:	2929      	cmp	r1, #41	; 0x29
   1ecda:	bf08      	it	eq
   1ecdc:	4615      	moveq	r5, r2
   1ecde:	e56b      	b.n	1e7b8 <d_print_comp_inner+0x1a44>
   1ece0:	68ea      	ldr	r2, [r5, #12]
   1ece2:	2111      	movs	r1, #17
   1ece4:	4620      	mov	r0, r4
   1ece6:	f001 f8f9 	bl	1fedc <d_print_subexpr>
   1ecea:	463a      	mov	r2, r7
   1ecec:	f7fe beb6 	b.w	1da5c <d_print_comp_inner+0xce8>
   1ecf0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1ecf4:	4563      	cmp	r3, ip
   1ecf6:	f77e a8aa 	ble.w	1ce4e <d_print_comp_inner+0xda>
   1ecfa:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   1ecfe:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
   1ed02:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
   1ed06:	f10c 0001 	add.w	r0, ip, #1
   1ed0a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   1ed0e:	3304      	adds	r3, #4
   1ed10:	f841 203c 	str.w	r2, [r1, ip, lsl #3]
   1ed14:	f1be 0f00 	cmp.w	lr, #0
   1ed18:	f000 8092 	beq.w	1ee40 <d_print_comp_inner+0x20cc>
   1ed1c:	e9d4 0950 	ldrd	r0, r9, [r4, #320]	; 0x140
   1ed20:	4694      	mov	ip, r2
   1ed22:	e010      	b.n	1ed46 <d_print_comp_inner+0x1fd2>
   1ed24:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1ed28:	f8de 2004 	ldr.w	r2, [lr, #4]
   1ed2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1ed30:	3001      	adds	r0, #1
   1ed32:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
   1ed36:	604a      	str	r2, [r1, #4]
   1ed38:	6019      	str	r1, [r3, #0]
   1ed3a:	f8de e000 	ldr.w	lr, [lr]
   1ed3e:	460b      	mov	r3, r1
   1ed40:	f1be 0f00 	cmp.w	lr, #0
   1ed44:	d07b      	beq.n	1ee3e <d_print_comp_inner+0x20ca>
   1ed46:	4581      	cmp	r9, r0
   1ed48:	dcec      	bgt.n	1ed24 <d_print_comp_inner+0x1fb0>
   1ed4a:	f7fe b880 	b.w	1ce4e <d_print_comp_inner+0xda>
   1ed4e:	6912      	ldr	r2, [r2, #16]
   1ed50:	2111      	movs	r1, #17
   1ed52:	f000 f889 	bl	1ee68 <d_print_comp>
   1ed56:	9b06      	ldr	r3, [sp, #24]
   1ed58:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1ed5c:	2b00      	cmp	r3, #0
   1ed5e:	f43e af09 	beq.w	1db74 <d_print_comp_inner+0xe00>
   1ed62:	f7fe b877 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1ed66:	68da      	ldr	r2, [r3, #12]
   1ed68:	6891      	ldr	r1, [r2, #8]
   1ed6a:	2901      	cmp	r1, #1
   1ed6c:	f47e ae1e 	bne.w	1d9ac <d_print_comp_inner+0xc38>
   1ed70:	6852      	ldr	r2, [r2, #4]
   1ed72:	7812      	ldrb	r2, [r2, #0]
   1ed74:	2a3e      	cmp	r2, #62	; 0x3e
   1ed76:	f47e ae19 	bne.w	1d9ac <d_print_comp_inner+0xc38>
   1ed7a:	2128      	movs	r1, #40	; 0x28
   1ed7c:	4620      	mov	r0, r4
   1ed7e:	f7fb fdbf 	bl	1a900 <d_append_char>
   1ed82:	68f3      	ldr	r3, [r6, #12]
   1ed84:	f7fe be12 	b.w	1d9ac <d_print_comp_inner+0xc38>
   1ed88:	20004d38 	.word	0x20004d38
   1ed8c:	20004d34 	.word	0x20004d34
   1ed90:	20004d30 	.word	0x20004d30
   1ed94:	20000370 	.word	0x20000370
   1ed98:	20004d14 	.word	0x20004d14
   1ed9c:	20004b0c 	.word	0x20004b0c
   1eda0:	20004d68 	.word	0x20004d68
   1eda4:	4620      	mov	r0, r4
   1eda6:	215b      	movs	r1, #91	; 0x5b
   1eda8:	f7fb fdaa 	bl	1a900 <d_append_char>
   1edac:	6933      	ldr	r3, [r6, #16]
   1edae:	4620      	mov	r0, r4
   1edb0:	691a      	ldr	r2, [r3, #16]
   1edb2:	2111      	movs	r1, #17
   1edb4:	f000 f858 	bl	1ee68 <d_print_comp>
   1edb8:	215d      	movs	r1, #93	; 0x5d
   1edba:	4620      	mov	r0, r4
   1edbc:	f7fb fda0 	bl	1a900 <d_append_char>
   1edc0:	f7fe be1c 	b.w	1d9fc <d_print_comp_inner+0xc88>
   1edc4:	6913      	ldr	r3, [r2, #16]
   1edc6:	68d2      	ldr	r2, [r2, #12]
   1edc8:	781b      	ldrb	r3, [r3, #0]
   1edca:	2b29      	cmp	r3, #41	; 0x29
   1edcc:	bf1c      	itt	ne
   1edce:	2301      	movne	r3, #1
   1edd0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1edd4:	2111      	movs	r1, #17
   1edd6:	4620      	mov	r0, r4
   1edd8:	f001 f880 	bl	1fedc <d_print_subexpr>
   1eddc:	f7fe bdf7 	b.w	1d9ce <d_print_comp_inner+0xc5a>
   1ede0:	462a      	mov	r2, r5
   1ede2:	2111      	movs	r1, #17
   1ede4:	4620      	mov	r0, r4
   1ede6:	f000 fe7d 	bl	1fae4 <d_print_expr_op>
   1edea:	f7fe be01 	b.w	1d9f0 <d_print_comp_inner+0xc7c>
   1edee:	491c      	ldr	r1, [pc, #112]	; (1ee60 <d_print_comp_inner+0x20ec>)
   1edf0:	4620      	mov	r0, r4
   1edf2:	f7fb fe0d 	bl	1aa10 <d_append_string>
   1edf6:	68f3      	ldr	r3, [r6, #12]
   1edf8:	b143      	cbz	r3, 1ee0c <d_print_comp_inner+0x2098>
   1edfa:	2111      	movs	r1, #17
   1edfc:	4620      	mov	r0, r4
   1edfe:	4632      	mov	r2, r6
   1ee00:	f001 f86c 	bl	1fedc <d_print_subexpr>
   1ee04:	2120      	movs	r1, #32
   1ee06:	4620      	mov	r0, r4
   1ee08:	f7fb fd7a 	bl	1a900 <d_append_char>
   1ee0c:	463a      	mov	r2, r7
   1ee0e:	2111      	movs	r1, #17
   1ee10:	4620      	mov	r0, r4
   1ee12:	f000 f829 	bl	1ee68 <d_print_comp>
   1ee16:	2d00      	cmp	r5, #0
   1ee18:	f47e ae17 	bne.w	1da4a <d_print_comp_inner+0xcd6>
   1ee1c:	f7fe b81a 	b.w	1ce54 <d_print_comp_inner+0xe0>
   1ee20:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1ee24:	f7fe b813 	b.w	1ce4e <d_print_comp_inner+0xda>
   1ee28:	2d00      	cmp	r5, #0
   1ee2a:	f43e a810 	beq.w	1ce4e <d_print_comp_inner+0xda>
   1ee2e:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
   1ee32:	f7fe b80c 	b.w	1ce4e <d_print_comp_inner+0xda>
   1ee36:	212d      	movs	r1, #45	; 0x2d
   1ee38:	f7fb fd62 	bl	1a900 <d_append_char>
   1ee3c:	e605      	b.n	1ea4a <d_print_comp_inner+0x1cd6>
   1ee3e:	4662      	mov	r2, ip
   1ee40:	2100      	movs	r1, #0
   1ee42:	6019      	str	r1, [r3, #0]
   1ee44:	e66f      	b.n	1eb26 <d_print_comp_inner+0x1db2>
   1ee46:	68f2      	ldr	r2, [r6, #12]
   1ee48:	f7fe b817 	b.w	1ce7a <d_print_comp_inner+0x106>
   1ee4c:	463a      	mov	r2, r7
   1ee4e:	2111      	movs	r1, #17
   1ee50:	f000 fe48 	bl	1fae4 <d_print_expr_op>
   1ee54:	f7fe bdf9 	b.w	1da4a <d_print_comp_inner+0xcd6>
   1ee58:	4902      	ldr	r1, [pc, #8]	; (1ee64 <d_print_comp_inner+0x20f0>)
   1ee5a:	f7fe bbea 	b.w	1d632 <d_print_comp_inner+0x8be>
   1ee5e:	bf00      	nop
   1ee60:	20004d28 	.word	0x20004d28
   1ee64:	20004d3c 	.word	0x20004d3c

0001ee68 <d_print_comp>:
   1ee68:	b530      	push	{r4, r5, lr}
   1ee6a:	4605      	mov	r5, r0
   1ee6c:	b083      	sub	sp, #12
   1ee6e:	b31a      	cbz	r2, 1eeb8 <d_print_comp+0x50>
   1ee70:	6853      	ldr	r3, [r2, #4]
   1ee72:	2b01      	cmp	r3, #1
   1ee74:	4614      	mov	r4, r2
   1ee76:	dc1f      	bgt.n	1eeb8 <d_print_comp+0x50>
   1ee78:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   1ee7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1ee80:	dc1a      	bgt.n	1eeb8 <d_print_comp+0x50>
   1ee82:	3301      	adds	r3, #1
   1ee84:	6053      	str	r3, [r2, #4]
   1ee86:	3101      	adds	r1, #1
   1ee88:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   1ee8c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   1ee90:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
   1ee94:	2111      	movs	r1, #17
   1ee96:	e9cd 2300 	strd	r2, r3, [sp]
   1ee9a:	f7fd ff6b 	bl	1cd74 <d_print_comp_inner>
   1ee9e:	6862      	ldr	r2, [r4, #4]
   1eea0:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   1eea4:	9901      	ldr	r1, [sp, #4]
   1eea6:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
   1eeaa:	3a01      	subs	r2, #1
   1eeac:	3b01      	subs	r3, #1
   1eeae:	6062      	str	r2, [r4, #4]
   1eeb0:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1eeb4:	b003      	add	sp, #12
   1eeb6:	bd30      	pop	{r4, r5, pc}
   1eeb8:	2301      	movs	r3, #1
   1eeba:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
   1eebe:	b003      	add	sp, #12
   1eec0:	bd30      	pop	{r4, r5, pc}
   1eec2:	bf00      	nop

0001eec4 <d_print_mod>:
   1eec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eec8:	7813      	ldrb	r3, [r2, #0]
   1eeca:	3b03      	subs	r3, #3
   1eecc:	4615      	mov	r5, r2
   1eece:	4604      	mov	r4, r0
   1eed0:	2b4e      	cmp	r3, #78	; 0x4e
   1eed2:	d850      	bhi.n	1ef76 <d_print_mod+0xb2>
   1eed4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1eed8:	004f011c 	.word	0x004f011c
   1eedc:	004f004f 	.word	0x004f004f
   1eee0:	004f004f 	.word	0x004f004f
   1eee4:	004f004f 	.word	0x004f004f
   1eee8:	004f004f 	.word	0x004f004f
   1eeec:	004f004f 	.word	0x004f004f
   1eef0:	004f004f 	.word	0x004f004f
   1eef4:	004f004f 	.word	0x004f004f
   1eef8:	004f004f 	.word	0x004f004f
   1eefc:	004f004f 	.word	0x004f004f
   1ef00:	004f004f 	.word	0x004f004f
   1ef04:	007c0055 	.word	0x007c0055
   1ef08:	005500a3 	.word	0x005500a3
   1ef0c:	00a3007c 	.word	0x00a3007c
   1ef10:	00fc00ef 	.word	0x00fc00ef
   1ef14:	02870109 	.word	0x02870109
   1ef18:	01300122 	.word	0x01300122
   1ef1c:	017b0155 	.word	0x017b0155
   1ef20:	004f004f 	.word	0x004f004f
   1ef24:	004f004f 	.word	0x004f004f
   1ef28:	004f01a1 	.word	0x004f01a1
   1ef2c:	004f01d1 	.word	0x004f01d1
   1ef30:	004f004f 	.word	0x004f004f
   1ef34:	004f004f 	.word	0x004f004f
   1ef38:	004f004f 	.word	0x004f004f
   1ef3c:	004f004f 	.word	0x004f004f
   1ef40:	004f004f 	.word	0x004f004f
   1ef44:	004f004f 	.word	0x004f004f
   1ef48:	004f004f 	.word	0x004f004f
   1ef4c:	004f004f 	.word	0x004f004f
   1ef50:	004f004f 	.word	0x004f004f
   1ef54:	004f004f 	.word	0x004f004f
   1ef58:	004f004f 	.word	0x004f004f
   1ef5c:	004f004f 	.word	0x004f004f
   1ef60:	004f004f 	.word	0x004f004f
   1ef64:	004f004f 	.word	0x004f004f
   1ef68:	004f004f 	.word	0x004f004f
   1ef6c:	01f8004f 	.word	0x01f8004f
   1ef70:	0234004f 	.word	0x0234004f
   1ef74:	00c8      	.short	0x00c8
   1ef76:	462a      	mov	r2, r5
   1ef78:	2111      	movs	r1, #17
   1ef7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef7e:	f7ff bf73 	b.w	1ee68 <d_print_comp>
   1ef82:	4ed6      	ldr	r6, [pc, #856]	; (1f2dc <d_print_mod+0x418>)
   1ef84:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ef88:	f106 0708 	add.w	r7, r6, #8
   1ef8c:	2520      	movs	r5, #32
   1ef8e:	f04f 0800 	mov.w	r8, #0
   1ef92:	e00b      	b.n	1efac <d_print_mod+0xe8>
   1ef94:	460b      	mov	r3, r1
   1ef96:	3101      	adds	r1, #1
   1ef98:	42be      	cmp	r6, r7
   1ef9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ef9e:	54e5      	strb	r5, [r4, r3]
   1efa0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1efa4:	f000 80c6 	beq.w	1f134 <d_print_mod+0x270>
   1efa8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1efac:	29ff      	cmp	r1, #255	; 0xff
   1efae:	d1f1      	bne.n	1ef94 <d_print_mod+0xd0>
   1efb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1efb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1efb8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1efbc:	4620      	mov	r0, r4
   1efbe:	4798      	blx	r3
   1efc0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1efc4:	3301      	adds	r3, #1
   1efc6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1efca:	2101      	movs	r1, #1
   1efcc:	2300      	movs	r3, #0
   1efce:	e7e3      	b.n	1ef98 <d_print_mod+0xd4>
   1efd0:	4ec3      	ldr	r6, [pc, #780]	; (1f2e0 <d_print_mod+0x41c>)
   1efd2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1efd6:	f106 0708 	add.w	r7, r6, #8
   1efda:	2520      	movs	r5, #32
   1efdc:	f04f 0800 	mov.w	r8, #0
   1efe0:	e00b      	b.n	1effa <d_print_mod+0x136>
   1efe2:	460b      	mov	r3, r1
   1efe4:	3101      	adds	r1, #1
   1efe6:	42b7      	cmp	r7, r6
   1efe8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1efec:	54e5      	strb	r5, [r4, r3]
   1efee:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1eff2:	f000 809f 	beq.w	1f134 <d_print_mod+0x270>
   1eff6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1effa:	29ff      	cmp	r1, #255	; 0xff
   1effc:	d1f1      	bne.n	1efe2 <d_print_mod+0x11e>
   1effe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f002:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f006:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f00a:	4620      	mov	r0, r4
   1f00c:	4798      	blx	r3
   1f00e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f012:	3301      	adds	r3, #1
   1f014:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f018:	2101      	movs	r1, #1
   1f01a:	2300      	movs	r3, #0
   1f01c:	e7e3      	b.n	1efe6 <d_print_mod+0x122>
   1f01e:	4eb1      	ldr	r6, [pc, #708]	; (1f2e4 <d_print_mod+0x420>)
   1f020:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f024:	1d77      	adds	r7, r6, #5
   1f026:	2520      	movs	r5, #32
   1f028:	f04f 0800 	mov.w	r8, #0
   1f02c:	e00a      	b.n	1f044 <d_print_mod+0x180>
   1f02e:	460b      	mov	r3, r1
   1f030:	3101      	adds	r1, #1
   1f032:	42b7      	cmp	r7, r6
   1f034:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f038:	54e5      	strb	r5, [r4, r3]
   1f03a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f03e:	d079      	beq.n	1f134 <d_print_mod+0x270>
   1f040:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f044:	29ff      	cmp	r1, #255	; 0xff
   1f046:	d1f2      	bne.n	1f02e <d_print_mod+0x16a>
   1f048:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f04c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f050:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f054:	4620      	mov	r0, r4
   1f056:	4798      	blx	r3
   1f058:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f05c:	3301      	adds	r3, #1
   1f05e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f062:	2101      	movs	r1, #1
   1f064:	2300      	movs	r3, #0
   1f066:	e7e4      	b.n	1f032 <d_print_mod+0x16e>
   1f068:	4f9f      	ldr	r7, [pc, #636]	; (1f2e8 <d_print_mod+0x424>)
   1f06a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f06e:	f107 0905 	add.w	r9, r7, #5
   1f072:	2620      	movs	r6, #32
   1f074:	f04f 0800 	mov.w	r8, #0
   1f078:	e00b      	b.n	1f092 <d_print_mod+0x1ce>
   1f07a:	460b      	mov	r3, r1
   1f07c:	3101      	adds	r1, #1
   1f07e:	45b9      	cmp	r9, r7
   1f080:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f084:	54e6      	strb	r6, [r4, r3]
   1f086:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f08a:	f000 817f 	beq.w	1f38c <d_print_mod+0x4c8>
   1f08e:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f092:	29ff      	cmp	r1, #255	; 0xff
   1f094:	d1f1      	bne.n	1f07a <d_print_mod+0x1b6>
   1f096:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f09a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f09e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f0a2:	4620      	mov	r0, r4
   1f0a4:	4798      	blx	r3
   1f0a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f0aa:	3301      	adds	r3, #1
   1f0ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f0b0:	2101      	movs	r1, #1
   1f0b2:	2300      	movs	r3, #0
   1f0b4:	e7e3      	b.n	1f07e <d_print_mod+0x1ba>
   1f0b6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1f0ba:	2bff      	cmp	r3, #255	; 0xff
   1f0bc:	f000 81d0 	beq.w	1f460 <d_print_mod+0x59c>
   1f0c0:	2220      	movs	r2, #32
   1f0c2:	1c59      	adds	r1, r3, #1
   1f0c4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   1f0c8:	54c2      	strb	r2, [r0, r3]
   1f0ca:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
   1f0ce:	e027      	b.n	1f120 <d_print_mod+0x25c>
   1f0d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1f0d4:	2bff      	cmp	r3, #255	; 0xff
   1f0d6:	f000 81b4 	beq.w	1f442 <d_print_mod+0x57e>
   1f0da:	1c59      	adds	r1, r3, #1
   1f0dc:	2220      	movs	r2, #32
   1f0de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f0e2:	54e2      	strb	r2, [r4, r3]
   1f0e4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f0e8:	e028      	b.n	1f13c <d_print_mod+0x278>
   1f0ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f0ee:	29ff      	cmp	r1, #255	; 0xff
   1f0f0:	f000 8197 	beq.w	1f422 <d_print_mod+0x55e>
   1f0f4:	1c4a      	adds	r2, r1, #1
   1f0f6:	2320      	movs	r3, #32
   1f0f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f0fc:	5463      	strb	r3, [r4, r1]
   1f0fe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f102:	692a      	ldr	r2, [r5, #16]
   1f104:	4620      	mov	r0, r4
   1f106:	2111      	movs	r1, #17
   1f108:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f10c:	f7ff beac 	b.w	1ee68 <d_print_comp>
   1f110:	68ea      	ldr	r2, [r5, #12]
   1f112:	2111      	movs	r1, #17
   1f114:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f118:	f7ff bea6 	b.w	1ee68 <d_print_comp>
   1f11c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f120:	29ff      	cmp	r1, #255	; 0xff
   1f122:	f000 81bc 	beq.w	1f49e <d_print_mod+0x5da>
   1f126:	1c4a      	adds	r2, r1, #1
   1f128:	2326      	movs	r3, #38	; 0x26
   1f12a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f12e:	5463      	strb	r3, [r4, r1]
   1f130:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f138:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f13c:	4d6b      	ldr	r5, [pc, #428]	; (1f2ec <d_print_mod+0x428>)
   1f13e:	2626      	movs	r6, #38	; 0x26
   1f140:	1c6f      	adds	r7, r5, #1
   1f142:	f04f 0800 	mov.w	r8, #0
   1f146:	e00a      	b.n	1f15e <d_print_mod+0x29a>
   1f148:	460b      	mov	r3, r1
   1f14a:	3101      	adds	r1, #1
   1f14c:	42bd      	cmp	r5, r7
   1f14e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f152:	54e6      	strb	r6, [r4, r3]
   1f154:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f158:	d0ec      	beq.n	1f134 <d_print_mod+0x270>
   1f15a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1f15e:	29ff      	cmp	r1, #255	; 0xff
   1f160:	d1f2      	bne.n	1f148 <d_print_mod+0x284>
   1f162:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f166:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f16a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f16e:	4620      	mov	r0, r4
   1f170:	4798      	blx	r3
   1f172:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f176:	3301      	adds	r3, #1
   1f178:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f17c:	2101      	movs	r1, #1
   1f17e:	2300      	movs	r3, #0
   1f180:	e7e4      	b.n	1f14c <d_print_mod+0x288>
   1f182:	4e5b      	ldr	r6, [pc, #364]	; (1f2f0 <d_print_mod+0x42c>)
   1f184:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f188:	f106 0708 	add.w	r7, r6, #8
   1f18c:	2520      	movs	r5, #32
   1f18e:	f04f 0800 	mov.w	r8, #0
   1f192:	e00a      	b.n	1f1aa <d_print_mod+0x2e6>
   1f194:	460b      	mov	r3, r1
   1f196:	3101      	adds	r1, #1
   1f198:	42b7      	cmp	r7, r6
   1f19a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f19e:	54e5      	strb	r5, [r4, r3]
   1f1a0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f1a4:	d0c6      	beq.n	1f134 <d_print_mod+0x270>
   1f1a6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f1aa:	29ff      	cmp	r1, #255	; 0xff
   1f1ac:	d1f2      	bne.n	1f194 <d_print_mod+0x2d0>
   1f1ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f1b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f1b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f1ba:	4620      	mov	r0, r4
   1f1bc:	4798      	blx	r3
   1f1be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f1c2:	3301      	adds	r3, #1
   1f1c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f1c8:	2101      	movs	r1, #1
   1f1ca:	2300      	movs	r3, #0
   1f1cc:	e7e4      	b.n	1f198 <d_print_mod+0x2d4>
   1f1ce:	4e49      	ldr	r6, [pc, #292]	; (1f2f4 <d_print_mod+0x430>)
   1f1d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f1d4:	f106 070a 	add.w	r7, r6, #10
   1f1d8:	2520      	movs	r5, #32
   1f1da:	f04f 0800 	mov.w	r8, #0
   1f1de:	e00a      	b.n	1f1f6 <d_print_mod+0x332>
   1f1e0:	460b      	mov	r3, r1
   1f1e2:	3101      	adds	r1, #1
   1f1e4:	42b7      	cmp	r7, r6
   1f1e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f1ea:	54e5      	strb	r5, [r4, r3]
   1f1ec:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f1f0:	d0a0      	beq.n	1f134 <d_print_mod+0x270>
   1f1f2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f1f6:	29ff      	cmp	r1, #255	; 0xff
   1f1f8:	d1f2      	bne.n	1f1e0 <d_print_mod+0x31c>
   1f1fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f1fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f202:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f206:	4620      	mov	r0, r4
   1f208:	4798      	blx	r3
   1f20a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f20e:	3301      	adds	r3, #1
   1f210:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f214:	2101      	movs	r1, #1
   1f216:	2300      	movs	r3, #0
   1f218:	e7e4      	b.n	1f1e4 <d_print_mod+0x320>
   1f21a:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   1f21e:	2b28      	cmp	r3, #40	; 0x28
   1f220:	f040 80d5 	bne.w	1f3ce <d_print_mod+0x50a>
   1f224:	4e34      	ldr	r6, [pc, #208]	; (1f2f8 <d_print_mod+0x434>)
   1f226:	68ea      	ldr	r2, [r5, #12]
   1f228:	2111      	movs	r1, #17
   1f22a:	4620      	mov	r0, r4
   1f22c:	f7ff fe1c 	bl	1ee68 <d_print_comp>
   1f230:	1cb7      	adds	r7, r6, #2
   1f232:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f236:	253a      	movs	r5, #58	; 0x3a
   1f238:	f04f 0800 	mov.w	r8, #0
   1f23c:	e00b      	b.n	1f256 <d_print_mod+0x392>
   1f23e:	460b      	mov	r3, r1
   1f240:	3101      	adds	r1, #1
   1f242:	42b7      	cmp	r7, r6
   1f244:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f248:	54e5      	strb	r5, [r4, r3]
   1f24a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f24e:	f43f af71 	beq.w	1f134 <d_print_mod+0x270>
   1f252:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f256:	29ff      	cmp	r1, #255	; 0xff
   1f258:	d1f1      	bne.n	1f23e <d_print_mod+0x37a>
   1f25a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f25e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f262:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f266:	4620      	mov	r0, r4
   1f268:	4798      	blx	r3
   1f26a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f26e:	3301      	adds	r3, #1
   1f270:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f274:	2101      	movs	r1, #1
   1f276:	2300      	movs	r3, #0
   1f278:	e7e3      	b.n	1f242 <d_print_mod+0x37e>
   1f27a:	4f20      	ldr	r7, [pc, #128]	; (1f2fc <d_print_mod+0x438>)
   1f27c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f280:	f107 0909 	add.w	r9, r7, #9
   1f284:	2620      	movs	r6, #32
   1f286:	f04f 0800 	mov.w	r8, #0
   1f28a:	e00b      	b.n	1f2a4 <d_print_mod+0x3e0>
   1f28c:	460b      	mov	r3, r1
   1f28e:	3101      	adds	r1, #1
   1f290:	454f      	cmp	r7, r9
   1f292:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f296:	54e6      	strb	r6, [r4, r3]
   1f298:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f29c:	f000 8085 	beq.w	1f3aa <d_print_mod+0x4e6>
   1f2a0:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f2a4:	29ff      	cmp	r1, #255	; 0xff
   1f2a6:	d1f1      	bne.n	1f28c <d_print_mod+0x3c8>
   1f2a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f2ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f2b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f2b4:	4620      	mov	r0, r4
   1f2b6:	4798      	blx	r3
   1f2b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f2bc:	3301      	adds	r3, #1
   1f2be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f2c2:	2101      	movs	r1, #1
   1f2c4:	2300      	movs	r3, #0
   1f2c6:	e7e3      	b.n	1f290 <d_print_mod+0x3cc>
   1f2c8:	4e0d      	ldr	r6, [pc, #52]	; (1f300 <d_print_mod+0x43c>)
   1f2ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f2ce:	f106 0710 	add.w	r7, r6, #16
   1f2d2:	2520      	movs	r5, #32
   1f2d4:	f04f 0800 	mov.w	r8, #0
   1f2d8:	e020      	b.n	1f31c <d_print_mod+0x458>
   1f2da:	bf00      	nop
   1f2dc:	20004de8 	.word	0x20004de8
   1f2e0:	20004df4 	.word	0x20004df4
   1f2e4:	20004e00 	.word	0x20004e00
   1f2e8:	20004e28 	.word	0x20004e28
   1f2ec:	20004e30 	.word	0x20004e30
   1f2f0:	20004e34 	.word	0x20004e34
   1f2f4:	20004e40 	.word	0x20004e40
   1f2f8:	20004e4c 	.word	0x20004e4c
   1f2fc:	20004e50 	.word	0x20004e50
   1f300:	20004e08 	.word	0x20004e08
   1f304:	460b      	mov	r3, r1
   1f306:	3101      	adds	r1, #1
   1f308:	42b7      	cmp	r7, r6
   1f30a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f30e:	54e5      	strb	r5, [r4, r3]
   1f310:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f314:	f43f af0e 	beq.w	1f134 <d_print_mod+0x270>
   1f318:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f31c:	29ff      	cmp	r1, #255	; 0xff
   1f31e:	d1f1      	bne.n	1f304 <d_print_mod+0x440>
   1f320:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f324:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f328:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f32c:	4620      	mov	r0, r4
   1f32e:	4798      	blx	r3
   1f330:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f334:	3301      	adds	r3, #1
   1f336:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f33a:	2101      	movs	r1, #1
   1f33c:	2300      	movs	r3, #0
   1f33e:	e7e3      	b.n	1f308 <d_print_mod+0x444>
   1f340:	4f6d      	ldr	r7, [pc, #436]	; (1f4f8 <d_print_mod+0x634>)
   1f342:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f346:	f107 0908 	add.w	r9, r7, #8
   1f34a:	2620      	movs	r6, #32
   1f34c:	f04f 0800 	mov.w	r8, #0
   1f350:	e00a      	b.n	1f368 <d_print_mod+0x4a4>
   1f352:	460b      	mov	r3, r1
   1f354:	3101      	adds	r1, #1
   1f356:	45b9      	cmp	r9, r7
   1f358:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f35c:	54e6      	strb	r6, [r4, r3]
   1f35e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f362:	d013      	beq.n	1f38c <d_print_mod+0x4c8>
   1f364:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f368:	29ff      	cmp	r1, #255	; 0xff
   1f36a:	d1f2      	bne.n	1f352 <d_print_mod+0x48e>
   1f36c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f370:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f374:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f378:	4620      	mov	r0, r4
   1f37a:	4798      	blx	r3
   1f37c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f380:	3301      	adds	r3, #1
   1f382:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f386:	2101      	movs	r1, #1
   1f388:	2300      	movs	r3, #0
   1f38a:	e7e4      	b.n	1f356 <d_print_mod+0x492>
   1f38c:	692a      	ldr	r2, [r5, #16]
   1f38e:	2a00      	cmp	r2, #0
   1f390:	f43f aed0 	beq.w	1f134 <d_print_mod+0x270>
   1f394:	29ff      	cmp	r1, #255	; 0xff
   1f396:	d032      	beq.n	1f3fe <d_print_mod+0x53a>
   1f398:	1c48      	adds	r0, r1, #1
   1f39a:	2328      	movs	r3, #40	; 0x28
   1f39c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1f3a0:	5463      	strb	r3, [r4, r1]
   1f3a2:	2111      	movs	r1, #17
   1f3a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f3a8:	e001      	b.n	1f3ae <d_print_mod+0x4ea>
   1f3aa:	68ea      	ldr	r2, [r5, #12]
   1f3ac:	2111      	movs	r1, #17
   1f3ae:	4620      	mov	r0, r4
   1f3b0:	f7ff fd5a 	bl	1ee68 <d_print_comp>
   1f3b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f3b8:	29ff      	cmp	r1, #255	; 0xff
   1f3ba:	d061      	beq.n	1f480 <d_print_mod+0x5bc>
   1f3bc:	1c4a      	adds	r2, r1, #1
   1f3be:	2329      	movs	r3, #41	; 0x29
   1f3c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f3c4:	5463      	strb	r3, [r4, r1]
   1f3c6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f3ce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f3d2:	29ff      	cmp	r1, #255	; 0xff
   1f3d4:	d072      	beq.n	1f4bc <d_print_mod+0x5f8>
   1f3d6:	1c4a      	adds	r2, r1, #1
   1f3d8:	2320      	movs	r3, #32
   1f3da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f3de:	5463      	strb	r3, [r4, r1]
   1f3e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f3e4:	e71e      	b.n	1f224 <d_print_mod+0x360>
   1f3e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f3ea:	29ff      	cmp	r1, #255	; 0xff
   1f3ec:	d076      	beq.n	1f4dc <d_print_mod+0x618>
   1f3ee:	1c4a      	adds	r2, r1, #1
   1f3f0:	232a      	movs	r3, #42	; 0x2a
   1f3f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f3f6:	5463      	strb	r3, [r4, r1]
   1f3f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f3fc:	e69a      	b.n	1f134 <d_print_mod+0x270>
   1f3fe:	2600      	movs	r6, #0
   1f400:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f404:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f408:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1f40c:	4620      	mov	r0, r4
   1f40e:	4798      	blx	r3
   1f410:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f414:	692a      	ldr	r2, [r5, #16]
   1f416:	3301      	adds	r3, #1
   1f418:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f41c:	2001      	movs	r0, #1
   1f41e:	4631      	mov	r1, r6
   1f420:	e7bb      	b.n	1f39a <d_print_mod+0x4d6>
   1f422:	2600      	movs	r6, #0
   1f424:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1f428:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1f42c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1f430:	4798      	blx	r3
   1f432:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f436:	2201      	movs	r2, #1
   1f438:	4413      	add	r3, r2
   1f43a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f43e:	4631      	mov	r1, r6
   1f440:	e659      	b.n	1f0f6 <d_print_mod+0x232>
   1f442:	2500      	movs	r5, #0
   1f444:	4619      	mov	r1, r3
   1f446:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1f44a:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f44e:	4798      	blx	r3
   1f450:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f454:	2101      	movs	r1, #1
   1f456:	440b      	add	r3, r1
   1f458:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f45c:	462b      	mov	r3, r5
   1f45e:	e63d      	b.n	1f0dc <d_print_mod+0x218>
   1f460:	2100      	movs	r1, #0
   1f462:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
   1f466:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
   1f46a:	4619      	mov	r1, r3
   1f46c:	47a8      	blx	r5
   1f46e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f472:	2220      	movs	r2, #32
   1f474:	3301      	adds	r3, #1
   1f476:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f47a:	7022      	strb	r2, [r4, #0]
   1f47c:	2101      	movs	r1, #1
   1f47e:	e652      	b.n	1f126 <d_print_mod+0x262>
   1f480:	2500      	movs	r5, #0
   1f482:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f486:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f48a:	4620      	mov	r0, r4
   1f48c:	4798      	blx	r3
   1f48e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f492:	2201      	movs	r2, #1
   1f494:	4413      	add	r3, r2
   1f496:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f49a:	4629      	mov	r1, r5
   1f49c:	e78f      	b.n	1f3be <d_print_mod+0x4fa>
   1f49e:	2500      	movs	r5, #0
   1f4a0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f4a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f4a8:	4620      	mov	r0, r4
   1f4aa:	4798      	blx	r3
   1f4ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f4b0:	2201      	movs	r2, #1
   1f4b2:	4413      	add	r3, r2
   1f4b4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f4b8:	4629      	mov	r1, r5
   1f4ba:	e635      	b.n	1f128 <d_print_mod+0x264>
   1f4bc:	2600      	movs	r6, #0
   1f4be:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1f4c2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1f4c6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1f4ca:	4798      	blx	r3
   1f4cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f4d0:	2201      	movs	r2, #1
   1f4d2:	4413      	add	r3, r2
   1f4d4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f4d8:	4631      	mov	r1, r6
   1f4da:	e77d      	b.n	1f3d8 <d_print_mod+0x514>
   1f4dc:	2500      	movs	r5, #0
   1f4de:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f4e2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1f4e6:	4798      	blx	r3
   1f4e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f4ec:	2201      	movs	r2, #1
   1f4ee:	4413      	add	r3, r2
   1f4f0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f4f4:	4629      	mov	r1, r5
   1f4f6:	e77b      	b.n	1f3f0 <d_print_mod+0x52c>
   1f4f8:	20004e1c 	.word	0x20004e1c

0001f4fc <d_print_function_type>:
   1f4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f500:	4604      	mov	r4, r0
   1f502:	4616      	mov	r6, r2
   1f504:	461d      	mov	r5, r3
   1f506:	b19b      	cbz	r3, 1f530 <d_print_function_type+0x34>
   1f508:	4f71      	ldr	r7, [pc, #452]	; (1f6d0 <d_print_function_type+0x1d4>)
   1f50a:	2001      	movs	r0, #1
   1f50c:	689a      	ldr	r2, [r3, #8]
   1f50e:	b97a      	cbnz	r2, 1f530 <d_print_function_type+0x34>
   1f510:	685a      	ldr	r2, [r3, #4]
   1f512:	7811      	ldrb	r1, [r2, #0]
   1f514:	3919      	subs	r1, #25
   1f516:	b2c9      	uxtb	r1, r1
   1f518:	2912      	cmp	r1, #18
   1f51a:	fa00 f201 	lsl.w	r2, r0, r1
   1f51e:	d804      	bhi.n	1f52a <d_print_function_type+0x2e>
   1f520:	423a      	tst	r2, r7
   1f522:	d135      	bne.n	1f590 <d_print_function_type+0x94>
   1f524:	f412 6f60 	tst.w	r2, #3584	; 0xe00
   1f528:	d174      	bne.n	1f614 <d_print_function_type+0x118>
   1f52a:	681b      	ldr	r3, [r3, #0]
   1f52c:	2b00      	cmp	r3, #0
   1f52e:	d1ed      	bne.n	1f50c <d_print_function_type+0x10>
   1f530:	2300      	movs	r3, #0
   1f532:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1f536:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1f53a:	462a      	mov	r2, r5
   1f53c:	2111      	movs	r1, #17
   1f53e:	4620      	mov	r0, r4
   1f540:	f000 f8c8 	bl	1f6d4 <d_print_mod_list>
   1f544:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f548:	2bff      	cmp	r3, #255	; 0xff
   1f54a:	d04b      	beq.n	1f5e4 <d_print_function_type+0xe8>
   1f54c:	2228      	movs	r2, #40	; 0x28
   1f54e:	1c59      	adds	r1, r3, #1
   1f550:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f554:	54e2      	strb	r2, [r4, r3]
   1f556:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f55a:	6932      	ldr	r2, [r6, #16]
   1f55c:	b12a      	cbz	r2, 1f56a <d_print_function_type+0x6e>
   1f55e:	2111      	movs	r1, #17
   1f560:	4620      	mov	r0, r4
   1f562:	f7ff fc81 	bl	1ee68 <d_print_comp>
   1f566:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f56a:	29ff      	cmp	r1, #255	; 0xff
   1f56c:	d076      	beq.n	1f65c <d_print_function_type+0x160>
   1f56e:	1c4b      	adds	r3, r1, #1
   1f570:	2229      	movs	r2, #41	; 0x29
   1f572:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f576:	4620      	mov	r0, r4
   1f578:	5462      	strb	r2, [r4, r1]
   1f57a:	2301      	movs	r3, #1
   1f57c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f580:	2111      	movs	r1, #17
   1f582:	462a      	mov	r2, r5
   1f584:	f000 f8a6 	bl	1f6d4 <d_print_mod_list>
   1f588:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   1f58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f590:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1f594:	2b20      	cmp	r3, #32
   1f596:	d145      	bne.n	1f624 <d_print_function_type+0x128>
   1f598:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f59c:	29ff      	cmp	r1, #255	; 0xff
   1f59e:	d04e      	beq.n	1f63e <d_print_function_type+0x142>
   1f5a0:	1c4b      	adds	r3, r1, #1
   1f5a2:	f04f 0828 	mov.w	r8, #40	; 0x28
   1f5a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f5aa:	f804 8001 	strb.w	r8, [r4, r1]
   1f5ae:	f04f 0900 	mov.w	r9, #0
   1f5b2:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1f5b6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1f5ba:	2111      	movs	r1, #17
   1f5bc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1f5c0:	464b      	mov	r3, r9
   1f5c2:	462a      	mov	r2, r5
   1f5c4:	4620      	mov	r0, r4
   1f5c6:	f000 f885 	bl	1f6d4 <d_print_mod_list>
   1f5ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f5ce:	29ff      	cmp	r1, #255	; 0xff
   1f5d0:	d053      	beq.n	1f67a <d_print_function_type+0x17e>
   1f5d2:	1c4b      	adds	r3, r1, #1
   1f5d4:	2229      	movs	r2, #41	; 0x29
   1f5d6:	2bff      	cmp	r3, #255	; 0xff
   1f5d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f5dc:	5462      	strb	r2, [r4, r1]
   1f5de:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f5e2:	d1b3      	bne.n	1f54c <d_print_function_type+0x50>
   1f5e4:	4619      	mov	r1, r3
   1f5e6:	2300      	movs	r3, #0
   1f5e8:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1f5ec:	4620      	mov	r0, r4
   1f5ee:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f5f2:	4798      	blx	r3
   1f5f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f5f8:	3301      	adds	r3, #1
   1f5fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f5fe:	2328      	movs	r3, #40	; 0x28
   1f600:	7023      	strb	r3, [r4, #0]
   1f602:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f606:	6932      	ldr	r2, [r6, #16]
   1f608:	2101      	movs	r1, #1
   1f60a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f60e:	2a00      	cmp	r2, #0
   1f610:	d1a5      	bne.n	1f55e <d_print_function_type+0x62>
   1f612:	e7ac      	b.n	1f56e <d_print_function_type+0x72>
   1f614:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1f618:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1f61c:	2a28      	cmp	r2, #40	; 0x28
   1f61e:	d0bb      	beq.n	1f598 <d_print_function_type+0x9c>
   1f620:	2b20      	cmp	r3, #32
   1f622:	d0b9      	beq.n	1f598 <d_print_function_type+0x9c>
   1f624:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f628:	2bff      	cmp	r3, #255	; 0xff
   1f62a:	d03e      	beq.n	1f6aa <d_print_function_type+0x1ae>
   1f62c:	1c59      	adds	r1, r3, #1
   1f62e:	2220      	movs	r2, #32
   1f630:	29ff      	cmp	r1, #255	; 0xff
   1f632:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f636:	54e2      	strb	r2, [r4, r3]
   1f638:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f63c:	d1b0      	bne.n	1f5a0 <d_print_function_type+0xa4>
   1f63e:	2700      	movs	r7, #0
   1f640:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f644:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1f648:	4620      	mov	r0, r4
   1f64a:	4798      	blx	r3
   1f64c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f650:	3301      	adds	r3, #1
   1f652:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f656:	4639      	mov	r1, r7
   1f658:	2301      	movs	r3, #1
   1f65a:	e7a2      	b.n	1f5a2 <d_print_function_type+0xa6>
   1f65c:	2600      	movs	r6, #0
   1f65e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f662:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1f666:	4620      	mov	r0, r4
   1f668:	4798      	blx	r3
   1f66a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f66e:	3301      	adds	r3, #1
   1f670:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f674:	4631      	mov	r1, r6
   1f676:	2301      	movs	r3, #1
   1f678:	e77a      	b.n	1f570 <d_print_function_type+0x74>
   1f67a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f67e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1f682:	4620      	mov	r0, r4
   1f684:	4798      	blx	r3
   1f686:	f642 0329 	movw	r3, #10281	; 0x2829
   1f68a:	8023      	strh	r3, [r4, #0]
   1f68c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1f690:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f694:	6932      	ldr	r2, [r6, #16]
   1f696:	3301      	adds	r3, #1
   1f698:	2102      	movs	r1, #2
   1f69a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f69e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f6a2:	2a00      	cmp	r2, #0
   1f6a4:	f47f af5b 	bne.w	1f55e <d_print_function_type+0x62>
   1f6a8:	e761      	b.n	1f56e <d_print_function_type+0x72>
   1f6aa:	2200      	movs	r2, #0
   1f6ac:	4619      	mov	r1, r3
   1f6ae:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1f6b2:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
   1f6b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f6ba:	4620      	mov	r0, r4
   1f6bc:	47b8      	blx	r7
   1f6be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f6c2:	2220      	movs	r2, #32
   1f6c4:	3301      	adds	r3, #1
   1f6c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f6ca:	7022      	strb	r2, [r4, #0]
   1f6cc:	2101      	movs	r1, #1
   1f6ce:	e767      	b.n	1f5a0 <d_print_function_type+0xa4>
   1f6d0:	00043107 	.word	0x00043107

0001f6d4 <d_print_mod_list>:
   1f6d4:	2a00      	cmp	r2, #0
   1f6d6:	f000 80c2 	beq.w	1f85e <d_print_mod_list+0x18a>
   1f6da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f6de:	4605      	mov	r5, r0
   1f6e0:	b088      	sub	sp, #32
   1f6e2:	461e      	mov	r6, r3
   1f6e4:	4614      	mov	r4, r2
   1f6e6:	2701      	movs	r7, #1
   1f6e8:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1f6ec:	b9ca      	cbnz	r2, 1f722 <d_print_mod_list+0x4e>
   1f6ee:	68a2      	ldr	r2, [r4, #8]
   1f6f0:	bb0a      	cbnz	r2, 1f736 <d_print_mod_list+0x62>
   1f6f2:	6862      	ldr	r2, [r4, #4]
   1f6f4:	7811      	ldrb	r1, [r2, #0]
   1f6f6:	b1be      	cbz	r6, 1f728 <d_print_mod_list+0x54>
   1f6f8:	68e3      	ldr	r3, [r4, #12]
   1f6fa:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1f6fe:	60a7      	str	r7, [r4, #8]
   1f700:	2929      	cmp	r1, #41	; 0x29
   1f702:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1f706:	d024      	beq.n	1f752 <d_print_mod_list+0x7e>
   1f708:	292a      	cmp	r1, #42	; 0x2a
   1f70a:	d02c      	beq.n	1f766 <d_print_mod_list+0x92>
   1f70c:	2902      	cmp	r1, #2
   1f70e:	d034      	beq.n	1f77a <d_print_mod_list+0xa6>
   1f710:	2111      	movs	r1, #17
   1f712:	4628      	mov	r0, r5
   1f714:	f7ff fbd6 	bl	1eec4 <d_print_mod>
   1f718:	6824      	ldr	r4, [r4, #0]
   1f71a:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1f71e:	2c00      	cmp	r4, #0
   1f720:	d1e2      	bne.n	1f6e8 <d_print_mod_list+0x14>
   1f722:	b008      	add	sp, #32
   1f724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f728:	294e      	cmp	r1, #78	; 0x4e
   1f72a:	d004      	beq.n	1f736 <d_print_mod_list+0x62>
   1f72c:	d807      	bhi.n	1f73e <d_print_mod_list+0x6a>
   1f72e:	f1a1 031c 	sub.w	r3, r1, #28
   1f732:	2b04      	cmp	r3, #4
   1f734:	d8e0      	bhi.n	1f6f8 <d_print_mod_list+0x24>
   1f736:	6824      	ldr	r4, [r4, #0]
   1f738:	2c00      	cmp	r4, #0
   1f73a:	d1d5      	bne.n	1f6e8 <d_print_mod_list+0x14>
   1f73c:	e7f1      	b.n	1f722 <d_print_mod_list+0x4e>
   1f73e:	3950      	subs	r1, #80	; 0x50
   1f740:	2901      	cmp	r1, #1
   1f742:	d9f8      	bls.n	1f736 <d_print_mod_list+0x62>
   1f744:	68e3      	ldr	r3, [r4, #12]
   1f746:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1f74a:	60a7      	str	r7, [r4, #8]
   1f74c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1f750:	e7de      	b.n	1f710 <d_print_mod_list+0x3c>
   1f752:	6823      	ldr	r3, [r4, #0]
   1f754:	2111      	movs	r1, #17
   1f756:	4628      	mov	r0, r5
   1f758:	f7ff fed0 	bl	1f4fc <d_print_function_type>
   1f75c:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1f760:	b008      	add	sp, #32
   1f762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f766:	6823      	ldr	r3, [r4, #0]
   1f768:	2111      	movs	r1, #17
   1f76a:	4628      	mov	r0, r5
   1f76c:	f000 f8d6 	bl	1f91c <d_print_array_type>
   1f770:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1f774:	b008      	add	sp, #32
   1f776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f77a:	4e64      	ldr	r6, [pc, #400]	; (1f90c <d_print_mod_list+0x238>)
   1f77c:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
   1f780:	68d2      	ldr	r2, [r2, #12]
   1f782:	f04f 0900 	mov.w	r9, #0
   1f786:	2111      	movs	r1, #17
   1f788:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
   1f78c:	4628      	mov	r0, r5
   1f78e:	f7ff fb6b 	bl	1ee68 <d_print_comp>
   1f792:	f106 0a01 	add.w	sl, r6, #1
   1f796:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
   1f79a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1f79e:	273a      	movs	r7, #58	; 0x3a
   1f7a0:	e00a      	b.n	1f7b8 <d_print_mod_list+0xe4>
   1f7a2:	460b      	mov	r3, r1
   1f7a4:	3101      	adds	r1, #1
   1f7a6:	4556      	cmp	r6, sl
   1f7a8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1f7ac:	54ef      	strb	r7, [r5, r3]
   1f7ae:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1f7b2:	d013      	beq.n	1f7dc <d_print_mod_list+0x108>
   1f7b4:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1f7b8:	29ff      	cmp	r1, #255	; 0xff
   1f7ba:	d1f2      	bne.n	1f7a2 <d_print_mod_list+0xce>
   1f7bc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f7c0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1f7c4:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f7c8:	4628      	mov	r0, r5
   1f7ca:	4798      	blx	r3
   1f7cc:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f7d0:	3301      	adds	r3, #1
   1f7d2:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f7d6:	2101      	movs	r1, #1
   1f7d8:	2300      	movs	r3, #0
   1f7da:	e7e4      	b.n	1f7a6 <d_print_mod_list+0xd2>
   1f7dc:	6863      	ldr	r3, [r4, #4]
   1f7de:	691c      	ldr	r4, [r3, #16]
   1f7e0:	7823      	ldrb	r3, [r4, #0]
   1f7e2:	2b48      	cmp	r3, #72	; 0x48
   1f7e4:	d017      	beq.n	1f816 <d_print_mod_list+0x142>
   1f7e6:	2b4e      	cmp	r3, #78	; 0x4e
   1f7e8:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1f7ec:	f1a3 011c 	sub.w	r1, r3, #28
   1f7f0:	d00e      	beq.n	1f810 <d_print_mod_list+0x13c>
   1f7f2:	d80b      	bhi.n	1f80c <d_print_mod_list+0x138>
   1f7f4:	2904      	cmp	r1, #4
   1f7f6:	d90b      	bls.n	1f810 <d_print_mod_list+0x13c>
   1f7f8:	4622      	mov	r2, r4
   1f7fa:	2111      	movs	r1, #17
   1f7fc:	4628      	mov	r0, r5
   1f7fe:	f7ff fb33 	bl	1ee68 <d_print_comp>
   1f802:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1f806:	b008      	add	sp, #32
   1f808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f80c:	2a01      	cmp	r2, #1
   1f80e:	d8f3      	bhi.n	1f7f8 <d_print_mod_list+0x124>
   1f810:	68e4      	ldr	r4, [r4, #12]
   1f812:	7823      	ldrb	r3, [r4, #0]
   1f814:	e7e7      	b.n	1f7e6 <d_print_mod_list+0x112>
   1f816:	4f3e      	ldr	r7, [pc, #248]	; (1f910 <d_print_mod_list+0x23c>)
   1f818:	267b      	movs	r6, #123	; 0x7b
   1f81a:	f107 0a0c 	add.w	sl, r7, #12
   1f81e:	f04f 0900 	mov.w	r9, #0
   1f822:	e00a      	b.n	1f83a <d_print_mod_list+0x166>
   1f824:	460b      	mov	r3, r1
   1f826:	3101      	adds	r1, #1
   1f828:	4557      	cmp	r7, sl
   1f82a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1f82e:	54ee      	strb	r6, [r5, r3]
   1f830:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1f834:	d014      	beq.n	1f860 <d_print_mod_list+0x18c>
   1f836:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f83a:	29ff      	cmp	r1, #255	; 0xff
   1f83c:	d1f2      	bne.n	1f824 <d_print_mod_list+0x150>
   1f83e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f842:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1f846:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f84a:	4628      	mov	r0, r5
   1f84c:	4798      	blx	r3
   1f84e:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f852:	3301      	adds	r3, #1
   1f854:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f858:	2101      	movs	r1, #1
   1f85a:	2300      	movs	r3, #0
   1f85c:	e7e4      	b.n	1f828 <d_print_mod_list+0x154>
   1f85e:	4770      	bx	lr
   1f860:	6922      	ldr	r2, [r4, #16]
   1f862:	492c      	ldr	r1, [pc, #176]	; (1f914 <d_print_mod_list+0x240>)
   1f864:	3201      	adds	r2, #1
   1f866:	a801      	add	r0, sp, #4
   1f868:	f002 fe3e 	bl	224e8 <sprintf>
   1f86c:	a801      	add	r0, sp, #4
   1f86e:	f007 fa07 	bl	26c80 <strlen>
   1f872:	b320      	cbz	r0, 1f8be <d_print_mod_list+0x1ea>
   1f874:	ae01      	add	r6, sp, #4
   1f876:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1f87a:	eb06 0a00 	add.w	sl, r6, r0
   1f87e:	f04f 0900 	mov.w	r9, #0
   1f882:	e008      	b.n	1f896 <d_print_mod_list+0x1c2>
   1f884:	460b      	mov	r3, r1
   1f886:	3101      	adds	r1, #1
   1f888:	4556      	cmp	r6, sl
   1f88a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1f88e:	54ef      	strb	r7, [r5, r3]
   1f890:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1f894:	d015      	beq.n	1f8c2 <d_print_mod_list+0x1ee>
   1f896:	29ff      	cmp	r1, #255	; 0xff
   1f898:	f816 7b01 	ldrb.w	r7, [r6], #1
   1f89c:	d1f2      	bne.n	1f884 <d_print_mod_list+0x1b0>
   1f89e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f8a2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1f8a6:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f8aa:	4628      	mov	r0, r5
   1f8ac:	4798      	blx	r3
   1f8ae:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f8b2:	3301      	adds	r3, #1
   1f8b4:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f8b8:	2101      	movs	r1, #1
   1f8ba:	2300      	movs	r3, #0
   1f8bc:	e7e4      	b.n	1f888 <d_print_mod_list+0x1b4>
   1f8be:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1f8c2:	4f15      	ldr	r7, [pc, #84]	; (1f918 <d_print_mod_list+0x244>)
   1f8c4:	267d      	movs	r6, #125	; 0x7d
   1f8c6:	f107 0a02 	add.w	sl, r7, #2
   1f8ca:	f04f 0900 	mov.w	r9, #0
   1f8ce:	e00a      	b.n	1f8e6 <d_print_mod_list+0x212>
   1f8d0:	460b      	mov	r3, r1
   1f8d2:	3101      	adds	r1, #1
   1f8d4:	4557      	cmp	r7, sl
   1f8d6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1f8da:	54ee      	strb	r6, [r5, r3]
   1f8dc:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1f8e0:	d096      	beq.n	1f810 <d_print_mod_list+0x13c>
   1f8e2:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f8e6:	29ff      	cmp	r1, #255	; 0xff
   1f8e8:	d1f2      	bne.n	1f8d0 <d_print_mod_list+0x1fc>
   1f8ea:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f8ee:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1f8f2:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f8f6:	4628      	mov	r0, r5
   1f8f8:	4798      	blx	r3
   1f8fa:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f8fe:	3301      	adds	r3, #1
   1f900:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f904:	2101      	movs	r1, #1
   1f906:	2300      	movs	r3, #0
   1f908:	e7e4      	b.n	1f8d4 <d_print_mod_list+0x200>
   1f90a:	bf00      	nop
   1f90c:	20004b58 	.word	0x20004b58
   1f910:	20004b5c 	.word	0x20004b5c
   1f914:	20004b0c 	.word	0x20004b0c
   1f918:	20004b6c 	.word	0x20004b6c

0001f91c <d_print_array_type>:
   1f91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f920:	4604      	mov	r4, r0
   1f922:	4617      	mov	r7, r2
   1f924:	b153      	cbz	r3, 1f93c <d_print_array_type+0x20>
   1f926:	461e      	mov	r6, r3
   1f928:	689d      	ldr	r5, [r3, #8]
   1f92a:	b37d      	cbz	r5, 1f98c <d_print_array_type+0x70>
   1f92c:	681b      	ldr	r3, [r3, #0]
   1f92e:	2b00      	cmp	r3, #0
   1f930:	d1fa      	bne.n	1f928 <d_print_array_type+0xc>
   1f932:	4632      	mov	r2, r6
   1f934:	2111      	movs	r1, #17
   1f936:	4620      	mov	r0, r4
   1f938:	f7ff fecc 	bl	1f6d4 <d_print_mod_list>
   1f93c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f940:	2bff      	cmp	r3, #255	; 0xff
   1f942:	f000 809d 	beq.w	1fa80 <d_print_array_type+0x164>
   1f946:	1c59      	adds	r1, r3, #1
   1f948:	2220      	movs	r2, #32
   1f94a:	29ff      	cmp	r1, #255	; 0xff
   1f94c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f950:	54e2      	strb	r2, [r4, r3]
   1f952:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f956:	d027      	beq.n	1f9a8 <d_print_array_type+0x8c>
   1f958:	225b      	movs	r2, #91	; 0x5b
   1f95a:	1c4b      	adds	r3, r1, #1
   1f95c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f960:	5462      	strb	r2, [r4, r1]
   1f962:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f966:	68fa      	ldr	r2, [r7, #12]
   1f968:	b12a      	cbz	r2, 1f976 <d_print_array_type+0x5a>
   1f96a:	2111      	movs	r1, #17
   1f96c:	4620      	mov	r0, r4
   1f96e:	f7ff fa7b 	bl	1ee68 <d_print_comp>
   1f972:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f976:	2bff      	cmp	r3, #255	; 0xff
   1f978:	d02f      	beq.n	1f9da <d_print_array_type+0xbe>
   1f97a:	1c59      	adds	r1, r3, #1
   1f97c:	225d      	movs	r2, #93	; 0x5d
   1f97e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f982:	54e2      	strb	r2, [r4, r3]
   1f984:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f98c:	685b      	ldr	r3, [r3, #4]
   1f98e:	781b      	ldrb	r3, [r3, #0]
   1f990:	2b2a      	cmp	r3, #42	; 0x2a
   1f992:	d132      	bne.n	1f9fa <d_print_array_type+0xde>
   1f994:	2111      	movs	r1, #17
   1f996:	462b      	mov	r3, r5
   1f998:	4632      	mov	r2, r6
   1f99a:	4620      	mov	r0, r4
   1f99c:	f7ff fe9a 	bl	1f6d4 <d_print_mod_list>
   1f9a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f9a4:	29ff      	cmp	r1, #255	; 0xff
   1f9a6:	d1d7      	bne.n	1f958 <d_print_array_type+0x3c>
   1f9a8:	2200      	movs	r2, #0
   1f9aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f9ae:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1f9b2:	4620      	mov	r0, r4
   1f9b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f9b8:	4798      	blx	r3
   1f9ba:	225b      	movs	r2, #91	; 0x5b
   1f9bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f9c0:	7022      	strb	r2, [r4, #0]
   1f9c2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f9c6:	68fa      	ldr	r2, [r7, #12]
   1f9c8:	1c59      	adds	r1, r3, #1
   1f9ca:	2301      	movs	r3, #1
   1f9cc:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   1f9d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f9d4:	2a00      	cmp	r2, #0
   1f9d6:	d1c8      	bne.n	1f96a <d_print_array_type+0x4e>
   1f9d8:	e7cf      	b.n	1f97a <d_print_array_type+0x5e>
   1f9da:	2500      	movs	r5, #0
   1f9dc:	4619      	mov	r1, r3
   1f9de:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f9e2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	4798      	blx	r3
   1f9ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f9ee:	2101      	movs	r1, #1
   1f9f0:	440b      	add	r3, r1
   1f9f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f9f6:	462b      	mov	r3, r5
   1f9f8:	e7c0      	b.n	1f97c <d_print_array_type+0x60>
   1f9fa:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1fae0 <d_print_array_type+0x1c4>
   1f9fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fa02:	f04f 0920 	mov.w	r9, #32
   1fa06:	f108 0a01 	add.w	sl, r8, #1
   1fa0a:	e00c      	b.n	1fa26 <d_print_array_type+0x10a>
   1fa0c:	460b      	mov	r3, r1
   1fa0e:	45d0      	cmp	r8, sl
   1fa10:	f101 0101 	add.w	r1, r1, #1
   1fa14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fa18:	f804 9003 	strb.w	r9, [r4, r3]
   1fa1c:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1fa20:	d01a      	beq.n	1fa58 <d_print_array_type+0x13c>
   1fa22:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1fa26:	29ff      	cmp	r1, #255	; 0xff
   1fa28:	d1f0      	bne.n	1fa0c <d_print_array_type+0xf0>
   1fa2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fa2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fa32:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1fa36:	4620      	mov	r0, r4
   1fa38:	4798      	blx	r3
   1fa3a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fa3e:	3301      	adds	r3, #1
   1fa40:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fa44:	2300      	movs	r3, #0
   1fa46:	2101      	movs	r1, #1
   1fa48:	45d0      	cmp	r8, sl
   1fa4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fa4e:	f804 9003 	strb.w	r9, [r4, r3]
   1fa52:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1fa56:	d1e4      	bne.n	1fa22 <d_print_array_type+0x106>
   1fa58:	2111      	movs	r1, #17
   1fa5a:	2300      	movs	r3, #0
   1fa5c:	4632      	mov	r2, r6
   1fa5e:	4620      	mov	r0, r4
   1fa60:	f7ff fe38 	bl	1f6d4 <d_print_mod_list>
   1fa64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fa68:	29ff      	cmp	r1, #255	; 0xff
   1fa6a:	d026      	beq.n	1faba <d_print_array_type+0x19e>
   1fa6c:	1c4b      	adds	r3, r1, #1
   1fa6e:	2229      	movs	r2, #41	; 0x29
   1fa70:	2bff      	cmp	r3, #255	; 0xff
   1fa72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fa76:	5462      	strb	r2, [r4, r1]
   1fa78:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fa7c:	f47f af63 	bne.w	1f946 <d_print_array_type+0x2a>
   1fa80:	2200      	movs	r2, #0
   1fa82:	4619      	mov	r1, r3
   1fa84:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1fa88:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
   1fa8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fa90:	4620      	mov	r0, r4
   1fa92:	47a8      	blx	r5
   1fa94:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fa98:	225b      	movs	r2, #91	; 0x5b
   1fa9a:	f645 3120 	movw	r1, #23328	; 0x5b20
   1fa9e:	8021      	strh	r1, [r4, #0]
   1faa0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1faa4:	68fa      	ldr	r2, [r7, #12]
   1faa6:	3301      	adds	r3, #1
   1faa8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1faac:	2302      	movs	r3, #2
   1faae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fab2:	2a00      	cmp	r2, #0
   1fab4:	f47f af59 	bne.w	1f96a <d_print_array_type+0x4e>
   1fab8:	e75f      	b.n	1f97a <d_print_array_type+0x5e>
   1faba:	2200      	movs	r2, #0
   1fabc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fac0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1fac4:	4620      	mov	r0, r4
   1fac6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1faca:	4798      	blx	r3
   1facc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fad0:	2229      	movs	r2, #41	; 0x29
   1fad2:	3301      	adds	r3, #1
   1fad4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fad8:	7022      	strb	r2, [r4, #0]
   1fada:	2301      	movs	r3, #1
   1fadc:	e733      	b.n	1f946 <d_print_array_type+0x2a>
   1fade:	bf00      	nop
   1fae0:	20004d64 	.word	0x20004d64

0001fae4 <d_print_expr_op>:
   1fae4:	7811      	ldrb	r1, [r2, #0]
   1fae6:	2932      	cmp	r1, #50	; 0x32
   1fae8:	d002      	beq.n	1faf0 <d_print_expr_op+0xc>
   1faea:	2111      	movs	r1, #17
   1faec:	f7ff b9bc 	b.w	1ee68 <d_print_comp>
   1faf0:	68d3      	ldr	r3, [r2, #12]
   1faf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faf6:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
   1fafa:	b367      	cbz	r7, 1fb56 <d_print_expr_op+0x72>
   1fafc:	442f      	add	r7, r5
   1fafe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1fb02:	4604      	mov	r4, r0
   1fb04:	3d01      	subs	r5, #1
   1fb06:	3f01      	subs	r7, #1
   1fb08:	f04f 0800 	mov.w	r8, #0
   1fb0c:	e009      	b.n	1fb22 <d_print_expr_op+0x3e>
   1fb0e:	460b      	mov	r3, r1
   1fb10:	42bd      	cmp	r5, r7
   1fb12:	f101 0101 	add.w	r1, r1, #1
   1fb16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fb1a:	54e6      	strb	r6, [r4, r3]
   1fb1c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1fb20:	d019      	beq.n	1fb56 <d_print_expr_op+0x72>
   1fb22:	29ff      	cmp	r1, #255	; 0xff
   1fb24:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1fb28:	d1f1      	bne.n	1fb0e <d_print_expr_op+0x2a>
   1fb2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fb2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fb32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1fb36:	4620      	mov	r0, r4
   1fb38:	4798      	blx	r3
   1fb3a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fb3e:	3301      	adds	r3, #1
   1fb40:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fb44:	2300      	movs	r3, #0
   1fb46:	2101      	movs	r1, #1
   1fb48:	42bd      	cmp	r5, r7
   1fb4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fb4e:	54e6      	strb	r6, [r4, r3]
   1fb50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1fb54:	d1e5      	bne.n	1fb22 <d_print_expr_op+0x3e>
   1fb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb5a:	bf00      	nop

0001fb5c <d_demangle_callback.constprop.0>:
   1fb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb60:	ed2d 8b02 	vpush	{d8}
   1fb64:	b0e7      	sub	sp, #412	; 0x19c
   1fb66:	7803      	ldrb	r3, [r0, #0]
   1fb68:	af00      	add	r7, sp, #0
   1fb6a:	2b5f      	cmp	r3, #95	; 0x5f
   1fb6c:	e9c7 2100 	strd	r2, r1, [r7]
   1fb70:	4605      	mov	r5, r0
   1fb72:	f000 8144 	beq.w	1fdfe <d_demangle_callback.constprop.0+0x2a2>
   1fb76:	49a9      	ldr	r1, [pc, #676]	; (1fe1c <d_demangle_callback.constprop.0+0x2c0>)
   1fb78:	2208      	movs	r2, #8
   1fb7a:	4628      	mov	r0, r5
   1fb7c:	f002 fbac 	bl	222d8 <strncmp>
   1fb80:	2800      	cmp	r0, #0
   1fb82:	f000 8107 	beq.w	1fd94 <d_demangle_callback.constprop.0+0x238>
   1fb86:	f04f 0900 	mov.w	r9, #0
   1fb8a:	2301      	movs	r3, #1
   1fb8c:	f1b9 0f02 	cmp.w	r9, #2
   1fb90:	647b      	str	r3, [r7, #68]	; 0x44
   1fb92:	bf0c      	ite	eq
   1fb94:	2345      	moveq	r3, #69	; 0x45
   1fb96:	2346      	movne	r3, #70	; 0x46
   1fb98:	f1a9 0a02 	sub.w	sl, r9, #2
   1fb9c:	ee08 3a10 	vmov	s16, r3
   1fba0:	fa5f fa8a 	uxtb.w	sl, sl
   1fba4:	4628      	mov	r0, r5
   1fba6:	f007 f86b 	bl	26c80 <strlen>
   1fbaa:	182b      	adds	r3, r5, r0
   1fbac:	0042      	lsls	r2, r0, #1
   1fbae:	2100      	movs	r1, #0
   1fbb0:	e9c7 5303 	strd	r5, r3, [r7, #12]
   1fbb4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1fbb8:	f04f 0311 	mov.w	r3, #17
   1fbbc:	e9c7 3505 	strd	r3, r5, [r7, #20]
   1fbc0:	e9c7 1208 	strd	r1, r2, [r7, #32]
   1fbc4:	e9c7 100b 	strd	r1, r0, [r7, #44]	; 0x2c
   1fbc8:	e9c7 110d 	strd	r1, r1, [r7, #52]	; 0x34
   1fbcc:	e9c7 110f 	strd	r1, r1, [r7, #60]	; 0x3c
   1fbd0:	64b9      	str	r1, [r7, #72]	; 0x48
   1fbd2:	f200 811b 	bhi.w	1fe0c <d_demangle_callback.constprop.0+0x2b0>
   1fbd6:	0083      	lsls	r3, r0, #2
   1fbd8:	46e8      	mov	r8, sp
   1fbda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fbde:	3307      	adds	r3, #7
   1fbe0:	eba8 00c0 	sub.w	r0, r8, r0, lsl #3
   1fbe4:	4685      	mov	sp, r0
   1fbe6:	f023 0307 	bic.w	r3, r3, #7
   1fbea:	466e      	mov	r6, sp
   1fbec:	f1b9 0f01 	cmp.w	r9, #1
   1fbf0:	ebad 0d03 	sub.w	sp, sp, r3
   1fbf4:	61fe      	str	r6, [r7, #28]
   1fbf6:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
   1fbfa:	d040      	beq.n	1fc7e <d_demangle_callback.constprop.0+0x122>
   1fbfc:	f1ba 0f01 	cmp.w	sl, #1
   1fc00:	d835      	bhi.n	1fc6e <d_demangle_callback.constprop.0+0x112>
   1fc02:	7aeb      	ldrb	r3, [r5, #11]
   1fc04:	f105 040b 	add.w	r4, r5, #11
   1fc08:	2b5f      	cmp	r3, #95	; 0x5f
   1fc0a:	61bc      	str	r4, [r7, #24]
   1fc0c:	d103      	bne.n	1fc16 <d_demangle_callback.constprop.0+0xba>
   1fc0e:	7b2b      	ldrb	r3, [r5, #12]
   1fc10:	2b5a      	cmp	r3, #90	; 0x5a
   1fc12:	f000 80b0 	beq.w	1fd76 <d_demangle_callback.constprop.0+0x21a>
   1fc16:	2a00      	cmp	r2, #0
   1fc18:	f340 80ab 	ble.w	1fd72 <d_demangle_callback.constprop.0+0x216>
   1fc1c:	4620      	mov	r0, r4
   1fc1e:	f007 f82f 	bl	26c80 <strlen>
   1fc22:	2300      	movs	r3, #0
   1fc24:	2201      	movs	r2, #1
   1fc26:	e9c6 3301 	strd	r3, r3, [r6, #4]
   1fc2a:	623a      	str	r2, [r7, #32]
   1fc2c:	2800      	cmp	r0, #0
   1fc2e:	f000 80a0 	beq.w	1fd72 <d_demangle_callback.constprop.0+0x216>
   1fc32:	e9c6 4003 	strd	r4, r0, [r6, #12]
   1fc36:	7033      	strb	r3, [r6, #0]
   1fc38:	2300      	movs	r3, #0
   1fc3a:	4632      	mov	r2, r6
   1fc3c:	ee18 1a10 	vmov	r1, s16
   1fc40:	f107 000c 	add.w	r0, r7, #12
   1fc44:	f7fa fc6c 	bl	1a520 <d_make_comp>
   1fc48:	4606      	mov	r6, r0
   1fc4a:	4620      	mov	r0, r4
   1fc4c:	f007 f818 	bl	26c80 <strlen>
   1fc50:	1823      	adds	r3, r4, r0
   1fc52:	61bb      	str	r3, [r7, #24]
   1fc54:	5c23      	ldrb	r3, [r4, r0]
   1fc56:	b913      	cbnz	r3, 1fc5e <d_demangle_callback.constprop.0+0x102>
   1fc58:	2e00      	cmp	r6, #0
   1fc5a:	f040 80e1 	bne.w	1fe20 <d_demangle_callback.constprop.0+0x2c4>
   1fc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1fc60:	3301      	adds	r3, #1
   1fc62:	f040 80c3 	bne.w	1fdec <d_demangle_callback.constprop.0+0x290>
   1fc66:	2300      	movs	r3, #0
   1fc68:	647b      	str	r3, [r7, #68]	; 0x44
   1fc6a:	46c5      	mov	sp, r8
   1fc6c:	e79a      	b.n	1fba4 <d_demangle_callback.constprop.0+0x48>
   1fc6e:	f107 000c 	add.w	r0, r7, #12
   1fc72:	f7fb f8a7 	bl	1adc4 <d_type>
   1fc76:	69bb      	ldr	r3, [r7, #24]
   1fc78:	4606      	mov	r6, r0
   1fc7a:	781b      	ldrb	r3, [r3, #0]
   1fc7c:	e7eb      	b.n	1fc56 <d_demangle_callback.constprop.0+0xfa>
   1fc7e:	782b      	ldrb	r3, [r5, #0]
   1fc80:	2b5f      	cmp	r3, #95	; 0x5f
   1fc82:	d1ec      	bne.n	1fc5e <d_demangle_callback.constprop.0+0x102>
   1fc84:	786b      	ldrb	r3, [r5, #1]
   1fc86:	1c6a      	adds	r2, r5, #1
   1fc88:	2b5a      	cmp	r3, #90	; 0x5a
   1fc8a:	61ba      	str	r2, [r7, #24]
   1fc8c:	d1e7      	bne.n	1fc5e <d_demangle_callback.constprop.0+0x102>
   1fc8e:	78ab      	ldrb	r3, [r5, #2]
   1fc90:	1caa      	adds	r2, r5, #2
   1fc92:	2b47      	cmp	r3, #71	; 0x47
   1fc94:	61ba      	str	r2, [r7, #24]
   1fc96:	f000 809b 	beq.w	1fdd0 <d_demangle_callback.constprop.0+0x274>
   1fc9a:	2b54      	cmp	r3, #84	; 0x54
   1fc9c:	f000 8098 	beq.w	1fdd0 <d_demangle_callback.constprop.0+0x274>
   1fca0:	4649      	mov	r1, r9
   1fca2:	f107 000c 	add.w	r0, r7, #12
   1fca6:	f7fc ffe9 	bl	1cc7c <d_encoding.part.0>
   1fcaa:	697b      	ldr	r3, [r7, #20]
   1fcac:	07db      	lsls	r3, r3, #31
   1fcae:	4606      	mov	r6, r0
   1fcb0:	f140 8097 	bpl.w	1fde2 <d_demangle_callback.constprop.0+0x286>
   1fcb4:	69ba      	ldr	r2, [r7, #24]
   1fcb6:	7813      	ldrb	r3, [r2, #0]
   1fcb8:	2b2e      	cmp	r3, #46	; 0x2e
   1fcba:	d1cc      	bne.n	1fc56 <d_demangle_callback.constprop.0+0xfa>
   1fcbc:	4633      	mov	r3, r6
   1fcbe:	4616      	mov	r6, r2
   1fcc0:	461a      	mov	r2, r3
   1fcc2:	7873      	ldrb	r3, [r6, #1]
   1fcc4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1fcc8:	2919      	cmp	r1, #25
   1fcca:	f04f 0b00 	mov.w	fp, #0
   1fcce:	d945      	bls.n	1fd5c <d_demangle_callback.constprop.0+0x200>
   1fcd0:	2b5f      	cmp	r3, #95	; 0x5f
   1fcd2:	d043      	beq.n	1fd5c <d_demangle_callback.constprop.0+0x200>
   1fcd4:	3b30      	subs	r3, #48	; 0x30
   1fcd6:	2b09      	cmp	r3, #9
   1fcd8:	f200 80fd 	bhi.w	1fed6 <d_demangle_callback.constprop.0+0x37a>
   1fcdc:	7831      	ldrb	r1, [r6, #0]
   1fcde:	4634      	mov	r4, r6
   1fce0:	292e      	cmp	r1, #46	; 0x2e
   1fce2:	d112      	bne.n	1fd0a <d_demangle_callback.constprop.0+0x1ae>
   1fce4:	7863      	ldrb	r3, [r4, #1]
   1fce6:	3b30      	subs	r3, #48	; 0x30
   1fce8:	2b09      	cmp	r3, #9
   1fcea:	d80e      	bhi.n	1fd0a <d_demangle_callback.constprop.0+0x1ae>
   1fcec:	78a3      	ldrb	r3, [r4, #2]
   1fcee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1fcf2:	1ca0      	adds	r0, r4, #2
   1fcf4:	2909      	cmp	r1, #9
   1fcf6:	4604      	mov	r4, r0
   1fcf8:	d805      	bhi.n	1fd06 <d_demangle_callback.constprop.0+0x1aa>
   1fcfa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1fcfe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1fd02:	2909      	cmp	r1, #9
   1fd04:	d9f9      	bls.n	1fcfa <d_demangle_callback.constprop.0+0x19e>
   1fd06:	2b2e      	cmp	r3, #46	; 0x2e
   1fd08:	d0ec      	beq.n	1fce4 <d_demangle_callback.constprop.0+0x188>
   1fd0a:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
   1fd0e:	4299      	cmp	r1, r3
   1fd10:	61bc      	str	r4, [r7, #24]
   1fd12:	eba4 0006 	sub.w	r0, r4, r6
   1fd16:	da67      	bge.n	1fde8 <d_demangle_callback.constprop.0+0x28c>
   1fd18:	f8d7 c01c 	ldr.w	ip, [r7, #28]
   1fd1c:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
   1fd20:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   1fd24:	3101      	adds	r1, #1
   1fd26:	2800      	cmp	r0, #0
   1fd28:	e9c3 bb01 	strd	fp, fp, [r3, #4]
   1fd2c:	6239      	str	r1, [r7, #32]
   1fd2e:	dd5b      	ble.n	1fde8 <d_demangle_callback.constprop.0+0x28c>
   1fd30:	e9c3 bb01 	strd	fp, fp, [r3, #4]
   1fd34:	f80c b02e 	strb.w	fp, [ip, lr, lsl #2]
   1fd38:	e9c3 6003 	strd	r6, r0, [r3, #12]
   1fd3c:	214f      	movs	r1, #79	; 0x4f
   1fd3e:	f107 000c 	add.w	r0, r7, #12
   1fd42:	f7fa fbed 	bl	1a520 <d_make_comp>
   1fd46:	7823      	ldrb	r3, [r4, #0]
   1fd48:	2b2e      	cmp	r3, #46	; 0x2e
   1fd4a:	4602      	mov	r2, r0
   1fd4c:	f040 80c1 	bne.w	1fed2 <d_demangle_callback.constprop.0+0x376>
   1fd50:	4626      	mov	r6, r4
   1fd52:	7873      	ldrb	r3, [r6, #1]
   1fd54:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1fd58:	2919      	cmp	r1, #25
   1fd5a:	d8b9      	bhi.n	1fcd0 <d_demangle_callback.constprop.0+0x174>
   1fd5c:	1cb3      	adds	r3, r6, #2
   1fd5e:	461c      	mov	r4, r3
   1fd60:	f813 1b01 	ldrb.w	r1, [r3], #1
   1fd64:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
   1fd68:	2819      	cmp	r0, #25
   1fd6a:	d9f8      	bls.n	1fd5e <d_demangle_callback.constprop.0+0x202>
   1fd6c:	295f      	cmp	r1, #95	; 0x5f
   1fd6e:	d0f6      	beq.n	1fd5e <d_demangle_callback.constprop.0+0x202>
   1fd70:	e7b6      	b.n	1fce0 <d_demangle_callback.constprop.0+0x184>
   1fd72:	2600      	movs	r6, #0
   1fd74:	e760      	b.n	1fc38 <d_demangle_callback.constprop.0+0xdc>
   1fd76:	7b6b      	ldrb	r3, [r5, #13]
   1fd78:	f105 020d 	add.w	r2, r5, #13
   1fd7c:	2b47      	cmp	r3, #71	; 0x47
   1fd7e:	61ba      	str	r2, [r7, #24]
   1fd80:	f107 000c 	add.w	r0, r7, #12
   1fd84:	d001      	beq.n	1fd8a <d_demangle_callback.constprop.0+0x22e>
   1fd86:	2b54      	cmp	r3, #84	; 0x54
   1fd88:	d11d      	bne.n	1fdc6 <d_demangle_callback.constprop.0+0x26a>
   1fd8a:	f7fc fbef 	bl	1c56c <d_special_name>
   1fd8e:	69bc      	ldr	r4, [r7, #24]
   1fd90:	4606      	mov	r6, r0
   1fd92:	e751      	b.n	1fc38 <d_demangle_callback.constprop.0+0xdc>
   1fd94:	7a2b      	ldrb	r3, [r5, #8]
   1fd96:	2b2e      	cmp	r3, #46	; 0x2e
   1fd98:	d004      	beq.n	1fda4 <d_demangle_callback.constprop.0+0x248>
   1fd9a:	2b5f      	cmp	r3, #95	; 0x5f
   1fd9c:	d002      	beq.n	1fda4 <d_demangle_callback.constprop.0+0x248>
   1fd9e:	2b24      	cmp	r3, #36	; 0x24
   1fda0:	f47f aef1 	bne.w	1fb86 <d_demangle_callback.constprop.0+0x2a>
   1fda4:	7a6b      	ldrb	r3, [r5, #9]
   1fda6:	2b44      	cmp	r3, #68	; 0x44
   1fda8:	d002      	beq.n	1fdb0 <d_demangle_callback.constprop.0+0x254>
   1fdaa:	2b49      	cmp	r3, #73	; 0x49
   1fdac:	f47f aeeb 	bne.w	1fb86 <d_demangle_callback.constprop.0+0x2a>
   1fdb0:	7aaa      	ldrb	r2, [r5, #10]
   1fdb2:	2a5f      	cmp	r2, #95	; 0x5f
   1fdb4:	f47f aee7 	bne.w	1fb86 <d_demangle_callback.constprop.0+0x2a>
   1fdb8:	2b49      	cmp	r3, #73	; 0x49
   1fdba:	bf0c      	ite	eq
   1fdbc:	f04f 0902 	moveq.w	r9, #2
   1fdc0:	f04f 0903 	movne.w	r9, #3
   1fdc4:	e6e1      	b.n	1fb8a <d_demangle_callback.constprop.0+0x2e>
   1fdc6:	f7fc ff59 	bl	1cc7c <d_encoding.part.0>
   1fdca:	69bc      	ldr	r4, [r7, #24]
   1fdcc:	4606      	mov	r6, r0
   1fdce:	e733      	b.n	1fc38 <d_demangle_callback.constprop.0+0xdc>
   1fdd0:	f107 000c 	add.w	r0, r7, #12
   1fdd4:	f7fc fbca 	bl	1c56c <d_special_name>
   1fdd8:	697b      	ldr	r3, [r7, #20]
   1fdda:	07db      	lsls	r3, r3, #31
   1fddc:	4606      	mov	r6, r0
   1fdde:	f53f af69 	bmi.w	1fcb4 <d_demangle_callback.constprop.0+0x158>
   1fde2:	69bb      	ldr	r3, [r7, #24]
   1fde4:	781b      	ldrb	r3, [r3, #0]
   1fde6:	e736      	b.n	1fc56 <d_demangle_callback.constprop.0+0xfa>
   1fde8:	2300      	movs	r3, #0
   1fdea:	e7a7      	b.n	1fd3c <d_demangle_callback.constprop.0+0x1e0>
   1fdec:	2000      	movs	r0, #0
   1fdee:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1fdf2:	46c5      	mov	sp, r8
   1fdf4:	46bd      	mov	sp, r7
   1fdf6:	ecbd 8b02 	vpop	{d8}
   1fdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdfe:	7843      	ldrb	r3, [r0, #1]
   1fe00:	2b5a      	cmp	r3, #90	; 0x5a
   1fe02:	f47f aeb8 	bne.w	1fb76 <d_demangle_callback.constprop.0+0x1a>
   1fe06:	f04f 0901 	mov.w	r9, #1
   1fe0a:	e6be      	b.n	1fb8a <d_demangle_callback.constprop.0+0x2e>
   1fe0c:	4608      	mov	r0, r1
   1fe0e:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1fe12:	46bd      	mov	sp, r7
   1fe14:	ecbd 8b02 	vpop	{d8}
   1fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe1c:	20004e5c 	.word	0x20004e5c
   1fe20:	f107 044c 	add.w	r4, r7, #76	; 0x4c
   1fe24:	687a      	ldr	r2, [r7, #4]
   1fe26:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
   1fe2a:	4631      	mov	r1, r6
   1fe2c:	683a      	ldr	r2, [r7, #0]
   1fe2e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   1fe32:	4620      	mov	r0, r4
   1fe34:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
   1fe38:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
   1fe3c:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
   1fe40:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
   1fe44:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
   1fe48:	607b      	str	r3, [r7, #4]
   1fe4a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fe4e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1fe52:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1fe56:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1fe5a:	f7fa fc53 	bl	1a704 <d_count_templates_scopes>
   1fe5e:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1fe62:	687b      	ldr	r3, [r7, #4]
   1fe64:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1fe68:	da01      	bge.n	1fe6e <d_demangle_callback.constprop.0+0x312>
   1fe6a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1fe6e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   1fe72:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1fe76:	2901      	cmp	r1, #1
   1fe78:	fb01 f303 	mul.w	r3, r1, r3
   1fe7c:	4632      	mov	r2, r6
   1fe7e:	bfb8      	it	lt
   1fe80:	2101      	movlt	r1, #1
   1fe82:	466e      	mov	r6, sp
   1fe84:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
   1fe88:	2b01      	cmp	r3, #1
   1fe8a:	468d      	mov	sp, r1
   1fe8c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1fe90:	4668      	mov	r0, sp
   1fe92:	bfb8      	it	lt
   1fe94:	2301      	movlt	r3, #1
   1fe96:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   1fe9a:	469d      	mov	sp, r3
   1fe9c:	2500      	movs	r5, #0
   1fe9e:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
   1fea2:	4620      	mov	r0, r4
   1fea4:	2111      	movs	r1, #17
   1fea6:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
   1feaa:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
   1feae:	f7fe ffdb 	bl	1ee68 <d_print_comp>
   1feb2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1feb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1feba:	5465      	strb	r5, [r4, r1]
   1febc:	4620      	mov	r0, r4
   1febe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fec2:	46b5      	mov	sp, r6
   1fec4:	4798      	blx	r3
   1fec6:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1feca:	fab0 f080 	clz	r0, r0
   1fece:	0940      	lsrs	r0, r0, #5
   1fed0:	e78d      	b.n	1fdee <d_demangle_callback.constprop.0+0x292>
   1fed2:	4606      	mov	r6, r0
   1fed4:	e6bf      	b.n	1fc56 <d_demangle_callback.constprop.0+0xfa>
   1fed6:	4616      	mov	r6, r2
   1fed8:	e783      	b.n	1fde2 <d_demangle_callback.constprop.0+0x286>
   1feda:	bf00      	nop

0001fedc <d_print_subexpr>:
   1fedc:	b570      	push	{r4, r5, r6, lr}
   1fede:	7813      	ldrb	r3, [r2, #0]
   1fee0:	2b01      	cmp	r3, #1
   1fee2:	b082      	sub	sp, #8
   1fee4:	4615      	mov	r5, r2
   1fee6:	4604      	mov	r4, r0
   1fee8:	d903      	bls.n	1fef2 <d_print_subexpr+0x16>
   1feea:	2b31      	cmp	r3, #49	; 0x31
   1feec:	d001      	beq.n	1fef2 <d_print_subexpr+0x16>
   1feee:	2b06      	cmp	r3, #6
   1fef0:	d138      	bne.n	1ff64 <d_print_subexpr+0x88>
   1fef2:	2601      	movs	r6, #1
   1fef4:	686b      	ldr	r3, [r5, #4]
   1fef6:	2b01      	cmp	r3, #1
   1fef8:	dc22      	bgt.n	1ff40 <d_print_subexpr+0x64>
   1fefa:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1fefe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1ff02:	dc1d      	bgt.n	1ff40 <d_print_subexpr+0x64>
   1ff04:	3301      	adds	r3, #1
   1ff06:	3201      	adds	r2, #1
   1ff08:	606b      	str	r3, [r5, #4]
   1ff0a:	2111      	movs	r1, #17
   1ff0c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1ff10:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   1ff14:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
   1ff18:	462a      	mov	r2, r5
   1ff1a:	4620      	mov	r0, r4
   1ff1c:	9301      	str	r3, [sp, #4]
   1ff1e:	9500      	str	r5, [sp, #0]
   1ff20:	f7fc ff28 	bl	1cd74 <d_print_comp_inner>
   1ff24:	686a      	ldr	r2, [r5, #4]
   1ff26:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1ff2a:	9901      	ldr	r1, [sp, #4]
   1ff2c:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
   1ff30:	3a01      	subs	r2, #1
   1ff32:	3b01      	subs	r3, #1
   1ff34:	606a      	str	r2, [r5, #4]
   1ff36:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1ff3a:	b136      	cbz	r6, 1ff4a <d_print_subexpr+0x6e>
   1ff3c:	b002      	add	sp, #8
   1ff3e:	bd70      	pop	{r4, r5, r6, pc}
   1ff40:	2301      	movs	r3, #1
   1ff42:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1ff46:	2e00      	cmp	r6, #0
   1ff48:	d1f8      	bne.n	1ff3c <d_print_subexpr+0x60>
   1ff4a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ff4e:	29ff      	cmp	r1, #255	; 0xff
   1ff50:	d015      	beq.n	1ff7e <d_print_subexpr+0xa2>
   1ff52:	1c4a      	adds	r2, r1, #1
   1ff54:	2329      	movs	r3, #41	; 0x29
   1ff56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ff5a:	5463      	strb	r3, [r4, r1]
   1ff5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ff60:	b002      	add	sp, #8
   1ff62:	bd70      	pop	{r4, r5, r6, pc}
   1ff64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ff68:	29ff      	cmp	r1, #255	; 0xff
   1ff6a:	d016      	beq.n	1ff9a <d_print_subexpr+0xbe>
   1ff6c:	1c4a      	adds	r2, r1, #1
   1ff6e:	2328      	movs	r3, #40	; 0x28
   1ff70:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ff74:	2600      	movs	r6, #0
   1ff76:	5463      	strb	r3, [r4, r1]
   1ff78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ff7c:	e7ba      	b.n	1fef4 <d_print_subexpr+0x18>
   1ff7e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ff82:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1ff86:	4620      	mov	r0, r4
   1ff88:	4798      	blx	r3
   1ff8a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ff8e:	2201      	movs	r2, #1
   1ff90:	4413      	add	r3, r2
   1ff92:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ff96:	4631      	mov	r1, r6
   1ff98:	e7dc      	b.n	1ff54 <d_print_subexpr+0x78>
   1ff9a:	2600      	movs	r6, #0
   1ff9c:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1ffa0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1ffa4:	4798      	blx	r3
   1ffa6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ffaa:	2201      	movs	r2, #1
   1ffac:	4413      	add	r3, r2
   1ffae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ffb2:	4631      	mov	r1, r6
   1ffb4:	e7db      	b.n	1ff6e <d_print_subexpr+0x92>
   1ffb6:	bf00      	nop

0001ffb8 <d_maybe_print_fold_expression>:
   1ffb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffbc:	68d3      	ldr	r3, [r2, #12]
   1ffbe:	68db      	ldr	r3, [r3, #12]
   1ffc0:	681b      	ldr	r3, [r3, #0]
   1ffc2:	7819      	ldrb	r1, [r3, #0]
   1ffc4:	2966      	cmp	r1, #102	; 0x66
   1ffc6:	d178      	bne.n	200ba <d_maybe_print_fold_expression+0x102>
   1ffc8:	6912      	ldr	r2, [r2, #16]
   1ffca:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
   1ffce:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
   1ffd2:	f89a 2000 	ldrb.w	r2, [sl]
   1ffd6:	2a3c      	cmp	r2, #60	; 0x3c
   1ffd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ffdc:	bf08      	it	eq
   1ffde:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
   1ffe2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   1ffe6:	785b      	ldrb	r3, [r3, #1]
   1ffe8:	bf18      	it	ne
   1ffea:	f04f 0900 	movne.w	r9, #0
   1ffee:	2b6c      	cmp	r3, #108	; 0x6c
   1fff0:	4604      	mov	r4, r0
   1fff2:	f000 80a2 	beq.w	2013a <d_maybe_print_fold_expression+0x182>
   1fff6:	d863      	bhi.n	200c0 <d_maybe_print_fold_expression+0x108>
   1fff8:	2b4c      	cmp	r3, #76	; 0x4c
   1fffa:	d001      	beq.n	20000 <d_maybe_print_fold_expression+0x48>
   1fffc:	2b52      	cmp	r3, #82	; 0x52
   1fffe:	d157      	bne.n	200b0 <d_maybe_print_fold_expression+0xf8>
   20000:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20004:	29ff      	cmp	r1, #255	; 0xff
   20006:	f000 80eb 	beq.w	201e0 <d_maybe_print_fold_expression+0x228>
   2000a:	1c4b      	adds	r3, r1, #1
   2000c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   20010:	2328      	movs	r3, #40	; 0x28
   20012:	5463      	strb	r3, [r4, r1]
   20014:	4652      	mov	r2, sl
   20016:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   2001a:	2111      	movs	r1, #17
   2001c:	4620      	mov	r0, r4
   2001e:	4e78      	ldr	r6, [pc, #480]	; (20200 <d_maybe_print_fold_expression+0x248>)
   20020:	f7ff ff5c 	bl	1fedc <d_print_subexpr>
   20024:	2111      	movs	r1, #17
   20026:	4642      	mov	r2, r8
   20028:	4620      	mov	r0, r4
   2002a:	f7ff fd5b 	bl	1fae4 <d_print_expr_op>
   2002e:	f106 0b02 	add.w	fp, r6, #2
   20032:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20036:	252e      	movs	r5, #46	; 0x2e
   20038:	f04f 0a00 	mov.w	sl, #0
   2003c:	e00b      	b.n	20056 <d_maybe_print_fold_expression+0x9e>
   2003e:	460b      	mov	r3, r1
   20040:	455e      	cmp	r6, fp
   20042:	f101 0101 	add.w	r1, r1, #1
   20046:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2004a:	54e5      	strb	r5, [r4, r3]
   2004c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   20050:	d019      	beq.n	20086 <d_maybe_print_fold_expression+0xce>
   20052:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   20056:	29ff      	cmp	r1, #255	; 0xff
   20058:	d1f1      	bne.n	2003e <d_maybe_print_fold_expression+0x86>
   2005a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2005e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20062:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   20066:	4620      	mov	r0, r4
   20068:	4798      	blx	r3
   2006a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2006e:	3301      	adds	r3, #1
   20070:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20074:	2300      	movs	r3, #0
   20076:	2101      	movs	r1, #1
   20078:	455e      	cmp	r6, fp
   2007a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2007e:	54e5      	strb	r5, [r4, r3]
   20080:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   20084:	d1e5      	bne.n	20052 <d_maybe_print_fold_expression+0x9a>
   20086:	4642      	mov	r2, r8
   20088:	2111      	movs	r1, #17
   2008a:	4620      	mov	r0, r4
   2008c:	f7ff fd2a 	bl	1fae4 <d_print_expr_op>
   20090:	464a      	mov	r2, r9
   20092:	2111      	movs	r1, #17
   20094:	4620      	mov	r0, r4
   20096:	f7ff ff21 	bl	1fedc <d_print_subexpr>
   2009a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2009e:	29ff      	cmp	r1, #255	; 0xff
   200a0:	d07f      	beq.n	201a2 <d_maybe_print_fold_expression+0x1ea>
   200a2:	1c4a      	adds	r2, r1, #1
   200a4:	2329      	movs	r3, #41	; 0x29
   200a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   200aa:	5463      	strb	r3, [r4, r1]
   200ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   200b0:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   200b4:	2001      	movs	r0, #1
   200b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200ba:	2000      	movs	r0, #0
   200bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200c0:	2b72      	cmp	r3, #114	; 0x72
   200c2:	d1f5      	bne.n	200b0 <d_maybe_print_fold_expression+0xf8>
   200c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   200c8:	29ff      	cmp	r1, #255	; 0xff
   200ca:	d07b      	beq.n	201c4 <d_maybe_print_fold_expression+0x20c>
   200cc:	1c4b      	adds	r3, r1, #1
   200ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   200d2:	2328      	movs	r3, #40	; 0x28
   200d4:	5463      	strb	r3, [r4, r1]
   200d6:	4652      	mov	r2, sl
   200d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   200dc:	2111      	movs	r1, #17
   200de:	4620      	mov	r0, r4
   200e0:	4e48      	ldr	r6, [pc, #288]	; (20204 <d_maybe_print_fold_expression+0x24c>)
   200e2:	f7ff fefb 	bl	1fedc <d_print_subexpr>
   200e6:	4642      	mov	r2, r8
   200e8:	2111      	movs	r1, #17
   200ea:	4620      	mov	r0, r4
   200ec:	f7ff fcfa 	bl	1fae4 <d_print_expr_op>
   200f0:	f106 0903 	add.w	r9, r6, #3
   200f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   200f8:	252e      	movs	r5, #46	; 0x2e
   200fa:	f04f 0800 	mov.w	r8, #0
   200fe:	e00a      	b.n	20116 <d_maybe_print_fold_expression+0x15e>
   20100:	460b      	mov	r3, r1
   20102:	3101      	adds	r1, #1
   20104:	454e      	cmp	r6, r9
   20106:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2010a:	54e5      	strb	r5, [r4, r3]
   2010c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   20110:	d0ce      	beq.n	200b0 <d_maybe_print_fold_expression+0xf8>
   20112:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   20116:	29ff      	cmp	r1, #255	; 0xff
   20118:	d1f2      	bne.n	20100 <d_maybe_print_fold_expression+0x148>
   2011a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2011e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20122:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   20126:	4620      	mov	r0, r4
   20128:	4798      	blx	r3
   2012a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2012e:	3301      	adds	r3, #1
   20130:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20134:	2101      	movs	r1, #1
   20136:	2300      	movs	r3, #0
   20138:	e7e4      	b.n	20104 <d_maybe_print_fold_expression+0x14c>
   2013a:	4d33      	ldr	r5, [pc, #204]	; (20208 <d_maybe_print_fold_expression+0x250>)
   2013c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20140:	2628      	movs	r6, #40	; 0x28
   20142:	f105 0b03 	add.w	fp, r5, #3
   20146:	f04f 0900 	mov.w	r9, #0
   2014a:	e00b      	b.n	20164 <d_maybe_print_fold_expression+0x1ac>
   2014c:	460b      	mov	r3, r1
   2014e:	45ab      	cmp	fp, r5
   20150:	f101 0101 	add.w	r1, r1, #1
   20154:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20158:	54e6      	strb	r6, [r4, r3]
   2015a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2015e:	d019      	beq.n	20194 <d_maybe_print_fold_expression+0x1dc>
   20160:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   20164:	29ff      	cmp	r1, #255	; 0xff
   20166:	d1f1      	bne.n	2014c <d_maybe_print_fold_expression+0x194>
   20168:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2016c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20170:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   20174:	4620      	mov	r0, r4
   20176:	4798      	blx	r3
   20178:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2017c:	3301      	adds	r3, #1
   2017e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20182:	2300      	movs	r3, #0
   20184:	2101      	movs	r1, #1
   20186:	45ab      	cmp	fp, r5
   20188:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2018c:	54e6      	strb	r6, [r4, r3]
   2018e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   20192:	d1e5      	bne.n	20160 <d_maybe_print_fold_expression+0x1a8>
   20194:	4642      	mov	r2, r8
   20196:	2111      	movs	r1, #17
   20198:	4620      	mov	r0, r4
   2019a:	f7ff fca3 	bl	1fae4 <d_print_expr_op>
   2019e:	4652      	mov	r2, sl
   201a0:	e777      	b.n	20092 <d_maybe_print_fold_expression+0xda>
   201a2:	2500      	movs	r5, #0
   201a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   201a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   201ac:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   201b0:	4620      	mov	r0, r4
   201b2:	4798      	blx	r3
   201b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   201b8:	2201      	movs	r2, #1
   201ba:	4413      	add	r3, r2
   201bc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   201c0:	4629      	mov	r1, r5
   201c2:	e76f      	b.n	200a4 <d_maybe_print_fold_expression+0xec>
   201c4:	2500      	movs	r5, #0
   201c6:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   201ca:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   201ce:	4798      	blx	r3
   201d0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   201d4:	3301      	adds	r3, #1
   201d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   201da:	4629      	mov	r1, r5
   201dc:	2301      	movs	r3, #1
   201de:	e776      	b.n	200ce <d_maybe_print_fold_expression+0x116>
   201e0:	2500      	movs	r5, #0
   201e2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   201e6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   201ea:	4620      	mov	r0, r4
   201ec:	4798      	blx	r3
   201ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   201f2:	3301      	adds	r3, #1
   201f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   201f8:	4629      	mov	r1, r5
   201fa:	2301      	movs	r3, #1
   201fc:	e706      	b.n	2000c <d_maybe_print_fold_expression+0x54>
   201fe:	bf00      	nop
   20200:	20004d68 	.word	0x20004d68
   20204:	20004b34 	.word	0x20004b34
   20208:	20004b2c 	.word	0x20004b2c

0002020c <d_maybe_print_designated_init>:
   2020c:	7813      	ldrb	r3, [r2, #0]
   2020e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   20212:	2b38      	cmp	r3, #56	; 0x38
   20214:	d001      	beq.n	2021a <d_maybe_print_designated_init+0xe>
   20216:	2000      	movs	r0, #0
   20218:	4770      	bx	lr
   2021a:	68d3      	ldr	r3, [r2, #12]
   2021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20220:	68db      	ldr	r3, [r3, #12]
   20222:	681f      	ldr	r7, [r3, #0]
   20224:	783b      	ldrb	r3, [r7, #0]
   20226:	2b64      	cmp	r3, #100	; 0x64
   20228:	d002      	beq.n	20230 <d_maybe_print_designated_init+0x24>
   2022a:	2000      	movs	r0, #0
   2022c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20230:	787b      	ldrb	r3, [r7, #1]
   20232:	2b69      	cmp	r3, #105	; 0x69
   20234:	4604      	mov	r4, r0
   20236:	d011      	beq.n	2025c <d_maybe_print_designated_init+0x50>
   20238:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2023c:	2b58      	cmp	r3, #88	; 0x58
   2023e:	d1f4      	bne.n	2022a <d_maybe_print_designated_init+0x1e>
   20240:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20244:	6913      	ldr	r3, [r2, #16]
   20246:	29ff      	cmp	r1, #255	; 0xff
   20248:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
   2024c:	f000 808e 	beq.w	2036c <d_maybe_print_designated_init+0x160>
   20250:	1c4b      	adds	r3, r1, #1
   20252:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   20256:	235b      	movs	r3, #91	; 0x5b
   20258:	5463      	strb	r3, [r4, r1]
   2025a:	e00c      	b.n	20276 <d_maybe_print_designated_init+0x6a>
   2025c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20260:	6913      	ldr	r3, [r2, #16]
   20262:	29ff      	cmp	r1, #255	; 0xff
   20264:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
   20268:	f000 80b1 	beq.w	203ce <d_maybe_print_designated_init+0x1c2>
   2026c:	1c4b      	adds	r3, r1, #1
   2026e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   20272:	232e      	movs	r3, #46	; 0x2e
   20274:	5463      	strb	r3, [r4, r1]
   20276:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   2027a:	462a      	mov	r2, r5
   2027c:	2111      	movs	r1, #17
   2027e:	4620      	mov	r0, r4
   20280:	f7fe fdf2 	bl	1ee68 <d_print_comp>
   20284:	787b      	ldrb	r3, [r7, #1]
   20286:	2b58      	cmp	r3, #88	; 0x58
   20288:	d03a      	beq.n	20300 <d_maybe_print_designated_init+0xf4>
   2028a:	2b69      	cmp	r3, #105	; 0x69
   2028c:	d00b      	beq.n	202a6 <d_maybe_print_designated_init+0x9a>
   2028e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20292:	29ff      	cmp	r1, #255	; 0xff
   20294:	f000 808a 	beq.w	203ac <d_maybe_print_designated_init+0x1a0>
   20298:	1c4a      	adds	r2, r1, #1
   2029a:	235d      	movs	r3, #93	; 0x5d
   2029c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   202a0:	5463      	strb	r3, [r4, r1]
   202a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   202a6:	7833      	ldrb	r3, [r6, #0]
   202a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   202ac:	2b38      	cmp	r3, #56	; 0x38
   202ae:	d012      	beq.n	202d6 <d_maybe_print_designated_init+0xca>
   202b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   202b4:	29ff      	cmp	r1, #255	; 0xff
   202b6:	d068      	beq.n	2038a <d_maybe_print_designated_init+0x17e>
   202b8:	1c4a      	adds	r2, r1, #1
   202ba:	233d      	movs	r3, #61	; 0x3d
   202bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   202c0:	4620      	mov	r0, r4
   202c2:	5463      	strb	r3, [r4, r1]
   202c4:	4632      	mov	r2, r6
   202c6:	2111      	movs	r1, #17
   202c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   202cc:	f7ff fe06 	bl	1fedc <d_print_subexpr>
   202d0:	2001      	movs	r0, #1
   202d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   202d6:	68f3      	ldr	r3, [r6, #12]
   202d8:	68db      	ldr	r3, [r3, #12]
   202da:	681b      	ldr	r3, [r3, #0]
   202dc:	781a      	ldrb	r2, [r3, #0]
   202de:	2a64      	cmp	r2, #100	; 0x64
   202e0:	d1e6      	bne.n	202b0 <d_maybe_print_designated_init+0xa4>
   202e2:	785b      	ldrb	r3, [r3, #1]
   202e4:	2b69      	cmp	r3, #105	; 0x69
   202e6:	d003      	beq.n	202f0 <d_maybe_print_designated_init+0xe4>
   202e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   202ec:	2b58      	cmp	r3, #88	; 0x58
   202ee:	d1df      	bne.n	202b0 <d_maybe_print_designated_init+0xa4>
   202f0:	4620      	mov	r0, r4
   202f2:	4632      	mov	r2, r6
   202f4:	2111      	movs	r1, #17
   202f6:	f7fe fdb7 	bl	1ee68 <d_print_comp>
   202fa:	2001      	movs	r0, #1
   202fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20300:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 203ec <d_maybe_print_designated_init+0x1e0>
   20304:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20308:	f108 0a04 	add.w	sl, r8, #4
   2030c:	2520      	movs	r5, #32
   2030e:	f04f 0900 	mov.w	r9, #0
   20312:	e00b      	b.n	2032c <d_maybe_print_designated_init+0x120>
   20314:	460b      	mov	r3, r1
   20316:	45c2      	cmp	sl, r8
   20318:	f101 0101 	add.w	r1, r1, #1
   2031c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20320:	54e5      	strb	r5, [r4, r3]
   20322:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   20326:	d019      	beq.n	2035c <d_maybe_print_designated_init+0x150>
   20328:	f818 5f01 	ldrb.w	r5, [r8, #1]!
   2032c:	29ff      	cmp	r1, #255	; 0xff
   2032e:	d1f1      	bne.n	20314 <d_maybe_print_designated_init+0x108>
   20330:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20334:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20338:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   2033c:	4620      	mov	r0, r4
   2033e:	4798      	blx	r3
   20340:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20344:	3301      	adds	r3, #1
   20346:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2034a:	2300      	movs	r3, #0
   2034c:	2101      	movs	r1, #1
   2034e:	45c2      	cmp	sl, r8
   20350:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20354:	54e5      	strb	r5, [r4, r3]
   20356:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   2035a:	d1e5      	bne.n	20328 <d_maybe_print_designated_init+0x11c>
   2035c:	68f2      	ldr	r2, [r6, #12]
   2035e:	2111      	movs	r1, #17
   20360:	4620      	mov	r0, r4
   20362:	f7fe fd81 	bl	1ee68 <d_print_comp>
   20366:	6936      	ldr	r6, [r6, #16]
   20368:	787b      	ldrb	r3, [r7, #1]
   2036a:	e78e      	b.n	2028a <d_maybe_print_designated_init+0x7e>
   2036c:	f04f 0800 	mov.w	r8, #0
   20370:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   20374:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   20378:	4798      	blx	r3
   2037a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2037e:	3301      	adds	r3, #1
   20380:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20384:	4641      	mov	r1, r8
   20386:	2301      	movs	r3, #1
   20388:	e763      	b.n	20252 <d_maybe_print_designated_init+0x46>
   2038a:	2500      	movs	r5, #0
   2038c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20390:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20394:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   20398:	4620      	mov	r0, r4
   2039a:	4798      	blx	r3
   2039c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   203a0:	2201      	movs	r2, #1
   203a2:	4413      	add	r3, r2
   203a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   203a8:	4629      	mov	r1, r5
   203aa:	e786      	b.n	202ba <d_maybe_print_designated_init+0xae>
   203ac:	2500      	movs	r5, #0
   203ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   203b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   203b6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   203ba:	4620      	mov	r0, r4
   203bc:	4798      	blx	r3
   203be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   203c2:	2201      	movs	r2, #1
   203c4:	4413      	add	r3, r2
   203c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   203ca:	4629      	mov	r1, r5
   203cc:	e765      	b.n	2029a <d_maybe_print_designated_init+0x8e>
   203ce:	f04f 0800 	mov.w	r8, #0
   203d2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   203d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   203da:	4798      	blx	r3
   203dc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   203e0:	3301      	adds	r3, #1
   203e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   203e6:	4641      	mov	r1, r8
   203e8:	2301      	movs	r3, #1
   203ea:	e740      	b.n	2026e <d_maybe_print_designated_init+0x62>
   203ec:	20004b24 	.word	0x20004b24

000203f0 <__cxa_demangle>:
   203f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203f4:	461e      	mov	r6, r3
   203f6:	b084      	sub	sp, #16
   203f8:	2800      	cmp	r0, #0
   203fa:	d040      	beq.n	2047e <__cxa_demangle+0x8e>
   203fc:	460c      	mov	r4, r1
   203fe:	4615      	mov	r5, r2
   20400:	b109      	cbz	r1, 20406 <__cxa_demangle+0x16>
   20402:	2a00      	cmp	r2, #0
   20404:	d03b      	beq.n	2047e <__cxa_demangle+0x8e>
   20406:	2300      	movs	r3, #0
   20408:	4929      	ldr	r1, [pc, #164]	; (204b0 <__cxa_demangle+0xc0>)
   2040a:	466a      	mov	r2, sp
   2040c:	e9cd 3300 	strd	r3, r3, [sp]
   20410:	e9cd 3302 	strd	r3, r3, [sp, #8]
   20414:	f7ff fba2 	bl	1fb5c <d_demangle_callback.constprop.0>
   20418:	2800      	cmp	r0, #0
   2041a:	d039      	beq.n	20490 <__cxa_demangle+0xa0>
   2041c:	9b03      	ldr	r3, [sp, #12]
   2041e:	9f00      	ldr	r7, [sp, #0]
   20420:	b9d3      	cbnz	r3, 20458 <__cxa_demangle+0x68>
   20422:	f8dd 8008 	ldr.w	r8, [sp, #8]
   20426:	2f00      	cmp	r7, #0
   20428:	d03c      	beq.n	204a4 <__cxa_demangle+0xb4>
   2042a:	b32c      	cbz	r4, 20478 <__cxa_demangle+0x88>
   2042c:	4638      	mov	r0, r7
   2042e:	f006 fc27 	bl	26c80 <strlen>
   20432:	682b      	ldr	r3, [r5, #0]
   20434:	4298      	cmp	r0, r3
   20436:	d219      	bcs.n	2046c <__cxa_demangle+0x7c>
   20438:	4639      	mov	r1, r7
   2043a:	1c42      	adds	r2, r0, #1
   2043c:	4620      	mov	r0, r4
   2043e:	f7f8 fbab 	bl	18b98 <memcpy>
   20442:	4638      	mov	r0, r7
   20444:	f004 f84e 	bl	244e4 <free>
   20448:	4627      	mov	r7, r4
   2044a:	b10e      	cbz	r6, 20450 <__cxa_demangle+0x60>
   2044c:	2300      	movs	r3, #0
   2044e:	6033      	str	r3, [r6, #0]
   20450:	4638      	mov	r0, r7
   20452:	b004      	add	sp, #16
   20454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20458:	f04f 0801 	mov.w	r8, #1
   2045c:	2f00      	cmp	r7, #0
   2045e:	d1e4      	bne.n	2042a <__cxa_demangle+0x3a>
   20460:	b18e      	cbz	r6, 20486 <__cxa_demangle+0x96>
   20462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20466:	6033      	str	r3, [r6, #0]
   20468:	2700      	movs	r7, #0
   2046a:	e7f1      	b.n	20450 <__cxa_demangle+0x60>
   2046c:	4620      	mov	r0, r4
   2046e:	f004 f839 	bl	244e4 <free>
   20472:	f8c5 8000 	str.w	r8, [r5]
   20476:	e7e8      	b.n	2044a <__cxa_demangle+0x5a>
   20478:	2d00      	cmp	r5, #0
   2047a:	d1fa      	bne.n	20472 <__cxa_demangle+0x82>
   2047c:	e7e5      	b.n	2044a <__cxa_demangle+0x5a>
   2047e:	b116      	cbz	r6, 20486 <__cxa_demangle+0x96>
   20480:	f06f 0302 	mvn.w	r3, #2
   20484:	6033      	str	r3, [r6, #0]
   20486:	2700      	movs	r7, #0
   20488:	4638      	mov	r0, r7
   2048a:	b004      	add	sp, #16
   2048c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20490:	9800      	ldr	r0, [sp, #0]
   20492:	f004 f827 	bl	244e4 <free>
   20496:	2e00      	cmp	r6, #0
   20498:	d0f5      	beq.n	20486 <__cxa_demangle+0x96>
   2049a:	f06f 0301 	mvn.w	r3, #1
   2049e:	6033      	str	r3, [r6, #0]
   204a0:	2700      	movs	r7, #0
   204a2:	e7d5      	b.n	20450 <__cxa_demangle+0x60>
   204a4:	2e00      	cmp	r6, #0
   204a6:	d0ee      	beq.n	20486 <__cxa_demangle+0x96>
   204a8:	f1b8 0f01 	cmp.w	r8, #1
   204ac:	d0d9      	beq.n	20462 <__cxa_demangle+0x72>
   204ae:	e7f4      	b.n	2049a <__cxa_demangle+0xaa>
   204b0:	0001a859 	.word	0x0001a859

000204b4 <__cxa_end_cleanup>:
   204b4:	b41e      	push	{r1, r2, r3, r4}
   204b6:	f000 f88d 	bl	205d4 <__gnu_end_cleanup>
   204ba:	bc1e      	pop	{r1, r2, r3, r4}
   204bc:	f001 fd26 	bl	21f0c <_Unwind_Resume>

000204c0 <__cxa_type_match>:
   204c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   204c2:	7802      	ldrb	r2, [r0, #0]
   204c4:	2a47      	cmp	r2, #71	; 0x47
   204c6:	b083      	sub	sp, #12
   204c8:	460c      	mov	r4, r1
   204ca:	461d      	mov	r5, r3
   204cc:	d019      	beq.n	20502 <__cxa_type_match+0x42>
   204ce:	4e26      	ldr	r6, [pc, #152]	; (20568 <__cxa_type_match+0xa8>)
   204d0:	2000      	movs	r0, #0
   204d2:	6833      	ldr	r3, [r6, #0]
   204d4:	9001      	str	r0, [sp, #4]
   204d6:	689b      	ldr	r3, [r3, #8]
   204d8:	4630      	mov	r0, r6
   204da:	4798      	blx	r3
   204dc:	b178      	cbz	r0, 204fe <__cxa_type_match+0x3e>
   204de:	9b01      	ldr	r3, [sp, #4]
   204e0:	681b      	ldr	r3, [r3, #0]
   204e2:	9301      	str	r3, [sp, #4]
   204e4:	2702      	movs	r7, #2
   204e6:	6823      	ldr	r3, [r4, #0]
   204e8:	4631      	mov	r1, r6
   204ea:	4620      	mov	r0, r4
   204ec:	691e      	ldr	r6, [r3, #16]
   204ee:	aa01      	add	r2, sp, #4
   204f0:	2301      	movs	r3, #1
   204f2:	47b0      	blx	r6
   204f4:	bb10      	cbnz	r0, 2053c <__cxa_type_match+0x7c>
   204f6:	4607      	mov	r7, r0
   204f8:	4638      	mov	r0, r7
   204fa:	b003      	add	sp, #12
   204fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204fe:	2701      	movs	r7, #1
   20500:	e7f1      	b.n	204e6 <__cxa_type_match+0x26>
   20502:	7843      	ldrb	r3, [r0, #1]
   20504:	2b4e      	cmp	r3, #78	; 0x4e
   20506:	d1e2      	bne.n	204ce <__cxa_type_match+0xe>
   20508:	7883      	ldrb	r3, [r0, #2]
   2050a:	2b55      	cmp	r3, #85	; 0x55
   2050c:	d1df      	bne.n	204ce <__cxa_type_match+0xe>
   2050e:	78c3      	ldrb	r3, [r0, #3]
   20510:	2b43      	cmp	r3, #67	; 0x43
   20512:	d1dc      	bne.n	204ce <__cxa_type_match+0xe>
   20514:	7903      	ldrb	r3, [r0, #4]
   20516:	2b46      	cmp	r3, #70	; 0x46
   20518:	d01a      	beq.n	20550 <__cxa_type_match+0x90>
   2051a:	7903      	ldrb	r3, [r0, #4]
   2051c:	2b43      	cmp	r3, #67	; 0x43
   2051e:	d1d6      	bne.n	204ce <__cxa_type_match+0xe>
   20520:	7943      	ldrb	r3, [r0, #5]
   20522:	2b2b      	cmp	r3, #43	; 0x2b
   20524:	d1d3      	bne.n	204ce <__cxa_type_match+0xe>
   20526:	7983      	ldrb	r3, [r0, #6]
   20528:	2b2b      	cmp	r3, #43	; 0x2b
   2052a:	d1d0      	bne.n	204ce <__cxa_type_match+0xe>
   2052c:	79c3      	ldrb	r3, [r0, #7]
   2052e:	2b01      	cmp	r3, #1
   20530:	d8cd      	bhi.n	204ce <__cxa_type_match+0xe>
   20532:	d008      	beq.n	20546 <__cxa_type_match+0x86>
   20534:	f850 6c20 	ldr.w	r6, [r0, #-32]
   20538:	3058      	adds	r0, #88	; 0x58
   2053a:	e7ca      	b.n	204d2 <__cxa_type_match+0x12>
   2053c:	9b01      	ldr	r3, [sp, #4]
   2053e:	602b      	str	r3, [r5, #0]
   20540:	4638      	mov	r0, r7
   20542:	b003      	add	sp, #12
   20544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20546:	f850 0c20 	ldr.w	r0, [r0, #-32]
   2054a:	f850 6c78 	ldr.w	r6, [r0, #-120]
   2054e:	e7c0      	b.n	204d2 <__cxa_type_match+0x12>
   20550:	7943      	ldrb	r3, [r0, #5]
   20552:	2b4f      	cmp	r3, #79	; 0x4f
   20554:	d1e1      	bne.n	2051a <__cxa_type_match+0x5a>
   20556:	7983      	ldrb	r3, [r0, #6]
   20558:	2b52      	cmp	r3, #82	; 0x52
   2055a:	d1de      	bne.n	2051a <__cxa_type_match+0x5a>
   2055c:	79c3      	ldrb	r3, [r0, #7]
   2055e:	2b00      	cmp	r3, #0
   20560:	d1db      	bne.n	2051a <__cxa_type_match+0x5a>
   20562:	4e02      	ldr	r6, [pc, #8]	; (2056c <__cxa_type_match+0xac>)
   20564:	4618      	mov	r0, r3
   20566:	e7b4      	b.n	204d2 <__cxa_type_match+0x12>
   20568:	200029b4 	.word	0x200029b4
   2056c:	200029a0 	.word	0x200029a0

00020570 <__cxa_begin_cleanup>:
   20570:	b510      	push	{r4, lr}
   20572:	4604      	mov	r4, r0
   20574:	f000 f8fc 	bl	20770 <__cxa_get_globals>
   20578:	4622      	mov	r2, r4
   2057a:	f812 3920 	ldrb.w	r3, [r2], #-32
   2057e:	2b47      	cmp	r3, #71	; 0x47
   20580:	d004      	beq.n	2058c <__cxa_begin_cleanup+0x1c>
   20582:	6883      	ldr	r3, [r0, #8]
   20584:	bb23      	cbnz	r3, 205d0 <__cxa_begin_cleanup+0x60>
   20586:	6082      	str	r2, [r0, #8]
   20588:	2001      	movs	r0, #1
   2058a:	bd10      	pop	{r4, pc}
   2058c:	7863      	ldrb	r3, [r4, #1]
   2058e:	2b4e      	cmp	r3, #78	; 0x4e
   20590:	d1f7      	bne.n	20582 <__cxa_begin_cleanup+0x12>
   20592:	78a3      	ldrb	r3, [r4, #2]
   20594:	2b55      	cmp	r3, #85	; 0x55
   20596:	d1f4      	bne.n	20582 <__cxa_begin_cleanup+0x12>
   20598:	78e3      	ldrb	r3, [r4, #3]
   2059a:	2b43      	cmp	r3, #67	; 0x43
   2059c:	d1f1      	bne.n	20582 <__cxa_begin_cleanup+0x12>
   2059e:	7923      	ldrb	r3, [r4, #4]
   205a0:	2b43      	cmp	r3, #67	; 0x43
   205a2:	d1ee      	bne.n	20582 <__cxa_begin_cleanup+0x12>
   205a4:	7963      	ldrb	r3, [r4, #5]
   205a6:	2b2b      	cmp	r3, #43	; 0x2b
   205a8:	d1eb      	bne.n	20582 <__cxa_begin_cleanup+0x12>
   205aa:	79a3      	ldrb	r3, [r4, #6]
   205ac:	2b2b      	cmp	r3, #43	; 0x2b
   205ae:	d1e8      	bne.n	20582 <__cxa_begin_cleanup+0x12>
   205b0:	79e3      	ldrb	r3, [r4, #7]
   205b2:	2b01      	cmp	r3, #1
   205b4:	d8e5      	bhi.n	20582 <__cxa_begin_cleanup+0x12>
   205b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   205ba:	3301      	adds	r3, #1
   205bc:	2b01      	cmp	r3, #1
   205be:	f844 3c04 	str.w	r3, [r4, #-4]
   205c2:	d1e1      	bne.n	20588 <__cxa_begin_cleanup+0x18>
   205c4:	6883      	ldr	r3, [r0, #8]
   205c6:	f844 3c08 	str.w	r3, [r4, #-8]
   205ca:	6082      	str	r2, [r0, #8]
   205cc:	2001      	movs	r0, #1
   205ce:	bd10      	pop	{r4, pc}
   205d0:	f7f9 fef8 	bl	1a3c4 <std::terminate()>

000205d4 <__gnu_end_cleanup>:
   205d4:	b508      	push	{r3, lr}
   205d6:	f000 f8cb 	bl	20770 <__cxa_get_globals>
   205da:	6883      	ldr	r3, [r0, #8]
   205dc:	b383      	cbz	r3, 20640 <__gnu_end_cleanup+0x6c>
   205de:	f893 2020 	ldrb.w	r2, [r3, #32]
   205e2:	2a47      	cmp	r2, #71	; 0x47
   205e4:	d004      	beq.n	205f0 <__gnu_end_cleanup+0x1c>
   205e6:	2200      	movs	r2, #0
   205e8:	6082      	str	r2, [r0, #8]
   205ea:	f103 0020 	add.w	r0, r3, #32
   205ee:	bd08      	pop	{r3, pc}
   205f0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   205f4:	2a4e      	cmp	r2, #78	; 0x4e
   205f6:	d1f6      	bne.n	205e6 <__gnu_end_cleanup+0x12>
   205f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   205fc:	2a55      	cmp	r2, #85	; 0x55
   205fe:	d1f2      	bne.n	205e6 <__gnu_end_cleanup+0x12>
   20600:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   20604:	2a43      	cmp	r2, #67	; 0x43
   20606:	d1ee      	bne.n	205e6 <__gnu_end_cleanup+0x12>
   20608:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2060c:	2a43      	cmp	r2, #67	; 0x43
   2060e:	d1ea      	bne.n	205e6 <__gnu_end_cleanup+0x12>
   20610:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   20614:	2a2b      	cmp	r2, #43	; 0x2b
   20616:	d1e6      	bne.n	205e6 <__gnu_end_cleanup+0x12>
   20618:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   2061c:	2a2b      	cmp	r2, #43	; 0x2b
   2061e:	d1e2      	bne.n	205e6 <__gnu_end_cleanup+0x12>
   20620:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   20624:	2a01      	cmp	r2, #1
   20626:	d8de      	bhi.n	205e6 <__gnu_end_cleanup+0x12>
   20628:	69da      	ldr	r2, [r3, #28]
   2062a:	3a01      	subs	r2, #1
   2062c:	61da      	str	r2, [r3, #28]
   2062e:	2a00      	cmp	r2, #0
   20630:	d1db      	bne.n	205ea <__gnu_end_cleanup+0x16>
   20632:	6999      	ldr	r1, [r3, #24]
   20634:	6081      	str	r1, [r0, #8]
   20636:	2200      	movs	r2, #0
   20638:	619a      	str	r2, [r3, #24]
   2063a:	f103 0020 	add.w	r0, r3, #32
   2063e:	bd08      	pop	{r3, pc}
   20640:	f7f9 fec0 	bl	1a3c4 <std::terminate()>

00020644 <__cxa_begin_catch>:
   20644:	b538      	push	{r3, r4, r5, lr}
   20646:	4604      	mov	r4, r0
   20648:	f000 f892 	bl	20770 <__cxa_get_globals>
   2064c:	4622      	mov	r2, r4
   2064e:	6805      	ldr	r5, [r0, #0]
   20650:	f812 3920 	ldrb.w	r3, [r2], #-32
   20654:	2b47      	cmp	r3, #71	; 0x47
   20656:	d003      	beq.n	20660 <__cxa_begin_catch+0x1c>
   20658:	bb85      	cbnz	r5, 206bc <__cxa_begin_catch+0x78>
   2065a:	6002      	str	r2, [r0, #0]
   2065c:	4628      	mov	r0, r5
   2065e:	bd38      	pop	{r3, r4, r5, pc}
   20660:	7863      	ldrb	r3, [r4, #1]
   20662:	2b4e      	cmp	r3, #78	; 0x4e
   20664:	d1f8      	bne.n	20658 <__cxa_begin_catch+0x14>
   20666:	78a3      	ldrb	r3, [r4, #2]
   20668:	2b55      	cmp	r3, #85	; 0x55
   2066a:	d1f5      	bne.n	20658 <__cxa_begin_catch+0x14>
   2066c:	78e3      	ldrb	r3, [r4, #3]
   2066e:	2b43      	cmp	r3, #67	; 0x43
   20670:	d1f2      	bne.n	20658 <__cxa_begin_catch+0x14>
   20672:	7923      	ldrb	r3, [r4, #4]
   20674:	2b43      	cmp	r3, #67	; 0x43
   20676:	d1ef      	bne.n	20658 <__cxa_begin_catch+0x14>
   20678:	7963      	ldrb	r3, [r4, #5]
   2067a:	2b2b      	cmp	r3, #43	; 0x2b
   2067c:	d1ec      	bne.n	20658 <__cxa_begin_catch+0x14>
   2067e:	79a3      	ldrb	r3, [r4, #6]
   20680:	2b2b      	cmp	r3, #43	; 0x2b
   20682:	d1e9      	bne.n	20658 <__cxa_begin_catch+0x14>
   20684:	79e3      	ldrb	r3, [r4, #7]
   20686:	2b01      	cmp	r3, #1
   20688:	d8e6      	bhi.n	20658 <__cxa_begin_catch+0x14>
   2068a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2068e:	2b00      	cmp	r3, #0
   20690:	db11      	blt.n	206b6 <__cxa_begin_catch+0x72>
   20692:	3301      	adds	r3, #1
   20694:	f844 3c0c 	str.w	r3, [r4, #-12]
   20698:	6843      	ldr	r3, [r0, #4]
   2069a:	3b01      	subs	r3, #1
   2069c:	6043      	str	r3, [r0, #4]
   2069e:	4295      	cmp	r5, r2
   206a0:	bf18      	it	ne
   206a2:	f844 5c10 	strne.w	r5, [r4, #-16]
   206a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   206a8:	bf18      	it	ne
   206aa:	6002      	strne	r2, [r0, #0]
   206ac:	4620      	mov	r0, r4
   206ae:	f001 f853 	bl	21758 <_Unwind_Complete>
   206b2:	4628      	mov	r0, r5
   206b4:	bd38      	pop	{r3, r4, r5, pc}
   206b6:	f1c3 0301 	rsb	r3, r3, #1
   206ba:	e7eb      	b.n	20694 <__cxa_begin_catch+0x50>
   206bc:	f7f9 fe82 	bl	1a3c4 <std::terminate()>

000206c0 <__cxa_end_catch>:
   206c0:	b508      	push	{r3, lr}
   206c2:	f000 f851 	bl	20768 <__cxa_get_globals_fast>
   206c6:	6803      	ldr	r3, [r0, #0]
   206c8:	b37b      	cbz	r3, 2072a <__cxa_end_catch+0x6a>
   206ca:	f893 2020 	ldrb.w	r2, [r3, #32]
   206ce:	2a47      	cmp	r2, #71	; 0x47
   206d0:	d007      	beq.n	206e2 <__cxa_end_catch+0x22>
   206d2:	2200      	movs	r2, #0
   206d4:	6002      	str	r2, [r0, #0]
   206d6:	f103 0020 	add.w	r0, r3, #32
   206da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   206de:	f001 b83d 	b.w	2175c <_Unwind_DeleteException>
   206e2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   206e6:	2a4e      	cmp	r2, #78	; 0x4e
   206e8:	d1f3      	bne.n	206d2 <__cxa_end_catch+0x12>
   206ea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   206ee:	2a55      	cmp	r2, #85	; 0x55
   206f0:	d1ef      	bne.n	206d2 <__cxa_end_catch+0x12>
   206f2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   206f6:	2a43      	cmp	r2, #67	; 0x43
   206f8:	d1eb      	bne.n	206d2 <__cxa_end_catch+0x12>
   206fa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   206fe:	2a43      	cmp	r2, #67	; 0x43
   20700:	d1e7      	bne.n	206d2 <__cxa_end_catch+0x12>
   20702:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   20706:	2a2b      	cmp	r2, #43	; 0x2b
   20708:	d1e3      	bne.n	206d2 <__cxa_end_catch+0x12>
   2070a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   2070e:	2a2b      	cmp	r2, #43	; 0x2b
   20710:	d1df      	bne.n	206d2 <__cxa_end_catch+0x12>
   20712:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   20716:	2a01      	cmp	r2, #1
   20718:	d8db      	bhi.n	206d2 <__cxa_end_catch+0x12>
   2071a:	695a      	ldr	r2, [r3, #20]
   2071c:	2a00      	cmp	r2, #0
   2071e:	db05      	blt.n	2072c <__cxa_end_catch+0x6c>
   20720:	3a01      	subs	r2, #1
   20722:	d008      	beq.n	20736 <__cxa_end_catch+0x76>
   20724:	1c51      	adds	r1, r2, #1
   20726:	d00e      	beq.n	20746 <__cxa_end_catch+0x86>
   20728:	615a      	str	r2, [r3, #20]
   2072a:	bd08      	pop	{r3, pc}
   2072c:	3201      	adds	r2, #1
   2072e:	d1fb      	bne.n	20728 <__cxa_end_catch+0x68>
   20730:	6919      	ldr	r1, [r3, #16]
   20732:	6001      	str	r1, [r0, #0]
   20734:	e7f8      	b.n	20728 <__cxa_end_catch+0x68>
   20736:	691a      	ldr	r2, [r3, #16]
   20738:	6002      	str	r2, [r0, #0]
   2073a:	f103 0020 	add.w	r0, r3, #32
   2073e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20742:	f001 b80b 	b.w	2175c <_Unwind_DeleteException>
   20746:	f7f9 fe3d 	bl	1a3c4 <std::terminate()>
   2074a:	bf00      	nop

0002074c <std::bad_exception::~bad_exception()>:
   2074c:	4770      	bx	lr
   2074e:	bf00      	nop

00020750 <transaction clone for std::bad_exception::what() const>:
   20750:	4800      	ldr	r0, [pc, #0]	; (20754 <transaction clone for std::bad_exception::what() const+0x4>)
   20752:	4770      	bx	lr
   20754:	20002988 	.word	0x20002988

00020758 <std::bad_exception::~bad_exception()>:
   20758:	b510      	push	{r4, lr}
   2075a:	2104      	movs	r1, #4
   2075c:	4604      	mov	r4, r0
   2075e:	f7f8 fab7 	bl	18cd0 <operator delete(void*, unsigned int)>
   20762:	4620      	mov	r0, r4
   20764:	bd10      	pop	{r4, pc}
   20766:	bf00      	nop

00020768 <__cxa_get_globals_fast>:
   20768:	4800      	ldr	r0, [pc, #0]	; (2076c <__cxa_get_globals_fast+0x4>)
   2076a:	4770      	bx	lr
   2076c:	2000ba2c 	.word	0x2000ba2c

00020770 <__cxa_get_globals>:
   20770:	4800      	ldr	r0, [pc, #0]	; (20774 <__cxa_get_globals+0x4>)
   20772:	4770      	bx	lr
   20774:	2000ba2c 	.word	0x2000ba2c

00020778 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
   20778:	2850      	cmp	r0, #80	; 0x50
   2077a:	b570      	push	{r4, r5, r6, lr}
   2077c:	d01d      	beq.n	207ba <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x42>
   2077e:	4684      	mov	ip, r0
   20780:	f000 000f 	and.w	r0, r0, #15
   20784:	280c      	cmp	r0, #12
   20786:	d855      	bhi.n	20834 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xbc>
   20788:	e8df f000 	tbb	[pc, r0]
   2078c:	07264407 	.word	0x07264407
   20790:	5454541e 	.word	0x5454541e
   20794:	07222a54 	.word	0x07222a54
   20798:	1e          	.byte	0x1e
   20799:	00          	.byte	0x00
   2079a:	4610      	mov	r0, r2
   2079c:	f850 6b04 	ldr.w	r6, [r0], #4
   207a0:	b14e      	cbz	r6, 207b6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x3e>
   207a2:	f00c 0470 	and.w	r4, ip, #112	; 0x70
   207a6:	2c10      	cmp	r4, #16
   207a8:	bf08      	it	eq
   207aa:	4611      	moveq	r1, r2
   207ac:	440e      	add	r6, r1
   207ae:	f01c 0f80 	tst.w	ip, #128	; 0x80
   207b2:	bf18      	it	ne
   207b4:	6836      	ldrne	r6, [r6, #0]
   207b6:	601e      	str	r6, [r3, #0]
   207b8:	bd70      	pop	{r4, r5, r6, pc}
   207ba:	1cd0      	adds	r0, r2, #3
   207bc:	f020 0003 	bic.w	r0, r0, #3
   207c0:	f850 6b04 	ldr.w	r6, [r0], #4
   207c4:	601e      	str	r6, [r3, #0]
   207c6:	bd70      	pop	{r4, r5, r6, pc}
   207c8:	4610      	mov	r0, r2
   207ca:	f850 6b08 	ldr.w	r6, [r0], #8
   207ce:	e7e7      	b.n	207a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   207d0:	4610      	mov	r0, r2
   207d2:	f930 6b02 	ldrsh.w	r6, [r0], #2
   207d6:	e7e3      	b.n	207a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   207d8:	4610      	mov	r0, r2
   207da:	f830 6b02 	ldrh.w	r6, [r0], #2
   207de:	e7df      	b.n	207a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   207e0:	2600      	movs	r6, #0
   207e2:	4610      	mov	r0, r2
   207e4:	4634      	mov	r4, r6
   207e6:	f810 5b01 	ldrb.w	r5, [r0], #1
   207ea:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   207ee:	fa0e fe04 	lsl.w	lr, lr, r4
   207f2:	f015 0f80 	tst.w	r5, #128	; 0x80
   207f6:	ea46 060e 	orr.w	r6, r6, lr
   207fa:	f104 0407 	add.w	r4, r4, #7
   207fe:	d1f2      	bne.n	207e6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
   20800:	2c1f      	cmp	r4, #31
   20802:	d8cd      	bhi.n	207a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   20804:	066d      	lsls	r5, r5, #25
   20806:	d5cb      	bpl.n	207a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   20808:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2080c:	fa05 f404 	lsl.w	r4, r5, r4
   20810:	4326      	orrs	r6, r4
   20812:	e7c6      	b.n	207a2 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2a>
   20814:	2600      	movs	r6, #0
   20816:	4610      	mov	r0, r2
   20818:	4634      	mov	r4, r6
   2081a:	f810 5b01 	ldrb.w	r5, [r0], #1
   2081e:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   20822:	fa0e fe04 	lsl.w	lr, lr, r4
   20826:	062d      	lsls	r5, r5, #24
   20828:	ea46 060e 	orr.w	r6, r6, lr
   2082c:	f104 0407 	add.w	r4, r4, #7
   20830:	d4f3      	bmi.n	2081a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xa2>
   20832:	e7b5      	b.n	207a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   20834:	f7f8 fb40 	bl	18eb8 <abort>

00020838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
   20838:	28ff      	cmp	r0, #255	; 0xff
   2083a:	b508      	push	{r3, lr}
   2083c:	4603      	mov	r3, r0
   2083e:	d019      	beq.n	20874 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
   20840:	f003 0270 	and.w	r2, r3, #112	; 0x70
   20844:	2a30      	cmp	r2, #48	; 0x30
   20846:	4608      	mov	r0, r1
   20848:	d016      	beq.n	20878 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
   2084a:	d805      	bhi.n	20858 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
   2084c:	2a20      	cmp	r2, #32
   2084e:	d109      	bne.n	20864 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2c>
   20850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20854:	f001 bd3d 	b.w	222d2 <_Unwind_GetTextRelBase>
   20858:	2a40      	cmp	r2, #64	; 0x40
   2085a:	d109      	bne.n	20870 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
   2085c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20860:	f001 bd24 	b.w	222ac <_Unwind_GetRegionStart>
   20864:	d802      	bhi.n	2086c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
   20866:	f013 0f60 	tst.w	r3, #96	; 0x60
   2086a:	d003      	beq.n	20874 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
   2086c:	f7f8 fb24 	bl	18eb8 <abort>
   20870:	2a50      	cmp	r2, #80	; 0x50
   20872:	d1fb      	bne.n	2086c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
   20874:	2000      	movs	r0, #0
   20876:	bd08      	pop	{r3, pc}
   20878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2087c:	f001 bd26 	b.w	222cc <_Unwind_GetDataRelBase>

00020880 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
   20880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20882:	460c      	mov	r4, r1
   20884:	4615      	mov	r5, r2
   20886:	4606      	mov	r6, r0
   20888:	b108      	cbz	r0, 2088e <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0xe>
   2088a:	f001 fd0f 	bl	222ac <_Unwind_GetRegionStart>
   2088e:	6028      	str	r0, [r5, #0]
   20890:	f814 7b01 	ldrb.w	r7, [r4], #1
   20894:	2fff      	cmp	r7, #255	; 0xff
   20896:	d128      	bne.n	208ea <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x6a>
   20898:	6068      	str	r0, [r5, #4]
   2089a:	4620      	mov	r0, r4
   2089c:	f810 3b01 	ldrb.w	r3, [r0], #1
   208a0:	2bff      	cmp	r3, #255	; 0xff
   208a2:	d032      	beq.n	2090a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x8a>
   208a4:	2310      	movs	r3, #16
   208a6:	2400      	movs	r4, #0
   208a8:	752b      	strb	r3, [r5, #20]
   208aa:	4622      	mov	r2, r4
   208ac:	f810 1b01 	ldrb.w	r1, [r0], #1
   208b0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   208b4:	4093      	lsls	r3, r2
   208b6:	0609      	lsls	r1, r1, #24
   208b8:	ea44 0403 	orr.w	r4, r4, r3
   208bc:	f102 0207 	add.w	r2, r2, #7
   208c0:	d4f4      	bmi.n	208ac <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x2c>
   208c2:	4404      	add	r4, r0
   208c4:	60ec      	str	r4, [r5, #12]
   208c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   208ca:	756b      	strb	r3, [r5, #21]
   208cc:	2400      	movs	r4, #0
   208ce:	4622      	mov	r2, r4
   208d0:	f810 1b01 	ldrb.w	r1, [r0], #1
   208d4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   208d8:	4093      	lsls	r3, r2
   208da:	431c      	orrs	r4, r3
   208dc:	060b      	lsls	r3, r1, #24
   208de:	f102 0207 	add.w	r2, r2, #7
   208e2:	d4f5      	bmi.n	208d0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x50>
   208e4:	4404      	add	r4, r0
   208e6:	612c      	str	r4, [r5, #16]
   208e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   208ea:	4631      	mov	r1, r6
   208ec:	4638      	mov	r0, r7
   208ee:	f7ff ffa3 	bl	20838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   208f2:	4622      	mov	r2, r4
   208f4:	4601      	mov	r1, r0
   208f6:	1d2b      	adds	r3, r5, #4
   208f8:	4638      	mov	r0, r7
   208fa:	f7ff ff3d 	bl	20778 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   208fe:	4604      	mov	r4, r0
   20900:	4620      	mov	r0, r4
   20902:	f810 3b01 	ldrb.w	r3, [r0], #1
   20906:	2bff      	cmp	r3, #255	; 0xff
   20908:	d1cc      	bne.n	208a4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x24>
   2090a:	752b      	strb	r3, [r5, #20]
   2090c:	2400      	movs	r4, #0
   2090e:	e7d9      	b.n	208c4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>

00020910 <__gxx_personality_v0>:
   20910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20914:	f000 0403 	and.w	r4, r0, #3
   20918:	b093      	sub	sp, #76	; 0x4c
   2091a:	2300      	movs	r3, #0
   2091c:	2c01      	cmp	r4, #1
   2091e:	9308      	str	r3, [sp, #32]
   20920:	460f      	mov	r7, r1
   20922:	4690      	mov	r8, r2
   20924:	d013      	beq.n	2094e <__gxx_personality_v0+0x3e>
   20926:	2c02      	cmp	r4, #2
   20928:	d108      	bne.n	2093c <__gxx_personality_v0+0x2c>
   2092a:	4641      	mov	r1, r8
   2092c:	4638      	mov	r0, r7
   2092e:	f001 fca7 	bl	22280 <__gnu_unwind_frame>
   20932:	b940      	cbnz	r0, 20946 <__gxx_personality_v0+0x36>
   20934:	2008      	movs	r0, #8
   20936:	b013      	add	sp, #76	; 0x4c
   20938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2093c:	2c00      	cmp	r4, #0
   2093e:	f000 8093 	beq.w	20a68 <__gxx_personality_v0+0x158>
   20942:	f7f8 fab9 	bl	18eb8 <abort>
   20946:	2009      	movs	r0, #9
   20948:	b013      	add	sp, #76	; 0x4c
   2094a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2094e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   20952:	f010 0408 	ands.w	r4, r0, #8
   20956:	f8cd a000 	str.w	sl, [sp]
   2095a:	f000 809a 	beq.w	20a92 <__gxx_personality_v0+0x182>
   2095e:	f044 0202 	orr.w	r2, r4, #2
   20962:	9202      	str	r2, [sp, #8]
   20964:	910c      	str	r1, [sp, #48]	; 0x30
   20966:	220c      	movs	r2, #12
   20968:	4619      	mov	r1, r3
   2096a:	4640      	mov	r0, r8
   2096c:	f000 ff22 	bl	217b4 <_Unwind_VRS_Set>
   20970:	4640      	mov	r0, r8
   20972:	f001 fca1 	bl	222b8 <_Unwind_GetLanguageSpecificData>
   20976:	4683      	mov	fp, r0
   20978:	2800      	cmp	r0, #0
   2097a:	d0d6      	beq.n	2092a <__gxx_personality_v0+0x1a>
   2097c:	4652      	mov	r2, sl
   2097e:	4601      	mov	r1, r0
   20980:	4640      	mov	r0, r8
   20982:	f7ff ff7d 	bl	20880 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
   20986:	4641      	mov	r1, r8
   20988:	4605      	mov	r5, r0
   2098a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   2098e:	f7ff ff53 	bl	20838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   20992:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   20996:	2300      	movs	r3, #0
   20998:	900e      	str	r0, [sp, #56]	; 0x38
   2099a:	4619      	mov	r1, r3
   2099c:	f8cd 9000 	str.w	r9, [sp]
   209a0:	220f      	movs	r2, #15
   209a2:	4640      	mov	r0, r8
   209a4:	f000 fee0 	bl	21768 <_Unwind_VRS_Get>
   209a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   209aa:	f023 0301 	bic.w	r3, r3, #1
   209ae:	1e5e      	subs	r6, r3, #1
   209b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   209b2:	429d      	cmp	r5, r3
   209b4:	f080 80bd 	bcs.w	20b32 <__gxx_personality_v0+0x222>
   209b8:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
   209bc:	2100      	movs	r1, #0
   209be:	4620      	mov	r0, r4
   209c0:	f7ff ff3a 	bl	20838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   209c4:	462a      	mov	r2, r5
   209c6:	4601      	mov	r1, r0
   209c8:	ab09      	add	r3, sp, #36	; 0x24
   209ca:	4620      	mov	r0, r4
   209cc:	f7ff fed4 	bl	20778 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   209d0:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   209d4:	4604      	mov	r4, r0
   209d6:	2100      	movs	r1, #0
   209d8:	4628      	mov	r0, r5
   209da:	f7ff ff2d 	bl	20838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   209de:	4622      	mov	r2, r4
   209e0:	4601      	mov	r1, r0
   209e2:	ab0a      	add	r3, sp, #40	; 0x28
   209e4:	4628      	mov	r0, r5
   209e6:	f7ff fec7 	bl	20778 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   209ea:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   209ee:	4604      	mov	r4, r0
   209f0:	2100      	movs	r1, #0
   209f2:	4628      	mov	r0, r5
   209f4:	f7ff ff20 	bl	20838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   209f8:	4622      	mov	r2, r4
   209fa:	4601      	mov	r1, r0
   209fc:	464b      	mov	r3, r9
   209fe:	4628      	mov	r0, r5
   20a00:	f7ff feba 	bl	20778 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   20a04:	2400      	movs	r4, #0
   20a06:	4605      	mov	r5, r0
   20a08:	4622      	mov	r2, r4
   20a0a:	f815 1b01 	ldrb.w	r1, [r5], #1
   20a0e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   20a12:	4093      	lsls	r3, r2
   20a14:	431c      	orrs	r4, r3
   20a16:	060b      	lsls	r3, r1, #24
   20a18:	f102 0207 	add.w	r2, r2, #7
   20a1c:	d4f5      	bmi.n	20a0a <__gxx_personality_v0+0xfa>
   20a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20a22:	4413      	add	r3, r2
   20a24:	42b3      	cmp	r3, r6
   20a26:	d917      	bls.n	20a58 <__gxx_personality_v0+0x148>
   20a28:	9b02      	ldr	r3, [sp, #8]
   20a2a:	07d8      	lsls	r0, r3, #31
   20a2c:	d52d      	bpl.n	20a8a <__gxx_personality_v0+0x17a>
   20a2e:	2400      	movs	r4, #0
   20a30:	9403      	str	r4, [sp, #12]
   20a32:	2300      	movs	r3, #0
   20a34:	4619      	mov	r1, r3
   20a36:	f8cd 9000 	str.w	r9, [sp]
   20a3a:	4640      	mov	r0, r8
   20a3c:	220d      	movs	r2, #13
   20a3e:	9d08      	ldr	r5, [sp, #32]
   20a40:	f000 fe92 	bl	21768 <_Unwind_VRS_Get>
   20a44:	9b03      	ldr	r3, [sp, #12]
   20a46:	633b      	str	r3, [r7, #48]	; 0x30
   20a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20a4a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   20a4e:	e9c7 5409 	strd	r5, r4, [r7, #36]	; 0x24
   20a52:	2006      	movs	r0, #6
   20a54:	623b      	str	r3, [r7, #32]
   20a56:	e76e      	b.n	20936 <__gxx_personality_v0+0x26>
   20a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20a5a:	4413      	add	r3, r2
   20a5c:	42b3      	cmp	r3, r6
   20a5e:	d872      	bhi.n	20b46 <__gxx_personality_v0+0x236>
   20a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20a62:	42ab      	cmp	r3, r5
   20a64:	d8a8      	bhi.n	209b8 <__gxx_personality_v0+0xa8>
   20a66:	e7df      	b.n	20a28 <__gxx_personality_v0+0x118>
   20a68:	0702      	lsls	r2, r0, #28
   20a6a:	f53f af5e 	bmi.w	2092a <__gxx_personality_v0+0x1a>
   20a6e:	2301      	movs	r3, #1
   20a70:	9302      	str	r3, [sp, #8]
   20a72:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   20a76:	2300      	movs	r3, #0
   20a78:	f8cd a000 	str.w	sl, [sp]
   20a7c:	220c      	movs	r2, #12
   20a7e:	4619      	mov	r1, r3
   20a80:	4640      	mov	r0, r8
   20a82:	970c      	str	r7, [sp, #48]	; 0x30
   20a84:	f000 fe96 	bl	217b4 <_Unwind_VRS_Set>
   20a88:	e772      	b.n	20970 <__gxx_personality_v0+0x60>
   20a8a:	0719      	lsls	r1, r3, #28
   20a8c:	d558      	bpl.n	20b40 <__gxx_personality_v0+0x230>
   20a8e:	f7f9 fc99 	bl	1a3c4 <std::terminate()>
   20a92:	6a0d      	ldr	r5, [r1, #32]
   20a94:	4623      	mov	r3, r4
   20a96:	220d      	movs	r2, #13
   20a98:	4621      	mov	r1, r4
   20a9a:	4640      	mov	r0, r8
   20a9c:	f000 fe64 	bl	21768 <_Unwind_VRS_Get>
   20aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20aa2:	429d      	cmp	r5, r3
   20aa4:	d002      	beq.n	20aac <__gxx_personality_v0+0x19c>
   20aa6:	2302      	movs	r3, #2
   20aa8:	9302      	str	r3, [sp, #8]
   20aaa:	e7e4      	b.n	20a76 <__gxx_personality_v0+0x166>
   20aac:	4623      	mov	r3, r4
   20aae:	4621      	mov	r1, r4
   20ab0:	220c      	movs	r2, #12
   20ab2:	f8cd a000 	str.w	sl, [sp]
   20ab6:	4640      	mov	r0, r8
   20ab8:	970c      	str	r7, [sp, #48]	; 0x30
   20aba:	f000 fe7b 	bl	217b4 <_Unwind_VRS_Set>
   20abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20ac0:	9203      	str	r2, [sp, #12]
   20ac2:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	; 0x28
   20ac6:	2a00      	cmp	r2, #0
   20ac8:	d03a      	beq.n	20b40 <__gxx_personality_v0+0x230>
   20aca:	469b      	mov	fp, r3
   20acc:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   20ad0:	2c00      	cmp	r4, #0
   20ad2:	db54      	blt.n	20b7e <__gxx_personality_v0+0x26e>
   20ad4:	2503      	movs	r5, #3
   20ad6:	2300      	movs	r3, #0
   20ad8:	461a      	mov	r2, r3
   20ada:	4619      	mov	r1, r3
   20adc:	f8cd 9000 	str.w	r9, [sp]
   20ae0:	4640      	mov	r0, r8
   20ae2:	970b      	str	r7, [sp, #44]	; 0x2c
   20ae4:	f000 fe66 	bl	217b4 <_Unwind_VRS_Set>
   20ae8:	2300      	movs	r3, #0
   20aea:	4619      	mov	r1, r3
   20aec:	2201      	movs	r2, #1
   20aee:	f8cd 9000 	str.w	r9, [sp]
   20af2:	4640      	mov	r0, r8
   20af4:	940b      	str	r4, [sp, #44]	; 0x2c
   20af6:	f000 fe5d 	bl	217b4 <_Unwind_VRS_Set>
   20afa:	2300      	movs	r3, #0
   20afc:	4619      	mov	r1, r3
   20afe:	220f      	movs	r2, #15
   20b00:	f8cd 9000 	str.w	r9, [sp]
   20b04:	4640      	mov	r0, r8
   20b06:	f000 fe2f 	bl	21768 <_Unwind_VRS_Get>
   20b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20b0c:	9903      	ldr	r1, [sp, #12]
   20b0e:	f8cd 9000 	str.w	r9, [sp]
   20b12:	f002 0201 	and.w	r2, r2, #1
   20b16:	430a      	orrs	r2, r1
   20b18:	2300      	movs	r3, #0
   20b1a:	920b      	str	r2, [sp, #44]	; 0x2c
   20b1c:	4640      	mov	r0, r8
   20b1e:	220f      	movs	r2, #15
   20b20:	4619      	mov	r1, r3
   20b22:	f000 fe47 	bl	217b4 <_Unwind_VRS_Set>
   20b26:	2d02      	cmp	r5, #2
   20b28:	d024      	beq.n	20b74 <__gxx_personality_v0+0x264>
   20b2a:	2007      	movs	r0, #7
   20b2c:	b013      	add	sp, #76	; 0x4c
   20b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b32:	9b02      	ldr	r3, [sp, #8]
   20b34:	07de      	lsls	r6, r3, #31
   20b36:	f53f af7a 	bmi.w	20a2e <__gxx_personality_v0+0x11e>
   20b3a:	9b02      	ldr	r3, [sp, #8]
   20b3c:	071b      	lsls	r3, r3, #28
   20b3e:	d4a6      	bmi.n	20a8e <__gxx_personality_v0+0x17e>
   20b40:	4638      	mov	r0, r7
   20b42:	f000 fbcf 	bl	212e4 <__cxa_call_terminate>
   20b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20b48:	2b00      	cmp	r3, #0
   20b4a:	f43f aeee 	beq.w	2092a <__gxx_personality_v0+0x1a>
   20b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20b50:	4413      	add	r3, r2
   20b52:	9303      	str	r3, [sp, #12]
   20b54:	2c00      	cmp	r4, #0
   20b56:	d136      	bne.n	20bc6 <__gxx_personality_v0+0x2b6>
   20b58:	2b00      	cmp	r3, #0
   20b5a:	f43f aee6 	beq.w	2092a <__gxx_personality_v0+0x1a>
   20b5e:	9b02      	ldr	r3, [sp, #8]
   20b60:	07dd      	lsls	r5, r3, #31
   20b62:	f53f aee2 	bmi.w	2092a <__gxx_personality_v0+0x1a>
   20b66:	9b02      	ldr	r3, [sp, #8]
   20b68:	071a      	lsls	r2, r3, #28
   20b6a:	f140 8116 	bpl.w	20d9a <__gxx_personality_v0+0x48a>
   20b6e:	2400      	movs	r4, #0
   20b70:	2502      	movs	r5, #2
   20b72:	e7b0      	b.n	20ad6 <__gxx_personality_v0+0x1c6>
   20b74:	4638      	mov	r0, r7
   20b76:	f7ff fcfb 	bl	20570 <__cxa_begin_cleanup>
   20b7a:	2007      	movs	r0, #7
   20b7c:	e6db      	b.n	20936 <__gxx_personality_v0+0x26>
   20b7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   20b82:	1b1b      	subs	r3, r3, r4
   20b84:	461e      	mov	r6, r3
   20b86:	4652      	mov	r2, sl
   20b88:	4659      	mov	r1, fp
   20b8a:	4640      	mov	r0, r8
   20b8c:	f7ff fe78 	bl	20880 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
   20b90:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   20b94:	4641      	mov	r1, r8
   20b96:	f7ff fe4f 	bl	20838 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   20b9a:	900e      	str	r0, [sp, #56]	; 0x38
   20b9c:	4605      	mov	r5, r0
   20b9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   20ba0:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
   20ba4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
   20ba8:	b133      	cbz	r3, 20bb8 <__gxx_personality_v0+0x2a8>
   20baa:	4602      	mov	r2, r0
   20bac:	2300      	movs	r3, #0
   20bae:	f852 1f04 	ldr.w	r1, [r2, #4]!
   20bb2:	3301      	adds	r3, #1
   20bb4:	2900      	cmp	r1, #0
   20bb6:	d1fa      	bne.n	20bae <__gxx_personality_v0+0x29e>
   20bb8:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
   20bbc:	2304      	movs	r3, #4
   20bbe:	6378      	str	r0, [r7, #52]	; 0x34
   20bc0:	633b      	str	r3, [r7, #48]	; 0x30
   20bc2:	2503      	movs	r5, #3
   20bc4:	e787      	b.n	20ad6 <__gxx_personality_v0+0x1c6>
   20bc6:	9e10      	ldr	r6, [sp, #64]	; 0x40
   20bc8:	9b03      	ldr	r3, [sp, #12]
   20bca:	3c01      	subs	r4, #1
   20bcc:	4426      	add	r6, r4
   20bce:	2b00      	cmp	r3, #0
   20bd0:	f43f aeab 	beq.w	2092a <__gxx_personality_v0+0x1a>
   20bd4:	9b02      	ldr	r3, [sp, #8]
   20bd6:	2e00      	cmp	r6, #0
   20bd8:	f000 80d7 	beq.w	20d8a <__gxx_personality_v0+0x47a>
   20bdc:	f013 0308 	ands.w	r3, r3, #8
   20be0:	9304      	str	r3, [sp, #16]
   20be2:	f000 80c9 	beq.w	20d78 <__gxx_personality_v0+0x468>
   20be6:	2347      	movs	r3, #71	; 0x47
   20be8:	703b      	strb	r3, [r7, #0]
   20bea:	234e      	movs	r3, #78	; 0x4e
   20bec:	707b      	strb	r3, [r7, #1]
   20bee:	2355      	movs	r3, #85	; 0x55
   20bf0:	70bb      	strb	r3, [r7, #2]
   20bf2:	2343      	movs	r3, #67	; 0x43
   20bf4:	70fb      	strb	r3, [r7, #3]
   20bf6:	2346      	movs	r3, #70	; 0x46
   20bf8:	713b      	strb	r3, [r7, #4]
   20bfa:	234f      	movs	r3, #79	; 0x4f
   20bfc:	717b      	strb	r3, [r7, #5]
   20bfe:	2352      	movs	r3, #82	; 0x52
   20c00:	71bb      	strb	r3, [r7, #6]
   20c02:	2300      	movs	r3, #0
   20c04:	71fb      	strb	r3, [r7, #7]
   20c06:	2300      	movs	r3, #0
   20c08:	f8cd b018 	str.w	fp, [sp, #24]
   20c0c:	f8cd 8014 	str.w	r8, [sp, #20]
   20c10:	469b      	mov	fp, r3
   20c12:	f8cd a01c 	str.w	sl, [sp, #28]
   20c16:	2400      	movs	r4, #0
   20c18:	4622      	mov	r2, r4
   20c1a:	f816 1b01 	ldrb.w	r1, [r6], #1
   20c1e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   20c22:	4093      	lsls	r3, r2
   20c24:	0608      	lsls	r0, r1, #24
   20c26:	ea44 0403 	orr.w	r4, r4, r3
   20c2a:	f102 0207 	add.w	r2, r2, #7
   20c2e:	d4f4      	bmi.n	20c1a <__gxx_personality_v0+0x30a>
   20c30:	2a1f      	cmp	r2, #31
   20c32:	d805      	bhi.n	20c40 <__gxx_personality_v0+0x330>
   20c34:	0649      	lsls	r1, r1, #25
   20c36:	d503      	bpl.n	20c40 <__gxx_personality_v0+0x330>
   20c38:	2301      	movs	r3, #1
   20c3a:	4093      	lsls	r3, r2
   20c3c:	425b      	negs	r3, r3
   20c3e:	431c      	orrs	r4, r3
   20c40:	2500      	movs	r5, #0
   20c42:	4630      	mov	r0, r6
   20c44:	462a      	mov	r2, r5
   20c46:	f810 1b01 	ldrb.w	r1, [r0], #1
   20c4a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   20c4e:	4093      	lsls	r3, r2
   20c50:	431d      	orrs	r5, r3
   20c52:	060b      	lsls	r3, r1, #24
   20c54:	f102 0207 	add.w	r2, r2, #7
   20c58:	d4f5      	bmi.n	20c46 <__gxx_personality_v0+0x336>
   20c5a:	2a1f      	cmp	r2, #31
   20c5c:	d805      	bhi.n	20c6a <__gxx_personality_v0+0x35a>
   20c5e:	064b      	lsls	r3, r1, #25
   20c60:	d503      	bpl.n	20c6a <__gxx_personality_v0+0x35a>
   20c62:	2301      	movs	r3, #1
   20c64:	4093      	lsls	r3, r2
   20c66:	425b      	negs	r3, r3
   20c68:	431d      	orrs	r5, r3
   20c6a:	2c00      	cmp	r4, #0
   20c6c:	d034      	beq.n	20cd8 <__gxx_personality_v0+0x3c8>
   20c6e:	dc36      	bgt.n	20cde <__gxx_personality_v0+0x3ce>
   20c70:	b117      	cbz	r7, 20c78 <__gxx_personality_v0+0x368>
   20c72:	9b04      	ldr	r3, [sp, #16]
   20c74:	2b00      	cmp	r3, #0
   20c76:	d04f      	beq.n	20d18 <__gxx_personality_v0+0x408>
   20c78:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   20c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20c7e:	ebaa 0a04 	sub.w	sl, sl, r4
   20c82:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   20c86:	b1b3      	cbz	r3, 20cb6 <__gxx_personality_v0+0x3a6>
   20c88:	2d00      	cmp	r5, #0
   20c8a:	d06a      	beq.n	20d62 <__gxx_personality_v0+0x452>
   20c8c:	442e      	add	r6, r5
   20c8e:	e7c2      	b.n	20c16 <__gxx_personality_v0+0x306>
   20c90:	00a3      	lsls	r3, r4, #2
   20c92:	425b      	negs	r3, r3
   20c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20c96:	990e      	ldr	r1, [sp, #56]	; 0x38
   20c98:	441a      	add	r2, r3
   20c9a:	464b      	mov	r3, r9
   20c9c:	f7ff fd6c 	bl	20778 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   20ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   20ca2:	b141      	cbz	r1, 20cb6 <__gxx_personality_v0+0x3a6>
   20ca4:	2f00      	cmp	r7, #0
   20ca6:	d0ef      	beq.n	20c88 <__gxx_personality_v0+0x378>
   20ca8:	ab08      	add	r3, sp, #32
   20caa:	2200      	movs	r2, #0
   20cac:	4638      	mov	r0, r7
   20cae:	f7ff fc07 	bl	204c0 <__cxa_type_match>
   20cb2:	2800      	cmp	r0, #0
   20cb4:	d0e8      	beq.n	20c88 <__gxx_personality_v0+0x378>
   20cb6:	9b02      	ldr	r3, [sp, #8]
   20cb8:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20cbc:	07db      	lsls	r3, r3, #31
   20cbe:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
   20cc2:	f53f aeb6 	bmi.w	20a32 <__gxx_personality_v0+0x122>
   20cc6:	9b04      	ldr	r3, [sp, #16]
   20cc8:	2b00      	cmp	r3, #0
   20cca:	f43f af01 	beq.w	20ad0 <__gxx_personality_v0+0x1c0>
   20cce:	2c00      	cmp	r4, #0
   20cd0:	f6bf af00 	bge.w	20ad4 <__gxx_personality_v0+0x1c4>
   20cd4:	f7f9 fb84 	bl	1a3e0 <std::unexpected()>
   20cd8:	f04f 0b01 	mov.w	fp, #1
   20cdc:	e7d4      	b.n	20c88 <__gxx_personality_v0+0x378>
   20cde:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   20ce2:	28ff      	cmp	r0, #255	; 0xff
   20ce4:	d031      	beq.n	20d4a <__gxx_personality_v0+0x43a>
   20ce6:	f000 0307 	and.w	r3, r0, #7
   20cea:	2b04      	cmp	r3, #4
   20cec:	f63f ae29 	bhi.w	20942 <__gxx_personality_v0+0x32>
   20cf0:	a201      	add	r2, pc, #4	; (adr r2, 20cf8 <__gxx_personality_v0+0x3e8>)
   20cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20cf6:	bf00      	nop
   20cf8:	00020c91 	.word	0x00020c91
   20cfc:	00020943 	.word	0x00020943
   20d00:	00020d13 	.word	0x00020d13
   20d04:	00020c91 	.word	0x00020c91
   20d08:	00020d0d 	.word	0x00020d0d
   20d0c:	00e3      	lsls	r3, r4, #3
   20d0e:	425b      	negs	r3, r3
   20d10:	e7c0      	b.n	20c94 <__gxx_personality_v0+0x384>
   20d12:	0063      	lsls	r3, r4, #1
   20d14:	425b      	negs	r3, r3
   20d16:	e7bd      	b.n	20c94 <__gxx_personality_v0+0x384>
   20d18:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   20d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20d1e:	9a08      	ldr	r2, [sp, #32]
   20d20:	920b      	str	r2, [sp, #44]	; 0x2c
   20d22:	ebaa 0a04 	sub.w	sl, sl, r4
   20d26:	eb03 088a 	add.w	r8, r3, sl, lsl #2
   20d2a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   20d2e:	b919      	cbnz	r1, 20d38 <__gxx_personality_v0+0x428>
   20d30:	e00d      	b.n	20d4e <__gxx_personality_v0+0x43e>
   20d32:	f858 1f04 	ldr.w	r1, [r8, #4]!
   20d36:	b151      	cbz	r1, 20d4e <__gxx_personality_v0+0x43e>
   20d38:	4441      	add	r1, r8
   20d3a:	464b      	mov	r3, r9
   20d3c:	2200      	movs	r2, #0
   20d3e:	4638      	mov	r0, r7
   20d40:	f7ff fbbe 	bl	204c0 <__cxa_type_match>
   20d44:	2800      	cmp	r0, #0
   20d46:	d0f4      	beq.n	20d32 <__gxx_personality_v0+0x422>
   20d48:	e79e      	b.n	20c88 <__gxx_personality_v0+0x378>
   20d4a:	2300      	movs	r3, #0
   20d4c:	e7a2      	b.n	20c94 <__gxx_personality_v0+0x384>
   20d4e:	9b02      	ldr	r3, [sp, #8]
   20d50:	07d8      	lsls	r0, r3, #31
   20d52:	4656      	mov	r6, sl
   20d54:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
   20d58:	f8dd a01c 	ldr.w	sl, [sp, #28]
   20d5c:	f53f ae69 	bmi.w	20a32 <__gxx_personality_v0+0x122>
   20d60:	e711      	b.n	20b86 <__gxx_personality_v0+0x276>
   20d62:	465b      	mov	r3, fp
   20d64:	f8dd 8014 	ldr.w	r8, [sp, #20]
   20d68:	2b00      	cmp	r3, #0
   20d6a:	f43f adde 	beq.w	2092a <__gxx_personality_v0+0x1a>
   20d6e:	9b02      	ldr	r3, [sp, #8]
   20d70:	07d9      	lsls	r1, r3, #31
   20d72:	f53f adda 	bmi.w	2092a <__gxx_personality_v0+0x1a>
   20d76:	e6fa      	b.n	20b6e <__gxx_personality_v0+0x25e>
   20d78:	79fb      	ldrb	r3, [r7, #7]
   20d7a:	2b01      	cmp	r3, #1
   20d7c:	bf0c      	ite	eq
   20d7e:	f857 3c20 	ldreq.w	r3, [r7, #-32]
   20d82:	f107 0358 	addne.w	r3, r7, #88	; 0x58
   20d86:	9308      	str	r3, [sp, #32]
   20d88:	e73d      	b.n	20c06 <__gxx_personality_v0+0x2f6>
   20d8a:	07da      	lsls	r2, r3, #31
   20d8c:	f53f adcd 	bmi.w	2092a <__gxx_personality_v0+0x1a>
   20d90:	9b02      	ldr	r3, [sp, #8]
   20d92:	f013 0408 	ands.w	r4, r3, #8
   20d96:	f47f aeea 	bne.w	20b6e <__gxx_personality_v0+0x25e>
   20d9a:	2502      	movs	r5, #2
   20d9c:	e69b      	b.n	20ad6 <__gxx_personality_v0+0x1c6>
   20d9e:	f7ff fc51 	bl	20644 <__cxa_begin_catch>
   20da2:	e674      	b.n	20a8e <__gxx_personality_v0+0x17e>

00020da4 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
   20da4:	b500      	push	{lr}
   20da6:	2801      	cmp	r0, #1
   20da8:	b083      	sub	sp, #12
   20daa:	d81d      	bhi.n	20de8 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x44>
   20dac:	f3bf 8f5b 	dmb	ish
   20db0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   20db4:	e853 2f00 	ldrex	r2, [r3]
   20db8:	3a01      	subs	r2, #1
   20dba:	e843 2000 	strex	r0, r2, [r3]
   20dbe:	2800      	cmp	r0, #0
   20dc0:	d1f8      	bne.n	20db4 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x10>
   20dc2:	f3bf 8f5b 	dmb	ish
   20dc6:	b962      	cbnz	r2, 20de2 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3e>
   20dc8:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   20dcc:	f101 0058 	add.w	r0, r1, #88	; 0x58
   20dd0:	b113      	cbz	r3, 20dd8 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x34>
   20dd2:	9001      	str	r0, [sp, #4]
   20dd4:	4798      	blx	r3
   20dd6:	9801      	ldr	r0, [sp, #4]
   20dd8:	b003      	add	sp, #12
   20dda:	f85d eb04 	ldr.w	lr, [sp], #4
   20dde:	f000 ba3f 	b.w	21260 <__cxa_free_exception>
   20de2:	b003      	add	sp, #12
   20de4:	f85d fb04 	ldr.w	pc, [sp], #4
   20de8:	f851 0c14 	ldr.w	r0, [r1, #-20]
   20dec:	f7f9 fae2 	bl	1a3b4 <__cxxabiv1::__terminate(void (*)())>

00020df0 <__cxa_init_primary_exception>:
   20df0:	b538      	push	{r3, r4, r5, lr}
   20df2:	2500      	movs	r5, #0
   20df4:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   20df8:	f840 5c80 	str.w	r5, [r0, #-128]
   20dfc:	4604      	mov	r4, r0
   20dfe:	f7f9 fb01 	bl	1a404 <std::get_unexpected()>
   20e02:	f844 0c70 	str.w	r0, [r4, #-112]
   20e06:	f7f9 faf5 	bl	1a3f4 <std::get_terminate()>
   20e0a:	2243      	movs	r2, #67	; 0x43
   20e0c:	232b      	movs	r3, #43	; 0x2b
   20e0e:	2147      	movs	r1, #71	; 0x47
   20e10:	f804 2c55 	strb.w	r2, [r4, #-85]
   20e14:	f804 2c54 	strb.w	r2, [r4, #-84]
   20e18:	f804 3c53 	strb.w	r3, [r4, #-83]
   20e1c:	f804 3c52 	strb.w	r3, [r4, #-82]
   20e20:	224e      	movs	r2, #78	; 0x4e
   20e22:	2355      	movs	r3, #85	; 0x55
   20e24:	f804 1c58 	strb.w	r1, [r4, #-88]
   20e28:	f804 5c51 	strb.w	r5, [r4, #-81]
   20e2c:	4905      	ldr	r1, [pc, #20]	; (20e44 <__cxa_init_primary_exception+0x54>)
   20e2e:	f804 2c57 	strb.w	r2, [r4, #-87]
   20e32:	f804 3c56 	strb.w	r3, [r4, #-86]
   20e36:	f844 0c6c 	str.w	r0, [r4, #-108]
   20e3a:	f844 1c50 	str.w	r1, [r4, #-80]
   20e3e:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   20e42:	bd38      	pop	{r3, r4, r5, pc}
   20e44:	00020da5 	.word	0x00020da5

00020e48 <__cxa_throw>:
   20e48:	b510      	push	{r4, lr}
   20e4a:	b082      	sub	sp, #8
   20e4c:	e9cd 2100 	strd	r2, r1, [sp]
   20e50:	4604      	mov	r4, r0
   20e52:	f7ff fc8d 	bl	20770 <__cxa_get_globals>
   20e56:	4603      	mov	r3, r0
   20e58:	6840      	ldr	r0, [r0, #4]
   20e5a:	9a00      	ldr	r2, [sp, #0]
   20e5c:	9901      	ldr	r1, [sp, #4]
   20e5e:	3001      	adds	r0, #1
   20e60:	6058      	str	r0, [r3, #4]
   20e62:	4620      	mov	r0, r4
   20e64:	f7ff ffc4 	bl	20df0 <__cxa_init_primary_exception>
   20e68:	4604      	mov	r4, r0
   20e6a:	2301      	movs	r3, #1
   20e6c:	f844 3b28 	str.w	r3, [r4], #40
   20e70:	4620      	mov	r0, r4
   20e72:	f001 f839 	bl	21ee8 <_Unwind_RaiseException>
   20e76:	4620      	mov	r0, r4
   20e78:	f7ff fbe4 	bl	20644 <__cxa_begin_catch>
   20e7c:	f7f9 faa2 	bl	1a3c4 <std::terminate()>

00020e80 <__cxa_rethrow>:
   20e80:	b510      	push	{r4, lr}
   20e82:	f7ff fc75 	bl	20770 <__cxa_get_globals>
   20e86:	e9d0 4200 	ldrd	r4, r2, [r0]
   20e8a:	3201      	adds	r2, #1
   20e8c:	6042      	str	r2, [r0, #4]
   20e8e:	b164      	cbz	r4, 20eaa <__cxa_rethrow+0x2a>
   20e90:	f894 2020 	ldrb.w	r2, [r4, #32]
   20e94:	2a47      	cmp	r2, #71	; 0x47
   20e96:	d00a      	beq.n	20eae <__cxa_rethrow+0x2e>
   20e98:	2200      	movs	r2, #0
   20e9a:	6002      	str	r2, [r0, #0]
   20e9c:	3420      	adds	r4, #32
   20e9e:	4620      	mov	r0, r4
   20ea0:	f001 f846 	bl	21f30 <_Unwind_Resume_or_Rethrow>
   20ea4:	4620      	mov	r0, r4
   20ea6:	f7ff fbcd 	bl	20644 <__cxa_begin_catch>
   20eaa:	f7f9 fa8b 	bl	1a3c4 <std::terminate()>
   20eae:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   20eb2:	2a4e      	cmp	r2, #78	; 0x4e
   20eb4:	d1f0      	bne.n	20e98 <__cxa_rethrow+0x18>
   20eb6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   20eba:	2a55      	cmp	r2, #85	; 0x55
   20ebc:	d1ec      	bne.n	20e98 <__cxa_rethrow+0x18>
   20ebe:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   20ec2:	2a43      	cmp	r2, #67	; 0x43
   20ec4:	d1e8      	bne.n	20e98 <__cxa_rethrow+0x18>
   20ec6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20eca:	2a43      	cmp	r2, #67	; 0x43
   20ecc:	d1e4      	bne.n	20e98 <__cxa_rethrow+0x18>
   20ece:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   20ed2:	2a2b      	cmp	r2, #43	; 0x2b
   20ed4:	d1e0      	bne.n	20e98 <__cxa_rethrow+0x18>
   20ed6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   20eda:	2a2b      	cmp	r2, #43	; 0x2b
   20edc:	d1dc      	bne.n	20e98 <__cxa_rethrow+0x18>
   20ede:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   20ee2:	2a01      	cmp	r2, #1
   20ee4:	d8d8      	bhi.n	20e98 <__cxa_rethrow+0x18>
   20ee6:	6962      	ldr	r2, [r4, #20]
   20ee8:	4252      	negs	r2, r2
   20eea:	6162      	str	r2, [r4, #20]
   20eec:	e7d6      	b.n	20e9c <__cxa_rethrow+0x1c>
   20eee:	bf00      	nop

00020ef0 <__cxa_current_exception_type>:
   20ef0:	b508      	push	{r3, lr}
   20ef2:	f7ff fc3d 	bl	20770 <__cxa_get_globals>
   20ef6:	6800      	ldr	r0, [r0, #0]
   20ef8:	b130      	cbz	r0, 20f08 <__cxa_current_exception_type+0x18>
   20efa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   20efe:	2b01      	cmp	r3, #1
   20f00:	bf04      	itt	eq
   20f02:	6800      	ldreq	r0, [r0, #0]
   20f04:	3878      	subeq	r0, #120	; 0x78
   20f06:	6800      	ldr	r0, [r0, #0]
   20f08:	bd08      	pop	{r3, pc}
   20f0a:	bf00      	nop

00020f0c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   20f0c:	b510      	push	{r4, lr}
   20f0e:	4b03      	ldr	r3, [pc, #12]	; (20f1c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
   20f10:	6003      	str	r3, [r0, #0]
   20f12:	4604      	mov	r4, r0
   20f14:	f000 f8be 	bl	21094 <__cxxabiv1::__class_type_info::~__class_type_info()>
   20f18:	4620      	mov	r0, r4
   20f1a:	bd10      	pop	{r4, pc}
   20f1c:	20002b54 	.word	0x20002b54

00020f20 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   20f20:	b510      	push	{r4, lr}
   20f22:	4b05      	ldr	r3, [pc, #20]	; (20f38 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x18>)
   20f24:	6003      	str	r3, [r0, #0]
   20f26:	4604      	mov	r4, r0
   20f28:	f000 f8b4 	bl	21094 <__cxxabiv1::__class_type_info::~__class_type_info()>
   20f2c:	4620      	mov	r0, r4
   20f2e:	210c      	movs	r1, #12
   20f30:	f7f7 fece 	bl	18cd0 <operator delete(void*, unsigned int)>
   20f34:	4620      	mov	r0, r4
   20f36:	bd10      	pop	{r4, pc}
   20f38:	20002b54 	.word	0x20002b54

00020f3c <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   20f3c:	b570      	push	{r4, r5, r6, lr}
   20f3e:	b082      	sub	sp, #8
   20f40:	4604      	mov	r4, r0
   20f42:	9e06      	ldr	r6, [sp, #24]
   20f44:	4296      	cmp	r6, r2
   20f46:	460d      	mov	r5, r1
   20f48:	d009      	beq.n	20f5e <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x22>
   20f4a:	68a0      	ldr	r0, [r4, #8]
   20f4c:	6804      	ldr	r4, [r0, #0]
   20f4e:	9606      	str	r6, [sp, #24]
   20f50:	6a24      	ldr	r4, [r4, #32]
   20f52:	4629      	mov	r1, r5
   20f54:	46a4      	mov	ip, r4
   20f56:	b002      	add	sp, #8
   20f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20f5c:	4760      	bx	ip
   20f5e:	4619      	mov	r1, r3
   20f60:	9201      	str	r2, [sp, #4]
   20f62:	9300      	str	r3, [sp, #0]
   20f64:	f000 f860 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   20f68:	e9dd 3200 	ldrd	r3, r2, [sp]
   20f6c:	2800      	cmp	r0, #0
   20f6e:	d0ec      	beq.n	20f4a <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
   20f70:	2006      	movs	r0, #6
   20f72:	b002      	add	sp, #8
   20f74:	bd70      	pop	{r4, r5, r6, pc}
   20f76:	bf00      	nop

00020f78 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   20f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f7c:	460c      	mov	r4, r1
   20f7e:	b081      	sub	sp, #4
   20f80:	4619      	mov	r1, r3
   20f82:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
   20f86:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
   20f8a:	469b      	mov	fp, r3
   20f8c:	4605      	mov	r5, r0
   20f8e:	4692      	mov	sl, r2
   20f90:	f000 f84a 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   20f94:	b980      	cbnz	r0, 20fb8 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
   20f96:	4546      	cmp	r6, r8
   20f98:	d022      	beq.n	20fe0 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x68>
   20f9a:	68a8      	ldr	r0, [r5, #8]
   20f9c:	4621      	mov	r1, r4
   20f9e:	6804      	ldr	r4, [r0, #0]
   20fa0:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
   20fa4:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
   20fa8:	69e4      	ldr	r4, [r4, #28]
   20faa:	465b      	mov	r3, fp
   20fac:	4652      	mov	r2, sl
   20fae:	46a4      	mov	ip, r4
   20fb0:	b001      	add	sp, #4
   20fb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fb6:	4760      	bx	ip
   20fb8:	2c00      	cmp	r4, #0
   20fba:	603e      	str	r6, [r7, #0]
   20fbc:	f887 a004 	strb.w	sl, [r7, #4]
   20fc0:	db09      	blt.n	20fd6 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   20fc2:	4426      	add	r6, r4
   20fc4:	45b0      	cmp	r8, r6
   20fc6:	bf0c      	ite	eq
   20fc8:	2606      	moveq	r6, #6
   20fca:	2601      	movne	r6, #1
   20fcc:	71be      	strb	r6, [r7, #6]
   20fce:	2000      	movs	r0, #0
   20fd0:	b001      	add	sp, #4
   20fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fd6:	3402      	adds	r4, #2
   20fd8:	d1f9      	bne.n	20fce <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   20fda:	2301      	movs	r3, #1
   20fdc:	71bb      	strb	r3, [r7, #6]
   20fde:	e7f6      	b.n	20fce <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   20fe0:	4649      	mov	r1, r9
   20fe2:	4628      	mov	r0, r5
   20fe4:	f000 f820 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   20fe8:	2800      	cmp	r0, #0
   20fea:	d0d6      	beq.n	20f9a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x22>
   20fec:	f887 a005 	strb.w	sl, [r7, #5]
   20ff0:	e7ed      	b.n	20fce <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   20ff2:	bf00      	nop

00020ff4 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   20ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ff8:	4606      	mov	r6, r0
   20ffa:	460f      	mov	r7, r1
   20ffc:	4614      	mov	r4, r2
   20ffe:	461d      	mov	r5, r3
   21000:	f000 f882 	bl	21108 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
   21004:	b948      	cbnz	r0, 2101a <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
   21006:	68b0      	ldr	r0, [r6, #8]
   21008:	6801      	ldr	r1, [r0, #0]
   2100a:	4622      	mov	r2, r4
   2100c:	698c      	ldr	r4, [r1, #24]
   2100e:	462b      	mov	r3, r5
   21010:	4639      	mov	r1, r7
   21012:	46a4      	mov	ip, r4
   21014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21018:	4760      	bx	ip
   2101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2101e:	bf00      	nop

00021020 <std::type_info::~type_info()>:
   21020:	4770      	bx	lr
   21022:	bf00      	nop

00021024 <std::type_info::__is_pointer_p() const>:
   21024:	2000      	movs	r0, #0
   21026:	4770      	bx	lr

00021028 <std::type_info::operator==(std::type_info const&) const>:
   21028:	4281      	cmp	r1, r0
   2102a:	d011      	beq.n	21050 <std::type_info::operator==(std::type_info const&) const+0x28>
   2102c:	b508      	push	{r3, lr}
   2102e:	6840      	ldr	r0, [r0, #4]
   21030:	7803      	ldrb	r3, [r0, #0]
   21032:	2b2a      	cmp	r3, #42	; 0x2a
   21034:	d00a      	beq.n	2104c <std::type_info::operator==(std::type_info const&) const+0x24>
   21036:	6849      	ldr	r1, [r1, #4]
   21038:	780b      	ldrb	r3, [r1, #0]
   2103a:	2b2a      	cmp	r3, #42	; 0x2a
   2103c:	bf08      	it	eq
   2103e:	3101      	addeq	r1, #1
   21040:	f003 fe92 	bl	24d68 <strcmp>
   21044:	fab0 f080 	clz	r0, r0
   21048:	0940      	lsrs	r0, r0, #5
   2104a:	bd08      	pop	{r3, pc}
   2104c:	2000      	movs	r0, #0
   2104e:	bd08      	pop	{r3, pc}
   21050:	2001      	movs	r0, #1
   21052:	4770      	bx	lr

00021054 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   21054:	b570      	push	{r4, r5, r6, lr}
   21056:	6803      	ldr	r3, [r0, #0]
   21058:	b084      	sub	sp, #16
   2105a:	2400      	movs	r4, #0
   2105c:	699e      	ldr	r6, [r3, #24]
   2105e:	9403      	str	r4, [sp, #12]
   21060:	2310      	movs	r3, #16
   21062:	4615      	mov	r5, r2
   21064:	9302      	str	r3, [sp, #8]
   21066:	e9cd 4400 	strd	r4, r4, [sp]
   2106a:	466b      	mov	r3, sp
   2106c:	6812      	ldr	r2, [r2, #0]
   2106e:	47b0      	blx	r6
   21070:	f89d 3004 	ldrb.w	r3, [sp, #4]
   21074:	f003 0306 	and.w	r3, r3, #6
   21078:	2b06      	cmp	r3, #6
   2107a:	bf03      	ittte	eq
   2107c:	9b00      	ldreq	r3, [sp, #0]
   2107e:	602b      	streq	r3, [r5, #0]
   21080:	2001      	moveq	r0, #1
   21082:	4620      	movne	r0, r4
   21084:	b004      	add	sp, #16
   21086:	bd70      	pop	{r4, r5, r6, pc}

00021088 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   21088:	9800      	ldr	r0, [sp, #0]
   2108a:	4290      	cmp	r0, r2
   2108c:	bf14      	ite	ne
   2108e:	2001      	movne	r0, #1
   21090:	2006      	moveq	r0, #6
   21092:	4770      	bx	lr

00021094 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   21094:	b510      	push	{r4, lr}
   21096:	4b03      	ldr	r3, [pc, #12]	; (210a4 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
   21098:	6003      	str	r3, [r0, #0]
   2109a:	4604      	mov	r4, r0
   2109c:	f7ff ffc0 	bl	21020 <std::type_info::~type_info()>
   210a0:	4620      	mov	r0, r4
   210a2:	bd10      	pop	{r4, pc}
   210a4:	20002b28 	.word	0x20002b28

000210a8 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   210a8:	b510      	push	{r4, lr}
   210aa:	4b05      	ldr	r3, [pc, #20]	; (210c0 <__cxxabiv1::__class_type_info::~__class_type_info()+0x18>)
   210ac:	6003      	str	r3, [r0, #0]
   210ae:	4604      	mov	r4, r0
   210b0:	f7ff ffb6 	bl	21020 <std::type_info::~type_info()>
   210b4:	4620      	mov	r0, r4
   210b6:	2108      	movs	r1, #8
   210b8:	f7f7 fe0a 	bl	18cd0 <operator delete(void*, unsigned int)>
   210bc:	4620      	mov	r0, r4
   210be:	bd10      	pop	{r4, pc}
   210c0:	20002b28 	.word	0x20002b28

000210c4 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   210c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210c8:	9f06      	ldr	r7, [sp, #24]
   210ca:	9908      	ldr	r1, [sp, #32]
   210cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   210ce:	428f      	cmp	r7, r1
   210d0:	4604      	mov	r4, r0
   210d2:	4690      	mov	r8, r2
   210d4:	461d      	mov	r5, r3
   210d6:	d00c      	beq.n	210f2 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2e>
   210d8:	4629      	mov	r1, r5
   210da:	4620      	mov	r0, r4
   210dc:	f7ff ffa4 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   210e0:	b120      	cbz	r0, 210ec <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x28>
   210e2:	2301      	movs	r3, #1
   210e4:	6037      	str	r7, [r6, #0]
   210e6:	f886 8004 	strb.w	r8, [r6, #4]
   210ea:	71b3      	strb	r3, [r6, #6]
   210ec:	2000      	movs	r0, #0
   210ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210f2:	9907      	ldr	r1, [sp, #28]
   210f4:	f7ff ff98 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   210f8:	2800      	cmp	r0, #0
   210fa:	d0ed      	beq.n	210d8 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x14>
   210fc:	f886 8005 	strb.w	r8, [r6, #5]
   21100:	2000      	movs	r0, #0
   21102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21106:	bf00      	nop

00021108 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   21108:	b538      	push	{r3, r4, r5, lr}
   2110a:	4615      	mov	r5, r2
   2110c:	461c      	mov	r4, r3
   2110e:	f7ff ff8b 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   21112:	b900      	cbnz	r0, 21116 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0xe>
   21114:	bd38      	pop	{r3, r4, r5, pc}
   21116:	2208      	movs	r2, #8
   21118:	2306      	movs	r3, #6
   2111a:	6025      	str	r5, [r4, #0]
   2111c:	60e2      	str	r2, [r4, #12]
   2111e:	7123      	strb	r3, [r4, #4]
   21120:	bd38      	pop	{r3, r4, r5, pc}
   21122:	bf00      	nop

00021124 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   21124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21128:	4606      	mov	r6, r0
   2112a:	4617      	mov	r7, r2
   2112c:	461d      	mov	r5, r3
   2112e:	460c      	mov	r4, r1
   21130:	f7ff ff7a 	bl	21028 <std::type_info::operator==(std::type_info const&) const>
   21134:	b948      	cbnz	r0, 2114a <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
   21136:	2d03      	cmp	r5, #3
   21138:	d807      	bhi.n	2114a <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
   2113a:	6823      	ldr	r3, [r4, #0]
   2113c:	463a      	mov	r2, r7
   2113e:	4631      	mov	r1, r6
   21140:	4620      	mov	r0, r4
   21142:	695b      	ldr	r3, [r3, #20]
   21144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21148:	4718      	bx	r3
   2114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2114e:	bf00      	nop

00021150 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>:
   21150:	4920      	ldr	r1, [pc, #128]	; (211d4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x84>)
   21152:	684b      	ldr	r3, [r1, #4]
   21154:	b530      	push	{r4, r5, lr}
   21156:	f850 5c08 	ldr.w	r5, [r0, #-8]
   2115a:	f1a0 0408 	sub.w	r4, r0, #8
   2115e:	b35b      	cbz	r3, 211b8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
   21160:	eb04 0e05 	add.w	lr, r4, r5
   21164:	4573      	cmp	r3, lr
   21166:	d827      	bhi.n	211b8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
   21168:	d021      	beq.n	211ae <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x5e>
   2116a:	685a      	ldr	r2, [r3, #4]
   2116c:	f101 0c04 	add.w	ip, r1, #4
   21170:	b932      	cbnz	r2, 21180 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x30>
   21172:	e00f      	b.n	21194 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x44>
   21174:	6851      	ldr	r1, [r2, #4]
   21176:	f103 0c04 	add.w	ip, r3, #4
   2117a:	b321      	cbz	r1, 211c6 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x76>
   2117c:	4613      	mov	r3, r2
   2117e:	460a      	mov	r2, r1
   21180:	4596      	cmp	lr, r2
   21182:	d3f7      	bcc.n	21174 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x24>
   21184:	bf04      	itt	eq
   21186:	e9de 2100 	ldrdeq	r2, r1, [lr]
   2118a:	6059      	streq	r1, [r3, #4]
   2118c:	f8dc 3000 	ldr.w	r3, [ip]
   21190:	bf08      	it	eq
   21192:	18ad      	addeq	r5, r5, r2
   21194:	681a      	ldr	r2, [r3, #0]
   21196:	1899      	adds	r1, r3, r2
   21198:	428c      	cmp	r4, r1
   2119a:	d011      	beq.n	211c0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
   2119c:	685b      	ldr	r3, [r3, #4]
   2119e:	f840 3c04 	str.w	r3, [r0, #-4]
   211a2:	f8dc 3000 	ldr.w	r3, [ip]
   211a6:	f840 5c08 	str.w	r5, [r0, #-8]
   211aa:	605c      	str	r4, [r3, #4]
   211ac:	bd30      	pop	{r4, r5, pc}
   211ae:	681a      	ldr	r2, [r3, #0]
   211b0:	685b      	ldr	r3, [r3, #4]
   211b2:	442a      	add	r2, r5
   211b4:	f840 2c08 	str.w	r2, [r0, #-8]
   211b8:	f840 3c04 	str.w	r3, [r0, #-4]
   211bc:	604c      	str	r4, [r1, #4]
   211be:	bd30      	pop	{r4, r5, pc}
   211c0:	442a      	add	r2, r5
   211c2:	601a      	str	r2, [r3, #0]
   211c4:	bd30      	pop	{r4, r5, pc}
   211c6:	685b      	ldr	r3, [r3, #4]
   211c8:	681a      	ldr	r2, [r3, #0]
   211ca:	1899      	adds	r1, r3, r2
   211cc:	428c      	cmp	r4, r1
   211ce:	d1e5      	bne.n	2119c <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x4c>
   211d0:	e7f6      	b.n	211c0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
   211d2:	bf00      	nop
   211d4:	2000c968 	.word	0x2000c968

000211d8 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>:
   211d8:	4914      	ldr	r1, [pc, #80]	; (2122c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x54>)
   211da:	f100 0308 	add.w	r3, r0, #8
   211de:	6848      	ldr	r0, [r1, #4]
   211e0:	2b08      	cmp	r3, #8
   211e2:	bf38      	it	cc
   211e4:	2308      	movcc	r3, #8
   211e6:	b1f8      	cbz	r0, 21228 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x50>
   211e8:	3307      	adds	r3, #7
   211ea:	f023 0307 	bic.w	r3, r3, #7
   211ee:	3104      	adds	r1, #4
   211f0:	e002      	b.n	211f8 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x20>
   211f2:	1d01      	adds	r1, r0, #4
   211f4:	6840      	ldr	r0, [r0, #4]
   211f6:	b180      	cbz	r0, 2121a <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x42>
   211f8:	6802      	ldr	r2, [r0, #0]
   211fa:	4293      	cmp	r3, r2
   211fc:	d8f9      	bhi.n	211f2 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x1a>
   211fe:	b430      	push	{r4, r5}
   21200:	1ad4      	subs	r4, r2, r3
   21202:	2c07      	cmp	r4, #7
   21204:	d90a      	bls.n	2121c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x44>
   21206:	18c5      	adds	r5, r0, r3
   21208:	6842      	ldr	r2, [r0, #4]
   2120a:	606a      	str	r2, [r5, #4]
   2120c:	50c4      	str	r4, [r0, r3]
   2120e:	6808      	ldr	r0, [r1, #0]
   21210:	6003      	str	r3, [r0, #0]
   21212:	600d      	str	r5, [r1, #0]
   21214:	3008      	adds	r0, #8
   21216:	bc30      	pop	{r4, r5}
   21218:	4770      	bx	lr
   2121a:	4770      	bx	lr
   2121c:	6845      	ldr	r5, [r0, #4]
   2121e:	6002      	str	r2, [r0, #0]
   21220:	600d      	str	r5, [r1, #0]
   21222:	3008      	adds	r0, #8
   21224:	bc30      	pop	{r4, r5}
   21226:	4770      	bx	lr
   21228:	4770      	bx	lr
   2122a:	bf00      	nop
   2122c:	2000c968 	.word	0x2000c968

00021230 <__cxa_allocate_exception>:
   21230:	b510      	push	{r4, lr}
   21232:	f100 0480 	add.w	r4, r0, #128	; 0x80
   21236:	4620      	mov	r0, r4
   21238:	f003 f94c 	bl	244d4 <malloc>
   2123c:	4603      	mov	r3, r0
   2123e:	b130      	cbz	r0, 2124e <__cxa_allocate_exception+0x1e>
   21240:	2280      	movs	r2, #128	; 0x80
   21242:	2100      	movs	r1, #0
   21244:	4618      	mov	r0, r3
   21246:	f003 fcd1 	bl	24bec <memset>
   2124a:	3080      	adds	r0, #128	; 0x80
   2124c:	bd10      	pop	{r4, pc}
   2124e:	4620      	mov	r0, r4
   21250:	f7ff ffc2 	bl	211d8 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>
   21254:	4603      	mov	r3, r0
   21256:	2800      	cmp	r0, #0
   21258:	d1f2      	bne.n	21240 <__cxa_allocate_exception+0x10>
   2125a:	f7f9 f8b3 	bl	1a3c4 <std::terminate()>
   2125e:	bf00      	nop

00021260 <__cxa_free_exception>:
   21260:	4a06      	ldr	r2, [pc, #24]	; (2127c <__cxa_free_exception+0x1c>)
   21262:	6893      	ldr	r3, [r2, #8]
   21264:	3880      	subs	r0, #128	; 0x80
   21266:	4298      	cmp	r0, r3
   21268:	d905      	bls.n	21276 <__cxa_free_exception+0x16>
   2126a:	68d2      	ldr	r2, [r2, #12]
   2126c:	4413      	add	r3, r2
   2126e:	4298      	cmp	r0, r3
   21270:	d201      	bcs.n	21276 <__cxa_free_exception+0x16>
   21272:	f7ff bf6d 	b.w	21150 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>
   21276:	f003 b935 	b.w	244e4 <free>
   2127a:	bf00      	nop
   2127c:	2000c968 	.word	0x2000c968

00021280 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   21280:	b538      	push	{r3, r4, r5, lr}
   21282:	4c08      	ldr	r4, [pc, #32]	; (212a4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   21284:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   21288:	4628      	mov	r0, r5
   2128a:	60e5      	str	r5, [r4, #12]
   2128c:	f003 f922 	bl	244d4 <malloc>
   21290:	60a0      	str	r0, [r4, #8]
   21292:	b120      	cbz	r0, 2129e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   21294:	2300      	movs	r3, #0
   21296:	e9c0 5300 	strd	r5, r3, [r0]
   2129a:	6060      	str	r0, [r4, #4]
   2129c:	bd38      	pop	{r3, r4, r5, pc}
   2129e:	60e0      	str	r0, [r4, #12]
   212a0:	6060      	str	r0, [r4, #4]
   212a2:	bd38      	pop	{r3, r4, r5, pc}
   212a4:	2000c968 	.word	0x2000c968

000212a8 <__cxxabiv1::__is_gxx_exception_class(char*)>:
   212a8:	7803      	ldrb	r3, [r0, #0]
   212aa:	2b47      	cmp	r3, #71	; 0x47
   212ac:	d001      	beq.n	212b2 <__cxxabiv1::__is_gxx_exception_class(char*)+0xa>
   212ae:	2000      	movs	r0, #0
   212b0:	4770      	bx	lr
   212b2:	7843      	ldrb	r3, [r0, #1]
   212b4:	2b4e      	cmp	r3, #78	; 0x4e
   212b6:	d1fa      	bne.n	212ae <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   212b8:	7883      	ldrb	r3, [r0, #2]
   212ba:	2b55      	cmp	r3, #85	; 0x55
   212bc:	d1f7      	bne.n	212ae <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   212be:	78c3      	ldrb	r3, [r0, #3]
   212c0:	2b43      	cmp	r3, #67	; 0x43
   212c2:	d1f4      	bne.n	212ae <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   212c4:	7903      	ldrb	r3, [r0, #4]
   212c6:	2b43      	cmp	r3, #67	; 0x43
   212c8:	d1f1      	bne.n	212ae <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   212ca:	7943      	ldrb	r3, [r0, #5]
   212cc:	2b2b      	cmp	r3, #43	; 0x2b
   212ce:	d1ee      	bne.n	212ae <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   212d0:	7983      	ldrb	r3, [r0, #6]
   212d2:	2b2b      	cmp	r3, #43	; 0x2b
   212d4:	d1eb      	bne.n	212ae <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   212d6:	79c0      	ldrb	r0, [r0, #7]
   212d8:	2801      	cmp	r0, #1
   212da:	bf8c      	ite	hi
   212dc:	2000      	movhi	r0, #0
   212de:	2001      	movls	r0, #1
   212e0:	4770      	bx	lr
   212e2:	bf00      	nop

000212e4 <__cxa_call_terminate>:
   212e4:	b510      	push	{r4, lr}
   212e6:	b130      	cbz	r0, 212f6 <__cxa_call_terminate+0x12>
   212e8:	4604      	mov	r4, r0
   212ea:	f7ff f9ab 	bl	20644 <__cxa_begin_catch>
   212ee:	4620      	mov	r0, r4
   212f0:	f7ff ffda 	bl	212a8 <__cxxabiv1::__is_gxx_exception_class(char*)>
   212f4:	b908      	cbnz	r0, 212fa <__cxa_call_terminate+0x16>
   212f6:	f7f9 f865 	bl	1a3c4 <std::terminate()>
   212fa:	f854 0c14 	ldr.w	r0, [r4, #-20]
   212fe:	f7f9 f859 	bl	1a3b4 <__cxxabiv1::__terminate(void (*)())>
   21302:	bf00      	nop

00021304 <__cxa_call_unexpected>:
   21304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21308:	b085      	sub	sp, #20
   2130a:	4602      	mov	r2, r0
   2130c:	f7ff ffcc 	bl	212a8 <__cxxabiv1::__is_gxx_exception_class(char*)>
   21310:	b138      	cbz	r0, 21322 <__cxa_call_unexpected+0x1e>
   21312:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   21316:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   2131a:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   2131e:	2600      	movs	r6, #0
   21320:	e005      	b.n	2132e <__cxa_call_unexpected+0x2a>
   21322:	4604      	mov	r4, r0
   21324:	4607      	mov	r7, r0
   21326:	2601      	movs	r6, #1
   21328:	4605      	mov	r5, r0
   2132a:	4680      	mov	r8, r0
   2132c:	4682      	mov	sl, r0
   2132e:	4610      	mov	r0, r2
   21330:	f7ff f988 	bl	20644 <__cxa_begin_catch>
   21334:	b10e      	cbz	r6, 2133a <__cxa_call_unexpected+0x36>
   21336:	f7f9 f853 	bl	1a3e0 <std::unexpected()>
   2133a:	4638      	mov	r0, r7
   2133c:	f7f9 f84c 	bl	1a3d8 <__cxxabiv1::__unexpected(void (*)())>
   21340:	f7ff f980 	bl	20644 <__cxa_begin_catch>
   21344:	b10e      	cbz	r6, 2134a <__cxa_call_unexpected+0x46>
   21346:	f7f9 f83d 	bl	1a3c4 <std::terminate()>
   2134a:	f7ff fa0d 	bl	20768 <__cxa_get_globals_fast>
   2134e:	6807      	ldr	r7, [r0, #0]
   21350:	f8df b090 	ldr.w	fp, [pc, #144]	; 213e4 <__cxa_call_unexpected+0xe0>
   21354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   21358:	2b01      	cmp	r3, #1
   2135a:	bf0c      	ite	eq
   2135c:	683b      	ldreq	r3, [r7, #0]
   2135e:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   21362:	9302      	str	r3, [sp, #8]
   21364:	f028 0303 	bic.w	r3, r8, #3
   21368:	9301      	str	r3, [sp, #4]
   2136a:	3720      	adds	r7, #32
   2136c:	f04f 0900 	mov.w	r9, #0
   21370:	45ca      	cmp	sl, r9
   21372:	dd20      	ble.n	213b6 <__cxa_call_unexpected+0xb2>
   21374:	f8d5 8000 	ldr.w	r8, [r5]
   21378:	f1b8 0f00 	cmp.w	r8, #0
   2137c:	d000      	beq.n	21380 <__cxa_call_unexpected+0x7c>
   2137e:	44a8      	add	r8, r5
   21380:	ab02      	add	r3, sp, #8
   21382:	2200      	movs	r2, #0
   21384:	4641      	mov	r1, r8
   21386:	4638      	mov	r0, r7
   21388:	f7ff f89a 	bl	204c0 <__cxa_type_match>
   2138c:	b108      	cbz	r0, 21392 <__cxa_call_unexpected+0x8e>
   2138e:	f7ff fd77 	bl	20e80 <__cxa_rethrow>
   21392:	f8d8 3000 	ldr.w	r3, [r8]
   21396:	9003      	str	r0, [sp, #12]
   21398:	aa03      	add	r2, sp, #12
   2139a:	4640      	mov	r0, r8
   2139c:	4659      	mov	r1, fp
   2139e:	f8d3 8010 	ldr.w	r8, [r3, #16]
   213a2:	2301      	movs	r3, #1
   213a4:	47c0      	blx	r8
   213a6:	9b01      	ldr	r3, [sp, #4]
   213a8:	2800      	cmp	r0, #0
   213aa:	bf18      	it	ne
   213ac:	4606      	movne	r6, r0
   213ae:	f109 0901 	add.w	r9, r9, #1
   213b2:	441d      	add	r5, r3
   213b4:	e7dc      	b.n	21370 <__cxa_call_unexpected+0x6c>
   213b6:	b146      	cbz	r6, 213ca <__cxa_call_unexpected+0xc6>
   213b8:	2004      	movs	r0, #4
   213ba:	f7ff ff39 	bl	21230 <__cxa_allocate_exception>
   213be:	4b07      	ldr	r3, [pc, #28]	; (213dc <__cxa_call_unexpected+0xd8>)
   213c0:	4a07      	ldr	r2, [pc, #28]	; (213e0 <__cxa_call_unexpected+0xdc>)
   213c2:	4908      	ldr	r1, [pc, #32]	; (213e4 <__cxa_call_unexpected+0xe0>)
   213c4:	6003      	str	r3, [r0, #0]
   213c6:	f7ff fd3f 	bl	20e48 <__cxa_throw>
   213ca:	4620      	mov	r0, r4
   213cc:	f7f8 fff2 	bl	1a3b4 <__cxxabiv1::__terminate(void (*)())>
   213d0:	f7ff f976 	bl	206c0 <__cxa_end_catch>
   213d4:	f7ff f974 	bl	206c0 <__cxa_end_catch>
   213d8:	f7ff f86c 	bl	204b4 <__cxa_end_cleanup>
   213dc:	200040fc 	.word	0x200040fc
   213e0:	0002074d 	.word	0x0002074d
   213e4:	200029c8 	.word	0x200029c8

000213e8 <selfrel_offset31>:
   213e8:	6803      	ldr	r3, [r0, #0]
   213ea:	005a      	lsls	r2, r3, #1
   213ec:	bf4c      	ite	mi
   213ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   213f2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   213f6:	4418      	add	r0, r3
   213f8:	4770      	bx	lr
   213fa:	bf00      	nop

000213fc <search_EIT_table>:
   213fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21400:	b329      	cbz	r1, 2144e <search_EIT_table+0x52>
   21402:	1e4f      	subs	r7, r1, #1
   21404:	4604      	mov	r4, r0
   21406:	4615      	mov	r5, r2
   21408:	463e      	mov	r6, r7
   2140a:	f04f 0800 	mov.w	r8, #0
   2140e:	eb08 0106 	add.w	r1, r8, r6
   21412:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   21416:	1049      	asrs	r1, r1, #1
   21418:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   2141c:	4648      	mov	r0, r9
   2141e:	f7ff ffe3 	bl	213e8 <selfrel_offset31>
   21422:	4603      	mov	r3, r0
   21424:	00c8      	lsls	r0, r1, #3
   21426:	3008      	adds	r0, #8
   21428:	428f      	cmp	r7, r1
   2142a:	4420      	add	r0, r4
   2142c:	d009      	beq.n	21442 <search_EIT_table+0x46>
   2142e:	42ab      	cmp	r3, r5
   21430:	d809      	bhi.n	21446 <search_EIT_table+0x4a>
   21432:	f7ff ffd9 	bl	213e8 <selfrel_offset31>
   21436:	3801      	subs	r0, #1
   21438:	42a8      	cmp	r0, r5
   2143a:	d20a      	bcs.n	21452 <search_EIT_table+0x56>
   2143c:	f101 0801 	add.w	r8, r1, #1
   21440:	e7e5      	b.n	2140e <search_EIT_table+0x12>
   21442:	42ab      	cmp	r3, r5
   21444:	d905      	bls.n	21452 <search_EIT_table+0x56>
   21446:	4588      	cmp	r8, r1
   21448:	d001      	beq.n	2144e <search_EIT_table+0x52>
   2144a:	1e4e      	subs	r6, r1, #1
   2144c:	e7df      	b.n	2140e <search_EIT_table+0x12>
   2144e:	f04f 0900 	mov.w	r9, #0
   21452:	4648      	mov	r0, r9
   21454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021458 <__gnu_unwind_get_pr_addr>:
   21458:	2801      	cmp	r0, #1
   2145a:	d007      	beq.n	2146c <__gnu_unwind_get_pr_addr+0x14>
   2145c:	2802      	cmp	r0, #2
   2145e:	d007      	beq.n	21470 <__gnu_unwind_get_pr_addr+0x18>
   21460:	4b04      	ldr	r3, [pc, #16]	; (21474 <__gnu_unwind_get_pr_addr+0x1c>)
   21462:	2800      	cmp	r0, #0
   21464:	bf0c      	ite	eq
   21466:	4618      	moveq	r0, r3
   21468:	2000      	movne	r0, #0
   2146a:	4770      	bx	lr
   2146c:	4802      	ldr	r0, [pc, #8]	; (21478 <__gnu_unwind_get_pr_addr+0x20>)
   2146e:	4770      	bx	lr
   21470:	4802      	ldr	r0, [pc, #8]	; (2147c <__gnu_unwind_get_pr_addr+0x24>)
   21472:	4770      	bx	lr
   21474:	00021b29 	.word	0x00021b29
   21478:	00021b31 	.word	0x00021b31
   2147c:	00021b39 	.word	0x00021b39

00021480 <get_eit_entry>:
   21480:	b530      	push	{r4, r5, lr}
   21482:	4b22      	ldr	r3, [pc, #136]	; (2150c <get_eit_entry+0x8c>)
   21484:	b083      	sub	sp, #12
   21486:	4604      	mov	r4, r0
   21488:	1e8d      	subs	r5, r1, #2
   2148a:	b343      	cbz	r3, 214de <get_eit_entry+0x5e>
   2148c:	a901      	add	r1, sp, #4
   2148e:	4628      	mov	r0, r5
   21490:	f3af 8000 	nop.w
   21494:	b1f0      	cbz	r0, 214d4 <get_eit_entry+0x54>
   21496:	9901      	ldr	r1, [sp, #4]
   21498:	462a      	mov	r2, r5
   2149a:	f7ff ffaf 	bl	213fc <search_EIT_table>
   2149e:	4601      	mov	r1, r0
   214a0:	b1c0      	cbz	r0, 214d4 <get_eit_entry+0x54>
   214a2:	f7ff ffa1 	bl	213e8 <selfrel_offset31>
   214a6:	684b      	ldr	r3, [r1, #4]
   214a8:	64a0      	str	r0, [r4, #72]	; 0x48
   214aa:	2b01      	cmp	r3, #1
   214ac:	d02b      	beq.n	21506 <get_eit_entry+0x86>
   214ae:	2b00      	cmp	r3, #0
   214b0:	f101 0004 	add.w	r0, r1, #4
   214b4:	db25      	blt.n	21502 <get_eit_entry+0x82>
   214b6:	f7ff ff97 	bl	213e8 <selfrel_offset31>
   214ba:	2300      	movs	r3, #0
   214bc:	6523      	str	r3, [r4, #80]	; 0x50
   214be:	6803      	ldr	r3, [r0, #0]
   214c0:	64e0      	str	r0, [r4, #76]	; 0x4c
   214c2:	2b00      	cmp	r3, #0
   214c4:	db12      	blt.n	214ec <get_eit_entry+0x6c>
   214c6:	f7ff ff8f 	bl	213e8 <selfrel_offset31>
   214ca:	4603      	mov	r3, r0
   214cc:	2000      	movs	r0, #0
   214ce:	6123      	str	r3, [r4, #16]
   214d0:	b003      	add	sp, #12
   214d2:	bd30      	pop	{r4, r5, pc}
   214d4:	2300      	movs	r3, #0
   214d6:	2009      	movs	r0, #9
   214d8:	6123      	str	r3, [r4, #16]
   214da:	b003      	add	sp, #12
   214dc:	bd30      	pop	{r4, r5, pc}
   214de:	4b0c      	ldr	r3, [pc, #48]	; (21510 <get_eit_entry+0x90>)
   214e0:	490c      	ldr	r1, [pc, #48]	; (21514 <get_eit_entry+0x94>)
   214e2:	1ac9      	subs	r1, r1, r3
   214e4:	10c9      	asrs	r1, r1, #3
   214e6:	4618      	mov	r0, r3
   214e8:	9101      	str	r1, [sp, #4]
   214ea:	e7d5      	b.n	21498 <get_eit_entry+0x18>
   214ec:	f3c3 6003 	ubfx	r0, r3, #24, #4
   214f0:	f7ff ffb2 	bl	21458 <__gnu_unwind_get_pr_addr>
   214f4:	1e03      	subs	r3, r0, #0
   214f6:	bf0c      	ite	eq
   214f8:	2009      	moveq	r0, #9
   214fa:	2000      	movne	r0, #0
   214fc:	6123      	str	r3, [r4, #16]
   214fe:	b003      	add	sp, #12
   21500:	bd30      	pop	{r4, r5, pc}
   21502:	2301      	movs	r3, #1
   21504:	e7da      	b.n	214bc <get_eit_entry+0x3c>
   21506:	2300      	movs	r3, #0
   21508:	2005      	movs	r0, #5
   2150a:	e7e0      	b.n	214ce <get_eit_entry+0x4e>
   2150c:	00000000 	.word	0x00000000
   21510:	00028c74 	.word	0x00028c74
   21514:	00028efc 	.word	0x00028efc

00021518 <restore_non_core_regs>:
   21518:	6803      	ldr	r3, [r0, #0]
   2151a:	07da      	lsls	r2, r3, #31
   2151c:	b510      	push	{r4, lr}
   2151e:	4604      	mov	r4, r0
   21520:	d406      	bmi.n	21530 <restore_non_core_regs+0x18>
   21522:	079b      	lsls	r3, r3, #30
   21524:	f100 0048 	add.w	r0, r0, #72	; 0x48
   21528:	d509      	bpl.n	2153e <restore_non_core_regs+0x26>
   2152a:	f000 fc75 	bl	21e18 <__gnu_Unwind_Restore_VFP_D>
   2152e:	6823      	ldr	r3, [r4, #0]
   21530:	0759      	lsls	r1, r3, #29
   21532:	d509      	bpl.n	21548 <restore_non_core_regs+0x30>
   21534:	071a      	lsls	r2, r3, #28
   21536:	d50e      	bpl.n	21556 <restore_non_core_regs+0x3e>
   21538:	06db      	lsls	r3, r3, #27
   2153a:	d513      	bpl.n	21564 <restore_non_core_regs+0x4c>
   2153c:	bd10      	pop	{r4, pc}
   2153e:	f000 fc63 	bl	21e08 <__gnu_Unwind_Restore_VFP>
   21542:	6823      	ldr	r3, [r4, #0]
   21544:	0759      	lsls	r1, r3, #29
   21546:	d4f5      	bmi.n	21534 <restore_non_core_regs+0x1c>
   21548:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   2154c:	f000 fc6c 	bl	21e28 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   21550:	6823      	ldr	r3, [r4, #0]
   21552:	071a      	lsls	r2, r3, #28
   21554:	d4f0      	bmi.n	21538 <restore_non_core_regs+0x20>
   21556:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2155a:	f000 fc6d 	bl	21e38 <__gnu_Unwind_Restore_WMMXD>
   2155e:	6823      	ldr	r3, [r4, #0]
   21560:	06db      	lsls	r3, r3, #27
   21562:	d4eb      	bmi.n	2153c <restore_non_core_regs+0x24>
   21564:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   21568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2156c:	f000 bca8 	b.w	21ec0 <__gnu_Unwind_Restore_WMMXC>

00021570 <_Unwind_decode_typeinfo_ptr.constprop.0>:
   21570:	4603      	mov	r3, r0
   21572:	6800      	ldr	r0, [r0, #0]
   21574:	b100      	cbz	r0, 21578 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
   21576:	4418      	add	r0, r3
   21578:	4770      	bx	lr
   2157a:	bf00      	nop

0002157c <_Unwind_DebugHook>:
   2157c:	4770      	bx	lr
   2157e:	bf00      	nop

00021580 <unwind_phase2>:
   21580:	b570      	push	{r4, r5, r6, lr}
   21582:	4604      	mov	r4, r0
   21584:	460e      	mov	r6, r1
   21586:	6c31      	ldr	r1, [r6, #64]	; 0x40
   21588:	4620      	mov	r0, r4
   2158a:	f7ff ff79 	bl	21480 <get_eit_entry>
   2158e:	4605      	mov	r5, r0
   21590:	b988      	cbnz	r0, 215b6 <unwind_phase2+0x36>
   21592:	6c32      	ldr	r2, [r6, #64]	; 0x40
   21594:	6162      	str	r2, [r4, #20]
   21596:	6923      	ldr	r3, [r4, #16]
   21598:	4632      	mov	r2, r6
   2159a:	4621      	mov	r1, r4
   2159c:	2001      	movs	r0, #1
   2159e:	4798      	blx	r3
   215a0:	2808      	cmp	r0, #8
   215a2:	d0f0      	beq.n	21586 <unwind_phase2+0x6>
   215a4:	2807      	cmp	r0, #7
   215a6:	d106      	bne.n	215b6 <unwind_phase2+0x36>
   215a8:	4628      	mov	r0, r5
   215aa:	6c31      	ldr	r1, [r6, #64]	; 0x40
   215ac:	f7ff ffe6 	bl	2157c <_Unwind_DebugHook>
   215b0:	1d30      	adds	r0, r6, #4
   215b2:	f000 fc1d 	bl	21df0 <__restore_core_regs>
   215b6:	f7f7 fc7f 	bl	18eb8 <abort>
   215ba:	bf00      	nop

000215bc <unwind_phase2_forced>:
   215bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   215c0:	1d0d      	adds	r5, r1, #4
   215c2:	f8d0 800c 	ldr.w	r8, [r0, #12]
   215c6:	f8d0 9018 	ldr.w	r9, [r0, #24]
   215ca:	4607      	mov	r7, r0
   215cc:	4614      	mov	r4, r2
   215ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   215d0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   215d4:	f10d 0c0c 	add.w	ip, sp, #12
   215d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   215dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   215de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   215e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   215e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   215e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   215ec:	ae02      	add	r6, sp, #8
   215ee:	f04f 0e00 	mov.w	lr, #0
   215f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   215f6:	f8c6 e000 	str.w	lr, [r6]
   215fa:	e020      	b.n	2163e <unwind_phase2_forced+0x82>
   215fc:	6c33      	ldr	r3, [r6, #64]	; 0x40
   215fe:	617b      	str	r3, [r7, #20]
   21600:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   21604:	4631      	mov	r1, r6
   21606:	a87a      	add	r0, sp, #488	; 0x1e8
   21608:	f7f7 fac6 	bl	18b98 <memcpy>
   2160c:	693b      	ldr	r3, [r7, #16]
   2160e:	aa7a      	add	r2, sp, #488	; 0x1e8
   21610:	4639      	mov	r1, r7
   21612:	4650      	mov	r0, sl
   21614:	4798      	blx	r3
   21616:	9b88      	ldr	r3, [sp, #544]	; 0x220
   21618:	6473      	str	r3, [r6, #68]	; 0x44
   2161a:	4621      	mov	r1, r4
   2161c:	e9cd 6900 	strd	r6, r9, [sp]
   21620:	4605      	mov	r5, r0
   21622:	463b      	mov	r3, r7
   21624:	463a      	mov	r2, r7
   21626:	2001      	movs	r0, #1
   21628:	47c0      	blx	r8
   2162a:	4604      	mov	r4, r0
   2162c:	b9e0      	cbnz	r0, 21668 <unwind_phase2_forced+0xac>
   2162e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   21632:	a97a      	add	r1, sp, #488	; 0x1e8
   21634:	4630      	mov	r0, r6
   21636:	f7f7 faaf 	bl	18b98 <memcpy>
   2163a:	2d08      	cmp	r5, #8
   2163c:	d11a      	bne.n	21674 <unwind_phase2_forced+0xb8>
   2163e:	6c31      	ldr	r1, [r6, #64]	; 0x40
   21640:	4638      	mov	r0, r7
   21642:	f7ff ff1d 	bl	21480 <get_eit_entry>
   21646:	3409      	adds	r4, #9
   21648:	fa5f fa84 	uxtb.w	sl, r4
   2164c:	4605      	mov	r5, r0
   2164e:	2800      	cmp	r0, #0
   21650:	d0d4      	beq.n	215fc <unwind_phase2_forced+0x40>
   21652:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   21654:	6473      	str	r3, [r6, #68]	; 0x44
   21656:	463a      	mov	r2, r7
   21658:	e9cd 6900 	strd	r6, r9, [sp]
   2165c:	463b      	mov	r3, r7
   2165e:	f04a 0110 	orr.w	r1, sl, #16
   21662:	2001      	movs	r0, #1
   21664:	47c0      	blx	r8
   21666:	b100      	cbz	r0, 2166a <unwind_phase2_forced+0xae>
   21668:	2509      	movs	r5, #9
   2166a:	4628      	mov	r0, r5
   2166c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   21670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21674:	2d07      	cmp	r5, #7
   21676:	d1f7      	bne.n	21668 <unwind_phase2_forced+0xac>
   21678:	4620      	mov	r0, r4
   2167a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   2167c:	f7ff ff7e 	bl	2157c <_Unwind_DebugHook>
   21680:	a803      	add	r0, sp, #12
   21682:	f000 fbb5 	bl	21df0 <__restore_core_regs>
   21686:	bf00      	nop

00021688 <__gnu_Unwind_RaiseException>:
   21688:	b5f0      	push	{r4, r5, r6, r7, lr}
   2168a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2168c:	640b      	str	r3, [r1, #64]	; 0x40
   2168e:	f101 0c04 	add.w	ip, r1, #4
   21692:	460e      	mov	r6, r1
   21694:	4605      	mov	r5, r0
   21696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2169a:	b0f9      	sub	sp, #484	; 0x1e4
   2169c:	ac01      	add	r4, sp, #4
   2169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   216a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   216a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   216a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   216aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   216ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   216b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   216b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   216b8:	9700      	str	r7, [sp, #0]
   216ba:	e006      	b.n	216ca <__gnu_Unwind_RaiseException+0x42>
   216bc:	692b      	ldr	r3, [r5, #16]
   216be:	466a      	mov	r2, sp
   216c0:	4629      	mov	r1, r5
   216c2:	4798      	blx	r3
   216c4:	2808      	cmp	r0, #8
   216c6:	4604      	mov	r4, r0
   216c8:	d108      	bne.n	216dc <__gnu_Unwind_RaiseException+0x54>
   216ca:	9910      	ldr	r1, [sp, #64]	; 0x40
   216cc:	4628      	mov	r0, r5
   216ce:	f7ff fed7 	bl	21480 <get_eit_entry>
   216d2:	2800      	cmp	r0, #0
   216d4:	d0f2      	beq.n	216bc <__gnu_Unwind_RaiseException+0x34>
   216d6:	2009      	movs	r0, #9
   216d8:	b079      	add	sp, #484	; 0x1e4
   216da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   216dc:	4668      	mov	r0, sp
   216de:	f7ff ff1b 	bl	21518 <restore_non_core_regs>
   216e2:	2c06      	cmp	r4, #6
   216e4:	d1f7      	bne.n	216d6 <__gnu_Unwind_RaiseException+0x4e>
   216e6:	4631      	mov	r1, r6
   216e8:	4628      	mov	r0, r5
   216ea:	f7ff ff49 	bl	21580 <unwind_phase2>
   216ee:	bf00      	nop

000216f0 <__gnu_Unwind_ForcedUnwind>:
   216f0:	60c1      	str	r1, [r0, #12]
   216f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   216f4:	6182      	str	r2, [r0, #24]
   216f6:	6419      	str	r1, [r3, #64]	; 0x40
   216f8:	2200      	movs	r2, #0
   216fa:	4619      	mov	r1, r3
   216fc:	f7ff bf5e 	b.w	215bc <unwind_phase2_forced>

00021700 <__gnu_Unwind_Resume>:
   21700:	b570      	push	{r4, r5, r6, lr}
   21702:	68c6      	ldr	r6, [r0, #12]
   21704:	6943      	ldr	r3, [r0, #20]
   21706:	640b      	str	r3, [r1, #64]	; 0x40
   21708:	b9ae      	cbnz	r6, 21736 <__gnu_Unwind_Resume+0x36>
   2170a:	6903      	ldr	r3, [r0, #16]
   2170c:	460a      	mov	r2, r1
   2170e:	4604      	mov	r4, r0
   21710:	460d      	mov	r5, r1
   21712:	4601      	mov	r1, r0
   21714:	2002      	movs	r0, #2
   21716:	4798      	blx	r3
   21718:	2807      	cmp	r0, #7
   2171a:	d005      	beq.n	21728 <__gnu_Unwind_Resume+0x28>
   2171c:	2808      	cmp	r0, #8
   2171e:	d10f      	bne.n	21740 <__gnu_Unwind_Resume+0x40>
   21720:	4629      	mov	r1, r5
   21722:	4620      	mov	r0, r4
   21724:	f7ff ff2c 	bl	21580 <unwind_phase2>
   21728:	4630      	mov	r0, r6
   2172a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2172c:	f7ff ff26 	bl	2157c <_Unwind_DebugHook>
   21730:	1d28      	adds	r0, r5, #4
   21732:	f000 fb5d 	bl	21df0 <__restore_core_regs>
   21736:	2201      	movs	r2, #1
   21738:	f7ff ff40 	bl	215bc <unwind_phase2_forced>
   2173c:	f7f7 fbbc 	bl	18eb8 <abort>
   21740:	f7f7 fbba 	bl	18eb8 <abort>

00021744 <__gnu_Unwind_Resume_or_Rethrow>:
   21744:	68c2      	ldr	r2, [r0, #12]
   21746:	b122      	cbz	r2, 21752 <__gnu_Unwind_Resume_or_Rethrow+0xe>
   21748:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   2174a:	640a      	str	r2, [r1, #64]	; 0x40
   2174c:	2200      	movs	r2, #0
   2174e:	f7ff bf35 	b.w	215bc <unwind_phase2_forced>
   21752:	f7ff bf99 	b.w	21688 <__gnu_Unwind_RaiseException>
   21756:	bf00      	nop

00021758 <_Unwind_Complete>:
   21758:	4770      	bx	lr
   2175a:	bf00      	nop

0002175c <_Unwind_DeleteException>:
   2175c:	6883      	ldr	r3, [r0, #8]
   2175e:	4601      	mov	r1, r0
   21760:	b10b      	cbz	r3, 21766 <_Unwind_DeleteException+0xa>
   21762:	2001      	movs	r0, #1
   21764:	4718      	bx	r3
   21766:	4770      	bx	lr

00021768 <_Unwind_VRS_Get>:
   21768:	2901      	cmp	r1, #1
   2176a:	d012      	beq.n	21792 <_Unwind_VRS_Get+0x2a>
   2176c:	d809      	bhi.n	21782 <_Unwind_VRS_Get+0x1a>
   2176e:	b973      	cbnz	r3, 2178e <_Unwind_VRS_Get+0x26>
   21770:	2a0f      	cmp	r2, #15
   21772:	d80c      	bhi.n	2178e <_Unwind_VRS_Get+0x26>
   21774:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   21778:	4618      	mov	r0, r3
   2177a:	6853      	ldr	r3, [r2, #4]
   2177c:	9a00      	ldr	r2, [sp, #0]
   2177e:	6013      	str	r3, [r2, #0]
   21780:	4770      	bx	lr
   21782:	3903      	subs	r1, #3
   21784:	2901      	cmp	r1, #1
   21786:	bf94      	ite	ls
   21788:	2001      	movls	r0, #1
   2178a:	2002      	movhi	r0, #2
   2178c:	4770      	bx	lr
   2178e:	2002      	movs	r0, #2
   21790:	4770      	bx	lr
   21792:	4608      	mov	r0, r1
   21794:	4770      	bx	lr
   21796:	bf00      	nop

00021798 <_Unwind_GetGR>:
   21798:	b500      	push	{lr}
   2179a:	b085      	sub	sp, #20
   2179c:	460a      	mov	r2, r1
   2179e:	2300      	movs	r3, #0
   217a0:	a903      	add	r1, sp, #12
   217a2:	9100      	str	r1, [sp, #0]
   217a4:	4619      	mov	r1, r3
   217a6:	f7ff ffdf 	bl	21768 <_Unwind_VRS_Get>
   217aa:	9803      	ldr	r0, [sp, #12]
   217ac:	b005      	add	sp, #20
   217ae:	f85d fb04 	ldr.w	pc, [sp], #4
   217b2:	bf00      	nop

000217b4 <_Unwind_VRS_Set>:
   217b4:	2901      	cmp	r1, #1
   217b6:	d012      	beq.n	217de <_Unwind_VRS_Set+0x2a>
   217b8:	d809      	bhi.n	217ce <_Unwind_VRS_Set+0x1a>
   217ba:	b973      	cbnz	r3, 217da <_Unwind_VRS_Set+0x26>
   217bc:	2a0f      	cmp	r2, #15
   217be:	d80c      	bhi.n	217da <_Unwind_VRS_Set+0x26>
   217c0:	9900      	ldr	r1, [sp, #0]
   217c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   217c6:	6809      	ldr	r1, [r1, #0]
   217c8:	6051      	str	r1, [r2, #4]
   217ca:	4618      	mov	r0, r3
   217cc:	4770      	bx	lr
   217ce:	3903      	subs	r1, #3
   217d0:	2901      	cmp	r1, #1
   217d2:	bf94      	ite	ls
   217d4:	2001      	movls	r0, #1
   217d6:	2002      	movhi	r0, #2
   217d8:	4770      	bx	lr
   217da:	2002      	movs	r0, #2
   217dc:	4770      	bx	lr
   217de:	4608      	mov	r0, r1
   217e0:	4770      	bx	lr
   217e2:	bf00      	nop

000217e4 <_Unwind_SetGR>:
   217e4:	b510      	push	{r4, lr}
   217e6:	b084      	sub	sp, #16
   217e8:	2300      	movs	r3, #0
   217ea:	ac03      	add	r4, sp, #12
   217ec:	9203      	str	r2, [sp, #12]
   217ee:	9400      	str	r4, [sp, #0]
   217f0:	460a      	mov	r2, r1
   217f2:	4619      	mov	r1, r3
   217f4:	f7ff ffde 	bl	217b4 <_Unwind_VRS_Set>
   217f8:	b004      	add	sp, #16
   217fa:	bd10      	pop	{r4, pc}

000217fc <__gnu_Unwind_Backtrace>:
   217fc:	b570      	push	{r4, r5, r6, lr}
   217fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   21800:	6413      	str	r3, [r2, #64]	; 0x40
   21802:	f102 0c04 	add.w	ip, r2, #4
   21806:	4605      	mov	r5, r0
   21808:	460c      	mov	r4, r1
   2180a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2180e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   21812:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
   21816:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2181a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2181e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   21822:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   21826:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2182a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2182e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21832:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   21836:	9616      	str	r6, [sp, #88]	; 0x58
   21838:	e010      	b.n	2185c <__gnu_Unwind_Backtrace+0x60>
   2183a:	f7ff ffd3 	bl	217e4 <_Unwind_SetGR>
   2183e:	4621      	mov	r1, r4
   21840:	a816      	add	r0, sp, #88	; 0x58
   21842:	47a8      	blx	r5
   21844:	4603      	mov	r3, r0
   21846:	aa16      	add	r2, sp, #88	; 0x58
   21848:	4669      	mov	r1, sp
   2184a:	2008      	movs	r0, #8
   2184c:	b983      	cbnz	r3, 21870 <__gnu_Unwind_Backtrace+0x74>
   2184e:	9b04      	ldr	r3, [sp, #16]
   21850:	4798      	blx	r3
   21852:	2805      	cmp	r0, #5
   21854:	4606      	mov	r6, r0
   21856:	d00c      	beq.n	21872 <__gnu_Unwind_Backtrace+0x76>
   21858:	2809      	cmp	r0, #9
   2185a:	d009      	beq.n	21870 <__gnu_Unwind_Backtrace+0x74>
   2185c:	9926      	ldr	r1, [sp, #152]	; 0x98
   2185e:	4668      	mov	r0, sp
   21860:	f7ff fe0e 	bl	21480 <get_eit_entry>
   21864:	4603      	mov	r3, r0
   21866:	466a      	mov	r2, sp
   21868:	210c      	movs	r1, #12
   2186a:	a816      	add	r0, sp, #88	; 0x58
   2186c:	2b00      	cmp	r3, #0
   2186e:	d0e4      	beq.n	2183a <__gnu_Unwind_Backtrace+0x3e>
   21870:	2609      	movs	r6, #9
   21872:	a816      	add	r0, sp, #88	; 0x58
   21874:	f7ff fe50 	bl	21518 <restore_non_core_regs>
   21878:	4630      	mov	r0, r6
   2187a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
   2187e:	bd70      	pop	{r4, r5, r6, pc}

00021880 <__gnu_unwind_pr_common>:
   21880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21884:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   21886:	b089      	sub	sp, #36	; 0x24
   21888:	461e      	mov	r6, r3
   2188a:	f854 3b04 	ldr.w	r3, [r4], #4
   2188e:	9406      	str	r4, [sp, #24]
   21890:	460d      	mov	r5, r1
   21892:	4617      	mov	r7, r2
   21894:	f000 0803 	and.w	r8, r0, #3
   21898:	2e00      	cmp	r6, #0
   2189a:	d079      	beq.n	21990 <__gnu_unwind_pr_common+0x110>
   2189c:	0c1a      	lsrs	r2, r3, #16
   2189e:	f88d 201d 	strb.w	r2, [sp, #29]
   218a2:	041b      	lsls	r3, r3, #16
   218a4:	b2d2      	uxtb	r2, r2
   218a6:	9305      	str	r3, [sp, #20]
   218a8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   218ac:	2302      	movs	r3, #2
   218ae:	f88d 301c 	strb.w	r3, [sp, #28]
   218b2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   218b4:	f1b8 0f02 	cmp.w	r8, #2
   218b8:	bf08      	it	eq
   218ba:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   218bc:	f013 0301 	ands.w	r3, r3, #1
   218c0:	d00c      	beq.n	218dc <__gnu_unwind_pr_common+0x5c>
   218c2:	a905      	add	r1, sp, #20
   218c4:	4638      	mov	r0, r7
   218c6:	f000 fb95 	bl	21ff4 <__gnu_unwind_execute>
   218ca:	b918      	cbnz	r0, 218d4 <__gnu_unwind_pr_common+0x54>
   218cc:	2008      	movs	r0, #8
   218ce:	b009      	add	sp, #36	; 0x24
   218d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218d4:	2009      	movs	r0, #9
   218d6:	b009      	add	sp, #36	; 0x24
   218d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218dc:	f8d4 a000 	ldr.w	sl, [r4]
   218e0:	f1ba 0f00 	cmp.w	sl, #0
   218e4:	d0ed      	beq.n	218c2 <__gnu_unwind_pr_common+0x42>
   218e6:	9301      	str	r3, [sp, #4]
   218e8:	f000 0308 	and.w	r3, r0, #8
   218ec:	9302      	str	r3, [sp, #8]
   218ee:	2e02      	cmp	r6, #2
   218f0:	d04a      	beq.n	21988 <__gnu_unwind_pr_common+0x108>
   218f2:	f8b4 a000 	ldrh.w	sl, [r4]
   218f6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   218fa:	3404      	adds	r4, #4
   218fc:	6cab      	ldr	r3, [r5, #72]	; 0x48
   218fe:	f029 0b01 	bic.w	fp, r9, #1
   21902:	210f      	movs	r1, #15
   21904:	4638      	mov	r0, r7
   21906:	449b      	add	fp, r3
   21908:	f7ff ff46 	bl	21798 <_Unwind_GetGR>
   2190c:	4583      	cmp	fp, r0
   2190e:	d839      	bhi.n	21984 <__gnu_unwind_pr_common+0x104>
   21910:	f02a 0201 	bic.w	r2, sl, #1
   21914:	445a      	add	r2, fp
   21916:	4282      	cmp	r2, r0
   21918:	bf94      	ite	ls
   2191a:	2200      	movls	r2, #0
   2191c:	2201      	movhi	r2, #1
   2191e:	ea4f 0349 	mov.w	r3, r9, lsl #1
   21922:	f003 0302 	and.w	r3, r3, #2
   21926:	f00a 0a01 	and.w	sl, sl, #1
   2192a:	ea43 030a 	orr.w	r3, r3, sl
   2192e:	2b01      	cmp	r3, #1
   21930:	d04b      	beq.n	219ca <__gnu_unwind_pr_common+0x14a>
   21932:	2b02      	cmp	r3, #2
   21934:	d032      	beq.n	2199c <__gnu_unwind_pr_common+0x11c>
   21936:	2b00      	cmp	r3, #0
   21938:	d1cc      	bne.n	218d4 <__gnu_unwind_pr_common+0x54>
   2193a:	f1b8 0f00 	cmp.w	r8, #0
   2193e:	d002      	beq.n	21946 <__gnu_unwind_pr_common+0xc6>
   21940:	2a00      	cmp	r2, #0
   21942:	f040 80cd 	bne.w	21ae0 <__gnu_unwind_pr_common+0x260>
   21946:	3404      	adds	r4, #4
   21948:	f8d4 a000 	ldr.w	sl, [r4]
   2194c:	f1ba 0f00 	cmp.w	sl, #0
   21950:	d1cd      	bne.n	218ee <__gnu_unwind_pr_common+0x6e>
   21952:	a905      	add	r1, sp, #20
   21954:	4638      	mov	r0, r7
   21956:	f000 fb4d 	bl	21ff4 <__gnu_unwind_execute>
   2195a:	2800      	cmp	r0, #0
   2195c:	d1ba      	bne.n	218d4 <__gnu_unwind_pr_common+0x54>
   2195e:	9b01      	ldr	r3, [sp, #4]
   21960:	2b00      	cmp	r3, #0
   21962:	d0b3      	beq.n	218cc <__gnu_unwind_pr_common+0x4c>
   21964:	210f      	movs	r1, #15
   21966:	4638      	mov	r0, r7
   21968:	f7ff ff16 	bl	21798 <_Unwind_GetGR>
   2196c:	210e      	movs	r1, #14
   2196e:	4602      	mov	r2, r0
   21970:	4638      	mov	r0, r7
   21972:	f7ff ff37 	bl	217e4 <_Unwind_SetGR>
   21976:	4638      	mov	r0, r7
   21978:	4a6a      	ldr	r2, [pc, #424]	; (21b24 <__gnu_unwind_pr_common+0x2a4>)
   2197a:	210f      	movs	r1, #15
   2197c:	f7ff ff32 	bl	217e4 <_Unwind_SetGR>
   21980:	2007      	movs	r0, #7
   21982:	e7a8      	b.n	218d6 <__gnu_unwind_pr_common+0x56>
   21984:	2200      	movs	r2, #0
   21986:	e7ca      	b.n	2191e <__gnu_unwind_pr_common+0x9e>
   21988:	f8d4 9004 	ldr.w	r9, [r4, #4]
   2198c:	3408      	adds	r4, #8
   2198e:	e7b5      	b.n	218fc <__gnu_unwind_pr_common+0x7c>
   21990:	021b      	lsls	r3, r3, #8
   21992:	9305      	str	r3, [sp, #20]
   21994:	f88d 601d 	strb.w	r6, [sp, #29]
   21998:	2303      	movs	r3, #3
   2199a:	e788      	b.n	218ae <__gnu_unwind_pr_common+0x2e>
   2199c:	f8d4 9000 	ldr.w	r9, [r4]
   219a0:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
   219a4:	f1b8 0f00 	cmp.w	r8, #0
   219a8:	d146      	bne.n	21a38 <__gnu_unwind_pr_common+0x1b8>
   219aa:	b12a      	cbz	r2, 219b8 <__gnu_unwind_pr_common+0x138>
   219ac:	9b02      	ldr	r3, [sp, #8]
   219ae:	2b00      	cmp	r3, #0
   219b0:	d05b      	beq.n	21a6a <__gnu_unwind_pr_common+0x1ea>
   219b2:	f1bb 0f00 	cmp.w	fp, #0
   219b6:	d073      	beq.n	21aa0 <__gnu_unwind_pr_common+0x220>
   219b8:	f1b9 0f00 	cmp.w	r9, #0
   219bc:	da00      	bge.n	219c0 <__gnu_unwind_pr_common+0x140>
   219be:	3404      	adds	r4, #4
   219c0:	f10b 0b01 	add.w	fp, fp, #1
   219c4:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   219c8:	e7be      	b.n	21948 <__gnu_unwind_pr_common+0xc8>
   219ca:	f1b8 0f00 	cmp.w	r8, #0
   219ce:	d119      	bne.n	21a04 <__gnu_unwind_pr_common+0x184>
   219d0:	b1b2      	cbz	r2, 21a00 <__gnu_unwind_pr_common+0x180>
   219d2:	6861      	ldr	r1, [r4, #4]
   219d4:	6822      	ldr	r2, [r4, #0]
   219d6:	1c88      	adds	r0, r1, #2
   219d8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   219dc:	f43f af7a 	beq.w	218d4 <__gnu_unwind_pr_common+0x54>
   219e0:	f105 0358 	add.w	r3, r5, #88	; 0x58
   219e4:	3101      	adds	r1, #1
   219e6:	9304      	str	r3, [sp, #16]
   219e8:	f000 808e 	beq.w	21b08 <__gnu_unwind_pr_common+0x288>
   219ec:	1d20      	adds	r0, r4, #4
   219ee:	f7ff fdbf 	bl	21570 <_Unwind_decode_typeinfo_ptr.constprop.0>
   219f2:	ab04      	add	r3, sp, #16
   219f4:	4601      	mov	r1, r0
   219f6:	4628      	mov	r0, r5
   219f8:	f7fe fd62 	bl	204c0 <__cxa_type_match>
   219fc:	2800      	cmp	r0, #0
   219fe:	d159      	bne.n	21ab4 <__gnu_unwind_pr_common+0x234>
   21a00:	3408      	adds	r4, #8
   21a02:	e7a1      	b.n	21948 <__gnu_unwind_pr_common+0xc8>
   21a04:	210d      	movs	r1, #13
   21a06:	4638      	mov	r0, r7
   21a08:	f8d5 9020 	ldr.w	r9, [r5, #32]
   21a0c:	f7ff fec4 	bl	21798 <_Unwind_GetGR>
   21a10:	4581      	cmp	r9, r0
   21a12:	d1f5      	bne.n	21a00 <__gnu_unwind_pr_common+0x180>
   21a14:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21a16:	429c      	cmp	r4, r3
   21a18:	d1f2      	bne.n	21a00 <__gnu_unwind_pr_common+0x180>
   21a1a:	4620      	mov	r0, r4
   21a1c:	f7ff fce4 	bl	213e8 <selfrel_offset31>
   21a20:	210f      	movs	r1, #15
   21a22:	4602      	mov	r2, r0
   21a24:	4638      	mov	r0, r7
   21a26:	f7ff fedd 	bl	217e4 <_Unwind_SetGR>
   21a2a:	4638      	mov	r0, r7
   21a2c:	462a      	mov	r2, r5
   21a2e:	2100      	movs	r1, #0
   21a30:	f7ff fed8 	bl	217e4 <_Unwind_SetGR>
   21a34:	2007      	movs	r0, #7
   21a36:	e74e      	b.n	218d6 <__gnu_unwind_pr_common+0x56>
   21a38:	210d      	movs	r1, #13
   21a3a:	4638      	mov	r0, r7
   21a3c:	f8d5 a020 	ldr.w	sl, [r5, #32]
   21a40:	f7ff feaa 	bl	21798 <_Unwind_GetGR>
   21a44:	4582      	cmp	sl, r0
   21a46:	d1b7      	bne.n	219b8 <__gnu_unwind_pr_common+0x138>
   21a48:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21a4a:	429c      	cmp	r4, r3
   21a4c:	d1b4      	bne.n	219b8 <__gnu_unwind_pr_common+0x138>
   21a4e:	2304      	movs	r3, #4
   21a50:	2200      	movs	r2, #0
   21a52:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
   21a56:	18e3      	adds	r3, r4, r3
   21a58:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   21a5c:	636b      	str	r3, [r5, #52]	; 0x34
   21a5e:	6823      	ldr	r3, [r4, #0]
   21a60:	2b00      	cmp	r3, #0
   21a62:	db59      	blt.n	21b18 <__gnu_unwind_pr_common+0x298>
   21a64:	2301      	movs	r3, #1
   21a66:	9301      	str	r3, [sp, #4]
   21a68:	e7aa      	b.n	219c0 <__gnu_unwind_pr_common+0x140>
   21a6a:	4699      	mov	r9, r3
   21a6c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   21a70:	f8cd 800c 	str.w	r8, [sp, #12]
   21a74:	f104 0a04 	add.w	sl, r4, #4
   21a78:	46b0      	mov	r8, r6
   21a7a:	461e      	mov	r6, r3
   21a7c:	e00e      	b.n	21a9c <__gnu_unwind_pr_common+0x21c>
   21a7e:	4650      	mov	r0, sl
   21a80:	9604      	str	r6, [sp, #16]
   21a82:	f7ff fd75 	bl	21570 <_Unwind_decode_typeinfo_ptr.constprop.0>
   21a86:	2200      	movs	r2, #0
   21a88:	4601      	mov	r1, r0
   21a8a:	ab04      	add	r3, sp, #16
   21a8c:	4628      	mov	r0, r5
   21a8e:	f109 0901 	add.w	r9, r9, #1
   21a92:	f10a 0a04 	add.w	sl, sl, #4
   21a96:	f7fe fd13 	bl	204c0 <__cxa_type_match>
   21a9a:	b9d8      	cbnz	r0, 21ad4 <__gnu_unwind_pr_common+0x254>
   21a9c:	45d9      	cmp	r9, fp
   21a9e:	d1ee      	bne.n	21a7e <__gnu_unwind_pr_common+0x1fe>
   21aa0:	210d      	movs	r1, #13
   21aa2:	4638      	mov	r0, r7
   21aa4:	f7ff fe78 	bl	21798 <_Unwind_GetGR>
   21aa8:	9b04      	ldr	r3, [sp, #16]
   21aaa:	6228      	str	r0, [r5, #32]
   21aac:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   21ab0:	2006      	movs	r0, #6
   21ab2:	e710      	b.n	218d6 <__gnu_unwind_pr_common+0x56>
   21ab4:	4681      	mov	r9, r0
   21ab6:	210d      	movs	r1, #13
   21ab8:	4638      	mov	r0, r7
   21aba:	f7ff fe6d 	bl	21798 <_Unwind_GetGR>
   21abe:	f1b9 0f02 	cmp.w	r9, #2
   21ac2:	bf04      	itt	eq
   21ac4:	462b      	moveq	r3, r5
   21ac6:	9a04      	ldreq	r2, [sp, #16]
   21ac8:	6228      	str	r0, [r5, #32]
   21aca:	bf14      	ite	ne
   21acc:	9b04      	ldrne	r3, [sp, #16]
   21ace:	f843 2f2c 	streq.w	r2, [r3, #44]!
   21ad2:	e7eb      	b.n	21aac <__gnu_unwind_pr_common+0x22c>
   21ad4:	4646      	mov	r6, r8
   21ad6:	f8d4 9000 	ldr.w	r9, [r4]
   21ada:	f8dd 800c 	ldr.w	r8, [sp, #12]
   21ade:	e76b      	b.n	219b8 <__gnu_unwind_pr_common+0x138>
   21ae0:	4620      	mov	r0, r4
   21ae2:	f7ff fc81 	bl	213e8 <selfrel_offset31>
   21ae6:	3404      	adds	r4, #4
   21ae8:	4602      	mov	r2, r0
   21aea:	63ac      	str	r4, [r5, #56]	; 0x38
   21aec:	4628      	mov	r0, r5
   21aee:	4614      	mov	r4, r2
   21af0:	f7fe fd3e 	bl	20570 <__cxa_begin_cleanup>
   21af4:	2800      	cmp	r0, #0
   21af6:	f43f aeed 	beq.w	218d4 <__gnu_unwind_pr_common+0x54>
   21afa:	4638      	mov	r0, r7
   21afc:	4622      	mov	r2, r4
   21afe:	210f      	movs	r1, #15
   21b00:	f7ff fe70 	bl	217e4 <_Unwind_SetGR>
   21b04:	2007      	movs	r0, #7
   21b06:	e6e6      	b.n	218d6 <__gnu_unwind_pr_common+0x56>
   21b08:	210d      	movs	r1, #13
   21b0a:	4638      	mov	r0, r7
   21b0c:	9301      	str	r3, [sp, #4]
   21b0e:	f7ff fe43 	bl	21798 <_Unwind_GetGR>
   21b12:	9b01      	ldr	r3, [sp, #4]
   21b14:	6228      	str	r0, [r5, #32]
   21b16:	e7c9      	b.n	21aac <__gnu_unwind_pr_common+0x22c>
   21b18:	f10b 0001 	add.w	r0, fp, #1
   21b1c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   21b20:	e77c      	b.n	21a1c <__gnu_unwind_pr_common+0x19c>
   21b22:	bf00      	nop
   21b24:	00021305 	.word	0x00021305

00021b28 <__aeabi_unwind_cpp_pr0>:
   21b28:	2300      	movs	r3, #0
   21b2a:	f7ff bea9 	b.w	21880 <__gnu_unwind_pr_common>
   21b2e:	bf00      	nop

00021b30 <__aeabi_unwind_cpp_pr1>:
   21b30:	2301      	movs	r3, #1
   21b32:	f7ff bea5 	b.w	21880 <__gnu_unwind_pr_common>
   21b36:	bf00      	nop

00021b38 <__aeabi_unwind_cpp_pr2>:
   21b38:	2302      	movs	r3, #2
   21b3a:	f7ff bea1 	b.w	21880 <__gnu_unwind_pr_common>
   21b3e:	bf00      	nop

00021b40 <_Unwind_VRS_Pop>:
   21b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21b44:	4606      	mov	r6, r0
   21b46:	b0c3      	sub	sp, #268	; 0x10c
   21b48:	4691      	mov	r9, r2
   21b4a:	461c      	mov	r4, r3
   21b4c:	2904      	cmp	r1, #4
   21b4e:	f200 809b 	bhi.w	21c88 <_Unwind_VRS_Pop+0x148>
   21b52:	e8df f001 	tbb	[pc, r1]
   21b56:	567b      	.short	0x567b
   21b58:	2e99      	.short	0x2e99
   21b5a:	03          	.byte	0x03
   21b5b:	00          	.byte	0x00
   21b5c:	2c00      	cmp	r4, #0
   21b5e:	f040 8093 	bne.w	21c88 <_Unwind_VRS_Pop+0x148>
   21b62:	2a10      	cmp	r2, #16
   21b64:	f200 8090 	bhi.w	21c88 <_Unwind_VRS_Pop+0x148>
   21b68:	6803      	ldr	r3, [r0, #0]
   21b6a:	06dc      	lsls	r4, r3, #27
   21b6c:	f100 80f3 	bmi.w	21d56 <_Unwind_VRS_Pop+0x216>
   21b70:	af20      	add	r7, sp, #128	; 0x80
   21b72:	4638      	mov	r0, r7
   21b74:	f000 f9ae 	bl	21ed4 <__gnu_Unwind_Save_WMMXC>
   21b78:	6bb4      	ldr	r4, [r6, #56]	; 0x38
   21b7a:	4639      	mov	r1, r7
   21b7c:	2300      	movs	r3, #0
   21b7e:	f04f 0c01 	mov.w	ip, #1
   21b82:	fa0c f203 	lsl.w	r2, ip, r3
   21b86:	ea12 0f09 	tst.w	r2, r9
   21b8a:	4620      	mov	r0, r4
   21b8c:	f103 0301 	add.w	r3, r3, #1
   21b90:	d003      	beq.n	21b9a <_Unwind_VRS_Pop+0x5a>
   21b92:	f850 2b04 	ldr.w	r2, [r0], #4
   21b96:	600a      	str	r2, [r1, #0]
   21b98:	4604      	mov	r4, r0
   21b9a:	2b04      	cmp	r3, #4
   21b9c:	f101 0104 	add.w	r1, r1, #4
   21ba0:	d1ef      	bne.n	21b82 <_Unwind_VRS_Pop+0x42>
   21ba2:	4638      	mov	r0, r7
   21ba4:	63b4      	str	r4, [r6, #56]	; 0x38
   21ba6:	f000 f98b 	bl	21ec0 <__gnu_Unwind_Restore_WMMXC>
   21baa:	2000      	movs	r0, #0
   21bac:	b043      	add	sp, #268	; 0x10c
   21bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21bb2:	2c03      	cmp	r4, #3
   21bb4:	d168      	bne.n	21c88 <_Unwind_VRS_Pop+0x148>
   21bb6:	b294      	uxth	r4, r2
   21bb8:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   21bbc:	2b10      	cmp	r3, #16
   21bbe:	ea4f 4912 	mov.w	r9, r2, lsr #16
   21bc2:	d861      	bhi.n	21c88 <_Unwind_VRS_Pop+0x148>
   21bc4:	6803      	ldr	r3, [r0, #0]
   21bc6:	071d      	lsls	r5, r3, #28
   21bc8:	f100 80cd 	bmi.w	21d66 <_Unwind_VRS_Pop+0x226>
   21bcc:	af20      	add	r7, sp, #128	; 0x80
   21bce:	4638      	mov	r0, r7
   21bd0:	f000 f954 	bl	21e7c <__gnu_Unwind_Save_WMMXD>
   21bd4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   21bd6:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
   21bda:	b154      	cbz	r4, 21bf2 <_Unwind_VRS_Pop+0xb2>
   21bdc:	460b      	mov	r3, r1
   21bde:	1ad0      	subs	r0, r2, r3
   21be0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   21be4:	00e4      	lsls	r4, r4, #3
   21be6:	581d      	ldr	r5, [r3, r0]
   21be8:	f843 5b04 	str.w	r5, [r3], #4
   21bec:	428b      	cmp	r3, r1
   21bee:	d1fa      	bne.n	21be6 <_Unwind_VRS_Pop+0xa6>
   21bf0:	4422      	add	r2, r4
   21bf2:	4638      	mov	r0, r7
   21bf4:	63b2      	str	r2, [r6, #56]	; 0x38
   21bf6:	f000 f91f 	bl	21e38 <__gnu_Unwind_Restore_WMMXD>
   21bfa:	2000      	movs	r0, #0
   21bfc:	b043      	add	sp, #268	; 0x10c
   21bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21c02:	2c01      	cmp	r4, #1
   21c04:	ea4f 4812 	mov.w	r8, r2, lsr #16
   21c08:	fa1f f982 	uxth.w	r9, r2
   21c0c:	d038      	beq.n	21c80 <_Unwind_VRS_Pop+0x140>
   21c0e:	2c05      	cmp	r4, #5
   21c10:	d13a      	bne.n	21c88 <_Unwind_VRS_Pop+0x148>
   21c12:	eb08 0309 	add.w	r3, r8, r9
   21c16:	2b20      	cmp	r3, #32
   21c18:	d836      	bhi.n	21c88 <_Unwind_VRS_Pop+0x148>
   21c1a:	f1b8 0f0f 	cmp.w	r8, #15
   21c1e:	d976      	bls.n	21d0e <_Unwind_VRS_Pop+0x1ce>
   21c20:	f1b9 0f00 	cmp.w	r9, #0
   21c24:	f040 8083 	bne.w	21d2e <_Unwind_VRS_Pop+0x1ee>
   21c28:	2b0f      	cmp	r3, #15
   21c2a:	d80b      	bhi.n	21c44 <_Unwind_VRS_Pop+0x104>
   21c2c:	6833      	ldr	r3, [r6, #0]
   21c2e:	07d8      	lsls	r0, r3, #31
   21c30:	d508      	bpl.n	21c44 <_Unwind_VRS_Pop+0x104>
   21c32:	4630      	mov	r0, r6
   21c34:	f023 0301 	bic.w	r3, r3, #1
   21c38:	f043 0302 	orr.w	r3, r3, #2
   21c3c:	f840 3b48 	str.w	r3, [r0], #72
   21c40:	f000 f8ee 	bl	21e20 <__gnu_Unwind_Save_VFP_D>
   21c44:	2000      	movs	r0, #0
   21c46:	b043      	add	sp, #268	; 0x10c
   21c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21c4c:	b9e4      	cbnz	r4, 21c88 <_Unwind_VRS_Pop+0x148>
   21c4e:	6b87      	ldr	r7, [r0, #56]	; 0x38
   21c50:	4623      	mov	r3, r4
   21c52:	fa1f fc82 	uxth.w	ip, r2
   21c56:	2001      	movs	r0, #1
   21c58:	1d34      	adds	r4, r6, #4
   21c5a:	fa00 f203 	lsl.w	r2, r0, r3
   21c5e:	ea12 0f0c 	tst.w	r2, ip
   21c62:	4639      	mov	r1, r7
   21c64:	d004      	beq.n	21c70 <_Unwind_VRS_Pop+0x130>
   21c66:	f851 2b04 	ldr.w	r2, [r1], #4
   21c6a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   21c6e:	460f      	mov	r7, r1
   21c70:	3301      	adds	r3, #1
   21c72:	2b10      	cmp	r3, #16
   21c74:	d1f1      	bne.n	21c5a <_Unwind_VRS_Pop+0x11a>
   21c76:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
   21c7a:	d1e3      	bne.n	21c44 <_Unwind_VRS_Pop+0x104>
   21c7c:	63b7      	str	r7, [r6, #56]	; 0x38
   21c7e:	e004      	b.n	21c8a <_Unwind_VRS_Pop+0x14a>
   21c80:	eb08 0309 	add.w	r3, r8, r9
   21c84:	2b10      	cmp	r3, #16
   21c86:	d903      	bls.n	21c90 <_Unwind_VRS_Pop+0x150>
   21c88:	2002      	movs	r0, #2
   21c8a:	b043      	add	sp, #268	; 0x10c
   21c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21c90:	f1b8 0f0f 	cmp.w	r8, #15
   21c94:	d8f8      	bhi.n	21c88 <_Unwind_VRS_Pop+0x148>
   21c96:	6833      	ldr	r3, [r6, #0]
   21c98:	07da      	lsls	r2, r3, #31
   21c9a:	d506      	bpl.n	21caa <_Unwind_VRS_Pop+0x16a>
   21c9c:	4630      	mov	r0, r6
   21c9e:	f023 0303 	bic.w	r3, r3, #3
   21ca2:	f840 3b48 	str.w	r3, [r0], #72
   21ca6:	f000 f8b3 	bl	21e10 <__gnu_Unwind_Save_VFP>
   21caa:	af20      	add	r7, sp, #128	; 0x80
   21cac:	4638      	mov	r0, r7
   21cae:	464d      	mov	r5, r9
   21cb0:	f000 f8ae 	bl	21e10 <__gnu_Unwind_Save_VFP>
   21cb4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   21cb6:	2d00      	cmp	r5, #0
   21cb8:	d05e      	beq.n	21d78 <_Unwind_VRS_Pop+0x238>
   21cba:	f04f 0900 	mov.w	r9, #0
   21cbe:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
   21cc2:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   21cc6:	3904      	subs	r1, #4
   21cc8:	f852 0b04 	ldr.w	r0, [r2], #4
   21ccc:	f841 0f04 	str.w	r0, [r1, #4]!
   21cd0:	429a      	cmp	r2, r3
   21cd2:	d1f9      	bne.n	21cc8 <_Unwind_VRS_Pop+0x188>
   21cd4:	f1b9 0f00 	cmp.w	r9, #0
   21cd8:	d054      	beq.n	21d84 <_Unwind_VRS_Pop+0x244>
   21cda:	466f      	mov	r7, sp
   21cdc:	4641      	mov	r1, r8
   21cde:	2910      	cmp	r1, #16
   21ce0:	bf38      	it	cc
   21ce2:	2110      	movcc	r1, #16
   21ce4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   21ce8:	3984      	subs	r1, #132	; 0x84
   21cea:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
   21cee:	f853 5b04 	ldr.w	r5, [r3], #4
   21cf2:	f841 5f04 	str.w	r5, [r1, #4]!
   21cf6:	429a      	cmp	r2, r3
   21cf8:	d1f9      	bne.n	21cee <_Unwind_VRS_Pop+0x1ae>
   21cfa:	2c01      	cmp	r4, #1
   21cfc:	d03b      	beq.n	21d76 <_Unwind_VRS_Pop+0x236>
   21cfe:	f1b8 0f0f 	cmp.w	r8, #15
   21d02:	63b2      	str	r2, [r6, #56]	; 0x38
   21d04:	d958      	bls.n	21db8 <_Unwind_VRS_Pop+0x278>
   21d06:	4638      	mov	r0, r7
   21d08:	f000 f88e 	bl	21e28 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   21d0c:	e79a      	b.n	21c44 <_Unwind_VRS_Pop+0x104>
   21d0e:	2b10      	cmp	r3, #16
   21d10:	d954      	bls.n	21dbc <_Unwind_VRS_Pop+0x27c>
   21d12:	6832      	ldr	r2, [r6, #0]
   21d14:	07d7      	lsls	r7, r2, #31
   21d16:	f1a3 0910 	sub.w	r9, r3, #16
   21d1a:	d509      	bpl.n	21d30 <_Unwind_VRS_Pop+0x1f0>
   21d1c:	f022 0301 	bic.w	r3, r2, #1
   21d20:	4630      	mov	r0, r6
   21d22:	f043 0302 	orr.w	r3, r3, #2
   21d26:	f840 3b48 	str.w	r3, [r0], #72
   21d2a:	f000 f879 	bl	21e20 <__gnu_Unwind_Save_VFP_D>
   21d2e:	6832      	ldr	r2, [r6, #0]
   21d30:	0753      	lsls	r3, r2, #29
   21d32:	d439      	bmi.n	21da8 <_Unwind_VRS_Pop+0x268>
   21d34:	f1b8 0f0f 	cmp.w	r8, #15
   21d38:	d802      	bhi.n	21d40 <_Unwind_VRS_Pop+0x200>
   21d3a:	a820      	add	r0, sp, #128	; 0x80
   21d3c:	f000 f870 	bl	21e20 <__gnu_Unwind_Save_VFP_D>
   21d40:	466f      	mov	r7, sp
   21d42:	4638      	mov	r0, r7
   21d44:	f1c8 0510 	rsb	r5, r8, #16
   21d48:	f000 f872 	bl	21e30 <__gnu_Unwind_Save_VFP_D_16_to_31>
   21d4c:	2d00      	cmp	r5, #0
   21d4e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   21d50:	dd28      	ble.n	21da4 <_Unwind_VRS_Pop+0x264>
   21d52:	af20      	add	r7, sp, #128	; 0x80
   21d54:	e7b3      	b.n	21cbe <_Unwind_VRS_Pop+0x17e>
   21d56:	f023 0310 	bic.w	r3, r3, #16
   21d5a:	6003      	str	r3, [r0, #0]
   21d5c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
   21d60:	f000 f8b8 	bl	21ed4 <__gnu_Unwind_Save_WMMXC>
   21d64:	e704      	b.n	21b70 <_Unwind_VRS_Pop+0x30>
   21d66:	f023 0308 	bic.w	r3, r3, #8
   21d6a:	6003      	str	r3, [r0, #0]
   21d6c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21d70:	f000 f884 	bl	21e7c <__gnu_Unwind_Save_WMMXD>
   21d74:	e72a      	b.n	21bcc <_Unwind_VRS_Pop+0x8c>
   21d76:	af20      	add	r7, sp, #128	; 0x80
   21d78:	3204      	adds	r2, #4
   21d7a:	63b2      	str	r2, [r6, #56]	; 0x38
   21d7c:	4638      	mov	r0, r7
   21d7e:	f000 f843 	bl	21e08 <__gnu_Unwind_Restore_VFP>
   21d82:	e75f      	b.n	21c44 <_Unwind_VRS_Pop+0x104>
   21d84:	2c01      	cmp	r4, #1
   21d86:	d0f7      	beq.n	21d78 <_Unwind_VRS_Pop+0x238>
   21d88:	f1b8 0f0f 	cmp.w	r8, #15
   21d8c:	63b2      	str	r2, [r6, #56]	; 0x38
   21d8e:	f63f af59 	bhi.w	21c44 <_Unwind_VRS_Pop+0x104>
   21d92:	4638      	mov	r0, r7
   21d94:	f000 f840 	bl	21e18 <__gnu_Unwind_Restore_VFP_D>
   21d98:	f1b9 0f00 	cmp.w	r9, #0
   21d9c:	f43f af52 	beq.w	21c44 <_Unwind_VRS_Pop+0x104>
   21da0:	466f      	mov	r7, sp
   21da2:	e7b0      	b.n	21d06 <_Unwind_VRS_Pop+0x1c6>
   21da4:	4613      	mov	r3, r2
   21da6:	e799      	b.n	21cdc <_Unwind_VRS_Pop+0x19c>
   21da8:	4630      	mov	r0, r6
   21daa:	f022 0204 	bic.w	r2, r2, #4
   21dae:	f840 2bd0 	str.w	r2, [r0], #208
   21db2:	f000 f83d 	bl	21e30 <__gnu_Unwind_Save_VFP_D_16_to_31>
   21db6:	e7bd      	b.n	21d34 <_Unwind_VRS_Pop+0x1f4>
   21db8:	af20      	add	r7, sp, #128	; 0x80
   21dba:	e7ea      	b.n	21d92 <_Unwind_VRS_Pop+0x252>
   21dbc:	6833      	ldr	r3, [r6, #0]
   21dbe:	07d9      	lsls	r1, r3, #31
   21dc0:	d508      	bpl.n	21dd4 <_Unwind_VRS_Pop+0x294>
   21dc2:	f023 0301 	bic.w	r3, r3, #1
   21dc6:	4630      	mov	r0, r6
   21dc8:	f043 0302 	orr.w	r3, r3, #2
   21dcc:	f840 3b48 	str.w	r3, [r0], #72
   21dd0:	f000 f826 	bl	21e20 <__gnu_Unwind_Save_VFP_D>
   21dd4:	af20      	add	r7, sp, #128	; 0x80
   21dd6:	4638      	mov	r0, r7
   21dd8:	464d      	mov	r5, r9
   21dda:	f000 f821 	bl	21e20 <__gnu_Unwind_Save_VFP_D>
   21dde:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   21de0:	2d00      	cmp	r5, #0
   21de2:	f47f af6a 	bne.w	21cba <_Unwind_VRS_Pop+0x17a>
   21de6:	4638      	mov	r0, r7
   21de8:	f000 f816 	bl	21e18 <__gnu_Unwind_Restore_VFP_D>
   21dec:	e72a      	b.n	21c44 <_Unwind_VRS_Pop+0x104>
   21dee:	bf00      	nop

00021df0 <__restore_core_regs>:
   21df0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   21df4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   21df8:	469c      	mov	ip, r3
   21dfa:	46a6      	mov	lr, r4
   21dfc:	f84c 5d04 	str.w	r5, [ip, #-4]!
   21e00:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   21e04:	46e5      	mov	sp, ip
   21e06:	bd00      	pop	{pc}

00021e08 <__gnu_Unwind_Restore_VFP>:
   21e08:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   21e0c:	4770      	bx	lr
   21e0e:	bf00      	nop

00021e10 <__gnu_Unwind_Save_VFP>:
   21e10:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   21e14:	4770      	bx	lr
   21e16:	bf00      	nop

00021e18 <__gnu_Unwind_Restore_VFP_D>:
   21e18:	ec90 0b20 	vldmia	r0, {d0-d15}
   21e1c:	4770      	bx	lr
   21e1e:	bf00      	nop

00021e20 <__gnu_Unwind_Save_VFP_D>:
   21e20:	ec80 0b20 	vstmia	r0, {d0-d15}
   21e24:	4770      	bx	lr
   21e26:	bf00      	nop

00021e28 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   21e28:	ecd0 0b20 	vldmia	r0, {d16-d31}
   21e2c:	4770      	bx	lr
   21e2e:	bf00      	nop

00021e30 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   21e30:	ecc0 0b20 	vstmia	r0, {d16-d31}
   21e34:	4770      	bx	lr
   21e36:	bf00      	nop

00021e38 <__gnu_Unwind_Restore_WMMXD>:
   21e38:	ecf0 0102 	ldfe	f0, [r0], #8
   21e3c:	ecf0 1102 	ldfe	f1, [r0], #8
   21e40:	ecf0 2102 	ldfe	f2, [r0], #8
   21e44:	ecf0 3102 	ldfe	f3, [r0], #8
   21e48:	ecf0 4102 	ldfe	f4, [r0], #8
   21e4c:	ecf0 5102 	ldfe	f5, [r0], #8
   21e50:	ecf0 6102 	ldfe	f6, [r0], #8
   21e54:	ecf0 7102 	ldfe	f7, [r0], #8
   21e58:	ecf0 8102 	ldfp	f0, [r0], #8
   21e5c:	ecf0 9102 	ldfp	f1, [r0], #8
   21e60:	ecf0 a102 	ldfp	f2, [r0], #8
   21e64:	ecf0 b102 	ldfp	f3, [r0], #8
   21e68:	ecf0 c102 	ldfp	f4, [r0], #8
   21e6c:	ecf0 d102 	ldfp	f5, [r0], #8
   21e70:	ecf0 e102 	ldfp	f6, [r0], #8
   21e74:	ecf0 f102 	ldfp	f7, [r0], #8
   21e78:	4770      	bx	lr
   21e7a:	bf00      	nop

00021e7c <__gnu_Unwind_Save_WMMXD>:
   21e7c:	ece0 0102 	stfe	f0, [r0], #8
   21e80:	ece0 1102 	stfe	f1, [r0], #8
   21e84:	ece0 2102 	stfe	f2, [r0], #8
   21e88:	ece0 3102 	stfe	f3, [r0], #8
   21e8c:	ece0 4102 	stfe	f4, [r0], #8
   21e90:	ece0 5102 	stfe	f5, [r0], #8
   21e94:	ece0 6102 	stfe	f6, [r0], #8
   21e98:	ece0 7102 	stfe	f7, [r0], #8
   21e9c:	ece0 8102 	stfp	f0, [r0], #8
   21ea0:	ece0 9102 	stfp	f1, [r0], #8
   21ea4:	ece0 a102 	stfp	f2, [r0], #8
   21ea8:	ece0 b102 	stfp	f3, [r0], #8
   21eac:	ece0 c102 	stfp	f4, [r0], #8
   21eb0:	ece0 d102 	stfp	f5, [r0], #8
   21eb4:	ece0 e102 	stfp	f6, [r0], #8
   21eb8:	ece0 f102 	stfp	f7, [r0], #8
   21ebc:	4770      	bx	lr
   21ebe:	bf00      	nop

00021ec0 <__gnu_Unwind_Restore_WMMXC>:
   21ec0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   21ec4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   21ec8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   21ecc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   21ed0:	4770      	bx	lr
   21ed2:	bf00      	nop

00021ed4 <__gnu_Unwind_Save_WMMXC>:
   21ed4:	fca0 8101 	stc2	1, cr8, [r0], #4
   21ed8:	fca0 9101 	stc2	1, cr9, [r0], #4
   21edc:	fca0 a101 	stc2	1, cr10, [r0], #4
   21ee0:	fca0 b101 	stc2	1, cr11, [r0], #4
   21ee4:	4770      	bx	lr
   21ee6:	bf00      	nop

00021ee8 <_Unwind_RaiseException>:
   21ee8:	46ec      	mov	ip, sp
   21eea:	b500      	push	{lr}
   21eec:	e92d 5000 	stmdb	sp!, {ip, lr}
   21ef0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21ef4:	f04f 0300 	mov.w	r3, #0
   21ef8:	e92d 000c 	stmdb	sp!, {r2, r3}
   21efc:	a901      	add	r1, sp, #4
   21efe:	f7ff fbc3 	bl	21688 <__gnu_Unwind_RaiseException>
   21f02:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21f06:	b012      	add	sp, #72	; 0x48
   21f08:	4770      	bx	lr
   21f0a:	bf00      	nop

00021f0c <_Unwind_Resume>:
   21f0c:	46ec      	mov	ip, sp
   21f0e:	b500      	push	{lr}
   21f10:	e92d 5000 	stmdb	sp!, {ip, lr}
   21f14:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21f18:	f04f 0300 	mov.w	r3, #0
   21f1c:	e92d 000c 	stmdb	sp!, {r2, r3}
   21f20:	a901      	add	r1, sp, #4
   21f22:	f7ff fbed 	bl	21700 <__gnu_Unwind_Resume>
   21f26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21f2a:	b012      	add	sp, #72	; 0x48
   21f2c:	4770      	bx	lr
   21f2e:	bf00      	nop

00021f30 <_Unwind_Resume_or_Rethrow>:
   21f30:	46ec      	mov	ip, sp
   21f32:	b500      	push	{lr}
   21f34:	e92d 5000 	stmdb	sp!, {ip, lr}
   21f38:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21f3c:	f04f 0300 	mov.w	r3, #0
   21f40:	e92d 000c 	stmdb	sp!, {r2, r3}
   21f44:	a901      	add	r1, sp, #4
   21f46:	f7ff fbfd 	bl	21744 <__gnu_Unwind_Resume_or_Rethrow>
   21f4a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21f4e:	b012      	add	sp, #72	; 0x48
   21f50:	4770      	bx	lr
   21f52:	bf00      	nop

00021f54 <_Unwind_ForcedUnwind>:
   21f54:	46ec      	mov	ip, sp
   21f56:	b500      	push	{lr}
   21f58:	e92d 5000 	stmdb	sp!, {ip, lr}
   21f5c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21f60:	f04f 0300 	mov.w	r3, #0
   21f64:	e92d 000c 	stmdb	sp!, {r2, r3}
   21f68:	ab01      	add	r3, sp, #4
   21f6a:	f7ff fbc1 	bl	216f0 <__gnu_Unwind_ForcedUnwind>
   21f6e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21f72:	b012      	add	sp, #72	; 0x48
   21f74:	4770      	bx	lr
   21f76:	bf00      	nop

00021f78 <_Unwind_Backtrace>:
   21f78:	46ec      	mov	ip, sp
   21f7a:	b500      	push	{lr}
   21f7c:	e92d 5000 	stmdb	sp!, {ip, lr}
   21f80:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21f84:	f04f 0300 	mov.w	r3, #0
   21f88:	e92d 000c 	stmdb	sp!, {r2, r3}
   21f8c:	aa01      	add	r2, sp, #4
   21f8e:	f7ff fc35 	bl	217fc <__gnu_Unwind_Backtrace>
   21f92:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21f96:	b012      	add	sp, #72	; 0x48
   21f98:	4770      	bx	lr
   21f9a:	bf00      	nop

00021f9c <next_unwind_byte>:
   21f9c:	7a02      	ldrb	r2, [r0, #8]
   21f9e:	4603      	mov	r3, r0
   21fa0:	b97a      	cbnz	r2, 21fc2 <next_unwind_byte+0x26>
   21fa2:	7a42      	ldrb	r2, [r0, #9]
   21fa4:	b1a2      	cbz	r2, 21fd0 <next_unwind_byte+0x34>
   21fa6:	6841      	ldr	r1, [r0, #4]
   21fa8:	3a01      	subs	r2, #1
   21faa:	b410      	push	{r4}
   21fac:	7242      	strb	r2, [r0, #9]
   21fae:	6808      	ldr	r0, [r1, #0]
   21fb0:	2203      	movs	r2, #3
   21fb2:	1d0c      	adds	r4, r1, #4
   21fb4:	721a      	strb	r2, [r3, #8]
   21fb6:	0202      	lsls	r2, r0, #8
   21fb8:	605c      	str	r4, [r3, #4]
   21fba:	0e00      	lsrs	r0, r0, #24
   21fbc:	bc10      	pop	{r4}
   21fbe:	601a      	str	r2, [r3, #0]
   21fc0:	4770      	bx	lr
   21fc2:	6800      	ldr	r0, [r0, #0]
   21fc4:	3a01      	subs	r2, #1
   21fc6:	721a      	strb	r2, [r3, #8]
   21fc8:	0202      	lsls	r2, r0, #8
   21fca:	601a      	str	r2, [r3, #0]
   21fcc:	0e00      	lsrs	r0, r0, #24
   21fce:	4770      	bx	lr
   21fd0:	20b0      	movs	r0, #176	; 0xb0
   21fd2:	4770      	bx	lr

00021fd4 <_Unwind_GetGR.constprop.0>:
   21fd4:	b500      	push	{lr}
   21fd6:	b085      	sub	sp, #20
   21fd8:	2300      	movs	r3, #0
   21fda:	aa03      	add	r2, sp, #12
   21fdc:	9200      	str	r2, [sp, #0]
   21fde:	4619      	mov	r1, r3
   21fe0:	220c      	movs	r2, #12
   21fe2:	f7ff fbc1 	bl	21768 <_Unwind_VRS_Get>
   21fe6:	9803      	ldr	r0, [sp, #12]
   21fe8:	b005      	add	sp, #20
   21fea:	f85d fb04 	ldr.w	pc, [sp], #4
   21fee:	bf00      	nop

00021ff0 <unwind_UCB_from_context>:
   21ff0:	f7ff bff0 	b.w	21fd4 <_Unwind_GetGR.constprop.0>

00021ff4 <__gnu_unwind_execute>:
   21ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ff8:	b085      	sub	sp, #20
   21ffa:	4607      	mov	r7, r0
   21ffc:	460e      	mov	r6, r1
   21ffe:	f04f 0800 	mov.w	r8, #0
   22002:	ad03      	add	r5, sp, #12
   22004:	4630      	mov	r0, r6
   22006:	f7ff ffc9 	bl	21f9c <next_unwind_byte>
   2200a:	28b0      	cmp	r0, #176	; 0xb0
   2200c:	4604      	mov	r4, r0
   2200e:	f000 80cb 	beq.w	221a8 <__gnu_unwind_execute+0x1b4>
   22012:	0603      	lsls	r3, r0, #24
   22014:	d540      	bpl.n	22098 <__gnu_unwind_execute+0xa4>
   22016:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   2201a:	2b80      	cmp	r3, #128	; 0x80
   2201c:	d056      	beq.n	220cc <__gnu_unwind_execute+0xd8>
   2201e:	2bb0      	cmp	r3, #176	; 0xb0
   22020:	d07d      	beq.n	2211e <__gnu_unwind_execute+0x12a>
   22022:	d81c      	bhi.n	2205e <__gnu_unwind_execute+0x6a>
   22024:	2b90      	cmp	r3, #144	; 0x90
   22026:	f000 8093 	beq.w	22150 <__gnu_unwind_execute+0x15c>
   2202a:	2ba0      	cmp	r3, #160	; 0xa0
   2202c:	d113      	bne.n	22056 <__gnu_unwind_execute+0x62>
   2202e:	43c3      	mvns	r3, r0
   22030:	f003 0307 	and.w	r3, r3, #7
   22034:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   22038:	411a      	asrs	r2, r3
   2203a:	0701      	lsls	r1, r0, #28
   2203c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   22040:	f04f 0300 	mov.w	r3, #0
   22044:	bf48      	it	mi
   22046:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   2204a:	4619      	mov	r1, r3
   2204c:	4638      	mov	r0, r7
   2204e:	f7ff fd77 	bl	21b40 <_Unwind_VRS_Pop>
   22052:	2800      	cmp	r0, #0
   22054:	d0d6      	beq.n	22004 <__gnu_unwind_execute+0x10>
   22056:	2009      	movs	r0, #9
   22058:	b005      	add	sp, #20
   2205a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2205e:	2bc0      	cmp	r3, #192	; 0xc0
   22060:	d14b      	bne.n	220fa <__gnu_unwind_execute+0x106>
   22062:	28c6      	cmp	r0, #198	; 0xc6
   22064:	f000 8089 	beq.w	2217a <__gnu_unwind_execute+0x186>
   22068:	28c7      	cmp	r0, #199	; 0xc7
   2206a:	f000 80a2 	beq.w	221b2 <__gnu_unwind_execute+0x1be>
   2206e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   22072:	2bc0      	cmp	r3, #192	; 0xc0
   22074:	f000 80bc 	beq.w	221f0 <__gnu_unwind_execute+0x1fc>
   22078:	28c8      	cmp	r0, #200	; 0xc8
   2207a:	f000 80bf 	beq.w	221fc <__gnu_unwind_execute+0x208>
   2207e:	28c9      	cmp	r0, #201	; 0xc9
   22080:	d1e9      	bne.n	22056 <__gnu_unwind_execute+0x62>
   22082:	4630      	mov	r0, r6
   22084:	f7ff ff8a 	bl	21f9c <next_unwind_byte>
   22088:	0302      	lsls	r2, r0, #12
   2208a:	f000 000f 	and.w	r0, r0, #15
   2208e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   22092:	3001      	adds	r0, #1
   22094:	4302      	orrs	r2, r0
   22096:	e039      	b.n	2210c <__gnu_unwind_execute+0x118>
   22098:	0083      	lsls	r3, r0, #2
   2209a:	b2db      	uxtb	r3, r3
   2209c:	f103 0904 	add.w	r9, r3, #4
   220a0:	2300      	movs	r3, #0
   220a2:	4619      	mov	r1, r3
   220a4:	9500      	str	r5, [sp, #0]
   220a6:	220d      	movs	r2, #13
   220a8:	4638      	mov	r0, r7
   220aa:	f7ff fb5d 	bl	21768 <_Unwind_VRS_Get>
   220ae:	9b03      	ldr	r3, [sp, #12]
   220b0:	0660      	lsls	r0, r4, #25
   220b2:	bf4c      	ite	mi
   220b4:	eba3 0309 	submi.w	r3, r3, r9
   220b8:	444b      	addpl	r3, r9
   220ba:	9303      	str	r3, [sp, #12]
   220bc:	2300      	movs	r3, #0
   220be:	9500      	str	r5, [sp, #0]
   220c0:	220d      	movs	r2, #13
   220c2:	4619      	mov	r1, r3
   220c4:	4638      	mov	r0, r7
   220c6:	f7ff fb75 	bl	217b4 <_Unwind_VRS_Set>
   220ca:	e79b      	b.n	22004 <__gnu_unwind_execute+0x10>
   220cc:	0204      	lsls	r4, r0, #8
   220ce:	4630      	mov	r0, r6
   220d0:	f7ff ff64 	bl	21f9c <next_unwind_byte>
   220d4:	4320      	orrs	r0, r4
   220d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   220da:	d0bc      	beq.n	22056 <__gnu_unwind_execute+0x62>
   220dc:	0104      	lsls	r4, r0, #4
   220de:	2300      	movs	r3, #0
   220e0:	b2a2      	uxth	r2, r4
   220e2:	4619      	mov	r1, r3
   220e4:	4638      	mov	r0, r7
   220e6:	f7ff fd2b 	bl	21b40 <_Unwind_VRS_Pop>
   220ea:	2800      	cmp	r0, #0
   220ec:	d1b3      	bne.n	22056 <__gnu_unwind_execute+0x62>
   220ee:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   220f2:	bf18      	it	ne
   220f4:	f04f 0801 	movne.w	r8, #1
   220f8:	e784      	b.n	22004 <__gnu_unwind_execute+0x10>
   220fa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   220fe:	2bd0      	cmp	r3, #208	; 0xd0
   22100:	d1a9      	bne.n	22056 <__gnu_unwind_execute+0x62>
   22102:	f000 0207 	and.w	r2, r0, #7
   22106:	3201      	adds	r2, #1
   22108:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2210c:	2305      	movs	r3, #5
   2210e:	2101      	movs	r1, #1
   22110:	4638      	mov	r0, r7
   22112:	f7ff fd15 	bl	21b40 <_Unwind_VRS_Pop>
   22116:	2800      	cmp	r0, #0
   22118:	f43f af74 	beq.w	22004 <__gnu_unwind_execute+0x10>
   2211c:	e79b      	b.n	22056 <__gnu_unwind_execute+0x62>
   2211e:	28b1      	cmp	r0, #177	; 0xb1
   22120:	d037      	beq.n	22192 <__gnu_unwind_execute+0x19e>
   22122:	28b2      	cmp	r0, #178	; 0xb2
   22124:	f000 8087 	beq.w	22236 <__gnu_unwind_execute+0x242>
   22128:	28b3      	cmp	r0, #179	; 0xb3
   2212a:	d056      	beq.n	221da <__gnu_unwind_execute+0x1e6>
   2212c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   22130:	2bb4      	cmp	r3, #180	; 0xb4
   22132:	d090      	beq.n	22056 <__gnu_unwind_execute+0x62>
   22134:	f000 0207 	and.w	r2, r0, #7
   22138:	3201      	adds	r2, #1
   2213a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2213e:	2301      	movs	r3, #1
   22140:	4619      	mov	r1, r3
   22142:	4638      	mov	r0, r7
   22144:	f7ff fcfc 	bl	21b40 <_Unwind_VRS_Pop>
   22148:	2800      	cmp	r0, #0
   2214a:	f43f af5b 	beq.w	22004 <__gnu_unwind_execute+0x10>
   2214e:	e782      	b.n	22056 <__gnu_unwind_execute+0x62>
   22150:	f000 030d 	and.w	r3, r0, #13
   22154:	2b0d      	cmp	r3, #13
   22156:	f43f af7e 	beq.w	22056 <__gnu_unwind_execute+0x62>
   2215a:	2300      	movs	r3, #0
   2215c:	f000 020f 	and.w	r2, r0, #15
   22160:	4619      	mov	r1, r3
   22162:	9500      	str	r5, [sp, #0]
   22164:	4638      	mov	r0, r7
   22166:	f7ff faff 	bl	21768 <_Unwind_VRS_Get>
   2216a:	2300      	movs	r3, #0
   2216c:	9500      	str	r5, [sp, #0]
   2216e:	220d      	movs	r2, #13
   22170:	4619      	mov	r1, r3
   22172:	4638      	mov	r0, r7
   22174:	f7ff fb1e 	bl	217b4 <_Unwind_VRS_Set>
   22178:	e744      	b.n	22004 <__gnu_unwind_execute+0x10>
   2217a:	4630      	mov	r0, r6
   2217c:	f7ff ff0e 	bl	21f9c <next_unwind_byte>
   22180:	0302      	lsls	r2, r0, #12
   22182:	f000 000f 	and.w	r0, r0, #15
   22186:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   2218a:	3001      	adds	r0, #1
   2218c:	4302      	orrs	r2, r0
   2218e:	2303      	movs	r3, #3
   22190:	e7d6      	b.n	22140 <__gnu_unwind_execute+0x14c>
   22192:	4630      	mov	r0, r6
   22194:	f7ff ff02 	bl	21f9c <next_unwind_byte>
   22198:	4602      	mov	r2, r0
   2219a:	2800      	cmp	r0, #0
   2219c:	f43f af5b 	beq.w	22056 <__gnu_unwind_execute+0x62>
   221a0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   221a4:	d0cc      	beq.n	22140 <__gnu_unwind_execute+0x14c>
   221a6:	e756      	b.n	22056 <__gnu_unwind_execute+0x62>
   221a8:	f1b8 0f00 	cmp.w	r8, #0
   221ac:	d032      	beq.n	22214 <__gnu_unwind_execute+0x220>
   221ae:	2000      	movs	r0, #0
   221b0:	e752      	b.n	22058 <__gnu_unwind_execute+0x64>
   221b2:	4630      	mov	r0, r6
   221b4:	f7ff fef2 	bl	21f9c <next_unwind_byte>
   221b8:	4602      	mov	r2, r0
   221ba:	2800      	cmp	r0, #0
   221bc:	f43f af4b 	beq.w	22056 <__gnu_unwind_execute+0x62>
   221c0:	f010 0ff0 	tst.w	r0, #240	; 0xf0
   221c4:	f47f af47 	bne.w	22056 <__gnu_unwind_execute+0x62>
   221c8:	2300      	movs	r3, #0
   221ca:	2104      	movs	r1, #4
   221cc:	4638      	mov	r0, r7
   221ce:	f7ff fcb7 	bl	21b40 <_Unwind_VRS_Pop>
   221d2:	2800      	cmp	r0, #0
   221d4:	f43f af16 	beq.w	22004 <__gnu_unwind_execute+0x10>
   221d8:	e73d      	b.n	22056 <__gnu_unwind_execute+0x62>
   221da:	4630      	mov	r0, r6
   221dc:	f7ff fede 	bl	21f9c <next_unwind_byte>
   221e0:	0302      	lsls	r2, r0, #12
   221e2:	f000 000f 	and.w	r0, r0, #15
   221e6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   221ea:	3001      	adds	r0, #1
   221ec:	4302      	orrs	r2, r0
   221ee:	e7a6      	b.n	2213e <__gnu_unwind_execute+0x14a>
   221f0:	f000 020f 	and.w	r2, r0, #15
   221f4:	3201      	adds	r2, #1
   221f6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   221fa:	e7c8      	b.n	2218e <__gnu_unwind_execute+0x19a>
   221fc:	4630      	mov	r0, r6
   221fe:	f7ff fecd 	bl	21f9c <next_unwind_byte>
   22202:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   22206:	f000 030f 	and.w	r3, r0, #15
   2220a:	3210      	adds	r2, #16
   2220c:	3301      	adds	r3, #1
   2220e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   22212:	e77b      	b.n	2210c <__gnu_unwind_execute+0x118>
   22214:	ac03      	add	r4, sp, #12
   22216:	4643      	mov	r3, r8
   22218:	220e      	movs	r2, #14
   2221a:	4641      	mov	r1, r8
   2221c:	9400      	str	r4, [sp, #0]
   2221e:	4638      	mov	r0, r7
   22220:	f7ff faa2 	bl	21768 <_Unwind_VRS_Get>
   22224:	9400      	str	r4, [sp, #0]
   22226:	4643      	mov	r3, r8
   22228:	220f      	movs	r2, #15
   2222a:	4641      	mov	r1, r8
   2222c:	4638      	mov	r0, r7
   2222e:	f7ff fac1 	bl	217b4 <_Unwind_VRS_Set>
   22232:	4640      	mov	r0, r8
   22234:	e710      	b.n	22058 <__gnu_unwind_execute+0x64>
   22236:	2300      	movs	r3, #0
   22238:	220d      	movs	r2, #13
   2223a:	4619      	mov	r1, r3
   2223c:	9500      	str	r5, [sp, #0]
   2223e:	4638      	mov	r0, r7
   22240:	f7ff fa92 	bl	21768 <_Unwind_VRS_Get>
   22244:	4630      	mov	r0, r6
   22246:	f7ff fea9 	bl	21f9c <next_unwind_byte>
   2224a:	0602      	lsls	r2, r0, #24
   2224c:	9c03      	ldr	r4, [sp, #12]
   2224e:	f04f 0902 	mov.w	r9, #2
   22252:	d50c      	bpl.n	2226e <__gnu_unwind_execute+0x27a>
   22254:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   22258:	fa00 f009 	lsl.w	r0, r0, r9
   2225c:	4404      	add	r4, r0
   2225e:	4630      	mov	r0, r6
   22260:	9403      	str	r4, [sp, #12]
   22262:	f7ff fe9b 	bl	21f9c <next_unwind_byte>
   22266:	0603      	lsls	r3, r0, #24
   22268:	f109 0907 	add.w	r9, r9, #7
   2226c:	d4f2      	bmi.n	22254 <__gnu_unwind_execute+0x260>
   2226e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   22272:	fa03 f309 	lsl.w	r3, r3, r9
   22276:	f504 7401 	add.w	r4, r4, #516	; 0x204
   2227a:	4423      	add	r3, r4
   2227c:	e71d      	b.n	220ba <__gnu_unwind_execute+0xc6>
   2227e:	bf00      	nop

00022280 <__gnu_unwind_frame>:
   22280:	b510      	push	{r4, lr}
   22282:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   22284:	6853      	ldr	r3, [r2, #4]
   22286:	b084      	sub	sp, #16
   22288:	f04f 0c03 	mov.w	ip, #3
   2228c:	3208      	adds	r2, #8
   2228e:	021c      	lsls	r4, r3, #8
   22290:	4608      	mov	r0, r1
   22292:	0e1b      	lsrs	r3, r3, #24
   22294:	a901      	add	r1, sp, #4
   22296:	9401      	str	r4, [sp, #4]
   22298:	9202      	str	r2, [sp, #8]
   2229a:	f88d c00c 	strb.w	ip, [sp, #12]
   2229e:	f88d 300d 	strb.w	r3, [sp, #13]
   222a2:	f7ff fea7 	bl	21ff4 <__gnu_unwind_execute>
   222a6:	b004      	add	sp, #16
   222a8:	bd10      	pop	{r4, pc}
   222aa:	bf00      	nop

000222ac <_Unwind_GetRegionStart>:
   222ac:	b508      	push	{r3, lr}
   222ae:	f7ff fe9f 	bl	21ff0 <unwind_UCB_from_context>
   222b2:	6c80      	ldr	r0, [r0, #72]	; 0x48
   222b4:	bd08      	pop	{r3, pc}
   222b6:	bf00      	nop

000222b8 <_Unwind_GetLanguageSpecificData>:
   222b8:	b508      	push	{r3, lr}
   222ba:	f7ff fe99 	bl	21ff0 <unwind_UCB_from_context>
   222be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   222c0:	79c3      	ldrb	r3, [r0, #7]
   222c2:	3302      	adds	r3, #2
   222c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   222c8:	bd08      	pop	{r3, pc}
   222ca:	bf00      	nop

000222cc <_Unwind_GetDataRelBase>:
   222cc:	b508      	push	{r3, lr}
   222ce:	f7f6 fdf3 	bl	18eb8 <abort>

000222d2 <_Unwind_GetTextRelBase>:
   222d2:	b508      	push	{r3, lr}
   222d4:	f7ff fffa 	bl	222cc <_Unwind_GetDataRelBase>

000222d8 <strncmp>:
   222d8:	2a00      	cmp	r2, #0
   222da:	d03e      	beq.n	2235a <strncmp+0x82>
   222dc:	ea40 0301 	orr.w	r3, r0, r1
   222e0:	079b      	lsls	r3, r3, #30
   222e2:	b530      	push	{r4, r5, lr}
   222e4:	4684      	mov	ip, r0
   222e6:	d12f      	bne.n	22348 <strncmp+0x70>
   222e8:	2a03      	cmp	r2, #3
   222ea:	d92d      	bls.n	22348 <strncmp+0x70>
   222ec:	460b      	mov	r3, r1
   222ee:	e008      	b.n	22302 <strncmp+0x2a>
   222f0:	3a04      	subs	r2, #4
   222f2:	4684      	mov	ip, r0
   222f4:	4619      	mov	r1, r3
   222f6:	d025      	beq.n	22344 <strncmp+0x6c>
   222f8:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   222fc:	d122      	bne.n	22344 <strncmp+0x6c>
   222fe:	2a03      	cmp	r2, #3
   22300:	d922      	bls.n	22348 <strncmp+0x70>
   22302:	6804      	ldr	r4, [r0, #0]
   22304:	4619      	mov	r1, r3
   22306:	f853 5b04 	ldr.w	r5, [r3], #4
   2230a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   2230e:	42ac      	cmp	r4, r5
   22310:	4684      	mov	ip, r0
   22312:	ea2e 0e04 	bic.w	lr, lr, r4
   22316:	f100 0004 	add.w	r0, r0, #4
   2231a:	d0e9      	beq.n	222f0 <strncmp+0x18>
   2231c:	f89c 0000 	ldrb.w	r0, [ip]
   22320:	780c      	ldrb	r4, [r1, #0]
   22322:	42a0      	cmp	r0, r4
   22324:	d11b      	bne.n	2235e <strncmp+0x86>
   22326:	46e6      	mov	lr, ip
   22328:	b168      	cbz	r0, 22346 <strncmp+0x6e>
   2232a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2232e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   22332:	eba2 030e 	sub.w	r3, r2, lr
   22336:	42a0      	cmp	r0, r4
   22338:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2233c:	d10f      	bne.n	2235e <strncmp+0x86>
   2233e:	eb1c 0303 	adds.w	r3, ip, r3
   22342:	d1f1      	bne.n	22328 <strncmp+0x50>
   22344:	2000      	movs	r0, #0
   22346:	bd30      	pop	{r4, r5, pc}
   22348:	f89c 0000 	ldrb.w	r0, [ip]
   2234c:	780c      	ldrb	r4, [r1, #0]
   2234e:	4284      	cmp	r4, r0
   22350:	d105      	bne.n	2235e <strncmp+0x86>
   22352:	2a01      	cmp	r2, #1
   22354:	d0f6      	beq.n	22344 <strncmp+0x6c>
   22356:	46e6      	mov	lr, ip
   22358:	e7e6      	b.n	22328 <strncmp+0x50>
   2235a:	4610      	mov	r0, r2
   2235c:	4770      	bx	lr
   2235e:	1b00      	subs	r0, r0, r4
   22360:	bd30      	pop	{r4, r5, pc}
   22362:	bf00      	nop

00022364 <strncpy>:
   22364:	ea40 0301 	orr.w	r3, r0, r1
   22368:	079b      	lsls	r3, r3, #30
   2236a:	b530      	push	{r4, r5, lr}
   2236c:	d101      	bne.n	22372 <strncpy+0xe>
   2236e:	2a03      	cmp	r2, #3
   22370:	d80f      	bhi.n	22392 <strncpy+0x2e>
   22372:	4684      	mov	ip, r0
   22374:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   22378:	e007      	b.n	2238a <strncpy+0x26>
   2237a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   2237e:	f803 1b01 	strb.w	r1, [r3], #1
   22382:	1e54      	subs	r4, r2, #1
   22384:	b1c1      	cbz	r1, 223b8 <strncpy+0x54>
   22386:	469c      	mov	ip, r3
   22388:	4622      	mov	r2, r4
   2238a:	4663      	mov	r3, ip
   2238c:	2a00      	cmp	r2, #0
   2238e:	d1f4      	bne.n	2237a <strncpy+0x16>
   22390:	bd30      	pop	{r4, r5, pc}
   22392:	460b      	mov	r3, r1
   22394:	4684      	mov	ip, r0
   22396:	4619      	mov	r1, r3
   22398:	f853 5b04 	ldr.w	r5, [r3], #4
   2239c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   223a0:	ea24 0405 	bic.w	r4, r4, r5
   223a4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   223a8:	d1e4      	bne.n	22374 <strncpy+0x10>
   223aa:	3a04      	subs	r2, #4
   223ac:	2a03      	cmp	r2, #3
   223ae:	f84c 5b04 	str.w	r5, [ip], #4
   223b2:	4619      	mov	r1, r3
   223b4:	d8ef      	bhi.n	22396 <strncpy+0x32>
   223b6:	e7dd      	b.n	22374 <strncpy+0x10>
   223b8:	4494      	add	ip, r2
   223ba:	2c00      	cmp	r4, #0
   223bc:	d0e8      	beq.n	22390 <strncpy+0x2c>
   223be:	f803 1b01 	strb.w	r1, [r3], #1
   223c2:	4563      	cmp	r3, ip
   223c4:	d1fb      	bne.n	223be <strncpy+0x5a>
   223c6:	bd30      	pop	{r4, r5, pc}

000223c8 <write>:
   223c8:	b410      	push	{r4}
   223ca:	4c05      	ldr	r4, [pc, #20]	; (223e0 <write+0x18>)
   223cc:	4684      	mov	ip, r0
   223ce:	4613      	mov	r3, r2
   223d0:	6820      	ldr	r0, [r4, #0]
   223d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   223d6:	460a      	mov	r2, r1
   223d8:	4661      	mov	r1, ip
   223da:	f000 ba1f 	b.w	2281c <_write_r>
   223de:	bf00      	nop
   223e0:	20005fe4 	.word	0x20005fe4

000223e4 <fputc>:
   223e4:	b530      	push	{r4, r5, lr}
   223e6:	4b17      	ldr	r3, [pc, #92]	; (22444 <fputc+0x60>)
   223e8:	681d      	ldr	r5, [r3, #0]
   223ea:	460c      	mov	r4, r1
   223ec:	b083      	sub	sp, #12
   223ee:	4601      	mov	r1, r0
   223f0:	b10d      	cbz	r5, 223f6 <fputc+0x12>
   223f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   223f4:	b1fb      	cbz	r3, 22436 <fputc+0x52>
   223f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   223f8:	07db      	lsls	r3, r3, #31
   223fa:	d402      	bmi.n	22402 <fputc+0x1e>
   223fc:	89a3      	ldrh	r3, [r4, #12]
   223fe:	0598      	lsls	r0, r3, #22
   22400:	d513      	bpl.n	2242a <fputc+0x46>
   22402:	4622      	mov	r2, r4
   22404:	4628      	mov	r0, r5
   22406:	f002 feeb 	bl	251e0 <_putc_r>
   2240a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2240c:	07da      	lsls	r2, r3, #31
   2240e:	4605      	mov	r5, r0
   22410:	d402      	bmi.n	22418 <fputc+0x34>
   22412:	89a3      	ldrh	r3, [r4, #12]
   22414:	059b      	lsls	r3, r3, #22
   22416:	d502      	bpl.n	2241e <fputc+0x3a>
   22418:	4628      	mov	r0, r5
   2241a:	b003      	add	sp, #12
   2241c:	bd30      	pop	{r4, r5, pc}
   2241e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22420:	f002 fc8c 	bl	24d3c <__retarget_lock_release_recursive>
   22424:	4628      	mov	r0, r5
   22426:	b003      	add	sp, #12
   22428:	bd30      	pop	{r4, r5, pc}
   2242a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2242c:	9101      	str	r1, [sp, #4]
   2242e:	f002 fc83 	bl	24d38 <__retarget_lock_acquire_recursive>
   22432:	9901      	ldr	r1, [sp, #4]
   22434:	e7e5      	b.n	22402 <fputc+0x1e>
   22436:	9001      	str	r0, [sp, #4]
   22438:	4628      	mov	r0, r5
   2243a:	f004 fb8b 	bl	26b54 <__sinit>
   2243e:	9901      	ldr	r1, [sp, #4]
   22440:	e7d9      	b.n	223f6 <fputc+0x12>
   22442:	bf00      	nop
   22444:	20005fe4 	.word	0x20005fe4

00022448 <_fputs_r>:
   22448:	b530      	push	{r4, r5, lr}
   2244a:	b087      	sub	sp, #28
   2244c:	4605      	mov	r5, r0
   2244e:	4608      	mov	r0, r1
   22450:	4614      	mov	r4, r2
   22452:	9101      	str	r1, [sp, #4]
   22454:	f004 fc14 	bl	26c80 <strlen>
   22458:	aa01      	add	r2, sp, #4
   2245a:	2301      	movs	r3, #1
   2245c:	e9cd 0202 	strd	r0, r2, [sp, #8]
   22460:	9005      	str	r0, [sp, #20]
   22462:	9304      	str	r3, [sp, #16]
   22464:	b10d      	cbz	r5, 2246a <_fputs_r+0x22>
   22466:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22468:	b36b      	cbz	r3, 224c6 <_fputs_r+0x7e>
   2246a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2246c:	f013 0f01 	tst.w	r3, #1
   22470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22474:	b29a      	uxth	r2, r3
   22476:	d101      	bne.n	2247c <_fputs_r+0x34>
   22478:	0598      	lsls	r0, r3, #22
   2247a:	d51d      	bpl.n	224b8 <_fputs_r+0x70>
   2247c:	0491      	lsls	r1, r2, #18
   2247e:	d406      	bmi.n	2248e <_fputs_r+0x46>
   22480:	6e62      	ldr	r2, [r4, #100]	; 0x64
   22482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   2248a:	81a3      	strh	r3, [r4, #12]
   2248c:	6662      	str	r2, [r4, #100]	; 0x64
   2248e:	aa03      	add	r2, sp, #12
   22490:	4628      	mov	r0, r5
   22492:	4621      	mov	r1, r4
   22494:	f000 f848 	bl	22528 <__sfvwrite_r>
   22498:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2249a:	07da      	lsls	r2, r3, #31
   2249c:	4605      	mov	r5, r0
   2249e:	d402      	bmi.n	224a6 <_fputs_r+0x5e>
   224a0:	89a3      	ldrh	r3, [r4, #12]
   224a2:	059b      	lsls	r3, r3, #22
   224a4:	d502      	bpl.n	224ac <_fputs_r+0x64>
   224a6:	4628      	mov	r0, r5
   224a8:	b007      	add	sp, #28
   224aa:	bd30      	pop	{r4, r5, pc}
   224ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   224ae:	f002 fc45 	bl	24d3c <__retarget_lock_release_recursive>
   224b2:	4628      	mov	r0, r5
   224b4:	b007      	add	sp, #28
   224b6:	bd30      	pop	{r4, r5, pc}
   224b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   224ba:	f002 fc3d 	bl	24d38 <__retarget_lock_acquire_recursive>
   224be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   224c2:	b29a      	uxth	r2, r3
   224c4:	e7da      	b.n	2247c <_fputs_r+0x34>
   224c6:	4628      	mov	r0, r5
   224c8:	f004 fb44 	bl	26b54 <__sinit>
   224cc:	e7cd      	b.n	2246a <_fputs_r+0x22>
   224ce:	bf00      	nop

000224d0 <fputs>:
   224d0:	b410      	push	{r4}
   224d2:	4c04      	ldr	r4, [pc, #16]	; (224e4 <fputs+0x14>)
   224d4:	4603      	mov	r3, r0
   224d6:	460a      	mov	r2, r1
   224d8:	6820      	ldr	r0, [r4, #0]
   224da:	f85d 4b04 	ldr.w	r4, [sp], #4
   224de:	4619      	mov	r1, r3
   224e0:	f7ff bfb2 	b.w	22448 <_fputs_r>
   224e4:	20005fe4 	.word	0x20005fe4

000224e8 <sprintf>:
   224e8:	b40e      	push	{r1, r2, r3}
   224ea:	b510      	push	{r4, lr}
   224ec:	b09d      	sub	sp, #116	; 0x74
   224ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   224f2:	ab1f      	add	r3, sp, #124	; 0x7c
   224f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   224f8:	9104      	str	r1, [sp, #16]
   224fa:	4909      	ldr	r1, [pc, #36]	; (22520 <sprintf+0x38>)
   224fc:	f853 2b04 	ldr.w	r2, [r3], #4
   22500:	9002      	str	r0, [sp, #8]
   22502:	4c08      	ldr	r4, [pc, #32]	; (22524 <sprintf+0x3c>)
   22504:	6808      	ldr	r0, [r1, #0]
   22506:	9301      	str	r3, [sp, #4]
   22508:	a902      	add	r1, sp, #8
   2250a:	9405      	str	r4, [sp, #20]
   2250c:	f000 fa08 	bl	22920 <_svfprintf_r>
   22510:	9b02      	ldr	r3, [sp, #8]
   22512:	2200      	movs	r2, #0
   22514:	701a      	strb	r2, [r3, #0]
   22516:	b01d      	add	sp, #116	; 0x74
   22518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2251c:	b003      	add	sp, #12
   2251e:	4770      	bx	lr
   22520:	20005fe4 	.word	0x20005fe4
   22524:	ffff0208 	.word	0xffff0208

00022528 <__sfvwrite_r>:
   22528:	6893      	ldr	r3, [r2, #8]
   2252a:	2b00      	cmp	r3, #0
   2252c:	f000 8085 	beq.w	2263a <__sfvwrite_r+0x112>
   22530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22534:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   22538:	460c      	mov	r4, r1
   2253a:	0719      	lsls	r1, r3, #28
   2253c:	4680      	mov	r8, r0
   2253e:	b083      	sub	sp, #12
   22540:	4617      	mov	r7, r2
   22542:	b298      	uxth	r0, r3
   22544:	d525      	bpl.n	22592 <__sfvwrite_r+0x6a>
   22546:	6923      	ldr	r3, [r4, #16]
   22548:	b31b      	cbz	r3, 22592 <__sfvwrite_r+0x6a>
   2254a:	f010 0302 	ands.w	r3, r0, #2
   2254e:	683d      	ldr	r5, [r7, #0]
   22550:	d02d      	beq.n	225ae <__sfvwrite_r+0x86>
   22552:	f04f 0a00 	mov.w	sl, #0
   22556:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 22818 <__sfvwrite_r+0x2f0>
   2255a:	4656      	mov	r6, sl
   2255c:	46b9      	mov	r9, r7
   2255e:	455e      	cmp	r6, fp
   22560:	4633      	mov	r3, r6
   22562:	4652      	mov	r2, sl
   22564:	bf28      	it	cs
   22566:	465b      	movcs	r3, fp
   22568:	4640      	mov	r0, r8
   2256a:	2e00      	cmp	r6, #0
   2256c:	d052      	beq.n	22614 <__sfvwrite_r+0xec>
   2256e:	69e1      	ldr	r1, [r4, #28]
   22570:	6a67      	ldr	r7, [r4, #36]	; 0x24
   22572:	47b8      	blx	r7
   22574:	2800      	cmp	r0, #0
   22576:	dd56      	ble.n	22626 <__sfvwrite_r+0xfe>
   22578:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2257c:	1a1b      	subs	r3, r3, r0
   2257e:	4482      	add	sl, r0
   22580:	1a36      	subs	r6, r6, r0
   22582:	f8c9 3008 	str.w	r3, [r9, #8]
   22586:	2b00      	cmp	r3, #0
   22588:	d1e9      	bne.n	2255e <__sfvwrite_r+0x36>
   2258a:	2000      	movs	r0, #0
   2258c:	b003      	add	sp, #12
   2258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22592:	4621      	mov	r1, r4
   22594:	4640      	mov	r0, r8
   22596:	f002 fd51 	bl	2503c <__swsetup_r>
   2259a:	2800      	cmp	r0, #0
   2259c:	f040 8138 	bne.w	22810 <__sfvwrite_r+0x2e8>
   225a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   225a4:	683d      	ldr	r5, [r7, #0]
   225a6:	b298      	uxth	r0, r3
   225a8:	f010 0302 	ands.w	r3, r0, #2
   225ac:	d1d1      	bne.n	22552 <__sfvwrite_r+0x2a>
   225ae:	f010 0901 	ands.w	r9, r0, #1
   225b2:	d144      	bne.n	2263e <__sfvwrite_r+0x116>
   225b4:	464e      	mov	r6, r9
   225b6:	9700      	str	r7, [sp, #0]
   225b8:	b346      	cbz	r6, 2260c <__sfvwrite_r+0xe4>
   225ba:	0582      	lsls	r2, r0, #22
   225bc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   225c0:	f140 8085 	bpl.w	226ce <__sfvwrite_r+0x1a6>
   225c4:	45b3      	cmp	fp, r6
   225c6:	465a      	mov	r2, fp
   225c8:	f200 80b4 	bhi.w	22734 <__sfvwrite_r+0x20c>
   225cc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   225d0:	f040 80c1 	bne.w	22756 <__sfvwrite_r+0x22e>
   225d4:	6820      	ldr	r0, [r4, #0]
   225d6:	9201      	str	r2, [sp, #4]
   225d8:	4649      	mov	r1, r9
   225da:	f002 fa6b 	bl	24ab4 <memmove>
   225de:	68a3      	ldr	r3, [r4, #8]
   225e0:	9a01      	ldr	r2, [sp, #4]
   225e2:	eba3 010b 	sub.w	r1, r3, fp
   225e6:	6823      	ldr	r3, [r4, #0]
   225e8:	60a1      	str	r1, [r4, #8]
   225ea:	4413      	add	r3, r2
   225ec:	46b2      	mov	sl, r6
   225ee:	6023      	str	r3, [r4, #0]
   225f0:	2600      	movs	r6, #0
   225f2:	9a00      	ldr	r2, [sp, #0]
   225f4:	6893      	ldr	r3, [r2, #8]
   225f6:	eba3 030a 	sub.w	r3, r3, sl
   225fa:	44d1      	add	r9, sl
   225fc:	6093      	str	r3, [r2, #8]
   225fe:	2b00      	cmp	r3, #0
   22600:	d0c3      	beq.n	2258a <__sfvwrite_r+0x62>
   22602:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   22606:	b280      	uxth	r0, r0
   22608:	2e00      	cmp	r6, #0
   2260a:	d1d6      	bne.n	225ba <__sfvwrite_r+0x92>
   2260c:	e9d5 9600 	ldrd	r9, r6, [r5]
   22610:	3508      	adds	r5, #8
   22612:	e7d1      	b.n	225b8 <__sfvwrite_r+0x90>
   22614:	e9d5 a600 	ldrd	sl, r6, [r5]
   22618:	3508      	adds	r5, #8
   2261a:	e7a0      	b.n	2255e <__sfvwrite_r+0x36>
   2261c:	4621      	mov	r1, r4
   2261e:	4640      	mov	r0, r8
   22620:	f004 f9d8 	bl	269d4 <_fflush_r>
   22624:	b388      	cbz	r0, 2268a <__sfvwrite_r+0x162>
   22626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2262a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2262e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22632:	81a3      	strh	r3, [r4, #12]
   22634:	b003      	add	sp, #12
   22636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2263a:	2000      	movs	r0, #0
   2263c:	4770      	bx	lr
   2263e:	461e      	mov	r6, r3
   22640:	46ba      	mov	sl, r7
   22642:	4699      	mov	r9, r3
   22644:	4618      	mov	r0, r3
   22646:	9500      	str	r5, [sp, #0]
   22648:	461f      	mov	r7, r3
   2264a:	b366      	cbz	r6, 226a6 <__sfvwrite_r+0x17e>
   2264c:	2800      	cmp	r0, #0
   2264e:	d032      	beq.n	226b6 <__sfvwrite_r+0x18e>
   22650:	464a      	mov	r2, r9
   22652:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   22656:	6820      	ldr	r0, [r4, #0]
   22658:	68a5      	ldr	r5, [r4, #8]
   2265a:	42b2      	cmp	r2, r6
   2265c:	bf28      	it	cs
   2265e:	4632      	movcs	r2, r6
   22660:	4288      	cmp	r0, r1
   22662:	d904      	bls.n	2266e <__sfvwrite_r+0x146>
   22664:	eb05 0b03 	add.w	fp, r5, r3
   22668:	455a      	cmp	r2, fp
   2266a:	f300 80a7 	bgt.w	227bc <__sfvwrite_r+0x294>
   2266e:	4293      	cmp	r3, r2
   22670:	dc64      	bgt.n	2273c <__sfvwrite_r+0x214>
   22672:	69e1      	ldr	r1, [r4, #28]
   22674:	6a65      	ldr	r5, [r4, #36]	; 0x24
   22676:	463a      	mov	r2, r7
   22678:	4640      	mov	r0, r8
   2267a:	47a8      	blx	r5
   2267c:	f1b0 0b00 	subs.w	fp, r0, #0
   22680:	ddd1      	ble.n	22626 <__sfvwrite_r+0xfe>
   22682:	ebb9 090b 	subs.w	r9, r9, fp
   22686:	d0c9      	beq.n	2261c <__sfvwrite_r+0xf4>
   22688:	2001      	movs	r0, #1
   2268a:	f8da 3008 	ldr.w	r3, [sl, #8]
   2268e:	eba3 030b 	sub.w	r3, r3, fp
   22692:	445f      	add	r7, fp
   22694:	eba6 060b 	sub.w	r6, r6, fp
   22698:	f8ca 3008 	str.w	r3, [sl, #8]
   2269c:	2b00      	cmp	r3, #0
   2269e:	f43f af74 	beq.w	2258a <__sfvwrite_r+0x62>
   226a2:	2e00      	cmp	r6, #0
   226a4:	d1d2      	bne.n	2264c <__sfvwrite_r+0x124>
   226a6:	9a00      	ldr	r2, [sp, #0]
   226a8:	6856      	ldr	r6, [r2, #4]
   226aa:	4613      	mov	r3, r2
   226ac:	3208      	adds	r2, #8
   226ae:	9200      	str	r2, [sp, #0]
   226b0:	2e00      	cmp	r6, #0
   226b2:	d0f8      	beq.n	226a6 <__sfvwrite_r+0x17e>
   226b4:	681f      	ldr	r7, [r3, #0]
   226b6:	4632      	mov	r2, r6
   226b8:	210a      	movs	r1, #10
   226ba:	4638      	mov	r0, r7
   226bc:	f004 fa78 	bl	26bb0 <memchr>
   226c0:	2800      	cmp	r0, #0
   226c2:	f000 809c 	beq.w	227fe <__sfvwrite_r+0x2d6>
   226c6:	3001      	adds	r0, #1
   226c8:	eba0 0907 	sub.w	r9, r0, r7
   226cc:	e7c0      	b.n	22650 <__sfvwrite_r+0x128>
   226ce:	6820      	ldr	r0, [r4, #0]
   226d0:	6923      	ldr	r3, [r4, #16]
   226d2:	4298      	cmp	r0, r3
   226d4:	d816      	bhi.n	22704 <__sfvwrite_r+0x1dc>
   226d6:	6962      	ldr	r2, [r4, #20]
   226d8:	42b2      	cmp	r2, r6
   226da:	d813      	bhi.n	22704 <__sfvwrite_r+0x1dc>
   226dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   226e0:	42b3      	cmp	r3, r6
   226e2:	bf28      	it	cs
   226e4:	4633      	movcs	r3, r6
   226e6:	69e1      	ldr	r1, [r4, #28]
   226e8:	fb93 f3f2 	sdiv	r3, r3, r2
   226ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
   226ee:	fb02 f303 	mul.w	r3, r2, r3
   226f2:	4640      	mov	r0, r8
   226f4:	464a      	mov	r2, r9
   226f6:	47b8      	blx	r7
   226f8:	f1b0 0a00 	subs.w	sl, r0, #0
   226fc:	dd93      	ble.n	22626 <__sfvwrite_r+0xfe>
   226fe:	eba6 060a 	sub.w	r6, r6, sl
   22702:	e776      	b.n	225f2 <__sfvwrite_r+0xca>
   22704:	45b3      	cmp	fp, r6
   22706:	46da      	mov	sl, fp
   22708:	bf28      	it	cs
   2270a:	46b2      	movcs	sl, r6
   2270c:	4652      	mov	r2, sl
   2270e:	4649      	mov	r1, r9
   22710:	f002 f9d0 	bl	24ab4 <memmove>
   22714:	68a3      	ldr	r3, [r4, #8]
   22716:	6822      	ldr	r2, [r4, #0]
   22718:	eba3 030a 	sub.w	r3, r3, sl
   2271c:	4452      	add	r2, sl
   2271e:	60a3      	str	r3, [r4, #8]
   22720:	6022      	str	r2, [r4, #0]
   22722:	2b00      	cmp	r3, #0
   22724:	d1eb      	bne.n	226fe <__sfvwrite_r+0x1d6>
   22726:	4621      	mov	r1, r4
   22728:	4640      	mov	r0, r8
   2272a:	f004 f953 	bl	269d4 <_fflush_r>
   2272e:	2800      	cmp	r0, #0
   22730:	d0e5      	beq.n	226fe <__sfvwrite_r+0x1d6>
   22732:	e778      	b.n	22626 <__sfvwrite_r+0xfe>
   22734:	6820      	ldr	r0, [r4, #0]
   22736:	46b3      	mov	fp, r6
   22738:	4632      	mov	r2, r6
   2273a:	e74c      	b.n	225d6 <__sfvwrite_r+0xae>
   2273c:	4639      	mov	r1, r7
   2273e:	9201      	str	r2, [sp, #4]
   22740:	f002 f9b8 	bl	24ab4 <memmove>
   22744:	9a01      	ldr	r2, [sp, #4]
   22746:	68a3      	ldr	r3, [r4, #8]
   22748:	1a9b      	subs	r3, r3, r2
   2274a:	60a3      	str	r3, [r4, #8]
   2274c:	6823      	ldr	r3, [r4, #0]
   2274e:	4413      	add	r3, r2
   22750:	6023      	str	r3, [r4, #0]
   22752:	4693      	mov	fp, r2
   22754:	e795      	b.n	22682 <__sfvwrite_r+0x15a>
   22756:	6823      	ldr	r3, [r4, #0]
   22758:	6921      	ldr	r1, [r4, #16]
   2275a:	eba3 0b01 	sub.w	fp, r3, r1
   2275e:	6963      	ldr	r3, [r4, #20]
   22760:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   22764:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   22768:	f10b 0301 	add.w	r3, fp, #1
   2276c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   22770:	4433      	add	r3, r6
   22772:	4553      	cmp	r3, sl
   22774:	4652      	mov	r2, sl
   22776:	bf84      	itt	hi
   22778:	469a      	movhi	sl, r3
   2277a:	4652      	movhi	r2, sl
   2277c:	0543      	lsls	r3, r0, #21
   2277e:	d52c      	bpl.n	227da <__sfvwrite_r+0x2b2>
   22780:	4611      	mov	r1, r2
   22782:	4640      	mov	r0, r8
   22784:	f001 feb6 	bl	244f4 <_malloc_r>
   22788:	2800      	cmp	r0, #0
   2278a:	d03b      	beq.n	22804 <__sfvwrite_r+0x2dc>
   2278c:	465a      	mov	r2, fp
   2278e:	6921      	ldr	r1, [r4, #16]
   22790:	9001      	str	r0, [sp, #4]
   22792:	f7f6 fa01 	bl	18b98 <memcpy>
   22796:	89a2      	ldrh	r2, [r4, #12]
   22798:	9b01      	ldr	r3, [sp, #4]
   2279a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2279e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   227a2:	81a2      	strh	r2, [r4, #12]
   227a4:	eb03 000b 	add.w	r0, r3, fp
   227a8:	6123      	str	r3, [r4, #16]
   227aa:	ebaa 030b 	sub.w	r3, sl, fp
   227ae:	f8c4 a014 	str.w	sl, [r4, #20]
   227b2:	60a3      	str	r3, [r4, #8]
   227b4:	6020      	str	r0, [r4, #0]
   227b6:	46b3      	mov	fp, r6
   227b8:	4632      	mov	r2, r6
   227ba:	e70c      	b.n	225d6 <__sfvwrite_r+0xae>
   227bc:	4639      	mov	r1, r7
   227be:	465a      	mov	r2, fp
   227c0:	f002 f978 	bl	24ab4 <memmove>
   227c4:	6823      	ldr	r3, [r4, #0]
   227c6:	445b      	add	r3, fp
   227c8:	6023      	str	r3, [r4, #0]
   227ca:	4621      	mov	r1, r4
   227cc:	4640      	mov	r0, r8
   227ce:	f004 f901 	bl	269d4 <_fflush_r>
   227d2:	2800      	cmp	r0, #0
   227d4:	f43f af55 	beq.w	22682 <__sfvwrite_r+0x15a>
   227d8:	e725      	b.n	22626 <__sfvwrite_r+0xfe>
   227da:	4640      	mov	r0, r8
   227dc:	f004 fafc 	bl	26dd8 <_realloc_r>
   227e0:	4603      	mov	r3, r0
   227e2:	2800      	cmp	r0, #0
   227e4:	d1de      	bne.n	227a4 <__sfvwrite_r+0x27c>
   227e6:	6921      	ldr	r1, [r4, #16]
   227e8:	4640      	mov	r0, r8
   227ea:	f004 fd31 	bl	27250 <_free_r>
   227ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   227f2:	220c      	movs	r2, #12
   227f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   227f8:	f8c8 2000 	str.w	r2, [r8]
   227fc:	e715      	b.n	2262a <__sfvwrite_r+0x102>
   227fe:	1c72      	adds	r2, r6, #1
   22800:	4691      	mov	r9, r2
   22802:	e726      	b.n	22652 <__sfvwrite_r+0x12a>
   22804:	220c      	movs	r2, #12
   22806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2280a:	f8c8 2000 	str.w	r2, [r8]
   2280e:	e70c      	b.n	2262a <__sfvwrite_r+0x102>
   22810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22814:	e6ba      	b.n	2258c <__sfvwrite_r+0x64>
   22816:	bf00      	nop
   22818:	7ffffc00 	.word	0x7ffffc00

0002281c <_write_r>:
   2281c:	b538      	push	{r3, r4, r5, lr}
   2281e:	460c      	mov	r4, r1
   22820:	4d08      	ldr	r5, [pc, #32]	; (22844 <_write_r+0x28>)
   22822:	4684      	mov	ip, r0
   22824:	4611      	mov	r1, r2
   22826:	4620      	mov	r0, r4
   22828:	461a      	mov	r2, r3
   2282a:	2300      	movs	r3, #0
   2282c:	602b      	str	r3, [r5, #0]
   2282e:	4664      	mov	r4, ip
   22830:	f7f5 fdc8 	bl	183c4 <_write>
   22834:	1c43      	adds	r3, r0, #1
   22836:	d000      	beq.n	2283a <_write_r+0x1e>
   22838:	bd38      	pop	{r3, r4, r5, pc}
   2283a:	682b      	ldr	r3, [r5, #0]
   2283c:	2b00      	cmp	r3, #0
   2283e:	d0fb      	beq.n	22838 <_write_r+0x1c>
   22840:	6023      	str	r3, [r4, #0]
   22842:	bd38      	pop	{r3, r4, r5, pc}
   22844:	2000d2a0 	.word	0x2000d2a0

00022848 <_fwrite_r>:
   22848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2284c:	b086      	sub	sp, #24
   2284e:	fb02 f703 	mul.w	r7, r2, r3
   22852:	461d      	mov	r5, r3
   22854:	ab01      	add	r3, sp, #4
   22856:	9303      	str	r3, [sp, #12]
   22858:	2301      	movs	r3, #1
   2285a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2285c:	9101      	str	r1, [sp, #4]
   2285e:	4690      	mov	r8, r2
   22860:	9702      	str	r7, [sp, #8]
   22862:	9705      	str	r7, [sp, #20]
   22864:	9304      	str	r3, [sp, #16]
   22866:	4606      	mov	r6, r0
   22868:	b110      	cbz	r0, 22870 <_fwrite_r+0x28>
   2286a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2286c:	2b00      	cmp	r3, #0
   2286e:	d03d      	beq.n	228ec <_fwrite_r+0xa4>
   22870:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22872:	f013 0f01 	tst.w	r3, #1
   22876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2287a:	b29a      	uxth	r2, r3
   2287c:	d101      	bne.n	22882 <_fwrite_r+0x3a>
   2287e:	0599      	lsls	r1, r3, #22
   22880:	d52d      	bpl.n	228de <_fwrite_r+0x96>
   22882:	0492      	lsls	r2, r2, #18
   22884:	d406      	bmi.n	22894 <_fwrite_r+0x4c>
   22886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2288a:	81a3      	strh	r3, [r4, #12]
   2288c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2288e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   22892:	6663      	str	r3, [r4, #100]	; 0x64
   22894:	4630      	mov	r0, r6
   22896:	aa03      	add	r2, sp, #12
   22898:	4621      	mov	r1, r4
   2289a:	f7ff fe45 	bl	22528 <__sfvwrite_r>
   2289e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   228a0:	b178      	cbz	r0, 228c2 <_fwrite_r+0x7a>
   228a2:	07da      	lsls	r2, r3, #31
   228a4:	d506      	bpl.n	228b4 <_fwrite_r+0x6c>
   228a6:	9b05      	ldr	r3, [sp, #20]
   228a8:	1aff      	subs	r7, r7, r3
   228aa:	fbb7 f0f8 	udiv	r0, r7, r8
   228ae:	b006      	add	sp, #24
   228b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228b4:	89a3      	ldrh	r3, [r4, #12]
   228b6:	059b      	lsls	r3, r3, #22
   228b8:	d4f5      	bmi.n	228a6 <_fwrite_r+0x5e>
   228ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   228bc:	f002 fa3e 	bl	24d3c <__retarget_lock_release_recursive>
   228c0:	e7f1      	b.n	228a6 <_fwrite_r+0x5e>
   228c2:	07d8      	lsls	r0, r3, #31
   228c4:	d407      	bmi.n	228d6 <_fwrite_r+0x8e>
   228c6:	89a3      	ldrh	r3, [r4, #12]
   228c8:	0599      	lsls	r1, r3, #22
   228ca:	d404      	bmi.n	228d6 <_fwrite_r+0x8e>
   228cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   228ce:	f002 fa35 	bl	24d3c <__retarget_lock_release_recursive>
   228d2:	4628      	mov	r0, r5
   228d4:	e7eb      	b.n	228ae <_fwrite_r+0x66>
   228d6:	4628      	mov	r0, r5
   228d8:	b006      	add	sp, #24
   228da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   228e0:	f002 fa2a 	bl	24d38 <__retarget_lock_acquire_recursive>
   228e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   228e8:	b29a      	uxth	r2, r3
   228ea:	e7ca      	b.n	22882 <_fwrite_r+0x3a>
   228ec:	f004 f932 	bl	26b54 <__sinit>
   228f0:	e7be      	b.n	22870 <_fwrite_r+0x28>
   228f2:	bf00      	nop

000228f4 <fwrite>:
   228f4:	b510      	push	{r4, lr}
   228f6:	4c06      	ldr	r4, [pc, #24]	; (22910 <fwrite+0x1c>)
   228f8:	b082      	sub	sp, #8
   228fa:	4684      	mov	ip, r0
   228fc:	9300      	str	r3, [sp, #0]
   228fe:	6820      	ldr	r0, [r4, #0]
   22900:	4613      	mov	r3, r2
   22902:	460a      	mov	r2, r1
   22904:	4661      	mov	r1, ip
   22906:	f7ff ff9f 	bl	22848 <_fwrite_r>
   2290a:	b002      	add	sp, #8
   2290c:	bd10      	pop	{r4, pc}
   2290e:	bf00      	nop
   22910:	20005fe4 	.word	0x20005fe4

00022914 <__errno>:
   22914:	4b01      	ldr	r3, [pc, #4]	; (2291c <__errno+0x8>)
   22916:	6818      	ldr	r0, [r3, #0]
   22918:	4770      	bx	lr
   2291a:	bf00      	nop
   2291c:	20005fe4 	.word	0x20005fe4

00022920 <_svfprintf_r>:
   22920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22924:	ed2d 8b08 	vpush	{d8-d11}
   22928:	b0d1      	sub	sp, #324	; 0x144
   2292a:	460c      	mov	r4, r1
   2292c:	ee0b 1a10 	vmov	s22, r1
   22930:	4690      	mov	r8, r2
   22932:	9308      	str	r3, [sp, #32]
   22934:	4683      	mov	fp, r0
   22936:	f002 fa09 	bl	24d4c <_localeconv_r>
   2293a:	6803      	ldr	r3, [r0, #0]
   2293c:	9312      	str	r3, [sp, #72]	; 0x48
   2293e:	4618      	mov	r0, r3
   22940:	f004 f99e 	bl	26c80 <strlen>
   22944:	af20      	add	r7, sp, #128	; 0x80
   22946:	9010      	str	r0, [sp, #64]	; 0x40
   22948:	2208      	movs	r2, #8
   2294a:	2100      	movs	r1, #0
   2294c:	4638      	mov	r0, r7
   2294e:	f002 f94d 	bl	24bec <memset>
   22952:	89a3      	ldrh	r3, [r4, #12]
   22954:	061b      	lsls	r3, r3, #24
   22956:	d503      	bpl.n	22960 <_svfprintf_r+0x40>
   22958:	6923      	ldr	r3, [r4, #16]
   2295a:	2b00      	cmp	r3, #0
   2295c:	f000 8755 	beq.w	2380a <_svfprintf_r+0xeea>
   22960:	2300      	movs	r3, #0
   22962:	ed9f 8b83 	vldr	d8, [pc, #524]	; 22b70 <_svfprintf_r+0x250>
   22966:	ed9f 9b84 	vldr	d9, [pc, #528]	; 22b78 <_svfprintf_r+0x258>
   2296a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   2296e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   22972:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   22976:	aa27      	add	r2, sp, #156	; 0x9c
   22978:	930e      	str	r3, [sp, #56]	; 0x38
   2297a:	9224      	str	r2, [sp, #144]	; 0x90
   2297c:	4692      	mov	sl, r2
   2297e:	9311      	str	r3, [sp, #68]	; 0x44
   22980:	9304      	str	r3, [sp, #16]
   22982:	4644      	mov	r4, r8
   22984:	46a1      	mov	r9, r4
   22986:	4b7e      	ldr	r3, [pc, #504]	; (22b80 <_svfprintf_r+0x260>)
   22988:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   2298c:	f002 f9d8 	bl	24d40 <__locale_mb_cur_max>
   22990:	464a      	mov	r2, r9
   22992:	4603      	mov	r3, r0
   22994:	a91c      	add	r1, sp, #112	; 0x70
   22996:	9700      	str	r7, [sp, #0]
   22998:	4658      	mov	r0, fp
   2299a:	47a8      	blx	r5
   2299c:	2800      	cmp	r0, #0
   2299e:	f000 80b0 	beq.w	22b02 <_svfprintf_r+0x1e2>
   229a2:	f2c0 80a6 	blt.w	22af2 <_svfprintf_r+0x1d2>
   229a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   229a8:	2a25      	cmp	r2, #37	; 0x25
   229aa:	4603      	mov	r3, r0
   229ac:	d001      	beq.n	229b2 <_svfprintf_r+0x92>
   229ae:	4499      	add	r9, r3
   229b0:	e7e9      	b.n	22986 <_svfprintf_r+0x66>
   229b2:	ebb9 0504 	subs.w	r5, r9, r4
   229b6:	4606      	mov	r6, r0
   229b8:	f040 80a7 	bne.w	22b0a <_svfprintf_r+0x1ea>
   229bc:	2300      	movs	r3, #0
   229be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   229c2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   229c6:	4698      	mov	r8, r3
   229c8:	9306      	str	r3, [sp, #24]
   229ca:	f109 0901 	add.w	r9, r9, #1
   229ce:	f899 3000 	ldrb.w	r3, [r9]
   229d2:	9203      	str	r2, [sp, #12]
   229d4:	252b      	movs	r5, #43	; 0x2b
   229d6:	2620      	movs	r6, #32
   229d8:	f109 0901 	add.w	r9, r9, #1
   229dc:	f1a3 0220 	sub.w	r2, r3, #32
   229e0:	2a5a      	cmp	r2, #90	; 0x5a
   229e2:	f200 80cf 	bhi.w	22b84 <_svfprintf_r+0x264>
   229e6:	e8df f012 	tbh	[pc, r2, lsl #1]
   229ea:	02e8      	.short	0x02e8
   229ec:	00cd00cd 	.word	0x00cd00cd
   229f0:	00cd02e3 	.word	0x00cd02e3
   229f4:	00cd00cd 	.word	0x00cd00cd
   229f8:	00cd006a 	.word	0x00cd006a
   229fc:	020500cd 	.word	0x020500cd
   22a00:	00cd0284 	.word	0x00cd0284
   22a04:	02c90210 	.word	0x02c90210
   22a08:	02bd00cd 	.word	0x02bd00cd
   22a0c:	005b005b 	.word	0x005b005b
   22a10:	005b005b 	.word	0x005b005b
   22a14:	005b005b 	.word	0x005b005b
   22a18:	005b005b 	.word	0x005b005b
   22a1c:	00cd005b 	.word	0x00cd005b
   22a20:	00cd00cd 	.word	0x00cd00cd
   22a24:	00cd00cd 	.word	0x00cd00cd
   22a28:	00cd00cd 	.word	0x00cd00cd
   22a2c:	00cd0153 	.word	0x00cd0153
   22a30:	021a0183 	.word	0x021a0183
   22a34:	01530153 	.word	0x01530153
   22a38:	00cd0153 	.word	0x00cd0153
   22a3c:	00cd00cd 	.word	0x00cd00cd
   22a40:	021500cd 	.word	0x021500cd
   22a44:	00cd00cd 	.word	0x00cd00cd
   22a48:	00cd0296 	.word	0x00cd0296
   22a4c:	00cd00cd 	.word	0x00cd00cd
   22a50:	00cd01ab 	.word	0x00cd01ab
   22a54:	00cd02aa 	.word	0x00cd02aa
   22a58:	06e300cd 	.word	0x06e300cd
   22a5c:	00cd00cd 	.word	0x00cd00cd
   22a60:	00cd00cd 	.word	0x00cd00cd
   22a64:	00cd00cd 	.word	0x00cd00cd
   22a68:	00cd00cd 	.word	0x00cd00cd
   22a6c:	00cd0153 	.word	0x00cd0153
   22a70:	01de0183 	.word	0x01de0183
   22a74:	01530153 	.word	0x01530153
   22a78:	02770153 	.word	0x02770153
   22a7c:	007f01de 	.word	0x007f01de
   22a80:	028900cd 	.word	0x028900cd
   22a84:	025f00cd 	.word	0x025f00cd
   22a88:	022f06e0 	.word	0x022f06e0
   22a8c:	00cd007f 	.word	0x00cd007f
   22a90:	007c01ab 	.word	0x007c01ab
   22a94:	00cd06b8 	.word	0x00cd06b8
   22a98:	06bd00cd 	.word	0x06bd00cd
   22a9c:	007c00cd 	.word	0x007c00cd
   22aa0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   22aa4:	2100      	movs	r1, #0
   22aa6:	f819 3b01 	ldrb.w	r3, [r9], #1
   22aaa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   22aae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   22ab2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   22ab6:	2a09      	cmp	r2, #9
   22ab8:	d9f5      	bls.n	22aa6 <_svfprintf_r+0x186>
   22aba:	9106      	str	r1, [sp, #24]
   22abc:	e78e      	b.n	229dc <_svfprintf_r+0xbc>
   22abe:	4658      	mov	r0, fp
   22ac0:	f002 f944 	bl	24d4c <_localeconv_r>
   22ac4:	6843      	ldr	r3, [r0, #4]
   22ac6:	9315      	str	r3, [sp, #84]	; 0x54
   22ac8:	4618      	mov	r0, r3
   22aca:	f004 f8d9 	bl	26c80 <strlen>
   22ace:	9016      	str	r0, [sp, #88]	; 0x58
   22ad0:	4658      	mov	r0, fp
   22ad2:	f002 f93b 	bl	24d4c <_localeconv_r>
   22ad6:	6883      	ldr	r3, [r0, #8]
   22ad8:	9313      	str	r3, [sp, #76]	; 0x4c
   22ada:	9b16      	ldr	r3, [sp, #88]	; 0x58
   22adc:	2b00      	cmp	r3, #0
   22ade:	f040 862d 	bne.w	2373c <_svfprintf_r+0xe1c>
   22ae2:	f899 3000 	ldrb.w	r3, [r9]
   22ae6:	e777      	b.n	229d8 <_svfprintf_r+0xb8>
   22ae8:	f899 3000 	ldrb.w	r3, [r9]
   22aec:	f048 0820 	orr.w	r8, r8, #32
   22af0:	e772      	b.n	229d8 <_svfprintf_r+0xb8>
   22af2:	2208      	movs	r2, #8
   22af4:	2100      	movs	r1, #0
   22af6:	4638      	mov	r0, r7
   22af8:	f002 f878 	bl	24bec <memset>
   22afc:	2301      	movs	r3, #1
   22afe:	4499      	add	r9, r3
   22b00:	e741      	b.n	22986 <_svfprintf_r+0x66>
   22b02:	ebb9 0504 	subs.w	r5, r9, r4
   22b06:	4606      	mov	r6, r0
   22b08:	d011      	beq.n	22b2e <_svfprintf_r+0x20e>
   22b0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   22b0c:	442b      	add	r3, r5
   22b0e:	9326      	str	r3, [sp, #152]	; 0x98
   22b10:	9b25      	ldr	r3, [sp, #148]	; 0x94
   22b12:	3301      	adds	r3, #1
   22b14:	2b07      	cmp	r3, #7
   22b16:	e9ca 4500 	strd	r4, r5, [sl]
   22b1a:	9325      	str	r3, [sp, #148]	; 0x94
   22b1c:	dc1c      	bgt.n	22b58 <_svfprintf_r+0x238>
   22b1e:	f10a 0a08 	add.w	sl, sl, #8
   22b22:	9b04      	ldr	r3, [sp, #16]
   22b24:	442b      	add	r3, r5
   22b26:	9304      	str	r3, [sp, #16]
   22b28:	2e00      	cmp	r6, #0
   22b2a:	f47f af47 	bne.w	229bc <_svfprintf_r+0x9c>
   22b2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   22b30:	2b00      	cmp	r3, #0
   22b32:	f041 820b 	bne.w	23f4c <_svfprintf_r+0x162c>
   22b36:	ee1b 3a10 	vmov	r3, s22
   22b3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   22b3e:	f013 0f40 	tst.w	r3, #64	; 0x40
   22b42:	9b04      	ldr	r3, [sp, #16]
   22b44:	bf18      	it	ne
   22b46:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   22b4a:	9304      	str	r3, [sp, #16]
   22b4c:	9804      	ldr	r0, [sp, #16]
   22b4e:	b051      	add	sp, #324	; 0x144
   22b50:	ecbd 8b08 	vpop	{d8-d11}
   22b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b58:	ee1b 1a10 	vmov	r1, s22
   22b5c:	aa24      	add	r2, sp, #144	; 0x90
   22b5e:	4658      	mov	r0, fp
   22b60:	f004 fd42 	bl	275e8 <__ssprint_r>
   22b64:	2800      	cmp	r0, #0
   22b66:	d1e6      	bne.n	22b36 <_svfprintf_r+0x216>
   22b68:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   22b6c:	e7d9      	b.n	22b22 <_svfprintf_r+0x202>
   22b6e:	bf00      	nop
	...
   22b78:	ffffffff 	.word	0xffffffff
   22b7c:	7fefffff 	.word	0x7fefffff
   22b80:	20005a5c 	.word	0x20005a5c
   22b84:	930b      	str	r3, [sp, #44]	; 0x2c
   22b86:	2b00      	cmp	r3, #0
   22b88:	d0d1      	beq.n	22b2e <_svfprintf_r+0x20e>
   22b8a:	2100      	movs	r1, #0
   22b8c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   22b90:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   22b94:	2301      	movs	r3, #1
   22b96:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   22b9a:	9302      	str	r3, [sp, #8]
   22b9c:	9107      	str	r1, [sp, #28]
   22b9e:	9305      	str	r3, [sp, #20]
   22ba0:	9103      	str	r1, [sp, #12]
   22ba2:	910f      	str	r1, [sp, #60]	; 0x3c
   22ba4:	ac37      	add	r4, sp, #220	; 0xdc
   22ba6:	f018 0302 	ands.w	r3, r8, #2
   22baa:	9309      	str	r3, [sp, #36]	; 0x24
   22bac:	d002      	beq.n	22bb4 <_svfprintf_r+0x294>
   22bae:	9b02      	ldr	r3, [sp, #8]
   22bb0:	3302      	adds	r3, #2
   22bb2:	9302      	str	r3, [sp, #8]
   22bb4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   22bb8:	930a      	str	r3, [sp, #40]	; 0x28
   22bba:	d105      	bne.n	22bc8 <_svfprintf_r+0x2a8>
   22bbc:	9b06      	ldr	r3, [sp, #24]
   22bbe:	9a02      	ldr	r2, [sp, #8]
   22bc0:	1a9d      	subs	r5, r3, r2
   22bc2:	2d00      	cmp	r5, #0
   22bc4:	f300 8369 	bgt.w	2329a <_svfprintf_r+0x97a>
   22bc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   22bca:	b189      	cbz	r1, 22bf0 <_svfprintf_r+0x2d0>
   22bcc:	9925      	ldr	r1, [sp, #148]	; 0x94
   22bce:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   22bd2:	3101      	adds	r1, #1
   22bd4:	3201      	adds	r2, #1
   22bd6:	f8ca 0000 	str.w	r0, [sl]
   22bda:	2907      	cmp	r1, #7
   22bdc:	f04f 0001 	mov.w	r0, #1
   22be0:	9226      	str	r2, [sp, #152]	; 0x98
   22be2:	9125      	str	r1, [sp, #148]	; 0x94
   22be4:	f8ca 0004 	str.w	r0, [sl, #4]
   22be8:	f300 83a2 	bgt.w	23330 <_svfprintf_r+0xa10>
   22bec:	f10a 0a08 	add.w	sl, sl, #8
   22bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22bf2:	b183      	cbz	r3, 22c16 <_svfprintf_r+0x2f6>
   22bf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   22bf6:	a91a      	add	r1, sp, #104	; 0x68
   22bf8:	3301      	adds	r3, #1
   22bfa:	3202      	adds	r2, #2
   22bfc:	f8ca 1000 	str.w	r1, [sl]
   22c00:	2b07      	cmp	r3, #7
   22c02:	f04f 0102 	mov.w	r1, #2
   22c06:	9226      	str	r2, [sp, #152]	; 0x98
   22c08:	9325      	str	r3, [sp, #148]	; 0x94
   22c0a:	f8ca 1004 	str.w	r1, [sl, #4]
   22c0e:	f300 83a3 	bgt.w	23358 <_svfprintf_r+0xa38>
   22c12:	f10a 0a08 	add.w	sl, sl, #8
   22c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22c18:	2b80      	cmp	r3, #128	; 0x80
   22c1a:	f000 826c 	beq.w	230f6 <_svfprintf_r+0x7d6>
   22c1e:	9b03      	ldr	r3, [sp, #12]
   22c20:	9905      	ldr	r1, [sp, #20]
   22c22:	1a5d      	subs	r5, r3, r1
   22c24:	2d00      	cmp	r5, #0
   22c26:	f300 82a5 	bgt.w	23174 <_svfprintf_r+0x854>
   22c2a:	f418 7f80 	tst.w	r8, #256	; 0x100
   22c2e:	f040 820d 	bne.w	2304c <_svfprintf_r+0x72c>
   22c32:	9b05      	ldr	r3, [sp, #20]
   22c34:	f8ca 3004 	str.w	r3, [sl, #4]
   22c38:	441a      	add	r2, r3
   22c3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   22c3c:	f8ca 4000 	str.w	r4, [sl]
   22c40:	3301      	adds	r3, #1
   22c42:	2b07      	cmp	r3, #7
   22c44:	9226      	str	r2, [sp, #152]	; 0x98
   22c46:	9325      	str	r3, [sp, #148]	; 0x94
   22c48:	f300 831b 	bgt.w	23282 <_svfprintf_r+0x962>
   22c4c:	f10a 0a08 	add.w	sl, sl, #8
   22c50:	f018 0f04 	tst.w	r8, #4
   22c54:	d005      	beq.n	22c62 <_svfprintf_r+0x342>
   22c56:	9b06      	ldr	r3, [sp, #24]
   22c58:	9902      	ldr	r1, [sp, #8]
   22c5a:	1a5c      	subs	r4, r3, r1
   22c5c:	2c00      	cmp	r4, #0
   22c5e:	f300 8388 	bgt.w	23372 <_svfprintf_r+0xa52>
   22c62:	9b04      	ldr	r3, [sp, #16]
   22c64:	9906      	ldr	r1, [sp, #24]
   22c66:	9802      	ldr	r0, [sp, #8]
   22c68:	4281      	cmp	r1, r0
   22c6a:	bfac      	ite	ge
   22c6c:	185b      	addge	r3, r3, r1
   22c6e:	181b      	addlt	r3, r3, r0
   22c70:	9304      	str	r3, [sp, #16]
   22c72:	2a00      	cmp	r2, #0
   22c74:	f040 82b0 	bne.w	231d8 <_svfprintf_r+0x8b8>
   22c78:	2300      	movs	r3, #0
   22c7a:	9325      	str	r3, [sp, #148]	; 0x94
   22c7c:	9b07      	ldr	r3, [sp, #28]
   22c7e:	b11b      	cbz	r3, 22c88 <_svfprintf_r+0x368>
   22c80:	9907      	ldr	r1, [sp, #28]
   22c82:	4658      	mov	r0, fp
   22c84:	f004 fae4 	bl	27250 <_free_r>
   22c88:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   22c8c:	464c      	mov	r4, r9
   22c8e:	e679      	b.n	22984 <_svfprintf_r+0x64>
   22c90:	930b      	str	r3, [sp, #44]	; 0x2c
   22c92:	9b08      	ldr	r3, [sp, #32]
   22c94:	3307      	adds	r3, #7
   22c96:	f023 0307 	bic.w	r3, r3, #7
   22c9a:	ecb3 8b02 	vldmia	r3!, {d8}
   22c9e:	eeb0 7bc8 	vabs.f64	d7, d8
   22ca2:	eeb4 7b49 	vcmp.f64	d7, d9
   22ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22caa:	9308      	str	r3, [sp, #32]
   22cac:	f340 84e9 	ble.w	23682 <_svfprintf_r+0xd62>
   22cb0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   22cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22cb8:	f101 8059 	bmi.w	23d6e <_svfprintf_r+0x144e>
   22cbc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   22cc0:	4cab      	ldr	r4, [pc, #684]	; (22f70 <_svfprintf_r+0x650>)
   22cc2:	4bac      	ldr	r3, [pc, #688]	; (22f74 <_svfprintf_r+0x654>)
   22cc4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   22cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22cca:	2a47      	cmp	r2, #71	; 0x47
   22ccc:	bfc8      	it	gt
   22cce:	461c      	movgt	r4, r3
   22cd0:	2300      	movs	r3, #0
   22cd2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   22cd6:	2203      	movs	r2, #3
   22cd8:	9307      	str	r3, [sp, #28]
   22cda:	9202      	str	r2, [sp, #8]
   22cdc:	9205      	str	r2, [sp, #20]
   22cde:	9303      	str	r3, [sp, #12]
   22ce0:	930f      	str	r3, [sp, #60]	; 0x3c
   22ce2:	2900      	cmp	r1, #0
   22ce4:	f43f af5f 	beq.w	22ba6 <_svfprintf_r+0x286>
   22ce8:	9b02      	ldr	r3, [sp, #8]
   22cea:	3301      	adds	r3, #1
   22cec:	9302      	str	r3, [sp, #8]
   22cee:	e75a      	b.n	22ba6 <_svfprintf_r+0x286>
   22cf0:	2b43      	cmp	r3, #67	; 0x43
   22cf2:	930b      	str	r3, [sp, #44]	; 0x2c
   22cf4:	d003      	beq.n	22cfe <_svfprintf_r+0x3de>
   22cf6:	f018 0f10 	tst.w	r8, #16
   22cfa:	f000 855d 	beq.w	237b8 <_svfprintf_r+0xe98>
   22cfe:	9d08      	ldr	r5, [sp, #32]
   22d00:	2208      	movs	r2, #8
   22d02:	2100      	movs	r1, #0
   22d04:	a822      	add	r0, sp, #136	; 0x88
   22d06:	ac37      	add	r4, sp, #220	; 0xdc
   22d08:	f001 ff70 	bl	24bec <memset>
   22d0c:	ab22      	add	r3, sp, #136	; 0x88
   22d0e:	f855 2b04 	ldr.w	r2, [r5], #4
   22d12:	4621      	mov	r1, r4
   22d14:	4658      	mov	r0, fp
   22d16:	f001 ffc1 	bl	24c9c <_wcrtomb_r>
   22d1a:	4603      	mov	r3, r0
   22d1c:	3301      	adds	r3, #1
   22d1e:	9005      	str	r0, [sp, #20]
   22d20:	f001 82ee 	beq.w	24300 <_svfprintf_r+0x19e0>
   22d24:	9b05      	ldr	r3, [sp, #20]
   22d26:	9508      	str	r5, [sp, #32]
   22d28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22d2c:	9302      	str	r3, [sp, #8]
   22d2e:	2100      	movs	r1, #0
   22d30:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   22d34:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   22d38:	9107      	str	r1, [sp, #28]
   22d3a:	9103      	str	r1, [sp, #12]
   22d3c:	910f      	str	r1, [sp, #60]	; 0x3c
   22d3e:	e732      	b.n	22ba6 <_svfprintf_r+0x286>
   22d40:	930b      	str	r3, [sp, #44]	; 0x2c
   22d42:	9b08      	ldr	r3, [sp, #32]
   22d44:	461a      	mov	r2, r3
   22d46:	2300      	movs	r3, #0
   22d48:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   22d4c:	4613      	mov	r3, r2
   22d4e:	f853 4b04 	ldr.w	r4, [r3], #4
   22d52:	9308      	str	r3, [sp, #32]
   22d54:	2c00      	cmp	r4, #0
   22d56:	f000 8548 	beq.w	237ea <_svfprintf_r+0xeca>
   22d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22d5c:	2b53      	cmp	r3, #83	; 0x53
   22d5e:	f000 86ec 	beq.w	23b3a <_svfprintf_r+0x121a>
   22d62:	f018 0310 	ands.w	r3, r8, #16
   22d66:	930c      	str	r3, [sp, #48]	; 0x30
   22d68:	f040 86e7 	bne.w	23b3a <_svfprintf_r+0x121a>
   22d6c:	9b03      	ldr	r3, [sp, #12]
   22d6e:	1c5d      	adds	r5, r3, #1
   22d70:	f001 80e5 	beq.w	23f3e <_svfprintf_r+0x161e>
   22d74:	990c      	ldr	r1, [sp, #48]	; 0x30
   22d76:	461a      	mov	r2, r3
   22d78:	4620      	mov	r0, r4
   22d7a:	f003 ff19 	bl	26bb0 <memchr>
   22d7e:	9007      	str	r0, [sp, #28]
   22d80:	2800      	cmp	r0, #0
   22d82:	f001 8328 	beq.w	243d6 <_svfprintf_r+0x1ab6>
   22d86:	9b07      	ldr	r3, [sp, #28]
   22d88:	1b1a      	subs	r2, r3, r4
   22d8a:	9205      	str	r2, [sp, #20]
   22d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22d8e:	9303      	str	r3, [sp, #12]
   22d90:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   22d94:	930f      	str	r3, [sp, #60]	; 0x3c
   22d96:	930d      	str	r3, [sp, #52]	; 0x34
   22d98:	9307      	str	r3, [sp, #28]
   22d9a:	2373      	movs	r3, #115	; 0x73
   22d9c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   22da0:	9202      	str	r2, [sp, #8]
   22da2:	930b      	str	r3, [sp, #44]	; 0x2c
   22da4:	e79d      	b.n	22ce2 <_svfprintf_r+0x3c2>
   22da6:	f018 0f20 	tst.w	r8, #32
   22daa:	930b      	str	r3, [sp, #44]	; 0x2c
   22dac:	9b08      	ldr	r3, [sp, #32]
   22dae:	d03d      	beq.n	22e2c <_svfprintf_r+0x50c>
   22db0:	3307      	adds	r3, #7
   22db2:	f023 0307 	bic.w	r3, r3, #7
   22db6:	461a      	mov	r2, r3
   22db8:	4611      	mov	r1, r2
   22dba:	685b      	ldr	r3, [r3, #4]
   22dbc:	f851 2b08 	ldr.w	r2, [r1], #8
   22dc0:	9108      	str	r1, [sp, #32]
   22dc2:	4619      	mov	r1, r3
   22dc4:	2b00      	cmp	r3, #0
   22dc6:	f2c0 840c 	blt.w	235e2 <_svfprintf_r+0xcc2>
   22dca:	9b03      	ldr	r3, [sp, #12]
   22dcc:	3301      	adds	r3, #1
   22dce:	f000 829e 	beq.w	2330e <_svfprintf_r+0x9ee>
   22dd2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   22dd6:	ea52 0301 	orrs.w	r3, r2, r1
   22dda:	9002      	str	r0, [sp, #8]
   22ddc:	f040 8299 	bne.w	23312 <_svfprintf_r+0x9f2>
   22de0:	9b03      	ldr	r3, [sp, #12]
   22de2:	2b00      	cmp	r3, #0
   22de4:	f040 829a 	bne.w	2331c <_svfprintf_r+0x9fc>
   22de8:	4680      	mov	r8, r0
   22dea:	2300      	movs	r3, #0
   22dec:	9303      	str	r3, [sp, #12]
   22dee:	9305      	str	r3, [sp, #20]
   22df0:	ac50      	add	r4, sp, #320	; 0x140
   22df2:	e106      	b.n	23002 <_svfprintf_r+0x6e2>
   22df4:	9b08      	ldr	r3, [sp, #32]
   22df6:	f853 2b04 	ldr.w	r2, [r3], #4
   22dfa:	9206      	str	r2, [sp, #24]
   22dfc:	2a00      	cmp	r2, #0
   22dfe:	f280 8419 	bge.w	23634 <_svfprintf_r+0xd14>
   22e02:	9a06      	ldr	r2, [sp, #24]
   22e04:	9308      	str	r3, [sp, #32]
   22e06:	4252      	negs	r2, r2
   22e08:	9206      	str	r2, [sp, #24]
   22e0a:	f899 3000 	ldrb.w	r3, [r9]
   22e0e:	f048 0804 	orr.w	r8, r8, #4
   22e12:	e5e1      	b.n	229d8 <_svfprintf_r+0xb8>
   22e14:	f899 3000 	ldrb.w	r3, [r9]
   22e18:	f048 0808 	orr.w	r8, r8, #8
   22e1c:	e5dc      	b.n	229d8 <_svfprintf_r+0xb8>
   22e1e:	f048 0810 	orr.w	r8, r8, #16
   22e22:	f018 0f20 	tst.w	r8, #32
   22e26:	930b      	str	r3, [sp, #44]	; 0x2c
   22e28:	9b08      	ldr	r3, [sp, #32]
   22e2a:	d1c1      	bne.n	22db0 <_svfprintf_r+0x490>
   22e2c:	f018 0f10 	tst.w	r8, #16
   22e30:	f040 840b 	bne.w	2364a <_svfprintf_r+0xd2a>
   22e34:	f018 0f40 	tst.w	r8, #64	; 0x40
   22e38:	f000 8403 	beq.w	23642 <_svfprintf_r+0xd22>
   22e3c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   22e40:	9308      	str	r3, [sp, #32]
   22e42:	17d1      	asrs	r1, r2, #31
   22e44:	460b      	mov	r3, r1
   22e46:	e7bd      	b.n	22dc4 <_svfprintf_r+0x4a4>
   22e48:	9b08      	ldr	r3, [sp, #32]
   22e4a:	f048 0202 	orr.w	r2, r8, #2
   22e4e:	9202      	str	r2, [sp, #8]
   22e50:	f853 2b04 	ldr.w	r2, [r3], #4
   22e54:	9308      	str	r3, [sp, #32]
   22e56:	f647 0330 	movw	r3, #30768	; 0x7830
   22e5a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   22e5e:	2078      	movs	r0, #120	; 0x78
   22e60:	4b45      	ldr	r3, [pc, #276]	; (22f78 <_svfprintf_r+0x658>)
   22e62:	9311      	str	r3, [sp, #68]	; 0x44
   22e64:	2100      	movs	r1, #0
   22e66:	2302      	movs	r3, #2
   22e68:	900b      	str	r0, [sp, #44]	; 0x2c
   22e6a:	2000      	movs	r0, #0
   22e6c:	9c03      	ldr	r4, [sp, #12]
   22e6e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   22e72:	1c60      	adds	r0, r4, #1
   22e74:	f000 80ad 	beq.w	22fd2 <_svfprintf_r+0x6b2>
   22e78:	9802      	ldr	r0, [sp, #8]
   22e7a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   22e7e:	ea52 0001 	orrs.w	r0, r2, r1
   22e82:	f040 80a4 	bne.w	22fce <_svfprintf_r+0x6ae>
   22e86:	2c00      	cmp	r4, #0
   22e88:	f040 86ae 	bne.w	23be8 <_svfprintf_r+0x12c8>
   22e8c:	2b00      	cmp	r3, #0
   22e8e:	d1ac      	bne.n	22dea <_svfprintf_r+0x4ca>
   22e90:	9b02      	ldr	r3, [sp, #8]
   22e92:	f013 0301 	ands.w	r3, r3, #1
   22e96:	9305      	str	r3, [sp, #20]
   22e98:	f000 83d1 	beq.w	2363e <_svfprintf_r+0xd1e>
   22e9c:	2330      	movs	r3, #48	; 0x30
   22e9e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   22ea2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   22ea6:	e0ac      	b.n	23002 <_svfprintf_r+0x6e2>
   22ea8:	f018 0f20 	tst.w	r8, #32
   22eac:	f040 83d4 	bne.w	23658 <_svfprintf_r+0xd38>
   22eb0:	f018 0f10 	tst.w	r8, #16
   22eb4:	f040 869f 	bne.w	23bf6 <_svfprintf_r+0x12d6>
   22eb8:	f018 0f40 	tst.w	r8, #64	; 0x40
   22ebc:	f040 8797 	bne.w	23dee <_svfprintf_r+0x14ce>
   22ec0:	f418 7f00 	tst.w	r8, #512	; 0x200
   22ec4:	f000 8697 	beq.w	23bf6 <_svfprintf_r+0x12d6>
   22ec8:	9b08      	ldr	r3, [sp, #32]
   22eca:	9904      	ldr	r1, [sp, #16]
   22ecc:	f853 2b04 	ldr.w	r2, [r3], #4
   22ed0:	9308      	str	r3, [sp, #32]
   22ed2:	7011      	strb	r1, [r2, #0]
   22ed4:	464c      	mov	r4, r9
   22ed6:	e555      	b.n	22984 <_svfprintf_r+0x64>
   22ed8:	f899 3000 	ldrb.w	r3, [r9]
   22edc:	2b68      	cmp	r3, #104	; 0x68
   22ede:	bf03      	ittte	eq
   22ee0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   22ee4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   22ee8:	f109 0901 	addeq.w	r9, r9, #1
   22eec:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   22ef0:	e572      	b.n	229d8 <_svfprintf_r+0xb8>
   22ef2:	f899 3000 	ldrb.w	r3, [r9]
   22ef6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   22efa:	e56d      	b.n	229d8 <_svfprintf_r+0xb8>
   22efc:	f899 3000 	ldrb.w	r3, [r9]
   22f00:	2b6c      	cmp	r3, #108	; 0x6c
   22f02:	bf03      	ittte	eq
   22f04:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   22f08:	f048 0820 	orreq.w	r8, r8, #32
   22f0c:	f109 0901 	addeq.w	r9, r9, #1
   22f10:	f048 0810 	orrne.w	r8, r8, #16
   22f14:	e560      	b.n	229d8 <_svfprintf_r+0xb8>
   22f16:	930b      	str	r3, [sp, #44]	; 0x2c
   22f18:	f048 0810 	orr.w	r8, r8, #16
   22f1c:	f018 0120 	ands.w	r1, r8, #32
   22f20:	f000 8351 	beq.w	235c6 <_svfprintf_r+0xca6>
   22f24:	9b08      	ldr	r3, [sp, #32]
   22f26:	3307      	adds	r3, #7
   22f28:	f023 0307 	bic.w	r3, r3, #7
   22f2c:	6859      	ldr	r1, [r3, #4]
   22f2e:	f853 2b08 	ldr.w	r2, [r3], #8
   22f32:	9308      	str	r3, [sp, #32]
   22f34:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   22f38:	9302      	str	r3, [sp, #8]
   22f3a:	2300      	movs	r3, #0
   22f3c:	e795      	b.n	22e6a <_svfprintf_r+0x54a>
   22f3e:	930b      	str	r3, [sp, #44]	; 0x2c
   22f40:	f048 0310 	orr.w	r3, r8, #16
   22f44:	9302      	str	r3, [sp, #8]
   22f46:	9b02      	ldr	r3, [sp, #8]
   22f48:	f013 0120 	ands.w	r1, r3, #32
   22f4c:	f000 8329 	beq.w	235a2 <_svfprintf_r+0xc82>
   22f50:	9b08      	ldr	r3, [sp, #32]
   22f52:	3307      	adds	r3, #7
   22f54:	f023 0307 	bic.w	r3, r3, #7
   22f58:	6859      	ldr	r1, [r3, #4]
   22f5a:	f853 2b08 	ldr.w	r2, [r3], #8
   22f5e:	9308      	str	r3, [sp, #32]
   22f60:	2301      	movs	r3, #1
   22f62:	e782      	b.n	22e6a <_svfprintf_r+0x54a>
   22f64:	f899 3000 	ldrb.w	r3, [r9]
   22f68:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   22f6c:	e534      	b.n	229d8 <_svfprintf_r+0xb8>
   22f6e:	bf00      	nop
   22f70:	20004374 	.word	0x20004374
   22f74:	20004378 	.word	0x20004378
   22f78:	20004384 	.word	0x20004384
   22f7c:	4649      	mov	r1, r9
   22f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   22f82:	2b2a      	cmp	r3, #42	; 0x2a
   22f84:	f001 8249 	beq.w	2441a <_svfprintf_r+0x1afa>
   22f88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   22f8c:	2a09      	cmp	r2, #9
   22f8e:	4689      	mov	r9, r1
   22f90:	bf98      	it	ls
   22f92:	2100      	movls	r1, #0
   22f94:	f201 8144 	bhi.w	24220 <_svfprintf_r+0x1900>
   22f98:	f819 3b01 	ldrb.w	r3, [r9], #1
   22f9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   22fa0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   22fa4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   22fa8:	2a09      	cmp	r2, #9
   22faa:	d9f5      	bls.n	22f98 <_svfprintf_r+0x678>
   22fac:	9103      	str	r1, [sp, #12]
   22fae:	e515      	b.n	229dc <_svfprintf_r+0xbc>
   22fb0:	f899 3000 	ldrb.w	r3, [r9]
   22fb4:	f048 0801 	orr.w	r8, r8, #1
   22fb8:	e50e      	b.n	229d8 <_svfprintf_r+0xb8>
   22fba:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   22fbe:	2b00      	cmp	r3, #0
   22fc0:	f47f ad8f 	bne.w	22ae2 <_svfprintf_r+0x1c2>
   22fc4:	f899 3000 	ldrb.w	r3, [r9]
   22fc8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   22fcc:	e504      	b.n	229d8 <_svfprintf_r+0xb8>
   22fce:	f8cd 8008 	str.w	r8, [sp, #8]
   22fd2:	2b01      	cmp	r3, #1
   22fd4:	f000 819d 	beq.w	23312 <_svfprintf_r+0x9f2>
   22fd8:	2b02      	cmp	r3, #2
   22fda:	ac50      	add	r4, sp, #320	; 0x140
   22fdc:	d120      	bne.n	23020 <_svfprintf_r+0x700>
   22fde:	9811      	ldr	r0, [sp, #68]	; 0x44
   22fe0:	f002 030f 	and.w	r3, r2, #15
   22fe4:	0912      	lsrs	r2, r2, #4
   22fe6:	5cc3      	ldrb	r3, [r0, r3]
   22fe8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   22fec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   22ff0:	0909      	lsrs	r1, r1, #4
   22ff2:	ea52 0301 	orrs.w	r3, r2, r1
   22ff6:	d1f3      	bne.n	22fe0 <_svfprintf_r+0x6c0>
   22ff8:	ab50      	add	r3, sp, #320	; 0x140
   22ffa:	1b1b      	subs	r3, r3, r4
   22ffc:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23000:	9305      	str	r3, [sp, #20]
   23002:	9a05      	ldr	r2, [sp, #20]
   23004:	9803      	ldr	r0, [sp, #12]
   23006:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2300a:	4282      	cmp	r2, r0
   2300c:	f04f 0300 	mov.w	r3, #0
   23010:	bfb8      	it	lt
   23012:	4602      	movlt	r2, r0
   23014:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23018:	9307      	str	r3, [sp, #28]
   2301a:	9202      	str	r2, [sp, #8]
   2301c:	930f      	str	r3, [sp, #60]	; 0x3c
   2301e:	e660      	b.n	22ce2 <_svfprintf_r+0x3c2>
   23020:	f002 0307 	and.w	r3, r2, #7
   23024:	08d2      	lsrs	r2, r2, #3
   23026:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   2302a:	08c9      	lsrs	r1, r1, #3
   2302c:	3330      	adds	r3, #48	; 0x30
   2302e:	ea52 0501 	orrs.w	r5, r2, r1
   23032:	4620      	mov	r0, r4
   23034:	f804 3d01 	strb.w	r3, [r4, #-1]!
   23038:	d1f2      	bne.n	23020 <_svfprintf_r+0x700>
   2303a:	9a02      	ldr	r2, [sp, #8]
   2303c:	07d1      	lsls	r1, r2, #31
   2303e:	f100 824d 	bmi.w	234dc <_svfprintf_r+0xbbc>
   23042:	ab50      	add	r3, sp, #320	; 0x140
   23044:	1b1b      	subs	r3, r3, r4
   23046:	4690      	mov	r8, r2
   23048:	9305      	str	r3, [sp, #20]
   2304a:	e7da      	b.n	23002 <_svfprintf_r+0x6e2>
   2304c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2304e:	2b65      	cmp	r3, #101	; 0x65
   23050:	f340 80d4 	ble.w	231fc <_svfprintf_r+0x8dc>
   23054:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2305c:	f040 81c1 	bne.w	233e2 <_svfprintf_r+0xac2>
   23060:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23062:	49ba      	ldr	r1, [pc, #744]	; (2334c <_svfprintf_r+0xa2c>)
   23064:	f8ca 1000 	str.w	r1, [sl]
   23068:	3301      	adds	r3, #1
   2306a:	3201      	adds	r2, #1
   2306c:	2101      	movs	r1, #1
   2306e:	2b07      	cmp	r3, #7
   23070:	9226      	str	r2, [sp, #152]	; 0x98
   23072:	9325      	str	r3, [sp, #148]	; 0x94
   23074:	f8ca 1004 	str.w	r1, [sl, #4]
   23078:	f300 8551 	bgt.w	23b1e <_svfprintf_r+0x11fe>
   2307c:	f10a 0a08 	add.w	sl, sl, #8
   23080:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23082:	990e      	ldr	r1, [sp, #56]	; 0x38
   23084:	428b      	cmp	r3, r1
   23086:	f280 82d0 	bge.w	2362a <_svfprintf_r+0xd0a>
   2308a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2308c:	9912      	ldr	r1, [sp, #72]	; 0x48
   2308e:	441a      	add	r2, r3
   23090:	e9ca 1300 	strd	r1, r3, [sl]
   23094:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23096:	9226      	str	r2, [sp, #152]	; 0x98
   23098:	3301      	adds	r3, #1
   2309a:	2b07      	cmp	r3, #7
   2309c:	9325      	str	r3, [sp, #148]	; 0x94
   2309e:	f300 8397 	bgt.w	237d0 <_svfprintf_r+0xeb0>
   230a2:	f10a 0a08 	add.w	sl, sl, #8
   230a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   230a8:	1e5c      	subs	r4, r3, #1
   230aa:	2c00      	cmp	r4, #0
   230ac:	f77f add0 	ble.w	22c50 <_svfprintf_r+0x330>
   230b0:	2c10      	cmp	r4, #16
   230b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   230b4:	f340 856e 	ble.w	23b94 <_svfprintf_r+0x1274>
   230b8:	ee1b 6a10 	vmov	r6, s22
   230bc:	2510      	movs	r5, #16
   230be:	e005      	b.n	230cc <_svfprintf_r+0x7ac>
   230c0:	f10a 0a08 	add.w	sl, sl, #8
   230c4:	3c10      	subs	r4, #16
   230c6:	2c10      	cmp	r4, #16
   230c8:	f340 8564 	ble.w	23b94 <_svfprintf_r+0x1274>
   230cc:	3301      	adds	r3, #1
   230ce:	49a0      	ldr	r1, [pc, #640]	; (23350 <_svfprintf_r+0xa30>)
   230d0:	3210      	adds	r2, #16
   230d2:	2b07      	cmp	r3, #7
   230d4:	e9ca 1500 	strd	r1, r5, [sl]
   230d8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   230dc:	ddf0      	ble.n	230c0 <_svfprintf_r+0x7a0>
   230de:	aa24      	add	r2, sp, #144	; 0x90
   230e0:	4631      	mov	r1, r6
   230e2:	4658      	mov	r0, fp
   230e4:	f004 fa80 	bl	275e8 <__ssprint_r>
   230e8:	2800      	cmp	r0, #0
   230ea:	d17e      	bne.n	231ea <_svfprintf_r+0x8ca>
   230ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   230f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   230f4:	e7e6      	b.n	230c4 <_svfprintf_r+0x7a4>
   230f6:	9b06      	ldr	r3, [sp, #24]
   230f8:	9902      	ldr	r1, [sp, #8]
   230fa:	1a5d      	subs	r5, r3, r1
   230fc:	2d00      	cmp	r5, #0
   230fe:	f77f ad8e 	ble.w	22c1e <_svfprintf_r+0x2fe>
   23102:	2d10      	cmp	r5, #16
   23104:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23106:	dd21      	ble.n	2314c <_svfprintf_r+0x82c>
   23108:	9409      	str	r4, [sp, #36]	; 0x24
   2310a:	2610      	movs	r6, #16
   2310c:	ee1b 4a10 	vmov	r4, s22
   23110:	e004      	b.n	2311c <_svfprintf_r+0x7fc>
   23112:	3d10      	subs	r5, #16
   23114:	2d10      	cmp	r5, #16
   23116:	f10a 0a08 	add.w	sl, sl, #8
   2311a:	dd16      	ble.n	2314a <_svfprintf_r+0x82a>
   2311c:	3301      	adds	r3, #1
   2311e:	498c      	ldr	r1, [pc, #560]	; (23350 <_svfprintf_r+0xa30>)
   23120:	3210      	adds	r2, #16
   23122:	2b07      	cmp	r3, #7
   23124:	e9ca 1600 	strd	r1, r6, [sl]
   23128:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2312c:	ddf1      	ble.n	23112 <_svfprintf_r+0x7f2>
   2312e:	aa24      	add	r2, sp, #144	; 0x90
   23130:	4621      	mov	r1, r4
   23132:	4658      	mov	r0, fp
   23134:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23138:	f004 fa56 	bl	275e8 <__ssprint_r>
   2313c:	2800      	cmp	r0, #0
   2313e:	d154      	bne.n	231ea <_svfprintf_r+0x8ca>
   23140:	3d10      	subs	r5, #16
   23142:	2d10      	cmp	r5, #16
   23144:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23148:	dce8      	bgt.n	2311c <_svfprintf_r+0x7fc>
   2314a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2314c:	4980      	ldr	r1, [pc, #512]	; (23350 <_svfprintf_r+0xa30>)
   2314e:	f8ca 5004 	str.w	r5, [sl, #4]
   23152:	3301      	adds	r3, #1
   23154:	442a      	add	r2, r5
   23156:	2b07      	cmp	r3, #7
   23158:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2315c:	f8ca 1000 	str.w	r1, [sl]
   23160:	f300 8526 	bgt.w	23bb0 <_svfprintf_r+0x1290>
   23164:	9b03      	ldr	r3, [sp, #12]
   23166:	9905      	ldr	r1, [sp, #20]
   23168:	1a5d      	subs	r5, r3, r1
   2316a:	2d00      	cmp	r5, #0
   2316c:	f10a 0a08 	add.w	sl, sl, #8
   23170:	f77f ad5b 	ble.w	22c2a <_svfprintf_r+0x30a>
   23174:	2d10      	cmp	r5, #16
   23176:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23178:	dd1f      	ble.n	231ba <_svfprintf_r+0x89a>
   2317a:	4651      	mov	r1, sl
   2317c:	2610      	movs	r6, #16
   2317e:	ee1b aa10 	vmov	sl, s22
   23182:	e004      	b.n	2318e <_svfprintf_r+0x86e>
   23184:	3d10      	subs	r5, #16
   23186:	2d10      	cmp	r5, #16
   23188:	f101 0108 	add.w	r1, r1, #8
   2318c:	dd14      	ble.n	231b8 <_svfprintf_r+0x898>
   2318e:	3301      	adds	r3, #1
   23190:	486f      	ldr	r0, [pc, #444]	; (23350 <_svfprintf_r+0xa30>)
   23192:	3210      	adds	r2, #16
   23194:	2b07      	cmp	r3, #7
   23196:	e9c1 0600 	strd	r0, r6, [r1]
   2319a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2319e:	ddf1      	ble.n	23184 <_svfprintf_r+0x864>
   231a0:	aa24      	add	r2, sp, #144	; 0x90
   231a2:	4651      	mov	r1, sl
   231a4:	4658      	mov	r0, fp
   231a6:	f004 fa1f 	bl	275e8 <__ssprint_r>
   231aa:	b9f0      	cbnz	r0, 231ea <_svfprintf_r+0x8ca>
   231ac:	3d10      	subs	r5, #16
   231ae:	2d10      	cmp	r5, #16
   231b0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   231b4:	a927      	add	r1, sp, #156	; 0x9c
   231b6:	dcea      	bgt.n	2318e <_svfprintf_r+0x86e>
   231b8:	468a      	mov	sl, r1
   231ba:	3301      	adds	r3, #1
   231bc:	4964      	ldr	r1, [pc, #400]	; (23350 <_svfprintf_r+0xa30>)
   231be:	f8ca 5004 	str.w	r5, [sl, #4]
   231c2:	442a      	add	r2, r5
   231c4:	2b07      	cmp	r3, #7
   231c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   231ca:	f8ca 1000 	str.w	r1, [sl]
   231ce:	f300 81da 	bgt.w	23586 <_svfprintf_r+0xc66>
   231d2:	f10a 0a08 	add.w	sl, sl, #8
   231d6:	e528      	b.n	22c2a <_svfprintf_r+0x30a>
   231d8:	ee1b 1a10 	vmov	r1, s22
   231dc:	aa24      	add	r2, sp, #144	; 0x90
   231de:	4658      	mov	r0, fp
   231e0:	f004 fa02 	bl	275e8 <__ssprint_r>
   231e4:	2800      	cmp	r0, #0
   231e6:	f43f ad47 	beq.w	22c78 <_svfprintf_r+0x358>
   231ea:	9b07      	ldr	r3, [sp, #28]
   231ec:	2b00      	cmp	r3, #0
   231ee:	f43f aca2 	beq.w	22b36 <_svfprintf_r+0x216>
   231f2:	9907      	ldr	r1, [sp, #28]
   231f4:	4658      	mov	r0, fp
   231f6:	f004 f82b 	bl	27250 <_free_r>
   231fa:	e49c      	b.n	22b36 <_svfprintf_r+0x216>
   231fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   231fe:	2b01      	cmp	r3, #1
   23200:	f340 817a 	ble.w	234f8 <_svfprintf_r+0xbd8>
   23204:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23206:	f8ca 4000 	str.w	r4, [sl]
   2320a:	3301      	adds	r3, #1
   2320c:	3201      	adds	r2, #1
   2320e:	2101      	movs	r1, #1
   23210:	2b07      	cmp	r3, #7
   23212:	9226      	str	r2, [sp, #152]	; 0x98
   23214:	9325      	str	r3, [sp, #148]	; 0x94
   23216:	f8ca 1004 	str.w	r1, [sl, #4]
   2321a:	f300 81f8 	bgt.w	2360e <_svfprintf_r+0xcee>
   2321e:	f10a 0a08 	add.w	sl, sl, #8
   23222:	9910      	ldr	r1, [sp, #64]	; 0x40
   23224:	9812      	ldr	r0, [sp, #72]	; 0x48
   23226:	3301      	adds	r3, #1
   23228:	440a      	add	r2, r1
   2322a:	2b07      	cmp	r3, #7
   2322c:	e9ca 0100 	strd	r0, r1, [sl]
   23230:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23234:	f300 81dd 	bgt.w	235f2 <_svfprintf_r+0xcd2>
   23238:	f10a 0a08 	add.w	sl, sl, #8
   2323c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23244:	f000 8177 	beq.w	23536 <_svfprintf_r+0xc16>
   23248:	990e      	ldr	r1, [sp, #56]	; 0x38
   2324a:	3301      	adds	r3, #1
   2324c:	3901      	subs	r1, #1
   2324e:	3401      	adds	r4, #1
   23250:	440a      	add	r2, r1
   23252:	2b07      	cmp	r3, #7
   23254:	f8ca 4000 	str.w	r4, [sl]
   23258:	9325      	str	r3, [sp, #148]	; 0x94
   2325a:	f8ca 1004 	str.w	r1, [sl, #4]
   2325e:	9226      	str	r2, [sp, #152]	; 0x98
   23260:	f300 815b 	bgt.w	2351a <_svfprintf_r+0xbfa>
   23264:	f10a 0a08 	add.w	sl, sl, #8
   23268:	9914      	ldr	r1, [sp, #80]	; 0x50
   2326a:	f8ca 1004 	str.w	r1, [sl, #4]
   2326e:	3301      	adds	r3, #1
   23270:	440a      	add	r2, r1
   23272:	2b07      	cmp	r3, #7
   23274:	a91e      	add	r1, sp, #120	; 0x78
   23276:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2327a:	f8ca 1000 	str.w	r1, [sl]
   2327e:	f77f ace5 	ble.w	22c4c <_svfprintf_r+0x32c>
   23282:	ee1b 1a10 	vmov	r1, s22
   23286:	aa24      	add	r2, sp, #144	; 0x90
   23288:	4658      	mov	r0, fp
   2328a:	f004 f9ad 	bl	275e8 <__ssprint_r>
   2328e:	2800      	cmp	r0, #0
   23290:	d1ab      	bne.n	231ea <_svfprintf_r+0x8ca>
   23292:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23294:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23298:	e4da      	b.n	22c50 <_svfprintf_r+0x330>
   2329a:	2d10      	cmp	r5, #16
   2329c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   232a0:	4e2c      	ldr	r6, [pc, #176]	; (23354 <_svfprintf_r+0xa34>)
   232a2:	dd24      	ble.n	232ee <_svfprintf_r+0x9ce>
   232a4:	9417      	str	r4, [sp, #92]	; 0x5c
   232a6:	2310      	movs	r3, #16
   232a8:	ee1b 4a10 	vmov	r4, s22
   232ac:	4608      	mov	r0, r1
   232ae:	e004      	b.n	232ba <_svfprintf_r+0x99a>
   232b0:	3d10      	subs	r5, #16
   232b2:	2d10      	cmp	r5, #16
   232b4:	f10a 0a08 	add.w	sl, sl, #8
   232b8:	dd17      	ble.n	232ea <_svfprintf_r+0x9ca>
   232ba:	3001      	adds	r0, #1
   232bc:	3210      	adds	r2, #16
   232be:	2807      	cmp	r0, #7
   232c0:	e9ca 6300 	strd	r6, r3, [sl]
   232c4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   232c8:	ddf2      	ble.n	232b0 <_svfprintf_r+0x990>
   232ca:	aa24      	add	r2, sp, #144	; 0x90
   232cc:	4621      	mov	r1, r4
   232ce:	4658      	mov	r0, fp
   232d0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   232d4:	f004 f988 	bl	275e8 <__ssprint_r>
   232d8:	2800      	cmp	r0, #0
   232da:	d186      	bne.n	231ea <_svfprintf_r+0x8ca>
   232dc:	3d10      	subs	r5, #16
   232de:	2d10      	cmp	r5, #16
   232e0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   232e4:	f04f 0310 	mov.w	r3, #16
   232e8:	dce7      	bgt.n	232ba <_svfprintf_r+0x99a>
   232ea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   232ec:	4601      	mov	r1, r0
   232ee:	3101      	adds	r1, #1
   232f0:	442a      	add	r2, r5
   232f2:	2907      	cmp	r1, #7
   232f4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   232f8:	f8ca 6000 	str.w	r6, [sl]
   232fc:	f8ca 5004 	str.w	r5, [sl, #4]
   23300:	f300 83bd 	bgt.w	23a7e <_svfprintf_r+0x115e>
   23304:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23308:	f10a 0a08 	add.w	sl, sl, #8
   2330c:	e45d      	b.n	22bca <_svfprintf_r+0x2aa>
   2330e:	f8cd 8008 	str.w	r8, [sp, #8]
   23312:	2a0a      	cmp	r2, #10
   23314:	f171 0300 	sbcs.w	r3, r1, #0
   23318:	f080 8345 	bcs.w	239a6 <_svfprintf_r+0x1086>
   2331c:	3230      	adds	r2, #48	; 0x30
   2331e:	2301      	movs	r3, #1
   23320:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23324:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   23328:	9305      	str	r3, [sp, #20]
   2332a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   2332e:	e668      	b.n	23002 <_svfprintf_r+0x6e2>
   23330:	ee1b 1a10 	vmov	r1, s22
   23334:	aa24      	add	r2, sp, #144	; 0x90
   23336:	4658      	mov	r0, fp
   23338:	f004 f956 	bl	275e8 <__ssprint_r>
   2333c:	2800      	cmp	r0, #0
   2333e:	f47f af54 	bne.w	231ea <_svfprintf_r+0x8ca>
   23342:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23344:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23348:	e452      	b.n	22bf0 <_svfprintf_r+0x2d0>
   2334a:	bf00      	nop
   2334c:	20000638 	.word	0x20000638
   23350:	200058dc 	.word	0x200058dc
   23354:	200043b4 	.word	0x200043b4
   23358:	ee1b 1a10 	vmov	r1, s22
   2335c:	aa24      	add	r2, sp, #144	; 0x90
   2335e:	4658      	mov	r0, fp
   23360:	f004 f942 	bl	275e8 <__ssprint_r>
   23364:	2800      	cmp	r0, #0
   23366:	f47f af40 	bne.w	231ea <_svfprintf_r+0x8ca>
   2336a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2336c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23370:	e451      	b.n	22c16 <_svfprintf_r+0x2f6>
   23372:	2c10      	cmp	r4, #16
   23374:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23376:	4ebe      	ldr	r6, [pc, #760]	; (23670 <_svfprintf_r+0xd50>)
   23378:	dd1f      	ble.n	233ba <_svfprintf_r+0xa9a>
   2337a:	ee1b 8a10 	vmov	r8, s22
   2337e:	2510      	movs	r5, #16
   23380:	e004      	b.n	2338c <_svfprintf_r+0xa6c>
   23382:	3c10      	subs	r4, #16
   23384:	2c10      	cmp	r4, #16
   23386:	f10a 0a08 	add.w	sl, sl, #8
   2338a:	dd16      	ble.n	233ba <_svfprintf_r+0xa9a>
   2338c:	3301      	adds	r3, #1
   2338e:	3210      	adds	r2, #16
   23390:	2b07      	cmp	r3, #7
   23392:	e9ca 6500 	strd	r6, r5, [sl]
   23396:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2339a:	ddf2      	ble.n	23382 <_svfprintf_r+0xa62>
   2339c:	aa24      	add	r2, sp, #144	; 0x90
   2339e:	4641      	mov	r1, r8
   233a0:	4658      	mov	r0, fp
   233a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   233a6:	f004 f91f 	bl	275e8 <__ssprint_r>
   233aa:	2800      	cmp	r0, #0
   233ac:	f47f af1d 	bne.w	231ea <_svfprintf_r+0x8ca>
   233b0:	3c10      	subs	r4, #16
   233b2:	2c10      	cmp	r4, #16
   233b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   233b8:	dce8      	bgt.n	2338c <_svfprintf_r+0xa6c>
   233ba:	3301      	adds	r3, #1
   233bc:	4422      	add	r2, r4
   233be:	2b07      	cmp	r3, #7
   233c0:	e9ca 6400 	strd	r6, r4, [sl]
   233c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   233c8:	f77f ac4b 	ble.w	22c62 <_svfprintf_r+0x342>
   233cc:	ee1b 1a10 	vmov	r1, s22
   233d0:	aa24      	add	r2, sp, #144	; 0x90
   233d2:	4658      	mov	r0, fp
   233d4:	f004 f908 	bl	275e8 <__ssprint_r>
   233d8:	2800      	cmp	r0, #0
   233da:	f47f af06 	bne.w	231ea <_svfprintf_r+0x8ca>
   233de:	9a26      	ldr	r2, [sp, #152]	; 0x98
   233e0:	e43f      	b.n	22c62 <_svfprintf_r+0x342>
   233e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   233e4:	2900      	cmp	r1, #0
   233e6:	f340 835a 	ble.w	23a9e <_svfprintf_r+0x117e>
   233ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   233ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   233ee:	429e      	cmp	r6, r3
   233f0:	bfa8      	it	ge
   233f2:	461e      	movge	r6, r3
   233f4:	2e00      	cmp	r6, #0
   233f6:	dd0b      	ble.n	23410 <_svfprintf_r+0xaf0>
   233f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   233fa:	3301      	adds	r3, #1
   233fc:	4432      	add	r2, r6
   233fe:	2b07      	cmp	r3, #7
   23400:	e9ca 4600 	strd	r4, r6, [sl]
   23404:	9226      	str	r2, [sp, #152]	; 0x98
   23406:	9325      	str	r3, [sp, #148]	; 0x94
   23408:	f300 8689 	bgt.w	2411e <_svfprintf_r+0x17fe>
   2340c:	f10a 0a08 	add.w	sl, sl, #8
   23410:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23412:	2e00      	cmp	r6, #0
   23414:	bfa8      	it	ge
   23416:	1bad      	subge	r5, r5, r6
   23418:	2d00      	cmp	r5, #0
   2341a:	f300 8203 	bgt.w	23824 <_svfprintf_r+0xf04>
   2341e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23420:	f418 6f80 	tst.w	r8, #1024	; 0x400
   23424:	4423      	add	r3, r4
   23426:	9305      	str	r3, [sp, #20]
   23428:	f040 821f 	bne.w	2386a <_svfprintf_r+0xf4a>
   2342c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2342e:	990e      	ldr	r1, [sp, #56]	; 0x38
   23430:	428b      	cmp	r3, r1
   23432:	db03      	blt.n	2343c <_svfprintf_r+0xb1c>
   23434:	f018 0f01 	tst.w	r8, #1
   23438:	f000 84cf 	beq.w	23dda <_svfprintf_r+0x14ba>
   2343c:	9910      	ldr	r1, [sp, #64]	; 0x40
   2343e:	9812      	ldr	r0, [sp, #72]	; 0x48
   23440:	440a      	add	r2, r1
   23442:	e9ca 0100 	strd	r0, r1, [sl]
   23446:	9925      	ldr	r1, [sp, #148]	; 0x94
   23448:	9226      	str	r2, [sp, #152]	; 0x98
   2344a:	3101      	adds	r1, #1
   2344c:	2907      	cmp	r1, #7
   2344e:	9125      	str	r1, [sp, #148]	; 0x94
   23450:	f300 86a5 	bgt.w	2419e <_svfprintf_r+0x187e>
   23454:	f10a 0a08 	add.w	sl, sl, #8
   23458:	990e      	ldr	r1, [sp, #56]	; 0x38
   2345a:	1865      	adds	r5, r4, r1
   2345c:	1acc      	subs	r4, r1, r3
   2345e:	9b05      	ldr	r3, [sp, #20]
   23460:	1aed      	subs	r5, r5, r3
   23462:	42a5      	cmp	r5, r4
   23464:	bfa8      	it	ge
   23466:	4625      	movge	r5, r4
   23468:	2d00      	cmp	r5, #0
   2346a:	dd0d      	ble.n	23488 <_svfprintf_r+0xb68>
   2346c:	f8ca 3000 	str.w	r3, [sl]
   23470:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23472:	f8ca 5004 	str.w	r5, [sl, #4]
   23476:	3301      	adds	r3, #1
   23478:	442a      	add	r2, r5
   2347a:	2b07      	cmp	r3, #7
   2347c:	9226      	str	r2, [sp, #152]	; 0x98
   2347e:	9325      	str	r3, [sp, #148]	; 0x94
   23480:	f300 86bb 	bgt.w	241fa <_svfprintf_r+0x18da>
   23484:	f10a 0a08 	add.w	sl, sl, #8
   23488:	2d00      	cmp	r5, #0
   2348a:	bfa8      	it	ge
   2348c:	1b64      	subge	r4, r4, r5
   2348e:	2c00      	cmp	r4, #0
   23490:	f77f abde 	ble.w	22c50 <_svfprintf_r+0x330>
   23494:	2c10      	cmp	r4, #16
   23496:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23498:	f340 837c 	ble.w	23b94 <_svfprintf_r+0x1274>
   2349c:	ee1b 6a10 	vmov	r6, s22
   234a0:	2510      	movs	r5, #16
   234a2:	e005      	b.n	234b0 <_svfprintf_r+0xb90>
   234a4:	f10a 0a08 	add.w	sl, sl, #8
   234a8:	3c10      	subs	r4, #16
   234aa:	2c10      	cmp	r4, #16
   234ac:	f340 8372 	ble.w	23b94 <_svfprintf_r+0x1274>
   234b0:	3301      	adds	r3, #1
   234b2:	4970      	ldr	r1, [pc, #448]	; (23674 <_svfprintf_r+0xd54>)
   234b4:	3210      	adds	r2, #16
   234b6:	2b07      	cmp	r3, #7
   234b8:	e9ca 1500 	strd	r1, r5, [sl]
   234bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   234c0:	ddf0      	ble.n	234a4 <_svfprintf_r+0xb84>
   234c2:	aa24      	add	r2, sp, #144	; 0x90
   234c4:	4631      	mov	r1, r6
   234c6:	4658      	mov	r0, fp
   234c8:	f004 f88e 	bl	275e8 <__ssprint_r>
   234cc:	2800      	cmp	r0, #0
   234ce:	f47f ae8c 	bne.w	231ea <_svfprintf_r+0x8ca>
   234d2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   234d6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   234da:	e7e5      	b.n	234a8 <_svfprintf_r+0xb88>
   234dc:	2b30      	cmp	r3, #48	; 0x30
   234de:	f43f ad8b 	beq.w	22ff8 <_svfprintf_r+0x6d8>
   234e2:	2330      	movs	r3, #48	; 0x30
   234e4:	3802      	subs	r0, #2
   234e6:	f804 3c01 	strb.w	r3, [r4, #-1]
   234ea:	ab50      	add	r3, sp, #320	; 0x140
   234ec:	1a1b      	subs	r3, r3, r0
   234ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
   234f2:	9305      	str	r3, [sp, #20]
   234f4:	4604      	mov	r4, r0
   234f6:	e584      	b.n	23002 <_svfprintf_r+0x6e2>
   234f8:	f018 0f01 	tst.w	r8, #1
   234fc:	f47f ae82 	bne.w	23204 <_svfprintf_r+0x8e4>
   23500:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23502:	f8ca 4000 	str.w	r4, [sl]
   23506:	3301      	adds	r3, #1
   23508:	3201      	adds	r2, #1
   2350a:	2101      	movs	r1, #1
   2350c:	2b07      	cmp	r3, #7
   2350e:	9226      	str	r2, [sp, #152]	; 0x98
   23510:	9325      	str	r3, [sp, #148]	; 0x94
   23512:	f8ca 1004 	str.w	r1, [sl, #4]
   23516:	f77f aea5 	ble.w	23264 <_svfprintf_r+0x944>
   2351a:	ee1b 1a10 	vmov	r1, s22
   2351e:	aa24      	add	r2, sp, #144	; 0x90
   23520:	4658      	mov	r0, fp
   23522:	f004 f861 	bl	275e8 <__ssprint_r>
   23526:	2800      	cmp	r0, #0
   23528:	f47f ae5f 	bne.w	231ea <_svfprintf_r+0x8ca>
   2352c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23530:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23534:	e698      	b.n	23268 <_svfprintf_r+0x948>
   23536:	990e      	ldr	r1, [sp, #56]	; 0x38
   23538:	1e4c      	subs	r4, r1, #1
   2353a:	2c00      	cmp	r4, #0
   2353c:	f77f ae94 	ble.w	23268 <_svfprintf_r+0x948>
   23540:	2c10      	cmp	r4, #16
   23542:	f340 8361 	ble.w	23c08 <_svfprintf_r+0x12e8>
   23546:	ee1b 6a10 	vmov	r6, s22
   2354a:	2510      	movs	r5, #16
   2354c:	e005      	b.n	2355a <_svfprintf_r+0xc3a>
   2354e:	f10a 0a08 	add.w	sl, sl, #8
   23552:	3c10      	subs	r4, #16
   23554:	2c10      	cmp	r4, #16
   23556:	f340 8357 	ble.w	23c08 <_svfprintf_r+0x12e8>
   2355a:	3301      	adds	r3, #1
   2355c:	4945      	ldr	r1, [pc, #276]	; (23674 <_svfprintf_r+0xd54>)
   2355e:	3210      	adds	r2, #16
   23560:	2b07      	cmp	r3, #7
   23562:	e9ca 1500 	strd	r1, r5, [sl]
   23566:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2356a:	ddf0      	ble.n	2354e <_svfprintf_r+0xc2e>
   2356c:	aa24      	add	r2, sp, #144	; 0x90
   2356e:	4631      	mov	r1, r6
   23570:	4658      	mov	r0, fp
   23572:	f004 f839 	bl	275e8 <__ssprint_r>
   23576:	2800      	cmp	r0, #0
   23578:	f47f ae37 	bne.w	231ea <_svfprintf_r+0x8ca>
   2357c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23580:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23584:	e7e5      	b.n	23552 <_svfprintf_r+0xc32>
   23586:	ee1b 1a10 	vmov	r1, s22
   2358a:	aa24      	add	r2, sp, #144	; 0x90
   2358c:	4658      	mov	r0, fp
   2358e:	f004 f82b 	bl	275e8 <__ssprint_r>
   23592:	2800      	cmp	r0, #0
   23594:	f47f ae29 	bne.w	231ea <_svfprintf_r+0x8ca>
   23598:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2359a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2359e:	f7ff bb44 	b.w	22c2a <_svfprintf_r+0x30a>
   235a2:	9b02      	ldr	r3, [sp, #8]
   235a4:	f013 0310 	ands.w	r3, r3, #16
   235a8:	f040 80c1 	bne.w	2372e <_svfprintf_r+0xe0e>
   235ac:	9a02      	ldr	r2, [sp, #8]
   235ae:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   235b2:	f000 837a 	beq.w	23caa <_svfprintf_r+0x138a>
   235b6:	9808      	ldr	r0, [sp, #32]
   235b8:	f850 2b04 	ldr.w	r2, [r0], #4
   235bc:	9008      	str	r0, [sp, #32]
   235be:	4619      	mov	r1, r3
   235c0:	b292      	uxth	r2, r2
   235c2:	2301      	movs	r3, #1
   235c4:	e451      	b.n	22e6a <_svfprintf_r+0x54a>
   235c6:	f018 0310 	ands.w	r3, r8, #16
   235ca:	d155      	bne.n	23678 <_svfprintf_r+0xd58>
   235cc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   235d0:	f000 835d 	beq.w	23c8e <_svfprintf_r+0x136e>
   235d4:	9808      	ldr	r0, [sp, #32]
   235d6:	f850 2b04 	ldr.w	r2, [r0], #4
   235da:	9008      	str	r0, [sp, #32]
   235dc:	4619      	mov	r1, r3
   235de:	b292      	uxth	r2, r2
   235e0:	e4a8      	b.n	22f34 <_svfprintf_r+0x614>
   235e2:	4252      	negs	r2, r2
   235e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   235e8:	f8cd 8008 	str.w	r8, [sp, #8]
   235ec:	202d      	movs	r0, #45	; 0x2d
   235ee:	2301      	movs	r3, #1
   235f0:	e43c      	b.n	22e6c <_svfprintf_r+0x54c>
   235f2:	ee1b 1a10 	vmov	r1, s22
   235f6:	aa24      	add	r2, sp, #144	; 0x90
   235f8:	4658      	mov	r0, fp
   235fa:	f003 fff5 	bl	275e8 <__ssprint_r>
   235fe:	2800      	cmp	r0, #0
   23600:	f47f adf3 	bne.w	231ea <_svfprintf_r+0x8ca>
   23604:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23608:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2360c:	e616      	b.n	2323c <_svfprintf_r+0x91c>
   2360e:	ee1b 1a10 	vmov	r1, s22
   23612:	aa24      	add	r2, sp, #144	; 0x90
   23614:	4658      	mov	r0, fp
   23616:	f003 ffe7 	bl	275e8 <__ssprint_r>
   2361a:	2800      	cmp	r0, #0
   2361c:	f47f ade5 	bne.w	231ea <_svfprintf_r+0x8ca>
   23620:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23624:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23628:	e5fb      	b.n	23222 <_svfprintf_r+0x902>
   2362a:	f018 0f01 	tst.w	r8, #1
   2362e:	f43f ab0f 	beq.w	22c50 <_svfprintf_r+0x330>
   23632:	e52a      	b.n	2308a <_svfprintf_r+0x76a>
   23634:	9308      	str	r3, [sp, #32]
   23636:	f899 3000 	ldrb.w	r3, [r9]
   2363a:	f7ff b9cd 	b.w	229d8 <_svfprintf_r+0xb8>
   2363e:	ac50      	add	r4, sp, #320	; 0x140
   23640:	e4df      	b.n	23002 <_svfprintf_r+0x6e2>
   23642:	f418 7f00 	tst.w	r8, #512	; 0x200
   23646:	f040 83db 	bne.w	23e00 <_svfprintf_r+0x14e0>
   2364a:	f853 2b04 	ldr.w	r2, [r3], #4
   2364e:	9308      	str	r3, [sp, #32]
   23650:	17d1      	asrs	r1, r2, #31
   23652:	460b      	mov	r3, r1
   23654:	f7ff bbb6 	b.w	22dc4 <_svfprintf_r+0x4a4>
   23658:	9b08      	ldr	r3, [sp, #32]
   2365a:	9804      	ldr	r0, [sp, #16]
   2365c:	f853 1b04 	ldr.w	r1, [r3], #4
   23660:	9308      	str	r3, [sp, #32]
   23662:	17c2      	asrs	r2, r0, #31
   23664:	e9c1 0200 	strd	r0, r2, [r1]
   23668:	464c      	mov	r4, r9
   2366a:	f7ff b98b 	b.w	22984 <_svfprintf_r+0x64>
   2366e:	bf00      	nop
   23670:	200043b4 	.word	0x200043b4
   23674:	200058dc 	.word	0x200058dc
   23678:	9b08      	ldr	r3, [sp, #32]
   2367a:	f853 2b04 	ldr.w	r2, [r3], #4
   2367e:	9308      	str	r3, [sp, #32]
   23680:	e458      	b.n	22f34 <_svfprintf_r+0x614>
   23682:	eeb4 8b48 	vcmp.f64	d8, d8
   23686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2368a:	f180 8694 	bvs.w	243b6 <_svfprintf_r+0x1a96>
   2368e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23690:	2b61      	cmp	r3, #97	; 0x61
   23692:	f000 8552 	beq.w	2413a <_svfprintf_r+0x181a>
   23696:	2b41      	cmp	r3, #65	; 0x41
   23698:	f000 85c0 	beq.w	2421c <_svfprintf_r+0x18fc>
   2369c:	9b03      	ldr	r3, [sp, #12]
   2369e:	3301      	adds	r3, #1
   236a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236a2:	f023 0520 	bic.w	r5, r3, #32
   236a6:	f000 8480 	beq.w	23faa <_svfprintf_r+0x168a>
   236aa:	2d47      	cmp	r5, #71	; 0x47
   236ac:	d104      	bne.n	236b8 <_svfprintf_r+0xd98>
   236ae:	9b03      	ldr	r3, [sp, #12]
   236b0:	2b00      	cmp	r3, #0
   236b2:	bf08      	it	eq
   236b4:	2301      	moveq	r3, #1
   236b6:	9303      	str	r3, [sp, #12]
   236b8:	ee18 3a90 	vmov	r3, s17
   236bc:	2b00      	cmp	r3, #0
   236be:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   236c2:	4646      	mov	r6, r8
   236c4:	f2c0 8618 	blt.w	242f8 <_svfprintf_r+0x19d8>
   236c8:	eeb0 ab48 	vmov.f64	d10, d8
   236cc:	2300      	movs	r3, #0
   236ce:	4690      	mov	r8, r2
   236d0:	9309      	str	r3, [sp, #36]	; 0x24
   236d2:	9307      	str	r3, [sp, #28]
   236d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236d6:	3b41      	subs	r3, #65	; 0x41
   236d8:	2b25      	cmp	r3, #37	; 0x25
   236da:	f200 8398 	bhi.w	23e0e <_svfprintf_r+0x14ee>
   236de:	e8df f013 	tbh	[pc, r3, lsl #1]
   236e2:	046f      	.short	0x046f
   236e4:	03960396 	.word	0x03960396
   236e8:	04680396 	.word	0x04680396
   236ec:	0396046c 	.word	0x0396046c
   236f0:	03960396 	.word	0x03960396
   236f4:	03960396 	.word	0x03960396
   236f8:	03960396 	.word	0x03960396
   236fc:	03960396 	.word	0x03960396
   23700:	03960396 	.word	0x03960396
   23704:	03960396 	.word	0x03960396
   23708:	03960396 	.word	0x03960396
   2370c:	03960396 	.word	0x03960396
   23710:	03960396 	.word	0x03960396
   23714:	03960396 	.word	0x03960396
   23718:	03960396 	.word	0x03960396
   2371c:	03960396 	.word	0x03960396
   23720:	03960396 	.word	0x03960396
   23724:	03960396 	.word	0x03960396
   23728:	04680396 	.word	0x04680396
   2372c:	046c      	.short	0x046c
   2372e:	9b08      	ldr	r3, [sp, #32]
   23730:	f853 2b04 	ldr.w	r2, [r3], #4
   23734:	9308      	str	r3, [sp, #32]
   23736:	2301      	movs	r3, #1
   23738:	f7ff bb97 	b.w	22e6a <_svfprintf_r+0x54a>
   2373c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2373e:	2b00      	cmp	r3, #0
   23740:	f43f a9cf 	beq.w	22ae2 <_svfprintf_r+0x1c2>
   23744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23746:	781b      	ldrb	r3, [r3, #0]
   23748:	2b00      	cmp	r3, #0
   2374a:	f43f a9ca 	beq.w	22ae2 <_svfprintf_r+0x1c2>
   2374e:	f899 3000 	ldrb.w	r3, [r9]
   23752:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   23756:	f7ff b93f 	b.w	229d8 <_svfprintf_r+0xb8>
   2375a:	930b      	str	r3, [sp, #44]	; 0x2c
   2375c:	f8cd 8008 	str.w	r8, [sp, #8]
   23760:	f7ff bbf1 	b.w	22f46 <_svfprintf_r+0x626>
   23764:	930b      	str	r3, [sp, #44]	; 0x2c
   23766:	4b9a      	ldr	r3, [pc, #616]	; (239d0 <_svfprintf_r+0x10b0>)
   23768:	9311      	str	r3, [sp, #68]	; 0x44
   2376a:	f018 0120 	ands.w	r1, r8, #32
   2376e:	f000 8105 	beq.w	2397c <_svfprintf_r+0x105c>
   23772:	9b08      	ldr	r3, [sp, #32]
   23774:	3307      	adds	r3, #7
   23776:	f023 0307 	bic.w	r3, r3, #7
   2377a:	6859      	ldr	r1, [r3, #4]
   2377c:	f853 2b08 	ldr.w	r2, [r3], #8
   23780:	9308      	str	r3, [sp, #32]
   23782:	f018 0f01 	tst.w	r8, #1
   23786:	d00a      	beq.n	2379e <_svfprintf_r+0xe7e>
   23788:	ea52 0301 	orrs.w	r3, r2, r1
   2378c:	d007      	beq.n	2379e <_svfprintf_r+0xe7e>
   2378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23790:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   23794:	2330      	movs	r3, #48	; 0x30
   23796:	f048 0802 	orr.w	r8, r8, #2
   2379a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   2379e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   237a2:	9302      	str	r3, [sp, #8]
   237a4:	2302      	movs	r3, #2
   237a6:	f7ff bb60 	b.w	22e6a <_svfprintf_r+0x54a>
   237aa:	930b      	str	r3, [sp, #44]	; 0x2c
   237ac:	f7ff bbb6 	b.w	22f1c <_svfprintf_r+0x5fc>
   237b0:	930b      	str	r3, [sp, #44]	; 0x2c
   237b2:	4b88      	ldr	r3, [pc, #544]	; (239d4 <_svfprintf_r+0x10b4>)
   237b4:	9311      	str	r3, [sp, #68]	; 0x44
   237b6:	e7d8      	b.n	2376a <_svfprintf_r+0xe4a>
   237b8:	9b08      	ldr	r3, [sp, #32]
   237ba:	2101      	movs	r1, #1
   237bc:	f853 2b04 	ldr.w	r2, [r3], #4
   237c0:	9102      	str	r1, [sp, #8]
   237c2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   237c6:	9308      	str	r3, [sp, #32]
   237c8:	9105      	str	r1, [sp, #20]
   237ca:	ac37      	add	r4, sp, #220	; 0xdc
   237cc:	f7ff baaf 	b.w	22d2e <_svfprintf_r+0x40e>
   237d0:	ee1b 1a10 	vmov	r1, s22
   237d4:	aa24      	add	r2, sp, #144	; 0x90
   237d6:	4658      	mov	r0, fp
   237d8:	f003 ff06 	bl	275e8 <__ssprint_r>
   237dc:	2800      	cmp	r0, #0
   237de:	f47f ad04 	bne.w	231ea <_svfprintf_r+0x8ca>
   237e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   237e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   237e8:	e45d      	b.n	230a6 <_svfprintf_r+0x786>
   237ea:	9b03      	ldr	r3, [sp, #12]
   237ec:	9407      	str	r4, [sp, #28]
   237ee:	2b06      	cmp	r3, #6
   237f0:	4622      	mov	r2, r4
   237f2:	bf28      	it	cs
   237f4:	2306      	movcs	r3, #6
   237f6:	9403      	str	r4, [sp, #12]
   237f8:	4621      	mov	r1, r4
   237fa:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   237fe:	4c76      	ldr	r4, [pc, #472]	; (239d8 <_svfprintf_r+0x10b8>)
   23800:	9302      	str	r3, [sp, #8]
   23802:	9305      	str	r3, [sp, #20]
   23804:	920f      	str	r2, [sp, #60]	; 0x3c
   23806:	f7ff ba6c 	b.w	22ce2 <_svfprintf_r+0x3c2>
   2380a:	2140      	movs	r1, #64	; 0x40
   2380c:	4658      	mov	r0, fp
   2380e:	f000 fe71 	bl	244f4 <_malloc_r>
   23812:	6020      	str	r0, [r4, #0]
   23814:	6120      	str	r0, [r4, #16]
   23816:	2800      	cmp	r0, #0
   23818:	f000 860f 	beq.w	2443a <_svfprintf_r+0x1b1a>
   2381c:	2340      	movs	r3, #64	; 0x40
   2381e:	6163      	str	r3, [r4, #20]
   23820:	f7ff b89e 	b.w	22960 <_svfprintf_r+0x40>
   23824:	2d10      	cmp	r5, #16
   23826:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23828:	f340 825d 	ble.w	23ce6 <_svfprintf_r+0x13c6>
   2382c:	4651      	mov	r1, sl
   2382e:	2610      	movs	r6, #16
   23830:	ee1b aa10 	vmov	sl, s22
   23834:	e004      	b.n	23840 <_svfprintf_r+0xf20>
   23836:	3108      	adds	r1, #8
   23838:	3d10      	subs	r5, #16
   2383a:	2d10      	cmp	r5, #16
   2383c:	f340 8252 	ble.w	23ce4 <_svfprintf_r+0x13c4>
   23840:	3301      	adds	r3, #1
   23842:	4866      	ldr	r0, [pc, #408]	; (239dc <_svfprintf_r+0x10bc>)
   23844:	3210      	adds	r2, #16
   23846:	2b07      	cmp	r3, #7
   23848:	e9c1 0600 	strd	r0, r6, [r1]
   2384c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23850:	ddf1      	ble.n	23836 <_svfprintf_r+0xf16>
   23852:	aa24      	add	r2, sp, #144	; 0x90
   23854:	4651      	mov	r1, sl
   23856:	4658      	mov	r0, fp
   23858:	f003 fec6 	bl	275e8 <__ssprint_r>
   2385c:	2800      	cmp	r0, #0
   2385e:	f47f acc4 	bne.w	231ea <_svfprintf_r+0x8ca>
   23862:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23866:	a927      	add	r1, sp, #156	; 0x9c
   23868:	e7e6      	b.n	23838 <_svfprintf_r+0xf18>
   2386a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2386c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   23870:	18e3      	adds	r3, r4, r3
   23872:	9303      	str	r3, [sp, #12]
   23874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23876:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   2387a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   2387c:	9d05      	ldr	r5, [sp, #20]
   2387e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   23882:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   23886:	940b      	str	r4, [sp, #44]	; 0x2c
   23888:	ee1b 1a10 	vmov	r1, s22
   2388c:	4650      	mov	r0, sl
   2388e:	2b00      	cmp	r3, #0
   23890:	d034      	beq.n	238fc <_svfprintf_r+0xfdc>
   23892:	f1b8 0f00 	cmp.w	r8, #0
   23896:	d135      	bne.n	23904 <_svfprintf_r+0xfe4>
   23898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2389a:	3b01      	subs	r3, #1
   2389c:	3e01      	subs	r6, #1
   2389e:	930d      	str	r3, [sp, #52]	; 0x34
   238a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   238a2:	e9c0 3900 	strd	r3, r9, [r0]
   238a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   238a8:	3301      	adds	r3, #1
   238aa:	444a      	add	r2, r9
   238ac:	2b07      	cmp	r3, #7
   238ae:	9226      	str	r2, [sp, #152]	; 0x98
   238b0:	9325      	str	r3, [sp, #148]	; 0x94
   238b2:	dc6c      	bgt.n	2398e <_svfprintf_r+0x106e>
   238b4:	3008      	adds	r0, #8
   238b6:	9b03      	ldr	r3, [sp, #12]
   238b8:	f896 c000 	ldrb.w	ip, [r6]
   238bc:	1b5b      	subs	r3, r3, r5
   238be:	4563      	cmp	r3, ip
   238c0:	bfa8      	it	ge
   238c2:	4663      	movge	r3, ip
   238c4:	2b00      	cmp	r3, #0
   238c6:	469a      	mov	sl, r3
   238c8:	dd0c      	ble.n	238e4 <_svfprintf_r+0xfc4>
   238ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
   238cc:	3401      	adds	r4, #1
   238ce:	441a      	add	r2, r3
   238d0:	2c07      	cmp	r4, #7
   238d2:	e9c0 5300 	strd	r5, r3, [r0]
   238d6:	9226      	str	r2, [sp, #152]	; 0x98
   238d8:	9425      	str	r4, [sp, #148]	; 0x94
   238da:	f300 8177 	bgt.w	23bcc <_svfprintf_r+0x12ac>
   238de:	f896 c000 	ldrb.w	ip, [r6]
   238e2:	3008      	adds	r0, #8
   238e4:	f1ba 0f00 	cmp.w	sl, #0
   238e8:	bfac      	ite	ge
   238ea:	ebac 040a 	subge.w	r4, ip, sl
   238ee:	4664      	movlt	r4, ip
   238f0:	2c00      	cmp	r4, #0
   238f2:	dc0a      	bgt.n	2390a <_svfprintf_r+0xfea>
   238f4:	4465      	add	r5, ip
   238f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   238f8:	2b00      	cmp	r3, #0
   238fa:	d1ca      	bne.n	23892 <_svfprintf_r+0xf72>
   238fc:	f1b8 0f00 	cmp.w	r8, #0
   23900:	f000 83ac 	beq.w	2405c <_svfprintf_r+0x173c>
   23904:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   23908:	e7ca      	b.n	238a0 <_svfprintf_r+0xf80>
   2390a:	2c10      	cmp	r4, #16
   2390c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   23910:	dd24      	ble.n	2395c <_svfprintf_r+0x103c>
   23912:	9505      	str	r5, [sp, #20]
   23914:	f04f 0a10 	mov.w	sl, #16
   23918:	4663      	mov	r3, ip
   2391a:	460d      	mov	r5, r1
   2391c:	e004      	b.n	23928 <_svfprintf_r+0x1008>
   2391e:	3c10      	subs	r4, #16
   23920:	2c10      	cmp	r4, #16
   23922:	f100 0008 	add.w	r0, r0, #8
   23926:	dd16      	ble.n	23956 <_svfprintf_r+0x1036>
   23928:	3301      	adds	r3, #1
   2392a:	492c      	ldr	r1, [pc, #176]	; (239dc <_svfprintf_r+0x10bc>)
   2392c:	3210      	adds	r2, #16
   2392e:	2b07      	cmp	r3, #7
   23930:	e9c0 1a00 	strd	r1, sl, [r0]
   23934:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23938:	ddf1      	ble.n	2391e <_svfprintf_r+0xffe>
   2393a:	aa24      	add	r2, sp, #144	; 0x90
   2393c:	4629      	mov	r1, r5
   2393e:	4658      	mov	r0, fp
   23940:	f003 fe52 	bl	275e8 <__ssprint_r>
   23944:	2800      	cmp	r0, #0
   23946:	f47f ac50 	bne.w	231ea <_svfprintf_r+0x8ca>
   2394a:	3c10      	subs	r4, #16
   2394c:	2c10      	cmp	r4, #16
   2394e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23952:	a827      	add	r0, sp, #156	; 0x9c
   23954:	dce8      	bgt.n	23928 <_svfprintf_r+0x1008>
   23956:	4629      	mov	r1, r5
   23958:	9d05      	ldr	r5, [sp, #20]
   2395a:	469c      	mov	ip, r3
   2395c:	f10c 0301 	add.w	r3, ip, #1
   23960:	4422      	add	r2, r4
   23962:	6044      	str	r4, [r0, #4]
   23964:	2b07      	cmp	r3, #7
   23966:	4c1d      	ldr	r4, [pc, #116]	; (239dc <_svfprintf_r+0x10bc>)
   23968:	6004      	str	r4, [r0, #0]
   2396a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2396e:	f300 83c6 	bgt.w	240fe <_svfprintf_r+0x17de>
   23972:	f896 c000 	ldrb.w	ip, [r6]
   23976:	3008      	adds	r0, #8
   23978:	4465      	add	r5, ip
   2397a:	e7bc      	b.n	238f6 <_svfprintf_r+0xfd6>
   2397c:	f018 0310 	ands.w	r3, r8, #16
   23980:	f000 80c2 	beq.w	23b08 <_svfprintf_r+0x11e8>
   23984:	9b08      	ldr	r3, [sp, #32]
   23986:	f853 2b04 	ldr.w	r2, [r3], #4
   2398a:	9308      	str	r3, [sp, #32]
   2398c:	e6f9      	b.n	23782 <_svfprintf_r+0xe62>
   2398e:	aa24      	add	r2, sp, #144	; 0x90
   23990:	4658      	mov	r0, fp
   23992:	9105      	str	r1, [sp, #20]
   23994:	f003 fe28 	bl	275e8 <__ssprint_r>
   23998:	2800      	cmp	r0, #0
   2399a:	f47f ac26 	bne.w	231ea <_svfprintf_r+0x8ca>
   2399e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   239a0:	9905      	ldr	r1, [sp, #20]
   239a2:	a827      	add	r0, sp, #156	; 0x9c
   239a4:	e787      	b.n	238b6 <_svfprintf_r+0xf96>
   239a6:	9802      	ldr	r0, [sp, #8]
   239a8:	f8cd a01c 	str.w	sl, [sp, #28]
   239ac:	ac50      	add	r4, sp, #320	; 0x140
   239ae:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   239b2:	2500      	movs	r5, #0
   239b4:	ee0a ba10 	vmov	s20, fp
   239b8:	4b09      	ldr	r3, [pc, #36]	; (239e0 <_svfprintf_r+0x10c0>)
   239ba:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   239be:	f8cd 9014 	str.w	r9, [sp, #20]
   239c2:	46a3      	mov	fp, r4
   239c4:	f04f 0805 	mov.w	r8, #5
   239c8:	46ac      	mov	ip, r5
   239ca:	4604      	mov	r4, r0
   239cc:	e010      	b.n	239f0 <_svfprintf_r+0x10d0>
   239ce:	bf00      	nop
   239d0:	20004384 	.word	0x20004384
   239d4:	20004398 	.word	0x20004398
   239d8:	200043ac 	.word	0x200043ac
   239dc:	200058dc 	.word	0x200058dc
   239e0:	cccccccd 	.word	0xcccccccd
   239e4:	2a0a      	cmp	r2, #10
   239e6:	f171 0100 	sbcs.w	r1, r1, #0
   239ea:	d336      	bcc.n	23a5a <_svfprintf_r+0x113a>
   239ec:	464a      	mov	r2, r9
   239ee:	4631      	mov	r1, r6
   239f0:	1850      	adds	r0, r2, r1
   239f2:	f140 0000 	adc.w	r0, r0, #0
   239f6:	fba3 5600 	umull	r5, r6, r3, r0
   239fa:	f026 0503 	bic.w	r5, r6, #3
   239fe:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   23a02:	1b40      	subs	r0, r0, r5
   23a04:	1a15      	subs	r5, r2, r0
   23a06:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   23a0a:	f161 0e00 	sbc.w	lr, r1, #0
   23a0e:	fb06 f605 	mul.w	r6, r6, r5
   23a12:	fba5 9503 	umull	r9, r5, r5, r3
   23a16:	fb03 660e 	mla	r6, r3, lr, r6
   23a1a:	f009 0e01 	and.w	lr, r9, #1
   23a1e:	442e      	add	r6, r5
   23a20:	fbae 5e08 	umull	r5, lr, lr, r8
   23a24:	182d      	adds	r5, r5, r0
   23a26:	ea4f 0959 	mov.w	r9, r9, lsr #1
   23a2a:	3530      	adds	r5, #48	; 0x30
   23a2c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   23a30:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   23a34:	f10c 0c01 	add.w	ip, ip, #1
   23a38:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   23a3c:	0876      	lsrs	r6, r6, #1
   23a3e:	2c00      	cmp	r4, #0
   23a40:	d0d0      	beq.n	239e4 <_svfprintf_r+0x10c4>
   23a42:	f89a 0000 	ldrb.w	r0, [sl]
   23a46:	4584      	cmp	ip, r0
   23a48:	d1cc      	bne.n	239e4 <_svfprintf_r+0x10c4>
   23a4a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   23a4e:	d0c9      	beq.n	239e4 <_svfprintf_r+0x10c4>
   23a50:	2a0a      	cmp	r2, #10
   23a52:	f171 0100 	sbcs.w	r1, r1, #0
   23a56:	f080 818f 	bcs.w	23d78 <_svfprintf_r+0x1458>
   23a5a:	465c      	mov	r4, fp
   23a5c:	ab50      	add	r3, sp, #320	; 0x140
   23a5e:	1b1b      	subs	r3, r3, r4
   23a60:	f8dd 9014 	ldr.w	r9, [sp, #20]
   23a64:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   23a68:	ee1a ba10 	vmov	fp, s20
   23a6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   23a70:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23a74:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   23a78:	9305      	str	r3, [sp, #20]
   23a7a:	f7ff bac2 	b.w	23002 <_svfprintf_r+0x6e2>
   23a7e:	ee1b 1a10 	vmov	r1, s22
   23a82:	aa24      	add	r2, sp, #144	; 0x90
   23a84:	4658      	mov	r0, fp
   23a86:	f003 fdaf 	bl	275e8 <__ssprint_r>
   23a8a:	2800      	cmp	r0, #0
   23a8c:	f47f abad 	bne.w	231ea <_svfprintf_r+0x8ca>
   23a90:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23a94:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23a96:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23a9a:	f7ff b896 	b.w	22bca <_svfprintf_r+0x2aa>
   23a9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23aa0:	48be      	ldr	r0, [pc, #760]	; (23d9c <_svfprintf_r+0x147c>)
   23aa2:	f8ca 0000 	str.w	r0, [sl]
   23aa6:	3301      	adds	r3, #1
   23aa8:	3201      	adds	r2, #1
   23aaa:	2001      	movs	r0, #1
   23aac:	2b07      	cmp	r3, #7
   23aae:	9226      	str	r2, [sp, #152]	; 0x98
   23ab0:	9325      	str	r3, [sp, #148]	; 0x94
   23ab2:	f8ca 0004 	str.w	r0, [sl, #4]
   23ab6:	f300 8177 	bgt.w	23da8 <_svfprintf_r+0x1488>
   23aba:	f10a 0a08 	add.w	sl, sl, #8
   23abe:	2900      	cmp	r1, #0
   23ac0:	f040 80af 	bne.w	23c22 <_svfprintf_r+0x1302>
   23ac4:	990e      	ldr	r1, [sp, #56]	; 0x38
   23ac6:	f008 0301 	and.w	r3, r8, #1
   23aca:	430b      	orrs	r3, r1
   23acc:	f43f a8c0 	beq.w	22c50 <_svfprintf_r+0x330>
   23ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23ad2:	9912      	ldr	r1, [sp, #72]	; 0x48
   23ad4:	441a      	add	r2, r3
   23ad6:	e9ca 1300 	strd	r1, r3, [sl]
   23ada:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23adc:	9226      	str	r2, [sp, #152]	; 0x98
   23ade:	3301      	adds	r3, #1
   23ae0:	2b07      	cmp	r3, #7
   23ae2:	9325      	str	r3, [sp, #148]	; 0x94
   23ae4:	f300 8252 	bgt.w	23f8c <_svfprintf_r+0x166c>
   23ae8:	f10a 0a08 	add.w	sl, sl, #8
   23aec:	990e      	ldr	r1, [sp, #56]	; 0x38
   23aee:	f8ca 4000 	str.w	r4, [sl]
   23af2:	3301      	adds	r3, #1
   23af4:	440a      	add	r2, r1
   23af6:	2b07      	cmp	r3, #7
   23af8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23afc:	f8ca 1004 	str.w	r1, [sl, #4]
   23b00:	f77f a8a4 	ble.w	22c4c <_svfprintf_r+0x32c>
   23b04:	f7ff bbbd 	b.w	23282 <_svfprintf_r+0x962>
   23b08:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   23b0c:	f000 80dd 	beq.w	23cca <_svfprintf_r+0x13aa>
   23b10:	9808      	ldr	r0, [sp, #32]
   23b12:	f850 2b04 	ldr.w	r2, [r0], #4
   23b16:	9008      	str	r0, [sp, #32]
   23b18:	4619      	mov	r1, r3
   23b1a:	b292      	uxth	r2, r2
   23b1c:	e631      	b.n	23782 <_svfprintf_r+0xe62>
   23b1e:	ee1b 1a10 	vmov	r1, s22
   23b22:	aa24      	add	r2, sp, #144	; 0x90
   23b24:	4658      	mov	r0, fp
   23b26:	f003 fd5f 	bl	275e8 <__ssprint_r>
   23b2a:	2800      	cmp	r0, #0
   23b2c:	f47f ab5d 	bne.w	231ea <_svfprintf_r+0x8ca>
   23b30:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23b32:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23b36:	f7ff baa3 	b.w	23080 <_svfprintf_r+0x760>
   23b3a:	ae22      	add	r6, sp, #136	; 0x88
   23b3c:	2208      	movs	r2, #8
   23b3e:	2100      	movs	r1, #0
   23b40:	4630      	mov	r0, r6
   23b42:	941d      	str	r4, [sp, #116]	; 0x74
   23b44:	f001 f852 	bl	24bec <memset>
   23b48:	9b03      	ldr	r3, [sp, #12]
   23b4a:	1c5a      	adds	r2, r3, #1
   23b4c:	f000 80db 	beq.w	23d06 <_svfprintf_r+0x13e6>
   23b50:	2500      	movs	r5, #0
   23b52:	f8cd 9008 	str.w	r9, [sp, #8]
   23b56:	f8cd 801c 	str.w	r8, [sp, #28]
   23b5a:	4699      	mov	r9, r3
   23b5c:	46a8      	mov	r8, r5
   23b5e:	e00c      	b.n	23b7a <_svfprintf_r+0x125a>
   23b60:	a937      	add	r1, sp, #220	; 0xdc
   23b62:	4658      	mov	r0, fp
   23b64:	f001 f89a 	bl	24c9c <_wcrtomb_r>
   23b68:	1c43      	adds	r3, r0, #1
   23b6a:	4440      	add	r0, r8
   23b6c:	f000 83c8 	beq.w	24300 <_svfprintf_r+0x19e0>
   23b70:	4548      	cmp	r0, r9
   23b72:	dc08      	bgt.n	23b86 <_svfprintf_r+0x1266>
   23b74:	f000 8418 	beq.w	243a8 <_svfprintf_r+0x1a88>
   23b78:	4680      	mov	r8, r0
   23b7a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   23b7c:	5952      	ldr	r2, [r2, r5]
   23b7e:	4633      	mov	r3, r6
   23b80:	3504      	adds	r5, #4
   23b82:	2a00      	cmp	r2, #0
   23b84:	d1ec      	bne.n	23b60 <_svfprintf_r+0x1240>
   23b86:	f8cd 8014 	str.w	r8, [sp, #20]
   23b8a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   23b8e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   23b92:	e0c5      	b.n	23d20 <_svfprintf_r+0x1400>
   23b94:	3301      	adds	r3, #1
   23b96:	4982      	ldr	r1, [pc, #520]	; (23da0 <_svfprintf_r+0x1480>)
   23b98:	f8ca 4004 	str.w	r4, [sl, #4]
   23b9c:	4422      	add	r2, r4
   23b9e:	2b07      	cmp	r3, #7
   23ba0:	f8ca 1000 	str.w	r1, [sl]
   23ba4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23ba8:	f77f a850 	ble.w	22c4c <_svfprintf_r+0x32c>
   23bac:	f7ff bb69 	b.w	23282 <_svfprintf_r+0x962>
   23bb0:	ee1b 1a10 	vmov	r1, s22
   23bb4:	aa24      	add	r2, sp, #144	; 0x90
   23bb6:	4658      	mov	r0, fp
   23bb8:	f003 fd16 	bl	275e8 <__ssprint_r>
   23bbc:	2800      	cmp	r0, #0
   23bbe:	f47f ab14 	bne.w	231ea <_svfprintf_r+0x8ca>
   23bc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23bc4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23bc8:	f7ff b829 	b.w	22c1e <_svfprintf_r+0x2fe>
   23bcc:	aa24      	add	r2, sp, #144	; 0x90
   23bce:	4658      	mov	r0, fp
   23bd0:	9105      	str	r1, [sp, #20]
   23bd2:	f003 fd09 	bl	275e8 <__ssprint_r>
   23bd6:	2800      	cmp	r0, #0
   23bd8:	f47f ab07 	bne.w	231ea <_svfprintf_r+0x8ca>
   23bdc:	f896 c000 	ldrb.w	ip, [r6]
   23be0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23be2:	9905      	ldr	r1, [sp, #20]
   23be4:	a827      	add	r0, sp, #156	; 0x9c
   23be6:	e67d      	b.n	238e4 <_svfprintf_r+0xfc4>
   23be8:	2b01      	cmp	r3, #1
   23bea:	f8cd 8008 	str.w	r8, [sp, #8]
   23bee:	f47f a9f3 	bne.w	22fd8 <_svfprintf_r+0x6b8>
   23bf2:	f7ff bb93 	b.w	2331c <_svfprintf_r+0x9fc>
   23bf6:	9b08      	ldr	r3, [sp, #32]
   23bf8:	9904      	ldr	r1, [sp, #16]
   23bfa:	f853 2b04 	ldr.w	r2, [r3], #4
   23bfe:	464c      	mov	r4, r9
   23c00:	6011      	str	r1, [r2, #0]
   23c02:	9308      	str	r3, [sp, #32]
   23c04:	f7fe bebe 	b.w	22984 <_svfprintf_r+0x64>
   23c08:	3301      	adds	r3, #1
   23c0a:	4965      	ldr	r1, [pc, #404]	; (23da0 <_svfprintf_r+0x1480>)
   23c0c:	f8ca 4004 	str.w	r4, [sl, #4]
   23c10:	4422      	add	r2, r4
   23c12:	2b07      	cmp	r3, #7
   23c14:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23c18:	f8ca 1000 	str.w	r1, [sl]
   23c1c:	f77f ab22 	ble.w	23264 <_svfprintf_r+0x944>
   23c20:	e47b      	b.n	2351a <_svfprintf_r+0xbfa>
   23c22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23c24:	9812      	ldr	r0, [sp, #72]	; 0x48
   23c26:	441a      	add	r2, r3
   23c28:	e9ca 0300 	strd	r0, r3, [sl]
   23c2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23c2e:	9226      	str	r2, [sp, #152]	; 0x98
   23c30:	3301      	adds	r3, #1
   23c32:	2b07      	cmp	r3, #7
   23c34:	9325      	str	r3, [sp, #148]	; 0x94
   23c36:	f300 81a9 	bgt.w	23f8c <_svfprintf_r+0x166c>
   23c3a:	f10a 0a08 	add.w	sl, sl, #8
   23c3e:	2900      	cmp	r1, #0
   23c40:	f6bf af54 	bge.w	23aec <_svfprintf_r+0x11cc>
   23c44:	424d      	negs	r5, r1
   23c46:	3110      	adds	r1, #16
   23c48:	f280 830f 	bge.w	2426a <_svfprintf_r+0x194a>
   23c4c:	ee1b 1a10 	vmov	r1, s22
   23c50:	2610      	movs	r6, #16
   23c52:	e005      	b.n	23c60 <_svfprintf_r+0x1340>
   23c54:	f10a 0a08 	add.w	sl, sl, #8
   23c58:	3d10      	subs	r5, #16
   23c5a:	2d10      	cmp	r5, #16
   23c5c:	f340 8305 	ble.w	2426a <_svfprintf_r+0x194a>
   23c60:	3301      	adds	r3, #1
   23c62:	484f      	ldr	r0, [pc, #316]	; (23da0 <_svfprintf_r+0x1480>)
   23c64:	3210      	adds	r2, #16
   23c66:	2b07      	cmp	r3, #7
   23c68:	e9ca 0600 	strd	r0, r6, [sl]
   23c6c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23c70:	ddf0      	ble.n	23c54 <_svfprintf_r+0x1334>
   23c72:	aa24      	add	r2, sp, #144	; 0x90
   23c74:	4658      	mov	r0, fp
   23c76:	9103      	str	r1, [sp, #12]
   23c78:	f003 fcb6 	bl	275e8 <__ssprint_r>
   23c7c:	2800      	cmp	r0, #0
   23c7e:	f47f aab4 	bne.w	231ea <_svfprintf_r+0x8ca>
   23c82:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23c86:	9903      	ldr	r1, [sp, #12]
   23c88:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23c8c:	e7e4      	b.n	23c58 <_svfprintf_r+0x1338>
   23c8e:	9b08      	ldr	r3, [sp, #32]
   23c90:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   23c94:	bf1a      	itte	ne
   23c96:	4611      	movne	r1, r2
   23c98:	f853 2b04 	ldrne.w	r2, [r3], #4
   23c9c:	f853 2b04 	ldreq.w	r2, [r3], #4
   23ca0:	9308      	str	r3, [sp, #32]
   23ca2:	bf18      	it	ne
   23ca4:	b2d2      	uxtbne	r2, r2
   23ca6:	f7ff b945 	b.w	22f34 <_svfprintf_r+0x614>
   23caa:	9b02      	ldr	r3, [sp, #8]
   23cac:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   23cb0:	9b08      	ldr	r3, [sp, #32]
   23cb2:	bf1a      	itte	ne
   23cb4:	4611      	movne	r1, r2
   23cb6:	f853 2b04 	ldrne.w	r2, [r3], #4
   23cba:	f853 2b04 	ldreq.w	r2, [r3], #4
   23cbe:	9308      	str	r3, [sp, #32]
   23cc0:	bf18      	it	ne
   23cc2:	b2d2      	uxtbne	r2, r2
   23cc4:	2301      	movs	r3, #1
   23cc6:	f7ff b8d0 	b.w	22e6a <_svfprintf_r+0x54a>
   23cca:	9b08      	ldr	r3, [sp, #32]
   23ccc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   23cd0:	bf1a      	itte	ne
   23cd2:	4611      	movne	r1, r2
   23cd4:	f853 2b04 	ldrne.w	r2, [r3], #4
   23cd8:	f853 2b04 	ldreq.w	r2, [r3], #4
   23cdc:	9308      	str	r3, [sp, #32]
   23cde:	bf18      	it	ne
   23ce0:	b2d2      	uxtbne	r2, r2
   23ce2:	e54e      	b.n	23782 <_svfprintf_r+0xe62>
   23ce4:	468a      	mov	sl, r1
   23ce6:	3301      	adds	r3, #1
   23ce8:	492d      	ldr	r1, [pc, #180]	; (23da0 <_svfprintf_r+0x1480>)
   23cea:	f8ca 5004 	str.w	r5, [sl, #4]
   23cee:	442a      	add	r2, r5
   23cf0:	2b07      	cmp	r3, #7
   23cf2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23cf6:	f8ca 1000 	str.w	r1, [sl]
   23cfa:	f300 8139 	bgt.w	23f70 <_svfprintf_r+0x1650>
   23cfe:	f10a 0a08 	add.w	sl, sl, #8
   23d02:	f7ff bb8c 	b.w	2341e <_svfprintf_r+0xafe>
   23d06:	2300      	movs	r3, #0
   23d08:	4619      	mov	r1, r3
   23d0a:	9600      	str	r6, [sp, #0]
   23d0c:	aa1d      	add	r2, sp, #116	; 0x74
   23d0e:	4658      	mov	r0, fp
   23d10:	f001 feb2 	bl	25a78 <_wcsrtombs_r>
   23d14:	4603      	mov	r3, r0
   23d16:	3301      	adds	r3, #1
   23d18:	9005      	str	r0, [sp, #20]
   23d1a:	f000 82f1 	beq.w	24300 <_svfprintf_r+0x19e0>
   23d1e:	941d      	str	r4, [sp, #116]	; 0x74
   23d20:	9b05      	ldr	r3, [sp, #20]
   23d22:	2b00      	cmp	r3, #0
   23d24:	d04e      	beq.n	23dc4 <_svfprintf_r+0x14a4>
   23d26:	2b63      	cmp	r3, #99	; 0x63
   23d28:	f300 8118 	bgt.w	23f5c <_svfprintf_r+0x163c>
   23d2c:	2300      	movs	r3, #0
   23d2e:	9307      	str	r3, [sp, #28]
   23d30:	ac37      	add	r4, sp, #220	; 0xdc
   23d32:	2208      	movs	r2, #8
   23d34:	2100      	movs	r1, #0
   23d36:	4630      	mov	r0, r6
   23d38:	f000 ff58 	bl	24bec <memset>
   23d3c:	9d05      	ldr	r5, [sp, #20]
   23d3e:	9600      	str	r6, [sp, #0]
   23d40:	462b      	mov	r3, r5
   23d42:	aa1d      	add	r2, sp, #116	; 0x74
   23d44:	4621      	mov	r1, r4
   23d46:	4658      	mov	r0, fp
   23d48:	f001 fe96 	bl	25a78 <_wcsrtombs_r>
   23d4c:	4285      	cmp	r5, r0
   23d4e:	f040 837c 	bne.w	2444a <_svfprintf_r+0x1b2a>
   23d52:	9a05      	ldr	r2, [sp, #20]
   23d54:	2300      	movs	r3, #0
   23d56:	54a3      	strb	r3, [r4, r2]
   23d58:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   23d5c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23d60:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23d64:	9303      	str	r3, [sp, #12]
   23d66:	9202      	str	r2, [sp, #8]
   23d68:	930f      	str	r3, [sp, #60]	; 0x3c
   23d6a:	f7fe bfba 	b.w	22ce2 <_svfprintf_r+0x3c2>
   23d6e:	212d      	movs	r1, #45	; 0x2d
   23d70:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   23d74:	f7fe bfa4 	b.w	22cc0 <_svfprintf_r+0x3a0>
   23d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23d7a:	9915      	ldr	r1, [sp, #84]	; 0x54
   23d7c:	ebab 0b03 	sub.w	fp, fp, r3
   23d80:	461a      	mov	r2, r3
   23d82:	4658      	mov	r0, fp
   23d84:	f7fe faee 	bl	22364 <strncpy>
   23d88:	f89a 2001 	ldrb.w	r2, [sl, #1]
   23d8c:	4b05      	ldr	r3, [pc, #20]	; (23da4 <_svfprintf_r+0x1484>)
   23d8e:	b10a      	cbz	r2, 23d94 <_svfprintf_r+0x1474>
   23d90:	f10a 0a01 	add.w	sl, sl, #1
   23d94:	f04f 0c00 	mov.w	ip, #0
   23d98:	e628      	b.n	239ec <_svfprintf_r+0x10cc>
   23d9a:	bf00      	nop
   23d9c:	20000638 	.word	0x20000638
   23da0:	200058dc 	.word	0x200058dc
   23da4:	cccccccd 	.word	0xcccccccd
   23da8:	ee1b 1a10 	vmov	r1, s22
   23dac:	aa24      	add	r2, sp, #144	; 0x90
   23dae:	4658      	mov	r0, fp
   23db0:	f003 fc1a 	bl	275e8 <__ssprint_r>
   23db4:	2800      	cmp	r0, #0
   23db6:	f47f aa18 	bne.w	231ea <_svfprintf_r+0x8ca>
   23dba:	991b      	ldr	r1, [sp, #108]	; 0x6c
   23dbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23dbe:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23dc2:	e67c      	b.n	23abe <_svfprintf_r+0x119e>
   23dc4:	9b05      	ldr	r3, [sp, #20]
   23dc6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23dca:	930f      	str	r3, [sp, #60]	; 0x3c
   23dcc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   23dd0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23dd4:	9307      	str	r3, [sp, #28]
   23dd6:	f7fe bf84 	b.w	22ce2 <_svfprintf_r+0x3c2>
   23dda:	990e      	ldr	r1, [sp, #56]	; 0x38
   23ddc:	9805      	ldr	r0, [sp, #20]
   23dde:	1865      	adds	r5, r4, r1
   23de0:	1a2d      	subs	r5, r5, r0
   23de2:	1acc      	subs	r4, r1, r3
   23de4:	42a5      	cmp	r5, r4
   23de6:	bfa8      	it	ge
   23de8:	4625      	movge	r5, r4
   23dea:	f7ff bb4d 	b.w	23488 <_svfprintf_r+0xb68>
   23dee:	9b08      	ldr	r3, [sp, #32]
   23df0:	9904      	ldr	r1, [sp, #16]
   23df2:	f853 2b04 	ldr.w	r2, [r3], #4
   23df6:	9308      	str	r3, [sp, #32]
   23df8:	8011      	strh	r1, [r2, #0]
   23dfa:	464c      	mov	r4, r9
   23dfc:	f7fe bdc2 	b.w	22984 <_svfprintf_r+0x64>
   23e00:	f913 2b04 	ldrsb.w	r2, [r3], #4
   23e04:	9308      	str	r3, [sp, #32]
   23e06:	17d1      	asrs	r1, r2, #31
   23e08:	460b      	mov	r3, r1
   23e0a:	f7fe bfdb 	b.w	22dc4 <_svfprintf_r+0x4a4>
   23e0e:	9a03      	ldr	r2, [sp, #12]
   23e10:	2102      	movs	r1, #2
   23e12:	ab22      	add	r3, sp, #136	; 0x88
   23e14:	9301      	str	r3, [sp, #4]
   23e16:	ab1d      	add	r3, sp, #116	; 0x74
   23e18:	9300      	str	r3, [sp, #0]
   23e1a:	4658      	mov	r0, fp
   23e1c:	ab1b      	add	r3, sp, #108	; 0x6c
   23e1e:	eeb0 0b4a 	vmov.f64	d0, d10
   23e22:	9202      	str	r2, [sp, #8]
   23e24:	f001 fec8 	bl	25bb8 <_dtoa_r>
   23e28:	2d47      	cmp	r5, #71	; 0x47
   23e2a:	9a02      	ldr	r2, [sp, #8]
   23e2c:	4604      	mov	r4, r0
   23e2e:	f000 8161 	beq.w	240f4 <_svfprintf_r+0x17d4>
   23e32:	2d46      	cmp	r5, #70	; 0x46
   23e34:	4410      	add	r0, r2
   23e36:	d105      	bne.n	23e44 <_svfprintf_r+0x1524>
   23e38:	7823      	ldrb	r3, [r4, #0]
   23e3a:	2b30      	cmp	r3, #48	; 0x30
   23e3c:	f000 826f 	beq.w	2431e <_svfprintf_r+0x19fe>
   23e40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   23e42:	4410      	add	r0, r2
   23e44:	eeb5 ab40 	vcmp.f64	d10, #0.0
   23e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23e4c:	f040 8146 	bne.w	240dc <_svfprintf_r+0x17bc>
   23e50:	4603      	mov	r3, r0
   23e52:	1b1b      	subs	r3, r3, r4
   23e54:	930e      	str	r3, [sp, #56]	; 0x38
   23e56:	2d47      	cmp	r5, #71	; 0x47
   23e58:	f000 8110 	beq.w	2407c <_svfprintf_r+0x175c>
   23e5c:	2d46      	cmp	r5, #70	; 0x46
   23e5e:	f000 81b5 	beq.w	241cc <_svfprintf_r+0x18ac>
   23e62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23e64:	930c      	str	r3, [sp, #48]	; 0x30
   23e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23e68:	2d41      	cmp	r5, #65	; 0x41
   23e6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   23e6e:	931b      	str	r3, [sp, #108]	; 0x6c
   23e70:	f000 81e5 	beq.w	2423e <_svfprintf_r+0x191e>
   23e74:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   23e78:	2100      	movs	r1, #0
   23e7a:	2b00      	cmp	r3, #0
   23e7c:	bfb8      	it	lt
   23e7e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   23e80:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   23e84:	bfba      	itte	lt
   23e86:	f1c3 0301 	rsblt	r3, r3, #1
   23e8a:	222d      	movlt	r2, #45	; 0x2d
   23e8c:	222b      	movge	r2, #43	; 0x2b
   23e8e:	2b09      	cmp	r3, #9
   23e90:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   23e94:	f340 81da 	ble.w	2424c <_svfprintf_r+0x192c>
   23e98:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   23e9c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 242bc <_svfprintf_r+0x199c>
   23ea0:	462a      	mov	r2, r5
   23ea2:	4610      	mov	r0, r2
   23ea4:	fb8c 2103 	smull	r2, r1, ip, r3
   23ea8:	17da      	asrs	r2, r3, #31
   23eaa:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   23eae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   23eb2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   23eb6:	3130      	adds	r1, #48	; 0x30
   23eb8:	f800 1c01 	strb.w	r1, [r0, #-1]
   23ebc:	4619      	mov	r1, r3
   23ebe:	2963      	cmp	r1, #99	; 0x63
   23ec0:	4613      	mov	r3, r2
   23ec2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   23ec6:	dcec      	bgt.n	23ea2 <_svfprintf_r+0x1582>
   23ec8:	3330      	adds	r3, #48	; 0x30
   23eca:	b2d9      	uxtb	r1, r3
   23ecc:	1e83      	subs	r3, r0, #2
   23ece:	429d      	cmp	r5, r3
   23ed0:	f802 1c01 	strb.w	r1, [r2, #-1]
   23ed4:	f240 828b 	bls.w	243ee <_svfprintf_r+0x1ace>
   23ed8:	4613      	mov	r3, r2
   23eda:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   23ede:	e001      	b.n	23ee4 <_svfprintf_r+0x15c4>
   23ee0:	f813 1b01 	ldrb.w	r1, [r3], #1
   23ee4:	f802 1b01 	strb.w	r1, [r2], #1
   23ee8:	429d      	cmp	r5, r3
   23eea:	d1f9      	bne.n	23ee0 <_svfprintf_r+0x15c0>
   23eec:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   23ef0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   23ef4:	1a1b      	subs	r3, r3, r0
   23ef6:	4413      	add	r3, r2
   23ef8:	aa1e      	add	r2, sp, #120	; 0x78
   23efa:	1a9b      	subs	r3, r3, r2
   23efc:	9314      	str	r3, [sp, #80]	; 0x50
   23efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23f00:	9a14      	ldr	r2, [sp, #80]	; 0x50
   23f02:	2b01      	cmp	r3, #1
   23f04:	441a      	add	r2, r3
   23f06:	9205      	str	r2, [sp, #20]
   23f08:	f340 8203 	ble.w	24312 <_svfprintf_r+0x19f2>
   23f0c:	9b05      	ldr	r3, [sp, #20]
   23f0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   23f10:	4413      	add	r3, r2
   23f12:	9305      	str	r3, [sp, #20]
   23f14:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   23f18:	9a05      	ldr	r2, [sp, #20]
   23f1a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   23f1e:	2300      	movs	r3, #0
   23f20:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23f24:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   23f28:	930f      	str	r3, [sp, #60]	; 0x3c
   23f2a:	9202      	str	r2, [sp, #8]
   23f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23f2e:	2b00      	cmp	r3, #0
   23f30:	f040 80b1 	bne.w	24096 <_svfprintf_r+0x1776>
   23f34:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23f38:	9303      	str	r3, [sp, #12]
   23f3a:	f7fe bed2 	b.w	22ce2 <_svfprintf_r+0x3c2>
   23f3e:	4620      	mov	r0, r4
   23f40:	f002 fe9e 	bl	26c80 <strlen>
   23f44:	4602      	mov	r2, r0
   23f46:	9005      	str	r0, [sp, #20]
   23f48:	f7fe bf20 	b.w	22d8c <_svfprintf_r+0x46c>
   23f4c:	ee1b 1a10 	vmov	r1, s22
   23f50:	aa24      	add	r2, sp, #144	; 0x90
   23f52:	4658      	mov	r0, fp
   23f54:	f003 fb48 	bl	275e8 <__ssprint_r>
   23f58:	f7fe bded 	b.w	22b36 <_svfprintf_r+0x216>
   23f5c:	1c59      	adds	r1, r3, #1
   23f5e:	4658      	mov	r0, fp
   23f60:	f000 fac8 	bl	244f4 <_malloc_r>
   23f64:	4604      	mov	r4, r0
   23f66:	2800      	cmp	r0, #0
   23f68:	f000 81ca 	beq.w	24300 <_svfprintf_r+0x19e0>
   23f6c:	9007      	str	r0, [sp, #28]
   23f6e:	e6e0      	b.n	23d32 <_svfprintf_r+0x1412>
   23f70:	ee1b 1a10 	vmov	r1, s22
   23f74:	aa24      	add	r2, sp, #144	; 0x90
   23f76:	4658      	mov	r0, fp
   23f78:	f003 fb36 	bl	275e8 <__ssprint_r>
   23f7c:	2800      	cmp	r0, #0
   23f7e:	f47f a934 	bne.w	231ea <_svfprintf_r+0x8ca>
   23f82:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23f84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23f88:	f7ff ba49 	b.w	2341e <_svfprintf_r+0xafe>
   23f8c:	ee1b 1a10 	vmov	r1, s22
   23f90:	aa24      	add	r2, sp, #144	; 0x90
   23f92:	4658      	mov	r0, fp
   23f94:	f003 fb28 	bl	275e8 <__ssprint_r>
   23f98:	2800      	cmp	r0, #0
   23f9a:	f47f a926 	bne.w	231ea <_svfprintf_r+0x8ca>
   23f9e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23fa2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   23fa4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23fa8:	e649      	b.n	23c3e <_svfprintf_r+0x131e>
   23faa:	2306      	movs	r3, #6
   23fac:	9303      	str	r3, [sp, #12]
   23fae:	f7ff bb83 	b.w	236b8 <_svfprintf_r+0xd98>
   23fb2:	9b03      	ldr	r3, [sp, #12]
   23fb4:	2102      	movs	r1, #2
   23fb6:	1c5a      	adds	r2, r3, #1
   23fb8:	e72b      	b.n	23e12 <_svfprintf_r+0x14f2>
   23fba:	9a03      	ldr	r2, [sp, #12]
   23fbc:	2103      	movs	r1, #3
   23fbe:	e728      	b.n	23e12 <_svfprintf_r+0x14f2>
   23fc0:	a81b      	add	r0, sp, #108	; 0x6c
   23fc2:	eeb0 0b4a 	vmov.f64	d0, d10
   23fc6:	f002 fecb 	bl	26d60 <frexp>
   23fca:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   23fce:	ee20 0b07 	vmul.f64	d0, d0, d7
   23fd2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   23fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23fda:	d101      	bne.n	23fe0 <_svfprintf_r+0x16c0>
   23fdc:	2301      	movs	r3, #1
   23fde:	931b      	str	r3, [sp, #108]	; 0x6c
   23fe0:	48b3      	ldr	r0, [pc, #716]	; (242b0 <_svfprintf_r+0x1990>)
   23fe2:	9b03      	ldr	r3, [sp, #12]
   23fe4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   23fe8:	3b01      	subs	r3, #1
   23fea:	4622      	mov	r2, r4
   23fec:	e004      	b.n	23ff8 <_svfprintf_r+0x16d8>
   23fee:	eeb5 0b40 	vcmp.f64	d0, #0.0
   23ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23ff6:	d013      	beq.n	24020 <_svfprintf_r+0x1700>
   23ff8:	ee20 0b05 	vmul.f64	d0, d0, d5
   23ffc:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   24000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24004:	ee17 1a90 	vmov	r1, s15
   24008:	5c41      	ldrb	r1, [r0, r1]
   2400a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   2400e:	4694      	mov	ip, r2
   24010:	ee30 0b46 	vsub.f64	d0, d0, d6
   24014:	f802 1b01 	strb.w	r1, [r2], #1
   24018:	4619      	mov	r1, r3
   2401a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2401e:	d1e6      	bne.n	23fee <_svfprintf_r+0x16ce>
   24020:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   24024:	eeb4 0bc6 	vcmpe.f64	d0, d6
   24028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2402c:	f300 8148 	bgt.w	242c0 <_svfprintf_r+0x19a0>
   24030:	eeb4 0b46 	vcmp.f64	d0, d6
   24034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24038:	d104      	bne.n	24044 <_svfprintf_r+0x1724>
   2403a:	ee17 3a90 	vmov	r3, s15
   2403e:	07db      	lsls	r3, r3, #31
   24040:	f100 813e 	bmi.w	242c0 <_svfprintf_r+0x19a0>
   24044:	2900      	cmp	r1, #0
   24046:	db06      	blt.n	24056 <_svfprintf_r+0x1736>
   24048:	1c4b      	adds	r3, r1, #1
   2404a:	4413      	add	r3, r2
   2404c:	2130      	movs	r1, #48	; 0x30
   2404e:	f802 1b01 	strb.w	r1, [r2], #1
   24052:	4293      	cmp	r3, r2
   24054:	d1fb      	bne.n	2404e <_svfprintf_r+0x172e>
   24056:	1b13      	subs	r3, r2, r4
   24058:	930e      	str	r3, [sp, #56]	; 0x38
   2405a:	e6fc      	b.n	23e56 <_svfprintf_r+0x1536>
   2405c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2405e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24060:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   24064:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   24068:	9613      	str	r6, [sp, #76]	; 0x4c
   2406a:	18e3      	adds	r3, r4, r3
   2406c:	429d      	cmp	r5, r3
   2406e:	4629      	mov	r1, r5
   24070:	bf28      	it	cs
   24072:	4619      	movcs	r1, r3
   24074:	4682      	mov	sl, r0
   24076:	9105      	str	r1, [sp, #20]
   24078:	f7ff b9d8 	b.w	2342c <_svfprintf_r+0xb0c>
   2407c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2407e:	930c      	str	r3, [sp, #48]	; 0x30
   24080:	1cda      	adds	r2, r3, #3
   24082:	db02      	blt.n	2408a <_svfprintf_r+0x176a>
   24084:	9a03      	ldr	r2, [sp, #12]
   24086:	4293      	cmp	r3, r2
   24088:	dd0c      	ble.n	240a4 <_svfprintf_r+0x1784>
   2408a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2408c:	3b02      	subs	r3, #2
   2408e:	930b      	str	r3, [sp, #44]	; 0x2c
   24090:	f023 0520 	bic.w	r5, r3, #32
   24094:	e6e7      	b.n	23e66 <_svfprintf_r+0x1546>
   24096:	212d      	movs	r1, #45	; 0x2d
   24098:	2300      	movs	r3, #0
   2409a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   2409e:	9303      	str	r3, [sp, #12]
   240a0:	f7fe be22 	b.w	22ce8 <_svfprintf_r+0x3c8>
   240a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   240a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   240a8:	4293      	cmp	r3, r2
   240aa:	f2c0 80bd 	blt.w	24228 <_svfprintf_r+0x1908>
   240ae:	07f0      	lsls	r0, r6, #31
   240b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   240b2:	f140 8132 	bpl.w	2431a <_svfprintf_r+0x19fa>
   240b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   240b8:	4413      	add	r3, r2
   240ba:	9305      	str	r3, [sp, #20]
   240bc:	0571      	lsls	r1, r6, #21
   240be:	d503      	bpl.n	240c8 <_svfprintf_r+0x17a8>
   240c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   240c2:	2b00      	cmp	r3, #0
   240c4:	f300 8135 	bgt.w	24332 <_svfprintf_r+0x1a12>
   240c8:	9b05      	ldr	r3, [sp, #20]
   240ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   240ce:	9302      	str	r3, [sp, #8]
   240d0:	2367      	movs	r3, #103	; 0x67
   240d2:	930b      	str	r3, [sp, #44]	; 0x2c
   240d4:	2300      	movs	r3, #0
   240d6:	930f      	str	r3, [sp, #60]	; 0x3c
   240d8:	930d      	str	r3, [sp, #52]	; 0x34
   240da:	e727      	b.n	23f2c <_svfprintf_r+0x160c>
   240dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   240de:	4283      	cmp	r3, r0
   240e0:	f4bf aeb7 	bcs.w	23e52 <_svfprintf_r+0x1532>
   240e4:	2130      	movs	r1, #48	; 0x30
   240e6:	1c5a      	adds	r2, r3, #1
   240e8:	9222      	str	r2, [sp, #136]	; 0x88
   240ea:	7019      	strb	r1, [r3, #0]
   240ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   240ee:	4298      	cmp	r0, r3
   240f0:	d8f9      	bhi.n	240e6 <_svfprintf_r+0x17c6>
   240f2:	e6ae      	b.n	23e52 <_svfprintf_r+0x1532>
   240f4:	07f3      	lsls	r3, r6, #31
   240f6:	f100 80a7 	bmi.w	24248 <_svfprintf_r+0x1928>
   240fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   240fc:	e6a9      	b.n	23e52 <_svfprintf_r+0x1532>
   240fe:	aa24      	add	r2, sp, #144	; 0x90
   24100:	4658      	mov	r0, fp
   24102:	9105      	str	r1, [sp, #20]
   24104:	f003 fa70 	bl	275e8 <__ssprint_r>
   24108:	2800      	cmp	r0, #0
   2410a:	f47f a86e 	bne.w	231ea <_svfprintf_r+0x8ca>
   2410e:	f896 c000 	ldrb.w	ip, [r6]
   24112:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24114:	9905      	ldr	r1, [sp, #20]
   24116:	a827      	add	r0, sp, #156	; 0x9c
   24118:	4465      	add	r5, ip
   2411a:	f7ff bbec 	b.w	238f6 <_svfprintf_r+0xfd6>
   2411e:	ee1b 1a10 	vmov	r1, s22
   24122:	aa24      	add	r2, sp, #144	; 0x90
   24124:	4658      	mov	r0, fp
   24126:	f003 fa5f 	bl	275e8 <__ssprint_r>
   2412a:	2800      	cmp	r0, #0
   2412c:	f47f a85d 	bne.w	231ea <_svfprintf_r+0x8ca>
   24130:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24132:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24136:	f7ff b96b 	b.w	23410 <_svfprintf_r+0xaf0>
   2413a:	2378      	movs	r3, #120	; 0x78
   2413c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   24140:	2330      	movs	r3, #48	; 0x30
   24142:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   24146:	9b03      	ldr	r3, [sp, #12]
   24148:	2b63      	cmp	r3, #99	; 0x63
   2414a:	f048 0602 	orr.w	r6, r8, #2
   2414e:	f300 80a6 	bgt.w	2429e <_svfprintf_r+0x197e>
   24152:	2300      	movs	r3, #0
   24154:	9307      	str	r3, [sp, #28]
   24156:	ac37      	add	r4, sp, #220	; 0xdc
   24158:	ee18 3a90 	vmov	r3, s17
   2415c:	2b00      	cmp	r3, #0
   2415e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   24162:	db2b      	blt.n	241bc <_svfprintf_r+0x189c>
   24164:	eeb0 ab48 	vmov.f64	d10, d8
   24168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2416a:	f023 0520 	bic.w	r5, r3, #32
   2416e:	2300      	movs	r3, #0
   24170:	9309      	str	r3, [sp, #36]	; 0x24
   24172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24174:	2b61      	cmp	r3, #97	; 0x61
   24176:	f47f aaad 	bne.w	236d4 <_svfprintf_r+0xdb4>
   2417a:	eeb0 0b4a 	vmov.f64	d0, d10
   2417e:	a81b      	add	r0, sp, #108	; 0x6c
   24180:	f002 fdee 	bl	26d60 <frexp>
   24184:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   24188:	ee20 0b07 	vmul.f64	d0, d0, d7
   2418c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   24190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24194:	d101      	bne.n	2419a <_svfprintf_r+0x187a>
   24196:	2301      	movs	r3, #1
   24198:	931b      	str	r3, [sp, #108]	; 0x6c
   2419a:	4846      	ldr	r0, [pc, #280]	; (242b4 <_svfprintf_r+0x1994>)
   2419c:	e721      	b.n	23fe2 <_svfprintf_r+0x16c2>
   2419e:	ee1b 1a10 	vmov	r1, s22
   241a2:	aa24      	add	r2, sp, #144	; 0x90
   241a4:	4658      	mov	r0, fp
   241a6:	f003 fa1f 	bl	275e8 <__ssprint_r>
   241aa:	2800      	cmp	r0, #0
   241ac:	f47f a81d 	bne.w	231ea <_svfprintf_r+0x8ca>
   241b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   241b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   241b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   241b8:	f7ff b94e 	b.w	23458 <_svfprintf_r+0xb38>
   241bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   241be:	f023 0520 	bic.w	r5, r3, #32
   241c2:	232d      	movs	r3, #45	; 0x2d
   241c4:	9309      	str	r3, [sp, #36]	; 0x24
   241c6:	eeb1 ab48 	vneg.f64	d10, d8
   241ca:	e7d2      	b.n	24172 <_svfprintf_r+0x1852>
   241cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   241ce:	920c      	str	r2, [sp, #48]	; 0x30
   241d0:	2a00      	cmp	r2, #0
   241d2:	f006 0301 	and.w	r3, r6, #1
   241d6:	f340 810d 	ble.w	243f4 <_svfprintf_r+0x1ad4>
   241da:	9903      	ldr	r1, [sp, #12]
   241dc:	430b      	orrs	r3, r1
   241de:	f040 80cf 	bne.w	24380 <_svfprintf_r+0x1a60>
   241e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   241e4:	9305      	str	r3, [sp, #20]
   241e6:	2366      	movs	r3, #102	; 0x66
   241e8:	930b      	str	r3, [sp, #44]	; 0x2c
   241ea:	0572      	lsls	r2, r6, #21
   241ec:	f100 80a3 	bmi.w	24336 <_svfprintf_r+0x1a16>
   241f0:	9b05      	ldr	r3, [sp, #20]
   241f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   241f6:	9302      	str	r3, [sp, #8]
   241f8:	e76c      	b.n	240d4 <_svfprintf_r+0x17b4>
   241fa:	ee1b 1a10 	vmov	r1, s22
   241fe:	aa24      	add	r2, sp, #144	; 0x90
   24200:	4658      	mov	r0, fp
   24202:	f003 f9f1 	bl	275e8 <__ssprint_r>
   24206:	2800      	cmp	r0, #0
   24208:	f47e afef 	bne.w	231ea <_svfprintf_r+0x8ca>
   2420c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   2420e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24210:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24212:	1b1c      	subs	r4, r3, r4
   24214:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24218:	f7ff b936 	b.w	23488 <_svfprintf_r+0xb68>
   2421c:	2358      	movs	r3, #88	; 0x58
   2421e:	e78d      	b.n	2413c <_svfprintf_r+0x181c>
   24220:	2200      	movs	r2, #0
   24222:	9203      	str	r2, [sp, #12]
   24224:	f7fe bbda 	b.w	229dc <_svfprintf_r+0xbc>
   24228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2422a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2422c:	189a      	adds	r2, r3, r2
   2422e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24230:	9205      	str	r2, [sp, #20]
   24232:	2b00      	cmp	r3, #0
   24234:	f340 80ab 	ble.w	2438e <_svfprintf_r+0x1a6e>
   24238:	2367      	movs	r3, #103	; 0x67
   2423a:	930b      	str	r3, [sp, #44]	; 0x2c
   2423c:	e7d5      	b.n	241ea <_svfprintf_r+0x18ca>
   2423e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24240:	320f      	adds	r2, #15
   24242:	b2d2      	uxtb	r2, r2
   24244:	2101      	movs	r1, #1
   24246:	e618      	b.n	23e7a <_svfprintf_r+0x155a>
   24248:	18a0      	adds	r0, r4, r2
   2424a:	e5fb      	b.n	23e44 <_svfprintf_r+0x1524>
   2424c:	2900      	cmp	r1, #0
   2424e:	f040 80a8 	bne.w	243a2 <_svfprintf_r+0x1a82>
   24252:	2230      	movs	r2, #48	; 0x30
   24254:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   24258:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   2425c:	3330      	adds	r3, #48	; 0x30
   2425e:	f802 3b01 	strb.w	r3, [r2], #1
   24262:	ab1e      	add	r3, sp, #120	; 0x78
   24264:	1ad3      	subs	r3, r2, r3
   24266:	9314      	str	r3, [sp, #80]	; 0x50
   24268:	e649      	b.n	23efe <_svfprintf_r+0x15de>
   2426a:	3301      	adds	r3, #1
   2426c:	4912      	ldr	r1, [pc, #72]	; (242b8 <_svfprintf_r+0x1998>)
   2426e:	f8ca 5004 	str.w	r5, [sl, #4]
   24272:	442a      	add	r2, r5
   24274:	2b07      	cmp	r3, #7
   24276:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2427a:	f8ca 1000 	str.w	r1, [sl]
   2427e:	f77f ac33 	ble.w	23ae8 <_svfprintf_r+0x11c8>
   24282:	ee1b 1a10 	vmov	r1, s22
   24286:	aa24      	add	r2, sp, #144	; 0x90
   24288:	4658      	mov	r0, fp
   2428a:	f003 f9ad 	bl	275e8 <__ssprint_r>
   2428e:	2800      	cmp	r0, #0
   24290:	f47e afab 	bne.w	231ea <_svfprintf_r+0x8ca>
   24294:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24298:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2429c:	e426      	b.n	23aec <_svfprintf_r+0x11cc>
   2429e:	1c59      	adds	r1, r3, #1
   242a0:	4658      	mov	r0, fp
   242a2:	f000 f927 	bl	244f4 <_malloc_r>
   242a6:	4604      	mov	r4, r0
   242a8:	b350      	cbz	r0, 24300 <_svfprintf_r+0x19e0>
   242aa:	9007      	str	r0, [sp, #28]
   242ac:	e754      	b.n	24158 <_svfprintf_r+0x1838>
   242ae:	bf00      	nop
   242b0:	20004398 	.word	0x20004398
   242b4:	20004384 	.word	0x20004384
   242b8:	200058dc 	.word	0x200058dc
   242bc:	66666667 	.word	0x66666667
   242c0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   242c4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   242c8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   242cc:	4561      	cmp	r1, ip
   242ce:	4613      	mov	r3, r2
   242d0:	d10a      	bne.n	242e8 <_svfprintf_r+0x19c8>
   242d2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   242d6:	f803 ec01 	strb.w	lr, [r3, #-1]
   242da:	9b22      	ldr	r3, [sp, #136]	; 0x88
   242dc:	1e59      	subs	r1, r3, #1
   242de:	9122      	str	r1, [sp, #136]	; 0x88
   242e0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   242e4:	458c      	cmp	ip, r1
   242e6:	d0f6      	beq.n	242d6 <_svfprintf_r+0x19b6>
   242e8:	2939      	cmp	r1, #57	; 0x39
   242ea:	bf16      	itet	ne
   242ec:	3101      	addne	r1, #1
   242ee:	7a81      	ldrbeq	r1, [r0, #10]
   242f0:	b2c9      	uxtbne	r1, r1
   242f2:	f803 1c01 	strb.w	r1, [r3, #-1]
   242f6:	e6ae      	b.n	24056 <_svfprintf_r+0x1736>
   242f8:	2300      	movs	r3, #0
   242fa:	4690      	mov	r8, r2
   242fc:	9307      	str	r3, [sp, #28]
   242fe:	e760      	b.n	241c2 <_svfprintf_r+0x18a2>
   24300:	ee1b 2a10 	vmov	r2, s22
   24304:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   24308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2430c:	8193      	strh	r3, [r2, #12]
   2430e:	f7fe bc16 	b.w	22b3e <_svfprintf_r+0x21e>
   24312:	07f5      	lsls	r5, r6, #31
   24314:	f57f adfe 	bpl.w	23f14 <_svfprintf_r+0x15f4>
   24318:	e5f8      	b.n	23f0c <_svfprintf_r+0x15ec>
   2431a:	9305      	str	r3, [sp, #20]
   2431c:	e6ce      	b.n	240bc <_svfprintf_r+0x179c>
   2431e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   24322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24326:	f43f ad8b 	beq.w	23e40 <_svfprintf_r+0x1520>
   2432a:	f1c2 0201 	rsb	r2, r2, #1
   2432e:	921b      	str	r2, [sp, #108]	; 0x6c
   24330:	e587      	b.n	23e42 <_svfprintf_r+0x1522>
   24332:	2367      	movs	r3, #103	; 0x67
   24334:	930b      	str	r3, [sp, #44]	; 0x2c
   24336:	9913      	ldr	r1, [sp, #76]	; 0x4c
   24338:	780b      	ldrb	r3, [r1, #0]
   2433a:	2bff      	cmp	r3, #255	; 0xff
   2433c:	d079      	beq.n	24432 <_svfprintf_r+0x1b12>
   2433e:	2500      	movs	r5, #0
   24340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24342:	4628      	mov	r0, r5
   24344:	e003      	b.n	2434e <_svfprintf_r+0x1a2e>
   24346:	3001      	adds	r0, #1
   24348:	3101      	adds	r1, #1
   2434a:	2bff      	cmp	r3, #255	; 0xff
   2434c:	d008      	beq.n	24360 <_svfprintf_r+0x1a40>
   2434e:	4293      	cmp	r3, r2
   24350:	da06      	bge.n	24360 <_svfprintf_r+0x1a40>
   24352:	1ad2      	subs	r2, r2, r3
   24354:	784b      	ldrb	r3, [r1, #1]
   24356:	2b00      	cmp	r3, #0
   24358:	d1f5      	bne.n	24346 <_svfprintf_r+0x1a26>
   2435a:	780b      	ldrb	r3, [r1, #0]
   2435c:	3501      	adds	r5, #1
   2435e:	e7f4      	b.n	2434a <_svfprintf_r+0x1a2a>
   24360:	920c      	str	r2, [sp, #48]	; 0x30
   24362:	9113      	str	r1, [sp, #76]	; 0x4c
   24364:	900d      	str	r0, [sp, #52]	; 0x34
   24366:	950f      	str	r5, [sp, #60]	; 0x3c
   24368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2436a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2436c:	9916      	ldr	r1, [sp, #88]	; 0x58
   2436e:	4413      	add	r3, r2
   24370:	9a05      	ldr	r2, [sp, #20]
   24372:	fb01 2303 	mla	r3, r1, r3, r2
   24376:	9305      	str	r3, [sp, #20]
   24378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2437c:	9302      	str	r3, [sp, #8]
   2437e:	e5d5      	b.n	23f2c <_svfprintf_r+0x160c>
   24380:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24382:	18d3      	adds	r3, r2, r3
   24384:	4419      	add	r1, r3
   24386:	2366      	movs	r3, #102	; 0x66
   24388:	9105      	str	r1, [sp, #20]
   2438a:	930b      	str	r3, [sp, #44]	; 0x2c
   2438c:	e72d      	b.n	241ea <_svfprintf_r+0x18ca>
   2438e:	f1c3 0301 	rsb	r3, r3, #1
   24392:	441a      	add	r2, r3
   24394:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   24398:	9302      	str	r3, [sp, #8]
   2439a:	2367      	movs	r3, #103	; 0x67
   2439c:	9205      	str	r2, [sp, #20]
   2439e:	930b      	str	r3, [sp, #44]	; 0x2c
   243a0:	e698      	b.n	240d4 <_svfprintf_r+0x17b4>
   243a2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   243a6:	e759      	b.n	2425c <_svfprintf_r+0x193c>
   243a8:	9b03      	ldr	r3, [sp, #12]
   243aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
   243ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
   243b2:	9305      	str	r3, [sp, #20]
   243b4:	e4b4      	b.n	23d20 <_svfprintf_r+0x1400>
   243b6:	ee18 3a90 	vmov	r3, s17
   243ba:	2b00      	cmp	r3, #0
   243bc:	bfb4      	ite	lt
   243be:	212d      	movlt	r1, #45	; 0x2d
   243c0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   243c4:	4c25      	ldr	r4, [pc, #148]	; (2445c <_svfprintf_r+0x1b3c>)
   243c6:	4b26      	ldr	r3, [pc, #152]	; (24460 <_svfprintf_r+0x1b40>)
   243c8:	bfb8      	it	lt
   243ca:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   243ce:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   243d2:	f7fe bc79 	b.w	22cc8 <_svfprintf_r+0x3a8>
   243d6:	9b03      	ldr	r3, [sp, #12]
   243d8:	9302      	str	r3, [sp, #8]
   243da:	9305      	str	r3, [sp, #20]
   243dc:	2373      	movs	r3, #115	; 0x73
   243de:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   243e2:	9003      	str	r0, [sp, #12]
   243e4:	900f      	str	r0, [sp, #60]	; 0x3c
   243e6:	900d      	str	r0, [sp, #52]	; 0x34
   243e8:	930b      	str	r3, [sp, #44]	; 0x2c
   243ea:	f7fe bc7a 	b.w	22ce2 <_svfprintf_r+0x3c2>
   243ee:	2302      	movs	r3, #2
   243f0:	9314      	str	r3, [sp, #80]	; 0x50
   243f2:	e584      	b.n	23efe <_svfprintf_r+0x15de>
   243f4:	9a03      	ldr	r2, [sp, #12]
   243f6:	4313      	orrs	r3, r2
   243f8:	d105      	bne.n	24406 <_svfprintf_r+0x1ae6>
   243fa:	2301      	movs	r3, #1
   243fc:	2266      	movs	r2, #102	; 0x66
   243fe:	9302      	str	r3, [sp, #8]
   24400:	920b      	str	r2, [sp, #44]	; 0x2c
   24402:	9305      	str	r3, [sp, #20]
   24404:	e666      	b.n	240d4 <_svfprintf_r+0x17b4>
   24406:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24408:	3301      	adds	r3, #1
   2440a:	441a      	add	r2, r3
   2440c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   24410:	9302      	str	r3, [sp, #8]
   24412:	2366      	movs	r3, #102	; 0x66
   24414:	9205      	str	r2, [sp, #20]
   24416:	930b      	str	r3, [sp, #44]	; 0x2c
   24418:	e65c      	b.n	240d4 <_svfprintf_r+0x17b4>
   2441a:	9a08      	ldr	r2, [sp, #32]
   2441c:	f899 3001 	ldrb.w	r3, [r9, #1]
   24420:	4689      	mov	r9, r1
   24422:	f852 1b04 	ldr.w	r1, [r2], #4
   24426:	9208      	str	r2, [sp, #32]
   24428:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   2442c:	9103      	str	r1, [sp, #12]
   2442e:	f7fe bad3 	b.w	229d8 <_svfprintf_r+0xb8>
   24432:	2300      	movs	r3, #0
   24434:	930f      	str	r3, [sp, #60]	; 0x3c
   24436:	930d      	str	r3, [sp, #52]	; 0x34
   24438:	e796      	b.n	24368 <_svfprintf_r+0x1a48>
   2443a:	230c      	movs	r3, #12
   2443c:	f8cb 3000 	str.w	r3, [fp]
   24440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24444:	9304      	str	r3, [sp, #16]
   24446:	f7fe bb81 	b.w	22b4c <_svfprintf_r+0x22c>
   2444a:	ee1b 2a10 	vmov	r2, s22
   2444e:	8993      	ldrh	r3, [r2, #12]
   24450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24454:	8193      	strh	r3, [r2, #12]
   24456:	f7fe bec8 	b.w	231ea <_svfprintf_r+0x8ca>
   2445a:	bf00      	nop
   2445c:	2000437c 	.word	0x2000437c
   24460:	20004380 	.word	0x20004380

00024464 <vsnprintf>:
   24464:	b510      	push	{r4, lr}
   24466:	4c1a      	ldr	r4, [pc, #104]	; (244d0 <vsnprintf+0x6c>)
   24468:	2900      	cmp	r1, #0
   2446a:	6824      	ldr	r4, [r4, #0]
   2446c:	b09a      	sub	sp, #104	; 0x68
   2446e:	db2a      	blt.n	244c6 <vsnprintf+0x62>
   24470:	9000      	str	r0, [sp, #0]
   24472:	9004      	str	r0, [sp, #16]
   24474:	f44f 7002 	mov.w	r0, #520	; 0x208
   24478:	f8ad 000c 	strh.w	r0, [sp, #12]
   2447c:	d013      	beq.n	244a6 <vsnprintf+0x42>
   2447e:	3901      	subs	r1, #1
   24480:	f64f 70ff 	movw	r0, #65535	; 0xffff
   24484:	9102      	str	r1, [sp, #8]
   24486:	9105      	str	r1, [sp, #20]
   24488:	f8ad 000e 	strh.w	r0, [sp, #14]
   2448c:	4669      	mov	r1, sp
   2448e:	4620      	mov	r0, r4
   24490:	f7fe fa46 	bl	22920 <_svfprintf_r>
   24494:	1c42      	adds	r2, r0, #1
   24496:	da01      	bge.n	2449c <vsnprintf+0x38>
   24498:	238b      	movs	r3, #139	; 0x8b
   2449a:	6023      	str	r3, [r4, #0]
   2449c:	9b00      	ldr	r3, [sp, #0]
   2449e:	2200      	movs	r2, #0
   244a0:	701a      	strb	r2, [r3, #0]
   244a2:	b01a      	add	sp, #104	; 0x68
   244a4:	bd10      	pop	{r4, pc}
   244a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   244aa:	9102      	str	r1, [sp, #8]
   244ac:	9105      	str	r1, [sp, #20]
   244ae:	f8ad 000e 	strh.w	r0, [sp, #14]
   244b2:	4669      	mov	r1, sp
   244b4:	4620      	mov	r0, r4
   244b6:	f7fe fa33 	bl	22920 <_svfprintf_r>
   244ba:	1c43      	adds	r3, r0, #1
   244bc:	da01      	bge.n	244c2 <vsnprintf+0x5e>
   244be:	238b      	movs	r3, #139	; 0x8b
   244c0:	6023      	str	r3, [r4, #0]
   244c2:	b01a      	add	sp, #104	; 0x68
   244c4:	bd10      	pop	{r4, pc}
   244c6:	238b      	movs	r3, #139	; 0x8b
   244c8:	6023      	str	r3, [r4, #0]
   244ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   244ce:	e7f8      	b.n	244c2 <vsnprintf+0x5e>
   244d0:	20005fe4 	.word	0x20005fe4

000244d4 <malloc>:
   244d4:	4b02      	ldr	r3, [pc, #8]	; (244e0 <malloc+0xc>)
   244d6:	4601      	mov	r1, r0
   244d8:	6818      	ldr	r0, [r3, #0]
   244da:	f000 b80b 	b.w	244f4 <_malloc_r>
   244de:	bf00      	nop
   244e0:	20005fe4 	.word	0x20005fe4

000244e4 <free>:
   244e4:	4b02      	ldr	r3, [pc, #8]	; (244f0 <free+0xc>)
   244e6:	4601      	mov	r1, r0
   244e8:	6818      	ldr	r0, [r3, #0]
   244ea:	f002 beb1 	b.w	27250 <_free_r>
   244ee:	bf00      	nop
   244f0:	20005fe4 	.word	0x20005fe4

000244f4 <_malloc_r>:
   244f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244f8:	f101 060b 	add.w	r6, r1, #11
   244fc:	2e16      	cmp	r6, #22
   244fe:	b083      	sub	sp, #12
   24500:	4604      	mov	r4, r0
   24502:	d824      	bhi.n	2454e <_malloc_r+0x5a>
   24504:	2910      	cmp	r1, #16
   24506:	f200 80ba 	bhi.w	2467e <_malloc_r+0x18a>
   2450a:	f000 fea5 	bl	25258 <__malloc_lock>
   2450e:	2610      	movs	r6, #16
   24510:	2218      	movs	r2, #24
   24512:	2002      	movs	r0, #2
   24514:	4fb5      	ldr	r7, [pc, #724]	; (247ec <_malloc_r+0x2f8>)
   24516:	443a      	add	r2, r7
   24518:	f1a2 0108 	sub.w	r1, r2, #8
   2451c:	6853      	ldr	r3, [r2, #4]
   2451e:	428b      	cmp	r3, r1
   24520:	f000 80ba 	beq.w	24698 <_malloc_r+0x1a4>
   24524:	685a      	ldr	r2, [r3, #4]
   24526:	68d9      	ldr	r1, [r3, #12]
   24528:	f022 0203 	bic.w	r2, r2, #3
   2452c:	441a      	add	r2, r3
   2452e:	689d      	ldr	r5, [r3, #8]
   24530:	60e9      	str	r1, [r5, #12]
   24532:	608d      	str	r5, [r1, #8]
   24534:	6851      	ldr	r1, [r2, #4]
   24536:	f041 0101 	orr.w	r1, r1, #1
   2453a:	4620      	mov	r0, r4
   2453c:	6051      	str	r1, [r2, #4]
   2453e:	f103 0508 	add.w	r5, r3, #8
   24542:	f000 fe8f 	bl	25264 <__malloc_unlock>
   24546:	4628      	mov	r0, r5
   24548:	b003      	add	sp, #12
   2454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2454e:	f036 0607 	bics.w	r6, r6, #7
   24552:	f100 8094 	bmi.w	2467e <_malloc_r+0x18a>
   24556:	42b1      	cmp	r1, r6
   24558:	f200 8091 	bhi.w	2467e <_malloc_r+0x18a>
   2455c:	f000 fe7c 	bl	25258 <__malloc_lock>
   24560:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   24564:	f0c0 819a 	bcc.w	2489c <_malloc_r+0x3a8>
   24568:	0a73      	lsrs	r3, r6, #9
   2456a:	f000 808f 	beq.w	2468c <_malloc_r+0x198>
   2456e:	2b04      	cmp	r3, #4
   24570:	f200 816f 	bhi.w	24852 <_malloc_r+0x35e>
   24574:	09b3      	lsrs	r3, r6, #6
   24576:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2457a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   2457e:	00c3      	lsls	r3, r0, #3
   24580:	4f9a      	ldr	r7, [pc, #616]	; (247ec <_malloc_r+0x2f8>)
   24582:	443b      	add	r3, r7
   24584:	f1a3 0508 	sub.w	r5, r3, #8
   24588:	685b      	ldr	r3, [r3, #4]
   2458a:	429d      	cmp	r5, r3
   2458c:	d106      	bne.n	2459c <_malloc_r+0xa8>
   2458e:	e00c      	b.n	245aa <_malloc_r+0xb6>
   24590:	2900      	cmp	r1, #0
   24592:	f280 8127 	bge.w	247e4 <_malloc_r+0x2f0>
   24596:	68db      	ldr	r3, [r3, #12]
   24598:	429d      	cmp	r5, r3
   2459a:	d006      	beq.n	245aa <_malloc_r+0xb6>
   2459c:	685a      	ldr	r2, [r3, #4]
   2459e:	f022 0203 	bic.w	r2, r2, #3
   245a2:	1b91      	subs	r1, r2, r6
   245a4:	290f      	cmp	r1, #15
   245a6:	ddf3      	ble.n	24590 <_malloc_r+0x9c>
   245a8:	4660      	mov	r0, ip
   245aa:	693d      	ldr	r5, [r7, #16]
   245ac:	f8df c250 	ldr.w	ip, [pc, #592]	; 24800 <_malloc_r+0x30c>
   245b0:	4565      	cmp	r5, ip
   245b2:	d07c      	beq.n	246ae <_malloc_r+0x1ba>
   245b4:	686a      	ldr	r2, [r5, #4]
   245b6:	f022 0203 	bic.w	r2, r2, #3
   245ba:	1b93      	subs	r3, r2, r6
   245bc:	2b0f      	cmp	r3, #15
   245be:	f300 817b 	bgt.w	248b8 <_malloc_r+0x3c4>
   245c2:	2b00      	cmp	r3, #0
   245c4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   245c8:	f280 816c 	bge.w	248a4 <_malloc_r+0x3b0>
   245cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   245d0:	f080 811a 	bcs.w	24808 <_malloc_r+0x314>
   245d4:	08d3      	lsrs	r3, r2, #3
   245d6:	6879      	ldr	r1, [r7, #4]
   245d8:	3301      	adds	r3, #1
   245da:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   245de:	2201      	movs	r2, #1
   245e0:	fa02 f20e 	lsl.w	r2, r2, lr
   245e4:	430a      	orrs	r2, r1
   245e6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   245ea:	f8c5 e008 	str.w	lr, [r5, #8]
   245ee:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   245f2:	3908      	subs	r1, #8
   245f4:	60e9      	str	r1, [r5, #12]
   245f6:	607a      	str	r2, [r7, #4]
   245f8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   245fc:	f8ce 500c 	str.w	r5, [lr, #12]
   24600:	1083      	asrs	r3, r0, #2
   24602:	2101      	movs	r1, #1
   24604:	4099      	lsls	r1, r3
   24606:	4291      	cmp	r1, r2
   24608:	d857      	bhi.n	246ba <_malloc_r+0x1c6>
   2460a:	4211      	tst	r1, r2
   2460c:	d106      	bne.n	2461c <_malloc_r+0x128>
   2460e:	f020 0003 	bic.w	r0, r0, #3
   24612:	0049      	lsls	r1, r1, #1
   24614:	4211      	tst	r1, r2
   24616:	f100 0004 	add.w	r0, r0, #4
   2461a:	d0fa      	beq.n	24612 <_malloc_r+0x11e>
   2461c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   24620:	464d      	mov	r5, r9
   24622:	4686      	mov	lr, r0
   24624:	f8d5 800c 	ldr.w	r8, [r5, #12]
   24628:	4545      	cmp	r5, r8
   2462a:	d108      	bne.n	2463e <_malloc_r+0x14a>
   2462c:	e11d      	b.n	2486a <_malloc_r+0x376>
   2462e:	2b00      	cmp	r3, #0
   24630:	f280 8124 	bge.w	2487c <_malloc_r+0x388>
   24634:	f8d8 800c 	ldr.w	r8, [r8, #12]
   24638:	4545      	cmp	r5, r8
   2463a:	f000 8116 	beq.w	2486a <_malloc_r+0x376>
   2463e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   24642:	f022 0203 	bic.w	r2, r2, #3
   24646:	1b93      	subs	r3, r2, r6
   24648:	2b0f      	cmp	r3, #15
   2464a:	ddf0      	ble.n	2462e <_malloc_r+0x13a>
   2464c:	4620      	mov	r0, r4
   2464e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   24652:	eb08 0106 	add.w	r1, r8, r6
   24656:	f046 0601 	orr.w	r6, r6, #1
   2465a:	f8c8 6004 	str.w	r6, [r8, #4]
   2465e:	60ec      	str	r4, [r5, #12]
   24660:	60a5      	str	r5, [r4, #8]
   24662:	f043 0401 	orr.w	r4, r3, #1
   24666:	e9c7 1104 	strd	r1, r1, [r7, #16]
   2466a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   2466e:	604c      	str	r4, [r1, #4]
   24670:	f848 3002 	str.w	r3, [r8, r2]
   24674:	f000 fdf6 	bl	25264 <__malloc_unlock>
   24678:	f108 0508 	add.w	r5, r8, #8
   2467c:	e002      	b.n	24684 <_malloc_r+0x190>
   2467e:	230c      	movs	r3, #12
   24680:	6023      	str	r3, [r4, #0]
   24682:	2500      	movs	r5, #0
   24684:	4628      	mov	r0, r5
   24686:	b003      	add	sp, #12
   24688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2468c:	f44f 7300 	mov.w	r3, #512	; 0x200
   24690:	2040      	movs	r0, #64	; 0x40
   24692:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   24696:	e773      	b.n	24580 <_malloc_r+0x8c>
   24698:	68d3      	ldr	r3, [r2, #12]
   2469a:	429a      	cmp	r2, r3
   2469c:	bf08      	it	eq
   2469e:	3002      	addeq	r0, #2
   246a0:	f47f af40 	bne.w	24524 <_malloc_r+0x30>
   246a4:	693d      	ldr	r5, [r7, #16]
   246a6:	f8df c158 	ldr.w	ip, [pc, #344]	; 24800 <_malloc_r+0x30c>
   246aa:	4565      	cmp	r5, ip
   246ac:	d182      	bne.n	245b4 <_malloc_r+0xc0>
   246ae:	687a      	ldr	r2, [r7, #4]
   246b0:	1083      	asrs	r3, r0, #2
   246b2:	2101      	movs	r1, #1
   246b4:	4099      	lsls	r1, r3
   246b6:	4291      	cmp	r1, r2
   246b8:	d9a7      	bls.n	2460a <_malloc_r+0x116>
   246ba:	68bd      	ldr	r5, [r7, #8]
   246bc:	686b      	ldr	r3, [r5, #4]
   246be:	f023 0903 	bic.w	r9, r3, #3
   246c2:	454e      	cmp	r6, r9
   246c4:	d803      	bhi.n	246ce <_malloc_r+0x1da>
   246c6:	eba9 0306 	sub.w	r3, r9, r6
   246ca:	2b0f      	cmp	r3, #15
   246cc:	dc7a      	bgt.n	247c4 <_malloc_r+0x2d0>
   246ce:	f8df b134 	ldr.w	fp, [pc, #308]	; 24804 <_malloc_r+0x310>
   246d2:	4b47      	ldr	r3, [pc, #284]	; (247f0 <_malloc_r+0x2fc>)
   246d4:	f8db 2000 	ldr.w	r2, [fp]
   246d8:	681b      	ldr	r3, [r3, #0]
   246da:	3201      	adds	r2, #1
   246dc:	4433      	add	r3, r6
   246de:	eb05 0a09 	add.w	sl, r5, r9
   246e2:	f000 8133 	beq.w	2494c <_malloc_r+0x458>
   246e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   246ea:	330f      	adds	r3, #15
   246ec:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   246f0:	f028 080f 	bic.w	r8, r8, #15
   246f4:	4641      	mov	r1, r8
   246f6:	4620      	mov	r0, r4
   246f8:	f002 ff40 	bl	2757c <_sbrk_r>
   246fc:	1c41      	adds	r1, r0, #1
   246fe:	4602      	mov	r2, r0
   24700:	f000 80f3 	beq.w	248ea <_malloc_r+0x3f6>
   24704:	4582      	cmp	sl, r0
   24706:	f200 80ee 	bhi.w	248e6 <_malloc_r+0x3f2>
   2470a:	4b3a      	ldr	r3, [pc, #232]	; (247f4 <_malloc_r+0x300>)
   2470c:	6819      	ldr	r1, [r3, #0]
   2470e:	4441      	add	r1, r8
   24710:	6019      	str	r1, [r3, #0]
   24712:	4608      	mov	r0, r1
   24714:	f000 814e 	beq.w	249b4 <_malloc_r+0x4c0>
   24718:	f8db 1000 	ldr.w	r1, [fp]
   2471c:	9301      	str	r3, [sp, #4]
   2471e:	3101      	adds	r1, #1
   24720:	bf1b      	ittet	ne
   24722:	eba2 010a 	subne.w	r1, r2, sl
   24726:	1809      	addne	r1, r1, r0
   24728:	f8cb 2000 	streq.w	r2, [fp]
   2472c:	6019      	strne	r1, [r3, #0]
   2472e:	f012 0b07 	ands.w	fp, r2, #7
   24732:	f000 8117 	beq.w	24964 <_malloc_r+0x470>
   24736:	f1cb 0108 	rsb	r1, fp, #8
   2473a:	440a      	add	r2, r1
   2473c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   24740:	4490      	add	r8, r2
   24742:	3108      	adds	r1, #8
   24744:	eba1 0108 	sub.w	r1, r1, r8
   24748:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   2474c:	4651      	mov	r1, sl
   2474e:	4620      	mov	r0, r4
   24750:	9200      	str	r2, [sp, #0]
   24752:	f002 ff13 	bl	2757c <_sbrk_r>
   24756:	1c42      	adds	r2, r0, #1
   24758:	e9dd 2300 	ldrd	r2, r3, [sp]
   2475c:	f000 814f 	beq.w	249fe <_malloc_r+0x50a>
   24760:	1a80      	subs	r0, r0, r2
   24762:	eb00 080a 	add.w	r8, r0, sl
   24766:	6819      	ldr	r1, [r3, #0]
   24768:	60ba      	str	r2, [r7, #8]
   2476a:	f048 0001 	orr.w	r0, r8, #1
   2476e:	4451      	add	r1, sl
   24770:	42bd      	cmp	r5, r7
   24772:	6050      	str	r0, [r2, #4]
   24774:	6019      	str	r1, [r3, #0]
   24776:	f000 8129 	beq.w	249cc <_malloc_r+0x4d8>
   2477a:	f1b9 0f0f 	cmp.w	r9, #15
   2477e:	f240 8127 	bls.w	249d0 <_malloc_r+0x4dc>
   24782:	6868      	ldr	r0, [r5, #4]
   24784:	f1a9 0c0c 	sub.w	ip, r9, #12
   24788:	f02c 0c07 	bic.w	ip, ip, #7
   2478c:	f000 0001 	and.w	r0, r0, #1
   24790:	ea40 000c 	orr.w	r0, r0, ip
   24794:	6068      	str	r0, [r5, #4]
   24796:	f04f 0e05 	mov.w	lr, #5
   2479a:	eb05 000c 	add.w	r0, r5, ip
   2479e:	f1bc 0f0f 	cmp.w	ip, #15
   247a2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   247a6:	f200 8132 	bhi.w	24a0e <_malloc_r+0x51a>
   247aa:	6850      	ldr	r0, [r2, #4]
   247ac:	4615      	mov	r5, r2
   247ae:	4b12      	ldr	r3, [pc, #72]	; (247f8 <_malloc_r+0x304>)
   247b0:	681a      	ldr	r2, [r3, #0]
   247b2:	428a      	cmp	r2, r1
   247b4:	bf38      	it	cc
   247b6:	6019      	strcc	r1, [r3, #0]
   247b8:	4b10      	ldr	r3, [pc, #64]	; (247fc <_malloc_r+0x308>)
   247ba:	681a      	ldr	r2, [r3, #0]
   247bc:	428a      	cmp	r2, r1
   247be:	bf38      	it	cc
   247c0:	6019      	strcc	r1, [r3, #0]
   247c2:	e094      	b.n	248ee <_malloc_r+0x3fa>
   247c4:	19aa      	adds	r2, r5, r6
   247c6:	f043 0301 	orr.w	r3, r3, #1
   247ca:	f046 0601 	orr.w	r6, r6, #1
   247ce:	606e      	str	r6, [r5, #4]
   247d0:	4620      	mov	r0, r4
   247d2:	60ba      	str	r2, [r7, #8]
   247d4:	6053      	str	r3, [r2, #4]
   247d6:	f000 fd45 	bl	25264 <__malloc_unlock>
   247da:	3508      	adds	r5, #8
   247dc:	4628      	mov	r0, r5
   247de:	b003      	add	sp, #12
   247e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247e4:	68d9      	ldr	r1, [r3, #12]
   247e6:	441a      	add	r2, r3
   247e8:	e6a1      	b.n	2452e <_malloc_r+0x3a>
   247ea:	bf00      	nop
   247ec:	20005bc8 	.word	0x20005bc8
   247f0:	2000cd44 	.word	0x2000cd44
   247f4:	2000cd14 	.word	0x2000cd14
   247f8:	2000cd3c 	.word	0x2000cd3c
   247fc:	2000cd40 	.word	0x2000cd40
   24800:	20005bd0 	.word	0x20005bd0
   24804:	20005fd0 	.word	0x20005fd0
   24808:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   2480c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   24810:	d363      	bcc.n	248da <_malloc_r+0x3e6>
   24812:	2b14      	cmp	r3, #20
   24814:	f200 80b7 	bhi.w	24986 <_malloc_r+0x492>
   24818:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   2481c:	00c9      	lsls	r1, r1, #3
   2481e:	335b      	adds	r3, #91	; 0x5b
   24820:	eb07 0e01 	add.w	lr, r7, r1
   24824:	5879      	ldr	r1, [r7, r1]
   24826:	f1ae 0e08 	sub.w	lr, lr, #8
   2482a:	458e      	cmp	lr, r1
   2482c:	f000 8091 	beq.w	24952 <_malloc_r+0x45e>
   24830:	684b      	ldr	r3, [r1, #4]
   24832:	f023 0303 	bic.w	r3, r3, #3
   24836:	4293      	cmp	r3, r2
   24838:	d902      	bls.n	24840 <_malloc_r+0x34c>
   2483a:	6889      	ldr	r1, [r1, #8]
   2483c:	458e      	cmp	lr, r1
   2483e:	d1f7      	bne.n	24830 <_malloc_r+0x33c>
   24840:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   24844:	687a      	ldr	r2, [r7, #4]
   24846:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   2484a:	f8ce 5008 	str.w	r5, [lr, #8]
   2484e:	60cd      	str	r5, [r1, #12]
   24850:	e6d6      	b.n	24600 <_malloc_r+0x10c>
   24852:	2b14      	cmp	r3, #20
   24854:	d959      	bls.n	2490a <_malloc_r+0x416>
   24856:	2b54      	cmp	r3, #84	; 0x54
   24858:	f200 809d 	bhi.w	24996 <_malloc_r+0x4a2>
   2485c:	0b33      	lsrs	r3, r6, #12
   2485e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   24862:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   24866:	00c3      	lsls	r3, r0, #3
   24868:	e68a      	b.n	24580 <_malloc_r+0x8c>
   2486a:	f10e 0e01 	add.w	lr, lr, #1
   2486e:	f01e 0f03 	tst.w	lr, #3
   24872:	f105 0508 	add.w	r5, r5, #8
   24876:	f47f aed5 	bne.w	24624 <_malloc_r+0x130>
   2487a:	e051      	b.n	24920 <_malloc_r+0x42c>
   2487c:	4442      	add	r2, r8
   2487e:	4645      	mov	r5, r8
   24880:	6853      	ldr	r3, [r2, #4]
   24882:	f8d8 100c 	ldr.w	r1, [r8, #12]
   24886:	f043 0301 	orr.w	r3, r3, #1
   2488a:	6053      	str	r3, [r2, #4]
   2488c:	f855 3f08 	ldr.w	r3, [r5, #8]!
   24890:	4620      	mov	r0, r4
   24892:	60d9      	str	r1, [r3, #12]
   24894:	608b      	str	r3, [r1, #8]
   24896:	f000 fce5 	bl	25264 <__malloc_unlock>
   2489a:	e6f3      	b.n	24684 <_malloc_r+0x190>
   2489c:	08f0      	lsrs	r0, r6, #3
   2489e:	f106 0208 	add.w	r2, r6, #8
   248a2:	e637      	b.n	24514 <_malloc_r+0x20>
   248a4:	442a      	add	r2, r5
   248a6:	4620      	mov	r0, r4
   248a8:	6853      	ldr	r3, [r2, #4]
   248aa:	f043 0301 	orr.w	r3, r3, #1
   248ae:	6053      	str	r3, [r2, #4]
   248b0:	3508      	adds	r5, #8
   248b2:	f000 fcd7 	bl	25264 <__malloc_unlock>
   248b6:	e6e5      	b.n	24684 <_malloc_r+0x190>
   248b8:	19a9      	adds	r1, r5, r6
   248ba:	4620      	mov	r0, r4
   248bc:	f046 0601 	orr.w	r6, r6, #1
   248c0:	f043 0401 	orr.w	r4, r3, #1
   248c4:	606e      	str	r6, [r5, #4]
   248c6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   248ca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   248ce:	604c      	str	r4, [r1, #4]
   248d0:	50ab      	str	r3, [r5, r2]
   248d2:	f000 fcc7 	bl	25264 <__malloc_unlock>
   248d6:	3508      	adds	r5, #8
   248d8:	e6d4      	b.n	24684 <_malloc_r+0x190>
   248da:	0993      	lsrs	r3, r2, #6
   248dc:	f103 0139 	add.w	r1, r3, #57	; 0x39
   248e0:	00c9      	lsls	r1, r1, #3
   248e2:	3338      	adds	r3, #56	; 0x38
   248e4:	e79c      	b.n	24820 <_malloc_r+0x32c>
   248e6:	42bd      	cmp	r5, r7
   248e8:	d05f      	beq.n	249aa <_malloc_r+0x4b6>
   248ea:	68bd      	ldr	r5, [r7, #8]
   248ec:	6868      	ldr	r0, [r5, #4]
   248ee:	f020 0803 	bic.w	r8, r0, #3
   248f2:	4546      	cmp	r6, r8
   248f4:	eba8 0306 	sub.w	r3, r8, r6
   248f8:	d802      	bhi.n	24900 <_malloc_r+0x40c>
   248fa:	2b0f      	cmp	r3, #15
   248fc:	f73f af62 	bgt.w	247c4 <_malloc_r+0x2d0>
   24900:	4620      	mov	r0, r4
   24902:	f000 fcaf 	bl	25264 <__malloc_unlock>
   24906:	2500      	movs	r5, #0
   24908:	e6bc      	b.n	24684 <_malloc_r+0x190>
   2490a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2490e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   24912:	00c3      	lsls	r3, r0, #3
   24914:	e634      	b.n	24580 <_malloc_r+0x8c>
   24916:	f859 3908 	ldr.w	r3, [r9], #-8
   2491a:	454b      	cmp	r3, r9
   2491c:	f040 8096 	bne.w	24a4c <_malloc_r+0x558>
   24920:	f010 0f03 	tst.w	r0, #3
   24924:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   24928:	d1f5      	bne.n	24916 <_malloc_r+0x422>
   2492a:	687b      	ldr	r3, [r7, #4]
   2492c:	ea23 0301 	bic.w	r3, r3, r1
   24930:	607b      	str	r3, [r7, #4]
   24932:	0049      	lsls	r1, r1, #1
   24934:	4299      	cmp	r1, r3
   24936:	f63f aec0 	bhi.w	246ba <_malloc_r+0x1c6>
   2493a:	b919      	cbnz	r1, 24944 <_malloc_r+0x450>
   2493c:	e6bd      	b.n	246ba <_malloc_r+0x1c6>
   2493e:	0049      	lsls	r1, r1, #1
   24940:	f10e 0e04 	add.w	lr, lr, #4
   24944:	4219      	tst	r1, r3
   24946:	d0fa      	beq.n	2493e <_malloc_r+0x44a>
   24948:	4670      	mov	r0, lr
   2494a:	e667      	b.n	2461c <_malloc_r+0x128>
   2494c:	f103 0810 	add.w	r8, r3, #16
   24950:	e6d0      	b.n	246f4 <_malloc_r+0x200>
   24952:	109a      	asrs	r2, r3, #2
   24954:	f04f 0801 	mov.w	r8, #1
   24958:	687b      	ldr	r3, [r7, #4]
   2495a:	fa08 f202 	lsl.w	r2, r8, r2
   2495e:	431a      	orrs	r2, r3
   24960:	607a      	str	r2, [r7, #4]
   24962:	e770      	b.n	24846 <_malloc_r+0x352>
   24964:	eb02 0108 	add.w	r1, r2, r8
   24968:	4249      	negs	r1, r1
   2496a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   2496e:	4651      	mov	r1, sl
   24970:	4620      	mov	r0, r4
   24972:	9200      	str	r2, [sp, #0]
   24974:	f002 fe02 	bl	2757c <_sbrk_r>
   24978:	1c43      	adds	r3, r0, #1
   2497a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2497e:	f47f aeef 	bne.w	24760 <_malloc_r+0x26c>
   24982:	46da      	mov	sl, fp
   24984:	e6ef      	b.n	24766 <_malloc_r+0x272>
   24986:	2b54      	cmp	r3, #84	; 0x54
   24988:	d825      	bhi.n	249d6 <_malloc_r+0x4e2>
   2498a:	0b13      	lsrs	r3, r2, #12
   2498c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   24990:	00c9      	lsls	r1, r1, #3
   24992:	336e      	adds	r3, #110	; 0x6e
   24994:	e744      	b.n	24820 <_malloc_r+0x32c>
   24996:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2499a:	d825      	bhi.n	249e8 <_malloc_r+0x4f4>
   2499c:	0bf3      	lsrs	r3, r6, #15
   2499e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   249a2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   249a6:	00c3      	lsls	r3, r0, #3
   249a8:	e5ea      	b.n	24580 <_malloc_r+0x8c>
   249aa:	4b29      	ldr	r3, [pc, #164]	; (24a50 <_malloc_r+0x55c>)
   249ac:	6818      	ldr	r0, [r3, #0]
   249ae:	4440      	add	r0, r8
   249b0:	6018      	str	r0, [r3, #0]
   249b2:	e6b1      	b.n	24718 <_malloc_r+0x224>
   249b4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   249b8:	f1bc 0f00 	cmp.w	ip, #0
   249bc:	f47f aeac 	bne.w	24718 <_malloc_r+0x224>
   249c0:	68bd      	ldr	r5, [r7, #8]
   249c2:	44c8      	add	r8, r9
   249c4:	f048 0001 	orr.w	r0, r8, #1
   249c8:	6068      	str	r0, [r5, #4]
   249ca:	e6f0      	b.n	247ae <_malloc_r+0x2ba>
   249cc:	4615      	mov	r5, r2
   249ce:	e6ee      	b.n	247ae <_malloc_r+0x2ba>
   249d0:	2301      	movs	r3, #1
   249d2:	6053      	str	r3, [r2, #4]
   249d4:	e794      	b.n	24900 <_malloc_r+0x40c>
   249d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   249da:	d823      	bhi.n	24a24 <_malloc_r+0x530>
   249dc:	0bd3      	lsrs	r3, r2, #15
   249de:	f103 0178 	add.w	r1, r3, #120	; 0x78
   249e2:	00c9      	lsls	r1, r1, #3
   249e4:	3377      	adds	r3, #119	; 0x77
   249e6:	e71b      	b.n	24820 <_malloc_r+0x32c>
   249e8:	f240 5254 	movw	r2, #1364	; 0x554
   249ec:	4293      	cmp	r3, r2
   249ee:	d823      	bhi.n	24a38 <_malloc_r+0x544>
   249f0:	0cb3      	lsrs	r3, r6, #18
   249f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   249f6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   249fa:	00c3      	lsls	r3, r0, #3
   249fc:	e5c0      	b.n	24580 <_malloc_r+0x8c>
   249fe:	f1ab 0b08 	sub.w	fp, fp, #8
   24a02:	44d8      	add	r8, fp
   24a04:	eba8 0802 	sub.w	r8, r8, r2
   24a08:	f04f 0a00 	mov.w	sl, #0
   24a0c:	e6ab      	b.n	24766 <_malloc_r+0x272>
   24a0e:	f105 0108 	add.w	r1, r5, #8
   24a12:	4620      	mov	r0, r4
   24a14:	9300      	str	r3, [sp, #0]
   24a16:	f002 fc1b 	bl	27250 <_free_r>
   24a1a:	68bd      	ldr	r5, [r7, #8]
   24a1c:	9b00      	ldr	r3, [sp, #0]
   24a1e:	6868      	ldr	r0, [r5, #4]
   24a20:	6819      	ldr	r1, [r3, #0]
   24a22:	e6c4      	b.n	247ae <_malloc_r+0x2ba>
   24a24:	f240 5154 	movw	r1, #1364	; 0x554
   24a28:	428b      	cmp	r3, r1
   24a2a:	d80b      	bhi.n	24a44 <_malloc_r+0x550>
   24a2c:	0c93      	lsrs	r3, r2, #18
   24a2e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   24a32:	00c9      	lsls	r1, r1, #3
   24a34:	337c      	adds	r3, #124	; 0x7c
   24a36:	e6f3      	b.n	24820 <_malloc_r+0x32c>
   24a38:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   24a3c:	207f      	movs	r0, #127	; 0x7f
   24a3e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   24a42:	e59d      	b.n	24580 <_malloc_r+0x8c>
   24a44:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   24a48:	237e      	movs	r3, #126	; 0x7e
   24a4a:	e6e9      	b.n	24820 <_malloc_r+0x32c>
   24a4c:	687b      	ldr	r3, [r7, #4]
   24a4e:	e770      	b.n	24932 <_malloc_r+0x43e>
   24a50:	2000cd14 	.word	0x2000cd14

00024a54 <memcmp>:
   24a54:	2a03      	cmp	r2, #3
   24a56:	b570      	push	{r4, r5, r6, lr}
   24a58:	d914      	bls.n	24a84 <memcmp+0x30>
   24a5a:	ea40 0301 	orr.w	r3, r0, r1
   24a5e:	079b      	lsls	r3, r3, #30
   24a60:	d122      	bne.n	24aa8 <memcmp+0x54>
   24a62:	4604      	mov	r4, r0
   24a64:	460b      	mov	r3, r1
   24a66:	4619      	mov	r1, r3
   24a68:	4620      	mov	r0, r4
   24a6a:	680e      	ldr	r6, [r1, #0]
   24a6c:	6805      	ldr	r5, [r0, #0]
   24a6e:	42b5      	cmp	r5, r6
   24a70:	f104 0404 	add.w	r4, r4, #4
   24a74:	f103 0304 	add.w	r3, r3, #4
   24a78:	d116      	bne.n	24aa8 <memcmp+0x54>
   24a7a:	3a04      	subs	r2, #4
   24a7c:	2a03      	cmp	r2, #3
   24a7e:	4620      	mov	r0, r4
   24a80:	4619      	mov	r1, r3
   24a82:	d8f0      	bhi.n	24a66 <memcmp+0x12>
   24a84:	1e54      	subs	r4, r2, #1
   24a86:	b19a      	cbz	r2, 24ab0 <memcmp+0x5c>
   24a88:	1e42      	subs	r2, r0, #1
   24a8a:	3901      	subs	r1, #1
   24a8c:	e001      	b.n	24a92 <memcmp+0x3e>
   24a8e:	18c3      	adds	r3, r0, r3
   24a90:	d00c      	beq.n	24aac <memcmp+0x58>
   24a92:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   24a96:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   24a9a:	45e6      	cmp	lr, ip
   24a9c:	eba4 0302 	sub.w	r3, r4, r2
   24aa0:	d0f5      	beq.n	24a8e <memcmp+0x3a>
   24aa2:	ebae 000c 	sub.w	r0, lr, ip
   24aa6:	bd70      	pop	{r4, r5, r6, pc}
   24aa8:	1e54      	subs	r4, r2, #1
   24aaa:	e7ed      	b.n	24a88 <memcmp+0x34>
   24aac:	4618      	mov	r0, r3
   24aae:	bd70      	pop	{r4, r5, r6, pc}
   24ab0:	4610      	mov	r0, r2
   24ab2:	bd70      	pop	{r4, r5, r6, pc}

00024ab4 <memmove>:
   24ab4:	4288      	cmp	r0, r1
   24ab6:	d90d      	bls.n	24ad4 <memmove+0x20>
   24ab8:	188b      	adds	r3, r1, r2
   24aba:	4283      	cmp	r3, r0
   24abc:	d90a      	bls.n	24ad4 <memmove+0x20>
   24abe:	eb00 0c02 	add.w	ip, r0, r2
   24ac2:	b1ba      	cbz	r2, 24af4 <memmove+0x40>
   24ac4:	4662      	mov	r2, ip
   24ac6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   24aca:	f802 cd01 	strb.w	ip, [r2, #-1]!
   24ace:	4299      	cmp	r1, r3
   24ad0:	d1f9      	bne.n	24ac6 <memmove+0x12>
   24ad2:	4770      	bx	lr
   24ad4:	2a0f      	cmp	r2, #15
   24ad6:	d80e      	bhi.n	24af6 <memmove+0x42>
   24ad8:	4603      	mov	r3, r0
   24ada:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   24ade:	b14a      	cbz	r2, 24af4 <memmove+0x40>
   24ae0:	f10c 0c01 	add.w	ip, ip, #1
   24ae4:	3b01      	subs	r3, #1
   24ae6:	448c      	add	ip, r1
   24ae8:	f811 2b01 	ldrb.w	r2, [r1], #1
   24aec:	f803 2f01 	strb.w	r2, [r3, #1]!
   24af0:	4561      	cmp	r1, ip
   24af2:	d1f9      	bne.n	24ae8 <memmove+0x34>
   24af4:	4770      	bx	lr
   24af6:	ea40 0301 	orr.w	r3, r0, r1
   24afa:	079b      	lsls	r3, r3, #30
   24afc:	d150      	bne.n	24ba0 <memmove+0xec>
   24afe:	f1a2 0310 	sub.w	r3, r2, #16
   24b02:	b570      	push	{r4, r5, r6, lr}
   24b04:	f101 0c20 	add.w	ip, r1, #32
   24b08:	f023 050f 	bic.w	r5, r3, #15
   24b0c:	f101 0e10 	add.w	lr, r1, #16
   24b10:	f100 0410 	add.w	r4, r0, #16
   24b14:	44ac      	add	ip, r5
   24b16:	091b      	lsrs	r3, r3, #4
   24b18:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   24b1c:	f844 5c10 	str.w	r5, [r4, #-16]
   24b20:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   24b24:	f844 5c0c 	str.w	r5, [r4, #-12]
   24b28:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   24b2c:	f844 5c08 	str.w	r5, [r4, #-8]
   24b30:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   24b34:	f844 5c04 	str.w	r5, [r4, #-4]
   24b38:	f10e 0e10 	add.w	lr, lr, #16
   24b3c:	45e6      	cmp	lr, ip
   24b3e:	f104 0410 	add.w	r4, r4, #16
   24b42:	d1e9      	bne.n	24b18 <memmove+0x64>
   24b44:	3301      	adds	r3, #1
   24b46:	f012 0f0c 	tst.w	r2, #12
   24b4a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   24b4e:	f002 040f 	and.w	r4, r2, #15
   24b52:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   24b56:	d027      	beq.n	24ba8 <memmove+0xf4>
   24b58:	3c04      	subs	r4, #4
   24b5a:	f024 0603 	bic.w	r6, r4, #3
   24b5e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   24b62:	441e      	add	r6, r3
   24b64:	1f1c      	subs	r4, r3, #4
   24b66:	468e      	mov	lr, r1
   24b68:	f85e 5b04 	ldr.w	r5, [lr], #4
   24b6c:	f844 5f04 	str.w	r5, [r4, #4]!
   24b70:	42b4      	cmp	r4, r6
   24b72:	d1f9      	bne.n	24b68 <memmove+0xb4>
   24b74:	f10c 0401 	add.w	r4, ip, #1
   24b78:	f002 0203 	and.w	r2, r2, #3
   24b7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   24b80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   24b84:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   24b88:	b14a      	cbz	r2, 24b9e <memmove+0xea>
   24b8a:	f10c 0c01 	add.w	ip, ip, #1
   24b8e:	3b01      	subs	r3, #1
   24b90:	448c      	add	ip, r1
   24b92:	f811 2b01 	ldrb.w	r2, [r1], #1
   24b96:	f803 2f01 	strb.w	r2, [r3, #1]!
   24b9a:	4561      	cmp	r1, ip
   24b9c:	d1f9      	bne.n	24b92 <memmove+0xde>
   24b9e:	bd70      	pop	{r4, r5, r6, pc}
   24ba0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   24ba4:	4603      	mov	r3, r0
   24ba6:	e79b      	b.n	24ae0 <memmove+0x2c>
   24ba8:	4622      	mov	r2, r4
   24baa:	e7eb      	b.n	24b84 <memmove+0xd0>

00024bac <__assert_func>:
   24bac:	b500      	push	{lr}
   24bae:	4c0b      	ldr	r4, [pc, #44]	; (24bdc <__assert_func+0x30>)
   24bb0:	6825      	ldr	r5, [r4, #0]
   24bb2:	4614      	mov	r4, r2
   24bb4:	68ee      	ldr	r6, [r5, #12]
   24bb6:	461a      	mov	r2, r3
   24bb8:	b085      	sub	sp, #20
   24bba:	4603      	mov	r3, r0
   24bbc:	460d      	mov	r5, r1
   24bbe:	b14c      	cbz	r4, 24bd4 <__assert_func+0x28>
   24bc0:	4907      	ldr	r1, [pc, #28]	; (24be0 <__assert_func+0x34>)
   24bc2:	9500      	str	r5, [sp, #0]
   24bc4:	e9cd 1401 	strd	r1, r4, [sp, #4]
   24bc8:	4630      	mov	r0, r6
   24bca:	4906      	ldr	r1, [pc, #24]	; (24be4 <__assert_func+0x38>)
   24bcc:	f002 fc6e 	bl	274ac <fiprintf>
   24bd0:	f7f4 f972 	bl	18eb8 <abort>
   24bd4:	4904      	ldr	r1, [pc, #16]	; (24be8 <__assert_func+0x3c>)
   24bd6:	460c      	mov	r4, r1
   24bd8:	e7f3      	b.n	24bc2 <__assert_func+0x16>
   24bda:	bf00      	nop
   24bdc:	20005fe4 	.word	0x20005fe4
   24be0:	20004118 	.word	0x20004118
   24be4:	20004128 	.word	0x20004128
   24be8:	20001d2c 	.word	0x20001d2c

00024bec <memset>:
   24bec:	0783      	lsls	r3, r0, #30
   24bee:	b530      	push	{r4, r5, lr}
   24bf0:	d048      	beq.n	24c84 <memset+0x98>
   24bf2:	1e54      	subs	r4, r2, #1
   24bf4:	2a00      	cmp	r2, #0
   24bf6:	d03f      	beq.n	24c78 <memset+0x8c>
   24bf8:	b2ca      	uxtb	r2, r1
   24bfa:	4603      	mov	r3, r0
   24bfc:	e001      	b.n	24c02 <memset+0x16>
   24bfe:	3c01      	subs	r4, #1
   24c00:	d33a      	bcc.n	24c78 <memset+0x8c>
   24c02:	f803 2b01 	strb.w	r2, [r3], #1
   24c06:	079d      	lsls	r5, r3, #30
   24c08:	d1f9      	bne.n	24bfe <memset+0x12>
   24c0a:	2c03      	cmp	r4, #3
   24c0c:	d92d      	bls.n	24c6a <memset+0x7e>
   24c0e:	b2cd      	uxtb	r5, r1
   24c10:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   24c14:	2c0f      	cmp	r4, #15
   24c16:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   24c1a:	d936      	bls.n	24c8a <memset+0x9e>
   24c1c:	f1a4 0210 	sub.w	r2, r4, #16
   24c20:	f022 0c0f 	bic.w	ip, r2, #15
   24c24:	f103 0e20 	add.w	lr, r3, #32
   24c28:	44e6      	add	lr, ip
   24c2a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   24c2e:	f103 0210 	add.w	r2, r3, #16
   24c32:	e942 5504 	strd	r5, r5, [r2, #-16]
   24c36:	e942 5502 	strd	r5, r5, [r2, #-8]
   24c3a:	3210      	adds	r2, #16
   24c3c:	4572      	cmp	r2, lr
   24c3e:	d1f8      	bne.n	24c32 <memset+0x46>
   24c40:	f10c 0201 	add.w	r2, ip, #1
   24c44:	f014 0f0c 	tst.w	r4, #12
   24c48:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   24c4c:	f004 0c0f 	and.w	ip, r4, #15
   24c50:	d013      	beq.n	24c7a <memset+0x8e>
   24c52:	f1ac 0304 	sub.w	r3, ip, #4
   24c56:	f023 0303 	bic.w	r3, r3, #3
   24c5a:	3304      	adds	r3, #4
   24c5c:	4413      	add	r3, r2
   24c5e:	f842 5b04 	str.w	r5, [r2], #4
   24c62:	4293      	cmp	r3, r2
   24c64:	d1fb      	bne.n	24c5e <memset+0x72>
   24c66:	f00c 0403 	and.w	r4, ip, #3
   24c6a:	b12c      	cbz	r4, 24c78 <memset+0x8c>
   24c6c:	b2c9      	uxtb	r1, r1
   24c6e:	441c      	add	r4, r3
   24c70:	f803 1b01 	strb.w	r1, [r3], #1
   24c74:	429c      	cmp	r4, r3
   24c76:	d1fb      	bne.n	24c70 <memset+0x84>
   24c78:	bd30      	pop	{r4, r5, pc}
   24c7a:	4664      	mov	r4, ip
   24c7c:	4613      	mov	r3, r2
   24c7e:	2c00      	cmp	r4, #0
   24c80:	d1f4      	bne.n	24c6c <memset+0x80>
   24c82:	e7f9      	b.n	24c78 <memset+0x8c>
   24c84:	4603      	mov	r3, r0
   24c86:	4614      	mov	r4, r2
   24c88:	e7bf      	b.n	24c0a <memset+0x1e>
   24c8a:	461a      	mov	r2, r3
   24c8c:	46a4      	mov	ip, r4
   24c8e:	e7e0      	b.n	24c52 <memset+0x66>

00024c90 <__cxa_atexit>:
   24c90:	4613      	mov	r3, r2
   24c92:	460a      	mov	r2, r1
   24c94:	4601      	mov	r1, r0
   24c96:	2002      	movs	r0, #2
   24c98:	f003 bdc0 	b.w	2881c <__register_exitproc>

00024c9c <_wcrtomb_r>:
   24c9c:	b570      	push	{r4, r5, r6, lr}
   24c9e:	4605      	mov	r5, r0
   24ca0:	b084      	sub	sp, #16
   24ca2:	b15b      	cbz	r3, 24cbc <_wcrtomb_r+0x20>
   24ca4:	461c      	mov	r4, r3
   24ca6:	b169      	cbz	r1, 24cc4 <_wcrtomb_r+0x28>
   24ca8:	4b0e      	ldr	r3, [pc, #56]	; (24ce4 <_wcrtomb_r+0x48>)
   24caa:	4628      	mov	r0, r5
   24cac:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   24cb0:	4623      	mov	r3, r4
   24cb2:	47b0      	blx	r6
   24cb4:	1c43      	adds	r3, r0, #1
   24cb6:	d00f      	beq.n	24cd8 <_wcrtomb_r+0x3c>
   24cb8:	b004      	add	sp, #16
   24cba:	bd70      	pop	{r4, r5, r6, pc}
   24cbc:	f500 7482 	add.w	r4, r0, #260	; 0x104
   24cc0:	2900      	cmp	r1, #0
   24cc2:	d1f1      	bne.n	24ca8 <_wcrtomb_r+0xc>
   24cc4:	4a07      	ldr	r2, [pc, #28]	; (24ce4 <_wcrtomb_r+0x48>)
   24cc6:	4623      	mov	r3, r4
   24cc8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   24ccc:	4628      	mov	r0, r5
   24cce:	460a      	mov	r2, r1
   24cd0:	a901      	add	r1, sp, #4
   24cd2:	47b0      	blx	r6
   24cd4:	1c43      	adds	r3, r0, #1
   24cd6:	d1ef      	bne.n	24cb8 <_wcrtomb_r+0x1c>
   24cd8:	2200      	movs	r2, #0
   24cda:	238a      	movs	r3, #138	; 0x8a
   24cdc:	6022      	str	r2, [r4, #0]
   24cde:	602b      	str	r3, [r5, #0]
   24ce0:	b004      	add	sp, #16
   24ce2:	bd70      	pop	{r4, r5, r6, pc}
   24ce4:	20005a5c 	.word	0x20005a5c

00024ce8 <__libc_init_array>:
   24ce8:	b570      	push	{r4, r5, r6, lr}
   24cea:	4e0d      	ldr	r6, [pc, #52]	; (24d20 <__libc_init_array+0x38>)
   24cec:	4d0d      	ldr	r5, [pc, #52]	; (24d24 <__libc_init_array+0x3c>)
   24cee:	1b76      	subs	r6, r6, r5
   24cf0:	10b6      	asrs	r6, r6, #2
   24cf2:	d006      	beq.n	24d02 <__libc_init_array+0x1a>
   24cf4:	2400      	movs	r4, #0
   24cf6:	f855 3b04 	ldr.w	r3, [r5], #4
   24cfa:	3401      	adds	r4, #1
   24cfc:	4798      	blx	r3
   24cfe:	42a6      	cmp	r6, r4
   24d00:	d1f9      	bne.n	24cf6 <__libc_init_array+0xe>
   24d02:	4e09      	ldr	r6, [pc, #36]	; (24d28 <__libc_init_array+0x40>)
   24d04:	4d09      	ldr	r5, [pc, #36]	; (24d2c <__libc_init_array+0x44>)
   24d06:	1b76      	subs	r6, r6, r5
   24d08:	f003 ffa6 	bl	28c58 <___init_veneer>
   24d0c:	10b6      	asrs	r6, r6, #2
   24d0e:	d006      	beq.n	24d1e <__libc_init_array+0x36>
   24d10:	2400      	movs	r4, #0
   24d12:	f855 3b04 	ldr.w	r3, [r5], #4
   24d16:	3401      	adds	r4, #1
   24d18:	4798      	blx	r3
   24d1a:	42a6      	cmp	r6, r4
   24d1c:	d1f9      	bne.n	24d12 <__libc_init_array+0x2a>
   24d1e:	bd70      	pop	{r4, r5, r6, pc}
   24d20:	60001e80 	.word	0x60001e80
   24d24:	60001e80 	.word	0x60001e80
   24d28:	60001ea0 	.word	0x60001ea0
   24d2c:	60001e80 	.word	0x60001e80

00024d30 <__retarget_lock_init_recursive>:
   24d30:	4770      	bx	lr
   24d32:	bf00      	nop

00024d34 <__retarget_lock_close_recursive>:
   24d34:	4770      	bx	lr
   24d36:	bf00      	nop

00024d38 <__retarget_lock_acquire_recursive>:
   24d38:	4770      	bx	lr
   24d3a:	bf00      	nop

00024d3c <__retarget_lock_release_recursive>:
   24d3c:	4770      	bx	lr
   24d3e:	bf00      	nop

00024d40 <__locale_mb_cur_max>:
   24d40:	4b01      	ldr	r3, [pc, #4]	; (24d48 <__locale_mb_cur_max+0x8>)
   24d42:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   24d46:	4770      	bx	lr
   24d48:	20005a5c 	.word	0x20005a5c

00024d4c <_localeconv_r>:
   24d4c:	4800      	ldr	r0, [pc, #0]	; (24d50 <_localeconv_r+0x4>)
   24d4e:	4770      	bx	lr
   24d50:	20005b4c 	.word	0x20005b4c
	...
   24d60:	eba2 0003 	sub.w	r0, r2, r3
   24d64:	4770      	bx	lr
   24d66:	bf00      	nop

00024d68 <strcmp>:
   24d68:	7802      	ldrb	r2, [r0, #0]
   24d6a:	780b      	ldrb	r3, [r1, #0]
   24d6c:	2a01      	cmp	r2, #1
   24d6e:	bf28      	it	cs
   24d70:	429a      	cmpcs	r2, r3
   24d72:	d1f5      	bne.n	24d60 <_localeconv_r+0x14>
   24d74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   24d78:	ea40 0401 	orr.w	r4, r0, r1
   24d7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   24d80:	f06f 0c00 	mvn.w	ip, #0
   24d84:	ea4f 7244 	mov.w	r2, r4, lsl #29
   24d88:	b312      	cbz	r2, 24dd0 <strcmp+0x68>
   24d8a:	ea80 0401 	eor.w	r4, r0, r1
   24d8e:	f014 0f07 	tst.w	r4, #7
   24d92:	d16a      	bne.n	24e6a <strcmp+0x102>
   24d94:	f000 0407 	and.w	r4, r0, #7
   24d98:	f020 0007 	bic.w	r0, r0, #7
   24d9c:	f004 0503 	and.w	r5, r4, #3
   24da0:	f021 0107 	bic.w	r1, r1, #7
   24da4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   24da8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   24dac:	f014 0f04 	tst.w	r4, #4
   24db0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   24db4:	fa0c f405 	lsl.w	r4, ip, r5
   24db8:	ea62 0204 	orn	r2, r2, r4
   24dbc:	ea66 0604 	orn	r6, r6, r4
   24dc0:	d00a      	beq.n	24dd8 <strcmp+0x70>
   24dc2:	ea63 0304 	orn	r3, r3, r4
   24dc6:	4662      	mov	r2, ip
   24dc8:	ea67 0704 	orn	r7, r7, r4
   24dcc:	4666      	mov	r6, ip
   24dce:	e003      	b.n	24dd8 <strcmp+0x70>
   24dd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   24dd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   24dd8:	fa82 f54c 	uadd8	r5, r2, ip
   24ddc:	ea82 0406 	eor.w	r4, r2, r6
   24de0:	faa4 f48c 	sel	r4, r4, ip
   24de4:	bb6c      	cbnz	r4, 24e42 <strcmp+0xda>
   24de6:	fa83 f54c 	uadd8	r5, r3, ip
   24dea:	ea83 0507 	eor.w	r5, r3, r7
   24dee:	faa5 f58c 	sel	r5, r5, ip
   24df2:	b995      	cbnz	r5, 24e1a <strcmp+0xb2>
   24df4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   24df8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   24dfc:	fa82 f54c 	uadd8	r5, r2, ip
   24e00:	ea82 0406 	eor.w	r4, r2, r6
   24e04:	faa4 f48c 	sel	r4, r4, ip
   24e08:	fa83 f54c 	uadd8	r5, r3, ip
   24e0c:	ea83 0507 	eor.w	r5, r3, r7
   24e10:	faa5 f58c 	sel	r5, r5, ip
   24e14:	4325      	orrs	r5, r4
   24e16:	d0db      	beq.n	24dd0 <strcmp+0x68>
   24e18:	b99c      	cbnz	r4, 24e42 <strcmp+0xda>
   24e1a:	ba2d      	rev	r5, r5
   24e1c:	fab5 f485 	clz	r4, r5
   24e20:	f024 0407 	bic.w	r4, r4, #7
   24e24:	fa27 f104 	lsr.w	r1, r7, r4
   24e28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   24e2c:	fa23 f304 	lsr.w	r3, r3, r4
   24e30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   24e34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   24e38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   24e3c:	eba0 0001 	sub.w	r0, r0, r1
   24e40:	4770      	bx	lr
   24e42:	ba24      	rev	r4, r4
   24e44:	fab4 f484 	clz	r4, r4
   24e48:	f024 0407 	bic.w	r4, r4, #7
   24e4c:	fa26 f104 	lsr.w	r1, r6, r4
   24e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   24e54:	fa22 f204 	lsr.w	r2, r2, r4
   24e58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   24e5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   24e60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   24e64:	eba0 0001 	sub.w	r0, r0, r1
   24e68:	4770      	bx	lr
   24e6a:	f014 0f03 	tst.w	r4, #3
   24e6e:	d13c      	bne.n	24eea <strcmp+0x182>
   24e70:	f010 0403 	ands.w	r4, r0, #3
   24e74:	d128      	bne.n	24ec8 <strcmp+0x160>
   24e76:	f850 2b08 	ldr.w	r2, [r0], #8
   24e7a:	f851 3b08 	ldr.w	r3, [r1], #8
   24e7e:	fa82 f54c 	uadd8	r5, r2, ip
   24e82:	ea82 0503 	eor.w	r5, r2, r3
   24e86:	faa5 f58c 	sel	r5, r5, ip
   24e8a:	b95d      	cbnz	r5, 24ea4 <strcmp+0x13c>
   24e8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   24e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24e94:	fa82 f54c 	uadd8	r5, r2, ip
   24e98:	ea82 0503 	eor.w	r5, r2, r3
   24e9c:	faa5 f58c 	sel	r5, r5, ip
   24ea0:	2d00      	cmp	r5, #0
   24ea2:	d0e8      	beq.n	24e76 <strcmp+0x10e>
   24ea4:	ba2d      	rev	r5, r5
   24ea6:	fab5 f485 	clz	r4, r5
   24eaa:	f024 0407 	bic.w	r4, r4, #7
   24eae:	fa23 f104 	lsr.w	r1, r3, r4
   24eb2:	fa22 f204 	lsr.w	r2, r2, r4
   24eb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   24eba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   24ebe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   24ec2:	eba0 0001 	sub.w	r0, r0, r1
   24ec6:	4770      	bx	lr
   24ec8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   24ecc:	f020 0003 	bic.w	r0, r0, #3
   24ed0:	f850 2b08 	ldr.w	r2, [r0], #8
   24ed4:	f021 0103 	bic.w	r1, r1, #3
   24ed8:	f851 3b08 	ldr.w	r3, [r1], #8
   24edc:	fa0c f404 	lsl.w	r4, ip, r4
   24ee0:	ea62 0204 	orn	r2, r2, r4
   24ee4:	ea63 0304 	orn	r3, r3, r4
   24ee8:	e7c9      	b.n	24e7e <strcmp+0x116>
   24eea:	f010 0403 	ands.w	r4, r0, #3
   24eee:	d01a      	beq.n	24f26 <strcmp+0x1be>
   24ef0:	eba1 0104 	sub.w	r1, r1, r4
   24ef4:	f020 0003 	bic.w	r0, r0, #3
   24ef8:	07e4      	lsls	r4, r4, #31
   24efa:	f850 2b04 	ldr.w	r2, [r0], #4
   24efe:	d006      	beq.n	24f0e <strcmp+0x1a6>
   24f00:	d20f      	bcs.n	24f22 <strcmp+0x1ba>
   24f02:	788b      	ldrb	r3, [r1, #2]
   24f04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   24f08:	1ae4      	subs	r4, r4, r3
   24f0a:	d106      	bne.n	24f1a <strcmp+0x1b2>
   24f0c:	b12b      	cbz	r3, 24f1a <strcmp+0x1b2>
   24f0e:	78cb      	ldrb	r3, [r1, #3]
   24f10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   24f14:	1ae4      	subs	r4, r4, r3
   24f16:	d100      	bne.n	24f1a <strcmp+0x1b2>
   24f18:	b91b      	cbnz	r3, 24f22 <strcmp+0x1ba>
   24f1a:	4620      	mov	r0, r4
   24f1c:	f85d 4b10 	ldr.w	r4, [sp], #16
   24f20:	4770      	bx	lr
   24f22:	f101 0104 	add.w	r1, r1, #4
   24f26:	f850 2b04 	ldr.w	r2, [r0], #4
   24f2a:	07cc      	lsls	r4, r1, #31
   24f2c:	f021 0103 	bic.w	r1, r1, #3
   24f30:	f851 3b04 	ldr.w	r3, [r1], #4
   24f34:	d848      	bhi.n	24fc8 <strcmp+0x260>
   24f36:	d224      	bcs.n	24f82 <strcmp+0x21a>
   24f38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   24f3c:	fa82 f54c 	uadd8	r5, r2, ip
   24f40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   24f44:	faa5 f58c 	sel	r5, r5, ip
   24f48:	d10a      	bne.n	24f60 <strcmp+0x1f8>
   24f4a:	b965      	cbnz	r5, 24f66 <strcmp+0x1fe>
   24f4c:	f851 3b04 	ldr.w	r3, [r1], #4
   24f50:	ea84 0402 	eor.w	r4, r4, r2
   24f54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   24f58:	d10e      	bne.n	24f78 <strcmp+0x210>
   24f5a:	f850 2b04 	ldr.w	r2, [r0], #4
   24f5e:	e7eb      	b.n	24f38 <strcmp+0x1d0>
   24f60:	ea4f 2313 	mov.w	r3, r3, lsr #8
   24f64:	e055      	b.n	25012 <strcmp+0x2aa>
   24f66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   24f6a:	d14d      	bne.n	25008 <strcmp+0x2a0>
   24f6c:	7808      	ldrb	r0, [r1, #0]
   24f6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   24f72:	f1c0 0000 	rsb	r0, r0, #0
   24f76:	4770      	bx	lr
   24f78:	ea4f 6212 	mov.w	r2, r2, lsr #24
   24f7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   24f80:	e047      	b.n	25012 <strcmp+0x2aa>
   24f82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   24f86:	fa82 f54c 	uadd8	r5, r2, ip
   24f8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   24f8e:	faa5 f58c 	sel	r5, r5, ip
   24f92:	d10a      	bne.n	24faa <strcmp+0x242>
   24f94:	b965      	cbnz	r5, 24fb0 <strcmp+0x248>
   24f96:	f851 3b04 	ldr.w	r3, [r1], #4
   24f9a:	ea84 0402 	eor.w	r4, r4, r2
   24f9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   24fa2:	d10c      	bne.n	24fbe <strcmp+0x256>
   24fa4:	f850 2b04 	ldr.w	r2, [r0], #4
   24fa8:	e7eb      	b.n	24f82 <strcmp+0x21a>
   24faa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   24fae:	e030      	b.n	25012 <strcmp+0x2aa>
   24fb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   24fb4:	d128      	bne.n	25008 <strcmp+0x2a0>
   24fb6:	880b      	ldrh	r3, [r1, #0]
   24fb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   24fbc:	e029      	b.n	25012 <strcmp+0x2aa>
   24fbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
   24fc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   24fc6:	e024      	b.n	25012 <strcmp+0x2aa>
   24fc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   24fcc:	fa82 f54c 	uadd8	r5, r2, ip
   24fd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   24fd4:	faa5 f58c 	sel	r5, r5, ip
   24fd8:	d10a      	bne.n	24ff0 <strcmp+0x288>
   24fda:	b965      	cbnz	r5, 24ff6 <strcmp+0x28e>
   24fdc:	f851 3b04 	ldr.w	r3, [r1], #4
   24fe0:	ea84 0402 	eor.w	r4, r4, r2
   24fe4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   24fe8:	d109      	bne.n	24ffe <strcmp+0x296>
   24fea:	f850 2b04 	ldr.w	r2, [r0], #4
   24fee:	e7eb      	b.n	24fc8 <strcmp+0x260>
   24ff0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   24ff4:	e00d      	b.n	25012 <strcmp+0x2aa>
   24ff6:	f015 0fff 	tst.w	r5, #255	; 0xff
   24ffa:	d105      	bne.n	25008 <strcmp+0x2a0>
   24ffc:	680b      	ldr	r3, [r1, #0]
   24ffe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   25002:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25006:	e004      	b.n	25012 <strcmp+0x2aa>
   25008:	f04f 0000 	mov.w	r0, #0
   2500c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   25010:	4770      	bx	lr
   25012:	ba12      	rev	r2, r2
   25014:	ba1b      	rev	r3, r3
   25016:	fa82 f44c 	uadd8	r4, r2, ip
   2501a:	ea82 0403 	eor.w	r4, r2, r3
   2501e:	faa4 f58c 	sel	r5, r4, ip
   25022:	fab5 f485 	clz	r4, r5
   25026:	fa02 f204 	lsl.w	r2, r2, r4
   2502a:	fa03 f304 	lsl.w	r3, r3, r4
   2502e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   25032:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   25036:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   2503a:	4770      	bx	lr

0002503c <__swsetup_r>:
   2503c:	b538      	push	{r3, r4, r5, lr}
   2503e:	4b31      	ldr	r3, [pc, #196]	; (25104 <__swsetup_r+0xc8>)
   25040:	681b      	ldr	r3, [r3, #0]
   25042:	4605      	mov	r5, r0
   25044:	460c      	mov	r4, r1
   25046:	b113      	cbz	r3, 2504e <__swsetup_r+0x12>
   25048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2504a:	2a00      	cmp	r2, #0
   2504c:	d04e      	beq.n	250ec <__swsetup_r+0xb0>
   2504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25052:	0718      	lsls	r0, r3, #28
   25054:	b29a      	uxth	r2, r3
   25056:	d51c      	bpl.n	25092 <__swsetup_r+0x56>
   25058:	6921      	ldr	r1, [r4, #16]
   2505a:	b329      	cbz	r1, 250a8 <__swsetup_r+0x6c>
   2505c:	f012 0001 	ands.w	r0, r2, #1
   25060:	d007      	beq.n	25072 <__swsetup_r+0x36>
   25062:	2000      	movs	r0, #0
   25064:	60a0      	str	r0, [r4, #8]
   25066:	6960      	ldr	r0, [r4, #20]
   25068:	4240      	negs	r0, r0
   2506a:	61a0      	str	r0, [r4, #24]
   2506c:	b139      	cbz	r1, 2507e <__swsetup_r+0x42>
   2506e:	2000      	movs	r0, #0
   25070:	bd38      	pop	{r3, r4, r5, pc}
   25072:	0795      	lsls	r5, r2, #30
   25074:	bf58      	it	pl
   25076:	6960      	ldrpl	r0, [r4, #20]
   25078:	60a0      	str	r0, [r4, #8]
   2507a:	2900      	cmp	r1, #0
   2507c:	d1f7      	bne.n	2506e <__swsetup_r+0x32>
   2507e:	0612      	lsls	r2, r2, #24
   25080:	bf58      	it	pl
   25082:	4608      	movpl	r0, r1
   25084:	d5f4      	bpl.n	25070 <__swsetup_r+0x34>
   25086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2508a:	81a3      	strh	r3, [r4, #12]
   2508c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25090:	bd38      	pop	{r3, r4, r5, pc}
   25092:	06d1      	lsls	r1, r2, #27
   25094:	d52e      	bpl.n	250f4 <__swsetup_r+0xb8>
   25096:	0752      	lsls	r2, r2, #29
   25098:	d414      	bmi.n	250c4 <__swsetup_r+0x88>
   2509a:	6921      	ldr	r1, [r4, #16]
   2509c:	f043 0308 	orr.w	r3, r3, #8
   250a0:	81a3      	strh	r3, [r4, #12]
   250a2:	b29a      	uxth	r2, r3
   250a4:	2900      	cmp	r1, #0
   250a6:	d1d9      	bne.n	2505c <__swsetup_r+0x20>
   250a8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   250ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   250b0:	d0d4      	beq.n	2505c <__swsetup_r+0x20>
   250b2:	4621      	mov	r1, r4
   250b4:	4628      	mov	r0, r5
   250b6:	f000 f827 	bl	25108 <__smakebuf_r>
   250ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   250be:	6921      	ldr	r1, [r4, #16]
   250c0:	b29a      	uxth	r2, r3
   250c2:	e7cb      	b.n	2505c <__swsetup_r+0x20>
   250c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   250c6:	b151      	cbz	r1, 250de <__swsetup_r+0xa2>
   250c8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   250cc:	4291      	cmp	r1, r2
   250ce:	d004      	beq.n	250da <__swsetup_r+0x9e>
   250d0:	4628      	mov	r0, r5
   250d2:	f002 f8bd 	bl	27250 <_free_r>
   250d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   250da:	2200      	movs	r2, #0
   250dc:	6322      	str	r2, [r4, #48]	; 0x30
   250de:	6921      	ldr	r1, [r4, #16]
   250e0:	2200      	movs	r2, #0
   250e2:	e9c4 1200 	strd	r1, r2, [r4]
   250e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   250ea:	e7d7      	b.n	2509c <__swsetup_r+0x60>
   250ec:	4618      	mov	r0, r3
   250ee:	f001 fd31 	bl	26b54 <__sinit>
   250f2:	e7ac      	b.n	2504e <__swsetup_r+0x12>
   250f4:	2209      	movs	r2, #9
   250f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   250fa:	602a      	str	r2, [r5, #0]
   250fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25100:	81a3      	strh	r3, [r4, #12]
   25102:	bd38      	pop	{r3, r4, r5, pc}
   25104:	20005fe4 	.word	0x20005fe4

00025108 <__smakebuf_r>:
   25108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2510c:	898b      	ldrh	r3, [r1, #12]
   2510e:	460c      	mov	r4, r1
   25110:	0799      	lsls	r1, r3, #30
   25112:	b096      	sub	sp, #88	; 0x58
   25114:	d508      	bpl.n	25128 <__smakebuf_r+0x20>
   25116:	f104 0343 	add.w	r3, r4, #67	; 0x43
   2511a:	2201      	movs	r2, #1
   2511c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   25120:	6023      	str	r3, [r4, #0]
   25122:	b016      	add	sp, #88	; 0x58
   25124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2512c:	2900      	cmp	r1, #0
   2512e:	4606      	mov	r6, r0
   25130:	db25      	blt.n	2517e <__smakebuf_r+0x76>
   25132:	466a      	mov	r2, sp
   25134:	f002 f992 	bl	2745c <_fstat_r>
   25138:	2800      	cmp	r0, #0
   2513a:	db1f      	blt.n	2517c <__smakebuf_r+0x74>
   2513c:	9d01      	ldr	r5, [sp, #4]
   2513e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   25142:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   25146:	fab5 f585 	clz	r5, r5
   2514a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2514e:	096d      	lsrs	r5, r5, #5
   25150:	f44f 6700 	mov.w	r7, #2048	; 0x800
   25154:	4641      	mov	r1, r8
   25156:	4630      	mov	r0, r6
   25158:	f7ff f9cc 	bl	244f4 <_malloc_r>
   2515c:	b1e0      	cbz	r0, 25198 <__smakebuf_r+0x90>
   2515e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25162:	f8c4 8014 	str.w	r8, [r4, #20]
   25166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2516a:	6020      	str	r0, [r4, #0]
   2516c:	6120      	str	r0, [r4, #16]
   2516e:	81a3      	strh	r3, [r4, #12]
   25170:	bb35      	cbnz	r5, 251c0 <__smakebuf_r+0xb8>
   25172:	433b      	orrs	r3, r7
   25174:	81a3      	strh	r3, [r4, #12]
   25176:	b016      	add	sp, #88	; 0x58
   25178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2517c:	89a3      	ldrh	r3, [r4, #12]
   2517e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   25182:	d019      	beq.n	251b8 <__smakebuf_r+0xb0>
   25184:	f04f 0840 	mov.w	r8, #64	; 0x40
   25188:	2500      	movs	r5, #0
   2518a:	4641      	mov	r1, r8
   2518c:	4630      	mov	r0, r6
   2518e:	462f      	mov	r7, r5
   25190:	f7ff f9b0 	bl	244f4 <_malloc_r>
   25194:	2800      	cmp	r0, #0
   25196:	d1e2      	bne.n	2515e <__smakebuf_r+0x56>
   25198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2519c:	059a      	lsls	r2, r3, #22
   2519e:	d4c0      	bmi.n	25122 <__smakebuf_r+0x1a>
   251a0:	f023 0303 	bic.w	r3, r3, #3
   251a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   251a8:	f043 0302 	orr.w	r3, r3, #2
   251ac:	2101      	movs	r1, #1
   251ae:	e9c4 2104 	strd	r2, r1, [r4, #16]
   251b2:	81a3      	strh	r3, [r4, #12]
   251b4:	6022      	str	r2, [r4, #0]
   251b6:	e7b4      	b.n	25122 <__smakebuf_r+0x1a>
   251b8:	f44f 6880 	mov.w	r8, #1024	; 0x400
   251bc:	462f      	mov	r7, r5
   251be:	e7c9      	b.n	25154 <__smakebuf_r+0x4c>
   251c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   251c4:	4630      	mov	r0, r6
   251c6:	f002 f95f 	bl	27488 <_isatty_r>
   251ca:	b910      	cbnz	r0, 251d2 <__smakebuf_r+0xca>
   251cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   251d0:	e7cf      	b.n	25172 <__smakebuf_r+0x6a>
   251d2:	89a3      	ldrh	r3, [r4, #12]
   251d4:	f023 0303 	bic.w	r3, r3, #3
   251d8:	f043 0301 	orr.w	r3, r3, #1
   251dc:	b21b      	sxth	r3, r3
   251de:	e7c8      	b.n	25172 <__smakebuf_r+0x6a>

000251e0 <_putc_r>:
   251e0:	b570      	push	{r4, r5, r6, lr}
   251e2:	460e      	mov	r6, r1
   251e4:	4614      	mov	r4, r2
   251e6:	4605      	mov	r5, r0
   251e8:	b110      	cbz	r0, 251f0 <_putc_r+0x10>
   251ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
   251ec:	2b00      	cmp	r3, #0
   251ee:	d02f      	beq.n	25250 <_putc_r+0x70>
   251f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   251f2:	07d8      	lsls	r0, r3, #31
   251f4:	d402      	bmi.n	251fc <_putc_r+0x1c>
   251f6:	89a3      	ldrh	r3, [r4, #12]
   251f8:	0599      	lsls	r1, r3, #22
   251fa:	d520      	bpl.n	2523e <_putc_r+0x5e>
   251fc:	68a3      	ldr	r3, [r4, #8]
   251fe:	3b01      	subs	r3, #1
   25200:	2b00      	cmp	r3, #0
   25202:	60a3      	str	r3, [r4, #8]
   25204:	da19      	bge.n	2523a <_putc_r+0x5a>
   25206:	69a2      	ldr	r2, [r4, #24]
   25208:	4293      	cmp	r3, r2
   2520a:	db0f      	blt.n	2522c <_putc_r+0x4c>
   2520c:	b2f0      	uxtb	r0, r6
   2520e:	280a      	cmp	r0, #10
   25210:	d00c      	beq.n	2522c <_putc_r+0x4c>
   25212:	6823      	ldr	r3, [r4, #0]
   25214:	1c5a      	adds	r2, r3, #1
   25216:	6022      	str	r2, [r4, #0]
   25218:	4605      	mov	r5, r0
   2521a:	701e      	strb	r6, [r3, #0]
   2521c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2521e:	07da      	lsls	r2, r3, #31
   25220:	d402      	bmi.n	25228 <_putc_r+0x48>
   25222:	89a3      	ldrh	r3, [r4, #12]
   25224:	059b      	lsls	r3, r3, #22
   25226:	d50e      	bpl.n	25246 <_putc_r+0x66>
   25228:	4628      	mov	r0, r5
   2522a:	bd70      	pop	{r4, r5, r6, pc}
   2522c:	4628      	mov	r0, r5
   2522e:	4622      	mov	r2, r4
   25230:	4631      	mov	r1, r6
   25232:	f003 fa9b 	bl	2876c <__swbuf_r>
   25236:	4605      	mov	r5, r0
   25238:	e7f0      	b.n	2521c <_putc_r+0x3c>
   2523a:	b2f0      	uxtb	r0, r6
   2523c:	e7e9      	b.n	25212 <_putc_r+0x32>
   2523e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25240:	f7ff fd7a 	bl	24d38 <__retarget_lock_acquire_recursive>
   25244:	e7da      	b.n	251fc <_putc_r+0x1c>
   25246:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25248:	f7ff fd78 	bl	24d3c <__retarget_lock_release_recursive>
   2524c:	4628      	mov	r0, r5
   2524e:	bd70      	pop	{r4, r5, r6, pc}
   25250:	f001 fc80 	bl	26b54 <__sinit>
   25254:	e7cc      	b.n	251f0 <_putc_r+0x10>
   25256:	bf00      	nop

00025258 <__malloc_lock>:
   25258:	4801      	ldr	r0, [pc, #4]	; (25260 <__malloc_lock+0x8>)
   2525a:	f7ff bd6d 	b.w	24d38 <__retarget_lock_acquire_recursive>
   2525e:	bf00      	nop
   25260:	2000cd0c 	.word	0x2000cd0c

00025264 <__malloc_unlock>:
   25264:	4801      	ldr	r0, [pc, #4]	; (2526c <__malloc_unlock+0x8>)
   25266:	f7ff bd69 	b.w	24d3c <__retarget_lock_release_recursive>
   2526a:	bf00      	nop
   2526c:	2000cd0c 	.word	0x2000cd0c

00025270 <_Balloc>:
   25270:	6c43      	ldr	r3, [r0, #68]	; 0x44
   25272:	b570      	push	{r4, r5, r6, lr}
   25274:	4605      	mov	r5, r0
   25276:	460c      	mov	r4, r1
   25278:	b14b      	cbz	r3, 2528e <_Balloc+0x1e>
   2527a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2527e:	b180      	cbz	r0, 252a2 <_Balloc+0x32>
   25280:	6802      	ldr	r2, [r0, #0]
   25282:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   25286:	2300      	movs	r3, #0
   25288:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2528c:	bd70      	pop	{r4, r5, r6, pc}
   2528e:	2221      	movs	r2, #33	; 0x21
   25290:	2104      	movs	r1, #4
   25292:	f000 fba9 	bl	259e8 <_calloc_r>
   25296:	4603      	mov	r3, r0
   25298:	6468      	str	r0, [r5, #68]	; 0x44
   2529a:	2800      	cmp	r0, #0
   2529c:	d1ed      	bne.n	2527a <_Balloc+0xa>
   2529e:	2000      	movs	r0, #0
   252a0:	bd70      	pop	{r4, r5, r6, pc}
   252a2:	2101      	movs	r1, #1
   252a4:	fa01 f604 	lsl.w	r6, r1, r4
   252a8:	1d72      	adds	r2, r6, #5
   252aa:	0092      	lsls	r2, r2, #2
   252ac:	4628      	mov	r0, r5
   252ae:	f000 fb9b 	bl	259e8 <_calloc_r>
   252b2:	2800      	cmp	r0, #0
   252b4:	d0f3      	beq.n	2529e <_Balloc+0x2e>
   252b6:	e9c0 4601 	strd	r4, r6, [r0, #4]
   252ba:	e7e4      	b.n	25286 <_Balloc+0x16>

000252bc <_Bfree>:
   252bc:	b131      	cbz	r1, 252cc <_Bfree+0x10>
   252be:	6c43      	ldr	r3, [r0, #68]	; 0x44
   252c0:	684a      	ldr	r2, [r1, #4]
   252c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   252c6:	6008      	str	r0, [r1, #0]
   252c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   252cc:	4770      	bx	lr
   252ce:	bf00      	nop

000252d0 <__multadd>:
   252d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252d4:	690e      	ldr	r6, [r1, #16]
   252d6:	4680      	mov	r8, r0
   252d8:	460f      	mov	r7, r1
   252da:	461d      	mov	r5, r3
   252dc:	f101 0e14 	add.w	lr, r1, #20
   252e0:	2000      	movs	r0, #0
   252e2:	f8de 1000 	ldr.w	r1, [lr]
   252e6:	b28c      	uxth	r4, r1
   252e8:	fb02 5304 	mla	r3, r2, r4, r5
   252ec:	0c09      	lsrs	r1, r1, #16
   252ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   252f2:	fb02 cc01 	mla	ip, r2, r1, ip
   252f6:	3001      	adds	r0, #1
   252f8:	b29c      	uxth	r4, r3
   252fa:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   252fe:	4286      	cmp	r6, r0
   25300:	f84e 4b04 	str.w	r4, [lr], #4
   25304:	ea4f 451c 	mov.w	r5, ip, lsr #16
   25308:	dceb      	bgt.n	252e2 <__multadd+0x12>
   2530a:	b13d      	cbz	r5, 2531c <__multadd+0x4c>
   2530c:	68bb      	ldr	r3, [r7, #8]
   2530e:	42b3      	cmp	r3, r6
   25310:	dd07      	ble.n	25322 <__multadd+0x52>
   25312:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   25316:	3601      	adds	r6, #1
   25318:	615d      	str	r5, [r3, #20]
   2531a:	613e      	str	r6, [r7, #16]
   2531c:	4638      	mov	r0, r7
   2531e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25322:	6879      	ldr	r1, [r7, #4]
   25324:	4640      	mov	r0, r8
   25326:	3101      	adds	r1, #1
   25328:	f7ff ffa2 	bl	25270 <_Balloc>
   2532c:	4604      	mov	r4, r0
   2532e:	b1b0      	cbz	r0, 2535e <__multadd+0x8e>
   25330:	693a      	ldr	r2, [r7, #16]
   25332:	3202      	adds	r2, #2
   25334:	f107 010c 	add.w	r1, r7, #12
   25338:	0092      	lsls	r2, r2, #2
   2533a:	300c      	adds	r0, #12
   2533c:	f7f3 fc2c 	bl	18b98 <memcpy>
   25340:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   25344:	687a      	ldr	r2, [r7, #4]
   25346:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2534a:	6039      	str	r1, [r7, #0]
   2534c:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   25350:	4627      	mov	r7, r4
   25352:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   25356:	3601      	adds	r6, #1
   25358:	615d      	str	r5, [r3, #20]
   2535a:	613e      	str	r6, [r7, #16]
   2535c:	e7de      	b.n	2531c <__multadd+0x4c>
   2535e:	4b03      	ldr	r3, [pc, #12]	; (2536c <__multadd+0x9c>)
   25360:	4803      	ldr	r0, [pc, #12]	; (25370 <__multadd+0xa0>)
   25362:	4622      	mov	r2, r4
   25364:	21ba      	movs	r1, #186	; 0xba
   25366:	f7ff fc21 	bl	24bac <__assert_func>
   2536a:	bf00      	nop
   2536c:	20004194 	.word	0x20004194
   25370:	200041a8 	.word	0x200041a8

00025374 <__hi0bits>:
   25374:	0c03      	lsrs	r3, r0, #16
   25376:	041b      	lsls	r3, r3, #16
   25378:	b9d3      	cbnz	r3, 253b0 <__hi0bits+0x3c>
   2537a:	0400      	lsls	r0, r0, #16
   2537c:	2310      	movs	r3, #16
   2537e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   25382:	bf04      	itt	eq
   25384:	0200      	lsleq	r0, r0, #8
   25386:	3308      	addeq	r3, #8
   25388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   2538c:	bf04      	itt	eq
   2538e:	0100      	lsleq	r0, r0, #4
   25390:	3304      	addeq	r3, #4
   25392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   25396:	bf04      	itt	eq
   25398:	0080      	lsleq	r0, r0, #2
   2539a:	3302      	addeq	r3, #2
   2539c:	2800      	cmp	r0, #0
   2539e:	db05      	blt.n	253ac <__hi0bits+0x38>
   253a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   253a4:	f103 0301 	add.w	r3, r3, #1
   253a8:	bf08      	it	eq
   253aa:	2320      	moveq	r3, #32
   253ac:	4618      	mov	r0, r3
   253ae:	4770      	bx	lr
   253b0:	2300      	movs	r3, #0
   253b2:	e7e4      	b.n	2537e <__hi0bits+0xa>

000253b4 <__lo0bits>:
   253b4:	6803      	ldr	r3, [r0, #0]
   253b6:	f013 0207 	ands.w	r2, r3, #7
   253ba:	d008      	beq.n	253ce <__lo0bits+0x1a>
   253bc:	07d9      	lsls	r1, r3, #31
   253be:	d41f      	bmi.n	25400 <__lo0bits+0x4c>
   253c0:	079a      	lsls	r2, r3, #30
   253c2:	d522      	bpl.n	2540a <__lo0bits+0x56>
   253c4:	085b      	lsrs	r3, r3, #1
   253c6:	6003      	str	r3, [r0, #0]
   253c8:	2201      	movs	r2, #1
   253ca:	4610      	mov	r0, r2
   253cc:	4770      	bx	lr
   253ce:	b299      	uxth	r1, r3
   253d0:	b909      	cbnz	r1, 253d6 <__lo0bits+0x22>
   253d2:	0c1b      	lsrs	r3, r3, #16
   253d4:	2210      	movs	r2, #16
   253d6:	b2d9      	uxtb	r1, r3
   253d8:	b909      	cbnz	r1, 253de <__lo0bits+0x2a>
   253da:	3208      	adds	r2, #8
   253dc:	0a1b      	lsrs	r3, r3, #8
   253de:	0719      	lsls	r1, r3, #28
   253e0:	bf04      	itt	eq
   253e2:	091b      	lsreq	r3, r3, #4
   253e4:	3204      	addeq	r2, #4
   253e6:	0799      	lsls	r1, r3, #30
   253e8:	bf04      	itt	eq
   253ea:	089b      	lsreq	r3, r3, #2
   253ec:	3202      	addeq	r2, #2
   253ee:	07d9      	lsls	r1, r3, #31
   253f0:	d403      	bmi.n	253fa <__lo0bits+0x46>
   253f2:	085b      	lsrs	r3, r3, #1
   253f4:	f102 0201 	add.w	r2, r2, #1
   253f8:	d005      	beq.n	25406 <__lo0bits+0x52>
   253fa:	6003      	str	r3, [r0, #0]
   253fc:	4610      	mov	r0, r2
   253fe:	4770      	bx	lr
   25400:	2200      	movs	r2, #0
   25402:	4610      	mov	r0, r2
   25404:	4770      	bx	lr
   25406:	2220      	movs	r2, #32
   25408:	e7df      	b.n	253ca <__lo0bits+0x16>
   2540a:	089b      	lsrs	r3, r3, #2
   2540c:	2202      	movs	r2, #2
   2540e:	6003      	str	r3, [r0, #0]
   25410:	4610      	mov	r0, r2
   25412:	4770      	bx	lr

00025414 <__i2b>:
   25414:	b538      	push	{r3, r4, r5, lr}
   25416:	6c43      	ldr	r3, [r0, #68]	; 0x44
   25418:	4604      	mov	r4, r0
   2541a:	460d      	mov	r5, r1
   2541c:	b14b      	cbz	r3, 25432 <__i2b+0x1e>
   2541e:	6858      	ldr	r0, [r3, #4]
   25420:	b1b0      	cbz	r0, 25450 <__i2b+0x3c>
   25422:	6802      	ldr	r2, [r0, #0]
   25424:	605a      	str	r2, [r3, #4]
   25426:	2200      	movs	r2, #0
   25428:	2301      	movs	r3, #1
   2542a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2542e:	60c2      	str	r2, [r0, #12]
   25430:	bd38      	pop	{r3, r4, r5, pc}
   25432:	2221      	movs	r2, #33	; 0x21
   25434:	2104      	movs	r1, #4
   25436:	f000 fad7 	bl	259e8 <_calloc_r>
   2543a:	4603      	mov	r3, r0
   2543c:	6460      	str	r0, [r4, #68]	; 0x44
   2543e:	2800      	cmp	r0, #0
   25440:	d1ed      	bne.n	2541e <__i2b+0xa>
   25442:	4b09      	ldr	r3, [pc, #36]	; (25468 <__i2b+0x54>)
   25444:	4809      	ldr	r0, [pc, #36]	; (2546c <__i2b+0x58>)
   25446:	2200      	movs	r2, #0
   25448:	f240 1145 	movw	r1, #325	; 0x145
   2544c:	f7ff fbae 	bl	24bac <__assert_func>
   25450:	221c      	movs	r2, #28
   25452:	2101      	movs	r1, #1
   25454:	4620      	mov	r0, r4
   25456:	f000 fac7 	bl	259e8 <_calloc_r>
   2545a:	2800      	cmp	r0, #0
   2545c:	d0f1      	beq.n	25442 <__i2b+0x2e>
   2545e:	2201      	movs	r2, #1
   25460:	2302      	movs	r3, #2
   25462:	e9c0 2301 	strd	r2, r3, [r0, #4]
   25466:	e7de      	b.n	25426 <__i2b+0x12>
   25468:	20004194 	.word	0x20004194
   2546c:	200041a8 	.word	0x200041a8

00025470 <__multiply>:
   25470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25474:	690e      	ldr	r6, [r1, #16]
   25476:	6915      	ldr	r5, [r2, #16]
   25478:	42ae      	cmp	r6, r5
   2547a:	b085      	sub	sp, #20
   2547c:	4688      	mov	r8, r1
   2547e:	4614      	mov	r4, r2
   25480:	db05      	blt.n	2548e <__multiply+0x1e>
   25482:	462a      	mov	r2, r5
   25484:	4623      	mov	r3, r4
   25486:	4635      	mov	r5, r6
   25488:	460c      	mov	r4, r1
   2548a:	4616      	mov	r6, r2
   2548c:	4698      	mov	r8, r3
   2548e:	68a3      	ldr	r3, [r4, #8]
   25490:	6861      	ldr	r1, [r4, #4]
   25492:	19af      	adds	r7, r5, r6
   25494:	42bb      	cmp	r3, r7
   25496:	bfb8      	it	lt
   25498:	3101      	addlt	r1, #1
   2549a:	f7ff fee9 	bl	25270 <_Balloc>
   2549e:	9001      	str	r0, [sp, #4]
   254a0:	2800      	cmp	r0, #0
   254a2:	f000 8087 	beq.w	255b4 <__multiply+0x144>
   254a6:	9b01      	ldr	r3, [sp, #4]
   254a8:	f103 0914 	add.w	r9, r3, #20
   254ac:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   254b0:	45d1      	cmp	r9, sl
   254b2:	d205      	bcs.n	254c0 <__multiply+0x50>
   254b4:	464b      	mov	r3, r9
   254b6:	2200      	movs	r2, #0
   254b8:	f843 2b04 	str.w	r2, [r3], #4
   254bc:	459a      	cmp	sl, r3
   254be:	d8fb      	bhi.n	254b8 <__multiply+0x48>
   254c0:	f108 0814 	add.w	r8, r8, #20
   254c4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   254c8:	f104 0314 	add.w	r3, r4, #20
   254cc:	45d8      	cmp	r8, fp
   254ce:	461a      	mov	r2, r3
   254d0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   254d4:	d25f      	bcs.n	25596 <__multiply+0x126>
   254d6:	1b2b      	subs	r3, r5, r4
   254d8:	3b15      	subs	r3, #21
   254da:	f023 0303 	bic.w	r3, r3, #3
   254de:	3304      	adds	r3, #4
   254e0:	3415      	adds	r4, #21
   254e2:	42a5      	cmp	r5, r4
   254e4:	bf38      	it	cc
   254e6:	2304      	movcc	r3, #4
   254e8:	e9cd a702 	strd	sl, r7, [sp, #8]
   254ec:	46ac      	mov	ip, r5
   254ee:	461f      	mov	r7, r3
   254f0:	4692      	mov	sl, r2
   254f2:	e005      	b.n	25500 <__multiply+0x90>
   254f4:	0c09      	lsrs	r1, r1, #16
   254f6:	d129      	bne.n	2554c <__multiply+0xdc>
   254f8:	45c3      	cmp	fp, r8
   254fa:	f109 0904 	add.w	r9, r9, #4
   254fe:	d948      	bls.n	25592 <__multiply+0x122>
   25500:	f858 1b04 	ldr.w	r1, [r8], #4
   25504:	b28d      	uxth	r5, r1
   25506:	2d00      	cmp	r5, #0
   25508:	d0f4      	beq.n	254f4 <__multiply+0x84>
   2550a:	4656      	mov	r6, sl
   2550c:	464c      	mov	r4, r9
   2550e:	2300      	movs	r3, #0
   25510:	f856 1b04 	ldr.w	r1, [r6], #4
   25514:	6822      	ldr	r2, [r4, #0]
   25516:	fa1f fe81 	uxth.w	lr, r1
   2551a:	b290      	uxth	r0, r2
   2551c:	0c09      	lsrs	r1, r1, #16
   2551e:	fb05 000e 	mla	r0, r5, lr, r0
   25522:	0c12      	lsrs	r2, r2, #16
   25524:	4403      	add	r3, r0
   25526:	fb05 2201 	mla	r2, r5, r1, r2
   2552a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   2552e:	b29b      	uxth	r3, r3
   25530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25534:	45b4      	cmp	ip, r6
   25536:	f844 3b04 	str.w	r3, [r4], #4
   2553a:	ea4f 4312 	mov.w	r3, r2, lsr #16
   2553e:	d8e7      	bhi.n	25510 <__multiply+0xa0>
   25540:	f849 3007 	str.w	r3, [r9, r7]
   25544:	f858 1c04 	ldr.w	r1, [r8, #-4]
   25548:	0c09      	lsrs	r1, r1, #16
   2554a:	d0d5      	beq.n	254f8 <__multiply+0x88>
   2554c:	f8d9 3000 	ldr.w	r3, [r9]
   25550:	4650      	mov	r0, sl
   25552:	461a      	mov	r2, r3
   25554:	464c      	mov	r4, r9
   25556:	2600      	movs	r6, #0
   25558:	8805      	ldrh	r5, [r0, #0]
   2555a:	0c12      	lsrs	r2, r2, #16
   2555c:	fb01 2205 	mla	r2, r1, r5, r2
   25560:	4416      	add	r6, r2
   25562:	b29b      	uxth	r3, r3
   25564:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   25568:	f844 3b04 	str.w	r3, [r4], #4
   2556c:	f850 5b04 	ldr.w	r5, [r0], #4
   25570:	6822      	ldr	r2, [r4, #0]
   25572:	0c2d      	lsrs	r5, r5, #16
   25574:	b293      	uxth	r3, r2
   25576:	fb01 3305 	mla	r3, r1, r5, r3
   2557a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   2557e:	4584      	cmp	ip, r0
   25580:	ea4f 4613 	mov.w	r6, r3, lsr #16
   25584:	d8e8      	bhi.n	25558 <__multiply+0xe8>
   25586:	45c3      	cmp	fp, r8
   25588:	f849 3007 	str.w	r3, [r9, r7]
   2558c:	f109 0904 	add.w	r9, r9, #4
   25590:	d8b6      	bhi.n	25500 <__multiply+0x90>
   25592:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   25596:	2f00      	cmp	r7, #0
   25598:	dc02      	bgt.n	255a0 <__multiply+0x130>
   2559a:	e005      	b.n	255a8 <__multiply+0x138>
   2559c:	3f01      	subs	r7, #1
   2559e:	d003      	beq.n	255a8 <__multiply+0x138>
   255a0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   255a4:	2b00      	cmp	r3, #0
   255a6:	d0f9      	beq.n	2559c <__multiply+0x12c>
   255a8:	9b01      	ldr	r3, [sp, #4]
   255aa:	4618      	mov	r0, r3
   255ac:	611f      	str	r7, [r3, #16]
   255ae:	b005      	add	sp, #20
   255b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255b4:	4b03      	ldr	r3, [pc, #12]	; (255c4 <__multiply+0x154>)
   255b6:	4804      	ldr	r0, [pc, #16]	; (255c8 <__multiply+0x158>)
   255b8:	9a01      	ldr	r2, [sp, #4]
   255ba:	f44f 71b1 	mov.w	r1, #354	; 0x162
   255be:	f7ff faf5 	bl	24bac <__assert_func>
   255c2:	bf00      	nop
   255c4:	20004194 	.word	0x20004194
   255c8:	200041a8 	.word	0x200041a8

000255cc <__pow5mult>:
   255cc:	f012 0303 	ands.w	r3, r2, #3
   255d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255d4:	4614      	mov	r4, r2
   255d6:	4606      	mov	r6, r0
   255d8:	d132      	bne.n	25640 <__pow5mult+0x74>
   255da:	460d      	mov	r5, r1
   255dc:	10a4      	asrs	r4, r4, #2
   255de:	d020      	beq.n	25622 <__pow5mult+0x56>
   255e0:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   255e4:	f1b8 0f00 	cmp.w	r8, #0
   255e8:	d033      	beq.n	25652 <__pow5mult+0x86>
   255ea:	07e3      	lsls	r3, r4, #31
   255ec:	f04f 0700 	mov.w	r7, #0
   255f0:	d407      	bmi.n	25602 <__pow5mult+0x36>
   255f2:	1064      	asrs	r4, r4, #1
   255f4:	d015      	beq.n	25622 <__pow5mult+0x56>
   255f6:	f8d8 0000 	ldr.w	r0, [r8]
   255fa:	b1a8      	cbz	r0, 25628 <__pow5mult+0x5c>
   255fc:	4680      	mov	r8, r0
   255fe:	07e3      	lsls	r3, r4, #31
   25600:	d5f7      	bpl.n	255f2 <__pow5mult+0x26>
   25602:	4642      	mov	r2, r8
   25604:	4629      	mov	r1, r5
   25606:	4630      	mov	r0, r6
   25608:	f7ff ff32 	bl	25470 <__multiply>
   2560c:	b1b5      	cbz	r5, 2563c <__pow5mult+0x70>
   2560e:	6869      	ldr	r1, [r5, #4]
   25610:	6c73      	ldr	r3, [r6, #68]	; 0x44
   25612:	1064      	asrs	r4, r4, #1
   25614:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   25618:	602a      	str	r2, [r5, #0]
   2561a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   2561e:	4605      	mov	r5, r0
   25620:	d1e9      	bne.n	255f6 <__pow5mult+0x2a>
   25622:	4628      	mov	r0, r5
   25624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25628:	4642      	mov	r2, r8
   2562a:	4641      	mov	r1, r8
   2562c:	4630      	mov	r0, r6
   2562e:	f7ff ff1f 	bl	25470 <__multiply>
   25632:	f8c8 0000 	str.w	r0, [r8]
   25636:	6007      	str	r7, [r0, #0]
   25638:	4680      	mov	r8, r0
   2563a:	e7e0      	b.n	255fe <__pow5mult+0x32>
   2563c:	4605      	mov	r5, r0
   2563e:	e7d8      	b.n	255f2 <__pow5mult+0x26>
   25640:	3b01      	subs	r3, #1
   25642:	4a0f      	ldr	r2, [pc, #60]	; (25680 <__pow5mult+0xb4>)
   25644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   25648:	2300      	movs	r3, #0
   2564a:	f7ff fe41 	bl	252d0 <__multadd>
   2564e:	4605      	mov	r5, r0
   25650:	e7c4      	b.n	255dc <__pow5mult+0x10>
   25652:	2101      	movs	r1, #1
   25654:	4630      	mov	r0, r6
   25656:	f7ff fe0b 	bl	25270 <_Balloc>
   2565a:	4680      	mov	r8, r0
   2565c:	b140      	cbz	r0, 25670 <__pow5mult+0xa4>
   2565e:	2301      	movs	r3, #1
   25660:	f240 2271 	movw	r2, #625	; 0x271
   25664:	e9c0 3204 	strd	r3, r2, [r0, #16]
   25668:	2300      	movs	r3, #0
   2566a:	6430      	str	r0, [r6, #64]	; 0x40
   2566c:	6003      	str	r3, [r0, #0]
   2566e:	e7bc      	b.n	255ea <__pow5mult+0x1e>
   25670:	4b04      	ldr	r3, [pc, #16]	; (25684 <__pow5mult+0xb8>)
   25672:	4805      	ldr	r0, [pc, #20]	; (25688 <__pow5mult+0xbc>)
   25674:	4642      	mov	r2, r8
   25676:	f240 1145 	movw	r1, #325	; 0x145
   2567a:	f7ff fa97 	bl	24bac <__assert_func>
   2567e:	bf00      	nop
   25680:	20005208 	.word	0x20005208
   25684:	20004194 	.word	0x20004194
   25688:	200041a8 	.word	0x200041a8

0002568c <__lshift>:
   2568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25690:	460d      	mov	r5, r1
   25692:	4614      	mov	r4, r2
   25694:	692f      	ldr	r7, [r5, #16]
   25696:	68ab      	ldr	r3, [r5, #8]
   25698:	6849      	ldr	r1, [r1, #4]
   2569a:	eb07 1762 	add.w	r7, r7, r2, asr #5
   2569e:	1c7e      	adds	r6, r7, #1
   256a0:	429e      	cmp	r6, r3
   256a2:	4680      	mov	r8, r0
   256a4:	ea4f 1962 	mov.w	r9, r2, asr #5
   256a8:	dd04      	ble.n	256b4 <__lshift+0x28>
   256aa:	005b      	lsls	r3, r3, #1
   256ac:	429e      	cmp	r6, r3
   256ae:	f101 0101 	add.w	r1, r1, #1
   256b2:	dcfa      	bgt.n	256aa <__lshift+0x1e>
   256b4:	4640      	mov	r0, r8
   256b6:	f7ff fddb 	bl	25270 <_Balloc>
   256ba:	4684      	mov	ip, r0
   256bc:	2800      	cmp	r0, #0
   256be:	d052      	beq.n	25766 <__lshift+0xda>
   256c0:	f1b9 0f00 	cmp.w	r9, #0
   256c4:	f100 0214 	add.w	r2, r0, #20
   256c8:	dd0e      	ble.n	256e8 <__lshift+0x5c>
   256ca:	f109 0105 	add.w	r1, r9, #5
   256ce:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   256d2:	4613      	mov	r3, r2
   256d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   256d8:	2000      	movs	r0, #0
   256da:	f843 0b04 	str.w	r0, [r3], #4
   256de:	428b      	cmp	r3, r1
   256e0:	d1fb      	bne.n	256da <__lshift+0x4e>
   256e2:	f1ae 0314 	sub.w	r3, lr, #20
   256e6:	441a      	add	r2, r3
   256e8:	6929      	ldr	r1, [r5, #16]
   256ea:	f105 0314 	add.w	r3, r5, #20
   256ee:	f014 0e1f 	ands.w	lr, r4, #31
   256f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   256f6:	d02e      	beq.n	25756 <__lshift+0xca>
   256f8:	f1ce 0920 	rsb	r9, lr, #32
   256fc:	4610      	mov	r0, r2
   256fe:	f04f 0a00 	mov.w	sl, #0
   25702:	681c      	ldr	r4, [r3, #0]
   25704:	fa04 f40e 	lsl.w	r4, r4, lr
   25708:	ea44 040a 	orr.w	r4, r4, sl
   2570c:	f840 4b04 	str.w	r4, [r0], #4
   25710:	f853 4b04 	ldr.w	r4, [r3], #4
   25714:	4299      	cmp	r1, r3
   25716:	fa24 fa09 	lsr.w	sl, r4, r9
   2571a:	d8f2      	bhi.n	25702 <__lshift+0x76>
   2571c:	1b4b      	subs	r3, r1, r5
   2571e:	3b15      	subs	r3, #21
   25720:	f023 0303 	bic.w	r3, r3, #3
   25724:	3304      	adds	r3, #4
   25726:	f105 0015 	add.w	r0, r5, #21
   2572a:	4281      	cmp	r1, r0
   2572c:	bf38      	it	cc
   2572e:	2304      	movcc	r3, #4
   25730:	f1ba 0f00 	cmp.w	sl, #0
   25734:	bf18      	it	ne
   25736:	4637      	movne	r7, r6
   25738:	f842 a003 	str.w	sl, [r2, r3]
   2573c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   25740:	686a      	ldr	r2, [r5, #4]
   25742:	f8cc 7010 	str.w	r7, [ip, #16]
   25746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2574a:	6029      	str	r1, [r5, #0]
   2574c:	4660      	mov	r0, ip
   2574e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   25752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25756:	3a04      	subs	r2, #4
   25758:	f853 0b04 	ldr.w	r0, [r3], #4
   2575c:	f842 0f04 	str.w	r0, [r2, #4]!
   25760:	4299      	cmp	r1, r3
   25762:	d8f9      	bhi.n	25758 <__lshift+0xcc>
   25764:	e7ea      	b.n	2573c <__lshift+0xb0>
   25766:	4b03      	ldr	r3, [pc, #12]	; (25774 <__lshift+0xe8>)
   25768:	4803      	ldr	r0, [pc, #12]	; (25778 <__lshift+0xec>)
   2576a:	4662      	mov	r2, ip
   2576c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   25770:	f7ff fa1c 	bl	24bac <__assert_func>
   25774:	20004194 	.word	0x20004194
   25778:	200041a8 	.word	0x200041a8

0002577c <__mcmp>:
   2577c:	690b      	ldr	r3, [r1, #16]
   2577e:	4684      	mov	ip, r0
   25780:	6900      	ldr	r0, [r0, #16]
   25782:	1ac0      	subs	r0, r0, r3
   25784:	d116      	bne.n	257b4 <__mcmp+0x38>
   25786:	f10c 0c14 	add.w	ip, ip, #20
   2578a:	3114      	adds	r1, #20
   2578c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   25790:	b410      	push	{r4}
   25792:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   25796:	e001      	b.n	2579c <__mcmp+0x20>
   25798:	4594      	cmp	ip, r2
   2579a:	d208      	bcs.n	257ae <__mcmp+0x32>
   2579c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   257a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   257a4:	428c      	cmp	r4, r1
   257a6:	d0f7      	beq.n	25798 <__mcmp+0x1c>
   257a8:	d205      	bcs.n	257b6 <__mcmp+0x3a>
   257aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   257ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   257b2:	4770      	bx	lr
   257b4:	4770      	bx	lr
   257b6:	2001      	movs	r0, #1
   257b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   257bc:	4770      	bx	lr
   257be:	bf00      	nop

000257c0 <__mdiff>:
   257c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257c4:	690f      	ldr	r7, [r1, #16]
   257c6:	6913      	ldr	r3, [r2, #16]
   257c8:	1aff      	subs	r7, r7, r3
   257ca:	2f00      	cmp	r7, #0
   257cc:	460e      	mov	r6, r1
   257ce:	4690      	mov	r8, r2
   257d0:	d17f      	bne.n	258d2 <__mdiff+0x112>
   257d2:	f101 0514 	add.w	r5, r1, #20
   257d6:	3214      	adds	r2, #20
   257d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   257dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   257e0:	e001      	b.n	257e6 <__mdiff+0x26>
   257e2:	429d      	cmp	r5, r3
   257e4:	d278      	bcs.n	258d8 <__mdiff+0x118>
   257e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   257ea:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   257ee:	42a1      	cmp	r1, r4
   257f0:	d0f7      	beq.n	257e2 <__mdiff+0x22>
   257f2:	d369      	bcc.n	258c8 <__mdiff+0x108>
   257f4:	6871      	ldr	r1, [r6, #4]
   257f6:	f7ff fd3b 	bl	25270 <_Balloc>
   257fa:	4681      	mov	r9, r0
   257fc:	2800      	cmp	r0, #0
   257fe:	d077      	beq.n	258f0 <__mdiff+0x130>
   25800:	6935      	ldr	r5, [r6, #16]
   25802:	f8d8 2010 	ldr.w	r2, [r8, #16]
   25806:	60c7      	str	r7, [r0, #12]
   25808:	f108 0e14 	add.w	lr, r8, #20
   2580c:	f106 0014 	add.w	r0, r6, #20
   25810:	f109 0a14 	add.w	sl, r9, #20
   25814:	f106 0110 	add.w	r1, r6, #16
   25818:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   2581c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   25820:	4656      	mov	r6, sl
   25822:	f04f 0c00 	mov.w	ip, #0
   25826:	f85e 4b04 	ldr.w	r4, [lr], #4
   2582a:	f851 bf04 	ldr.w	fp, [r1, #4]!
   2582e:	b2a3      	uxth	r3, r4
   25830:	fa1c fc8b 	uxtah	ip, ip, fp
   25834:	ebac 0303 	sub.w	r3, ip, r3
   25838:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   2583c:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   25840:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   25844:	b29b      	uxth	r3, r3
   25846:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   2584a:	4572      	cmp	r2, lr
   2584c:	f846 3b04 	str.w	r3, [r6], #4
   25850:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   25854:	d8e7      	bhi.n	25826 <__mdiff+0x66>
   25856:	eba2 0108 	sub.w	r1, r2, r8
   2585a:	3915      	subs	r1, #21
   2585c:	f108 0815 	add.w	r8, r8, #21
   25860:	4542      	cmp	r2, r8
   25862:	f021 0403 	bic.w	r4, r1, #3
   25866:	f104 0404 	add.w	r4, r4, #4
   2586a:	bf38      	it	cc
   2586c:	2404      	movcc	r4, #4
   2586e:	4420      	add	r0, r4
   25870:	f021 0203 	bic.w	r2, r1, #3
   25874:	bf38      	it	cc
   25876:	2200      	movcc	r2, #0
   25878:	4287      	cmp	r7, r0
   2587a:	4452      	add	r2, sl
   2587c:	4454      	add	r4, sl
   2587e:	d918      	bls.n	258b2 <__mdiff+0xf2>
   25880:	4626      	mov	r6, r4
   25882:	4601      	mov	r1, r0
   25884:	f851 3b04 	ldr.w	r3, [r1], #4
   25888:	fa1c fc83 	uxtah	ip, ip, r3
   2588c:	ea4f 422c 	mov.w	r2, ip, asr #16
   25890:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   25894:	fa1f fc8c 	uxth.w	ip, ip
   25898:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   2589c:	428f      	cmp	r7, r1
   2589e:	f846 3b04 	str.w	r3, [r6], #4
   258a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
   258a6:	d8ed      	bhi.n	25884 <__mdiff+0xc4>
   258a8:	3f01      	subs	r7, #1
   258aa:	1a3f      	subs	r7, r7, r0
   258ac:	f027 0703 	bic.w	r7, r7, #3
   258b0:	19e2      	adds	r2, r4, r7
   258b2:	b923      	cbnz	r3, 258be <__mdiff+0xfe>
   258b4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   258b8:	3d01      	subs	r5, #1
   258ba:	2b00      	cmp	r3, #0
   258bc:	d0fa      	beq.n	258b4 <__mdiff+0xf4>
   258be:	f8c9 5010 	str.w	r5, [r9, #16]
   258c2:	4648      	mov	r0, r9
   258c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258c8:	4633      	mov	r3, r6
   258ca:	2701      	movs	r7, #1
   258cc:	4646      	mov	r6, r8
   258ce:	4698      	mov	r8, r3
   258d0:	e790      	b.n	257f4 <__mdiff+0x34>
   258d2:	dbf9      	blt.n	258c8 <__mdiff+0x108>
   258d4:	2700      	movs	r7, #0
   258d6:	e78d      	b.n	257f4 <__mdiff+0x34>
   258d8:	2100      	movs	r1, #0
   258da:	f7ff fcc9 	bl	25270 <_Balloc>
   258de:	4681      	mov	r9, r0
   258e0:	b168      	cbz	r0, 258fe <__mdiff+0x13e>
   258e2:	2201      	movs	r2, #1
   258e4:	2300      	movs	r3, #0
   258e6:	e9c9 2304 	strd	r2, r3, [r9, #16]
   258ea:	4648      	mov	r0, r9
   258ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258f0:	4b06      	ldr	r3, [pc, #24]	; (2590c <__mdiff+0x14c>)
   258f2:	4807      	ldr	r0, [pc, #28]	; (25910 <__mdiff+0x150>)
   258f4:	464a      	mov	r2, r9
   258f6:	f240 2145 	movw	r1, #581	; 0x245
   258fa:	f7ff f957 	bl	24bac <__assert_func>
   258fe:	4b03      	ldr	r3, [pc, #12]	; (2590c <__mdiff+0x14c>)
   25900:	4803      	ldr	r0, [pc, #12]	; (25910 <__mdiff+0x150>)
   25902:	464a      	mov	r2, r9
   25904:	f240 2137 	movw	r1, #567	; 0x237
   25908:	f7ff f950 	bl	24bac <__assert_func>
   2590c:	20004194 	.word	0x20004194
   25910:	200041a8 	.word	0x200041a8

00025914 <__d2b>:
   25914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25918:	4688      	mov	r8, r1
   2591a:	b083      	sub	sp, #12
   2591c:	2101      	movs	r1, #1
   2591e:	ec57 6b10 	vmov	r6, r7, d0
   25922:	4615      	mov	r5, r2
   25924:	f7ff fca4 	bl	25270 <_Balloc>
   25928:	4604      	mov	r4, r0
   2592a:	2800      	cmp	r0, #0
   2592c:	d051      	beq.n	259d2 <__d2b+0xbe>
   2592e:	f3c7 590a 	ubfx	r9, r7, #20, #11
   25932:	f3c7 0313 	ubfx	r3, r7, #0, #20
   25936:	f1b9 0f00 	cmp.w	r9, #0
   2593a:	d001      	beq.n	25940 <__d2b+0x2c>
   2593c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25940:	2e00      	cmp	r6, #0
   25942:	9301      	str	r3, [sp, #4]
   25944:	d118      	bne.n	25978 <__d2b+0x64>
   25946:	a801      	add	r0, sp, #4
   25948:	f7ff fd34 	bl	253b4 <__lo0bits>
   2594c:	9a01      	ldr	r2, [sp, #4]
   2594e:	6162      	str	r2, [r4, #20]
   25950:	2201      	movs	r2, #1
   25952:	f100 0320 	add.w	r3, r0, #32
   25956:	6122      	str	r2, [r4, #16]
   25958:	f1b9 0f00 	cmp.w	r9, #0
   2595c:	d025      	beq.n	259aa <__d2b+0x96>
   2595e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   25962:	eb09 0203 	add.w	r2, r9, r3
   25966:	4620      	mov	r0, r4
   25968:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   2596c:	f8c8 2000 	str.w	r2, [r8]
   25970:	602b      	str	r3, [r5, #0]
   25972:	b003      	add	sp, #12
   25974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25978:	4668      	mov	r0, sp
   2597a:	9600      	str	r6, [sp, #0]
   2597c:	f7ff fd1a 	bl	253b4 <__lo0bits>
   25980:	4603      	mov	r3, r0
   25982:	b310      	cbz	r0, 259ca <__d2b+0xb6>
   25984:	e9dd 0200 	ldrd	r0, r2, [sp]
   25988:	f1c3 0120 	rsb	r1, r3, #32
   2598c:	fa02 f101 	lsl.w	r1, r2, r1
   25990:	4301      	orrs	r1, r0
   25992:	40da      	lsrs	r2, r3
   25994:	6161      	str	r1, [r4, #20]
   25996:	9201      	str	r2, [sp, #4]
   25998:	2a00      	cmp	r2, #0
   2599a:	61a2      	str	r2, [r4, #24]
   2599c:	bf14      	ite	ne
   2599e:	2202      	movne	r2, #2
   259a0:	2201      	moveq	r2, #1
   259a2:	6122      	str	r2, [r4, #16]
   259a4:	f1b9 0f00 	cmp.w	r9, #0
   259a8:	d1d9      	bne.n	2595e <__d2b+0x4a>
   259aa:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   259ae:	f8c8 3000 	str.w	r3, [r8]
   259b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   259b6:	6918      	ldr	r0, [r3, #16]
   259b8:	f7ff fcdc 	bl	25374 <__hi0bits>
   259bc:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   259c0:	4620      	mov	r0, r4
   259c2:	602b      	str	r3, [r5, #0]
   259c4:	b003      	add	sp, #12
   259c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   259ca:	9a00      	ldr	r2, [sp, #0]
   259cc:	6162      	str	r2, [r4, #20]
   259ce:	9a01      	ldr	r2, [sp, #4]
   259d0:	e7e2      	b.n	25998 <__d2b+0x84>
   259d2:	4b03      	ldr	r3, [pc, #12]	; (259e0 <__d2b+0xcc>)
   259d4:	4803      	ldr	r0, [pc, #12]	; (259e4 <__d2b+0xd0>)
   259d6:	4622      	mov	r2, r4
   259d8:	f240 310f 	movw	r1, #783	; 0x30f
   259dc:	f7ff f8e6 	bl	24bac <__assert_func>
   259e0:	20004194 	.word	0x20004194
   259e4:	200041a8 	.word	0x200041a8

000259e8 <_calloc_r>:
   259e8:	b538      	push	{r3, r4, r5, lr}
   259ea:	fba1 1402 	umull	r1, r4, r1, r2
   259ee:	bb8c      	cbnz	r4, 25a54 <_calloc_r+0x6c>
   259f0:	f7fe fd80 	bl	244f4 <_malloc_r>
   259f4:	4605      	mov	r5, r0
   259f6:	b1e0      	cbz	r0, 25a32 <_calloc_r+0x4a>
   259f8:	f850 2c04 	ldr.w	r2, [r0, #-4]
   259fc:	f022 0203 	bic.w	r2, r2, #3
   25a00:	3a04      	subs	r2, #4
   25a02:	2a24      	cmp	r2, #36	; 0x24
   25a04:	d817      	bhi.n	25a36 <_calloc_r+0x4e>
   25a06:	2a13      	cmp	r2, #19
   25a08:	d91a      	bls.n	25a40 <_calloc_r+0x58>
   25a0a:	2a1b      	cmp	r2, #27
   25a0c:	e9c0 4400 	strd	r4, r4, [r0]
   25a10:	d91d      	bls.n	25a4e <_calloc_r+0x66>
   25a12:	2a24      	cmp	r2, #36	; 0x24
   25a14:	bf14      	ite	ne
   25a16:	f100 0210 	addne.w	r2, r0, #16
   25a1a:	f100 0218 	addeq.w	r2, r0, #24
   25a1e:	f04f 0300 	mov.w	r3, #0
   25a22:	e9c0 4402 	strd	r4, r4, [r0, #8]
   25a26:	bf04      	itt	eq
   25a28:	6104      	streq	r4, [r0, #16]
   25a2a:	6144      	streq	r4, [r0, #20]
   25a2c:	e9c2 3300 	strd	r3, r3, [r2]
   25a30:	6093      	str	r3, [r2, #8]
   25a32:	4628      	mov	r0, r5
   25a34:	bd38      	pop	{r3, r4, r5, pc}
   25a36:	4621      	mov	r1, r4
   25a38:	f7ff f8d8 	bl	24bec <memset>
   25a3c:	4628      	mov	r0, r5
   25a3e:	bd38      	pop	{r3, r4, r5, pc}
   25a40:	4602      	mov	r2, r0
   25a42:	2300      	movs	r3, #0
   25a44:	e9c2 3300 	strd	r3, r3, [r2]
   25a48:	6093      	str	r3, [r2, #8]
   25a4a:	4628      	mov	r0, r5
   25a4c:	bd38      	pop	{r3, r4, r5, pc}
   25a4e:	f100 0208 	add.w	r2, r0, #8
   25a52:	e7f6      	b.n	25a42 <_calloc_r+0x5a>
   25a54:	f7fc ff5e 	bl	22914 <__errno>
   25a58:	230c      	movs	r3, #12
   25a5a:	2500      	movs	r5, #0
   25a5c:	6003      	str	r3, [r0, #0]
   25a5e:	e7e8      	b.n	25a32 <_calloc_r+0x4a>

00025a60 <realloc>:
   25a60:	b410      	push	{r4}
   25a62:	4c04      	ldr	r4, [pc, #16]	; (25a74 <realloc+0x14>)
   25a64:	4603      	mov	r3, r0
   25a66:	460a      	mov	r2, r1
   25a68:	6820      	ldr	r0, [r4, #0]
   25a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   25a6e:	4619      	mov	r1, r3
   25a70:	f001 b9b2 	b.w	26dd8 <_realloc_r>
   25a74:	20005fe4 	.word	0x20005fe4

00025a78 <_wcsrtombs_r>:
   25a78:	b510      	push	{r4, lr}
   25a7a:	b082      	sub	sp, #8
   25a7c:	9c04      	ldr	r4, [sp, #16]
   25a7e:	e9cd 3400 	strd	r3, r4, [sp]
   25a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25a86:	f003 f80b 	bl	28aa0 <_wcsnrtombs_r>
   25a8a:	b002      	add	sp, #8
   25a8c:	bd10      	pop	{r4, pc}
   25a8e:	bf00      	nop

00025a90 <quorem>:
   25a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a94:	6903      	ldr	r3, [r0, #16]
   25a96:	690c      	ldr	r4, [r1, #16]
   25a98:	42a3      	cmp	r3, r4
   25a9a:	b083      	sub	sp, #12
   25a9c:	f2c0 8087 	blt.w	25bae <quorem+0x11e>
   25aa0:	3c01      	subs	r4, #1
   25aa2:	f101 0514 	add.w	r5, r1, #20
   25aa6:	00a3      	lsls	r3, r4, #2
   25aa8:	f100 0814 	add.w	r8, r0, #20
   25aac:	9300      	str	r3, [sp, #0]
   25aae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   25ab2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   25ab6:	3301      	adds	r3, #1
   25ab8:	4681      	mov	r9, r0
   25aba:	429a      	cmp	r2, r3
   25abc:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   25ac0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   25ac4:	9001      	str	r0, [sp, #4]
   25ac6:	fbb2 f6f3 	udiv	r6, r2, r3
   25aca:	d33b      	bcc.n	25b44 <quorem+0xb4>
   25acc:	f04f 0c00 	mov.w	ip, #0
   25ad0:	46ae      	mov	lr, r5
   25ad2:	4640      	mov	r0, r8
   25ad4:	46e2      	mov	sl, ip
   25ad6:	4663      	mov	r3, ip
   25ad8:	f85e bb04 	ldr.w	fp, [lr], #4
   25adc:	6802      	ldr	r2, [r0, #0]
   25ade:	fa1f fc8b 	uxth.w	ip, fp
   25ae2:	fb06 330c 	mla	r3, r6, ip, r3
   25ae6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   25aea:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   25aee:	fb06 cc0b 	mla	ip, r6, fp, ip
   25af2:	b29b      	uxth	r3, r3
   25af4:	ebaa 0303 	sub.w	r3, sl, r3
   25af8:	fa1f fa8c 	uxth.w	sl, ip
   25afc:	fa13 f382 	uxtah	r3, r3, r2
   25b00:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   25b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
   25b08:	b29b      	uxth	r3, r3
   25b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25b0e:	4577      	cmp	r7, lr
   25b10:	f840 3b04 	str.w	r3, [r0], #4
   25b14:	ea4f 4a22 	mov.w	sl, r2, asr #16
   25b18:	ea4f 431c 	mov.w	r3, ip, lsr #16
   25b1c:	d2dc      	bcs.n	25ad8 <quorem+0x48>
   25b1e:	9b00      	ldr	r3, [sp, #0]
   25b20:	f858 3003 	ldr.w	r3, [r8, r3]
   25b24:	b973      	cbnz	r3, 25b44 <quorem+0xb4>
   25b26:	9b01      	ldr	r3, [sp, #4]
   25b28:	3b04      	subs	r3, #4
   25b2a:	4598      	cmp	r8, r3
   25b2c:	d304      	bcc.n	25b38 <quorem+0xa8>
   25b2e:	e007      	b.n	25b40 <quorem+0xb0>
   25b30:	4598      	cmp	r8, r3
   25b32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   25b36:	d203      	bcs.n	25b40 <quorem+0xb0>
   25b38:	f853 2904 	ldr.w	r2, [r3], #-4
   25b3c:	2a00      	cmp	r2, #0
   25b3e:	d0f7      	beq.n	25b30 <quorem+0xa0>
   25b40:	f8c9 4010 	str.w	r4, [r9, #16]
   25b44:	4648      	mov	r0, r9
   25b46:	f7ff fe19 	bl	2577c <__mcmp>
   25b4a:	2800      	cmp	r0, #0
   25b4c:	db2b      	blt.n	25ba6 <quorem+0x116>
   25b4e:	3601      	adds	r6, #1
   25b50:	4641      	mov	r1, r8
   25b52:	2300      	movs	r3, #0
   25b54:	f855 0b04 	ldr.w	r0, [r5], #4
   25b58:	f8d1 c000 	ldr.w	ip, [r1]
   25b5c:	b282      	uxth	r2, r0
   25b5e:	1a9a      	subs	r2, r3, r2
   25b60:	0c03      	lsrs	r3, r0, #16
   25b62:	fa12 f28c 	uxtah	r2, r2, ip
   25b66:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   25b6a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   25b6e:	b292      	uxth	r2, r2
   25b70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   25b74:	42af      	cmp	r7, r5
   25b76:	f841 2b04 	str.w	r2, [r1], #4
   25b7a:	ea4f 4323 	mov.w	r3, r3, asr #16
   25b7e:	d2e9      	bcs.n	25b54 <quorem+0xc4>
   25b80:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   25b84:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   25b88:	b96a      	cbnz	r2, 25ba6 <quorem+0x116>
   25b8a:	3b04      	subs	r3, #4
   25b8c:	4598      	cmp	r8, r3
   25b8e:	d304      	bcc.n	25b9a <quorem+0x10a>
   25b90:	e007      	b.n	25ba2 <quorem+0x112>
   25b92:	4598      	cmp	r8, r3
   25b94:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   25b98:	d203      	bcs.n	25ba2 <quorem+0x112>
   25b9a:	f853 2904 	ldr.w	r2, [r3], #-4
   25b9e:	2a00      	cmp	r2, #0
   25ba0:	d0f7      	beq.n	25b92 <quorem+0x102>
   25ba2:	f8c9 4010 	str.w	r4, [r9, #16]
   25ba6:	4630      	mov	r0, r6
   25ba8:	b003      	add	sp, #12
   25baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bae:	2000      	movs	r0, #0
   25bb0:	b003      	add	sp, #12
   25bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bb6:	bf00      	nop

00025bb8 <_dtoa_r>:
   25bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bbc:	ed2d 8b02 	vpush	{d8}
   25bc0:	b08f      	sub	sp, #60	; 0x3c
   25bc2:	ed8d 0b02 	vstr	d0, [sp, #8]
   25bc6:	9101      	str	r1, [sp, #4]
   25bc8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   25bca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   25bcc:	9305      	str	r3, [sp, #20]
   25bce:	ec57 6b10 	vmov	r6, r7, d0
   25bd2:	4604      	mov	r4, r0
   25bd4:	4693      	mov	fp, r2
   25bd6:	b141      	cbz	r1, 25bea <_dtoa_r+0x32>
   25bd8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   25bda:	604a      	str	r2, [r1, #4]
   25bdc:	2301      	movs	r3, #1
   25bde:	4093      	lsls	r3, r2
   25be0:	608b      	str	r3, [r1, #8]
   25be2:	f7ff fb6b 	bl	252bc <_Bfree>
   25be6:	2300      	movs	r3, #0
   25be8:	63a3      	str	r3, [r4, #56]	; 0x38
   25bea:	f1b7 0800 	subs.w	r8, r7, #0
   25bee:	bfb4      	ite	lt
   25bf0:	2301      	movlt	r3, #1
   25bf2:	2300      	movge	r3, #0
   25bf4:	602b      	str	r3, [r5, #0]
   25bf6:	4bbe      	ldr	r3, [pc, #760]	; (25ef0 <_dtoa_r+0x338>)
   25bf8:	bfbc      	itt	lt
   25bfa:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   25bfe:	f8cd 800c 	strlt.w	r8, [sp, #12]
   25c02:	ea33 0308 	bics.w	r3, r3, r8
   25c06:	f000 809f 	beq.w	25d48 <_dtoa_r+0x190>
   25c0a:	ed9d 8b02 	vldr	d8, [sp, #8]
   25c0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
   25c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25c16:	d111      	bne.n	25c3c <_dtoa_r+0x84>
   25c18:	9a05      	ldr	r2, [sp, #20]
   25c1a:	2301      	movs	r3, #1
   25c1c:	6013      	str	r3, [r2, #0]
   25c1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25c20:	2b00      	cmp	r3, #0
   25c22:	f000 823f 	beq.w	260a4 <_dtoa_r+0x4ec>
   25c26:	4bb3      	ldr	r3, [pc, #716]	; (25ef4 <_dtoa_r+0x33c>)
   25c28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   25c2a:	6013      	str	r3, [r2, #0]
   25c2c:	3b01      	subs	r3, #1
   25c2e:	9300      	str	r3, [sp, #0]
   25c30:	9800      	ldr	r0, [sp, #0]
   25c32:	b00f      	add	sp, #60	; 0x3c
   25c34:	ecbd 8b02 	vpop	{d8}
   25c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c3c:	aa0c      	add	r2, sp, #48	; 0x30
   25c3e:	a90d      	add	r1, sp, #52	; 0x34
   25c40:	4620      	mov	r0, r4
   25c42:	eeb0 0b48 	vmov.f64	d0, d8
   25c46:	f7ff fe65 	bl	25914 <__d2b>
   25c4a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   25c4e:	4605      	mov	r5, r0
   25c50:	f040 8092 	bne.w	25d78 <_dtoa_r+0x1c0>
   25c54:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   25c58:	440b      	add	r3, r1
   25c5a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   25c5e:	2a20      	cmp	r2, #32
   25c60:	f340 82fa 	ble.w	26258 <_dtoa_r+0x6a0>
   25c64:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   25c68:	fa08 f802 	lsl.w	r8, r8, r2
   25c6c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   25c70:	40d6      	lsrs	r6, r2
   25c72:	ea48 0206 	orr.w	r2, r8, r6
   25c76:	ee07 2a10 	vmov	s14, r2
   25c7a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   25c7e:	1e58      	subs	r0, r3, #1
   25c80:	ee17 6a90 	vmov	r6, s15
   25c84:	ec53 2b17 	vmov	r2, r3, d7
   25c88:	f04f 0a01 	mov.w	sl, #1
   25c8c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   25c90:	ed9f 3b91 	vldr	d3, [pc, #580]	; 25ed8 <_dtoa_r+0x320>
   25c94:	ed9f 7b92 	vldr	d7, [pc, #584]	; 25ee0 <_dtoa_r+0x328>
   25c98:	ed9f 5b93 	vldr	d5, [pc, #588]	; 25ee8 <_dtoa_r+0x330>
   25c9c:	ee06 0a90 	vmov	s13, r0
   25ca0:	ec43 2b12 	vmov	d2, r2, r3
   25ca4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   25ca8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   25cac:	ee32 6b46 	vsub.f64	d6, d2, d6
   25cb0:	eea6 7b03 	vfma.f64	d7, d6, d3
   25cb4:	eea4 7b05 	vfma.f64	d7, d4, d5
   25cb8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   25cbc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   25cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25cc4:	ee16 7a90 	vmov	r7, s13
   25cc8:	d508      	bpl.n	25cdc <_dtoa_r+0x124>
   25cca:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   25cce:	eeb4 6b47 	vcmp.f64	d6, d7
   25cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25cd6:	bf18      	it	ne
   25cd8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   25cdc:	2f16      	cmp	r7, #22
   25cde:	f200 8145 	bhi.w	25f6c <_dtoa_r+0x3b4>
   25ce2:	4b85      	ldr	r3, [pc, #532]	; (25ef8 <_dtoa_r+0x340>)
   25ce4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   25ce8:	ed93 7b00 	vldr	d7, [r3]
   25cec:	eeb4 8bc7 	vcmpe.f64	d8, d7
   25cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25cf4:	d557      	bpl.n	25da6 <_dtoa_r+0x1ee>
   25cf6:	1a09      	subs	r1, r1, r0
   25cf8:	2300      	movs	r3, #0
   25cfa:	f1b1 0801 	subs.w	r8, r1, #1
   25cfe:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   25d02:	930a      	str	r3, [sp, #40]	; 0x28
   25d04:	f100 8139 	bmi.w	25f7a <_dtoa_r+0x3c2>
   25d08:	2300      	movs	r3, #0
   25d0a:	9306      	str	r3, [sp, #24]
   25d0c:	2f00      	cmp	r7, #0
   25d0e:	da52      	bge.n	25db6 <_dtoa_r+0x1fe>
   25d10:	9b06      	ldr	r3, [sp, #24]
   25d12:	9704      	str	r7, [sp, #16]
   25d14:	1bdb      	subs	r3, r3, r7
   25d16:	9306      	str	r3, [sp, #24]
   25d18:	427b      	negs	r3, r7
   25d1a:	9308      	str	r3, [sp, #32]
   25d1c:	9b01      	ldr	r3, [sp, #4]
   25d1e:	2b09      	cmp	r3, #9
   25d20:	f04f 0700 	mov.w	r7, #0
   25d24:	d84e      	bhi.n	25dc4 <_dtoa_r+0x20c>
   25d26:	2b05      	cmp	r3, #5
   25d28:	f340 829d 	ble.w	26266 <_dtoa_r+0x6ae>
   25d2c:	3b04      	subs	r3, #4
   25d2e:	9301      	str	r3, [sp, #4]
   25d30:	2600      	movs	r6, #0
   25d32:	9b01      	ldr	r3, [sp, #4]
   25d34:	1e9a      	subs	r2, r3, #2
   25d36:	2a03      	cmp	r2, #3
   25d38:	f200 8125 	bhi.w	25f86 <_dtoa_r+0x3ce>
   25d3c:	e8df f012 	tbh	[pc, r2, lsl #1]
   25d40:	03a703aa 	.word	0x03a703aa
   25d44:	037e039d 	.word	0x037e039d
   25d48:	9a05      	ldr	r2, [sp, #20]
   25d4a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   25d4e:	f242 730f 	movw	r3, #9999	; 0x270f
   25d52:	ea58 0806 	orrs.w	r8, r8, r6
   25d56:	6013      	str	r3, [r2, #0]
   25d58:	d11e      	bne.n	25d98 <_dtoa_r+0x1e0>
   25d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25d5c:	2b00      	cmp	r3, #0
   25d5e:	f000 8591 	beq.w	26884 <_dtoa_r+0xccc>
   25d62:	4b66      	ldr	r3, [pc, #408]	; (25efc <_dtoa_r+0x344>)
   25d64:	9300      	str	r3, [sp, #0]
   25d66:	3308      	adds	r3, #8
   25d68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   25d6a:	9800      	ldr	r0, [sp, #0]
   25d6c:	6013      	str	r3, [r2, #0]
   25d6e:	b00f      	add	sp, #60	; 0x3c
   25d70:	ecbd 8b02 	vpop	{d8}
   25d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d78:	ee18 6a90 	vmov	r6, s17
   25d7c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   25d80:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   25d84:	ec53 2b18 	vmov	r2, r3, d8
   25d88:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   25d8c:	990c      	ldr	r1, [sp, #48]	; 0x30
   25d8e:	f04f 0a00 	mov.w	sl, #0
   25d92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   25d96:	e77b      	b.n	25c90 <_dtoa_r+0xd8>
   25d98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25d9a:	2b00      	cmp	r3, #0
   25d9c:	f040 833b 	bne.w	26416 <_dtoa_r+0x85e>
   25da0:	4b57      	ldr	r3, [pc, #348]	; (25f00 <_dtoa_r+0x348>)
   25da2:	9300      	str	r3, [sp, #0]
   25da4:	e744      	b.n	25c30 <_dtoa_r+0x78>
   25da6:	1a09      	subs	r1, r1, r0
   25da8:	2300      	movs	r3, #0
   25daa:	f1b1 0801 	subs.w	r8, r1, #1
   25dae:	930a      	str	r3, [sp, #40]	; 0x28
   25db0:	f100 80e3 	bmi.w	25f7a <_dtoa_r+0x3c2>
   25db4:	9306      	str	r3, [sp, #24]
   25db6:	2300      	movs	r3, #0
   25db8:	9308      	str	r3, [sp, #32]
   25dba:	9b01      	ldr	r3, [sp, #4]
   25dbc:	9704      	str	r7, [sp, #16]
   25dbe:	2b09      	cmp	r3, #9
   25dc0:	44b8      	add	r8, r7
   25dc2:	d9b0      	bls.n	25d26 <_dtoa_r+0x16e>
   25dc4:	2300      	movs	r3, #0
   25dc6:	2601      	movs	r6, #1
   25dc8:	9301      	str	r3, [sp, #4]
   25dca:	9607      	str	r6, [sp, #28]
   25dcc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   25dd0:	469b      	mov	fp, r3
   25dd2:	2100      	movs	r1, #0
   25dd4:	63e1      	str	r1, [r4, #60]	; 0x3c
   25dd6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   25dda:	4620      	mov	r0, r4
   25ddc:	f7ff fa48 	bl	25270 <_Balloc>
   25de0:	9000      	str	r0, [sp, #0]
   25de2:	2800      	cmp	r0, #0
   25de4:	f000 8540 	beq.w	26868 <_dtoa_r+0xcb0>
   25de8:	9b00      	ldr	r3, [sp, #0]
   25dea:	63a3      	str	r3, [r4, #56]	; 0x38
   25dec:	f1b9 0f0e 	cmp.w	r9, #14
   25df0:	f200 80dc 	bhi.w	25fac <_dtoa_r+0x3f4>
   25df4:	2e00      	cmp	r6, #0
   25df6:	f000 80d9 	beq.w	25fac <_dtoa_r+0x3f4>
   25dfa:	9b04      	ldr	r3, [sp, #16]
   25dfc:	2b00      	cmp	r3, #0
   25dfe:	f340 83de 	ble.w	265be <_dtoa_r+0xa06>
   25e02:	4a3d      	ldr	r2, [pc, #244]	; (25ef8 <_dtoa_r+0x340>)
   25e04:	f003 010f 	and.w	r1, r3, #15
   25e08:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   25e0c:	ed92 7b00 	vldr	d7, [r2]
   25e10:	111a      	asrs	r2, r3, #4
   25e12:	05db      	lsls	r3, r3, #23
   25e14:	f140 8382 	bpl.w	2651c <_dtoa_r+0x964>
   25e18:	493a      	ldr	r1, [pc, #232]	; (25f04 <_dtoa_r+0x34c>)
   25e1a:	ed91 6b08 	vldr	d6, [r1, #32]
   25e1e:	f002 020f 	and.w	r2, r2, #15
   25e22:	2003      	movs	r0, #3
   25e24:	ee88 5b06 	vdiv.f64	d5, d8, d6
   25e28:	b15a      	cbz	r2, 25e42 <_dtoa_r+0x28a>
   25e2a:	4936      	ldr	r1, [pc, #216]	; (25f04 <_dtoa_r+0x34c>)
   25e2c:	07d6      	lsls	r6, r2, #31
   25e2e:	d504      	bpl.n	25e3a <_dtoa_r+0x282>
   25e30:	ed91 6b00 	vldr	d6, [r1]
   25e34:	3001      	adds	r0, #1
   25e36:	ee27 7b06 	vmul.f64	d7, d7, d6
   25e3a:	1052      	asrs	r2, r2, #1
   25e3c:	f101 0108 	add.w	r1, r1, #8
   25e40:	d1f4      	bne.n	25e2c <_dtoa_r+0x274>
   25e42:	ee85 6b07 	vdiv.f64	d6, d5, d7
   25e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25e48:	b13b      	cbz	r3, 25e5a <_dtoa_r+0x2a2>
   25e4a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   25e4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   25e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25e56:	f100 84ae 	bmi.w	267b6 <_dtoa_r+0xbfe>
   25e5a:	ee07 0a90 	vmov	s15, r0
   25e5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   25e62:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   25e66:	eea5 7b06 	vfma.f64	d7, d5, d6
   25e6a:	ee17 2a90 	vmov	r2, s15
   25e6e:	ec51 0b17 	vmov	r0, r1, d7
   25e72:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   25e76:	f1b9 0f00 	cmp.w	r9, #0
   25e7a:	f000 8388 	beq.w	2658e <_dtoa_r+0x9d6>
   25e7e:	9e04      	ldr	r6, [sp, #16]
   25e80:	464a      	mov	r2, r9
   25e82:	9b07      	ldr	r3, [sp, #28]
   25e84:	2b00      	cmp	r3, #0
   25e86:	f000 8447 	beq.w	26718 <_dtoa_r+0xb60>
   25e8a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   25e8e:	4b1a      	ldr	r3, [pc, #104]	; (25ef8 <_dtoa_r+0x340>)
   25e90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   25e94:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   25e98:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   25e9c:	ee36 7b47 	vsub.f64	d7, d6, d7
   25ea0:	ed1c 6b02 	vldr	d6, [ip, #-8]
   25ea4:	ee83 5b06 	vdiv.f64	d5, d3, d6
   25ea8:	ec41 0b16 	vmov	d6, r0, r1
   25eac:	ee14 0a90 	vmov	r0, s9
   25eb0:	ee35 5b46 	vsub.f64	d5, d5, d6
   25eb4:	9900      	ldr	r1, [sp, #0]
   25eb6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   25eba:	3030      	adds	r0, #48	; 0x30
   25ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25ec0:	f801 0b01 	strb.w	r0, [r1], #1
   25ec4:	f300 84ac 	bgt.w	26820 <_dtoa_r+0xc68>
   25ec8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   25ecc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   25ed0:	f04f 0c00 	mov.w	ip, #0
   25ed4:	e031      	b.n	25f3a <_dtoa_r+0x382>
   25ed6:	bf00      	nop
   25ed8:	636f4361 	.word	0x636f4361
   25edc:	3fd287a7 	.word	0x3fd287a7
   25ee0:	8b60c8b3 	.word	0x8b60c8b3
   25ee4:	3fc68a28 	.word	0x3fc68a28
   25ee8:	509f79fb 	.word	0x509f79fb
   25eec:	3fd34413 	.word	0x3fd34413
   25ef0:	7ff00000 	.word	0x7ff00000
   25ef4:	20000639 	.word	0x20000639
   25ef8:	200002a8 	.word	0x200002a8
   25efc:	20004308 	.word	0x20004308
   25f00:	20004314 	.word	0x20004314
   25f04:	20000280 	.word	0x20000280
   25f08:	f10c 0c01 	add.w	ip, ip, #1
   25f0c:	4594      	cmp	ip, r2
   25f0e:	da4d      	bge.n	25fac <_dtoa_r+0x3f4>
   25f10:	ee27 7b04 	vmul.f64	d7, d7, d4
   25f14:	ee25 5b04 	vmul.f64	d5, d5, d4
   25f18:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   25f1c:	ee16 3a90 	vmov	r3, s13
   25f20:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   25f24:	3330      	adds	r3, #48	; 0x30
   25f26:	ee37 7b43 	vsub.f64	d7, d7, d3
   25f2a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   25f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25f32:	f801 3b01 	strb.w	r3, [r1], #1
   25f36:	f100 8473 	bmi.w	26820 <_dtoa_r+0xc68>
   25f3a:	ee32 6b47 	vsub.f64	d6, d2, d7
   25f3e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   25f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25f46:	d5df      	bpl.n	25f08 <_dtoa_r+0x350>
   25f48:	9a00      	ldr	r2, [sp, #0]
   25f4a:	9604      	str	r6, [sp, #16]
   25f4c:	e002      	b.n	25f54 <_dtoa_r+0x39c>
   25f4e:	428a      	cmp	r2, r1
   25f50:	f000 8450 	beq.w	267f4 <_dtoa_r+0xc3c>
   25f54:	4689      	mov	r9, r1
   25f56:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   25f5a:	2b39      	cmp	r3, #57	; 0x39
   25f5c:	d0f7      	beq.n	25f4e <_dtoa_r+0x396>
   25f5e:	3301      	adds	r3, #1
   25f60:	b2db      	uxtb	r3, r3
   25f62:	700b      	strb	r3, [r1, #0]
   25f64:	9b04      	ldr	r3, [sp, #16]
   25f66:	3301      	adds	r3, #1
   25f68:	9304      	str	r3, [sp, #16]
   25f6a:	e155      	b.n	26218 <_dtoa_r+0x660>
   25f6c:	1a09      	subs	r1, r1, r0
   25f6e:	2301      	movs	r3, #1
   25f70:	f1b1 0801 	subs.w	r8, r1, #1
   25f74:	930a      	str	r3, [sp, #40]	; 0x28
   25f76:	f57f aec7 	bpl.w	25d08 <_dtoa_r+0x150>
   25f7a:	f1c1 0301 	rsb	r3, r1, #1
   25f7e:	9306      	str	r3, [sp, #24]
   25f80:	f04f 0800 	mov.w	r8, #0
   25f84:	e6c2      	b.n	25d0c <_dtoa_r+0x154>
   25f86:	2600      	movs	r6, #0
   25f88:	63e6      	str	r6, [r4, #60]	; 0x3c
   25f8a:	4631      	mov	r1, r6
   25f8c:	4620      	mov	r0, r4
   25f8e:	f7ff f96f 	bl	25270 <_Balloc>
   25f92:	9000      	str	r0, [sp, #0]
   25f94:	2800      	cmp	r0, #0
   25f96:	f000 8467 	beq.w	26868 <_dtoa_r+0xcb0>
   25f9a:	9b00      	ldr	r3, [sp, #0]
   25f9c:	63a3      	str	r3, [r4, #56]	; 0x38
   25f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25fa2:	930b      	str	r3, [sp, #44]	; 0x2c
   25fa4:	4699      	mov	r9, r3
   25fa6:	2301      	movs	r3, #1
   25fa8:	46b3      	mov	fp, r6
   25faa:	9307      	str	r3, [sp, #28]
   25fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25fae:	2a00      	cmp	r2, #0
   25fb0:	db55      	blt.n	2605e <_dtoa_r+0x4a6>
   25fb2:	9904      	ldr	r1, [sp, #16]
   25fb4:	290e      	cmp	r1, #14
   25fb6:	dc52      	bgt.n	2605e <_dtoa_r+0x4a6>
   25fb8:	4bb7      	ldr	r3, [pc, #732]	; (26298 <_dtoa_r+0x6e0>)
   25fba:	f1bb 0f00 	cmp.w	fp, #0
   25fbe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   25fc2:	ed93 6b00 	vldr	d6, [r3]
   25fc6:	da15      	bge.n	25ff4 <_dtoa_r+0x43c>
   25fc8:	f1b9 0f00 	cmp.w	r9, #0
   25fcc:	dc12      	bgt.n	25ff4 <_dtoa_r+0x43c>
   25fce:	f040 82f2 	bne.w	265b6 <_dtoa_r+0x9fe>
   25fd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   25fd6:	ee26 7b07 	vmul.f64	d7, d6, d7
   25fda:	eeb4 8bc7 	vcmpe.f64	d8, d7
   25fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25fe2:	46ca      	mov	sl, r9
   25fe4:	464e      	mov	r6, r9
   25fe6:	f200 826d 	bhi.w	264c4 <_dtoa_r+0x90c>
   25fea:	f8dd 8000 	ldr.w	r8, [sp]
   25fee:	ea6f 0b0b 	mvn.w	fp, fp
   25ff2:	e270      	b.n	264d6 <_dtoa_r+0x91e>
   25ff4:	ee88 7b06 	vdiv.f64	d7, d8, d6
   25ff8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   25ffc:	9900      	ldr	r1, [sp, #0]
   25ffe:	ee17 3a10 	vmov	r3, s14
   26002:	f1b9 0f01 	cmp.w	r9, #1
   26006:	f103 0330 	add.w	r3, r3, #48	; 0x30
   2600a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   2600e:	f801 3b01 	strb.w	r3, [r1], #1
   26012:	eea5 8b46 	vfms.f64	d8, d5, d6
   26016:	f000 8334 	beq.w	26682 <_dtoa_r+0xaca>
   2601a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   2601e:	2301      	movs	r3, #1
   26020:	e011      	b.n	26046 <_dtoa_r+0x48e>
   26022:	ee88 7b06 	vdiv.f64	d7, d8, d6
   26026:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   2602a:	3301      	adds	r3, #1
   2602c:	ee17 2a10 	vmov	r2, s14
   26030:	454b      	cmp	r3, r9
   26032:	f102 0230 	add.w	r2, r2, #48	; 0x30
   26036:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   2603a:	f801 2b01 	strb.w	r2, [r1], #1
   2603e:	eea5 8b46 	vfms.f64	d8, d5, d6
   26042:	f000 831e 	beq.w	26682 <_dtoa_r+0xaca>
   26046:	ee28 8b04 	vmul.f64	d8, d8, d4
   2604a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   2604e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26052:	d1e6      	bne.n	26022 <_dtoa_r+0x46a>
   26054:	9b04      	ldr	r3, [sp, #16]
   26056:	3301      	adds	r3, #1
   26058:	9304      	str	r3, [sp, #16]
   2605a:	4689      	mov	r9, r1
   2605c:	e0dc      	b.n	26218 <_dtoa_r+0x660>
   2605e:	9b07      	ldr	r3, [sp, #28]
   26060:	b343      	cbz	r3, 260b4 <_dtoa_r+0x4fc>
   26062:	9b01      	ldr	r3, [sp, #4]
   26064:	2b01      	cmp	r3, #1
   26066:	f340 8276 	ble.w	26556 <_dtoa_r+0x99e>
   2606a:	9b08      	ldr	r3, [sp, #32]
   2606c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   26070:	4553      	cmp	r3, sl
   26072:	f280 823f 	bge.w	264f4 <_dtoa_r+0x93c>
   26076:	9b08      	ldr	r3, [sp, #32]
   26078:	f8cd a020 	str.w	sl, [sp, #32]
   2607c:	ebaa 0203 	sub.w	r2, sl, r3
   26080:	4417      	add	r7, r2
   26082:	f04f 0a00 	mov.w	sl, #0
   26086:	f1b9 0f00 	cmp.w	r9, #0
   2608a:	f2c0 8325 	blt.w	266d8 <_dtoa_r+0xb20>
   2608e:	9b06      	ldr	r3, [sp, #24]
   26090:	9309      	str	r3, [sp, #36]	; 0x24
   26092:	444b      	add	r3, r9
   26094:	44c8      	add	r8, r9
   26096:	9306      	str	r3, [sp, #24]
   26098:	2101      	movs	r1, #1
   2609a:	4620      	mov	r0, r4
   2609c:	f7ff f9ba 	bl	25414 <__i2b>
   260a0:	4606      	mov	r6, r0
   260a2:	e00c      	b.n	260be <_dtoa_r+0x506>
   260a4:	4b7d      	ldr	r3, [pc, #500]	; (2629c <_dtoa_r+0x6e4>)
   260a6:	9300      	str	r3, [sp, #0]
   260a8:	9800      	ldr	r0, [sp, #0]
   260aa:	b00f      	add	sp, #60	; 0x3c
   260ac:	ecbd 8b02 	vpop	{d8}
   260b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260b4:	9b06      	ldr	r3, [sp, #24]
   260b6:	f8dd a020 	ldr.w	sl, [sp, #32]
   260ba:	9e07      	ldr	r6, [sp, #28]
   260bc:	9309      	str	r3, [sp, #36]	; 0x24
   260be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   260c0:	b16b      	cbz	r3, 260de <_dtoa_r+0x526>
   260c2:	f1b8 0f00 	cmp.w	r8, #0
   260c6:	dd0a      	ble.n	260de <_dtoa_r+0x526>
   260c8:	4543      	cmp	r3, r8
   260ca:	9906      	ldr	r1, [sp, #24]
   260cc:	461a      	mov	r2, r3
   260ce:	bfa8      	it	ge
   260d0:	4642      	movge	r2, r8
   260d2:	1a89      	subs	r1, r1, r2
   260d4:	1a9b      	subs	r3, r3, r2
   260d6:	9106      	str	r1, [sp, #24]
   260d8:	9309      	str	r3, [sp, #36]	; 0x24
   260da:	eba8 0802 	sub.w	r8, r8, r2
   260de:	9b08      	ldr	r3, [sp, #32]
   260e0:	b163      	cbz	r3, 260fc <_dtoa_r+0x544>
   260e2:	9b07      	ldr	r3, [sp, #28]
   260e4:	2b00      	cmp	r3, #0
   260e6:	f000 82a7 	beq.w	26638 <_dtoa_r+0xa80>
   260ea:	f1ba 0f00 	cmp.w	sl, #0
   260ee:	f300 8204 	bgt.w	264fa <_dtoa_r+0x942>
   260f2:	9b08      	ldr	r3, [sp, #32]
   260f4:	ebb3 020a 	subs.w	r2, r3, sl
   260f8:	f040 82ff 	bne.w	266fa <_dtoa_r+0xb42>
   260fc:	2101      	movs	r1, #1
   260fe:	4620      	mov	r0, r4
   26100:	f7ff f988 	bl	25414 <__i2b>
   26104:	2f00      	cmp	r7, #0
   26106:	4682      	mov	sl, r0
   26108:	f300 80af 	bgt.w	2626a <_dtoa_r+0x6b2>
   2610c:	9b01      	ldr	r3, [sp, #4]
   2610e:	2b01      	cmp	r3, #1
   26110:	f340 8187 	ble.w	26422 <_dtoa_r+0x86a>
   26114:	2300      	movs	r3, #0
   26116:	9308      	str	r3, [sp, #32]
   26118:	2001      	movs	r0, #1
   2611a:	2f00      	cmp	r7, #0
   2611c:	f040 80b1 	bne.w	26282 <_dtoa_r+0x6ca>
   26120:	4440      	add	r0, r8
   26122:	f010 001f 	ands.w	r0, r0, #31
   26126:	f000 817a 	beq.w	2641e <_dtoa_r+0x866>
   2612a:	f1c0 0220 	rsb	r2, r0, #32
   2612e:	2a04      	cmp	r2, #4
   26130:	f300 8088 	bgt.w	26244 <_dtoa_r+0x68c>
   26134:	f040 81f6 	bne.w	26524 <_dtoa_r+0x96c>
   26138:	9b06      	ldr	r3, [sp, #24]
   2613a:	2b00      	cmp	r3, #0
   2613c:	dd05      	ble.n	2614a <_dtoa_r+0x592>
   2613e:	4629      	mov	r1, r5
   26140:	461a      	mov	r2, r3
   26142:	4620      	mov	r0, r4
   26144:	f7ff faa2 	bl	2568c <__lshift>
   26148:	4605      	mov	r5, r0
   2614a:	f1b8 0f00 	cmp.w	r8, #0
   2614e:	dd05      	ble.n	2615c <_dtoa_r+0x5a4>
   26150:	4651      	mov	r1, sl
   26152:	4642      	mov	r2, r8
   26154:	4620      	mov	r0, r4
   26156:	f7ff fa99 	bl	2568c <__lshift>
   2615a:	4682      	mov	sl, r0
   2615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2615e:	2b00      	cmp	r3, #0
   26160:	f040 813f 	bne.w	263e2 <_dtoa_r+0x82a>
   26164:	f1b9 0f00 	cmp.w	r9, #0
   26168:	f340 8125 	ble.w	263b6 <_dtoa_r+0x7fe>
   2616c:	9b07      	ldr	r3, [sp, #28]
   2616e:	2b00      	cmp	r3, #0
   26170:	f040 80a3 	bne.w	262ba <_dtoa_r+0x702>
   26174:	9b04      	ldr	r3, [sp, #16]
   26176:	3301      	adds	r3, #1
   26178:	9304      	str	r3, [sp, #16]
   2617a:	f8dd 8000 	ldr.w	r8, [sp]
   2617e:	2701      	movs	r7, #1
   26180:	e007      	b.n	26192 <_dtoa_r+0x5da>
   26182:	4629      	mov	r1, r5
   26184:	2300      	movs	r3, #0
   26186:	220a      	movs	r2, #10
   26188:	4620      	mov	r0, r4
   2618a:	f7ff f8a1 	bl	252d0 <__multadd>
   2618e:	3701      	adds	r7, #1
   26190:	4605      	mov	r5, r0
   26192:	4651      	mov	r1, sl
   26194:	4628      	mov	r0, r5
   26196:	f7ff fc7b 	bl	25a90 <quorem>
   2619a:	45b9      	cmp	r9, r7
   2619c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   261a0:	f808 0b01 	strb.w	r0, [r8], #1
   261a4:	dced      	bgt.n	26182 <_dtoa_r+0x5ca>
   261a6:	f1b9 0f00 	cmp.w	r9, #0
   261aa:	9a00      	ldr	r2, [sp, #0]
   261ac:	bfcc      	ite	gt
   261ae:	46cb      	movgt	fp, r9
   261b0:	f04f 0b01 	movle.w	fp, #1
   261b4:	4603      	mov	r3, r0
   261b6:	4493      	add	fp, r2
   261b8:	2700      	movs	r7, #0
   261ba:	4629      	mov	r1, r5
   261bc:	2201      	movs	r2, #1
   261be:	4620      	mov	r0, r4
   261c0:	9301      	str	r3, [sp, #4]
   261c2:	f7ff fa63 	bl	2568c <__lshift>
   261c6:	4651      	mov	r1, sl
   261c8:	4605      	mov	r5, r0
   261ca:	f7ff fad7 	bl	2577c <__mcmp>
   261ce:	2800      	cmp	r0, #0
   261d0:	f340 81af 	ble.w	26532 <_dtoa_r+0x97a>
   261d4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   261d8:	9a00      	ldr	r2, [sp, #0]
   261da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   261de:	e004      	b.n	261ea <_dtoa_r+0x632>
   261e0:	455a      	cmp	r2, fp
   261e2:	f000 81b1 	beq.w	26548 <_dtoa_r+0x990>
   261e6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   261ea:	2b39      	cmp	r3, #57	; 0x39
   261ec:	f10b 0901 	add.w	r9, fp, #1
   261f0:	d0f6      	beq.n	261e0 <_dtoa_r+0x628>
   261f2:	3301      	adds	r3, #1
   261f4:	f88b 3000 	strb.w	r3, [fp]
   261f8:	4651      	mov	r1, sl
   261fa:	4620      	mov	r0, r4
   261fc:	f7ff f85e 	bl	252bc <_Bfree>
   26200:	b156      	cbz	r6, 26218 <_dtoa_r+0x660>
   26202:	b12f      	cbz	r7, 26210 <_dtoa_r+0x658>
   26204:	42b7      	cmp	r7, r6
   26206:	d003      	beq.n	26210 <_dtoa_r+0x658>
   26208:	4639      	mov	r1, r7
   2620a:	4620      	mov	r0, r4
   2620c:	f7ff f856 	bl	252bc <_Bfree>
   26210:	4631      	mov	r1, r6
   26212:	4620      	mov	r0, r4
   26214:	f7ff f852 	bl	252bc <_Bfree>
   26218:	4629      	mov	r1, r5
   2621a:	4620      	mov	r0, r4
   2621c:	f7ff f84e 	bl	252bc <_Bfree>
   26220:	2300      	movs	r3, #0
   26222:	f889 3000 	strb.w	r3, [r9]
   26226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2622a:	601a      	str	r2, [r3, #0]
   2622c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2622e:	2b00      	cmp	r3, #0
   26230:	f43f acfe 	beq.w	25c30 <_dtoa_r+0x78>
   26234:	9800      	ldr	r0, [sp, #0]
   26236:	f8c3 9000 	str.w	r9, [r3]
   2623a:	b00f      	add	sp, #60	; 0x3c
   2623c:	ecbd 8b02 	vpop	{d8}
   26240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26244:	f1c0 001c 	rsb	r0, r0, #28
   26248:	9b06      	ldr	r3, [sp, #24]
   2624a:	4403      	add	r3, r0
   2624c:	9306      	str	r3, [sp, #24]
   2624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26250:	4403      	add	r3, r0
   26252:	9309      	str	r3, [sp, #36]	; 0x24
   26254:	4480      	add	r8, r0
   26256:	e76f      	b.n	26138 <_dtoa_r+0x580>
   26258:	f1c2 0220 	rsb	r2, r2, #32
   2625c:	fa06 f202 	lsl.w	r2, r6, r2
   26260:	ee07 2a10 	vmov	s14, r2
   26264:	e509      	b.n	25c7a <_dtoa_r+0xc2>
   26266:	2601      	movs	r6, #1
   26268:	e563      	b.n	25d32 <_dtoa_r+0x17a>
   2626a:	4601      	mov	r1, r0
   2626c:	463a      	mov	r2, r7
   2626e:	4620      	mov	r0, r4
   26270:	f7ff f9ac 	bl	255cc <__pow5mult>
   26274:	9b01      	ldr	r3, [sp, #4]
   26276:	2b01      	cmp	r3, #1
   26278:	4682      	mov	sl, r0
   2627a:	f340 81c5 	ble.w	26608 <_dtoa_r+0xa50>
   2627e:	2300      	movs	r3, #0
   26280:	9308      	str	r3, [sp, #32]
   26282:	f8da 2010 	ldr.w	r2, [sl, #16]
   26286:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   2628a:	6910      	ldr	r0, [r2, #16]
   2628c:	f7ff f872 	bl	25374 <__hi0bits>
   26290:	f1c0 0020 	rsb	r0, r0, #32
   26294:	e744      	b.n	26120 <_dtoa_r+0x568>
   26296:	bf00      	nop
   26298:	200002a8 	.word	0x200002a8
   2629c:	20000638 	.word	0x20000638
   262a0:	4631      	mov	r1, r6
   262a2:	2300      	movs	r3, #0
   262a4:	220a      	movs	r2, #10
   262a6:	4620      	mov	r0, r4
   262a8:	f7ff f812 	bl	252d0 <__multadd>
   262ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   262ae:	2b00      	cmp	r3, #0
   262b0:	4606      	mov	r6, r0
   262b2:	f340 82ce 	ble.w	26852 <_dtoa_r+0xc9a>
   262b6:	9704      	str	r7, [sp, #16]
   262b8:	4699      	mov	r9, r3
   262ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262bc:	2b00      	cmp	r3, #0
   262be:	dd05      	ble.n	262cc <_dtoa_r+0x714>
   262c0:	4631      	mov	r1, r6
   262c2:	461a      	mov	r2, r3
   262c4:	4620      	mov	r0, r4
   262c6:	f7ff f9e1 	bl	2568c <__lshift>
   262ca:	4606      	mov	r6, r0
   262cc:	9b08      	ldr	r3, [sp, #32]
   262ce:	2b00      	cmp	r3, #0
   262d0:	f040 81eb 	bne.w	266aa <_dtoa_r+0xaf2>
   262d4:	46b0      	mov	r8, r6
   262d6:	9b02      	ldr	r3, [sp, #8]
   262d8:	9f00      	ldr	r7, [sp, #0]
   262da:	f003 0201 	and.w	r2, r3, #1
   262de:	1e7b      	subs	r3, r7, #1
   262e0:	444b      	add	r3, r9
   262e2:	9308      	str	r3, [sp, #32]
   262e4:	9b01      	ldr	r3, [sp, #4]
   262e6:	920a      	str	r2, [sp, #40]	; 0x28
   262e8:	4313      	orrs	r3, r2
   262ea:	9309      	str	r3, [sp, #36]	; 0x24
   262ec:	4651      	mov	r1, sl
   262ee:	4628      	mov	r0, r5
   262f0:	f7ff fbce 	bl	25a90 <quorem>
   262f4:	4631      	mov	r1, r6
   262f6:	4683      	mov	fp, r0
   262f8:	4628      	mov	r0, r5
   262fa:	f7ff fa3f 	bl	2577c <__mcmp>
   262fe:	4642      	mov	r2, r8
   26300:	4651      	mov	r1, sl
   26302:	4681      	mov	r9, r0
   26304:	4620      	mov	r0, r4
   26306:	f7ff fa5b 	bl	257c0 <__mdiff>
   2630a:	68c2      	ldr	r2, [r0, #12]
   2630c:	4601      	mov	r1, r0
   2630e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   26312:	2a00      	cmp	r2, #0
   26314:	d142      	bne.n	2639c <_dtoa_r+0x7e4>
   26316:	e9cd 0306 	strd	r0, r3, [sp, #24]
   2631a:	4628      	mov	r0, r5
   2631c:	f7ff fa2e 	bl	2577c <__mcmp>
   26320:	9906      	ldr	r1, [sp, #24]
   26322:	9002      	str	r0, [sp, #8]
   26324:	4620      	mov	r0, r4
   26326:	f7fe ffc9 	bl	252bc <_Bfree>
   2632a:	9a02      	ldr	r2, [sp, #8]
   2632c:	9b07      	ldr	r3, [sp, #28]
   2632e:	b91a      	cbnz	r2, 26338 <_dtoa_r+0x780>
   26330:	9909      	ldr	r1, [sp, #36]	; 0x24
   26332:	2900      	cmp	r1, #0
   26334:	f000 827e 	beq.w	26834 <_dtoa_r+0xc7c>
   26338:	f1b9 0f00 	cmp.w	r9, #0
   2633c:	f2c0 8183 	blt.w	26646 <_dtoa_r+0xa8e>
   26340:	9901      	ldr	r1, [sp, #4]
   26342:	ea49 0901 	orr.w	r9, r9, r1
   26346:	990a      	ldr	r1, [sp, #40]	; 0x28
   26348:	ea51 0909 	orrs.w	r9, r1, r9
   2634c:	f000 817b 	beq.w	26646 <_dtoa_r+0xa8e>
   26350:	2a00      	cmp	r2, #0
   26352:	f300 81c6 	bgt.w	266e2 <_dtoa_r+0xb2a>
   26356:	9a08      	ldr	r2, [sp, #32]
   26358:	703b      	strb	r3, [r7, #0]
   2635a:	f107 0901 	add.w	r9, r7, #1
   2635e:	4297      	cmp	r7, r2
   26360:	46cb      	mov	fp, r9
   26362:	f000 81c4 	beq.w	266ee <_dtoa_r+0xb36>
   26366:	4629      	mov	r1, r5
   26368:	2300      	movs	r3, #0
   2636a:	220a      	movs	r2, #10
   2636c:	4620      	mov	r0, r4
   2636e:	f7fe ffaf 	bl	252d0 <__multadd>
   26372:	4546      	cmp	r6, r8
   26374:	4605      	mov	r5, r0
   26376:	4631      	mov	r1, r6
   26378:	f04f 0300 	mov.w	r3, #0
   2637c:	f04f 020a 	mov.w	r2, #10
   26380:	4620      	mov	r0, r4
   26382:	d012      	beq.n	263aa <_dtoa_r+0x7f2>
   26384:	f7fe ffa4 	bl	252d0 <__multadd>
   26388:	4641      	mov	r1, r8
   2638a:	4606      	mov	r6, r0
   2638c:	2300      	movs	r3, #0
   2638e:	220a      	movs	r2, #10
   26390:	4620      	mov	r0, r4
   26392:	f7fe ff9d 	bl	252d0 <__multadd>
   26396:	464f      	mov	r7, r9
   26398:	4680      	mov	r8, r0
   2639a:	e7a7      	b.n	262ec <_dtoa_r+0x734>
   2639c:	4620      	mov	r0, r4
   2639e:	9302      	str	r3, [sp, #8]
   263a0:	f7fe ff8c 	bl	252bc <_Bfree>
   263a4:	9b02      	ldr	r3, [sp, #8]
   263a6:	2201      	movs	r2, #1
   263a8:	e7c6      	b.n	26338 <_dtoa_r+0x780>
   263aa:	f7fe ff91 	bl	252d0 <__multadd>
   263ae:	464f      	mov	r7, r9
   263b0:	4606      	mov	r6, r0
   263b2:	4680      	mov	r8, r0
   263b4:	e79a      	b.n	262ec <_dtoa_r+0x734>
   263b6:	9b01      	ldr	r3, [sp, #4]
   263b8:	2b02      	cmp	r3, #2
   263ba:	dc71      	bgt.n	264a0 <_dtoa_r+0x8e8>
   263bc:	9b07      	ldr	r3, [sp, #28]
   263be:	2b00      	cmp	r3, #0
   263c0:	f47f af7b 	bne.w	262ba <_dtoa_r+0x702>
   263c4:	9b04      	ldr	r3, [sp, #16]
   263c6:	4651      	mov	r1, sl
   263c8:	3301      	adds	r3, #1
   263ca:	4628      	mov	r0, r5
   263cc:	9304      	str	r3, [sp, #16]
   263ce:	f7ff fb5f 	bl	25a90 <quorem>
   263d2:	f8dd b000 	ldr.w	fp, [sp]
   263d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   263da:	f80b 3b01 	strb.w	r3, [fp], #1
   263de:	2700      	movs	r7, #0
   263e0:	e6eb      	b.n	261ba <_dtoa_r+0x602>
   263e2:	4651      	mov	r1, sl
   263e4:	4628      	mov	r0, r5
   263e6:	f7ff f9c9 	bl	2577c <__mcmp>
   263ea:	2800      	cmp	r0, #0
   263ec:	f6bf aeba 	bge.w	26164 <_dtoa_r+0x5ac>
   263f0:	4629      	mov	r1, r5
   263f2:	2300      	movs	r3, #0
   263f4:	220a      	movs	r2, #10
   263f6:	4620      	mov	r0, r4
   263f8:	f7fe ff6a 	bl	252d0 <__multadd>
   263fc:	9b04      	ldr	r3, [sp, #16]
   263fe:	1e5f      	subs	r7, r3, #1
   26400:	9b07      	ldr	r3, [sp, #28]
   26402:	4605      	mov	r5, r0
   26404:	2b00      	cmp	r3, #0
   26406:	f47f af4b 	bne.w	262a0 <_dtoa_r+0x6e8>
   2640a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2640c:	2b00      	cmp	r3, #0
   2640e:	f340 8218 	ble.w	26842 <_dtoa_r+0xc8a>
   26412:	4699      	mov	r9, r3
   26414:	e6b1      	b.n	2617a <_dtoa_r+0x5c2>
   26416:	4bbc      	ldr	r3, [pc, #752]	; (26708 <_dtoa_r+0xb50>)
   26418:	9300      	str	r3, [sp, #0]
   2641a:	3303      	adds	r3, #3
   2641c:	e4a4      	b.n	25d68 <_dtoa_r+0x1b0>
   2641e:	201c      	movs	r0, #28
   26420:	e712      	b.n	26248 <_dtoa_r+0x690>
   26422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   26426:	2800      	cmp	r0, #0
   26428:	f47f ae74 	bne.w	26114 <_dtoa_r+0x55c>
   2642c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   26430:	2a00      	cmp	r2, #0
   26432:	f000 80f4 	beq.w	2661e <_dtoa_r+0xa66>
   26436:	9b02      	ldr	r3, [sp, #8]
   26438:	9308      	str	r3, [sp, #32]
   2643a:	e66d      	b.n	26118 <_dtoa_r+0x560>
   2643c:	2301      	movs	r3, #1
   2643e:	9307      	str	r3, [sp, #28]
   26440:	9b04      	ldr	r3, [sp, #16]
   26442:	445b      	add	r3, fp
   26444:	f103 0901 	add.w	r9, r3, #1
   26448:	f1b9 0f01 	cmp.w	r9, #1
   2644c:	46cc      	mov	ip, r9
   2644e:	930b      	str	r3, [sp, #44]	; 0x2c
   26450:	bfb8      	it	lt
   26452:	f04f 0c01 	movlt.w	ip, #1
   26456:	2100      	movs	r1, #0
   26458:	f1bc 0f17 	cmp.w	ip, #23
   2645c:	63e1      	str	r1, [r4, #60]	; 0x3c
   2645e:	f77f acbc 	ble.w	25dda <_dtoa_r+0x222>
   26462:	2001      	movs	r0, #1
   26464:	2204      	movs	r2, #4
   26466:	0052      	lsls	r2, r2, #1
   26468:	f102 0314 	add.w	r3, r2, #20
   2646c:	4563      	cmp	r3, ip
   2646e:	4601      	mov	r1, r0
   26470:	f100 0001 	add.w	r0, r0, #1
   26474:	d9f7      	bls.n	26466 <_dtoa_r+0x8ae>
   26476:	63e1      	str	r1, [r4, #60]	; 0x3c
   26478:	e4af      	b.n	25dda <_dtoa_r+0x222>
   2647a:	2301      	movs	r3, #1
   2647c:	9307      	str	r3, [sp, #28]
   2647e:	f1bb 0f00 	cmp.w	fp, #0
   26482:	dd52      	ble.n	2652a <_dtoa_r+0x972>
   26484:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   26488:	46d9      	mov	r9, fp
   2648a:	46dc      	mov	ip, fp
   2648c:	e7e3      	b.n	26456 <_dtoa_r+0x89e>
   2648e:	2300      	movs	r3, #0
   26490:	9307      	str	r3, [sp, #28]
   26492:	e7d5      	b.n	26440 <_dtoa_r+0x888>
   26494:	2300      	movs	r3, #0
   26496:	9307      	str	r3, [sp, #28]
   26498:	e7f1      	b.n	2647e <_dtoa_r+0x8c6>
   2649a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2649e:	9704      	str	r7, [sp, #16]
   264a0:	f1b9 0f00 	cmp.w	r9, #0
   264a4:	f47f ada1 	bne.w	25fea <_dtoa_r+0x432>
   264a8:	4651      	mov	r1, sl
   264aa:	464b      	mov	r3, r9
   264ac:	2205      	movs	r2, #5
   264ae:	4620      	mov	r0, r4
   264b0:	f7fe ff0e 	bl	252d0 <__multadd>
   264b4:	4601      	mov	r1, r0
   264b6:	4682      	mov	sl, r0
   264b8:	4628      	mov	r0, r5
   264ba:	f7ff f95f 	bl	2577c <__mcmp>
   264be:	2800      	cmp	r0, #0
   264c0:	f77f ad93 	ble.w	25fea <_dtoa_r+0x432>
   264c4:	9b04      	ldr	r3, [sp, #16]
   264c6:	f103 0b01 	add.w	fp, r3, #1
   264ca:	9b00      	ldr	r3, [sp, #0]
   264cc:	2231      	movs	r2, #49	; 0x31
   264ce:	4698      	mov	r8, r3
   264d0:	f803 2b01 	strb.w	r2, [r3], #1
   264d4:	9300      	str	r3, [sp, #0]
   264d6:	4651      	mov	r1, sl
   264d8:	4620      	mov	r0, r4
   264da:	f7fe feef 	bl	252bc <_Bfree>
   264de:	f10b 0301 	add.w	r3, fp, #1
   264e2:	f8dd 9000 	ldr.w	r9, [sp]
   264e6:	9304      	str	r3, [sp, #16]
   264e8:	f8cd 8000 	str.w	r8, [sp]
   264ec:	2e00      	cmp	r6, #0
   264ee:	f47f ae8f 	bne.w	26210 <_dtoa_r+0x658>
   264f2:	e691      	b.n	26218 <_dtoa_r+0x660>
   264f4:	eba3 0a0a 	sub.w	sl, r3, sl
   264f8:	e5c5      	b.n	26086 <_dtoa_r+0x4ce>
   264fa:	4631      	mov	r1, r6
   264fc:	4652      	mov	r2, sl
   264fe:	4620      	mov	r0, r4
   26500:	f7ff f864 	bl	255cc <__pow5mult>
   26504:	462a      	mov	r2, r5
   26506:	4601      	mov	r1, r0
   26508:	4606      	mov	r6, r0
   2650a:	4620      	mov	r0, r4
   2650c:	f7fe ffb0 	bl	25470 <__multiply>
   26510:	4629      	mov	r1, r5
   26512:	4605      	mov	r5, r0
   26514:	4620      	mov	r0, r4
   26516:	f7fe fed1 	bl	252bc <_Bfree>
   2651a:	e5ea      	b.n	260f2 <_dtoa_r+0x53a>
   2651c:	2002      	movs	r0, #2
   2651e:	eeb0 5b48 	vmov.f64	d5, d8
   26522:	e481      	b.n	25e28 <_dtoa_r+0x270>
   26524:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   26528:	e68e      	b.n	26248 <_dtoa_r+0x690>
   2652a:	f04f 0b01 	mov.w	fp, #1
   2652e:	46d9      	mov	r9, fp
   26530:	e44f      	b.n	25dd2 <_dtoa_r+0x21a>
   26532:	d103      	bne.n	2653c <_dtoa_r+0x984>
   26534:	9b01      	ldr	r3, [sp, #4]
   26536:	07db      	lsls	r3, r3, #31
   26538:	f53f ae4c 	bmi.w	261d4 <_dtoa_r+0x61c>
   2653c:	46d9      	mov	r9, fp
   2653e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   26542:	2b30      	cmp	r3, #48	; 0x30
   26544:	d0fa      	beq.n	2653c <_dtoa_r+0x984>
   26546:	e657      	b.n	261f8 <_dtoa_r+0x640>
   26548:	9b04      	ldr	r3, [sp, #16]
   2654a:	9a00      	ldr	r2, [sp, #0]
   2654c:	3301      	adds	r3, #1
   2654e:	9304      	str	r3, [sp, #16]
   26550:	2331      	movs	r3, #49	; 0x31
   26552:	7013      	strb	r3, [r2, #0]
   26554:	e650      	b.n	261f8 <_dtoa_r+0x640>
   26556:	f1ba 0f00 	cmp.w	sl, #0
   2655a:	f000 8123 	beq.w	267a4 <_dtoa_r+0xbec>
   2655e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   26562:	9b06      	ldr	r3, [sp, #24]
   26564:	9309      	str	r3, [sp, #36]	; 0x24
   26566:	4413      	add	r3, r2
   26568:	f8dd a020 	ldr.w	sl, [sp, #32]
   2656c:	9306      	str	r3, [sp, #24]
   2656e:	4490      	add	r8, r2
   26570:	e592      	b.n	26098 <_dtoa_r+0x4e0>
   26572:	ee07 0a90 	vmov	s15, r0
   26576:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   2657a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   2657e:	eea6 5b07 	vfma.f64	d5, d6, d7
   26582:	ee15 2a90 	vmov	r2, s11
   26586:	ec51 0b15 	vmov	r0, r1, d5
   2658a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   2658e:	ec41 0b15 	vmov	d5, r0, r1
   26592:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   26596:	ee36 7b47 	vsub.f64	d7, d6, d7
   2659a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   2659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   265a2:	f300 8137 	bgt.w	26814 <_dtoa_r+0xc5c>
   265a6:	eeb1 5b45 	vneg.f64	d5, d5
   265aa:	eeb4 7bc5 	vcmpe.f64	d7, d5
   265ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   265b2:	f57f acfb 	bpl.w	25fac <_dtoa_r+0x3f4>
   265b6:	f04f 0a00 	mov.w	sl, #0
   265ba:	4656      	mov	r6, sl
   265bc:	e515      	b.n	25fea <_dtoa_r+0x432>
   265be:	f000 80f5 	beq.w	267ac <_dtoa_r+0xbf4>
   265c2:	9b04      	ldr	r3, [sp, #16]
   265c4:	4951      	ldr	r1, [pc, #324]	; (2670c <_dtoa_r+0xb54>)
   265c6:	425a      	negs	r2, r3
   265c8:	f002 000f 	and.w	r0, r2, #15
   265cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   265d0:	ed91 6b00 	vldr	d6, [r1]
   265d4:	1112      	asrs	r2, r2, #4
   265d6:	ee28 6b06 	vmul.f64	d6, d8, d6
   265da:	f000 8142 	beq.w	26862 <_dtoa_r+0xcaa>
   265de:	eeb0 7b46 	vmov.f64	d7, d6
   265e2:	494b      	ldr	r1, [pc, #300]	; (26710 <_dtoa_r+0xb58>)
   265e4:	2600      	movs	r6, #0
   265e6:	2002      	movs	r0, #2
   265e8:	07d3      	lsls	r3, r2, #31
   265ea:	d505      	bpl.n	265f8 <_dtoa_r+0xa40>
   265ec:	ed91 5b00 	vldr	d5, [r1]
   265f0:	3001      	adds	r0, #1
   265f2:	2601      	movs	r6, #1
   265f4:	ee27 7b05 	vmul.f64	d7, d7, d5
   265f8:	1052      	asrs	r2, r2, #1
   265fa:	f101 0108 	add.w	r1, r1, #8
   265fe:	d1f3      	bne.n	265e8 <_dtoa_r+0xa30>
   26600:	2e00      	cmp	r6, #0
   26602:	fe06 6b07 	vseleq.f64	d6, d6, d7
   26606:	e41e      	b.n	25e46 <_dtoa_r+0x28e>
   26608:	9b02      	ldr	r3, [sp, #8]
   2660a:	2b00      	cmp	r3, #0
   2660c:	f47f ae37 	bne.w	2627e <_dtoa_r+0x6c6>
   26610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   26614:	f3c1 0213 	ubfx	r2, r1, #0, #20
   26618:	2a00      	cmp	r2, #0
   2661a:	f040 8137 	bne.w	2688c <_dtoa_r+0xcd4>
   2661e:	4a3d      	ldr	r2, [pc, #244]	; (26714 <_dtoa_r+0xb5c>)
   26620:	400a      	ands	r2, r1
   26622:	2a00      	cmp	r2, #0
   26624:	f000 80fa 	beq.w	2681c <_dtoa_r+0xc64>
   26628:	9b06      	ldr	r3, [sp, #24]
   2662a:	3301      	adds	r3, #1
   2662c:	9306      	str	r3, [sp, #24]
   2662e:	2301      	movs	r3, #1
   26630:	f108 0801 	add.w	r8, r8, #1
   26634:	9308      	str	r3, [sp, #32]
   26636:	e56f      	b.n	26118 <_dtoa_r+0x560>
   26638:	4629      	mov	r1, r5
   2663a:	9a08      	ldr	r2, [sp, #32]
   2663c:	4620      	mov	r0, r4
   2663e:	f7fe ffc5 	bl	255cc <__pow5mult>
   26642:	4605      	mov	r5, r0
   26644:	e55a      	b.n	260fc <_dtoa_r+0x544>
   26646:	2a00      	cmp	r2, #0
   26648:	dd12      	ble.n	26670 <_dtoa_r+0xab8>
   2664a:	4629      	mov	r1, r5
   2664c:	2201      	movs	r2, #1
   2664e:	4620      	mov	r0, r4
   26650:	9301      	str	r3, [sp, #4]
   26652:	f7ff f81b 	bl	2568c <__lshift>
   26656:	4651      	mov	r1, sl
   26658:	4605      	mov	r5, r0
   2665a:	f7ff f88f 	bl	2577c <__mcmp>
   2665e:	2800      	cmp	r0, #0
   26660:	9b01      	ldr	r3, [sp, #4]
   26662:	f340 80e1 	ble.w	26828 <_dtoa_r+0xc70>
   26666:	2b39      	cmp	r3, #57	; 0x39
   26668:	f000 80ca 	beq.w	26800 <_dtoa_r+0xc48>
   2666c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   26670:	46b9      	mov	r9, r7
   26672:	f809 3b01 	strb.w	r3, [r9], #1
   26676:	9b04      	ldr	r3, [sp, #16]
   26678:	3301      	adds	r3, #1
   2667a:	4637      	mov	r7, r6
   2667c:	9304      	str	r3, [sp, #16]
   2667e:	4646      	mov	r6, r8
   26680:	e5ba      	b.n	261f8 <_dtoa_r+0x640>
   26682:	ee38 8b08 	vadd.f64	d8, d8, d8
   26686:	eeb4 8bc6 	vcmpe.f64	d8, d6
   2668a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2668e:	dc0a      	bgt.n	266a6 <_dtoa_r+0xaee>
   26690:	eeb4 8b46 	vcmp.f64	d8, d6
   26694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26698:	f47f acdc 	bne.w	26054 <_dtoa_r+0x49c>
   2669c:	ee17 3a10 	vmov	r3, s14
   266a0:	07d8      	lsls	r0, r3, #31
   266a2:	f57f acd7 	bpl.w	26054 <_dtoa_r+0x49c>
   266a6:	9a00      	ldr	r2, [sp, #0]
   266a8:	e454      	b.n	25f54 <_dtoa_r+0x39c>
   266aa:	6871      	ldr	r1, [r6, #4]
   266ac:	4620      	mov	r0, r4
   266ae:	f7fe fddf 	bl	25270 <_Balloc>
   266b2:	4607      	mov	r7, r0
   266b4:	2800      	cmp	r0, #0
   266b6:	f000 80de 	beq.w	26876 <_dtoa_r+0xcbe>
   266ba:	6933      	ldr	r3, [r6, #16]
   266bc:	3302      	adds	r3, #2
   266be:	009a      	lsls	r2, r3, #2
   266c0:	f106 010c 	add.w	r1, r6, #12
   266c4:	300c      	adds	r0, #12
   266c6:	f7f2 fa67 	bl	18b98 <memcpy>
   266ca:	4639      	mov	r1, r7
   266cc:	2201      	movs	r2, #1
   266ce:	4620      	mov	r0, r4
   266d0:	f7fe ffdc 	bl	2568c <__lshift>
   266d4:	4680      	mov	r8, r0
   266d6:	e5fe      	b.n	262d6 <_dtoa_r+0x71e>
   266d8:	9b06      	ldr	r3, [sp, #24]
   266da:	eba3 0309 	sub.w	r3, r3, r9
   266de:	9309      	str	r3, [sp, #36]	; 0x24
   266e0:	e4da      	b.n	26098 <_dtoa_r+0x4e0>
   266e2:	2b39      	cmp	r3, #57	; 0x39
   266e4:	f000 808c 	beq.w	26800 <_dtoa_r+0xc48>
   266e8:	46b9      	mov	r9, r7
   266ea:	3301      	adds	r3, #1
   266ec:	e7c1      	b.n	26672 <_dtoa_r+0xaba>
   266ee:	9a04      	ldr	r2, [sp, #16]
   266f0:	3201      	adds	r2, #1
   266f2:	4637      	mov	r7, r6
   266f4:	9204      	str	r2, [sp, #16]
   266f6:	4646      	mov	r6, r8
   266f8:	e55f      	b.n	261ba <_dtoa_r+0x602>
   266fa:	4629      	mov	r1, r5
   266fc:	4620      	mov	r0, r4
   266fe:	f7fe ff65 	bl	255cc <__pow5mult>
   26702:	4605      	mov	r5, r0
   26704:	e4fa      	b.n	260fc <_dtoa_r+0x544>
   26706:	bf00      	nop
   26708:	20004314 	.word	0x20004314
   2670c:	200002a8 	.word	0x200002a8
   26710:	20000280 	.word	0x20000280
   26714:	7ff00000 	.word	0x7ff00000
   26718:	4b5e      	ldr	r3, [pc, #376]	; (26894 <_dtoa_r+0xcdc>)
   2671a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   2671e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   26722:	ed1c 3b02 	vldr	d3, [ip, #-8]
   26726:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   2672a:	ee36 7b47 	vsub.f64	d7, d6, d7
   2672e:	ec41 0b16 	vmov	d6, r0, r1
   26732:	ee15 1a90 	vmov	r1, s11
   26736:	ee23 3b06 	vmul.f64	d3, d3, d6
   2673a:	9800      	ldr	r0, [sp, #0]
   2673c:	3130      	adds	r1, #48	; 0x30
   2673e:	2a01      	cmp	r2, #1
   26740:	f800 1b01 	strb.w	r1, [r0], #1
   26744:	f000 8083 	beq.w	2684e <_dtoa_r+0xc96>
   26748:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   2674c:	9b00      	ldr	r3, [sp, #0]
   2674e:	1899      	adds	r1, r3, r2
   26750:	ee27 7b04 	vmul.f64	d7, d7, d4
   26754:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   26758:	ee16 3a90 	vmov	r3, s13
   2675c:	3330      	adds	r3, #48	; 0x30
   2675e:	f800 3b01 	strb.w	r3, [r0], #1
   26762:	4281      	cmp	r1, r0
   26764:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   26768:	ee37 7b45 	vsub.f64	d7, d7, d5
   2676c:	d1f0      	bne.n	26750 <_dtoa_r+0xb98>
   2676e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   26772:	ee33 5b06 	vadd.f64	d5, d3, d6
   26776:	eeb4 5bc7 	vcmpe.f64	d5, d7
   2677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2677e:	f53f abe3 	bmi.w	25f48 <_dtoa_r+0x390>
   26782:	ee36 6b43 	vsub.f64	d6, d6, d3
   26786:	eeb4 6bc7 	vcmpe.f64	d6, d7
   2678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2678e:	f77f ac0d 	ble.w	25fac <_dtoa_r+0x3f4>
   26792:	4689      	mov	r9, r1
   26794:	3901      	subs	r1, #1
   26796:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   2679a:	2b30      	cmp	r3, #48	; 0x30
   2679c:	d0f9      	beq.n	26792 <_dtoa_r+0xbda>
   2679e:	1c73      	adds	r3, r6, #1
   267a0:	9304      	str	r3, [sp, #16]
   267a2:	e539      	b.n	26218 <_dtoa_r+0x660>
   267a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   267a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   267aa:	e6da      	b.n	26562 <_dtoa_r+0x9aa>
   267ac:	2002      	movs	r0, #2
   267ae:	eeb0 6b48 	vmov.f64	d6, d8
   267b2:	f7ff bb48 	b.w	25e46 <_dtoa_r+0x28e>
   267b6:	f1b9 0f00 	cmp.w	r9, #0
   267ba:	f43f aeda 	beq.w	26572 <_dtoa_r+0x9ba>
   267be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   267c0:	2a00      	cmp	r2, #0
   267c2:	f77f abf3 	ble.w	25fac <_dtoa_r+0x3f4>
   267c6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   267ca:	ee26 6b04 	vmul.f64	d6, d6, d4
   267ce:	3001      	adds	r0, #1
   267d0:	ee07 0a90 	vmov	s15, r0
   267d4:	9b04      	ldr	r3, [sp, #16]
   267d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   267da:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   267de:	eea6 7b05 	vfma.f64	d7, d6, d5
   267e2:	ee17 ca90 	vmov	ip, s15
   267e6:	ec51 0b17 	vmov	r0, r1, d7
   267ea:	1e5e      	subs	r6, r3, #1
   267ec:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   267f0:	f7ff bb47 	b.w	25e82 <_dtoa_r+0x2ca>
   267f4:	9b04      	ldr	r3, [sp, #16]
   267f6:	3301      	adds	r3, #1
   267f8:	9304      	str	r3, [sp, #16]
   267fa:	2331      	movs	r3, #49	; 0x31
   267fc:	f7ff bbb1 	b.w	25f62 <_dtoa_r+0x3aa>
   26800:	9b04      	ldr	r3, [sp, #16]
   26802:	46bb      	mov	fp, r7
   26804:	3301      	adds	r3, #1
   26806:	9304      	str	r3, [sp, #16]
   26808:	2339      	movs	r3, #57	; 0x39
   2680a:	4637      	mov	r7, r6
   2680c:	f80b 3b01 	strb.w	r3, [fp], #1
   26810:	4646      	mov	r6, r8
   26812:	e4e1      	b.n	261d8 <_dtoa_r+0x620>
   26814:	f04f 0a00 	mov.w	sl, #0
   26818:	4656      	mov	r6, sl
   2681a:	e653      	b.n	264c4 <_dtoa_r+0x90c>
   2681c:	9208      	str	r2, [sp, #32]
   2681e:	e47b      	b.n	26118 <_dtoa_r+0x560>
   26820:	1c73      	adds	r3, r6, #1
   26822:	9304      	str	r3, [sp, #16]
   26824:	4689      	mov	r9, r1
   26826:	e4f7      	b.n	26218 <_dtoa_r+0x660>
   26828:	f47f af22 	bne.w	26670 <_dtoa_r+0xab8>
   2682c:	07da      	lsls	r2, r3, #31
   2682e:	f57f af1f 	bpl.w	26670 <_dtoa_r+0xab8>
   26832:	e718      	b.n	26666 <_dtoa_r+0xaae>
   26834:	2b39      	cmp	r3, #57	; 0x39
   26836:	d0e3      	beq.n	26800 <_dtoa_r+0xc48>
   26838:	f1b9 0f00 	cmp.w	r9, #0
   2683c:	f73f af16 	bgt.w	2666c <_dtoa_r+0xab4>
   26840:	e716      	b.n	26670 <_dtoa_r+0xab8>
   26842:	9b01      	ldr	r3, [sp, #4]
   26844:	2b02      	cmp	r3, #2
   26846:	f73f ae28 	bgt.w	2649a <_dtoa_r+0x8e2>
   2684a:	9704      	str	r7, [sp, #16]
   2684c:	e5ba      	b.n	263c4 <_dtoa_r+0x80c>
   2684e:	4601      	mov	r1, r0
   26850:	e78d      	b.n	2676e <_dtoa_r+0xbb6>
   26852:	9b01      	ldr	r3, [sp, #4]
   26854:	2b02      	cmp	r3, #2
   26856:	f73f ae20 	bgt.w	2649a <_dtoa_r+0x8e2>
   2685a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2685e:	9704      	str	r7, [sp, #16]
   26860:	e52b      	b.n	262ba <_dtoa_r+0x702>
   26862:	2002      	movs	r0, #2
   26864:	f7ff baef 	b.w	25e46 <_dtoa_r+0x28e>
   26868:	4b0b      	ldr	r3, [pc, #44]	; (26898 <_dtoa_r+0xce0>)
   2686a:	480c      	ldr	r0, [pc, #48]	; (2689c <_dtoa_r+0xce4>)
   2686c:	2200      	movs	r2, #0
   2686e:	f240 11af 	movw	r1, #431	; 0x1af
   26872:	f7fe f99b 	bl	24bac <__assert_func>
   26876:	4b08      	ldr	r3, [pc, #32]	; (26898 <_dtoa_r+0xce0>)
   26878:	4808      	ldr	r0, [pc, #32]	; (2689c <_dtoa_r+0xce4>)
   2687a:	463a      	mov	r2, r7
   2687c:	f240 21ef 	movw	r1, #751	; 0x2ef
   26880:	f7fe f994 	bl	24bac <__assert_func>
   26884:	4b06      	ldr	r3, [pc, #24]	; (268a0 <_dtoa_r+0xce8>)
   26886:	9300      	str	r3, [sp, #0]
   26888:	f7ff b9d2 	b.w	25c30 <_dtoa_r+0x78>
   2688c:	9b02      	ldr	r3, [sp, #8]
   2688e:	9308      	str	r3, [sp, #32]
   26890:	e4f7      	b.n	26282 <_dtoa_r+0x6ca>
   26892:	bf00      	nop
   26894:	200002a8 	.word	0x200002a8
   26898:	20004194 	.word	0x20004194
   2689c:	20004318 	.word	0x20004318
   268a0:	20004308 	.word	0x20004308

000268a4 <__sflush_r>:
   268a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   268a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268ac:	460c      	mov	r4, r1
   268ae:	0711      	lsls	r1, r2, #28
   268b0:	4680      	mov	r8, r0
   268b2:	d447      	bmi.n	26944 <__sflush_r+0xa0>
   268b4:	6863      	ldr	r3, [r4, #4]
   268b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   268ba:	2b00      	cmp	r3, #0
   268bc:	81a2      	strh	r2, [r4, #12]
   268be:	dd5e      	ble.n	2697e <__sflush_r+0xda>
   268c0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   268c2:	2d00      	cmp	r5, #0
   268c4:	d058      	beq.n	26978 <__sflush_r+0xd4>
   268c6:	2300      	movs	r3, #0
   268c8:	f8d8 6000 	ldr.w	r6, [r8]
   268cc:	f8c8 3000 	str.w	r3, [r8]
   268d0:	b293      	uxth	r3, r2
   268d2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   268d6:	d156      	bne.n	26986 <__sflush_r+0xe2>
   268d8:	2301      	movs	r3, #1
   268da:	69e1      	ldr	r1, [r4, #28]
   268dc:	4640      	mov	r0, r8
   268de:	47a8      	blx	r5
   268e0:	1c43      	adds	r3, r0, #1
   268e2:	d067      	beq.n	269b4 <__sflush_r+0x110>
   268e4:	89a3      	ldrh	r3, [r4, #12]
   268e6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   268e8:	075f      	lsls	r7, r3, #29
   268ea:	d505      	bpl.n	268f8 <__sflush_r+0x54>
   268ec:	6863      	ldr	r3, [r4, #4]
   268ee:	1ac0      	subs	r0, r0, r3
   268f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   268f2:	b10b      	cbz	r3, 268f8 <__sflush_r+0x54>
   268f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   268f6:	1ac0      	subs	r0, r0, r3
   268f8:	69e1      	ldr	r1, [r4, #28]
   268fa:	4602      	mov	r2, r0
   268fc:	2300      	movs	r3, #0
   268fe:	4640      	mov	r0, r8
   26900:	47a8      	blx	r5
   26902:	1c41      	adds	r1, r0, #1
   26904:	d141      	bne.n	2698a <__sflush_r+0xe6>
   26906:	f8d8 3000 	ldr.w	r3, [r8]
   2690a:	2b00      	cmp	r3, #0
   2690c:	d03d      	beq.n	2698a <__sflush_r+0xe6>
   2690e:	2b1d      	cmp	r3, #29
   26910:	d001      	beq.n	26916 <__sflush_r+0x72>
   26912:	2b16      	cmp	r3, #22
   26914:	d156      	bne.n	269c4 <__sflush_r+0x120>
   26916:	89a3      	ldrh	r3, [r4, #12]
   26918:	6922      	ldr	r2, [r4, #16]
   2691a:	6022      	str	r2, [r4, #0]
   2691c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   26920:	2100      	movs	r1, #0
   26922:	6061      	str	r1, [r4, #4]
   26924:	81a3      	strh	r3, [r4, #12]
   26926:	6b21      	ldr	r1, [r4, #48]	; 0x30
   26928:	f8c8 6000 	str.w	r6, [r8]
   2692c:	b321      	cbz	r1, 26978 <__sflush_r+0xd4>
   2692e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   26932:	4299      	cmp	r1, r3
   26934:	d002      	beq.n	2693c <__sflush_r+0x98>
   26936:	4640      	mov	r0, r8
   26938:	f000 fc8a 	bl	27250 <_free_r>
   2693c:	2000      	movs	r0, #0
   2693e:	6320      	str	r0, [r4, #48]	; 0x30
   26940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26944:	6926      	ldr	r6, [r4, #16]
   26946:	b1be      	cbz	r6, 26978 <__sflush_r+0xd4>
   26948:	b293      	uxth	r3, r2
   2694a:	6825      	ldr	r5, [r4, #0]
   2694c:	6026      	str	r6, [r4, #0]
   2694e:	079a      	lsls	r2, r3, #30
   26950:	bf0c      	ite	eq
   26952:	6963      	ldreq	r3, [r4, #20]
   26954:	2300      	movne	r3, #0
   26956:	1bad      	subs	r5, r5, r6
   26958:	60a3      	str	r3, [r4, #8]
   2695a:	e00b      	b.n	26974 <__sflush_r+0xd0>
   2695c:	462b      	mov	r3, r5
   2695e:	4632      	mov	r2, r6
   26960:	69e1      	ldr	r1, [r4, #28]
   26962:	6a67      	ldr	r7, [r4, #36]	; 0x24
   26964:	4640      	mov	r0, r8
   26966:	47b8      	blx	r7
   26968:	f1b0 0c00 	subs.w	ip, r0, #0
   2696c:	eba5 050c 	sub.w	r5, r5, ip
   26970:	4466      	add	r6, ip
   26972:	dd17      	ble.n	269a4 <__sflush_r+0x100>
   26974:	2d00      	cmp	r5, #0
   26976:	dcf1      	bgt.n	2695c <__sflush_r+0xb8>
   26978:	2000      	movs	r0, #0
   2697a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2697e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26980:	2b00      	cmp	r3, #0
   26982:	dc9d      	bgt.n	268c0 <__sflush_r+0x1c>
   26984:	e7f8      	b.n	26978 <__sflush_r+0xd4>
   26986:	6d20      	ldr	r0, [r4, #80]	; 0x50
   26988:	e7ae      	b.n	268e8 <__sflush_r+0x44>
   2698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2698e:	6922      	ldr	r2, [r4, #16]
   26990:	6022      	str	r2, [r4, #0]
   26992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   26996:	81a3      	strh	r3, [r4, #12]
   26998:	2200      	movs	r2, #0
   2699a:	04db      	lsls	r3, r3, #19
   2699c:	6062      	str	r2, [r4, #4]
   2699e:	d5c2      	bpl.n	26926 <__sflush_r+0x82>
   269a0:	6520      	str	r0, [r4, #80]	; 0x50
   269a2:	e7c0      	b.n	26926 <__sflush_r+0x82>
   269a4:	89a3      	ldrh	r3, [r4, #12]
   269a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   269aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   269ae:	81a3      	strh	r3, [r4, #12]
   269b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   269b4:	f8d8 3000 	ldr.w	r3, [r8]
   269b8:	2b00      	cmp	r3, #0
   269ba:	d093      	beq.n	268e4 <__sflush_r+0x40>
   269bc:	2b1d      	cmp	r3, #29
   269be:	d006      	beq.n	269ce <__sflush_r+0x12a>
   269c0:	2b16      	cmp	r3, #22
   269c2:	d004      	beq.n	269ce <__sflush_r+0x12a>
   269c4:	89a3      	ldrh	r3, [r4, #12]
   269c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   269ca:	81a3      	strh	r3, [r4, #12]
   269cc:	e7d5      	b.n	2697a <__sflush_r+0xd6>
   269ce:	f8c8 6000 	str.w	r6, [r8]
   269d2:	e7d1      	b.n	26978 <__sflush_r+0xd4>

000269d4 <_fflush_r>:
   269d4:	b538      	push	{r3, r4, r5, lr}
   269d6:	460c      	mov	r4, r1
   269d8:	4605      	mov	r5, r0
   269da:	b108      	cbz	r0, 269e0 <_fflush_r+0xc>
   269dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   269de:	b303      	cbz	r3, 26a22 <_fflush_r+0x4e>
   269e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   269e4:	b188      	cbz	r0, 26a0a <_fflush_r+0x36>
   269e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   269e8:	07db      	lsls	r3, r3, #31
   269ea:	d401      	bmi.n	269f0 <_fflush_r+0x1c>
   269ec:	0581      	lsls	r1, r0, #22
   269ee:	d50f      	bpl.n	26a10 <_fflush_r+0x3c>
   269f0:	4628      	mov	r0, r5
   269f2:	4621      	mov	r1, r4
   269f4:	f7ff ff56 	bl	268a4 <__sflush_r>
   269f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   269fa:	07da      	lsls	r2, r3, #31
   269fc:	4605      	mov	r5, r0
   269fe:	d402      	bmi.n	26a06 <_fflush_r+0x32>
   26a00:	89a3      	ldrh	r3, [r4, #12]
   26a02:	059b      	lsls	r3, r3, #22
   26a04:	d508      	bpl.n	26a18 <_fflush_r+0x44>
   26a06:	4628      	mov	r0, r5
   26a08:	bd38      	pop	{r3, r4, r5, pc}
   26a0a:	4605      	mov	r5, r0
   26a0c:	4628      	mov	r0, r5
   26a0e:	bd38      	pop	{r3, r4, r5, pc}
   26a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26a12:	f7fe f991 	bl	24d38 <__retarget_lock_acquire_recursive>
   26a16:	e7eb      	b.n	269f0 <_fflush_r+0x1c>
   26a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26a1a:	f7fe f98f 	bl	24d3c <__retarget_lock_release_recursive>
   26a1e:	4628      	mov	r0, r5
   26a20:	bd38      	pop	{r3, r4, r5, pc}
   26a22:	f000 f897 	bl	26b54 <__sinit>
   26a26:	e7db      	b.n	269e0 <_fflush_r+0xc>

00026a28 <stdio_exit_handler>:
   26a28:	4a02      	ldr	r2, [pc, #8]	; (26a34 <stdio_exit_handler+0xc>)
   26a2a:	4903      	ldr	r1, [pc, #12]	; (26a38 <stdio_exit_handler+0x10>)
   26a2c:	4803      	ldr	r0, [pc, #12]	; (26a3c <stdio_exit_handler+0x14>)
   26a2e:	f000 bdb7 	b.w	275a0 <_fwalk_sglue>
   26a32:	bf00      	nop
   26a34:	20005fd8 	.word	0x20005fd8
   26a38:	000288d1 	.word	0x000288d1
   26a3c:	20005900 	.word	0x20005900

00026a40 <cleanup_stdio>:
   26a40:	4b0c      	ldr	r3, [pc, #48]	; (26a74 <cleanup_stdio+0x34>)
   26a42:	6841      	ldr	r1, [r0, #4]
   26a44:	4299      	cmp	r1, r3
   26a46:	b510      	push	{r4, lr}
   26a48:	4604      	mov	r4, r0
   26a4a:	d001      	beq.n	26a50 <cleanup_stdio+0x10>
   26a4c:	f001 ff40 	bl	288d0 <_fclose_r>
   26a50:	68a1      	ldr	r1, [r4, #8]
   26a52:	4b09      	ldr	r3, [pc, #36]	; (26a78 <cleanup_stdio+0x38>)
   26a54:	4299      	cmp	r1, r3
   26a56:	d002      	beq.n	26a5e <cleanup_stdio+0x1e>
   26a58:	4620      	mov	r0, r4
   26a5a:	f001 ff39 	bl	288d0 <_fclose_r>
   26a5e:	68e1      	ldr	r1, [r4, #12]
   26a60:	4b06      	ldr	r3, [pc, #24]	; (26a7c <cleanup_stdio+0x3c>)
   26a62:	4299      	cmp	r1, r3
   26a64:	d004      	beq.n	26a70 <cleanup_stdio+0x30>
   26a66:	4620      	mov	r0, r4
   26a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26a6c:	f001 bf30 	b.w	288d0 <_fclose_r>
   26a70:	bd10      	pop	{r4, pc}
   26a72:	bf00      	nop
   26a74:	2000cd48 	.word	0x2000cd48
   26a78:	2000cdb0 	.word	0x2000cdb0
   26a7c:	2000ce18 	.word	0x2000ce18

00026a80 <global_stdio_init.part.0>:
   26a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a84:	4c2a      	ldr	r4, [pc, #168]	; (26b30 <global_stdio_init.part.0+0xb0>)
   26a86:	4b2b      	ldr	r3, [pc, #172]	; (26b34 <global_stdio_init.part.0+0xb4>)
   26a88:	482b      	ldr	r0, [pc, #172]	; (26b38 <global_stdio_init.part.0+0xb8>)
   26a8a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 26b4c <global_stdio_init.part.0+0xcc>
   26a8e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 26b50 <global_stdio_init.part.0+0xd0>
   26a92:	4f2a      	ldr	r7, [pc, #168]	; (26b3c <global_stdio_init.part.0+0xbc>)
   26a94:	6018      	str	r0, [r3, #0]
   26a96:	2500      	movs	r5, #0
   26a98:	2304      	movs	r3, #4
   26a9a:	2208      	movs	r2, #8
   26a9c:	4629      	mov	r1, r5
   26a9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   26aa2:	4e27      	ldr	r6, [pc, #156]	; (26b40 <global_stdio_init.part.0+0xc0>)
   26aa4:	6665      	str	r5, [r4, #100]	; 0x64
   26aa6:	e9c4 5302 	strd	r5, r3, [r4, #8]
   26aaa:	e9c4 5500 	strd	r5, r5, [r4]
   26aae:	e9c4 5504 	strd	r5, r5, [r4, #16]
   26ab2:	61a5      	str	r5, [r4, #24]
   26ab4:	f7fe f89a 	bl	24bec <memset>
   26ab8:	4b22      	ldr	r3, [pc, #136]	; (26b44 <global_stdio_init.part.0+0xc4>)
   26aba:	6763      	str	r3, [r4, #116]	; 0x74
   26abc:	2208      	movs	r2, #8
   26abe:	4629      	mov	r1, r5
   26ac0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   26ac4:	e9c4 4907 	strd	r4, r9, [r4, #28]
   26ac8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   26acc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   26ad0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   26ad4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   26ad8:	6725      	str	r5, [r4, #112]	; 0x70
   26ada:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   26ade:	62e6      	str	r6, [r4, #44]	; 0x2c
   26ae0:	f7fe f884 	bl	24bec <memset>
   26ae4:	4b18      	ldr	r3, [pc, #96]	; (26b48 <global_stdio_init.part.0+0xc8>)
   26ae6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   26aea:	4629      	mov	r1, r5
   26aec:	f104 0368 	add.w	r3, r4, #104	; 0x68
   26af0:	2208      	movs	r2, #8
   26af2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   26af6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   26afa:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   26afe:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   26b02:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   26b06:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   26b0a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   26b0e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   26b12:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   26b16:	f7fe f869 	bl	24bec <memset>
   26b1a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   26b1e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   26b22:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   26b26:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   26b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26b2e:	bf00      	nop
   26b30:	2000cd48 	.word	0x2000cd48
   26b34:	2000ce80 	.word	0x2000ce80
   26b38:	00026a29 	.word	0x00026a29
   26b3c:	00027539 	.word	0x00027539
   26b40:	00027559 	.word	0x00027559
   26b44:	00010009 	.word	0x00010009
   26b48:	00020012 	.word	0x00020012
   26b4c:	000274d5 	.word	0x000274d5
   26b50:	000274f9 	.word	0x000274f9

00026b54 <__sinit>:
   26b54:	b510      	push	{r4, lr}
   26b56:	4604      	mov	r4, r0
   26b58:	480a      	ldr	r0, [pc, #40]	; (26b84 <__sinit+0x30>)
   26b5a:	f7fe f8ed 	bl	24d38 <__retarget_lock_acquire_recursive>
   26b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26b60:	b923      	cbnz	r3, 26b6c <__sinit+0x18>
   26b62:	4b09      	ldr	r3, [pc, #36]	; (26b88 <__sinit+0x34>)
   26b64:	4a09      	ldr	r2, [pc, #36]	; (26b8c <__sinit+0x38>)
   26b66:	681b      	ldr	r3, [r3, #0]
   26b68:	6362      	str	r2, [r4, #52]	; 0x34
   26b6a:	b123      	cbz	r3, 26b76 <__sinit+0x22>
   26b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26b70:	4804      	ldr	r0, [pc, #16]	; (26b84 <__sinit+0x30>)
   26b72:	f7fe b8e3 	b.w	24d3c <__retarget_lock_release_recursive>
   26b76:	f7ff ff83 	bl	26a80 <global_stdio_init.part.0>
   26b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26b7e:	4801      	ldr	r0, [pc, #4]	; (26b84 <__sinit+0x30>)
   26b80:	f7fe b8dc 	b.w	24d3c <__retarget_lock_release_recursive>
   26b84:	2000cd10 	.word	0x2000cd10
   26b88:	2000ce80 	.word	0x2000ce80
   26b8c:	00026a41 	.word	0x00026a41

00026b90 <__sfp_lock_acquire>:
   26b90:	4801      	ldr	r0, [pc, #4]	; (26b98 <__sfp_lock_acquire+0x8>)
   26b92:	f7fe b8d1 	b.w	24d38 <__retarget_lock_acquire_recursive>
   26b96:	bf00      	nop
   26b98:	2000cd10 	.word	0x2000cd10

00026b9c <__sfp_lock_release>:
   26b9c:	4801      	ldr	r0, [pc, #4]	; (26ba4 <__sfp_lock_release+0x8>)
   26b9e:	f7fe b8cd 	b.w	24d3c <__retarget_lock_release_recursive>
   26ba2:	bf00      	nop
   26ba4:	2000cd10 	.word	0x2000cd10
	...

00026bb0 <memchr>:
   26bb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   26bb4:	2a10      	cmp	r2, #16
   26bb6:	db2b      	blt.n	26c10 <memchr+0x60>
   26bb8:	f010 0f07 	tst.w	r0, #7
   26bbc:	d008      	beq.n	26bd0 <memchr+0x20>
   26bbe:	f810 3b01 	ldrb.w	r3, [r0], #1
   26bc2:	3a01      	subs	r2, #1
   26bc4:	428b      	cmp	r3, r1
   26bc6:	d02d      	beq.n	26c24 <memchr+0x74>
   26bc8:	f010 0f07 	tst.w	r0, #7
   26bcc:	b342      	cbz	r2, 26c20 <memchr+0x70>
   26bce:	d1f6      	bne.n	26bbe <memchr+0xe>
   26bd0:	b4f0      	push	{r4, r5, r6, r7}
   26bd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   26bd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   26bda:	f022 0407 	bic.w	r4, r2, #7
   26bde:	f07f 0700 	mvns.w	r7, #0
   26be2:	2300      	movs	r3, #0
   26be4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   26be8:	3c08      	subs	r4, #8
   26bea:	ea85 0501 	eor.w	r5, r5, r1
   26bee:	ea86 0601 	eor.w	r6, r6, r1
   26bf2:	fa85 f547 	uadd8	r5, r5, r7
   26bf6:	faa3 f587 	sel	r5, r3, r7
   26bfa:	fa86 f647 	uadd8	r6, r6, r7
   26bfe:	faa5 f687 	sel	r6, r5, r7
   26c02:	b98e      	cbnz	r6, 26c28 <memchr+0x78>
   26c04:	d1ee      	bne.n	26be4 <memchr+0x34>
   26c06:	bcf0      	pop	{r4, r5, r6, r7}
   26c08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   26c0c:	f002 0207 	and.w	r2, r2, #7
   26c10:	b132      	cbz	r2, 26c20 <memchr+0x70>
   26c12:	f810 3b01 	ldrb.w	r3, [r0], #1
   26c16:	3a01      	subs	r2, #1
   26c18:	ea83 0301 	eor.w	r3, r3, r1
   26c1c:	b113      	cbz	r3, 26c24 <memchr+0x74>
   26c1e:	d1f8      	bne.n	26c12 <memchr+0x62>
   26c20:	2000      	movs	r0, #0
   26c22:	4770      	bx	lr
   26c24:	3801      	subs	r0, #1
   26c26:	4770      	bx	lr
   26c28:	2d00      	cmp	r5, #0
   26c2a:	bf06      	itte	eq
   26c2c:	4635      	moveq	r5, r6
   26c2e:	3803      	subeq	r0, #3
   26c30:	3807      	subne	r0, #7
   26c32:	f015 0f01 	tst.w	r5, #1
   26c36:	d107      	bne.n	26c48 <memchr+0x98>
   26c38:	3001      	adds	r0, #1
   26c3a:	f415 7f80 	tst.w	r5, #256	; 0x100
   26c3e:	bf02      	ittt	eq
   26c40:	3001      	addeq	r0, #1
   26c42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   26c46:	3001      	addeq	r0, #1
   26c48:	bcf0      	pop	{r4, r5, r6, r7}
   26c4a:	3801      	subs	r0, #1
   26c4c:	4770      	bx	lr
   26c4e:	bf00      	nop
	...

00026c80 <strlen>:
   26c80:	f890 f000 	pld	[r0]
   26c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   26c88:	f020 0107 	bic.w	r1, r0, #7
   26c8c:	f06f 0c00 	mvn.w	ip, #0
   26c90:	f010 0407 	ands.w	r4, r0, #7
   26c94:	f891 f020 	pld	[r1, #32]
   26c98:	f040 8049 	bne.w	26d2e <strlen+0xae>
   26c9c:	f04f 0400 	mov.w	r4, #0
   26ca0:	f06f 0007 	mvn.w	r0, #7
   26ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
   26ca8:	f891 f040 	pld	[r1, #64]	; 0x40
   26cac:	f100 0008 	add.w	r0, r0, #8
   26cb0:	fa82 f24c 	uadd8	r2, r2, ip
   26cb4:	faa4 f28c 	sel	r2, r4, ip
   26cb8:	fa83 f34c 	uadd8	r3, r3, ip
   26cbc:	faa2 f38c 	sel	r3, r2, ip
   26cc0:	bb4b      	cbnz	r3, 26d16 <strlen+0x96>
   26cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   26cc6:	fa82 f24c 	uadd8	r2, r2, ip
   26cca:	f100 0008 	add.w	r0, r0, #8
   26cce:	faa4 f28c 	sel	r2, r4, ip
   26cd2:	fa83 f34c 	uadd8	r3, r3, ip
   26cd6:	faa2 f38c 	sel	r3, r2, ip
   26cda:	b9e3      	cbnz	r3, 26d16 <strlen+0x96>
   26cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   26ce0:	fa82 f24c 	uadd8	r2, r2, ip
   26ce4:	f100 0008 	add.w	r0, r0, #8
   26ce8:	faa4 f28c 	sel	r2, r4, ip
   26cec:	fa83 f34c 	uadd8	r3, r3, ip
   26cf0:	faa2 f38c 	sel	r3, r2, ip
   26cf4:	b97b      	cbnz	r3, 26d16 <strlen+0x96>
   26cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   26cfa:	f101 0120 	add.w	r1, r1, #32
   26cfe:	fa82 f24c 	uadd8	r2, r2, ip
   26d02:	f100 0008 	add.w	r0, r0, #8
   26d06:	faa4 f28c 	sel	r2, r4, ip
   26d0a:	fa83 f34c 	uadd8	r3, r3, ip
   26d0e:	faa2 f38c 	sel	r3, r2, ip
   26d12:	2b00      	cmp	r3, #0
   26d14:	d0c6      	beq.n	26ca4 <strlen+0x24>
   26d16:	2a00      	cmp	r2, #0
   26d18:	bf04      	itt	eq
   26d1a:	3004      	addeq	r0, #4
   26d1c:	461a      	moveq	r2, r3
   26d1e:	ba12      	rev	r2, r2
   26d20:	fab2 f282 	clz	r2, r2
   26d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   26d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   26d2c:	4770      	bx	lr
   26d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   26d32:	f004 0503 	and.w	r5, r4, #3
   26d36:	f1c4 0000 	rsb	r0, r4, #0
   26d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   26d3e:	f014 0f04 	tst.w	r4, #4
   26d42:	f891 f040 	pld	[r1, #64]	; 0x40
   26d46:	fa0c f505 	lsl.w	r5, ip, r5
   26d4a:	ea62 0205 	orn	r2, r2, r5
   26d4e:	bf1c      	itt	ne
   26d50:	ea63 0305 	ornne	r3, r3, r5
   26d54:	4662      	movne	r2, ip
   26d56:	f04f 0400 	mov.w	r4, #0
   26d5a:	e7a9      	b.n	26cb0 <strlen+0x30>
   26d5c:	0000      	movs	r0, r0
	...

00026d60 <frexp>:
   26d60:	b430      	push	{r4, r5}
   26d62:	b082      	sub	sp, #8
   26d64:	ed8d 0b00 	vstr	d0, [sp]
   26d68:	9a01      	ldr	r2, [sp, #4]
   26d6a:	4c19      	ldr	r4, [pc, #100]	; (26dd0 <frexp+0x70>)
   26d6c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   26d70:	2100      	movs	r1, #0
   26d72:	42a3      	cmp	r3, r4
   26d74:	6001      	str	r1, [r0, #0]
   26d76:	dc21      	bgt.n	26dbc <frexp+0x5c>
   26d78:	9c00      	ldr	r4, [sp, #0]
   26d7a:	431c      	orrs	r4, r3
   26d7c:	d01e      	beq.n	26dbc <frexp+0x5c>
   26d7e:	4c15      	ldr	r4, [pc, #84]	; (26dd4 <frexp+0x74>)
   26d80:	4014      	ands	r4, r2
   26d82:	b954      	cbnz	r4, 26d9a <frexp+0x3a>
   26d84:	ed9f 7b10 	vldr	d7, [pc, #64]	; 26dc8 <frexp+0x68>
   26d88:	ee20 7b07 	vmul.f64	d7, d0, d7
   26d8c:	ed8d 7b00 	vstr	d7, [sp]
   26d90:	9a01      	ldr	r2, [sp, #4]
   26d92:	f06f 0135 	mvn.w	r1, #53	; 0x35
   26d96:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   26d9a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   26d9e:	e9dd 4500 	ldrd	r4, r5, [sp]
   26da2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   26da6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   26daa:	151b      	asrs	r3, r3, #20
   26dac:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   26db0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   26db4:	e9cd 4500 	strd	r4, r5, [sp]
   26db8:	440b      	add	r3, r1
   26dba:	6003      	str	r3, [r0, #0]
   26dbc:	ed9d 0b00 	vldr	d0, [sp]
   26dc0:	b002      	add	sp, #8
   26dc2:	bc30      	pop	{r4, r5}
   26dc4:	4770      	bx	lr
   26dc6:	bf00      	nop
   26dc8:	00000000 	.word	0x00000000
   26dcc:	43500000 	.word	0x43500000
   26dd0:	7fefffff 	.word	0x7fefffff
   26dd4:	7ff00000 	.word	0x7ff00000

00026dd8 <_realloc_r>:
   26dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ddc:	4617      	mov	r7, r2
   26dde:	2900      	cmp	r1, #0
   26de0:	f000 8098 	beq.w	26f14 <_realloc_r+0x13c>
   26de4:	460c      	mov	r4, r1
   26de6:	f107 050b 	add.w	r5, r7, #11
   26dea:	4680      	mov	r8, r0
   26dec:	f7fe fa34 	bl	25258 <__malloc_lock>
   26df0:	2d16      	cmp	r5, #22
   26df2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   26df6:	d85b      	bhi.n	26eb0 <_realloc_r+0xd8>
   26df8:	2510      	movs	r5, #16
   26dfa:	462a      	mov	r2, r5
   26dfc:	42af      	cmp	r7, r5
   26dfe:	d85c      	bhi.n	26eba <_realloc_r+0xe2>
   26e00:	f021 0603 	bic.w	r6, r1, #3
   26e04:	4296      	cmp	r6, r2
   26e06:	f1a4 0908 	sub.w	r9, r4, #8
   26e0a:	da62      	bge.n	26ed2 <_realloc_r+0xfa>
   26e0c:	4bbc      	ldr	r3, [pc, #752]	; (27100 <_realloc_r+0x328>)
   26e0e:	f8d3 c008 	ldr.w	ip, [r3, #8]
   26e12:	eb09 0006 	add.w	r0, r9, r6
   26e16:	4584      	cmp	ip, r0
   26e18:	f000 8097 	beq.w	26f4a <_realloc_r+0x172>
   26e1c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   26e20:	f02c 0301 	bic.w	r3, ip, #1
   26e24:	4403      	add	r3, r0
   26e26:	685b      	ldr	r3, [r3, #4]
   26e28:	07db      	lsls	r3, r3, #31
   26e2a:	d468      	bmi.n	26efe <_realloc_r+0x126>
   26e2c:	f02c 0c03 	bic.w	ip, ip, #3
   26e30:	eb06 030c 	add.w	r3, r6, ip
   26e34:	4293      	cmp	r3, r2
   26e36:	da47      	bge.n	26ec8 <_realloc_r+0xf0>
   26e38:	07cb      	lsls	r3, r1, #31
   26e3a:	d410      	bmi.n	26e5e <_realloc_r+0x86>
   26e3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26e40:	eba9 0a03 	sub.w	sl, r9, r3
   26e44:	f8da 3004 	ldr.w	r3, [sl, #4]
   26e48:	f023 0103 	bic.w	r1, r3, #3
   26e4c:	448c      	add	ip, r1
   26e4e:	44b4      	add	ip, r6
   26e50:	4594      	cmp	ip, r2
   26e52:	f280 8111 	bge.w	27078 <_realloc_r+0x2a0>
   26e56:	1873      	adds	r3, r6, r1
   26e58:	4293      	cmp	r3, r2
   26e5a:	f280 80e8 	bge.w	2702e <_realloc_r+0x256>
   26e5e:	4639      	mov	r1, r7
   26e60:	4640      	mov	r0, r8
   26e62:	f7fd fb47 	bl	244f4 <_malloc_r>
   26e66:	4607      	mov	r7, r0
   26e68:	b1e0      	cbz	r0, 26ea4 <_realloc_r+0xcc>
   26e6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26e6e:	f023 0301 	bic.w	r3, r3, #1
   26e72:	444b      	add	r3, r9
   26e74:	f1a0 0208 	sub.w	r2, r0, #8
   26e78:	4293      	cmp	r3, r2
   26e7a:	f000 80d2 	beq.w	27022 <_realloc_r+0x24a>
   26e7e:	1f32      	subs	r2, r6, #4
   26e80:	2a24      	cmp	r2, #36	; 0x24
   26e82:	f200 80f5 	bhi.w	27070 <_realloc_r+0x298>
   26e86:	2a13      	cmp	r2, #19
   26e88:	f200 80ac 	bhi.w	26fe4 <_realloc_r+0x20c>
   26e8c:	4603      	mov	r3, r0
   26e8e:	4622      	mov	r2, r4
   26e90:	6811      	ldr	r1, [r2, #0]
   26e92:	6019      	str	r1, [r3, #0]
   26e94:	6851      	ldr	r1, [r2, #4]
   26e96:	6059      	str	r1, [r3, #4]
   26e98:	6892      	ldr	r2, [r2, #8]
   26e9a:	609a      	str	r2, [r3, #8]
   26e9c:	4621      	mov	r1, r4
   26e9e:	4640      	mov	r0, r8
   26ea0:	f000 f9d6 	bl	27250 <_free_r>
   26ea4:	4640      	mov	r0, r8
   26ea6:	f7fe f9dd 	bl	25264 <__malloc_unlock>
   26eaa:	4638      	mov	r0, r7
   26eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eb0:	f025 0507 	bic.w	r5, r5, #7
   26eb4:	2d00      	cmp	r5, #0
   26eb6:	462a      	mov	r2, r5
   26eb8:	daa0      	bge.n	26dfc <_realloc_r+0x24>
   26eba:	230c      	movs	r3, #12
   26ebc:	f8c8 3000 	str.w	r3, [r8]
   26ec0:	2700      	movs	r7, #0
   26ec2:	4638      	mov	r0, r7
   26ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ec8:	461e      	mov	r6, r3
   26eca:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   26ece:	60d3      	str	r3, [r2, #12]
   26ed0:	609a      	str	r2, [r3, #8]
   26ed2:	1b73      	subs	r3, r6, r5
   26ed4:	2b0f      	cmp	r3, #15
   26ed6:	d822      	bhi.n	26f1e <_realloc_r+0x146>
   26ed8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   26edc:	f003 0301 	and.w	r3, r3, #1
   26ee0:	4333      	orrs	r3, r6
   26ee2:	444e      	add	r6, r9
   26ee4:	f8c9 3004 	str.w	r3, [r9, #4]
   26ee8:	6873      	ldr	r3, [r6, #4]
   26eea:	f043 0301 	orr.w	r3, r3, #1
   26eee:	6073      	str	r3, [r6, #4]
   26ef0:	4640      	mov	r0, r8
   26ef2:	4627      	mov	r7, r4
   26ef4:	f7fe f9b6 	bl	25264 <__malloc_unlock>
   26ef8:	4638      	mov	r0, r7
   26efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26efe:	07c9      	lsls	r1, r1, #31
   26f00:	d4ad      	bmi.n	26e5e <_realloc_r+0x86>
   26f02:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26f06:	eba9 0a03 	sub.w	sl, r9, r3
   26f0a:	f8da 1004 	ldr.w	r1, [sl, #4]
   26f0e:	f021 0103 	bic.w	r1, r1, #3
   26f12:	e7a0      	b.n	26e56 <_realloc_r+0x7e>
   26f14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f18:	4611      	mov	r1, r2
   26f1a:	f7fd baeb 	b.w	244f4 <_malloc_r>
   26f1e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   26f22:	eb09 0105 	add.w	r1, r9, r5
   26f26:	f002 0201 	and.w	r2, r2, #1
   26f2a:	444e      	add	r6, r9
   26f2c:	f043 0301 	orr.w	r3, r3, #1
   26f30:	432a      	orrs	r2, r5
   26f32:	f8c9 2004 	str.w	r2, [r9, #4]
   26f36:	604b      	str	r3, [r1, #4]
   26f38:	6873      	ldr	r3, [r6, #4]
   26f3a:	f043 0301 	orr.w	r3, r3, #1
   26f3e:	3108      	adds	r1, #8
   26f40:	6073      	str	r3, [r6, #4]
   26f42:	4640      	mov	r0, r8
   26f44:	f000 f984 	bl	27250 <_free_r>
   26f48:	e7d2      	b.n	26ef0 <_realloc_r+0x118>
   26f4a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   26f4e:	f020 0b03 	bic.w	fp, r0, #3
   26f52:	eb06 0c0b 	add.w	ip, r6, fp
   26f56:	f105 0010 	add.w	r0, r5, #16
   26f5a:	4584      	cmp	ip, r0
   26f5c:	da4d      	bge.n	26ffa <_realloc_r+0x222>
   26f5e:	07c9      	lsls	r1, r1, #31
   26f60:	f53f af7d 	bmi.w	26e5e <_realloc_r+0x86>
   26f64:	f854 1c08 	ldr.w	r1, [r4, #-8]
   26f68:	eba9 0a01 	sub.w	sl, r9, r1
   26f6c:	f8da 1004 	ldr.w	r1, [sl, #4]
   26f70:	f021 0103 	bic.w	r1, r1, #3
   26f74:	448b      	add	fp, r1
   26f76:	44b3      	add	fp, r6
   26f78:	4558      	cmp	r0, fp
   26f7a:	f73f af6c 	bgt.w	26e56 <_realloc_r+0x7e>
   26f7e:	4657      	mov	r7, sl
   26f80:	f8da 100c 	ldr.w	r1, [sl, #12]
   26f84:	f857 0f08 	ldr.w	r0, [r7, #8]!
   26f88:	1f32      	subs	r2, r6, #4
   26f8a:	2a24      	cmp	r2, #36	; 0x24
   26f8c:	60c1      	str	r1, [r0, #12]
   26f8e:	6088      	str	r0, [r1, #8]
   26f90:	f200 80db 	bhi.w	2714a <_realloc_r+0x372>
   26f94:	2a13      	cmp	r2, #19
   26f96:	f240 80d6 	bls.w	27146 <_realloc_r+0x36e>
   26f9a:	6821      	ldr	r1, [r4, #0]
   26f9c:	f8ca 1008 	str.w	r1, [sl, #8]
   26fa0:	6861      	ldr	r1, [r4, #4]
   26fa2:	f8ca 100c 	str.w	r1, [sl, #12]
   26fa6:	2a1b      	cmp	r2, #27
   26fa8:	f200 80df 	bhi.w	2716a <_realloc_r+0x392>
   26fac:	3408      	adds	r4, #8
   26fae:	f10a 0210 	add.w	r2, sl, #16
   26fb2:	6821      	ldr	r1, [r4, #0]
   26fb4:	6011      	str	r1, [r2, #0]
   26fb6:	6861      	ldr	r1, [r4, #4]
   26fb8:	6051      	str	r1, [r2, #4]
   26fba:	68a1      	ldr	r1, [r4, #8]
   26fbc:	6091      	str	r1, [r2, #8]
   26fbe:	eb0a 0105 	add.w	r1, sl, r5
   26fc2:	ebab 0205 	sub.w	r2, fp, r5
   26fc6:	f042 0201 	orr.w	r2, r2, #1
   26fca:	6099      	str	r1, [r3, #8]
   26fcc:	604a      	str	r2, [r1, #4]
   26fce:	f8da 3004 	ldr.w	r3, [sl, #4]
   26fd2:	f003 0301 	and.w	r3, r3, #1
   26fd6:	432b      	orrs	r3, r5
   26fd8:	4640      	mov	r0, r8
   26fda:	f8ca 3004 	str.w	r3, [sl, #4]
   26fde:	f7fe f941 	bl	25264 <__malloc_unlock>
   26fe2:	e76e      	b.n	26ec2 <_realloc_r+0xea>
   26fe4:	6823      	ldr	r3, [r4, #0]
   26fe6:	6003      	str	r3, [r0, #0]
   26fe8:	6863      	ldr	r3, [r4, #4]
   26fea:	6043      	str	r3, [r0, #4]
   26fec:	2a1b      	cmp	r2, #27
   26fee:	d868      	bhi.n	270c2 <_realloc_r+0x2ea>
   26ff0:	f104 0208 	add.w	r2, r4, #8
   26ff4:	f100 0308 	add.w	r3, r0, #8
   26ff8:	e74a      	b.n	26e90 <_realloc_r+0xb8>
   26ffa:	eb09 0205 	add.w	r2, r9, r5
   26ffe:	609a      	str	r2, [r3, #8]
   27000:	ebac 0305 	sub.w	r3, ip, r5
   27004:	f043 0301 	orr.w	r3, r3, #1
   27008:	6053      	str	r3, [r2, #4]
   2700a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2700e:	f003 0301 	and.w	r3, r3, #1
   27012:	432b      	orrs	r3, r5
   27014:	4640      	mov	r0, r8
   27016:	f844 3c04 	str.w	r3, [r4, #-4]
   2701a:	f7fe f923 	bl	25264 <__malloc_unlock>
   2701e:	4627      	mov	r7, r4
   27020:	e74f      	b.n	26ec2 <_realloc_r+0xea>
   27022:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27026:	f023 0303 	bic.w	r3, r3, #3
   2702a:	441e      	add	r6, r3
   2702c:	e751      	b.n	26ed2 <_realloc_r+0xfa>
   2702e:	4657      	mov	r7, sl
   27030:	f8da 100c 	ldr.w	r1, [sl, #12]
   27034:	f857 0f08 	ldr.w	r0, [r7, #8]!
   27038:	1f32      	subs	r2, r6, #4
   2703a:	2a24      	cmp	r2, #36	; 0x24
   2703c:	60c1      	str	r1, [r0, #12]
   2703e:	6088      	str	r0, [r1, #8]
   27040:	d84c      	bhi.n	270dc <_realloc_r+0x304>
   27042:	2a13      	cmp	r2, #19
   27044:	d948      	bls.n	270d8 <_realloc_r+0x300>
   27046:	6821      	ldr	r1, [r4, #0]
   27048:	f8ca 1008 	str.w	r1, [sl, #8]
   2704c:	6861      	ldr	r1, [r4, #4]
   2704e:	f8ca 100c 	str.w	r1, [sl, #12]
   27052:	2a1b      	cmp	r2, #27
   27054:	d856      	bhi.n	27104 <_realloc_r+0x32c>
   27056:	3408      	adds	r4, #8
   27058:	f10a 0210 	add.w	r2, sl, #16
   2705c:	461e      	mov	r6, r3
   2705e:	6823      	ldr	r3, [r4, #0]
   27060:	6013      	str	r3, [r2, #0]
   27062:	6863      	ldr	r3, [r4, #4]
   27064:	6053      	str	r3, [r2, #4]
   27066:	68a3      	ldr	r3, [r4, #8]
   27068:	6093      	str	r3, [r2, #8]
   2706a:	46d1      	mov	r9, sl
   2706c:	463c      	mov	r4, r7
   2706e:	e730      	b.n	26ed2 <_realloc_r+0xfa>
   27070:	4621      	mov	r1, r4
   27072:	f7fd fd1f 	bl	24ab4 <memmove>
   27076:	e711      	b.n	26e9c <_realloc_r+0xc4>
   27078:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   2707c:	4657      	mov	r7, sl
   2707e:	60cb      	str	r3, [r1, #12]
   27080:	6099      	str	r1, [r3, #8]
   27082:	f857 1f08 	ldr.w	r1, [r7, #8]!
   27086:	f8da 300c 	ldr.w	r3, [sl, #12]
   2708a:	60cb      	str	r3, [r1, #12]
   2708c:	1f32      	subs	r2, r6, #4
   2708e:	2a24      	cmp	r2, #36	; 0x24
   27090:	6099      	str	r1, [r3, #8]
   27092:	d82d      	bhi.n	270f0 <_realloc_r+0x318>
   27094:	2a13      	cmp	r2, #19
   27096:	d929      	bls.n	270ec <_realloc_r+0x314>
   27098:	6823      	ldr	r3, [r4, #0]
   2709a:	f8ca 3008 	str.w	r3, [sl, #8]
   2709e:	6863      	ldr	r3, [r4, #4]
   270a0:	f8ca 300c 	str.w	r3, [sl, #12]
   270a4:	2a1b      	cmp	r2, #27
   270a6:	d842      	bhi.n	2712e <_realloc_r+0x356>
   270a8:	3408      	adds	r4, #8
   270aa:	f10a 0310 	add.w	r3, sl, #16
   270ae:	6822      	ldr	r2, [r4, #0]
   270b0:	601a      	str	r2, [r3, #0]
   270b2:	6862      	ldr	r2, [r4, #4]
   270b4:	605a      	str	r2, [r3, #4]
   270b6:	68a2      	ldr	r2, [r4, #8]
   270b8:	609a      	str	r2, [r3, #8]
   270ba:	4666      	mov	r6, ip
   270bc:	46d1      	mov	r9, sl
   270be:	463c      	mov	r4, r7
   270c0:	e707      	b.n	26ed2 <_realloc_r+0xfa>
   270c2:	68a3      	ldr	r3, [r4, #8]
   270c4:	6083      	str	r3, [r0, #8]
   270c6:	68e3      	ldr	r3, [r4, #12]
   270c8:	60c3      	str	r3, [r0, #12]
   270ca:	2a24      	cmp	r2, #36	; 0x24
   270cc:	d026      	beq.n	2711c <_realloc_r+0x344>
   270ce:	f104 0210 	add.w	r2, r4, #16
   270d2:	f100 0310 	add.w	r3, r0, #16
   270d6:	e6db      	b.n	26e90 <_realloc_r+0xb8>
   270d8:	463a      	mov	r2, r7
   270da:	e7bf      	b.n	2705c <_realloc_r+0x284>
   270dc:	4621      	mov	r1, r4
   270de:	4638      	mov	r0, r7
   270e0:	461e      	mov	r6, r3
   270e2:	46d1      	mov	r9, sl
   270e4:	f7fd fce6 	bl	24ab4 <memmove>
   270e8:	463c      	mov	r4, r7
   270ea:	e6f2      	b.n	26ed2 <_realloc_r+0xfa>
   270ec:	463b      	mov	r3, r7
   270ee:	e7de      	b.n	270ae <_realloc_r+0x2d6>
   270f0:	4621      	mov	r1, r4
   270f2:	4638      	mov	r0, r7
   270f4:	4666      	mov	r6, ip
   270f6:	46d1      	mov	r9, sl
   270f8:	f7fd fcdc 	bl	24ab4 <memmove>
   270fc:	463c      	mov	r4, r7
   270fe:	e6e8      	b.n	26ed2 <_realloc_r+0xfa>
   27100:	20005bc8 	.word	0x20005bc8
   27104:	68a1      	ldr	r1, [r4, #8]
   27106:	f8ca 1010 	str.w	r1, [sl, #16]
   2710a:	68e1      	ldr	r1, [r4, #12]
   2710c:	f8ca 1014 	str.w	r1, [sl, #20]
   27110:	2a24      	cmp	r2, #36	; 0x24
   27112:	d020      	beq.n	27156 <_realloc_r+0x37e>
   27114:	3410      	adds	r4, #16
   27116:	f10a 0218 	add.w	r2, sl, #24
   2711a:	e79f      	b.n	2705c <_realloc_r+0x284>
   2711c:	6923      	ldr	r3, [r4, #16]
   2711e:	6103      	str	r3, [r0, #16]
   27120:	6961      	ldr	r1, [r4, #20]
   27122:	6141      	str	r1, [r0, #20]
   27124:	f104 0218 	add.w	r2, r4, #24
   27128:	f100 0318 	add.w	r3, r0, #24
   2712c:	e6b0      	b.n	26e90 <_realloc_r+0xb8>
   2712e:	68a3      	ldr	r3, [r4, #8]
   27130:	f8ca 3010 	str.w	r3, [sl, #16]
   27134:	68e3      	ldr	r3, [r4, #12]
   27136:	f8ca 3014 	str.w	r3, [sl, #20]
   2713a:	2a24      	cmp	r2, #36	; 0x24
   2713c:	d021      	beq.n	27182 <_realloc_r+0x3aa>
   2713e:	3410      	adds	r4, #16
   27140:	f10a 0318 	add.w	r3, sl, #24
   27144:	e7b3      	b.n	270ae <_realloc_r+0x2d6>
   27146:	463a      	mov	r2, r7
   27148:	e733      	b.n	26fb2 <_realloc_r+0x1da>
   2714a:	4621      	mov	r1, r4
   2714c:	4638      	mov	r0, r7
   2714e:	f7fd fcb1 	bl	24ab4 <memmove>
   27152:	4b16      	ldr	r3, [pc, #88]	; (271ac <_realloc_r+0x3d4>)
   27154:	e733      	b.n	26fbe <_realloc_r+0x1e6>
   27156:	6922      	ldr	r2, [r4, #16]
   27158:	f8ca 2018 	str.w	r2, [sl, #24]
   2715c:	6962      	ldr	r2, [r4, #20]
   2715e:	f8ca 201c 	str.w	r2, [sl, #28]
   27162:	3418      	adds	r4, #24
   27164:	f10a 0220 	add.w	r2, sl, #32
   27168:	e778      	b.n	2705c <_realloc_r+0x284>
   2716a:	68a1      	ldr	r1, [r4, #8]
   2716c:	f8ca 1010 	str.w	r1, [sl, #16]
   27170:	68e1      	ldr	r1, [r4, #12]
   27172:	f8ca 1014 	str.w	r1, [sl, #20]
   27176:	2a24      	cmp	r2, #36	; 0x24
   27178:	d00d      	beq.n	27196 <_realloc_r+0x3be>
   2717a:	3410      	adds	r4, #16
   2717c:	f10a 0218 	add.w	r2, sl, #24
   27180:	e717      	b.n	26fb2 <_realloc_r+0x1da>
   27182:	6923      	ldr	r3, [r4, #16]
   27184:	f8ca 3018 	str.w	r3, [sl, #24]
   27188:	6963      	ldr	r3, [r4, #20]
   2718a:	f8ca 301c 	str.w	r3, [sl, #28]
   2718e:	3418      	adds	r4, #24
   27190:	f10a 0320 	add.w	r3, sl, #32
   27194:	e78b      	b.n	270ae <_realloc_r+0x2d6>
   27196:	6922      	ldr	r2, [r4, #16]
   27198:	f8ca 2018 	str.w	r2, [sl, #24]
   2719c:	6962      	ldr	r2, [r4, #20]
   2719e:	f8ca 201c 	str.w	r2, [sl, #28]
   271a2:	3418      	adds	r4, #24
   271a4:	f10a 0220 	add.w	r2, sl, #32
   271a8:	e703      	b.n	26fb2 <_realloc_r+0x1da>
   271aa:	bf00      	nop
   271ac:	20005bc8 	.word	0x20005bc8

000271b0 <_malloc_trim_r>:
   271b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271b2:	4f24      	ldr	r7, [pc, #144]	; (27244 <_malloc_trim_r+0x94>)
   271b4:	460c      	mov	r4, r1
   271b6:	4606      	mov	r6, r0
   271b8:	f7fe f84e 	bl	25258 <__malloc_lock>
   271bc:	68bb      	ldr	r3, [r7, #8]
   271be:	685d      	ldr	r5, [r3, #4]
   271c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   271c4:	310f      	adds	r1, #15
   271c6:	f025 0503 	bic.w	r5, r5, #3
   271ca:	194b      	adds	r3, r1, r5
   271cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   271d0:	f023 030f 	bic.w	r3, r3, #15
   271d4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   271d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   271dc:	db07      	blt.n	271ee <_malloc_trim_r+0x3e>
   271de:	2100      	movs	r1, #0
   271e0:	4630      	mov	r0, r6
   271e2:	f000 f9cb 	bl	2757c <_sbrk_r>
   271e6:	68bb      	ldr	r3, [r7, #8]
   271e8:	442b      	add	r3, r5
   271ea:	4298      	cmp	r0, r3
   271ec:	d004      	beq.n	271f8 <_malloc_trim_r+0x48>
   271ee:	4630      	mov	r0, r6
   271f0:	f7fe f838 	bl	25264 <__malloc_unlock>
   271f4:	2000      	movs	r0, #0
   271f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   271f8:	4261      	negs	r1, r4
   271fa:	4630      	mov	r0, r6
   271fc:	f000 f9be 	bl	2757c <_sbrk_r>
   27200:	3001      	adds	r0, #1
   27202:	d00d      	beq.n	27220 <_malloc_trim_r+0x70>
   27204:	4a10      	ldr	r2, [pc, #64]	; (27248 <_malloc_trim_r+0x98>)
   27206:	68bb      	ldr	r3, [r7, #8]
   27208:	1b2d      	subs	r5, r5, r4
   2720a:	f045 0501 	orr.w	r5, r5, #1
   2720e:	605d      	str	r5, [r3, #4]
   27210:	6813      	ldr	r3, [r2, #0]
   27212:	4630      	mov	r0, r6
   27214:	1b1b      	subs	r3, r3, r4
   27216:	6013      	str	r3, [r2, #0]
   27218:	f7fe f824 	bl	25264 <__malloc_unlock>
   2721c:	2001      	movs	r0, #1
   2721e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27220:	2100      	movs	r1, #0
   27222:	4630      	mov	r0, r6
   27224:	f000 f9aa 	bl	2757c <_sbrk_r>
   27228:	68ba      	ldr	r2, [r7, #8]
   2722a:	1a83      	subs	r3, r0, r2
   2722c:	2b0f      	cmp	r3, #15
   2722e:	ddde      	ble.n	271ee <_malloc_trim_r+0x3e>
   27230:	f043 0301 	orr.w	r3, r3, #1
   27234:	6053      	str	r3, [r2, #4]
   27236:	4b05      	ldr	r3, [pc, #20]	; (2724c <_malloc_trim_r+0x9c>)
   27238:	4903      	ldr	r1, [pc, #12]	; (27248 <_malloc_trim_r+0x98>)
   2723a:	681b      	ldr	r3, [r3, #0]
   2723c:	1ac0      	subs	r0, r0, r3
   2723e:	6008      	str	r0, [r1, #0]
   27240:	e7d5      	b.n	271ee <_malloc_trim_r+0x3e>
   27242:	bf00      	nop
   27244:	20005bc8 	.word	0x20005bc8
   27248:	2000cd14 	.word	0x2000cd14
   2724c:	20005fd0 	.word	0x20005fd0

00027250 <_free_r>:
   27250:	2900      	cmp	r1, #0
   27252:	d061      	beq.n	27318 <_free_r+0xc8>
   27254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27256:	460c      	mov	r4, r1
   27258:	4606      	mov	r6, r0
   2725a:	f7fd fffd 	bl	25258 <__malloc_lock>
   2725e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   27262:	4f7b      	ldr	r7, [pc, #492]	; (27450 <_free_r+0x200>)
   27264:	f1a4 0508 	sub.w	r5, r4, #8
   27268:	f022 0101 	bic.w	r1, r2, #1
   2726c:	eb05 0c01 	add.w	ip, r5, r1
   27270:	68b8      	ldr	r0, [r7, #8]
   27272:	f8dc 3004 	ldr.w	r3, [ip, #4]
   27276:	4560      	cmp	r0, ip
   27278:	f023 0303 	bic.w	r3, r3, #3
   2727c:	f000 808b 	beq.w	27396 <_free_r+0x146>
   27280:	07d2      	lsls	r2, r2, #31
   27282:	f8cc 3004 	str.w	r3, [ip, #4]
   27286:	d432      	bmi.n	272ee <_free_r+0x9e>
   27288:	f854 2c08 	ldr.w	r2, [r4, #-8]
   2728c:	1aad      	subs	r5, r5, r2
   2728e:	4411      	add	r1, r2
   27290:	68aa      	ldr	r2, [r5, #8]
   27292:	f107 0008 	add.w	r0, r7, #8
   27296:	4282      	cmp	r2, r0
   27298:	d06a      	beq.n	27370 <_free_r+0x120>
   2729a:	eb0c 0403 	add.w	r4, ip, r3
   2729e:	f8d4 e004 	ldr.w	lr, [r4, #4]
   272a2:	68ec      	ldr	r4, [r5, #12]
   272a4:	60d4      	str	r4, [r2, #12]
   272a6:	f01e 0f01 	tst.w	lr, #1
   272aa:	60a2      	str	r2, [r4, #8]
   272ac:	f000 8097 	beq.w	273de <_free_r+0x18e>
   272b0:	f041 0301 	orr.w	r3, r1, #1
   272b4:	606b      	str	r3, [r5, #4]
   272b6:	f8cc 1000 	str.w	r1, [ip]
   272ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   272be:	d235      	bcs.n	2732c <_free_r+0xdc>
   272c0:	6878      	ldr	r0, [r7, #4]
   272c2:	08cb      	lsrs	r3, r1, #3
   272c4:	2201      	movs	r2, #1
   272c6:	0949      	lsrs	r1, r1, #5
   272c8:	3301      	adds	r3, #1
   272ca:	408a      	lsls	r2, r1
   272cc:	4302      	orrs	r2, r0
   272ce:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   272d2:	607a      	str	r2, [r7, #4]
   272d4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   272d8:	3a08      	subs	r2, #8
   272da:	e9c5 1202 	strd	r1, r2, [r5, #8]
   272de:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   272e2:	60cd      	str	r5, [r1, #12]
   272e4:	4630      	mov	r0, r6
   272e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   272ea:	f7fd bfbb 	b.w	25264 <__malloc_unlock>
   272ee:	eb0c 0203 	add.w	r2, ip, r3
   272f2:	6852      	ldr	r2, [r2, #4]
   272f4:	07d0      	lsls	r0, r2, #31
   272f6:	d410      	bmi.n	2731a <_free_r+0xca>
   272f8:	4419      	add	r1, r3
   272fa:	f107 0008 	add.w	r0, r7, #8
   272fe:	f8dc 3008 	ldr.w	r3, [ip, #8]
   27302:	4283      	cmp	r3, r0
   27304:	d073      	beq.n	273ee <_free_r+0x19e>
   27306:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2730a:	60da      	str	r2, [r3, #12]
   2730c:	6093      	str	r3, [r2, #8]
   2730e:	f041 0301 	orr.w	r3, r1, #1
   27312:	606b      	str	r3, [r5, #4]
   27314:	5069      	str	r1, [r5, r1]
   27316:	e7d0      	b.n	272ba <_free_r+0x6a>
   27318:	4770      	bx	lr
   2731a:	f041 0301 	orr.w	r3, r1, #1
   2731e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   27322:	f844 3c04 	str.w	r3, [r4, #-4]
   27326:	f8cc 1000 	str.w	r1, [ip]
   2732a:	d3c9      	bcc.n	272c0 <_free_r+0x70>
   2732c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   27330:	ea4f 2351 	mov.w	r3, r1, lsr #9
   27334:	d248      	bcs.n	273c8 <_free_r+0x178>
   27336:	098b      	lsrs	r3, r1, #6
   27338:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2733c:	f103 0238 	add.w	r2, r3, #56	; 0x38
   27340:	00c3      	lsls	r3, r0, #3
   27342:	18f8      	adds	r0, r7, r3
   27344:	58fb      	ldr	r3, [r7, r3]
   27346:	3808      	subs	r0, #8
   27348:	4298      	cmp	r0, r3
   2734a:	d059      	beq.n	27400 <_free_r+0x1b0>
   2734c:	685a      	ldr	r2, [r3, #4]
   2734e:	f022 0203 	bic.w	r2, r2, #3
   27352:	428a      	cmp	r2, r1
   27354:	d902      	bls.n	2735c <_free_r+0x10c>
   27356:	689b      	ldr	r3, [r3, #8]
   27358:	4298      	cmp	r0, r3
   2735a:	d1f7      	bne.n	2734c <_free_r+0xfc>
   2735c:	68d8      	ldr	r0, [r3, #12]
   2735e:	e9c5 3002 	strd	r3, r0, [r5, #8]
   27362:	6085      	str	r5, [r0, #8]
   27364:	60dd      	str	r5, [r3, #12]
   27366:	4630      	mov	r0, r6
   27368:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2736c:	f7fd bf7a 	b.w	25264 <__malloc_unlock>
   27370:	eb0c 0203 	add.w	r2, ip, r3
   27374:	6852      	ldr	r2, [r2, #4]
   27376:	07d2      	lsls	r2, r2, #31
   27378:	d463      	bmi.n	27442 <_free_r+0x1f2>
   2737a:	440b      	add	r3, r1
   2737c:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   27380:	60ca      	str	r2, [r1, #12]
   27382:	6091      	str	r1, [r2, #8]
   27384:	f043 0201 	orr.w	r2, r3, #1
   27388:	606a      	str	r2, [r5, #4]
   2738a:	4630      	mov	r0, r6
   2738c:	50eb      	str	r3, [r5, r3]
   2738e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27392:	f7fd bf67 	b.w	25264 <__malloc_unlock>
   27396:	440b      	add	r3, r1
   27398:	07d1      	lsls	r1, r2, #31
   2739a:	d407      	bmi.n	273ac <_free_r+0x15c>
   2739c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   273a0:	1aad      	subs	r5, r5, r2
   273a2:	4413      	add	r3, r2
   273a4:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   273a8:	60ca      	str	r2, [r1, #12]
   273aa:	6091      	str	r1, [r2, #8]
   273ac:	f043 0201 	orr.w	r2, r3, #1
   273b0:	606a      	str	r2, [r5, #4]
   273b2:	4a28      	ldr	r2, [pc, #160]	; (27454 <_free_r+0x204>)
   273b4:	60bd      	str	r5, [r7, #8]
   273b6:	6812      	ldr	r2, [r2, #0]
   273b8:	429a      	cmp	r2, r3
   273ba:	d893      	bhi.n	272e4 <_free_r+0x94>
   273bc:	4b26      	ldr	r3, [pc, #152]	; (27458 <_free_r+0x208>)
   273be:	4630      	mov	r0, r6
   273c0:	6819      	ldr	r1, [r3, #0]
   273c2:	f7ff fef5 	bl	271b0 <_malloc_trim_r>
   273c6:	e78d      	b.n	272e4 <_free_r+0x94>
   273c8:	2b14      	cmp	r3, #20
   273ca:	d90a      	bls.n	273e2 <_free_r+0x192>
   273cc:	2b54      	cmp	r3, #84	; 0x54
   273ce:	d81f      	bhi.n	27410 <_free_r+0x1c0>
   273d0:	0b0b      	lsrs	r3, r1, #12
   273d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   273d6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   273da:	00c3      	lsls	r3, r0, #3
   273dc:	e7b1      	b.n	27342 <_free_r+0xf2>
   273de:	4419      	add	r1, r3
   273e0:	e78d      	b.n	272fe <_free_r+0xae>
   273e2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   273e6:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   273ea:	00c3      	lsls	r3, r0, #3
   273ec:	e7a9      	b.n	27342 <_free_r+0xf2>
   273ee:	f041 0301 	orr.w	r3, r1, #1
   273f2:	e9c7 5504 	strd	r5, r5, [r7, #16]
   273f6:	e9c5 0002 	strd	r0, r0, [r5, #8]
   273fa:	606b      	str	r3, [r5, #4]
   273fc:	5069      	str	r1, [r5, r1]
   273fe:	e771      	b.n	272e4 <_free_r+0x94>
   27400:	6879      	ldr	r1, [r7, #4]
   27402:	1092      	asrs	r2, r2, #2
   27404:	2401      	movs	r4, #1
   27406:	fa04 f202 	lsl.w	r2, r4, r2
   2740a:	430a      	orrs	r2, r1
   2740c:	607a      	str	r2, [r7, #4]
   2740e:	e7a6      	b.n	2735e <_free_r+0x10e>
   27410:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   27414:	d806      	bhi.n	27424 <_free_r+0x1d4>
   27416:	0bcb      	lsrs	r3, r1, #15
   27418:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2741c:	f103 0277 	add.w	r2, r3, #119	; 0x77
   27420:	00c3      	lsls	r3, r0, #3
   27422:	e78e      	b.n	27342 <_free_r+0xf2>
   27424:	f240 5254 	movw	r2, #1364	; 0x554
   27428:	4293      	cmp	r3, r2
   2742a:	d806      	bhi.n	2743a <_free_r+0x1ea>
   2742c:	0c8b      	lsrs	r3, r1, #18
   2742e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   27432:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   27436:	00c3      	lsls	r3, r0, #3
   27438:	e783      	b.n	27342 <_free_r+0xf2>
   2743a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2743e:	227e      	movs	r2, #126	; 0x7e
   27440:	e77f      	b.n	27342 <_free_r+0xf2>
   27442:	f041 0301 	orr.w	r3, r1, #1
   27446:	606b      	str	r3, [r5, #4]
   27448:	f8cc 1000 	str.w	r1, [ip]
   2744c:	e74a      	b.n	272e4 <_free_r+0x94>
   2744e:	bf00      	nop
   27450:	20005bc8 	.word	0x20005bc8
   27454:	20005fd4 	.word	0x20005fd4
   27458:	2000cd44 	.word	0x2000cd44

0002745c <_fstat_r>:
   2745c:	b570      	push	{r4, r5, r6, lr}
   2745e:	460c      	mov	r4, r1
   27460:	4d08      	ldr	r5, [pc, #32]	; (27484 <_fstat_r+0x28>)
   27462:	4603      	mov	r3, r0
   27464:	2600      	movs	r6, #0
   27466:	4620      	mov	r0, r4
   27468:	4611      	mov	r1, r2
   2746a:	461c      	mov	r4, r3
   2746c:	602e      	str	r6, [r5, #0]
   2746e:	f7f1 fd17 	bl	18ea0 <_fstat>
   27472:	1c43      	adds	r3, r0, #1
   27474:	d000      	beq.n	27478 <_fstat_r+0x1c>
   27476:	bd70      	pop	{r4, r5, r6, pc}
   27478:	682b      	ldr	r3, [r5, #0]
   2747a:	2b00      	cmp	r3, #0
   2747c:	d0fb      	beq.n	27476 <_fstat_r+0x1a>
   2747e:	6023      	str	r3, [r4, #0]
   27480:	bd70      	pop	{r4, r5, r6, pc}
   27482:	bf00      	nop
   27484:	2000d2a0 	.word	0x2000d2a0

00027488 <_isatty_r>:
   27488:	b538      	push	{r3, r4, r5, lr}
   2748a:	4d07      	ldr	r5, [pc, #28]	; (274a8 <_isatty_r+0x20>)
   2748c:	2200      	movs	r2, #0
   2748e:	4604      	mov	r4, r0
   27490:	4608      	mov	r0, r1
   27492:	602a      	str	r2, [r5, #0]
   27494:	f7f1 fd0a 	bl	18eac <_isatty>
   27498:	1c43      	adds	r3, r0, #1
   2749a:	d000      	beq.n	2749e <_isatty_r+0x16>
   2749c:	bd38      	pop	{r3, r4, r5, pc}
   2749e:	682b      	ldr	r3, [r5, #0]
   274a0:	2b00      	cmp	r3, #0
   274a2:	d0fb      	beq.n	2749c <_isatty_r+0x14>
   274a4:	6023      	str	r3, [r4, #0]
   274a6:	bd38      	pop	{r3, r4, r5, pc}
   274a8:	2000d2a0 	.word	0x2000d2a0

000274ac <fiprintf>:
   274ac:	b40e      	push	{r1, r2, r3}
   274ae:	b510      	push	{r4, lr}
   274b0:	b083      	sub	sp, #12
   274b2:	ab05      	add	r3, sp, #20
   274b4:	4c06      	ldr	r4, [pc, #24]	; (274d0 <fiprintf+0x24>)
   274b6:	f853 2b04 	ldr.w	r2, [r3], #4
   274ba:	9301      	str	r3, [sp, #4]
   274bc:	4601      	mov	r1, r0
   274be:	6820      	ldr	r0, [r4, #0]
   274c0:	f000 f94e 	bl	27760 <_vfiprintf_r>
   274c4:	b003      	add	sp, #12
   274c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   274ca:	b003      	add	sp, #12
   274cc:	4770      	bx	lr
   274ce:	bf00      	nop
   274d0:	20005fe4 	.word	0x20005fe4

000274d4 <__sread>:
   274d4:	b510      	push	{r4, lr}
   274d6:	460c      	mov	r4, r1
   274d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   274dc:	f001 fb1a 	bl	28b14 <_read_r>
   274e0:	2800      	cmp	r0, #0
   274e2:	db03      	blt.n	274ec <__sread+0x18>
   274e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   274e6:	4403      	add	r3, r0
   274e8:	6523      	str	r3, [r4, #80]	; 0x50
   274ea:	bd10      	pop	{r4, pc}
   274ec:	89a3      	ldrh	r3, [r4, #12]
   274ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   274f2:	81a3      	strh	r3, [r4, #12]
   274f4:	bd10      	pop	{r4, pc}
   274f6:	bf00      	nop

000274f8 <__swrite>:
   274f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274fc:	460c      	mov	r4, r1
   274fe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   27502:	461f      	mov	r7, r3
   27504:	05cb      	lsls	r3, r1, #23
   27506:	4605      	mov	r5, r0
   27508:	4616      	mov	r6, r2
   2750a:	d40b      	bmi.n	27524 <__swrite+0x2c>
   2750c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   27510:	81a1      	strh	r1, [r4, #12]
   27512:	463b      	mov	r3, r7
   27514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   27518:	4632      	mov	r2, r6
   2751a:	4628      	mov	r0, r5
   2751c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27520:	f7fb b97c 	b.w	2281c <_write_r>
   27524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   27528:	2302      	movs	r3, #2
   2752a:	2200      	movs	r2, #0
   2752c:	f001 fadc 	bl	28ae8 <_lseek_r>
   27530:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   27534:	e7ea      	b.n	2750c <__swrite+0x14>
   27536:	bf00      	nop

00027538 <__sseek>:
   27538:	b510      	push	{r4, lr}
   2753a:	460c      	mov	r4, r1
   2753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   27540:	f001 fad2 	bl	28ae8 <_lseek_r>
   27544:	89a3      	ldrh	r3, [r4, #12]
   27546:	1c42      	adds	r2, r0, #1
   27548:	bf0e      	itee	eq
   2754a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2754e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   27552:	6520      	strne	r0, [r4, #80]	; 0x50
   27554:	81a3      	strh	r3, [r4, #12]
   27556:	bd10      	pop	{r4, pc}

00027558 <__sclose>:
   27558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2755c:	f001 bab2 	b.w	28ac4 <_close_r>

00027560 <__ascii_wctomb>:
   27560:	b149      	cbz	r1, 27576 <__ascii_wctomb+0x16>
   27562:	2aff      	cmp	r2, #255	; 0xff
   27564:	d802      	bhi.n	2756c <__ascii_wctomb+0xc>
   27566:	700a      	strb	r2, [r1, #0]
   27568:	2001      	movs	r0, #1
   2756a:	4770      	bx	lr
   2756c:	238a      	movs	r3, #138	; 0x8a
   2756e:	6003      	str	r3, [r0, #0]
   27570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27574:	4770      	bx	lr
   27576:	4608      	mov	r0, r1
   27578:	4770      	bx	lr
   2757a:	bf00      	nop

0002757c <_sbrk_r>:
   2757c:	b538      	push	{r3, r4, r5, lr}
   2757e:	4d07      	ldr	r5, [pc, #28]	; (2759c <_sbrk_r+0x20>)
   27580:	2200      	movs	r2, #0
   27582:	4604      	mov	r4, r0
   27584:	4608      	mov	r0, r1
   27586:	602a      	str	r2, [r5, #0]
   27588:	f7f1 fc6a 	bl	18e60 <_sbrk>
   2758c:	1c43      	adds	r3, r0, #1
   2758e:	d000      	beq.n	27592 <_sbrk_r+0x16>
   27590:	bd38      	pop	{r3, r4, r5, pc}
   27592:	682b      	ldr	r3, [r5, #0]
   27594:	2b00      	cmp	r3, #0
   27596:	d0fb      	beq.n	27590 <_sbrk_r+0x14>
   27598:	6023      	str	r3, [r4, #0]
   2759a:	bd38      	pop	{r3, r4, r5, pc}
   2759c:	2000d2a0 	.word	0x2000d2a0

000275a0 <_fwalk_sglue>:
   275a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   275a4:	4680      	mov	r8, r0
   275a6:	460f      	mov	r7, r1
   275a8:	4616      	mov	r6, r2
   275aa:	f04f 0900 	mov.w	r9, #0
   275ae:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   275b2:	3d01      	subs	r5, #1
   275b4:	d411      	bmi.n	275da <_fwalk_sglue+0x3a>
   275b6:	89a3      	ldrh	r3, [r4, #12]
   275b8:	2b01      	cmp	r3, #1
   275ba:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   275be:	d908      	bls.n	275d2 <_fwalk_sglue+0x32>
   275c0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   275c4:	3301      	adds	r3, #1
   275c6:	4621      	mov	r1, r4
   275c8:	d003      	beq.n	275d2 <_fwalk_sglue+0x32>
   275ca:	4640      	mov	r0, r8
   275cc:	47b8      	blx	r7
   275ce:	ea49 0900 	orr.w	r9, r9, r0
   275d2:	1c6b      	adds	r3, r5, #1
   275d4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   275d8:	d1ed      	bne.n	275b6 <_fwalk_sglue+0x16>
   275da:	6836      	ldr	r6, [r6, #0]
   275dc:	2e00      	cmp	r6, #0
   275de:	d1e6      	bne.n	275ae <_fwalk_sglue+0xe>
   275e0:	4648      	mov	r0, r9
   275e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   275e6:	bf00      	nop

000275e8 <__ssprint_r>:
   275e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275ec:	6893      	ldr	r3, [r2, #8]
   275ee:	6817      	ldr	r7, [r2, #0]
   275f0:	b083      	sub	sp, #12
   275f2:	4692      	mov	sl, r2
   275f4:	2b00      	cmp	r3, #0
   275f6:	d070      	beq.n	276da <__ssprint_r+0xf2>
   275f8:	4681      	mov	r9, r0
   275fa:	688a      	ldr	r2, [r1, #8]
   275fc:	6808      	ldr	r0, [r1, #0]
   275fe:	460c      	mov	r4, r1
   27600:	3708      	adds	r7, #8
   27602:	e043      	b.n	2768c <__ssprint_r+0xa4>
   27604:	89a3      	ldrh	r3, [r4, #12]
   27606:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2760a:	d02e      	beq.n	2766a <__ssprint_r+0x82>
   2760c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   27610:	eba0 0801 	sub.w	r8, r0, r1
   27614:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   27618:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   2761c:	f108 0001 	add.w	r0, r8, #1
   27620:	1076      	asrs	r6, r6, #1
   27622:	4428      	add	r0, r5
   27624:	42b0      	cmp	r0, r6
   27626:	4632      	mov	r2, r6
   27628:	bf84      	itt	hi
   2762a:	4606      	movhi	r6, r0
   2762c:	4632      	movhi	r2, r6
   2762e:	055b      	lsls	r3, r3, #21
   27630:	d537      	bpl.n	276a2 <__ssprint_r+0xba>
   27632:	4611      	mov	r1, r2
   27634:	4648      	mov	r0, r9
   27636:	f7fc ff5d 	bl	244f4 <_malloc_r>
   2763a:	9001      	str	r0, [sp, #4]
   2763c:	2800      	cmp	r0, #0
   2763e:	d03a      	beq.n	276b6 <__ssprint_r+0xce>
   27640:	4642      	mov	r2, r8
   27642:	6921      	ldr	r1, [r4, #16]
   27644:	f7f1 faa8 	bl	18b98 <memcpy>
   27648:	89a2      	ldrh	r2, [r4, #12]
   2764a:	9b01      	ldr	r3, [sp, #4]
   2764c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   27650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   27654:	81a2      	strh	r2, [r4, #12]
   27656:	eba6 0208 	sub.w	r2, r6, r8
   2765a:	eb03 0008 	add.w	r0, r3, r8
   2765e:	6166      	str	r6, [r4, #20]
   27660:	60a2      	str	r2, [r4, #8]
   27662:	6123      	str	r3, [r4, #16]
   27664:	6020      	str	r0, [r4, #0]
   27666:	462e      	mov	r6, r5
   27668:	46a8      	mov	r8, r5
   2766a:	4642      	mov	r2, r8
   2766c:	4659      	mov	r1, fp
   2766e:	f7fd fa21 	bl	24ab4 <memmove>
   27672:	f8da 3008 	ldr.w	r3, [sl, #8]
   27676:	68a2      	ldr	r2, [r4, #8]
   27678:	6820      	ldr	r0, [r4, #0]
   2767a:	1b92      	subs	r2, r2, r6
   2767c:	4440      	add	r0, r8
   2767e:	1b5b      	subs	r3, r3, r5
   27680:	60a2      	str	r2, [r4, #8]
   27682:	6020      	str	r0, [r4, #0]
   27684:	f8ca 3008 	str.w	r3, [sl, #8]
   27688:	b33b      	cbz	r3, 276da <__ssprint_r+0xf2>
   2768a:	3708      	adds	r7, #8
   2768c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   27690:	2d00      	cmp	r5, #0
   27692:	d0fa      	beq.n	2768a <__ssprint_r+0xa2>
   27694:	42aa      	cmp	r2, r5
   27696:	4616      	mov	r6, r2
   27698:	4690      	mov	r8, r2
   2769a:	d9b3      	bls.n	27604 <__ssprint_r+0x1c>
   2769c:	462e      	mov	r6, r5
   2769e:	46a8      	mov	r8, r5
   276a0:	e7e3      	b.n	2766a <__ssprint_r+0x82>
   276a2:	4648      	mov	r0, r9
   276a4:	f7ff fb98 	bl	26dd8 <_realloc_r>
   276a8:	4603      	mov	r3, r0
   276aa:	2800      	cmp	r0, #0
   276ac:	d1d3      	bne.n	27656 <__ssprint_r+0x6e>
   276ae:	6921      	ldr	r1, [r4, #16]
   276b0:	4648      	mov	r0, r9
   276b2:	f7ff fdcd 	bl	27250 <_free_r>
   276b6:	89a3      	ldrh	r3, [r4, #12]
   276b8:	220c      	movs	r2, #12
   276ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   276be:	f8c9 2000 	str.w	r2, [r9]
   276c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   276c6:	81a3      	strh	r3, [r4, #12]
   276c8:	2200      	movs	r2, #0
   276ca:	2300      	movs	r3, #0
   276cc:	f8ca 2008 	str.w	r2, [sl, #8]
   276d0:	f8ca 3004 	str.w	r3, [sl, #4]
   276d4:	b003      	add	sp, #12
   276d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276da:	2000      	movs	r0, #0
   276dc:	2300      	movs	r3, #0
   276de:	f8ca 3004 	str.w	r3, [sl, #4]
   276e2:	b003      	add	sp, #12
   276e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000276e8 <__sprint_r.part.0>:
   276e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   276ee:	049c      	lsls	r4, r3, #18
   276f0:	4690      	mov	r8, r2
   276f2:	d52d      	bpl.n	27750 <__sprint_r.part.0+0x68>
   276f4:	6893      	ldr	r3, [r2, #8]
   276f6:	6812      	ldr	r2, [r2, #0]
   276f8:	b343      	cbz	r3, 2774c <__sprint_r.part.0+0x64>
   276fa:	468b      	mov	fp, r1
   276fc:	4606      	mov	r6, r0
   276fe:	f102 0908 	add.w	r9, r2, #8
   27702:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   27706:	ea5f 079a 	movs.w	r7, sl, lsr #2
   2770a:	d015      	beq.n	27738 <__sprint_r.part.0+0x50>
   2770c:	3d04      	subs	r5, #4
   2770e:	2400      	movs	r4, #0
   27710:	e001      	b.n	27716 <__sprint_r.part.0+0x2e>
   27712:	42a7      	cmp	r7, r4
   27714:	d00e      	beq.n	27734 <__sprint_r.part.0+0x4c>
   27716:	f855 1f04 	ldr.w	r1, [r5, #4]!
   2771a:	465a      	mov	r2, fp
   2771c:	4630      	mov	r0, r6
   2771e:	f001 fa65 	bl	28bec <_fputwc_r>
   27722:	1c43      	adds	r3, r0, #1
   27724:	f104 0401 	add.w	r4, r4, #1
   27728:	d1f3      	bne.n	27712 <__sprint_r.part.0+0x2a>
   2772a:	2300      	movs	r3, #0
   2772c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   27730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27734:	f8d8 3008 	ldr.w	r3, [r8, #8]
   27738:	f02a 0a03 	bic.w	sl, sl, #3
   2773c:	eba3 030a 	sub.w	r3, r3, sl
   27740:	f8c8 3008 	str.w	r3, [r8, #8]
   27744:	f109 0908 	add.w	r9, r9, #8
   27748:	2b00      	cmp	r3, #0
   2774a:	d1da      	bne.n	27702 <__sprint_r.part.0+0x1a>
   2774c:	2000      	movs	r0, #0
   2774e:	e7ec      	b.n	2772a <__sprint_r.part.0+0x42>
   27750:	f7fa feea 	bl	22528 <__sfvwrite_r>
   27754:	2300      	movs	r3, #0
   27756:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2775a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2775e:	bf00      	nop

00027760 <_vfiprintf_r>:
   27760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27764:	ed2d 8b02 	vpush	{d8}
   27768:	b0c5      	sub	sp, #276	; 0x114
   2776a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   2776e:	4683      	mov	fp, r0
   27770:	ee08 1a10 	vmov	s16, r1
   27774:	4616      	mov	r6, r2
   27776:	2100      	movs	r1, #0
   27778:	2208      	movs	r2, #8
   2777a:	4650      	mov	r0, sl
   2777c:	461c      	mov	r4, r3
   2777e:	9307      	str	r3, [sp, #28]
   27780:	f7fd fa34 	bl	24bec <memset>
   27784:	f1bb 0f00 	cmp.w	fp, #0
   27788:	d004      	beq.n	27794 <_vfiprintf_r+0x34>
   2778a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   2778e:	2b00      	cmp	r3, #0
   27790:	f000 86a0 	beq.w	284d4 <_vfiprintf_r+0xd74>
   27794:	ee18 2a10 	vmov	r2, s16
   27798:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2779a:	07db      	lsls	r3, r3, #31
   2779c:	f140 8513 	bpl.w	281c6 <_vfiprintf_r+0xa66>
   277a0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   277a4:	b28a      	uxth	r2, r1
   277a6:	0495      	lsls	r5, r2, #18
   277a8:	d40b      	bmi.n	277c2 <_vfiprintf_r+0x62>
   277aa:	ee18 3a10 	vmov	r3, s16
   277ae:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   277b2:	8199      	strh	r1, [r3, #12]
   277b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   277b6:	b28a      	uxth	r2, r1
   277b8:	ee18 1a10 	vmov	r1, s16
   277bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   277c0:	664b      	str	r3, [r1, #100]	; 0x64
   277c2:	0710      	lsls	r0, r2, #28
   277c4:	f140 8105 	bpl.w	279d2 <_vfiprintf_r+0x272>
   277c8:	ee18 3a10 	vmov	r3, s16
   277cc:	691b      	ldr	r3, [r3, #16]
   277ce:	2b00      	cmp	r3, #0
   277d0:	f000 80ff 	beq.w	279d2 <_vfiprintf_r+0x272>
   277d4:	f002 031a 	and.w	r3, r2, #26
   277d8:	2b0a      	cmp	r3, #10
   277da:	f000 810a 	beq.w	279f2 <_vfiprintf_r+0x292>
   277de:	2300      	movs	r3, #0
   277e0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   277e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   277e8:	aa1b      	add	r2, sp, #108	; 0x6c
   277ea:	930c      	str	r3, [sp, #48]	; 0x30
   277ec:	9218      	str	r2, [sp, #96]	; 0x60
   277ee:	4691      	mov	r9, r2
   277f0:	930b      	str	r3, [sp, #44]	; 0x2c
   277f2:	9305      	str	r3, [sp, #20]
   277f4:	46b0      	mov	r8, r6
   277f6:	4644      	mov	r4, r8
   277f8:	4ba8      	ldr	r3, [pc, #672]	; (27a9c <_vfiprintf_r+0x33c>)
   277fa:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   277fe:	f7fd fa9f 	bl	24d40 <__locale_mb_cur_max>
   27802:	4622      	mov	r2, r4
   27804:	4603      	mov	r3, r0
   27806:	a912      	add	r1, sp, #72	; 0x48
   27808:	f8cd a000 	str.w	sl, [sp]
   2780c:	4658      	mov	r0, fp
   2780e:	47a8      	blx	r5
   27810:	2800      	cmp	r0, #0
   27812:	f000 8145 	beq.w	27aa0 <_vfiprintf_r+0x340>
   27816:	f2c0 8139 	blt.w	27a8c <_vfiprintf_r+0x32c>
   2781a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2781c:	2a25      	cmp	r2, #37	; 0x25
   2781e:	4603      	mov	r3, r0
   27820:	d001      	beq.n	27826 <_vfiprintf_r+0xc6>
   27822:	441c      	add	r4, r3
   27824:	e7e8      	b.n	277f8 <_vfiprintf_r+0x98>
   27826:	ebb4 0608 	subs.w	r6, r4, r8
   2782a:	4605      	mov	r5, r0
   2782c:	f040 813c 	bne.w	27aa8 <_vfiprintf_r+0x348>
   27830:	2300      	movs	r3, #0
   27832:	7861      	ldrb	r1, [r4, #1]
   27834:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27838:	f104 0801 	add.w	r8, r4, #1
   2783c:	9306      	str	r3, [sp, #24]
   2783e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27842:	461e      	mov	r6, r3
   27844:	242b      	movs	r4, #43	; 0x2b
   27846:	f108 0801 	add.w	r8, r8, #1
   2784a:	f1a1 0320 	sub.w	r3, r1, #32
   2784e:	2b5a      	cmp	r3, #90	; 0x5a
   27850:	f200 8178 	bhi.w	27b44 <_vfiprintf_r+0x3e4>
   27854:	e8df f013 	tbh	[pc, r3, lsl #1]
   27858:	017602b5 	.word	0x017602b5
   2785c:	02b00176 	.word	0x02b00176
   27860:	01760176 	.word	0x01760176
   27864:	006a0176 	.word	0x006a0176
   27868:	01760176 	.word	0x01760176
   2786c:	028d027d 	.word	0x028d027d
   27870:	02880176 	.word	0x02880176
   27874:	01760297 	.word	0x01760297
   27878:	005b0292 	.word	0x005b0292
   2787c:	005b005b 	.word	0x005b005b
   27880:	005b005b 	.word	0x005b005b
   27884:	005b005b 	.word	0x005b005b
   27888:	005b005b 	.word	0x005b005b
   2788c:	01760176 	.word	0x01760176
   27890:	01760176 	.word	0x01760176
   27894:	01760176 	.word	0x01760176
   27898:	01760176 	.word	0x01760176
   2789c:	025c0176 	.word	0x025c0176
   278a0:	01760084 	.word	0x01760084
   278a4:	01760176 	.word	0x01760176
   278a8:	01760176 	.word	0x01760176
   278ac:	01760176 	.word	0x01760176
   278b0:	01760176 	.word	0x01760176
   278b4:	00e80176 	.word	0x00e80176
   278b8:	01760176 	.word	0x01760176
   278bc:	02330176 	.word	0x02330176
   278c0:	02da0176 	.word	0x02da0176
   278c4:	01760176 	.word	0x01760176
   278c8:	0176058b 	.word	0x0176058b
   278cc:	01760176 	.word	0x01760176
   278d0:	01760176 	.word	0x01760176
   278d4:	01760176 	.word	0x01760176
   278d8:	01760176 	.word	0x01760176
   278dc:	025c0176 	.word	0x025c0176
   278e0:	01760086 	.word	0x01760086
   278e4:	01760176 	.word	0x01760176
   278e8:	008602cd 	.word	0x008602cd
   278ec:	0176007f 	.word	0x0176007f
   278f0:	017602c0 	.word	0x017602c0
   278f4:	00ea02fd 	.word	0x00ea02fd
   278f8:	007f02ed 	.word	0x007f02ed
   278fc:	02330176 	.word	0x02330176
   27900:	0569007c 	.word	0x0569007c
   27904:	01760176 	.word	0x01760176
   27908:	0176056b 	.word	0x0176056b
   2790c:	007c      	.short	0x007c
   2790e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27912:	2200      	movs	r2, #0
   27914:	f818 1b01 	ldrb.w	r1, [r8], #1
   27918:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   2791c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   27920:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27924:	2b09      	cmp	r3, #9
   27926:	d9f5      	bls.n	27914 <_vfiprintf_r+0x1b4>
   27928:	9206      	str	r2, [sp, #24]
   2792a:	e78e      	b.n	2784a <_vfiprintf_r+0xea>
   2792c:	4658      	mov	r0, fp
   2792e:	f7fd fa0d 	bl	24d4c <_localeconv_r>
   27932:	6843      	ldr	r3, [r0, #4]
   27934:	930d      	str	r3, [sp, #52]	; 0x34
   27936:	4618      	mov	r0, r3
   27938:	f7ff f9a2 	bl	26c80 <strlen>
   2793c:	900e      	str	r0, [sp, #56]	; 0x38
   2793e:	4605      	mov	r5, r0
   27940:	4658      	mov	r0, fp
   27942:	f7fd fa03 	bl	24d4c <_localeconv_r>
   27946:	6883      	ldr	r3, [r0, #8]
   27948:	930b      	str	r3, [sp, #44]	; 0x2c
   2794a:	2d00      	cmp	r5, #0
   2794c:	f040 84d6 	bne.w	282fc <_vfiprintf_r+0xb9c>
   27950:	f898 1000 	ldrb.w	r1, [r8]
   27954:	e777      	b.n	27846 <_vfiprintf_r+0xe6>
   27956:	f898 1000 	ldrb.w	r1, [r8]
   2795a:	f046 0620 	orr.w	r6, r6, #32
   2795e:	e772      	b.n	27846 <_vfiprintf_r+0xe6>
   27960:	f046 0610 	orr.w	r6, r6, #16
   27964:	06b4      	lsls	r4, r6, #26
   27966:	f140 818e 	bpl.w	27c86 <_vfiprintf_r+0x526>
   2796a:	9b07      	ldr	r3, [sp, #28]
   2796c:	3307      	adds	r3, #7
   2796e:	f023 0307 	bic.w	r3, r3, #7
   27972:	461a      	mov	r2, r3
   27974:	6859      	ldr	r1, [r3, #4]
   27976:	f852 3b08 	ldr.w	r3, [r2], #8
   2797a:	9207      	str	r2, [sp, #28]
   2797c:	460a      	mov	r2, r1
   2797e:	2900      	cmp	r1, #0
   27980:	f2c0 8470 	blt.w	28264 <_vfiprintf_r+0xb04>
   27984:	1c79      	adds	r1, r7, #1
   27986:	f000 85a2 	beq.w	284ce <_vfiprintf_r+0xd6e>
   2798a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   2798e:	9103      	str	r1, [sp, #12]
   27990:	ea53 0102 	orrs.w	r1, r3, r2
   27994:	f000 843f 	beq.w	28216 <_vfiprintf_r+0xab6>
   27998:	2b0a      	cmp	r3, #10
   2799a:	f172 0100 	sbcs.w	r1, r2, #0
   2799e:	f080 8541 	bcs.w	28424 <_vfiprintf_r+0xcc4>
   279a2:	3330      	adds	r3, #48	; 0x30
   279a4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   279a8:	9e03      	ldr	r6, [sp, #12]
   279aa:	2301      	movs	r3, #1
   279ac:	9304      	str	r3, [sp, #16]
   279ae:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   279b2:	9b04      	ldr	r3, [sp, #16]
   279b4:	42bb      	cmp	r3, r7
   279b6:	bfb8      	it	lt
   279b8:	463b      	movlt	r3, r7
   279ba:	9303      	str	r3, [sp, #12]
   279bc:	2300      	movs	r3, #0
   279be:	9308      	str	r3, [sp, #32]
   279c0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   279c4:	2b00      	cmp	r3, #0
   279c6:	f000 80cb 	beq.w	27b60 <_vfiprintf_r+0x400>
   279ca:	9b03      	ldr	r3, [sp, #12]
   279cc:	3301      	adds	r3, #1
   279ce:	9303      	str	r3, [sp, #12]
   279d0:	e0c6      	b.n	27b60 <_vfiprintf_r+0x400>
   279d2:	ee18 1a10 	vmov	r1, s16
   279d6:	4658      	mov	r0, fp
   279d8:	ee18 5a10 	vmov	r5, s16
   279dc:	f7fd fb2e 	bl	2503c <__swsetup_r>
   279e0:	2800      	cmp	r0, #0
   279e2:	f040 8652 	bne.w	2868a <_vfiprintf_r+0xf2a>
   279e6:	89aa      	ldrh	r2, [r5, #12]
   279e8:	f002 031a 	and.w	r3, r2, #26
   279ec:	2b0a      	cmp	r3, #10
   279ee:	f47f aef6 	bne.w	277de <_vfiprintf_r+0x7e>
   279f2:	ee18 1a10 	vmov	r1, s16
   279f6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   279fa:	2b00      	cmp	r3, #0
   279fc:	f6ff aeef 	blt.w	277de <_vfiprintf_r+0x7e>
   27a00:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   27a02:	07db      	lsls	r3, r3, #31
   27a04:	d402      	bmi.n	27a0c <_vfiprintf_r+0x2ac>
   27a06:	0597      	lsls	r7, r2, #22
   27a08:	f140 8612 	bpl.w	28630 <_vfiprintf_r+0xed0>
   27a0c:	ee18 1a10 	vmov	r1, s16
   27a10:	4623      	mov	r3, r4
   27a12:	4632      	mov	r2, r6
   27a14:	4658      	mov	r0, fp
   27a16:	f000 fe69 	bl	286ec <__sbprintf>
   27a1a:	9005      	str	r0, [sp, #20]
   27a1c:	9805      	ldr	r0, [sp, #20]
   27a1e:	b045      	add	sp, #276	; 0x114
   27a20:	ecbd 8b02 	vpop	{d8}
   27a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a28:	f046 0610 	orr.w	r6, r6, #16
   27a2c:	f016 0220 	ands.w	r2, r6, #32
   27a30:	f000 8136 	beq.w	27ca0 <_vfiprintf_r+0x540>
   27a34:	9b07      	ldr	r3, [sp, #28]
   27a36:	3307      	adds	r3, #7
   27a38:	f023 0307 	bic.w	r3, r3, #7
   27a3c:	4619      	mov	r1, r3
   27a3e:	685a      	ldr	r2, [r3, #4]
   27a40:	f851 3b08 	ldr.w	r3, [r1], #8
   27a44:	9107      	str	r1, [sp, #28]
   27a46:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   27a4a:	9103      	str	r1, [sp, #12]
   27a4c:	2100      	movs	r1, #0
   27a4e:	2000      	movs	r0, #0
   27a50:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   27a54:	1c78      	adds	r0, r7, #1
   27a56:	f000 8210 	beq.w	27e7a <_vfiprintf_r+0x71a>
   27a5a:	9803      	ldr	r0, [sp, #12]
   27a5c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   27a60:	ea53 0002 	orrs.w	r0, r3, r2
   27a64:	f040 8208 	bne.w	27e78 <_vfiprintf_r+0x718>
   27a68:	2f00      	cmp	r7, #0
   27a6a:	f040 8538 	bne.w	284de <_vfiprintf_r+0xd7e>
   27a6e:	2900      	cmp	r1, #0
   27a70:	f040 83d5 	bne.w	2821e <_vfiprintf_r+0xabe>
   27a74:	9b03      	ldr	r3, [sp, #12]
   27a76:	f013 0301 	ands.w	r3, r3, #1
   27a7a:	9304      	str	r3, [sp, #16]
   27a7c:	f000 8411 	beq.w	282a2 <_vfiprintf_r+0xb42>
   27a80:	2330      	movs	r3, #48	; 0x30
   27a82:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   27a86:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   27a8a:	e792      	b.n	279b2 <_vfiprintf_r+0x252>
   27a8c:	2208      	movs	r2, #8
   27a8e:	2100      	movs	r1, #0
   27a90:	4650      	mov	r0, sl
   27a92:	f7fd f8ab 	bl	24bec <memset>
   27a96:	2301      	movs	r3, #1
   27a98:	441c      	add	r4, r3
   27a9a:	e6ad      	b.n	277f8 <_vfiprintf_r+0x98>
   27a9c:	20005a5c 	.word	0x20005a5c
   27aa0:	ebb4 0608 	subs.w	r6, r4, r8
   27aa4:	4605      	mov	r5, r0
   27aa6:	d01b      	beq.n	27ae0 <_vfiprintf_r+0x380>
   27aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   27aaa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   27aac:	3301      	adds	r3, #1
   27aae:	4432      	add	r2, r6
   27ab0:	2b07      	cmp	r3, #7
   27ab2:	e9c9 8600 	strd	r8, r6, [r9]
   27ab6:	921a      	str	r2, [sp, #104]	; 0x68
   27ab8:	9319      	str	r3, [sp, #100]	; 0x64
   27aba:	dd1c      	ble.n	27af6 <_vfiprintf_r+0x396>
   27abc:	2a00      	cmp	r2, #0
   27abe:	f000 83a6 	beq.w	2820e <_vfiprintf_r+0xaae>
   27ac2:	ee18 1a10 	vmov	r1, s16
   27ac6:	aa18      	add	r2, sp, #96	; 0x60
   27ac8:	4658      	mov	r0, fp
   27aca:	f7ff fe0d 	bl	276e8 <__sprint_r.part.0>
   27ace:	bb20      	cbnz	r0, 27b1a <_vfiprintf_r+0x3ba>
   27ad0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27ad4:	9b05      	ldr	r3, [sp, #20]
   27ad6:	4433      	add	r3, r6
   27ad8:	9305      	str	r3, [sp, #20]
   27ada:	2d00      	cmp	r5, #0
   27adc:	f47f aea8 	bne.w	27830 <_vfiprintf_r+0xd0>
   27ae0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27ae2:	2b00      	cmp	r3, #0
   27ae4:	f040 85c1 	bne.w	2866a <_vfiprintf_r+0xf0a>
   27ae8:	ee18 3a10 	vmov	r3, s16
   27aec:	2200      	movs	r2, #0
   27aee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   27af2:	9219      	str	r2, [sp, #100]	; 0x64
   27af4:	e015      	b.n	27b22 <_vfiprintf_r+0x3c2>
   27af6:	f109 0908 	add.w	r9, r9, #8
   27afa:	e7eb      	b.n	27ad4 <_vfiprintf_r+0x374>
   27afc:	ee18 1a10 	vmov	r1, s16
   27b00:	aa18      	add	r2, sp, #96	; 0x60
   27b02:	4658      	mov	r0, fp
   27b04:	f7ff fdf0 	bl	276e8 <__sprint_r.part.0>
   27b08:	2800      	cmp	r0, #0
   27b0a:	f000 80a6 	beq.w	27c5a <_vfiprintf_r+0x4fa>
   27b0e:	9b08      	ldr	r3, [sp, #32]
   27b10:	b11b      	cbz	r3, 27b1a <_vfiprintf_r+0x3ba>
   27b12:	9908      	ldr	r1, [sp, #32]
   27b14:	4658      	mov	r0, fp
   27b16:	f7ff fb9b 	bl	27250 <_free_r>
   27b1a:	ee18 3a10 	vmov	r3, s16
   27b1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   27b22:	ee18 2a10 	vmov	r2, s16
   27b26:	6e52      	ldr	r2, [r2, #100]	; 0x64
   27b28:	f012 0f01 	tst.w	r2, #1
   27b2c:	b29a      	uxth	r2, r3
   27b2e:	f000 80a0 	beq.w	27c72 <_vfiprintf_r+0x512>
   27b32:	0650      	lsls	r0, r2, #25
   27b34:	f100 85b2 	bmi.w	2869c <_vfiprintf_r+0xf3c>
   27b38:	9805      	ldr	r0, [sp, #20]
   27b3a:	b045      	add	sp, #276	; 0x114
   27b3c:	ecbd 8b02 	vpop	{d8}
   27b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b44:	2900      	cmp	r1, #0
   27b46:	d0cb      	beq.n	27ae0 <_vfiprintf_r+0x380>
   27b48:	2300      	movs	r3, #0
   27b4a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27b4e:	2301      	movs	r3, #1
   27b50:	e9cd 3303 	strd	r3, r3, [sp, #12]
   27b54:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   27b58:	ac2b      	add	r4, sp, #172	; 0xac
   27b5a:	2300      	movs	r3, #0
   27b5c:	9308      	str	r3, [sp, #32]
   27b5e:	461f      	mov	r7, r3
   27b60:	f016 0302 	ands.w	r3, r6, #2
   27b64:	9309      	str	r3, [sp, #36]	; 0x24
   27b66:	d002      	beq.n	27b6e <_vfiprintf_r+0x40e>
   27b68:	9b03      	ldr	r3, [sp, #12]
   27b6a:	3302      	adds	r3, #2
   27b6c:	9303      	str	r3, [sp, #12]
   27b6e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   27b72:	930a      	str	r3, [sp, #40]	; 0x28
   27b74:	d105      	bne.n	27b82 <_vfiprintf_r+0x422>
   27b76:	9b06      	ldr	r3, [sp, #24]
   27b78:	9a03      	ldr	r2, [sp, #12]
   27b7a:	1a9d      	subs	r5, r3, r2
   27b7c:	2d00      	cmp	r5, #0
   27b7e:	f300 827b 	bgt.w	28078 <_vfiprintf_r+0x918>
   27b82:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27b86:	1c41      	adds	r1, r0, #1
   27b88:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   27b8c:	b182      	cbz	r2, 27bb0 <_vfiprintf_r+0x450>
   27b8e:	2201      	movs	r2, #1
   27b90:	3301      	adds	r3, #1
   27b92:	f8c9 2004 	str.w	r2, [r9, #4]
   27b96:	2907      	cmp	r1, #7
   27b98:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   27b9c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27ba0:	f8c9 2000 	str.w	r2, [r9]
   27ba4:	f300 824a 	bgt.w	2803c <_vfiprintf_r+0x8dc>
   27ba8:	4608      	mov	r0, r1
   27baa:	f109 0908 	add.w	r9, r9, #8
   27bae:	3101      	adds	r1, #1
   27bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27bb2:	b1e2      	cbz	r2, 27bee <_vfiprintf_r+0x48e>
   27bb4:	aa11      	add	r2, sp, #68	; 0x44
   27bb6:	3302      	adds	r3, #2
   27bb8:	f8c9 2000 	str.w	r2, [r9]
   27bbc:	2907      	cmp	r1, #7
   27bbe:	f04f 0202 	mov.w	r2, #2
   27bc2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27bc6:	f8c9 2004 	str.w	r2, [r9, #4]
   27bca:	f340 8250 	ble.w	2806e <_vfiprintf_r+0x90e>
   27bce:	2b00      	cmp	r3, #0
   27bd0:	f000 8343 	beq.w	2825a <_vfiprintf_r+0xafa>
   27bd4:	ee18 1a10 	vmov	r1, s16
   27bd8:	aa18      	add	r2, sp, #96	; 0x60
   27bda:	4658      	mov	r0, fp
   27bdc:	f7ff fd84 	bl	276e8 <__sprint_r.part.0>
   27be0:	2800      	cmp	r0, #0
   27be2:	d194      	bne.n	27b0e <_vfiprintf_r+0x3ae>
   27be4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27be8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27bec:	1c41      	adds	r1, r0, #1
   27bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27bf0:	2a80      	cmp	r2, #128	; 0x80
   27bf2:	f000 8184 	beq.w	27efe <_vfiprintf_r+0x79e>
   27bf6:	9a04      	ldr	r2, [sp, #16]
   27bf8:	1abd      	subs	r5, r7, r2
   27bfa:	2d00      	cmp	r5, #0
   27bfc:	f300 81d7 	bgt.w	27fae <_vfiprintf_r+0x84e>
   27c00:	9a04      	ldr	r2, [sp, #16]
   27c02:	f8c9 4000 	str.w	r4, [r9]
   27c06:	4413      	add	r3, r2
   27c08:	2907      	cmp	r1, #7
   27c0a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27c0e:	f8c9 2004 	str.w	r2, [r9, #4]
   27c12:	f340 816e 	ble.w	27ef2 <_vfiprintf_r+0x792>
   27c16:	2b00      	cmp	r3, #0
   27c18:	f000 8275 	beq.w	28106 <_vfiprintf_r+0x9a6>
   27c1c:	ee18 1a10 	vmov	r1, s16
   27c20:	aa18      	add	r2, sp, #96	; 0x60
   27c22:	4658      	mov	r0, fp
   27c24:	f7ff fd60 	bl	276e8 <__sprint_r.part.0>
   27c28:	2800      	cmp	r0, #0
   27c2a:	f47f af70 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   27c2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27c30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27c34:	0775      	lsls	r5, r6, #29
   27c36:	d505      	bpl.n	27c44 <_vfiprintf_r+0x4e4>
   27c38:	9a06      	ldr	r2, [sp, #24]
   27c3a:	9903      	ldr	r1, [sp, #12]
   27c3c:	1a54      	subs	r4, r2, r1
   27c3e:	2c00      	cmp	r4, #0
   27c40:	f300 826b 	bgt.w	2811a <_vfiprintf_r+0x9ba>
   27c44:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   27c48:	9803      	ldr	r0, [sp, #12]
   27c4a:	4281      	cmp	r1, r0
   27c4c:	bfac      	ite	ge
   27c4e:	1852      	addge	r2, r2, r1
   27c50:	1812      	addlt	r2, r2, r0
   27c52:	9205      	str	r2, [sp, #20]
   27c54:	2b00      	cmp	r3, #0
   27c56:	f47f af51 	bne.w	27afc <_vfiprintf_r+0x39c>
   27c5a:	9908      	ldr	r1, [sp, #32]
   27c5c:	2300      	movs	r3, #0
   27c5e:	9319      	str	r3, [sp, #100]	; 0x64
   27c60:	2900      	cmp	r1, #0
   27c62:	f000 8149 	beq.w	27ef8 <_vfiprintf_r+0x798>
   27c66:	4658      	mov	r0, fp
   27c68:	f7ff faf2 	bl	27250 <_free_r>
   27c6c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27c70:	e5c1      	b.n	277f6 <_vfiprintf_r+0x96>
   27c72:	059c      	lsls	r4, r3, #22
   27c74:	f53f af5d 	bmi.w	27b32 <_vfiprintf_r+0x3d2>
   27c78:	ee18 4a10 	vmov	r4, s16
   27c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27c7e:	f7fd f85d 	bl	24d3c <__retarget_lock_release_recursive>
   27c82:	89a2      	ldrh	r2, [r4, #12]
   27c84:	e755      	b.n	27b32 <_vfiprintf_r+0x3d2>
   27c86:	06f0      	lsls	r0, r6, #27
   27c88:	9a07      	ldr	r2, [sp, #28]
   27c8a:	f100 831f 	bmi.w	282cc <_vfiprintf_r+0xb6c>
   27c8e:	0671      	lsls	r1, r6, #25
   27c90:	f140 8319 	bpl.w	282c6 <_vfiprintf_r+0xb66>
   27c94:	f932 3b04 	ldrsh.w	r3, [r2], #4
   27c98:	9207      	str	r2, [sp, #28]
   27c9a:	17da      	asrs	r2, r3, #31
   27c9c:	4611      	mov	r1, r2
   27c9e:	e66e      	b.n	2797e <_vfiprintf_r+0x21e>
   27ca0:	f016 0310 	ands.w	r3, r6, #16
   27ca4:	9907      	ldr	r1, [sp, #28]
   27ca6:	f040 8309 	bne.w	282bc <_vfiprintf_r+0xb5c>
   27caa:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   27cae:	f000 8301 	beq.w	282b4 <_vfiprintf_r+0xb54>
   27cb2:	461a      	mov	r2, r3
   27cb4:	f851 3b04 	ldr.w	r3, [r1], #4
   27cb8:	9107      	str	r1, [sp, #28]
   27cba:	b29b      	uxth	r3, r3
   27cbc:	e6c3      	b.n	27a46 <_vfiprintf_r+0x2e6>
   27cbe:	9b07      	ldr	r3, [sp, #28]
   27cc0:	461a      	mov	r2, r3
   27cc2:	2300      	movs	r3, #0
   27cc4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27cc8:	4613      	mov	r3, r2
   27cca:	f853 4b04 	ldr.w	r4, [r3], #4
   27cce:	9303      	str	r3, [sp, #12]
   27cd0:	2c00      	cmp	r4, #0
   27cd2:	f000 8412 	beq.w	284fa <_vfiprintf_r+0xd9a>
   27cd6:	2953      	cmp	r1, #83	; 0x53
   27cd8:	f000 8365 	beq.w	283a6 <_vfiprintf_r+0xc46>
   27cdc:	f016 0510 	ands.w	r5, r6, #16
   27ce0:	f040 8361 	bne.w	283a6 <_vfiprintf_r+0xc46>
   27ce4:	1c7b      	adds	r3, r7, #1
   27ce6:	f000 84b3 	beq.w	28650 <_vfiprintf_r+0xef0>
   27cea:	463a      	mov	r2, r7
   27cec:	4629      	mov	r1, r5
   27cee:	4620      	mov	r0, r4
   27cf0:	f7fe ff5e 	bl	26bb0 <memchr>
   27cf4:	9008      	str	r0, [sp, #32]
   27cf6:	2800      	cmp	r0, #0
   27cf8:	f000 849f 	beq.w	2863a <_vfiprintf_r+0xeda>
   27cfc:	1b03      	subs	r3, r0, r4
   27cfe:	9a03      	ldr	r2, [sp, #12]
   27d00:	9304      	str	r3, [sp, #16]
   27d02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27d06:	462f      	mov	r7, r5
   27d08:	9207      	str	r2, [sp, #28]
   27d0a:	9303      	str	r3, [sp, #12]
   27d0c:	9508      	str	r5, [sp, #32]
   27d0e:	e657      	b.n	279c0 <_vfiprintf_r+0x260>
   27d10:	2943      	cmp	r1, #67	; 0x43
   27d12:	d002      	beq.n	27d1a <_vfiprintf_r+0x5ba>
   27d14:	06f5      	lsls	r5, r6, #27
   27d16:	f140 832d 	bpl.w	28374 <_vfiprintf_r+0xc14>
   27d1a:	9d07      	ldr	r5, [sp, #28]
   27d1c:	2208      	movs	r2, #8
   27d1e:	2100      	movs	r1, #0
   27d20:	a816      	add	r0, sp, #88	; 0x58
   27d22:	ac2b      	add	r4, sp, #172	; 0xac
   27d24:	f7fc ff62 	bl	24bec <memset>
   27d28:	ab16      	add	r3, sp, #88	; 0x58
   27d2a:	f855 2b04 	ldr.w	r2, [r5], #4
   27d2e:	4621      	mov	r1, r4
   27d30:	4658      	mov	r0, fp
   27d32:	f7fc ffb3 	bl	24c9c <_wcrtomb_r>
   27d36:	4603      	mov	r3, r0
   27d38:	3301      	adds	r3, #1
   27d3a:	9004      	str	r0, [sp, #16]
   27d3c:	f000 84b3 	beq.w	286a6 <_vfiprintf_r+0xf46>
   27d40:	9b04      	ldr	r3, [sp, #16]
   27d42:	9507      	str	r5, [sp, #28]
   27d44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27d48:	9303      	str	r3, [sp, #12]
   27d4a:	2300      	movs	r3, #0
   27d4c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27d50:	e703      	b.n	27b5a <_vfiprintf_r+0x3fa>
   27d52:	9b07      	ldr	r3, [sp, #28]
   27d54:	f853 2b04 	ldr.w	r2, [r3], #4
   27d58:	9206      	str	r2, [sp, #24]
   27d5a:	2a00      	cmp	r2, #0
   27d5c:	f280 829c 	bge.w	28298 <_vfiprintf_r+0xb38>
   27d60:	9a06      	ldr	r2, [sp, #24]
   27d62:	4252      	negs	r2, r2
   27d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27d68:	f898 1000 	ldrb.w	r1, [r8]
   27d6c:	f046 0604 	orr.w	r6, r6, #4
   27d70:	e569      	b.n	27846 <_vfiprintf_r+0xe6>
   27d72:	f898 1000 	ldrb.w	r1, [r8]
   27d76:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   27d7a:	e564      	b.n	27846 <_vfiprintf_r+0xe6>
   27d7c:	f898 1000 	ldrb.w	r1, [r8]
   27d80:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   27d84:	e55f      	b.n	27846 <_vfiprintf_r+0xe6>
   27d86:	4642      	mov	r2, r8
   27d88:	f812 1b01 	ldrb.w	r1, [r2], #1
   27d8c:	292a      	cmp	r1, #42	; 0x2a
   27d8e:	f000 8496 	beq.w	286be <_vfiprintf_r+0xf5e>
   27d92:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27d96:	2b09      	cmp	r3, #9
   27d98:	4690      	mov	r8, r2
   27d9a:	f04f 0700 	mov.w	r7, #0
   27d9e:	f63f ad54 	bhi.w	2784a <_vfiprintf_r+0xea>
   27da2:	f818 1b01 	ldrb.w	r1, [r8], #1
   27da6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   27daa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   27dae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27db2:	2b09      	cmp	r3, #9
   27db4:	d9f5      	bls.n	27da2 <_vfiprintf_r+0x642>
   27db6:	e548      	b.n	2784a <_vfiprintf_r+0xea>
   27db8:	f898 1000 	ldrb.w	r1, [r8]
   27dbc:	f046 0601 	orr.w	r6, r6, #1
   27dc0:	e541      	b.n	27846 <_vfiprintf_r+0xe6>
   27dc2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   27dc6:	2b00      	cmp	r3, #0
   27dc8:	f47f adc2 	bne.w	27950 <_vfiprintf_r+0x1f0>
   27dcc:	2320      	movs	r3, #32
   27dce:	f898 1000 	ldrb.w	r1, [r8]
   27dd2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27dd6:	e536      	b.n	27846 <_vfiprintf_r+0xe6>
   27dd8:	f898 1000 	ldrb.w	r1, [r8]
   27ddc:	296c      	cmp	r1, #108	; 0x6c
   27dde:	bf03      	ittte	eq
   27de0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   27de4:	f046 0620 	orreq.w	r6, r6, #32
   27de8:	f108 0801 	addeq.w	r8, r8, #1
   27dec:	f046 0610 	orrne.w	r6, r6, #16
   27df0:	e529      	b.n	27846 <_vfiprintf_r+0xe6>
   27df2:	f898 1000 	ldrb.w	r1, [r8]
   27df6:	2968      	cmp	r1, #104	; 0x68
   27df8:	bf03      	ittte	eq
   27dfa:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   27dfe:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   27e02:	f108 0801 	addeq.w	r8, r8, #1
   27e06:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   27e0a:	e51c      	b.n	27846 <_vfiprintf_r+0xe6>
   27e0c:	f046 0310 	orr.w	r3, r6, #16
   27e10:	9303      	str	r3, [sp, #12]
   27e12:	9b03      	ldr	r3, [sp, #12]
   27e14:	f013 0220 	ands.w	r2, r3, #32
   27e18:	f000 8206 	beq.w	28228 <_vfiprintf_r+0xac8>
   27e1c:	9b07      	ldr	r3, [sp, #28]
   27e1e:	3307      	adds	r3, #7
   27e20:	f023 0307 	bic.w	r3, r3, #7
   27e24:	4619      	mov	r1, r3
   27e26:	685a      	ldr	r2, [r3, #4]
   27e28:	f851 3b08 	ldr.w	r3, [r1], #8
   27e2c:	9107      	str	r1, [sp, #28]
   27e2e:	2101      	movs	r1, #1
   27e30:	e60d      	b.n	27a4e <_vfiprintf_r+0x2ee>
   27e32:	9a07      	ldr	r2, [sp, #28]
   27e34:	f046 0302 	orr.w	r3, r6, #2
   27e38:	9303      	str	r3, [sp, #12]
   27e3a:	f852 3b04 	ldr.w	r3, [r2], #4
   27e3e:	9207      	str	r2, [sp, #28]
   27e40:	f647 0230 	movw	r2, #30768	; 0x7830
   27e44:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   27e48:	4ab8      	ldr	r2, [pc, #736]	; (2812c <_vfiprintf_r+0x9cc>)
   27e4a:	920c      	str	r2, [sp, #48]	; 0x30
   27e4c:	2102      	movs	r1, #2
   27e4e:	2200      	movs	r2, #0
   27e50:	e5fd      	b.n	27a4e <_vfiprintf_r+0x2ee>
   27e52:	06b7      	lsls	r7, r6, #26
   27e54:	f100 8248 	bmi.w	282e8 <_vfiprintf_r+0xb88>
   27e58:	06f5      	lsls	r5, r6, #27
   27e5a:	f100 8346 	bmi.w	284ea <_vfiprintf_r+0xd8a>
   27e5e:	0674      	lsls	r4, r6, #25
   27e60:	f100 83d5 	bmi.w	2860e <_vfiprintf_r+0xeae>
   27e64:	05b0      	lsls	r0, r6, #22
   27e66:	f140 8340 	bpl.w	284ea <_vfiprintf_r+0xd8a>
   27e6a:	9b07      	ldr	r3, [sp, #28]
   27e6c:	9905      	ldr	r1, [sp, #20]
   27e6e:	f853 2b04 	ldr.w	r2, [r3], #4
   27e72:	9307      	str	r3, [sp, #28]
   27e74:	7011      	strb	r1, [r2, #0]
   27e76:	e4be      	b.n	277f6 <_vfiprintf_r+0x96>
   27e78:	9603      	str	r6, [sp, #12]
   27e7a:	2901      	cmp	r1, #1
   27e7c:	f43f ad8c 	beq.w	27998 <_vfiprintf_r+0x238>
   27e80:	2902      	cmp	r1, #2
   27e82:	ac44      	add	r4, sp, #272	; 0x110
   27e84:	d111      	bne.n	27eaa <_vfiprintf_r+0x74a>
   27e86:	980c      	ldr	r0, [sp, #48]	; 0x30
   27e88:	f003 010f 	and.w	r1, r3, #15
   27e8c:	091b      	lsrs	r3, r3, #4
   27e8e:	5c41      	ldrb	r1, [r0, r1]
   27e90:	f804 1d01 	strb.w	r1, [r4, #-1]!
   27e94:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   27e98:	0912      	lsrs	r2, r2, #4
   27e9a:	ea53 0102 	orrs.w	r1, r3, r2
   27e9e:	d1f3      	bne.n	27e88 <_vfiprintf_r+0x728>
   27ea0:	9e03      	ldr	r6, [sp, #12]
   27ea2:	ab44      	add	r3, sp, #272	; 0x110
   27ea4:	1b1b      	subs	r3, r3, r4
   27ea6:	9304      	str	r3, [sp, #16]
   27ea8:	e583      	b.n	279b2 <_vfiprintf_r+0x252>
   27eaa:	f003 0107 	and.w	r1, r3, #7
   27eae:	08db      	lsrs	r3, r3, #3
   27eb0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   27eb4:	08d2      	lsrs	r2, r2, #3
   27eb6:	3130      	adds	r1, #48	; 0x30
   27eb8:	ea53 0502 	orrs.w	r5, r3, r2
   27ebc:	4620      	mov	r0, r4
   27ebe:	f804 1d01 	strb.w	r1, [r4, #-1]!
   27ec2:	d1f2      	bne.n	27eaa <_vfiprintf_r+0x74a>
   27ec4:	9e03      	ldr	r6, [sp, #12]
   27ec6:	07f3      	lsls	r3, r6, #31
   27ec8:	d5eb      	bpl.n	27ea2 <_vfiprintf_r+0x742>
   27eca:	2930      	cmp	r1, #48	; 0x30
   27ecc:	d0e8      	beq.n	27ea0 <_vfiprintf_r+0x740>
   27ece:	2330      	movs	r3, #48	; 0x30
   27ed0:	3802      	subs	r0, #2
   27ed2:	f804 3c01 	strb.w	r3, [r4, #-1]
   27ed6:	ab44      	add	r3, sp, #272	; 0x110
   27ed8:	1a1b      	subs	r3, r3, r0
   27eda:	9e03      	ldr	r6, [sp, #12]
   27edc:	9304      	str	r3, [sp, #16]
   27ede:	4604      	mov	r4, r0
   27ee0:	e567      	b.n	279b2 <_vfiprintf_r+0x252>
   27ee2:	9b04      	ldr	r3, [sp, #16]
   27ee4:	941b      	str	r4, [sp, #108]	; 0x6c
   27ee6:	2201      	movs	r2, #1
   27ee8:	931c      	str	r3, [sp, #112]	; 0x70
   27eea:	931a      	str	r3, [sp, #104]	; 0x68
   27eec:	9219      	str	r2, [sp, #100]	; 0x64
   27eee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27ef2:	f109 0908 	add.w	r9, r9, #8
   27ef6:	e69d      	b.n	27c34 <_vfiprintf_r+0x4d4>
   27ef8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27efc:	e47b      	b.n	277f6 <_vfiprintf_r+0x96>
   27efe:	9a06      	ldr	r2, [sp, #24]
   27f00:	9d03      	ldr	r5, [sp, #12]
   27f02:	1b55      	subs	r5, r2, r5
   27f04:	2d00      	cmp	r5, #0
   27f06:	f77f ae76 	ble.w	27bf6 <_vfiprintf_r+0x496>
   27f0a:	2d10      	cmp	r5, #16
   27f0c:	f340 83bb 	ble.w	28686 <_vfiprintf_r+0xf26>
   27f10:	9409      	str	r4, [sp, #36]	; 0x24
   27f12:	ee18 4a10 	vmov	r4, s16
   27f16:	e007      	b.n	27f28 <_vfiprintf_r+0x7c8>
   27f18:	f100 0c02 	add.w	ip, r0, #2
   27f1c:	f109 0908 	add.w	r9, r9, #8
   27f20:	4610      	mov	r0, r2
   27f22:	3d10      	subs	r5, #16
   27f24:	2d10      	cmp	r5, #16
   27f26:	dd1e      	ble.n	27f66 <_vfiprintf_r+0x806>
   27f28:	4981      	ldr	r1, [pc, #516]	; (28130 <_vfiprintf_r+0x9d0>)
   27f2a:	f8c9 1000 	str.w	r1, [r9]
   27f2e:	1c42      	adds	r2, r0, #1
   27f30:	3310      	adds	r3, #16
   27f32:	2110      	movs	r1, #16
   27f34:	2a07      	cmp	r2, #7
   27f36:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27f3a:	f8c9 1004 	str.w	r1, [r9, #4]
   27f3e:	ddeb      	ble.n	27f18 <_vfiprintf_r+0x7b8>
   27f40:	aa18      	add	r2, sp, #96	; 0x60
   27f42:	2b00      	cmp	r3, #0
   27f44:	d074      	beq.n	28030 <_vfiprintf_r+0x8d0>
   27f46:	4621      	mov	r1, r4
   27f48:	4658      	mov	r0, fp
   27f4a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27f4e:	f7ff fbcb 	bl	276e8 <__sprint_r.part.0>
   27f52:	2800      	cmp	r0, #0
   27f54:	f47f addb 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   27f58:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27f5c:	3d10      	subs	r5, #16
   27f5e:	2d10      	cmp	r5, #16
   27f60:	f100 0c01 	add.w	ip, r0, #1
   27f64:	dce0      	bgt.n	27f28 <_vfiprintf_r+0x7c8>
   27f66:	9c09      	ldr	r4, [sp, #36]	; 0x24
   27f68:	4a71      	ldr	r2, [pc, #452]	; (28130 <_vfiprintf_r+0x9d0>)
   27f6a:	f8c9 5004 	str.w	r5, [r9, #4]
   27f6e:	442b      	add	r3, r5
   27f70:	f1bc 0f07 	cmp.w	ip, #7
   27f74:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   27f78:	f8c9 2000 	str.w	r2, [r9]
   27f7c:	f340 8194 	ble.w	282a8 <_vfiprintf_r+0xb48>
   27f80:	2b00      	cmp	r3, #0
   27f82:	f000 831f 	beq.w	285c4 <_vfiprintf_r+0xe64>
   27f86:	ee18 1a10 	vmov	r1, s16
   27f8a:	aa18      	add	r2, sp, #96	; 0x60
   27f8c:	4658      	mov	r0, fp
   27f8e:	f7ff fbab 	bl	276e8 <__sprint_r.part.0>
   27f92:	2800      	cmp	r0, #0
   27f94:	f47f adbb 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   27f98:	9a04      	ldr	r2, [sp, #16]
   27f9a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27f9e:	1abd      	subs	r5, r7, r2
   27fa0:	2d00      	cmp	r5, #0
   27fa2:	f100 0101 	add.w	r1, r0, #1
   27fa6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27faa:	f77f ae29 	ble.w	27c00 <_vfiprintf_r+0x4a0>
   27fae:	2d10      	cmp	r5, #16
   27fb0:	dd29      	ble.n	28006 <_vfiprintf_r+0x8a6>
   27fb2:	9409      	str	r4, [sp, #36]	; 0x24
   27fb4:	2710      	movs	r7, #16
   27fb6:	ee18 4a10 	vmov	r4, s16
   27fba:	e007      	b.n	27fcc <_vfiprintf_r+0x86c>
   27fbc:	f100 0c02 	add.w	ip, r0, #2
   27fc0:	f109 0908 	add.w	r9, r9, #8
   27fc4:	4610      	mov	r0, r2
   27fc6:	3d10      	subs	r5, #16
   27fc8:	2d10      	cmp	r5, #16
   27fca:	dd1a      	ble.n	28002 <_vfiprintf_r+0x8a2>
   27fcc:	1c42      	adds	r2, r0, #1
   27fce:	4958      	ldr	r1, [pc, #352]	; (28130 <_vfiprintf_r+0x9d0>)
   27fd0:	3310      	adds	r3, #16
   27fd2:	2a07      	cmp	r2, #7
   27fd4:	e9c9 1700 	strd	r1, r7, [r9]
   27fd8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27fdc:	ddee      	ble.n	27fbc <_vfiprintf_r+0x85c>
   27fde:	aa18      	add	r2, sp, #96	; 0x60
   27fe0:	b303      	cbz	r3, 28024 <_vfiprintf_r+0x8c4>
   27fe2:	4621      	mov	r1, r4
   27fe4:	4658      	mov	r0, fp
   27fe6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27fea:	f7ff fb7d 	bl	276e8 <__sprint_r.part.0>
   27fee:	2800      	cmp	r0, #0
   27ff0:	f47f ad8d 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   27ff4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27ff8:	3d10      	subs	r5, #16
   27ffa:	2d10      	cmp	r5, #16
   27ffc:	f100 0c01 	add.w	ip, r0, #1
   28000:	dce4      	bgt.n	27fcc <_vfiprintf_r+0x86c>
   28002:	9c09      	ldr	r4, [sp, #36]	; 0x24
   28004:	4661      	mov	r1, ip
   28006:	4a4a      	ldr	r2, [pc, #296]	; (28130 <_vfiprintf_r+0x9d0>)
   28008:	f8c9 5004 	str.w	r5, [r9, #4]
   2800c:	442b      	add	r3, r5
   2800e:	2907      	cmp	r1, #7
   28010:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   28014:	f8c9 2000 	str.w	r2, [r9]
   28018:	f300 80e7 	bgt.w	281ea <_vfiprintf_r+0xa8a>
   2801c:	f109 0908 	add.w	r9, r9, #8
   28020:	3101      	adds	r1, #1
   28022:	e5ed      	b.n	27c00 <_vfiprintf_r+0x4a0>
   28024:	f04f 0c01 	mov.w	ip, #1
   28028:	4618      	mov	r0, r3
   2802a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2802e:	e7ca      	b.n	27fc6 <_vfiprintf_r+0x866>
   28030:	f04f 0c01 	mov.w	ip, #1
   28034:	4618      	mov	r0, r3
   28036:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2803a:	e772      	b.n	27f22 <_vfiprintf_r+0x7c2>
   2803c:	2b00      	cmp	r3, #0
   2803e:	f000 8104 	beq.w	2824a <_vfiprintf_r+0xaea>
   28042:	ee18 1a10 	vmov	r1, s16
   28046:	aa18      	add	r2, sp, #96	; 0x60
   28048:	4658      	mov	r0, fp
   2804a:	f7ff fb4d 	bl	276e8 <__sprint_r.part.0>
   2804e:	2800      	cmp	r0, #0
   28050:	f47f ad5d 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   28054:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   28058:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2805c:	1c41      	adds	r1, r0, #1
   2805e:	e5a7      	b.n	27bb0 <_vfiprintf_r+0x450>
   28060:	2302      	movs	r3, #2
   28062:	aa11      	add	r2, sp, #68	; 0x44
   28064:	931c      	str	r3, [sp, #112]	; 0x70
   28066:	921b      	str	r2, [sp, #108]	; 0x6c
   28068:	2101      	movs	r1, #1
   2806a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2806e:	4608      	mov	r0, r1
   28070:	f109 0908 	add.w	r9, r9, #8
   28074:	1c41      	adds	r1, r0, #1
   28076:	e5ba      	b.n	27bee <_vfiprintf_r+0x48e>
   28078:	2d10      	cmp	r5, #16
   2807a:	f340 82e5 	ble.w	28648 <_vfiprintf_r+0xee8>
   2807e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   28082:	940f      	str	r4, [sp, #60]	; 0x3c
   28084:	4608      	mov	r0, r1
   28086:	ee18 4a10 	vmov	r4, s16
   2808a:	e007      	b.n	2809c <_vfiprintf_r+0x93c>
   2808c:	f100 0c02 	add.w	ip, r0, #2
   28090:	f109 0908 	add.w	r9, r9, #8
   28094:	4610      	mov	r0, r2
   28096:	3d10      	subs	r5, #16
   28098:	2d10      	cmp	r5, #16
   2809a:	dd1d      	ble.n	280d8 <_vfiprintf_r+0x978>
   2809c:	4925      	ldr	r1, [pc, #148]	; (28134 <_vfiprintf_r+0x9d4>)
   2809e:	f8c9 1000 	str.w	r1, [r9]
   280a2:	1c42      	adds	r2, r0, #1
   280a4:	3310      	adds	r3, #16
   280a6:	2110      	movs	r1, #16
   280a8:	2a07      	cmp	r2, #7
   280aa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   280ae:	f8c9 1004 	str.w	r1, [r9, #4]
   280b2:	ddeb      	ble.n	2808c <_vfiprintf_r+0x92c>
   280b4:	aa18      	add	r2, sp, #96	; 0x60
   280b6:	b303      	cbz	r3, 280fa <_vfiprintf_r+0x99a>
   280b8:	4621      	mov	r1, r4
   280ba:	4658      	mov	r0, fp
   280bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   280c0:	f7ff fb12 	bl	276e8 <__sprint_r.part.0>
   280c4:	2800      	cmp	r0, #0
   280c6:	f47f ad22 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   280ca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   280ce:	3d10      	subs	r5, #16
   280d0:	2d10      	cmp	r5, #16
   280d2:	f100 0c01 	add.w	ip, r0, #1
   280d6:	dce1      	bgt.n	2809c <_vfiprintf_r+0x93c>
   280d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   280da:	4660      	mov	r0, ip
   280dc:	4a15      	ldr	r2, [pc, #84]	; (28134 <_vfiprintf_r+0x9d4>)
   280de:	f8c9 5004 	str.w	r5, [r9, #4]
   280e2:	442b      	add	r3, r5
   280e4:	2807      	cmp	r0, #7
   280e6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   280ea:	f8c9 2000 	str.w	r2, [r9]
   280ee:	f300 80c1 	bgt.w	28274 <_vfiprintf_r+0xb14>
   280f2:	f109 0908 	add.w	r9, r9, #8
   280f6:	1c41      	adds	r1, r0, #1
   280f8:	e546      	b.n	27b88 <_vfiprintf_r+0x428>
   280fa:	4618      	mov	r0, r3
   280fc:	f04f 0c01 	mov.w	ip, #1
   28100:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28104:	e7c7      	b.n	28096 <_vfiprintf_r+0x936>
   28106:	0776      	lsls	r6, r6, #29
   28108:	9319      	str	r3, [sp, #100]	; 0x64
   2810a:	d553      	bpl.n	281b4 <_vfiprintf_r+0xa54>
   2810c:	9a06      	ldr	r2, [sp, #24]
   2810e:	9903      	ldr	r1, [sp, #12]
   28110:	1a54      	subs	r4, r2, r1
   28112:	2c00      	cmp	r4, #0
   28114:	dd4e      	ble.n	281b4 <_vfiprintf_r+0xa54>
   28116:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2811a:	2c10      	cmp	r4, #16
   2811c:	f340 82b0 	ble.w	28680 <_vfiprintf_r+0xf20>
   28120:	9919      	ldr	r1, [sp, #100]	; 0x64
   28122:	ee18 6a10 	vmov	r6, s16
   28126:	2510      	movs	r5, #16
   28128:	e00d      	b.n	28146 <_vfiprintf_r+0x9e6>
   2812a:	bf00      	nop
   2812c:	20004384 	.word	0x20004384
   28130:	200058ec 	.word	0x200058ec
   28134:	200043c4 	.word	0x200043c4
   28138:	1c88      	adds	r0, r1, #2
   2813a:	f109 0908 	add.w	r9, r9, #8
   2813e:	4611      	mov	r1, r2
   28140:	3c10      	subs	r4, #16
   28142:	2c10      	cmp	r4, #16
   28144:	dd1a      	ble.n	2817c <_vfiprintf_r+0xa1c>
   28146:	1c4a      	adds	r2, r1, #1
   28148:	48b3      	ldr	r0, [pc, #716]	; (28418 <_vfiprintf_r+0xcb8>)
   2814a:	3310      	adds	r3, #16
   2814c:	2a07      	cmp	r2, #7
   2814e:	e9c9 0500 	strd	r0, r5, [r9]
   28152:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   28156:	ddef      	ble.n	28138 <_vfiprintf_r+0x9d8>
   28158:	aa18      	add	r2, sp, #96	; 0x60
   2815a:	b333      	cbz	r3, 281aa <_vfiprintf_r+0xa4a>
   2815c:	4631      	mov	r1, r6
   2815e:	4658      	mov	r0, fp
   28160:	f7ff fac2 	bl	276e8 <__sprint_r.part.0>
   28164:	2800      	cmp	r0, #0
   28166:	f47f acd2 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   2816a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   2816e:	3c10      	subs	r4, #16
   28170:	2c10      	cmp	r4, #16
   28172:	f101 0001 	add.w	r0, r1, #1
   28176:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2817a:	dce4      	bgt.n	28146 <_vfiprintf_r+0x9e6>
   2817c:	4aa6      	ldr	r2, [pc, #664]	; (28418 <_vfiprintf_r+0xcb8>)
   2817e:	f8c9 4004 	str.w	r4, [r9, #4]
   28182:	4423      	add	r3, r4
   28184:	2807      	cmp	r0, #7
   28186:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   2818a:	f8c9 2000 	str.w	r2, [r9]
   2818e:	f77f ad59 	ble.w	27c44 <_vfiprintf_r+0x4e4>
   28192:	b17b      	cbz	r3, 281b4 <_vfiprintf_r+0xa54>
   28194:	ee18 1a10 	vmov	r1, s16
   28198:	aa18      	add	r2, sp, #96	; 0x60
   2819a:	4658      	mov	r0, fp
   2819c:	f7ff faa4 	bl	276e8 <__sprint_r.part.0>
   281a0:	2800      	cmp	r0, #0
   281a2:	f47f acb4 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   281a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   281a8:	e54c      	b.n	27c44 <_vfiprintf_r+0x4e4>
   281aa:	2001      	movs	r0, #1
   281ac:	4619      	mov	r1, r3
   281ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   281b2:	e7c5      	b.n	28140 <_vfiprintf_r+0x9e0>
   281b4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   281b8:	9903      	ldr	r1, [sp, #12]
   281ba:	428a      	cmp	r2, r1
   281bc:	bfac      	ite	ge
   281be:	189b      	addge	r3, r3, r2
   281c0:	185b      	addlt	r3, r3, r1
   281c2:	9305      	str	r3, [sp, #20]
   281c4:	e549      	b.n	27c5a <_vfiprintf_r+0x4fa>
   281c6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   281ca:	058f      	lsls	r7, r1, #22
   281cc:	ee18 3a10 	vmov	r3, s16
   281d0:	b28a      	uxth	r2, r1
   281d2:	f53f aae8 	bmi.w	277a6 <_vfiprintf_r+0x46>
   281d6:	ee18 5a10 	vmov	r5, s16
   281da:	6d98      	ldr	r0, [r3, #88]	; 0x58
   281dc:	f7fc fdac 	bl	24d38 <__retarget_lock_acquire_recursive>
   281e0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   281e4:	b28a      	uxth	r2, r1
   281e6:	f7ff bade 	b.w	277a6 <_vfiprintf_r+0x46>
   281ea:	2b00      	cmp	r3, #0
   281ec:	f43f ae79 	beq.w	27ee2 <_vfiprintf_r+0x782>
   281f0:	ee18 1a10 	vmov	r1, s16
   281f4:	aa18      	add	r2, sp, #96	; 0x60
   281f6:	4658      	mov	r0, fp
   281f8:	f7ff fa76 	bl	276e8 <__sprint_r.part.0>
   281fc:	2800      	cmp	r0, #0
   281fe:	f47f ac86 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   28202:	9919      	ldr	r1, [sp, #100]	; 0x64
   28204:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   28206:	3101      	adds	r1, #1
   28208:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2820c:	e4f8      	b.n	27c00 <_vfiprintf_r+0x4a0>
   2820e:	9219      	str	r2, [sp, #100]	; 0x64
   28210:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28214:	e45e      	b.n	27ad4 <_vfiprintf_r+0x374>
   28216:	2f00      	cmp	r7, #0
   28218:	f47f abc3 	bne.w	279a2 <_vfiprintf_r+0x242>
   2821c:	9e03      	ldr	r6, [sp, #12]
   2821e:	2700      	movs	r7, #0
   28220:	9704      	str	r7, [sp, #16]
   28222:	ac44      	add	r4, sp, #272	; 0x110
   28224:	f7ff bbc5 	b.w	279b2 <_vfiprintf_r+0x252>
   28228:	9b03      	ldr	r3, [sp, #12]
   2822a:	f013 0310 	ands.w	r3, r3, #16
   2822e:	d154      	bne.n	282da <_vfiprintf_r+0xb7a>
   28230:	9a03      	ldr	r2, [sp, #12]
   28232:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   28236:	f000 816b 	beq.w	28510 <_vfiprintf_r+0xdb0>
   2823a:	9907      	ldr	r1, [sp, #28]
   2823c:	461a      	mov	r2, r3
   2823e:	f851 3b04 	ldr.w	r3, [r1], #4
   28242:	9107      	str	r1, [sp, #28]
   28244:	b29b      	uxth	r3, r3
   28246:	2101      	movs	r1, #1
   28248:	e401      	b.n	27a4e <_vfiprintf_r+0x2ee>
   2824a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2824c:	2a00      	cmp	r2, #0
   2824e:	d164      	bne.n	2831a <_vfiprintf_r+0xbba>
   28250:	4618      	mov	r0, r3
   28252:	2101      	movs	r1, #1
   28254:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28258:	e4c9      	b.n	27bee <_vfiprintf_r+0x48e>
   2825a:	2101      	movs	r1, #1
   2825c:	4618      	mov	r0, r3
   2825e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28262:	e4c4      	b.n	27bee <_vfiprintf_r+0x48e>
   28264:	425b      	negs	r3, r3
   28266:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   2826a:	9603      	str	r6, [sp, #12]
   2826c:	202d      	movs	r0, #45	; 0x2d
   2826e:	2101      	movs	r1, #1
   28270:	f7ff bbee 	b.w	27a50 <_vfiprintf_r+0x2f0>
   28274:	2b00      	cmp	r3, #0
   28276:	f000 8088 	beq.w	2838a <_vfiprintf_r+0xc2a>
   2827a:	ee18 1a10 	vmov	r1, s16
   2827e:	aa18      	add	r2, sp, #96	; 0x60
   28280:	4658      	mov	r0, fp
   28282:	f7ff fa31 	bl	276e8 <__sprint_r.part.0>
   28286:	2800      	cmp	r0, #0
   28288:	f47f ac41 	bne.w	27b0e <_vfiprintf_r+0x3ae>
   2828c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   28290:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28294:	1c41      	adds	r1, r0, #1
   28296:	e477      	b.n	27b88 <_vfiprintf_r+0x428>
   28298:	f898 1000 	ldrb.w	r1, [r8]
   2829c:	9307      	str	r3, [sp, #28]
   2829e:	f7ff bad2 	b.w	27846 <_vfiprintf_r+0xe6>
   282a2:	ac44      	add	r4, sp, #272	; 0x110
   282a4:	f7ff bb85 	b.w	279b2 <_vfiprintf_r+0x252>
   282a8:	f109 0908 	add.w	r9, r9, #8
   282ac:	f10c 0101 	add.w	r1, ip, #1
   282b0:	4660      	mov	r0, ip
   282b2:	e4a0      	b.n	27bf6 <_vfiprintf_r+0x496>
   282b4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   282b8:	f040 8197 	bne.w	285ea <_vfiprintf_r+0xe8a>
   282bc:	f851 3b04 	ldr.w	r3, [r1], #4
   282c0:	9107      	str	r1, [sp, #28]
   282c2:	f7ff bbc0 	b.w	27a46 <_vfiprintf_r+0x2e6>
   282c6:	05b3      	lsls	r3, r6, #22
   282c8:	f100 8188 	bmi.w	285dc <_vfiprintf_r+0xe7c>
   282cc:	f852 3b04 	ldr.w	r3, [r2], #4
   282d0:	9207      	str	r2, [sp, #28]
   282d2:	17da      	asrs	r2, r3, #31
   282d4:	4611      	mov	r1, r2
   282d6:	f7ff bb52 	b.w	2797e <_vfiprintf_r+0x21e>
   282da:	9907      	ldr	r1, [sp, #28]
   282dc:	f851 3b04 	ldr.w	r3, [r1], #4
   282e0:	9107      	str	r1, [sp, #28]
   282e2:	2101      	movs	r1, #1
   282e4:	f7ff bbb3 	b.w	27a4e <_vfiprintf_r+0x2ee>
   282e8:	9b07      	ldr	r3, [sp, #28]
   282ea:	9805      	ldr	r0, [sp, #20]
   282ec:	f853 1b04 	ldr.w	r1, [r3], #4
   282f0:	9307      	str	r3, [sp, #28]
   282f2:	17c2      	asrs	r2, r0, #31
   282f4:	e9c1 0200 	strd	r0, r2, [r1]
   282f8:	f7ff ba7d 	b.w	277f6 <_vfiprintf_r+0x96>
   282fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   282fe:	2b00      	cmp	r3, #0
   28300:	f43f ab26 	beq.w	27950 <_vfiprintf_r+0x1f0>
   28304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28306:	781b      	ldrb	r3, [r3, #0]
   28308:	2b00      	cmp	r3, #0
   2830a:	f43f ab21 	beq.w	27950 <_vfiprintf_r+0x1f0>
   2830e:	f898 1000 	ldrb.w	r1, [r8]
   28312:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   28316:	f7ff ba96 	b.w	27846 <_vfiprintf_r+0xe6>
   2831a:	2302      	movs	r3, #2
   2831c:	aa11      	add	r2, sp, #68	; 0x44
   2831e:	931c      	str	r3, [sp, #112]	; 0x70
   28320:	921b      	str	r2, [sp, #108]	; 0x6c
   28322:	2001      	movs	r0, #1
   28324:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28328:	e6a2      	b.n	28070 <_vfiprintf_r+0x910>
   2832a:	9603      	str	r6, [sp, #12]
   2832c:	e571      	b.n	27e12 <_vfiprintf_r+0x6b2>
   2832e:	4b3b      	ldr	r3, [pc, #236]	; (2841c <_vfiprintf_r+0xcbc>)
   28330:	930c      	str	r3, [sp, #48]	; 0x30
   28332:	f016 0220 	ands.w	r2, r6, #32
   28336:	d059      	beq.n	283ec <_vfiprintf_r+0xc8c>
   28338:	9b07      	ldr	r3, [sp, #28]
   2833a:	3307      	adds	r3, #7
   2833c:	f023 0307 	bic.w	r3, r3, #7
   28340:	4618      	mov	r0, r3
   28342:	685a      	ldr	r2, [r3, #4]
   28344:	f850 3b08 	ldr.w	r3, [r0], #8
   28348:	9007      	str	r0, [sp, #28]
   2834a:	07f4      	lsls	r4, r6, #31
   2834c:	d509      	bpl.n	28362 <_vfiprintf_r+0xc02>
   2834e:	ea53 0002 	orrs.w	r0, r3, r2
   28352:	d006      	beq.n	28362 <_vfiprintf_r+0xc02>
   28354:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   28358:	2130      	movs	r1, #48	; 0x30
   2835a:	f046 0602 	orr.w	r6, r6, #2
   2835e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   28362:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   28366:	9103      	str	r1, [sp, #12]
   28368:	2102      	movs	r1, #2
   2836a:	f7ff bb70 	b.w	27a4e <_vfiprintf_r+0x2ee>
   2836e:	4b2c      	ldr	r3, [pc, #176]	; (28420 <_vfiprintf_r+0xcc0>)
   28370:	930c      	str	r3, [sp, #48]	; 0x30
   28372:	e7de      	b.n	28332 <_vfiprintf_r+0xbd2>
   28374:	9b07      	ldr	r3, [sp, #28]
   28376:	2101      	movs	r1, #1
   28378:	f853 2b04 	ldr.w	r2, [r3], #4
   2837c:	9103      	str	r1, [sp, #12]
   2837e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   28382:	9307      	str	r3, [sp, #28]
   28384:	9104      	str	r1, [sp, #16]
   28386:	ac2b      	add	r4, sp, #172	; 0xac
   28388:	e4df      	b.n	27d4a <_vfiprintf_r+0x5ea>
   2838a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   2838e:	2a00      	cmp	r2, #0
   28390:	f040 8132 	bne.w	285f8 <_vfiprintf_r+0xe98>
   28394:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28396:	2a00      	cmp	r2, #0
   28398:	f47f ae62 	bne.w	28060 <_vfiprintf_r+0x900>
   2839c:	4618      	mov	r0, r3
   2839e:	2101      	movs	r1, #1
   283a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   283a4:	e427      	b.n	27bf6 <_vfiprintf_r+0x496>
   283a6:	2100      	movs	r1, #0
   283a8:	2208      	movs	r2, #8
   283aa:	a816      	add	r0, sp, #88	; 0x58
   283ac:	9413      	str	r4, [sp, #76]	; 0x4c
   283ae:	f7fc fc1d 	bl	24bec <memset>
   283b2:	1c79      	adds	r1, r7, #1
   283b4:	f000 80bc 	beq.w	28530 <_vfiprintf_r+0xdd0>
   283b8:	2500      	movs	r5, #0
   283ba:	9407      	str	r4, [sp, #28]
   283bc:	462c      	mov	r4, r5
   283be:	e00c      	b.n	283da <_vfiprintf_r+0xc7a>
   283c0:	a92b      	add	r1, sp, #172	; 0xac
   283c2:	4658      	mov	r0, fp
   283c4:	f7fc fc6a 	bl	24c9c <_wcrtomb_r>
   283c8:	1c42      	adds	r2, r0, #1
   283ca:	4420      	add	r0, r4
   283cc:	f000 816b 	beq.w	286a6 <_vfiprintf_r+0xf46>
   283d0:	42b8      	cmp	r0, r7
   283d2:	dc08      	bgt.n	283e6 <_vfiprintf_r+0xc86>
   283d4:	f000 8170 	beq.w	286b8 <_vfiprintf_r+0xf58>
   283d8:	4604      	mov	r4, r0
   283da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   283dc:	5952      	ldr	r2, [r2, r5]
   283de:	ab16      	add	r3, sp, #88	; 0x58
   283e0:	3504      	adds	r5, #4
   283e2:	2a00      	cmp	r2, #0
   283e4:	d1ec      	bne.n	283c0 <_vfiprintf_r+0xc60>
   283e6:	9404      	str	r4, [sp, #16]
   283e8:	9c07      	ldr	r4, [sp, #28]
   283ea:	e0af      	b.n	2854c <_vfiprintf_r+0xdec>
   283ec:	f016 0310 	ands.w	r3, r6, #16
   283f0:	9807      	ldr	r0, [sp, #28]
   283f2:	d10c      	bne.n	2840e <_vfiprintf_r+0xcae>
   283f4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   283f8:	d005      	beq.n	28406 <_vfiprintf_r+0xca6>
   283fa:	461a      	mov	r2, r3
   283fc:	f850 3b04 	ldr.w	r3, [r0], #4
   28400:	9007      	str	r0, [sp, #28]
   28402:	b29b      	uxth	r3, r3
   28404:	e7a1      	b.n	2834a <_vfiprintf_r+0xbea>
   28406:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   2840a:	f040 80e1 	bne.w	285d0 <_vfiprintf_r+0xe70>
   2840e:	f850 3b04 	ldr.w	r3, [r0], #4
   28412:	9007      	str	r0, [sp, #28]
   28414:	e799      	b.n	2834a <_vfiprintf_r+0xbea>
   28416:	bf00      	nop
   28418:	200043c4 	.word	0x200043c4
   2841c:	20004384 	.word	0x20004384
   28420:	20004398 	.word	0x20004398
   28424:	9903      	ldr	r1, [sp, #12]
   28426:	9704      	str	r7, [sp, #16]
   28428:	ac44      	add	r4, sp, #272	; 0x110
   2842a:	469e      	mov	lr, r3
   2842c:	ee08 ba90 	vmov	s17, fp
   28430:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   28434:	f04f 0c00 	mov.w	ip, #0
   28438:	4623      	mov	r3, r4
   2843a:	e006      	b.n	2844a <_vfiprintf_r+0xcea>
   2843c:	f1be 0f0a 	cmp.w	lr, #10
   28440:	f172 0200 	sbcs.w	r2, r2, #0
   28444:	d339      	bcc.n	284ba <_vfiprintf_r+0xd5a>
   28446:	46a6      	mov	lr, r4
   28448:	462a      	mov	r2, r5
   2844a:	49a6      	ldr	r1, [pc, #664]	; (286e4 <_vfiprintf_r+0xf84>)
   2844c:	eb1e 0002 	adds.w	r0, lr, r2
   28450:	f140 0000 	adc.w	r0, r0, #0
   28454:	460f      	mov	r7, r1
   28456:	fba1 1400 	umull	r1, r4, r1, r0
   2845a:	f024 0103 	bic.w	r1, r4, #3
   2845e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   28462:	1a40      	subs	r0, r0, r1
   28464:	ebbe 0100 	subs.w	r1, lr, r0
   28468:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   2846c:	f162 0400 	sbc.w	r4, r2, #0
   28470:	fb05 f501 	mul.w	r5, r5, r1
   28474:	fb07 5504 	mla	r5, r7, r4, r5
   28478:	fba1 4107 	umull	r4, r1, r1, r7
   2847c:	440d      	add	r5, r1
   2847e:	2705      	movs	r7, #5
   28480:	f004 0101 	and.w	r1, r4, #1
   28484:	fba1 1b07 	umull	r1, fp, r1, r7
   28488:	1809      	adds	r1, r1, r0
   2848a:	0864      	lsrs	r4, r4, #1
   2848c:	3130      	adds	r1, #48	; 0x30
   2848e:	f803 1c01 	strb.w	r1, [r3, #-1]
   28492:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   28496:	f10c 0c01 	add.w	ip, ip, #1
   2849a:	3b01      	subs	r3, #1
   2849c:	086d      	lsrs	r5, r5, #1
   2849e:	2e00      	cmp	r6, #0
   284a0:	d0cc      	beq.n	2843c <_vfiprintf_r+0xcdc>
   284a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   284a4:	7809      	ldrb	r1, [r1, #0]
   284a6:	4561      	cmp	r1, ip
   284a8:	d1c8      	bne.n	2843c <_vfiprintf_r+0xcdc>
   284aa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   284ae:	d0c5      	beq.n	2843c <_vfiprintf_r+0xcdc>
   284b0:	f1be 0f0a 	cmp.w	lr, #10
   284b4:	f172 0200 	sbcs.w	r2, r2, #0
   284b8:	d26c      	bcs.n	28594 <_vfiprintf_r+0xe34>
   284ba:	461c      	mov	r4, r3
   284bc:	ab44      	add	r3, sp, #272	; 0x110
   284be:	1b1b      	subs	r3, r3, r4
   284c0:	9f04      	ldr	r7, [sp, #16]
   284c2:	9e03      	ldr	r6, [sp, #12]
   284c4:	9304      	str	r3, [sp, #16]
   284c6:	ee18 ba90 	vmov	fp, s17
   284ca:	f7ff ba72 	b.w	279b2 <_vfiprintf_r+0x252>
   284ce:	9603      	str	r6, [sp, #12]
   284d0:	f7ff ba62 	b.w	27998 <_vfiprintf_r+0x238>
   284d4:	4658      	mov	r0, fp
   284d6:	f7fe fb3d 	bl	26b54 <__sinit>
   284da:	f7ff b95b 	b.w	27794 <_vfiprintf_r+0x34>
   284de:	2901      	cmp	r1, #1
   284e0:	9603      	str	r6, [sp, #12]
   284e2:	f47f accd 	bne.w	27e80 <_vfiprintf_r+0x720>
   284e6:	f7ff ba5c 	b.w	279a2 <_vfiprintf_r+0x242>
   284ea:	9b07      	ldr	r3, [sp, #28]
   284ec:	9905      	ldr	r1, [sp, #20]
   284ee:	f853 2b04 	ldr.w	r2, [r3], #4
   284f2:	6011      	str	r1, [r2, #0]
   284f4:	9307      	str	r3, [sp, #28]
   284f6:	f7ff b97e 	b.w	277f6 <_vfiprintf_r+0x96>
   284fa:	2f06      	cmp	r7, #6
   284fc:	463b      	mov	r3, r7
   284fe:	9a03      	ldr	r2, [sp, #12]
   28500:	4c79      	ldr	r4, [pc, #484]	; (286e8 <_vfiprintf_r+0xf88>)
   28502:	9207      	str	r2, [sp, #28]
   28504:	bf28      	it	cs
   28506:	2306      	movcs	r3, #6
   28508:	9304      	str	r3, [sp, #16]
   2850a:	9303      	str	r3, [sp, #12]
   2850c:	f7ff bb25 	b.w	27b5a <_vfiprintf_r+0x3fa>
   28510:	9b03      	ldr	r3, [sp, #12]
   28512:	9907      	ldr	r1, [sp, #28]
   28514:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   28518:	bf14      	ite	ne
   2851a:	f851 3b04 	ldrne.w	r3, [r1], #4
   2851e:	f851 3b04 	ldreq.w	r3, [r1], #4
   28522:	9107      	str	r1, [sp, #28]
   28524:	bf1c      	itt	ne
   28526:	4602      	movne	r2, r0
   28528:	b2db      	uxtbne	r3, r3
   2852a:	2101      	movs	r1, #1
   2852c:	f7ff ba8f 	b.w	27a4e <_vfiprintf_r+0x2ee>
   28530:	ab16      	add	r3, sp, #88	; 0x58
   28532:	9300      	str	r3, [sp, #0]
   28534:	2300      	movs	r3, #0
   28536:	4619      	mov	r1, r3
   28538:	aa13      	add	r2, sp, #76	; 0x4c
   2853a:	4658      	mov	r0, fp
   2853c:	f7fd fa9c 	bl	25a78 <_wcsrtombs_r>
   28540:	4603      	mov	r3, r0
   28542:	3301      	adds	r3, #1
   28544:	9004      	str	r0, [sp, #16]
   28546:	f000 80ae 	beq.w	286a6 <_vfiprintf_r+0xf46>
   2854a:	9413      	str	r4, [sp, #76]	; 0x4c
   2854c:	9b04      	ldr	r3, [sp, #16]
   2854e:	2b00      	cmp	r3, #0
   28550:	d030      	beq.n	285b4 <_vfiprintf_r+0xe54>
   28552:	2b63      	cmp	r3, #99	; 0x63
   28554:	dc63      	bgt.n	2861e <_vfiprintf_r+0xebe>
   28556:	2300      	movs	r3, #0
   28558:	9308      	str	r3, [sp, #32]
   2855a:	ac2b      	add	r4, sp, #172	; 0xac
   2855c:	2208      	movs	r2, #8
   2855e:	2100      	movs	r1, #0
   28560:	a816      	add	r0, sp, #88	; 0x58
   28562:	f7fc fb43 	bl	24bec <memset>
   28566:	9d04      	ldr	r5, [sp, #16]
   28568:	ab16      	add	r3, sp, #88	; 0x58
   2856a:	9300      	str	r3, [sp, #0]
   2856c:	aa13      	add	r2, sp, #76	; 0x4c
   2856e:	462b      	mov	r3, r5
   28570:	4621      	mov	r1, r4
   28572:	4658      	mov	r0, fp
   28574:	f7fd fa80 	bl	25a78 <_wcsrtombs_r>
   28578:	4285      	cmp	r5, r0
   2857a:	f040 80ab 	bne.w	286d4 <_vfiprintf_r+0xf74>
   2857e:	9b03      	ldr	r3, [sp, #12]
   28580:	9a04      	ldr	r2, [sp, #16]
   28582:	9307      	str	r3, [sp, #28]
   28584:	2300      	movs	r3, #0
   28586:	54a3      	strb	r3, [r4, r2]
   28588:	461f      	mov	r7, r3
   2858a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2858e:	9303      	str	r3, [sp, #12]
   28590:	f7ff ba16 	b.w	279c0 <_vfiprintf_r+0x260>
   28594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28596:	990d      	ldr	r1, [sp, #52]	; 0x34
   28598:	1a9b      	subs	r3, r3, r2
   2859a:	4618      	mov	r0, r3
   2859c:	9308      	str	r3, [sp, #32]
   2859e:	f7f9 fee1 	bl	22364 <strncpy>
   285a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   285a4:	9b08      	ldr	r3, [sp, #32]
   285a6:	784a      	ldrb	r2, [r1, #1]
   285a8:	b10a      	cbz	r2, 285ae <_vfiprintf_r+0xe4e>
   285aa:	3101      	adds	r1, #1
   285ac:	910b      	str	r1, [sp, #44]	; 0x2c
   285ae:	f04f 0c00 	mov.w	ip, #0
   285b2:	e748      	b.n	28446 <_vfiprintf_r+0xce6>
   285b4:	9b03      	ldr	r3, [sp, #12]
   285b6:	9307      	str	r3, [sp, #28]
   285b8:	9b04      	ldr	r3, [sp, #16]
   285ba:	9303      	str	r3, [sp, #12]
   285bc:	461f      	mov	r7, r3
   285be:	9308      	str	r3, [sp, #32]
   285c0:	f7ff b9fe 	b.w	279c0 <_vfiprintf_r+0x260>
   285c4:	2101      	movs	r1, #1
   285c6:	4618      	mov	r0, r3
   285c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   285cc:	f7ff bb13 	b.w	27bf6 <_vfiprintf_r+0x496>
   285d0:	f850 3b04 	ldr.w	r3, [r0], #4
   285d4:	9007      	str	r0, [sp, #28]
   285d6:	4622      	mov	r2, r4
   285d8:	b2db      	uxtb	r3, r3
   285da:	e6b6      	b.n	2834a <_vfiprintf_r+0xbea>
   285dc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   285e0:	9207      	str	r2, [sp, #28]
   285e2:	17da      	asrs	r2, r3, #31
   285e4:	4611      	mov	r1, r2
   285e6:	f7ff b9ca 	b.w	2797e <_vfiprintf_r+0x21e>
   285ea:	f851 3b04 	ldr.w	r3, [r1], #4
   285ee:	9107      	str	r1, [sp, #28]
   285f0:	4602      	mov	r2, r0
   285f2:	b2db      	uxtb	r3, r3
   285f4:	f7ff ba27 	b.w	27a46 <_vfiprintf_r+0x2e6>
   285f8:	2301      	movs	r3, #1
   285fa:	931c      	str	r3, [sp, #112]	; 0x70
   285fc:	2101      	movs	r1, #1
   285fe:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   28602:	931b      	str	r3, [sp, #108]	; 0x6c
   28604:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28608:	460b      	mov	r3, r1
   2860a:	f7ff bacd 	b.w	27ba8 <_vfiprintf_r+0x448>
   2860e:	9b07      	ldr	r3, [sp, #28]
   28610:	9905      	ldr	r1, [sp, #20]
   28612:	f853 2b04 	ldr.w	r2, [r3], #4
   28616:	9307      	str	r3, [sp, #28]
   28618:	8011      	strh	r1, [r2, #0]
   2861a:	f7ff b8ec 	b.w	277f6 <_vfiprintf_r+0x96>
   2861e:	1c59      	adds	r1, r3, #1
   28620:	4658      	mov	r0, fp
   28622:	f7fb ff67 	bl	244f4 <_malloc_r>
   28626:	4604      	mov	r4, r0
   28628:	2800      	cmp	r0, #0
   2862a:	d03c      	beq.n	286a6 <_vfiprintf_r+0xf46>
   2862c:	9008      	str	r0, [sp, #32]
   2862e:	e795      	b.n	2855c <_vfiprintf_r+0xdfc>
   28630:	6d88      	ldr	r0, [r1, #88]	; 0x58
   28632:	f7fc fb83 	bl	24d3c <__retarget_lock_release_recursive>
   28636:	f7ff b9e9 	b.w	27a0c <_vfiprintf_r+0x2ac>
   2863a:	9b03      	ldr	r3, [sp, #12]
   2863c:	9307      	str	r3, [sp, #28]
   2863e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   28642:	9f08      	ldr	r7, [sp, #32]
   28644:	f7ff b9bc 	b.w	279c0 <_vfiprintf_r+0x260>
   28648:	9819      	ldr	r0, [sp, #100]	; 0x64
   2864a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2864c:	3001      	adds	r0, #1
   2864e:	e545      	b.n	280dc <_vfiprintf_r+0x97c>
   28650:	9b03      	ldr	r3, [sp, #12]
   28652:	9307      	str	r3, [sp, #28]
   28654:	4620      	mov	r0, r4
   28656:	f7fe fb13 	bl	26c80 <strlen>
   2865a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2865e:	462f      	mov	r7, r5
   28660:	9004      	str	r0, [sp, #16]
   28662:	9303      	str	r3, [sp, #12]
   28664:	9508      	str	r5, [sp, #32]
   28666:	f7ff b9ab 	b.w	279c0 <_vfiprintf_r+0x260>
   2866a:	ee18 1a10 	vmov	r1, s16
   2866e:	aa18      	add	r2, sp, #96	; 0x60
   28670:	4658      	mov	r0, fp
   28672:	f7ff f839 	bl	276e8 <__sprint_r.part.0>
   28676:	2800      	cmp	r0, #0
   28678:	f43f aa36 	beq.w	27ae8 <_vfiprintf_r+0x388>
   2867c:	f7ff ba4d 	b.w	27b1a <_vfiprintf_r+0x3ba>
   28680:	9819      	ldr	r0, [sp, #100]	; 0x64
   28682:	3001      	adds	r0, #1
   28684:	e57a      	b.n	2817c <_vfiprintf_r+0xa1c>
   28686:	468c      	mov	ip, r1
   28688:	e46e      	b.n	27f68 <_vfiprintf_r+0x808>
   2868a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2868c:	07d9      	lsls	r1, r3, #31
   2868e:	d405      	bmi.n	2869c <_vfiprintf_r+0xf3c>
   28690:	89ab      	ldrh	r3, [r5, #12]
   28692:	059a      	lsls	r2, r3, #22
   28694:	d402      	bmi.n	2869c <_vfiprintf_r+0xf3c>
   28696:	6da8      	ldr	r0, [r5, #88]	; 0x58
   28698:	f7fc fb50 	bl	24d3c <__retarget_lock_release_recursive>
   2869c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   286a0:	9305      	str	r3, [sp, #20]
   286a2:	f7ff ba49 	b.w	27b38 <_vfiprintf_r+0x3d8>
   286a6:	ee18 2a10 	vmov	r2, s16
   286aa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   286ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   286b2:	8193      	strh	r3, [r2, #12]
   286b4:	f7ff ba35 	b.w	27b22 <_vfiprintf_r+0x3c2>
   286b8:	9c07      	ldr	r4, [sp, #28]
   286ba:	9704      	str	r7, [sp, #16]
   286bc:	e746      	b.n	2854c <_vfiprintf_r+0xdec>
   286be:	9b07      	ldr	r3, [sp, #28]
   286c0:	f898 1001 	ldrb.w	r1, [r8, #1]
   286c4:	f853 7b04 	ldr.w	r7, [r3], #4
   286c8:	9307      	str	r3, [sp, #28]
   286ca:	4690      	mov	r8, r2
   286cc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   286d0:	f7ff b8b9 	b.w	27846 <_vfiprintf_r+0xe6>
   286d4:	ee18 2a10 	vmov	r2, s16
   286d8:	8993      	ldrh	r3, [r2, #12]
   286da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   286de:	8193      	strh	r3, [r2, #12]
   286e0:	f7ff ba15 	b.w	27b0e <_vfiprintf_r+0x3ae>
   286e4:	cccccccd 	.word	0xcccccccd
   286e8:	200043ac 	.word	0x200043ac

000286ec <__sbprintf>:
   286ec:	b570      	push	{r4, r5, r6, lr}
   286ee:	460c      	mov	r4, r1
   286f0:	8989      	ldrh	r1, [r1, #12]
   286f2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   286f6:	f021 0102 	bic.w	r1, r1, #2
   286fa:	f8ad 1014 	strh.w	r1, [sp, #20]
   286fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
   28700:	911b      	str	r1, [sp, #108]	; 0x6c
   28702:	89e1      	ldrh	r1, [r4, #14]
   28704:	f8ad 1016 	strh.w	r1, [sp, #22]
   28708:	69e1      	ldr	r1, [r4, #28]
   2870a:	9109      	str	r1, [sp, #36]	; 0x24
   2870c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2870e:	910b      	str	r1, [sp, #44]	; 0x2c
   28710:	a91c      	add	r1, sp, #112	; 0x70
   28712:	9102      	str	r1, [sp, #8]
   28714:	9106      	str	r1, [sp, #24]
   28716:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2871a:	4606      	mov	r6, r0
   2871c:	9104      	str	r1, [sp, #16]
   2871e:	9107      	str	r1, [sp, #28]
   28720:	a818      	add	r0, sp, #96	; 0x60
   28722:	2100      	movs	r1, #0
   28724:	e9cd 3200 	strd	r3, r2, [sp]
   28728:	9108      	str	r1, [sp, #32]
   2872a:	f7fc fb01 	bl	24d30 <__retarget_lock_init_recursive>
   2872e:	e9dd 3200 	ldrd	r3, r2, [sp]
   28732:	a902      	add	r1, sp, #8
   28734:	4630      	mov	r0, r6
   28736:	f7ff f813 	bl	27760 <_vfiprintf_r>
   2873a:	1e05      	subs	r5, r0, #0
   2873c:	db07      	blt.n	2874e <__sbprintf+0x62>
   2873e:	a902      	add	r1, sp, #8
   28740:	4630      	mov	r0, r6
   28742:	f7fe f947 	bl	269d4 <_fflush_r>
   28746:	2800      	cmp	r0, #0
   28748:	bf18      	it	ne
   2874a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   2874e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   28752:	065b      	lsls	r3, r3, #25
   28754:	d503      	bpl.n	2875e <__sbprintf+0x72>
   28756:	89a3      	ldrh	r3, [r4, #12]
   28758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2875c:	81a3      	strh	r3, [r4, #12]
   2875e:	9818      	ldr	r0, [sp, #96]	; 0x60
   28760:	f7fc fae8 	bl	24d34 <__retarget_lock_close_recursive>
   28764:	4628      	mov	r0, r5
   28766:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   2876a:	bd70      	pop	{r4, r5, r6, pc}

0002876c <__swbuf_r>:
   2876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2876e:	460d      	mov	r5, r1
   28770:	4614      	mov	r4, r2
   28772:	4606      	mov	r6, r0
   28774:	b110      	cbz	r0, 2877c <__swbuf_r+0x10>
   28776:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28778:	2b00      	cmp	r3, #0
   2877a:	d04c      	beq.n	28816 <__swbuf_r+0xaa>
   2877c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   28780:	69a3      	ldr	r3, [r4, #24]
   28782:	60a3      	str	r3, [r4, #8]
   28784:	0717      	lsls	r7, r2, #28
   28786:	b290      	uxth	r0, r2
   28788:	d51b      	bpl.n	287c2 <__swbuf_r+0x56>
   2878a:	6923      	ldr	r3, [r4, #16]
   2878c:	b1cb      	cbz	r3, 287c2 <__swbuf_r+0x56>
   2878e:	b2ed      	uxtb	r5, r5
   28790:	0481      	lsls	r1, r0, #18
   28792:	462f      	mov	r7, r5
   28794:	d522      	bpl.n	287dc <__swbuf_r+0x70>
   28796:	6822      	ldr	r2, [r4, #0]
   28798:	6961      	ldr	r1, [r4, #20]
   2879a:	1ad3      	subs	r3, r2, r3
   2879c:	4299      	cmp	r1, r3
   2879e:	dd29      	ble.n	287f4 <__swbuf_r+0x88>
   287a0:	3301      	adds	r3, #1
   287a2:	68a1      	ldr	r1, [r4, #8]
   287a4:	3901      	subs	r1, #1
   287a6:	60a1      	str	r1, [r4, #8]
   287a8:	1c51      	adds	r1, r2, #1
   287aa:	6021      	str	r1, [r4, #0]
   287ac:	7015      	strb	r5, [r2, #0]
   287ae:	6962      	ldr	r2, [r4, #20]
   287b0:	429a      	cmp	r2, r3
   287b2:	d027      	beq.n	28804 <__swbuf_r+0x98>
   287b4:	89a3      	ldrh	r3, [r4, #12]
   287b6:	07db      	lsls	r3, r3, #31
   287b8:	d501      	bpl.n	287be <__swbuf_r+0x52>
   287ba:	2d0a      	cmp	r5, #10
   287bc:	d022      	beq.n	28804 <__swbuf_r+0x98>
   287be:	4638      	mov	r0, r7
   287c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   287c2:	4621      	mov	r1, r4
   287c4:	4630      	mov	r0, r6
   287c6:	f7fc fc39 	bl	2503c <__swsetup_r>
   287ca:	bb08      	cbnz	r0, 28810 <__swbuf_r+0xa4>
   287cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   287d0:	6923      	ldr	r3, [r4, #16]
   287d2:	b290      	uxth	r0, r2
   287d4:	b2ed      	uxtb	r5, r5
   287d6:	0481      	lsls	r1, r0, #18
   287d8:	462f      	mov	r7, r5
   287da:	d4dc      	bmi.n	28796 <__swbuf_r+0x2a>
   287dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   287e0:	81a2      	strh	r2, [r4, #12]
   287e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   287e4:	6961      	ldr	r1, [r4, #20]
   287e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   287ea:	6662      	str	r2, [r4, #100]	; 0x64
   287ec:	6822      	ldr	r2, [r4, #0]
   287ee:	1ad3      	subs	r3, r2, r3
   287f0:	4299      	cmp	r1, r3
   287f2:	dcd5      	bgt.n	287a0 <__swbuf_r+0x34>
   287f4:	4621      	mov	r1, r4
   287f6:	4630      	mov	r0, r6
   287f8:	f7fe f8ec 	bl	269d4 <_fflush_r>
   287fc:	b940      	cbnz	r0, 28810 <__swbuf_r+0xa4>
   287fe:	6822      	ldr	r2, [r4, #0]
   28800:	2301      	movs	r3, #1
   28802:	e7ce      	b.n	287a2 <__swbuf_r+0x36>
   28804:	4621      	mov	r1, r4
   28806:	4630      	mov	r0, r6
   28808:	f7fe f8e4 	bl	269d4 <_fflush_r>
   2880c:	2800      	cmp	r0, #0
   2880e:	d0d6      	beq.n	287be <__swbuf_r+0x52>
   28810:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   28814:	e7d3      	b.n	287be <__swbuf_r+0x52>
   28816:	f7fe f99d 	bl	26b54 <__sinit>
   2881a:	e7af      	b.n	2877c <__swbuf_r+0x10>

0002881c <__register_exitproc>:
   2881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28820:	f8df a07c 	ldr.w	sl, [pc, #124]	; 288a0 <__register_exitproc+0x84>
   28824:	4606      	mov	r6, r0
   28826:	f8da 0000 	ldr.w	r0, [sl]
   2882a:	4698      	mov	r8, r3
   2882c:	460f      	mov	r7, r1
   2882e:	4691      	mov	r9, r2
   28830:	f7fc fa82 	bl	24d38 <__retarget_lock_acquire_recursive>
   28834:	4b18      	ldr	r3, [pc, #96]	; (28898 <__register_exitproc+0x7c>)
   28836:	681c      	ldr	r4, [r3, #0]
   28838:	b324      	cbz	r4, 28884 <__register_exitproc+0x68>
   2883a:	6865      	ldr	r5, [r4, #4]
   2883c:	2d1f      	cmp	r5, #31
   2883e:	dc24      	bgt.n	2888a <__register_exitproc+0x6e>
   28840:	b95e      	cbnz	r6, 2885a <__register_exitproc+0x3e>
   28842:	1c6b      	adds	r3, r5, #1
   28844:	3502      	adds	r5, #2
   28846:	f8da 0000 	ldr.w	r0, [sl]
   2884a:	6063      	str	r3, [r4, #4]
   2884c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   28850:	f7fc fa74 	bl	24d3c <__retarget_lock_release_recursive>
   28854:	2000      	movs	r0, #0
   28856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2885a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   2885e:	2301      	movs	r3, #1
   28860:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   28864:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   28868:	40ab      	lsls	r3, r5
   2886a:	431a      	orrs	r2, r3
   2886c:	2e02      	cmp	r6, #2
   2886e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   28872:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   28876:	d1e4      	bne.n	28842 <__register_exitproc+0x26>
   28878:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   2887c:	431a      	orrs	r2, r3
   2887e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   28882:	e7de      	b.n	28842 <__register_exitproc+0x26>
   28884:	4c05      	ldr	r4, [pc, #20]	; (2889c <__register_exitproc+0x80>)
   28886:	601c      	str	r4, [r3, #0]
   28888:	e7d7      	b.n	2883a <__register_exitproc+0x1e>
   2888a:	f8da 0000 	ldr.w	r0, [sl]
   2888e:	f7fc fa55 	bl	24d3c <__retarget_lock_release_recursive>
   28892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28896:	e7de      	b.n	28856 <__register_exitproc+0x3a>
   28898:	2000cb74 	.word	0x2000cb74
   2889c:	2000cb78 	.word	0x2000cb78
   288a0:	20005a50 	.word	0x20005a50

000288a4 <__ascii_mbtowc>:
   288a4:	b082      	sub	sp, #8
   288a6:	b149      	cbz	r1, 288bc <__ascii_mbtowc+0x18>
   288a8:	b15a      	cbz	r2, 288c2 <__ascii_mbtowc+0x1e>
   288aa:	b16b      	cbz	r3, 288c8 <__ascii_mbtowc+0x24>
   288ac:	7813      	ldrb	r3, [r2, #0]
   288ae:	600b      	str	r3, [r1, #0]
   288b0:	7812      	ldrb	r2, [r2, #0]
   288b2:	1e10      	subs	r0, r2, #0
   288b4:	bf18      	it	ne
   288b6:	2001      	movne	r0, #1
   288b8:	b002      	add	sp, #8
   288ba:	4770      	bx	lr
   288bc:	a901      	add	r1, sp, #4
   288be:	2a00      	cmp	r2, #0
   288c0:	d1f3      	bne.n	288aa <__ascii_mbtowc+0x6>
   288c2:	4610      	mov	r0, r2
   288c4:	b002      	add	sp, #8
   288c6:	4770      	bx	lr
   288c8:	f06f 0001 	mvn.w	r0, #1
   288cc:	e7f4      	b.n	288b8 <__ascii_mbtowc+0x14>
   288ce:	bf00      	nop

000288d0 <_fclose_r>:
   288d0:	b570      	push	{r4, r5, r6, lr}
   288d2:	2900      	cmp	r1, #0
   288d4:	d04b      	beq.n	2896e <_fclose_r+0x9e>
   288d6:	4606      	mov	r6, r0
   288d8:	460c      	mov	r4, r1
   288da:	b110      	cbz	r0, 288e2 <_fclose_r+0x12>
   288dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   288de:	2b00      	cmp	r3, #0
   288e0:	d048      	beq.n	28974 <_fclose_r+0xa4>
   288e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   288e4:	07d8      	lsls	r0, r3, #31
   288e6:	d534      	bpl.n	28952 <_fclose_r+0x82>
   288e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   288ec:	2b00      	cmp	r3, #0
   288ee:	d03e      	beq.n	2896e <_fclose_r+0x9e>
   288f0:	4621      	mov	r1, r4
   288f2:	4630      	mov	r0, r6
   288f4:	f7fd ffd6 	bl	268a4 <__sflush_r>
   288f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   288fa:	4605      	mov	r5, r0
   288fc:	b133      	cbz	r3, 2890c <_fclose_r+0x3c>
   288fe:	69e1      	ldr	r1, [r4, #28]
   28900:	4630      	mov	r0, r6
   28902:	4798      	blx	r3
   28904:	2800      	cmp	r0, #0
   28906:	bfb8      	it	lt
   28908:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   2890c:	89a3      	ldrh	r3, [r4, #12]
   2890e:	061a      	lsls	r2, r3, #24
   28910:	d43c      	bmi.n	2898c <_fclose_r+0xbc>
   28912:	6b21      	ldr	r1, [r4, #48]	; 0x30
   28914:	b141      	cbz	r1, 28928 <_fclose_r+0x58>
   28916:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2891a:	4299      	cmp	r1, r3
   2891c:	d002      	beq.n	28924 <_fclose_r+0x54>
   2891e:	4630      	mov	r0, r6
   28920:	f7fe fc96 	bl	27250 <_free_r>
   28924:	2300      	movs	r3, #0
   28926:	6323      	str	r3, [r4, #48]	; 0x30
   28928:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2892a:	b121      	cbz	r1, 28936 <_fclose_r+0x66>
   2892c:	4630      	mov	r0, r6
   2892e:	f7fe fc8f 	bl	27250 <_free_r>
   28932:	2300      	movs	r3, #0
   28934:	6463      	str	r3, [r4, #68]	; 0x44
   28936:	f7fe f92b 	bl	26b90 <__sfp_lock_acquire>
   2893a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2893c:	2200      	movs	r2, #0
   2893e:	07db      	lsls	r3, r3, #31
   28940:	81a2      	strh	r2, [r4, #12]
   28942:	d51f      	bpl.n	28984 <_fclose_r+0xb4>
   28944:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28946:	f7fc f9f5 	bl	24d34 <__retarget_lock_close_recursive>
   2894a:	f7fe f927 	bl	26b9c <__sfp_lock_release>
   2894e:	4628      	mov	r0, r5
   28950:	bd70      	pop	{r4, r5, r6, pc}
   28952:	89a3      	ldrh	r3, [r4, #12]
   28954:	0599      	lsls	r1, r3, #22
   28956:	d4cb      	bmi.n	288f0 <_fclose_r+0x20>
   28958:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2895a:	f7fc f9ed 	bl	24d38 <__retarget_lock_acquire_recursive>
   2895e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28962:	2b00      	cmp	r3, #0
   28964:	d1c4      	bne.n	288f0 <_fclose_r+0x20>
   28966:	6e65      	ldr	r5, [r4, #100]	; 0x64
   28968:	f015 0501 	ands.w	r5, r5, #1
   2896c:	d005      	beq.n	2897a <_fclose_r+0xaa>
   2896e:	2500      	movs	r5, #0
   28970:	4628      	mov	r0, r5
   28972:	bd70      	pop	{r4, r5, r6, pc}
   28974:	f7fe f8ee 	bl	26b54 <__sinit>
   28978:	e7b3      	b.n	288e2 <_fclose_r+0x12>
   2897a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2897c:	f7fc f9de 	bl	24d3c <__retarget_lock_release_recursive>
   28980:	4628      	mov	r0, r5
   28982:	bd70      	pop	{r4, r5, r6, pc}
   28984:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28986:	f7fc f9d9 	bl	24d3c <__retarget_lock_release_recursive>
   2898a:	e7db      	b.n	28944 <_fclose_r+0x74>
   2898c:	6921      	ldr	r1, [r4, #16]
   2898e:	4630      	mov	r0, r6
   28990:	f7fe fc5e 	bl	27250 <_free_r>
   28994:	e7bd      	b.n	28912 <_fclose_r+0x42>
   28996:	bf00      	nop

00028998 <_wcsnrtombs_l>:
   28998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2899c:	b08b      	sub	sp, #44	; 0x2c
   2899e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   289a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   289a4:	9103      	str	r1, [sp, #12]
   289a6:	4681      	mov	r9, r0
   289a8:	9205      	str	r2, [sp, #20]
   289aa:	461e      	mov	r6, r3
   289ac:	f1b8 0f00 	cmp.w	r8, #0
   289b0:	d05c      	beq.n	28a6c <_wcsnrtombs_l+0xd4>
   289b2:	9b03      	ldr	r3, [sp, #12]
   289b4:	2b00      	cmp	r3, #0
   289b6:	d05e      	beq.n	28a76 <_wcsnrtombs_l+0xde>
   289b8:	9b05      	ldr	r3, [sp, #20]
   289ba:	681d      	ldr	r5, [r3, #0]
   289bc:	2f00      	cmp	r7, #0
   289be:	d06a      	beq.n	28a96 <_wcsnrtombs_l+0xfe>
   289c0:	1e74      	subs	r4, r6, #1
   289c2:	b34e      	cbz	r6, 28a18 <_wcsnrtombs_l+0x80>
   289c4:	9b03      	ldr	r3, [sp, #12]
   289c6:	9304      	str	r3, [sp, #16]
   289c8:	3d04      	subs	r5, #4
   289ca:	2600      	movs	r6, #0
   289cc:	9501      	str	r5, [sp, #4]
   289ce:	e00b      	b.n	289e8 <_wcsnrtombs_l+0x50>
   289d0:	9b03      	ldr	r3, [sp, #12]
   289d2:	bb2b      	cbnz	r3, 28a20 <_wcsnrtombs_l+0x88>
   289d4:	9b01      	ldr	r3, [sp, #4]
   289d6:	681a      	ldr	r2, [r3, #0]
   289d8:	2a00      	cmp	r2, #0
   289da:	d03a      	beq.n	28a52 <_wcsnrtombs_l+0xba>
   289dc:	45bc      	cmp	ip, r7
   289de:	d25c      	bcs.n	28a9a <_wcsnrtombs_l+0x102>
   289e0:	3c01      	subs	r4, #1
   289e2:	1c63      	adds	r3, r4, #1
   289e4:	4666      	mov	r6, ip
   289e6:	d017      	beq.n	28a18 <_wcsnrtombs_l+0x80>
   289e8:	f8d8 3000 	ldr.w	r3, [r8]
   289ec:	9302      	str	r3, [sp, #8]
   289ee:	9b01      	ldr	r3, [sp, #4]
   289f0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   289f4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   289f8:	9301      	str	r3, [sp, #4]
   289fa:	a907      	add	r1, sp, #28
   289fc:	4643      	mov	r3, r8
   289fe:	4648      	mov	r0, r9
   28a00:	f8d8 b004 	ldr.w	fp, [r8, #4]
   28a04:	47a8      	blx	r5
   28a06:	1c42      	adds	r2, r0, #1
   28a08:	d03a      	beq.n	28a80 <_wcsnrtombs_l+0xe8>
   28a0a:	eb00 0c06 	add.w	ip, r0, r6
   28a0e:	45bc      	cmp	ip, r7
   28a10:	d9de      	bls.n	289d0 <_wcsnrtombs_l+0x38>
   28a12:	9b02      	ldr	r3, [sp, #8]
   28a14:	e9c8 3b00 	strd	r3, fp, [r8]
   28a18:	4630      	mov	r0, r6
   28a1a:	b00b      	add	sp, #44	; 0x2c
   28a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a20:	2800      	cmp	r0, #0
   28a22:	dd0e      	ble.n	28a42 <_wcsnrtombs_l+0xaa>
   28a24:	9b04      	ldr	r3, [sp, #16]
   28a26:	9d01      	ldr	r5, [sp, #4]
   28a28:	4418      	add	r0, r3
   28a2a:	1e5a      	subs	r2, r3, #1
   28a2c:	a907      	add	r1, sp, #28
   28a2e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   28a32:	f811 3b01 	ldrb.w	r3, [r1], #1
   28a36:	f802 3f01 	strb.w	r3, [r2, #1]!
   28a3a:	4572      	cmp	r2, lr
   28a3c:	d1f9      	bne.n	28a32 <_wcsnrtombs_l+0x9a>
   28a3e:	9501      	str	r5, [sp, #4]
   28a40:	9004      	str	r0, [sp, #16]
   28a42:	9b05      	ldr	r3, [sp, #20]
   28a44:	681a      	ldr	r2, [r3, #0]
   28a46:	3204      	adds	r2, #4
   28a48:	601a      	str	r2, [r3, #0]
   28a4a:	9b01      	ldr	r3, [sp, #4]
   28a4c:	681a      	ldr	r2, [r3, #0]
   28a4e:	2a00      	cmp	r2, #0
   28a50:	d1c4      	bne.n	289dc <_wcsnrtombs_l+0x44>
   28a52:	9b03      	ldr	r3, [sp, #12]
   28a54:	b10b      	cbz	r3, 28a5a <_wcsnrtombs_l+0xc2>
   28a56:	9b05      	ldr	r3, [sp, #20]
   28a58:	601a      	str	r2, [r3, #0]
   28a5a:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   28a5e:	2200      	movs	r2, #0
   28a60:	4630      	mov	r0, r6
   28a62:	f8c8 2000 	str.w	r2, [r8]
   28a66:	b00b      	add	sp, #44	; 0x2c
   28a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a6c:	9b03      	ldr	r3, [sp, #12]
   28a6e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   28a72:	2b00      	cmp	r3, #0
   28a74:	d1a0      	bne.n	289b8 <_wcsnrtombs_l+0x20>
   28a76:	9b05      	ldr	r3, [sp, #20]
   28a78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   28a7c:	681d      	ldr	r5, [r3, #0]
   28a7e:	e79f      	b.n	289c0 <_wcsnrtombs_l+0x28>
   28a80:	4606      	mov	r6, r0
   28a82:	218a      	movs	r1, #138	; 0x8a
   28a84:	2200      	movs	r2, #0
   28a86:	4630      	mov	r0, r6
   28a88:	f8c9 1000 	str.w	r1, [r9]
   28a8c:	f8c8 2000 	str.w	r2, [r8]
   28a90:	b00b      	add	sp, #44	; 0x2c
   28a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a96:	463e      	mov	r6, r7
   28a98:	e7be      	b.n	28a18 <_wcsnrtombs_l+0x80>
   28a9a:	4666      	mov	r6, ip
   28a9c:	e7bc      	b.n	28a18 <_wcsnrtombs_l+0x80>
   28a9e:	bf00      	nop

00028aa0 <_wcsnrtombs_r>:
   28aa0:	b510      	push	{r4, lr}
   28aa2:	b084      	sub	sp, #16
   28aa4:	4c05      	ldr	r4, [pc, #20]	; (28abc <_wcsnrtombs_r+0x1c>)
   28aa6:	9806      	ldr	r0, [sp, #24]
   28aa8:	9000      	str	r0, [sp, #0]
   28aaa:	9807      	ldr	r0, [sp, #28]
   28aac:	9001      	str	r0, [sp, #4]
   28aae:	4804      	ldr	r0, [pc, #16]	; (28ac0 <_wcsnrtombs_r+0x20>)
   28ab0:	6800      	ldr	r0, [r0, #0]
   28ab2:	9402      	str	r4, [sp, #8]
   28ab4:	f7ff ff70 	bl	28998 <_wcsnrtombs_l>
   28ab8:	b004      	add	sp, #16
   28aba:	bd10      	pop	{r4, pc}
   28abc:	20005a5c 	.word	0x20005a5c
   28ac0:	20005fe4 	.word	0x20005fe4

00028ac4 <_close_r>:
   28ac4:	b538      	push	{r3, r4, r5, lr}
   28ac6:	4d07      	ldr	r5, [pc, #28]	; (28ae4 <_close_r+0x20>)
   28ac8:	2200      	movs	r2, #0
   28aca:	4604      	mov	r4, r0
   28acc:	4608      	mov	r0, r1
   28ace:	602a      	str	r2, [r5, #0]
   28ad0:	f7f0 f9e2 	bl	18e98 <_close>
   28ad4:	1c43      	adds	r3, r0, #1
   28ad6:	d000      	beq.n	28ada <_close_r+0x16>
   28ad8:	bd38      	pop	{r3, r4, r5, pc}
   28ada:	682b      	ldr	r3, [r5, #0]
   28adc:	2b00      	cmp	r3, #0
   28ade:	d0fb      	beq.n	28ad8 <_close_r+0x14>
   28ae0:	6023      	str	r3, [r4, #0]
   28ae2:	bd38      	pop	{r3, r4, r5, pc}
   28ae4:	2000d2a0 	.word	0x2000d2a0

00028ae8 <_lseek_r>:
   28ae8:	b538      	push	{r3, r4, r5, lr}
   28aea:	460c      	mov	r4, r1
   28aec:	4d08      	ldr	r5, [pc, #32]	; (28b10 <_lseek_r+0x28>)
   28aee:	4684      	mov	ip, r0
   28af0:	4611      	mov	r1, r2
   28af2:	4620      	mov	r0, r4
   28af4:	461a      	mov	r2, r3
   28af6:	2300      	movs	r3, #0
   28af8:	602b      	str	r3, [r5, #0]
   28afa:	4664      	mov	r4, ip
   28afc:	f7f0 f9d8 	bl	18eb0 <_lseek>
   28b00:	1c43      	adds	r3, r0, #1
   28b02:	d000      	beq.n	28b06 <_lseek_r+0x1e>
   28b04:	bd38      	pop	{r3, r4, r5, pc}
   28b06:	682b      	ldr	r3, [r5, #0]
   28b08:	2b00      	cmp	r3, #0
   28b0a:	d0fb      	beq.n	28b04 <_lseek_r+0x1c>
   28b0c:	6023      	str	r3, [r4, #0]
   28b0e:	bd38      	pop	{r3, r4, r5, pc}
   28b10:	2000d2a0 	.word	0x2000d2a0

00028b14 <_read_r>:
   28b14:	b538      	push	{r3, r4, r5, lr}
   28b16:	460c      	mov	r4, r1
   28b18:	4d08      	ldr	r5, [pc, #32]	; (28b3c <_read_r+0x28>)
   28b1a:	4684      	mov	ip, r0
   28b1c:	4611      	mov	r1, r2
   28b1e:	4620      	mov	r0, r4
   28b20:	461a      	mov	r2, r3
   28b22:	2300      	movs	r3, #0
   28b24:	602b      	str	r3, [r5, #0]
   28b26:	4664      	mov	r4, ip
   28b28:	f7f0 f9b4 	bl	18e94 <_read>
   28b2c:	1c43      	adds	r3, r0, #1
   28b2e:	d000      	beq.n	28b32 <_read_r+0x1e>
   28b30:	bd38      	pop	{r3, r4, r5, pc}
   28b32:	682b      	ldr	r3, [r5, #0]
   28b34:	2b00      	cmp	r3, #0
   28b36:	d0fb      	beq.n	28b30 <_read_r+0x1c>
   28b38:	6023      	str	r3, [r4, #0]
   28b3a:	bd38      	pop	{r3, r4, r5, pc}
   28b3c:	2000d2a0 	.word	0x2000d2a0

00028b40 <__fputwc>:
   28b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b44:	b082      	sub	sp, #8
   28b46:	4682      	mov	sl, r0
   28b48:	4688      	mov	r8, r1
   28b4a:	4614      	mov	r4, r2
   28b4c:	f7fc f8f8 	bl	24d40 <__locale_mb_cur_max>
   28b50:	2801      	cmp	r0, #1
   28b52:	d103      	bne.n	28b5c <__fputwc+0x1c>
   28b54:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   28b58:	2bfe      	cmp	r3, #254	; 0xfe
   28b5a:	d936      	bls.n	28bca <__fputwc+0x8a>
   28b5c:	f10d 0904 	add.w	r9, sp, #4
   28b60:	4642      	mov	r2, r8
   28b62:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   28b66:	4649      	mov	r1, r9
   28b68:	4650      	mov	r0, sl
   28b6a:	f7fc f897 	bl	24c9c <_wcrtomb_r>
   28b6e:	1c42      	adds	r2, r0, #1
   28b70:	4606      	mov	r6, r0
   28b72:	d032      	beq.n	28bda <__fputwc+0x9a>
   28b74:	b320      	cbz	r0, 28bc0 <__fputwc+0x80>
   28b76:	f89d c004 	ldrb.w	ip, [sp, #4]
   28b7a:	2500      	movs	r5, #0
   28b7c:	e009      	b.n	28b92 <__fputwc+0x52>
   28b7e:	6823      	ldr	r3, [r4, #0]
   28b80:	1c5a      	adds	r2, r3, #1
   28b82:	6022      	str	r2, [r4, #0]
   28b84:	f883 c000 	strb.w	ip, [r3]
   28b88:	3501      	adds	r5, #1
   28b8a:	42b5      	cmp	r5, r6
   28b8c:	d218      	bcs.n	28bc0 <__fputwc+0x80>
   28b8e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   28b92:	68a3      	ldr	r3, [r4, #8]
   28b94:	3b01      	subs	r3, #1
   28b96:	2b00      	cmp	r3, #0
   28b98:	60a3      	str	r3, [r4, #8]
   28b9a:	daf0      	bge.n	28b7e <__fputwc+0x3e>
   28b9c:	69a7      	ldr	r7, [r4, #24]
   28b9e:	42bb      	cmp	r3, r7
   28ba0:	4661      	mov	r1, ip
   28ba2:	4622      	mov	r2, r4
   28ba4:	4650      	mov	r0, sl
   28ba6:	db02      	blt.n	28bae <__fputwc+0x6e>
   28ba8:	f1bc 0f0a 	cmp.w	ip, #10
   28bac:	d1e7      	bne.n	28b7e <__fputwc+0x3e>
   28bae:	f7ff fddd 	bl	2876c <__swbuf_r>
   28bb2:	1c43      	adds	r3, r0, #1
   28bb4:	d1e8      	bne.n	28b88 <__fputwc+0x48>
   28bb6:	4606      	mov	r6, r0
   28bb8:	4630      	mov	r0, r6
   28bba:	b002      	add	sp, #8
   28bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28bc0:	4646      	mov	r6, r8
   28bc2:	4630      	mov	r0, r6
   28bc4:	b002      	add	sp, #8
   28bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28bca:	fa5f fc88 	uxtb.w	ip, r8
   28bce:	f88d c004 	strb.w	ip, [sp, #4]
   28bd2:	4606      	mov	r6, r0
   28bd4:	f10d 0904 	add.w	r9, sp, #4
   28bd8:	e7cf      	b.n	28b7a <__fputwc+0x3a>
   28bda:	89a3      	ldrh	r3, [r4, #12]
   28bdc:	4630      	mov	r0, r6
   28bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28be2:	81a3      	strh	r3, [r4, #12]
   28be4:	b002      	add	sp, #8
   28be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28bea:	bf00      	nop

00028bec <_fputwc_r>:
   28bec:	b530      	push	{r4, r5, lr}
   28bee:	6e53      	ldr	r3, [r2, #100]	; 0x64
   28bf0:	f013 0f01 	tst.w	r3, #1
   28bf4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   28bf8:	4614      	mov	r4, r2
   28bfa:	b083      	sub	sp, #12
   28bfc:	4605      	mov	r5, r0
   28bfe:	b29a      	uxth	r2, r3
   28c00:	d101      	bne.n	28c06 <_fputwc_r+0x1a>
   28c02:	0598      	lsls	r0, r3, #22
   28c04:	d51c      	bpl.n	28c40 <_fputwc_r+0x54>
   28c06:	0490      	lsls	r0, r2, #18
   28c08:	d406      	bmi.n	28c18 <_fputwc_r+0x2c>
   28c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   28c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   28c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   28c14:	81a3      	strh	r3, [r4, #12]
   28c16:	6662      	str	r2, [r4, #100]	; 0x64
   28c18:	4622      	mov	r2, r4
   28c1a:	4628      	mov	r0, r5
   28c1c:	f7ff ff90 	bl	28b40 <__fputwc>
   28c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
   28c22:	07da      	lsls	r2, r3, #31
   28c24:	4605      	mov	r5, r0
   28c26:	d402      	bmi.n	28c2e <_fputwc_r+0x42>
   28c28:	89a3      	ldrh	r3, [r4, #12]
   28c2a:	059b      	lsls	r3, r3, #22
   28c2c:	d502      	bpl.n	28c34 <_fputwc_r+0x48>
   28c2e:	4628      	mov	r0, r5
   28c30:	b003      	add	sp, #12
   28c32:	bd30      	pop	{r4, r5, pc}
   28c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28c36:	f7fc f881 	bl	24d3c <__retarget_lock_release_recursive>
   28c3a:	4628      	mov	r0, r5
   28c3c:	b003      	add	sp, #12
   28c3e:	bd30      	pop	{r4, r5, pc}
   28c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28c42:	9101      	str	r1, [sp, #4]
   28c44:	f7fc f878 	bl	24d38 <__retarget_lock_acquire_recursive>
   28c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28c4c:	9901      	ldr	r1, [sp, #4]
   28c4e:	b29a      	uxth	r2, r3
   28c50:	e7d9      	b.n	28c06 <_fputwc_r+0x1a>
   28c52:	bf00      	nop
   28c54:	0000      	movs	r0, r0
	...

00028c58 <___init_veneer>:
   28c58:	f85f f000 	ldr.w	pc, [pc]	; 28c5c <___init_veneer+0x4>
   28c5c:	60001e35 	.word	0x60001e35

00028c60 <___reboot_Teensyduino__veneer>:
   28c60:	f85f f000 	ldr.w	pc, [pc]	; 28c64 <___reboot_Teensyduino__veneer+0x4>
   28c64:	60001d8d 	.word	0x60001d8d
	...

Disassembly of section .fini:

00028c70 <_fini>:
   28c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c72:	bf00      	nop
