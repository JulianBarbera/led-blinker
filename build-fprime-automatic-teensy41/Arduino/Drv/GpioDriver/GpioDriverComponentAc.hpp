// ======================================================================
// \title  GpioDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for GpioDriver component base class
// ======================================================================

#ifndef Arduino_GpioDriverComponentAc_HPP
#define Arduino_GpioDriverComponentAc_HPP

#include "Drv/Ports/GpioReadPortAc.hpp"
#include "Drv/Ports/GpioWritePortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"

namespace Arduino {

  //! \class GpioDriverComponentBase
  //! \brief Auto-generated base for GpioDriver component
  class GpioDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class GpioDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_GPIOREAD_INPUT_PORTS = 1,
        NUM_GPIOWRITE_INPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize GpioDriverComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return gpioRead[portNum]
      Drv::InputGpioReadPort* get_gpioRead_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return gpioWrite[portNum]
      Drv::InputGpioWritePort* get_gpioWrite_InputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct GpioDriverComponentBase object
      GpioDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy GpioDriverComponentBase object
      virtual ~GpioDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of gpioRead input ports
      //!
      //! \return The number of gpioRead input ports
      FwIndexType getNum_gpioRead_InputPorts() const;

      //! Get the number of gpioWrite input ports
      //!
      //! \return The number of gpioWrite input ports
      FwIndexType getNum_gpioWrite_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port gpioRead
      virtual Drv::GpioStatus gpioRead_handler(
          FwIndexType portNum, //!< The port number
          Fw::Logic& state
      ) = 0;

      //! Handler for input port gpioWrite
      virtual Drv::GpioStatus gpioWrite_handler(
          FwIndexType portNum, //!< The port number
          const Fw::Logic& state
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port gpioRead
      Drv::GpioStatus gpioRead_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Logic& state
      );

      //! Handler base-class function for input port gpioWrite
      Drv::GpioStatus gpioWrite_handlerBase(
          FwIndexType portNum, //!< The port number
          const Fw::Logic& state
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port gpioRead
      static Drv::GpioStatus m_p_gpioRead_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Logic& state
      );

      //! Callback for port gpioWrite
      static Drv::GpioStatus m_p_gpioWrite_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          const Fw::Logic& state
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port gpioRead
      Drv::InputGpioReadPort m_gpioRead_InputPort[NUM_GPIOREAD_INPUT_PORTS];

      //! Input port gpioWrite
      Drv::InputGpioWritePort m_gpioWrite_InputPort[NUM_GPIOWRITE_INPUT_PORTS];

  };

}

#endif
