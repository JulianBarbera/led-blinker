// ======================================================================
// \title  I2cNodeDriverComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for I2cNodeDriver component base class
// ======================================================================

#include "Arduino/Drv/I2cNodeDriver/I2cNodeDriverComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Arduino {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void I2cNodeDriverComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect output port read
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_read_OutputPorts());
      port++
    ) {
      this->m_read_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_read_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_read_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port write
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_write_OutputPorts());
      port++
    ) {
      this->m_write_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_write_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_write_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void I2cNodeDriverComponentBase ::
    set_read_OutputPort(
        FwIndexType portNum,
        Drv::InputI2cPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_read_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_read_OutputPort[portNum].addCallPort(port);
  }

  void I2cNodeDriverComponentBase ::
    set_write_OutputPort(
        FwIndexType portNum,
        Drv::InputI2cPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_write_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  I2cNodeDriverComponentBase ::
    I2cNodeDriverComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  I2cNodeDriverComponentBase ::
    ~I2cNodeDriverComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType I2cNodeDriverComponentBase ::
    getNum_read_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_read_OutputPort));
  }

  FwIndexType I2cNodeDriverComponentBase ::
    getNum_write_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_write_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool I2cNodeDriverComponentBase ::
    isConnected_read_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_read_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_read_OutputPort[portNum].isConnected();
  }

  bool I2cNodeDriverComponentBase ::
    isConnected_write_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_write_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  Drv::I2cStatus I2cNodeDriverComponentBase ::
    read_out(
        FwIndexType portNum,
        U32 addr,
        Fw::Buffer& serBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_read_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_read_OutputPort[portNum].invoke(
      addr,
      serBuffer
    );
  }

  Drv::I2cStatus I2cNodeDriverComponentBase ::
    write_out(
        FwIndexType portNum,
        U32 addr,
        Fw::Buffer& serBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_write_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_write_OutputPort[portNum].invoke(
      addr,
      serBuffer
    );
  }

}
