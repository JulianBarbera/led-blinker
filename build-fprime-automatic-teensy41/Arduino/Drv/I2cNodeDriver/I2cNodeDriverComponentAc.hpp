// ======================================================================
// \title  I2cNodeDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for I2cNodeDriver component base class
// ======================================================================

#ifndef Arduino_I2cNodeDriverComponentAc_HPP
#define Arduino_I2cNodeDriverComponentAc_HPP

#include "Drv/Ports/I2cPortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"

namespace Arduino {

  //! \class I2cNodeDriverComponentBase
  //! \brief Auto-generated base for I2cNodeDriver component
  //!
  //! I2C node driver for Arduino
  class I2cNodeDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class I2cNodeDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_READ_OUTPUT_PORTS = 1,
        NUM_WRITE_OUTPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize I2cNodeDriverComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to read[portNum]
      void set_read_OutputPort(
          FwIndexType portNum, //!< The port number
          Drv::InputI2cPort* port //!< The input port
      );

      //! Connect port to write[portNum]
      void set_write_OutputPort(
          FwIndexType portNum, //!< The port number
          Drv::InputI2cPort* port //!< The input port
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct I2cNodeDriverComponentBase object
      I2cNodeDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy I2cNodeDriverComponentBase object
      virtual ~I2cNodeDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of read output ports
      //!
      //! \return The number of read output ports
      FwIndexType getNum_read_OutputPorts() const;

      //! Get the number of write output ports
      //!
      //! \return The number of write output ports
      FwIndexType getNum_write_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port read is connected
      //!
      //! \return Whether port read is connected
      bool isConnected_read_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port write is connected
      //!
      //! \return Whether port write is connected
      bool isConnected_write_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port read
      Drv::I2cStatus read_out(
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      );

      //! Invoke output port write
      Drv::I2cStatus write_out(
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port read
      Drv::OutputI2cPort m_read_OutputPort[NUM_READ_OUTPUT_PORTS];

      //! Output port write
      Drv::OutputI2cPort m_write_OutputPort[NUM_WRITE_OUTPUT_PORTS];

  };

}

#endif
