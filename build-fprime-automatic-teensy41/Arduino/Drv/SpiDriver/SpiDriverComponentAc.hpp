// ======================================================================
// \title  SpiDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SpiDriver component base class
// ======================================================================

#ifndef Arduino_SpiDriverComponentAc_HPP
#define Arduino_SpiDriverComponentAc_HPP

#include "Drv/Ports/SpiReadWritePortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"

namespace Arduino {

  //! \class SpiDriverComponentBase
  //! \brief Auto-generated base for SpiDriver component
  //!
  //! SPI Driver for Arduino
  class SpiDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class SpiDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_SPIREADWRITE_INPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize SpiDriverComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return SpiReadWrite[portNum]
      Drv::InputSpiReadWritePort* get_SpiReadWrite_InputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct SpiDriverComponentBase object
      SpiDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy SpiDriverComponentBase object
      virtual ~SpiDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of SpiReadWrite input ports
      //!
      //! \return The number of SpiReadWrite input ports
      FwIndexType getNum_SpiReadWrite_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port SpiReadWrite
      virtual void SpiReadWrite_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& writeBuffer,
          Fw::Buffer& readBuffer
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port SpiReadWrite
      void SpiReadWrite_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& writeBuffer,
          Fw::Buffer& readBuffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port SpiReadWrite
      static void m_p_SpiReadWrite_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& writeBuffer,
          Fw::Buffer& readBuffer
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port SpiReadWrite
      Drv::InputSpiReadWritePort m_SpiReadWrite_InputPort[NUM_SPIREADWRITE_INPUT_PORTS];

  };

}

#endif
