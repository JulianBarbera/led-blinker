// ======================================================================
// \title  AnalogDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for AnalogDriver component base class
// ======================================================================

#ifndef Arduino_AnalogDriverComponentAc_HPP
#define Arduino_AnalogDriverComponentAc_HPP

#include "Arduino/Drv/AnalogDriver/AnalogReadPortAc.hpp"
#include "Arduino/Drv/AnalogDriver/AnalogWritePortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"

namespace Arduino {

  //! \class AnalogDriverComponentBase
  //! \brief Auto-generated base for AnalogDriver component
  //!
  //! Analog Driver for Arduino boards
  class AnalogDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class AnalogDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_READANALOG_INPUT_PORTS = 1,
        NUM_SETANALOG_INPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize AnalogDriverComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return readAnalog[portNum]
      Drv::InputAnalogReadPort* get_readAnalog_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return setAnalog[portNum]
      Drv::InputAnalogWritePort* get_setAnalog_InputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct AnalogDriverComponentBase object
      AnalogDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy AnalogDriverComponentBase object
      virtual ~AnalogDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of readAnalog input ports
      //!
      //! \return The number of readAnalog input ports
      FwIndexType getNum_readAnalog_InputPorts() const;

      //! Get the number of setAnalog input ports
      //!
      //! \return The number of setAnalog input ports
      FwIndexType getNum_setAnalog_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port readAnalog
      virtual Fw::Success readAnalog_handler(
          FwIndexType portNum, //!< The port number
          U16& val
      ) = 0;

      //! Handler for input port setAnalog
      virtual Fw::Success setAnalog_handler(
          FwIndexType portNum, //!< The port number
          U8 val
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port readAnalog
      Fw::Success readAnalog_handlerBase(
          FwIndexType portNum, //!< The port number
          U16& val
      );

      //! Handler base-class function for input port setAnalog
      Fw::Success setAnalog_handlerBase(
          FwIndexType portNum, //!< The port number
          U8 val
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port readAnalog
      static Fw::Success m_p_readAnalog_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U16& val
      );

      //! Callback for port setAnalog
      static Fw::Success m_p_setAnalog_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U8 val
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port readAnalog
      Drv::InputAnalogReadPort m_readAnalog_InputPort[NUM_READANALOG_INPUT_PORTS];

      //! Input port setAnalog
      Drv::InputAnalogWritePort m_setAnalog_InputPort[NUM_SETANALOG_INPUT_PORTS];

  };

}

#endif
