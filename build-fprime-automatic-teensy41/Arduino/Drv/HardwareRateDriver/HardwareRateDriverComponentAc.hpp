// ======================================================================
// \title  HardwareRateDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for HardwareRateDriver component base class
// ======================================================================

#ifndef Arduino_HardwareRateDriverComponentAc_HPP
#define Arduino_HardwareRateDriverComponentAc_HPP

#include "Drv/Ports/GpioWritePortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Svc/Cycle/CyclePortAc.hpp"

namespace Arduino {

  //! \class HardwareRateDriverComponentBase
  //! \brief Auto-generated base for HardwareRateDriver component
  //!
  //! An interrupt based driver for Arduino rate groups.
  class HardwareRateDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class HardwareRateDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_CYCLEOUT_OUTPUT_PORTS = 1,
        NUM_ERROR_OUTPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize HardwareRateDriverComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to CycleOut[portNum]
      void set_CycleOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputCyclePort* port //!< The input port
      );

      //! Connect port to error[portNum]
      void set_error_OutputPort(
          FwIndexType portNum, //!< The port number
          Drv::InputGpioWritePort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to CycleOut[portNum]
      void set_CycleOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct HardwareRateDriverComponentBase object
      HardwareRateDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy HardwareRateDriverComponentBase object
      virtual ~HardwareRateDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of CycleOut output ports
      //!
      //! \return The number of CycleOut output ports
      FwIndexType getNum_CycleOut_OutputPorts() const;

      //! Get the number of error output ports
      //!
      //! \return The number of error output ports
      FwIndexType getNum_error_OutputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port CycleOut is connected
      //!
      //! \return Whether port CycleOut is connected
      bool isConnected_CycleOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port error is connected
      //!
      //! \return Whether port error is connected
      bool isConnected_error_OutputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port CycleOut
      void CycleOut_out(
          FwIndexType portNum, //!< The port number
          Os::RawTime& cycleStart //!< Cycle start timestamp
      );

      //! Invoke output port error
      Drv::GpioStatus error_out(
          FwIndexType portNum, //!< The port number
          const Fw::Logic& state
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port CycleOut
      Svc::OutputCyclePort m_CycleOut_OutputPort[NUM_CYCLEOUT_OUTPUT_PORTS];

      //! Output port error
      Drv::OutputGpioWritePort m_error_OutputPort[NUM_ERROR_OUTPUT_PORTS];

  };

}

#endif
