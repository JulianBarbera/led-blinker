// ======================================================================
// \title  I2cDriverComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for I2cDriver component base class
// ======================================================================

#ifndef Arduino_I2cDriverComponentAc_HPP
#define Arduino_I2cDriverComponentAc_HPP

#include "Drv/Ports/I2cPortAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Os/Mutex.hpp"

namespace Arduino {

  //! \class I2cDriverComponentBase
  //! \brief Auto-generated base for I2cDriver component
  //!
  //! I2C Driver for Arduino
  class I2cDriverComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class I2cDriverComponentBaseFriend;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_READ_INPUT_PORTS = 1,
        NUM_WRITE_INPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize I2cDriverComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return read[portNum]
      Drv::InputI2cPort* get_read_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return write[portNum]
      Drv::InputI2cPort* get_write_InputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct I2cDriverComponentBase object
      I2cDriverComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy I2cDriverComponentBase object
      virtual ~I2cDriverComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of read input ports
      //!
      //! \return The number of read input ports
      FwIndexType getNum_read_InputPorts() const;

      //! Get the number of write input ports
      //!
      //! \return The number of write input ports
      FwIndexType getNum_write_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port read
      virtual Drv::I2cStatus read_handler(
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      ) = 0;

      //! Handler for input port write
      virtual Drv::I2cStatus write_handler(
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port read
      Drv::I2cStatus read_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      );

      //! Handler base-class function for input port write
      Drv::I2cStatus write_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Mutex operations for guarded ports
      //
      // You can override these operations to provide more sophisticated
      // synchronization
      // ----------------------------------------------------------------------

      //! Lock the guarded mutex
      virtual void lock();

      //! Unlock the guarded mutex
      virtual void unLock();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port read
      static Drv::I2cStatus m_p_read_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      );

      //! Callback for port write
      static Drv::I2cStatus m_p_write_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 addr, //!< I2C slave device address
          Fw::Buffer& serBuffer //!< Buffer with data to read/write to/from
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port read
      Drv::InputI2cPort m_read_InputPort[NUM_READ_INPUT_PORTS];

      //! Input port write
      Drv::InputI2cPort m_write_InputPort[NUM_WRITE_INPUT_PORTS];

    PRIVATE:

      // ----------------------------------------------------------------------
      // Mutexes
      // ----------------------------------------------------------------------

      //! Mutex for guarded ports
      Os::Mutex m_guardedPortMutex;

  };

}

#endif
