// ======================================================================
// \title  LifeLedComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for LifeLed component base class
// ======================================================================

#include "Arduino/Svc/LifeLed/LifeLedComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Arduino {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port cmdIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdIn_InputPorts());
      port++
    ) {
      this->m_cmdIn_InputPort[port].init();
      this->m_cmdIn_InputPort[port].addCallComp(
        this,
        m_p_cmdIn_in
      );
      this->m_cmdIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port run
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_run_InputPorts());
      port++
    ) {
      this->m_run_InputPort[port].init();
      this->m_run_InputPort[port].addCallComp(
        this,
        m_p_run_in
      );
      this->m_run_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_run_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_run_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdRegOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdRegOut_OutputPorts());
      port++
    ) {
      this->m_cmdRegOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdRegOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdResponseOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdResponseOut_OutputPorts());
      port++
    ) {
      this->m_cmdResponseOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdResponseOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port prmGetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_prmGetOut_OutputPorts());
      port++
    ) {
      this->m_prmGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_prmGetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_prmGetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port prmSetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_prmSetOut_OutputPorts());
      port++
    ) {
      this->m_prmSetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_prmSetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_prmSetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port timeCaller
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeCaller_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* LifeLedComponentBase ::
    get_cmdIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_cmdIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputSchedPort* LifeLedComponentBase ::
    get_run_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_run_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_run_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    set_cmdRegOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
  }

  void LifeLedComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
  }

  void LifeLedComponentBase ::
    set_prmGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmGetOut_OutputPort[portNum].addCallPort(port);
  }

  void LifeLedComponentBase ::
    set_prmSetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].addCallPort(port);
  }

  void LifeLedComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    set_cmdRegOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].registerSerialPort(port);
  }

  void LifeLedComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].registerSerialPort(port);
  }

  void LifeLedComponentBase ::
    set_prmSetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].registerSerialPort(port);
  }

  void LifeLedComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    regCommands()
  {
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_LED_PERIOD_SET
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_LED_PERIOD_SAVE
    );
  }

  // ----------------------------------------------------------------------
  // Parameter loading
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    loadParameters()
  {
    Fw::ParamBuffer buff;
    Fw::SerializeStatus stat = Fw::FW_SERIALIZE_OK;
    FW_ASSERT(this->m_prmGetOut_OutputPort[0].isConnected());

    FwPrmIdType _id;

    _id = this->getIdBase() + PARAMID_LED_PERIOD;

    // Get parameter LED_PERIOD
    this->m_param_LED_PERIOD_valid =
      this->m_prmGetOut_OutputPort[0].invoke(
        _id,
        buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_LED_PERIOD_valid == Fw::ParamValid::VALID) {
      stat = buff.deserialize(this->m_LED_PERIOD);
      if (stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_LED_PERIOD_valid = Fw::ParamValid::DEFAULT;
        // Set default value
        this->m_LED_PERIOD = 10;
      }
    }
    else {
      // Set default value
      this->m_param_LED_PERIOD_valid = Fw::ParamValid::DEFAULT;
      this->m_LED_PERIOD = 10;
    }

    this->m_paramLock.unLock();

    // Call notifier
    this->parametersLoaded();
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  LifeLedComponentBase ::
    LifeLedComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {
    this->m_param_LED_PERIOD_valid = Fw::ParamValid::UNINIT;
  }

  LifeLedComponentBase ::
    ~LifeLedComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  FwIndexType LifeLedComponentBase ::
    getNum_cmdIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType LifeLedComponentBase ::
    getNum_run_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_run_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType LifeLedComponentBase ::
    getNum_cmdRegOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdRegOut_OutputPort));
  }

  FwIndexType LifeLedComponentBase ::
    getNum_cmdResponseOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdResponseOut_OutputPort));
  }

  FwIndexType LifeLedComponentBase ::
    getNum_prmGetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_prmGetOut_OutputPort));
  }

  FwIndexType LifeLedComponentBase ::
    getNum_prmSetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_prmSetOut_OutputPort));
  }

  FwIndexType LifeLedComponentBase ::
    getNum_timeCaller_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool LifeLedComponentBase ::
    isConnected_cmdRegOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdRegOut_OutputPort[portNum].isConnected();
  }

  bool LifeLedComponentBase ::
    isConnected_cmdResponseOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdResponseOut_OutputPort[portNum].isConnected();
  }

  bool LifeLedComponentBase ::
    isConnected_prmGetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmGetOut_OutputPort[portNum].isConnected();
  }

  bool LifeLedComponentBase ::
    isConnected_prmSetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmSetOut_OutputPort[portNum].isConnected();
  }

  bool LifeLedComponentBase ::
    isConnected_timeCaller_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    run_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_run_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    this->run_handler(
      portNum,
      context
    );

    // Unlock guard mutex
    this->unLock();
  }

  // ----------------------------------------------------------------------
  // Command response
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdResponse response
    )
  {
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
  }

  // ----------------------------------------------------------------------
  // Parameter update hook
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    parameterUpdated(FwPrmIdType id)
  {
    // Do nothing by default
  }

  void LifeLedComponentBase ::
    parametersLoaded()
  {
    // Do nothing by default
  }

  // ----------------------------------------------------------------------
  // Parameter get functions
  // ----------------------------------------------------------------------

  U16 LifeLedComponentBase ::
    paramGet_LED_PERIOD(Fw::ParamValid& valid)
  {
    U16 _local;
    this->m_paramLock.lock();
    valid = this->m_param_LED_PERIOD_valid;
    _local = this->m_LED_PERIOD;
    this->m_paramLock.unLock();
    return _local;
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time LifeLedComponentBase ::
    getTime()
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void LifeLedComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    m_p_cmdIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);
    LifeLedComponentBase* compPtr = static_cast<LifeLedComponentBase*>(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));

    // Select base class function based on opcode
    switch (opCode - idBase) {
      case OPCODE_LED_PERIOD_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_LED_PERIOD(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_LED_PERIOD_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_LED_PERIOD();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void LifeLedComponentBase ::
    m_p_run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    LifeLedComponentBase* compPtr = static_cast<LifeLedComponentBase*>(callComp);
    compPtr->run_handlerBase(
      portNum,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Parameter set functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse LifeLedComponentBase ::
    paramSet_LED_PERIOD(Fw::SerializeBufferBase& val)
  {
    U16 _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_LED_PERIOD = _local_val;
    this->m_param_LED_PERIOD_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_LED_PERIOD);
    return Fw::CmdResponse::OK;
  }

  // ----------------------------------------------------------------------
  // Parameter save functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse LifeLedComponentBase ::
    paramSave_LED_PERIOD()
  {
    if (this->m_prmSetOut_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

      Fw::SerializeStatus stat = saveBuff.serialize(m_LED_PERIOD);

      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
      id = this->getIdBase() + PARAMID_LED_PERIOD;

      // Save the parameter
      this->m_prmSetOut_OutputPort[0].invoke(
        id,
        saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

}
