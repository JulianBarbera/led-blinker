// ======================================================================
// \title  LedBlinkerTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for LedBlinker topology
// ======================================================================

#ifndef LedBlinker_LedBlinkerTopologyAc_HPP
#define LedBlinker_LedBlinkerTopologyAc_HPP

#include "Arduino/Drv/GpioDriver/GpioDriver.hpp"
#include "Arduino/Drv/HardwareRateDriver/HardwareRateDriver.hpp"
#include "Arduino/Drv/StreamDriver/StreamDriver.hpp"
#include "Arduino/Svc/ArduinoTime/ArduinoTime.hpp"
#include "Components/Led/Led.hpp"
#include "LedBlinker/Top/LedBlinkerTopologyDefs.hpp"
#include "Svc/ActiveLogger/ActiveLogger.hpp"
#include "Svc/BufferManager/BufferManager.hpp"
#include "Svc/CmdDispatcher/CommandDispatcher.hpp"
#include "Svc/Deframer/Deframer.hpp"
#include "Svc/Framer/Framer.hpp"
#include "Svc/PassiveConsoleTextLogger/PassiveTextLogger.hpp"
#include "Svc/PassiveRateGroup/PassiveRateGroup.hpp"
#include "Svc/RateGroupDriver/RateGroupDriver.hpp"
#include "Svc/SystemResources/SystemResources.hpp"
#include "Svc/TlmChan/TlmChan.hpp"
#include "fprime-baremetal/Svc/FatalHandler/FatalHandler.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace LedBlinker {

  //! bufferManager
  extern Svc::BufferManager bufferManager;

}

namespace LedBlinker {

  //! cmdDisp
  extern Svc::CommandDispatcher cmdDisp;

}

namespace LedBlinker {

  //! commDriver
  extern Arduino::StreamDriver commDriver;

}

namespace LedBlinker {

  //! deframer
  extern Svc::Deframer deframer;

}

namespace LedBlinker {

  //! eventLogger
  extern Svc::ActiveLogger eventLogger;

}

namespace LedBlinker {

  //! fatalHandler
  extern Baremetal::FatalHandler fatalHandler;

}

namespace LedBlinker {

  //! framer
  extern Svc::Framer framer;

}

namespace LedBlinker {

  //! gpioDriver
  extern Arduino::GpioDriver gpioDriver;

}

namespace LedBlinker {

  //! led
  extern Components::Led led;

}

namespace LedBlinker {

  //! rateDriver
  extern Arduino::HardwareRateDriver rateDriver;

}

namespace LedBlinker {

  //! rateGroup1
  extern Svc::PassiveRateGroup rateGroup1;

}

namespace LedBlinker {

  //! rateGroupDriver
  extern Svc::RateGroupDriver rateGroupDriver;

}

namespace LedBlinker {

  //! systemResources
  extern Svc::SystemResources systemResources;

}

namespace LedBlinker {

  //! textLogger
  extern Svc::PassiveTextLogger textLogger;

}

namespace LedBlinker {

  //! timeHandler
  extern Arduino::ArduinoTime timeHandler;

}

namespace LedBlinker {

  //! tlmSend
  extern Svc::TlmChan tlmSend;

}

namespace LedBlinker {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      LedBlinker_cmdDisp = 0x100,
      LedBlinker_eventLogger = 0x200,
      LedBlinker_tlmSend = 0x300,
      LedBlinker_rateGroup1 = 0x1000,
      LedBlinker_bufferManager = 0x2000,
      LedBlinker_commDriver = 0x4000,
      LedBlinker_framer = 0x4100,
      LedBlinker_fatalHandler = 0x4300,
      LedBlinker_timeHandler = 0x4400,
      LedBlinker_rateGroupDriver = 0x4500,
      LedBlinker_textLogger = 0x4600,
      LedBlinker_deframer = 0x4700,
      LedBlinker_systemResources = 0x4800,
      LedBlinker_rateDriver = 0x4900,
      LedBlinker_gpioDriver = 0x5000,
      LedBlinker_led = 0x10000,
    };
  }

  namespace InstanceIds {
    enum {
      LedBlinker_bufferManager,
      LedBlinker_cmdDisp,
      LedBlinker_commDriver,
      LedBlinker_deframer,
      LedBlinker_eventLogger,
      LedBlinker_fatalHandler,
      LedBlinker_framer,
      LedBlinker_gpioDriver,
      LedBlinker_led,
      LedBlinker_rateDriver,
      LedBlinker_rateGroup1,
      LedBlinker_rateGroupDriver,
      LedBlinker_systemResources,
      LedBlinker_textLogger,
      LedBlinker_timeHandler,
      LedBlinker_tlmSend,
    };
  }

  namespace Priorities {
    enum {
      LedBlinker_cmdDisp = 101,
      LedBlinker_eventLogger = 98,
      LedBlinker_tlmSend = 97,
    };
  }

  namespace QueueSizes {
    enum {
      LedBlinker_cmdDisp = 3,
      LedBlinker_eventLogger = 3,
      LedBlinker_tlmSend = 3,
    };
  }

  namespace StackSizes {
    enum {
      LedBlinker_cmdDisp = 65536,
      LedBlinker_eventLogger = 65536,
      LedBlinker_tlmSend = 65536,
    };
  }

  namespace TaskIds {
    enum {
      LedBlinker_cmdDisp,
      LedBlinker_eventLogger,
      LedBlinker_tlmSend,
    };
  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
