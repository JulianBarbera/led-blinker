// ======================================================================
// \title  LedBlinkerTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for LedBlinker topology
// ======================================================================

#include "LedBlinker/Top/LedBlinkerTopologyAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace LedBlinker {

  Svc::BufferManager bufferManager(FW_OPTIONAL_NAME("bufferManager"));

}

namespace LedBlinker {

  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));

}

namespace LedBlinker {

  Arduino::StreamDriver commDriver(FW_OPTIONAL_NAME("commDriver"));

}

namespace LedBlinker {

  Svc::Deframer deframer(FW_OPTIONAL_NAME("deframer"));

}

namespace LedBlinker {

  Svc::ActiveLogger eventLogger(FW_OPTIONAL_NAME("eventLogger"));

}

namespace LedBlinker {

  Baremetal::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));

}

namespace LedBlinker {

  Svc::Framer framer(FW_OPTIONAL_NAME("framer"));

}

namespace LedBlinker {

  Arduino::GpioDriver gpioDriver(FW_OPTIONAL_NAME("gpioDriver"));

}

namespace LedBlinker {

  Components::Led led(FW_OPTIONAL_NAME("led"));

}

namespace LedBlinker {

  Arduino::HardwareRateDriver rateDriver(FW_OPTIONAL_NAME("rateDriver"));

}

namespace LedBlinker {

  Svc::PassiveRateGroup rateGroup1(FW_OPTIONAL_NAME("rateGroup1"));

}

namespace LedBlinker {

  Svc::RateGroupDriver rateGroupDriver(FW_OPTIONAL_NAME("rateGroupDriver"));

}

namespace LedBlinker {

  Svc::SystemResources systemResources(FW_OPTIONAL_NAME("systemResources"));

}

namespace LedBlinker {

  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));

}

namespace LedBlinker {

  Arduino::ArduinoTime timeHandler(FW_OPTIONAL_NAME("timeHandler"));

}

namespace LedBlinker {

  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));

}

namespace LedBlinker {


  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    LedBlinker::bufferManager.init(InstanceIds::LedBlinker_bufferManager);
    LedBlinker::cmdDisp.init(QueueSizes::LedBlinker_cmdDisp, InstanceIds::LedBlinker_cmdDisp);
    LedBlinker::commDriver.init(InstanceIds::LedBlinker_commDriver);
    LedBlinker::deframer.init(InstanceIds::LedBlinker_deframer);
    LedBlinker::eventLogger.init(QueueSizes::LedBlinker_eventLogger, InstanceIds::LedBlinker_eventLogger);
    LedBlinker::fatalHandler.init(InstanceIds::LedBlinker_fatalHandler);
    LedBlinker::framer.init(InstanceIds::LedBlinker_framer);
    LedBlinker::gpioDriver.init(InstanceIds::LedBlinker_gpioDriver);
    LedBlinker::led.init(InstanceIds::LedBlinker_led);
    LedBlinker::rateDriver.init(InstanceIds::LedBlinker_rateDriver);
    LedBlinker::rateGroup1.init(InstanceIds::LedBlinker_rateGroup1);
    LedBlinker::rateGroupDriver.init(InstanceIds::LedBlinker_rateGroupDriver);
    LedBlinker::systemResources.init(InstanceIds::LedBlinker_systemResources);
    LedBlinker::textLogger.init(InstanceIds::LedBlinker_textLogger);
    LedBlinker::timeHandler.init(InstanceIds::LedBlinker_timeHandler);
    LedBlinker::tlmSend.init(QueueSizes::LedBlinker_tlmSend, InstanceIds::LedBlinker_tlmSend);
  }

  void configComponents(const TopologyState& state) {
    // Nothing to do
  }

  void setBaseIds() {
    LedBlinker::cmdDisp.setIdBase(BaseIds::LedBlinker_cmdDisp);
    LedBlinker::eventLogger.setIdBase(BaseIds::LedBlinker_eventLogger);
    LedBlinker::tlmSend.setIdBase(BaseIds::LedBlinker_tlmSend);
    LedBlinker::rateGroup1.setIdBase(BaseIds::LedBlinker_rateGroup1);
    LedBlinker::bufferManager.setIdBase(BaseIds::LedBlinker_bufferManager);
    LedBlinker::commDriver.setIdBase(BaseIds::LedBlinker_commDriver);
    LedBlinker::framer.setIdBase(BaseIds::LedBlinker_framer);
    LedBlinker::fatalHandler.setIdBase(BaseIds::LedBlinker_fatalHandler);
    LedBlinker::timeHandler.setIdBase(BaseIds::LedBlinker_timeHandler);
    LedBlinker::rateGroupDriver.setIdBase(BaseIds::LedBlinker_rateGroupDriver);
    LedBlinker::textLogger.setIdBase(BaseIds::LedBlinker_textLogger);
    LedBlinker::deframer.setIdBase(BaseIds::LedBlinker_deframer);
    LedBlinker::systemResources.setIdBase(BaseIds::LedBlinker_systemResources);
    LedBlinker::rateDriver.setIdBase(BaseIds::LedBlinker_rateDriver);
    LedBlinker::gpioDriver.setIdBase(BaseIds::LedBlinker_gpioDriver);
    LedBlinker::led.setIdBase(BaseIds::LedBlinker_led);
  }

  void connectComponents() {

    // Command
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
        0,
        LedBlinker::cmdDisp.get_CmdDisp_InputPort(0)
    );
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
        1,
        LedBlinker::eventLogger.get_CmdDisp_InputPort(0)
    );
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
        2,
        LedBlinker::led.get_cmdIn_InputPort(0)
    );
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
        3,
        LedBlinker::systemResources.get_CmdDisp_InputPort(0)
    );
    LedBlinker::cmdDisp.set_compCmdSend_OutputPort(
        4,
        LedBlinker::timeHandler.get_cmdIn_InputPort(0)
    );

    // CommandRegistration
    LedBlinker::cmdDisp.set_CmdReg_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdReg_InputPort(0)
    );
    LedBlinker::eventLogger.set_CmdReg_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdReg_InputPort(1)
    );
    LedBlinker::led.set_cmdRegOut_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdReg_InputPort(2)
    );
    LedBlinker::systemResources.set_CmdReg_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdReg_InputPort(3)
    );
    LedBlinker::timeHandler.set_cmdRegOut_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdReg_InputPort(4)
    );

    // CommandResponse
    LedBlinker::cmdDisp.set_CmdStatus_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdStat_InputPort(0)
    );
    LedBlinker::eventLogger.set_CmdStatus_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdStat_InputPort(0)
    );
    LedBlinker::led.set_cmdResponseOut_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdStat_InputPort(0)
    );
    LedBlinker::systemResources.set_CmdStatus_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdStat_InputPort(0)
    );
    LedBlinker::timeHandler.set_cmdResponseOut_OutputPort(
        0,
        LedBlinker::cmdDisp.get_compCmdStat_InputPort(0)
    );

    // Downlink
    LedBlinker::commDriver.set_deallocate_OutputPort(
        0,
        LedBlinker::bufferManager.get_bufferSendIn_InputPort(0)
    );
    LedBlinker::eventLogger.set_PktSend_OutputPort(
        0,
        LedBlinker::framer.get_comIn_InputPort(0)
    );
    LedBlinker::framer.set_framedAllocate_OutputPort(
        0,
        LedBlinker::bufferManager.get_bufferGetCallee_InputPort(0)
    );
    LedBlinker::framer.set_framedOut_OutputPort(
        0,
        LedBlinker::commDriver.get_send_InputPort(0)
    );
    LedBlinker::tlmSend.set_PktSend_OutputPort(
        0,
        LedBlinker::framer.get_comIn_InputPort(0)
    );

    // Events
    LedBlinker::bufferManager.set_eventOut_OutputPort(
        0,
        LedBlinker::eventLogger.get_LogRecv_InputPort(0)
    );
    LedBlinker::cmdDisp.set_Log_OutputPort(
        0,
        LedBlinker::eventLogger.get_LogRecv_InputPort(0)
    );
    LedBlinker::eventLogger.set_Log_OutputPort(
        0,
        LedBlinker::eventLogger.get_LogRecv_InputPort(0)
    );
    LedBlinker::led.set_logOut_OutputPort(
        0,
        LedBlinker::eventLogger.get_LogRecv_InputPort(0)
    );
    LedBlinker::systemResources.set_Log_OutputPort(
        0,
        LedBlinker::eventLogger.get_LogRecv_InputPort(0)
    );
    LedBlinker::timeHandler.set_logOut_OutputPort(
        0,
        LedBlinker::eventLogger.get_LogRecv_InputPort(0)
    );

    // FaultProtection
    LedBlinker::eventLogger.set_FatalAnnounce_OutputPort(
        0,
        LedBlinker::fatalHandler.get_FatalReceive_InputPort(0)
    );

    // LedConnections
    LedBlinker::led.set_gpioSet_OutputPort(
        0,
        LedBlinker::gpioDriver.get_gpioWrite_InputPort(0)
    );
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
        3,
        LedBlinker::led.get_run_InputPort(0)
    );

    // RateGroups
    LedBlinker::rateDriver.set_CycleOut_OutputPort(
        0,
        LedBlinker::rateGroupDriver.get_CycleIn_InputPort(0)
    );
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
        0,
        LedBlinker::commDriver.get_schedIn_InputPort(0)
    );
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
        1,
        LedBlinker::tlmSend.get_Run_InputPort(0)
    );
    LedBlinker::rateGroup1.set_RateGroupMemberOut_OutputPort(
        2,
        LedBlinker::systemResources.get_run_InputPort(0)
    );
    LedBlinker::rateGroupDriver.set_CycleOut_OutputPort(
        0,
        LedBlinker::rateGroup1.get_CycleIn_InputPort(0)
    );

    // Telemetry
    LedBlinker::bufferManager.set_tlmOut_OutputPort(
        0,
        LedBlinker::tlmSend.get_TlmRecv_InputPort(0)
    );
    LedBlinker::cmdDisp.set_Tlm_OutputPort(
        0,
        LedBlinker::tlmSend.get_TlmRecv_InputPort(0)
    );
    LedBlinker::led.set_tlmOut_OutputPort(
        0,
        LedBlinker::tlmSend.get_TlmRecv_InputPort(0)
    );
    LedBlinker::rateGroup1.set_Tlm_OutputPort(
        0,
        LedBlinker::tlmSend.get_TlmRecv_InputPort(0)
    );
    LedBlinker::systemResources.set_Tlm_OutputPort(
        0,
        LedBlinker::tlmSend.get_TlmRecv_InputPort(0)
    );

    // TextEvents
    LedBlinker::bufferManager.set_textEventOut_OutputPort(
        0,
        LedBlinker::textLogger.get_TextLogger_InputPort(0)
    );
    LedBlinker::cmdDisp.set_LogText_OutputPort(
        0,
        LedBlinker::textLogger.get_TextLogger_InputPort(0)
    );
    LedBlinker::eventLogger.set_LogText_OutputPort(
        0,
        LedBlinker::textLogger.get_TextLogger_InputPort(0)
    );
    LedBlinker::led.set_logTextOut_OutputPort(
        0,
        LedBlinker::textLogger.get_TextLogger_InputPort(0)
    );
    LedBlinker::systemResources.set_LogText_OutputPort(
        0,
        LedBlinker::textLogger.get_TextLogger_InputPort(0)
    );
    LedBlinker::timeHandler.set_logTextOut_OutputPort(
        0,
        LedBlinker::textLogger.get_TextLogger_InputPort(0)
    );

    // Time
    LedBlinker::bufferManager.set_timeCaller_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );
    LedBlinker::cmdDisp.set_Time_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );
    LedBlinker::eventLogger.set_Time_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );
    LedBlinker::led.set_timeCaller_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );
    LedBlinker::rateGroup1.set_Time_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );
    LedBlinker::systemResources.set_Time_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );
    LedBlinker::timeHandler.set_timeCaller_OutputPort(
        0,
        LedBlinker::timeHandler.get_getTime_InputPort(0)
    );

    // Uplink
    LedBlinker::cmdDisp.set_seqCmdStatus_OutputPort(
        0,
        LedBlinker::deframer.get_cmdResponseIn_InputPort(0)
    );
    LedBlinker::commDriver.set_allocate_OutputPort(
        0,
        LedBlinker::bufferManager.get_bufferGetCallee_InputPort(0)
    );
    LedBlinker::commDriver.set_recv_OutputPort(
        0,
        LedBlinker::deframer.get_framedIn_InputPort(0)
    );
    LedBlinker::deframer.set_bufferAllocate_OutputPort(
        0,
        LedBlinker::bufferManager.get_bufferGetCallee_InputPort(0)
    );
    LedBlinker::deframer.set_bufferDeallocate_OutputPort(
        0,
        LedBlinker::bufferManager.get_bufferSendIn_InputPort(0)
    );
    LedBlinker::deframer.set_comOut_OutputPort(
        0,
        LedBlinker::cmdDisp.get_seqCmdBuff_InputPort(0)
    );
    LedBlinker::deframer.set_framedDeallocate_OutputPort(
        0,
        LedBlinker::bufferManager.get_bufferSendIn_InputPort(0)
    );
  }

  void regCommands() {
    LedBlinker::cmdDisp.regCommands();
    LedBlinker::eventLogger.regCommands();
    LedBlinker::led.regCommands();
    LedBlinker::systemResources.regCommands();
    LedBlinker::timeHandler.regCommands();
  }

  void readParameters() {
    // Nothing to do
  }

  void loadParameters() {
    LedBlinker::led.loadParameters();
  }

  void startTasks(const TopologyState& state) {
    LedBlinker::cmdDisp.start(
      static_cast<Os::Task::ParamType>(Priorities::LedBlinker_cmdDisp),
      static_cast<Os::Task::ParamType>(StackSizes::LedBlinker_cmdDisp),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::LedBlinker_cmdDisp)
    );
    LedBlinker::eventLogger.start(
      static_cast<Os::Task::ParamType>(Priorities::LedBlinker_eventLogger),
      static_cast<Os::Task::ParamType>(StackSizes::LedBlinker_eventLogger),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::LedBlinker_eventLogger)
    );
    LedBlinker::tlmSend.start(
      static_cast<Os::Task::ParamType>(Priorities::LedBlinker_tlmSend),
      static_cast<Os::Task::ParamType>(StackSizes::LedBlinker_tlmSend),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::LedBlinker_tlmSend)
    );
  }

  void stopTasks(const TopologyState& state) {
    LedBlinker::cmdDisp.exit();
    LedBlinker::eventLogger.exit();
    LedBlinker::tlmSend.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) LedBlinker::cmdDisp.ActiveComponentBase::join();
    (void) LedBlinker::eventLogger.ActiveComponentBase::join();
    (void) LedBlinker::tlmSend.ActiveComponentBase::join();
  }

  void tearDownComponents(const TopologyState& state) {
    // Nothing to do
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
